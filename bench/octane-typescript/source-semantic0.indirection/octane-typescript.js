function v1409() {
  function v1408(soruceFiles) {
    function v1407(sf$$1) {
      var v1410 = sf$$1.path;
      JAM.call(resolvedFiles.push, resolvedFiles, [v1410]);
      var v1411 = sf$$1.path;
      addWatcher(v1411);
      return;
    }
    function onWatchedFileChange() {
      function v1406(f$$1) {
        var v1412 = _this$$24.ioHost;
        var v1413 = "    " + f$$1;
        return JAM.call(v1412.printLine, v1412, [v1413]);
      }
      function v1405(sf) {
        var v1414 = sf.path;
        return JAM.call(newFiles.push, newFiles, [v1414]);
      }
      var v1415 = _this$$24.compilationEnvironment;
      v1415.code = soruceFiles;
      var v1416 = _this$$24;
      var v12379;
      var v22784 = _this$$24.compilationSettings;
      var v18637 = v22784.resolve;
      if (v18637) {
        v12379 = _this$$24.resolve();
      } else {
        v12379 = _this$$24.compilationEnvironment;
      }
      v1416.resolvedEnvironment = v12379;
      var oldFiles = resolvedFiles;
      var newFiles = [];
      var v12380 = _this$$24.resolvedEnvironment;
      var v1417 = v12380.code;
      v1417.forEach(v1405);
      newFiles = newFiles.sort();
      var i$$149 = 0;
      var j$$21 = 0;
      var v18638 = oldFiles.length;
      var v12381 = i$$149 < v18638;
      if (v12381) {
        var v18639 = newFiles.length;
        v12381 = j$$21 < v18639;
      }
      var v1424 = v12381;
      for (;v1424;) {
        var v1418 = oldFiles[i$$149];
        var v1419 = newFiles[j$$21];
        var compareResult = v1418.localeCompare(v1419);
        var v1423 = compareResult == 0;
        if (v1423) {
          i$$149++;
          j$$21++;
        } else {
          var v1422 = compareResult < 0;
          if (v1422) {
            var v1420 = oldFiles[i$$149];
            removeWatcher(v1420);
            i$$149++;
          } else {
            var v1421 = newFiles[j$$21];
            addWatcher(v1421);
            j$$21++;
          }
        }
        var v18640 = oldFiles.length;
        var v12382 = i$$149 < v18640;
        if (v12382) {
          var v18641 = newFiles.length;
          v12382 = j$$21 < v18641;
        }
        v1424 = v12382;
      }
      var k$$15 = i$$149;
      var v12383 = oldFiles.length;
      var v1426 = k$$15 < v12383;
      for (;v1426;) {
        var v1425 = oldFiles[k$$15];
        removeWatcher(v1425);
        k$$15++;
        var v12384 = oldFiles.length;
        v1426 = k$$15 < v12384;
      }
      k$$15 = j$$21;
      var v12385 = newFiles.length;
      var v1428 = k$$15 < v12385;
      for (;v1428;) {
        var v1427 = newFiles[k$$15];
        addWatcher(v1427);
        k$$15++;
        var v12386 = newFiles.length;
        v1428 = k$$15 < v12386;
      }
      resolvedFiles = newFiles;
      var v1429 = _this$$24.ioHost;
      JAM.call(v1429.printLine, v1429, [""]);
      var v1430 = _this$$24.ioHost;
      var v18642 = new Date;
      var v12387 = "Recompiling (" + v18642;
      var v1431 = v12387 + "): ";
      JAM.call(v1430.printLine, v1430, [v1431]);
      resolvedFiles.forEach(v1406);
      var hasCompileErrors$$1 = _this$$24.compile();
      var v1432 = hasCompileErrors$$1;
      var v12388 = !v1432;
      if (v12388) {
        v1432 = _this$$24.hasResolveErrors;
      }
      var hasErrors$$1 = v1432;
      var v1434 = !hasErrors$$1;
      if (v1434) {
        var v12389 = _this$$24.compilationSettings;
        var v1433 = v12389.exec;
        if (v1433) {
          _this$$24.run();
        }
      }
      return;
    }
    function removeWatcher(filename$$14) {
      var v1436 = watchers[filename$$14];
      if (v1436) {
        var v1435 = watchers[filename$$14];
        v1435.close();
        delete watchers[filename$$14];
      } else {
        throw new Error("Cannot stop watching file, it is not being watched.");
      }
      return;
    }
    function addWatcher(filename$$13) {
      var v12390 = watchers[filename$$13];
      var v1438 = !v12390;
      if (v1438) {
        var v1437 = _this$$24.ioHost;
        var watcher = JAM.call(v1437.watchFile, v1437, [filename$$13, onWatchedFileChange], JAM.policy.p1);
        JAM.set(watchers, filename$$13, watcher);
      } else {
        throw new Error("Cannot watch file, it is already watched.");
      }
      return;
    }
    var _this$$24 = this;
    var v18643 = this.ioHost;
    var v12391 = v18643.watchFile;
    var v1440 = !v12391;
    if (v1440) {
      var v1439 = this.ioHost;
      JAM.call(v1439.printLine, v1439, ["Error: Current host does not support -w[atch] option"]);
      return;
    }
    var resolvedFiles = [];
    var watchers = {};
    var v1441 = this.ioHost;
    var v12392 = this.ioHost;
    v1441.stderr = v12392.stdout;
    var v12393 = this.resolvedEnvironment;
    var v1442 = v12393.code;
    v1442.forEach(v1407);
    resolvedFiles.sort();
    return;
  }
  function v1404() {
    var v12394 = this.printedVersion;
    var v1445 = !v12394;
    if (v1445) {
      var v1443 = this.ioHost;
      var v12395 = this.compilerVersion;
      var v1444 = "Version " + v12395;
      JAM.call(v1443.printLine, v1443, [v1444]);
      this.printedVersion = true;
    }
    return;
  }
  function v1403() {
    function v1402() {
      _this$$23.printVersion();
      return;
    }
    function v1401() {
      var v1446 = _this$$23.compilationSettings;
      v1446.useCaseSensitiveFileResolution = true;
      return;
    }
    function v1400() {
      _this$$23.printVersion();
      opts$$1.printUsage();
      printedUsage = true;
      return;
    }
    function v1399(type$$63) {
      type$$63 = type$$63.toLowerCase();
      var v12396 = type$$63 === "commonjs";
      var v18644 = !v12396;
      if (v18644) {
        v12396 = type$$63 === "node";
      }
      var v1452 = v12396;
      if (v1452) {
        var v1447 = TypeScript.ModuleGenTarget;
        TypeScript.moduleGenTarget = v1447.Synchronous;
      } else {
        var v1451 = type$$63 === "amd";
        if (v1451) {
          var v1448 = TypeScript.ModuleGenTarget;
          TypeScript.moduleGenTarget = v1448.Asynchronous;
        } else {
          var v1449 = _this$$23.ioHost;
          var v12397 = "Module code generation '" + type$$63;
          var v1450 = v12397 + "' not supported.  Using default 'commonjs' code generation";
          JAM.call(v1449.printLine, v1449, [v1450]);
        }
      }
      return;
    }
    function v1398(type$$62) {
      type$$62 = type$$62.toLowerCase();
      var v1458 = type$$62 === "es3";
      if (v1458) {
        var v1453 = _this$$23.compilationSettings;
        var v12398 = TypeScript.CodeGenTarget;
        v1453.codeGenTarget = v12398.ES3;
      } else {
        var v1457 = type$$62 === "es5";
        if (v1457) {
          var v1454 = _this$$23.compilationSettings;
          var v12399 = TypeScript.CodeGenTarget;
          v1454.codeGenTarget = v12399.ES5;
        } else {
          var v1455 = _this$$23.ioHost;
          var v12400 = "ECMAScript target version '" + type$$62;
          var v1456 = v12400 + "' not supported.  Using default 'ES3' code generation";
          JAM.call(v1455.printLine, v1455, [v1456]);
        }
      }
      return;
    }
    function v1397() {
      var v1459 = _this$$23.compilationSettings;
      v1459.inferPropertiesFromThisAssignment = true;
      return;
    }
    function v1396() {
      var v1460 = _this$$23.compilationSettings;
      v1460.useDefaultLib = false;
      return;
    }
    function v1395() {
      TypeScript.optimizeModuleCodeGen = false;
      return;
    }
    function v1394() {
      var v1461 = _this$$23.compilationSettings;
      v1461.canCallDefinitionSignature = true;
      return;
    }
    function v1393() {
      var v1462 = TypeScript.CompilerDiagnostics;
      v1462.debug = true;
      return;
    }
    function v1392() {
      var v1463 = _this$$23.compilationSettings;
      v1463.resolve = false;
      var v1464 = _this$$23.compilationSettings;
      v1464.preprocess = false;
      return;
    }
    function v1391() {
      var v1465 = _this$$23.compilationSettings;
      v1465.errorOnWith = false;
      return;
    }
    function v1390() {
      var v1466 = _this$$23.compilationSettings;
      v1466.controlFlow = true;
      var v1467 = _this$$23.compilationSettings;
      v1467.controlFlowUseDef = true;
      return;
    }
    function v1389() {
      var v1468 = _this$$23.compilationSettings;
      v1468.controlFlow = true;
      var v1469 = _this$$23.compilationSettings;
      v1469.printControlFlow = true;
      return;
    }
    function v1388() {
      var v1470 = _this$$23.compilationSettings;
      v1470.controlFlow = true;
      return;
    }
    function v1387() {
      var v1471 = _this$$23.compilationSettings;
      v1471.emitComments = true;
      return;
    }
    function v1386() {
      var v1472 = _this$$23.compilationSettings;
      v1472.errorRecovery = true;
      return;
    }
    function v1385() {
      var v1473 = _this$$23.compilationSettings;
      v1473.propagateConstants = true;
      return;
    }
    function v1384() {
      var v1474 = _this$$23.compilationSettings;
      v1474.minWhitespace = true;
      return;
    }
    function v1383() {
      var v1475 = _this$$23.compilationSettings;
      v1475.parseOnly = true;
      return;
    }
    function v1382() {
      var v1476 = _this$$23.compilationSettings;
      v1476.exec = true;
      return;
    }
    function v1381() {
      var v1477 = _this$$23.compilationSettings;
      v1477.watch = true;
      return;
    }
    function v1380() {
      var v1478 = _this$$23.compilationSettings;
      v1478.generateDeclarationFiles = true;
      return;
    }
    function v1379() {
      var v1479 = _this$$23.compilationSettings;
      v1479.mapSourceFiles = true;
      return;
    }
    function v1378(str$$27) {
      var v1480 = _this$$23.compilationSettings;
      JAM.call(v1480.setStyleOptions, v1480, [str$$27]);
      return;
    }
    function v1377(str$$26) {
      var v1481 = _this$$23.compilationSettings;
      v1481.outputOption = str$$26;
      return;
    }
    function v1376(s$$42) {
      var v1482 = _this$$23.ioHost;
      JAM.call(v1482.printLine, v1482, [s$$42]);
      return;
    }
    var _this$$23 = this;
    var v1483 = TypeScript.CompilerDiagnostics;
    v1483.diagnosticWriter = {Alert:v1376};
    var code$$12;
    var v1484 = this.ioHost;
    var opts$$1 = JAM.new(OptionsParser, [v1484]);
    var v1485 = {usage:"Concatenate and emit output to single file | Redirect output structure to the directory", type:"file|directory", set:v1377};
    JAM.call(opts$$1.option, opts$$1, ["out", v1485], JAM.policy.p1);
    var v1486 = {usage:'Select style checking options (examples --style requireSemi:off or --style "eqeqeq;bitwise:off")', experimental:true, set:v1378};
    JAM.call(opts$$1.option, opts$$1, ["style", v1486], JAM.policy.p1);
    var v1487 = {usage:"Generates corresponding .map file", set:v1379};
    JAM.call(opts$$1.flag, opts$$1, ["sourcemap", v1487], JAM.policy.p1);
    var v1488 = {usage:"Generates corresponding .d.ts file", set:v1380};
    JAM.call(opts$$1.flag, opts$$1, ["declaration", v1488], JAM.policy.p1);
    var v12401 = this.ioHost;
    var v1490 = v12401.watchFile;
    if (v1490) {
      var v1489 = {usage:"Watch output files", set:v1381};
      JAM.call(opts$$1.flag, opts$$1, ["watch", v1489, "w"], JAM.policy.p1);
    }
    var v1491 = {usage:"Execute the script after compilation", set:v1382};
    JAM.call(opts$$1.flag, opts$$1, ["exec", v1491, "e"], JAM.policy.p1);
    var v1492 = {usage:"Parse only", experimental:true, set:v1383};
    JAM.call(opts$$1.flag, opts$$1, ["parse", v1492], JAM.policy.p1);
    var v1493 = {usage:"Minimize whitespace", experimental:true, set:v1384};
    JAM.call(opts$$1.flag, opts$$1, ["minw", v1493, "mw"], JAM.policy.p1);
    var v1494 = {usage:"Propagate constants to emitted code", experimental:true, set:v1385};
    JAM.call(opts$$1.flag, opts$$1, ["const", v1494], JAM.policy.p1);
    var v1495 = {usage:"Enable error recovery", experimental:true, set:v1386};
    JAM.call(opts$$1.flag, opts$$1, ["errorrecovery", v1495, "er"], JAM.policy.p1);
    var v1496 = {usage:"Emit comments to output", set:v1387};
    JAM.call(opts$$1.flag, opts$$1, ["comments", v1496, "c"], JAM.policy.p1);
    var v1497 = {usage:"Control flow", experimental:true, set:v1388};
    JAM.call(opts$$1.flag, opts$$1, ["cflow", v1497], JAM.policy.p1);
    var v1498 = {usage:"Print control flow", experimental:true, set:v1389};
    JAM.call(opts$$1.flag, opts$$1, ["cflowp", v1498], JAM.policy.p1);
    var v1499 = {usage:"Print Use Def control flow", experimental:true, set:v1390};
    JAM.call(opts$$1.flag, opts$$1, ["cflowu", v1499], JAM.policy.p1);
    var v1500 = {usage:"Allow with statements", experimental:true, set:v1391};
    JAM.call(opts$$1.flag, opts$$1, ["noerroronwith", v1500], JAM.policy.p1);
    var v1501 = {usage:"Skip resolution and preprocessing", experimental:true, set:v1392};
    JAM.call(opts$$1.flag, opts$$1, ["noresolve", v1501], JAM.policy.p1);
    var v1502 = {usage:"Print debug output", experimental:true, set:v1393};
    JAM.call(opts$$1.flag, opts$$1, ["debug", v1502], JAM.policy.p1);
    var v1503 = {usage:"Allows you to call the definition signature of an overload group", experimental:true, set:v1394};
    JAM.call(opts$$1.flag, opts$$1, ["canCallDefinitionSignature", v1503], JAM.policy.p1);
    var v1504 = {usage:"Do not optimize module codegen", experimental:true, set:v1395};
    JAM.call(opts$$1.flag, opts$$1, ["nooptimizemodules", v1504], JAM.policy.p1);
    var v1505 = {usage:"Do not include a default lib.d.ts with global declarations", set:v1396};
    JAM.call(opts$$1.flag, opts$$1, ["nolib", v1505], JAM.policy.p1);
    var v1506 = {usage:"Infer class properties from top-level assignments to 'this'", experimental:true, set:v1397};
    JAM.call(opts$$1.flag, opts$$1, ["inferProperties", v1506], JAM.policy.p1);
    var v1507 = {usage:'Specify ECMAScript target version: "ES3" (default), or "ES5"', type:"VER", set:v1398};
    JAM.call(opts$$1.option, opts$$1, ["target", v1507], JAM.policy.p1);
    var v1508 = {usage:'Specify module code generation: "commonjs" (default) or "amd"', type:"kind", set:v1399};
    JAM.call(opts$$1.option, opts$$1, ["module", v1508], JAM.policy.p1);
    var printedUsage = false;
    var v1509 = {usage:"Print this message", set:v1400};
    JAM.call(opts$$1.flag, opts$$1, ["help", v1509, "h"], JAM.policy.p1);
    var v1510 = {usage:"Force file resolution to be case sensitive", experimental:true, set:v1401};
    JAM.call(opts$$1.flag, opts$$1, ["useCaseSensitiveFileResolution", v1510], JAM.policy.p1);
    var v18645 = this.compilerVersion;
    var v12402 = "Print the compiler's version: " + v18645;
    var v1511 = {usage:v12402, set:v1402};
    JAM.call(opts$$1.flag, opts$$1, ["version", v1511, "v"], JAM.policy.p1);
    var v12403 = this.ioHost;
    var v1512 = v12403.arguments;
    JAM.call(opts$$1.parse, opts$$1, [v1512]);
    var v12404 = this.compilationSettings;
    var v1519 = v12404.useDefaultLib;
    if (v1519) {
      var v1513 = this.ioHost;
      var compilerFilePath = v1513.getExecutingFilePath();
      var v1514 = this.ioHost;
      var binDirPath = JAM.call(v1514.dirName, v1514, [compilerFilePath]);
      var v1515 = this.ioHost;
      var v1516 = binDirPath + "/lib.d.ts";
      var libStrPath = JAM.call(v1515.resolvePath, v1515, [v1516]);
      var v1517 = TypeScript.SourceUnit;
      code$$12 = JAM.new(v1517, [libStrPath, null]);
      var v12405 = this.compilationEnvironment;
      var v1518 = v12405.code;
      JAM.call(v1518.push, v1518, [code$$12]);
    }
    var i$$148 = 0;
    var v18646 = opts$$1.unnamed;
    var v12406 = v18646.length;
    var v1523 = i$$148 < v12406;
    for (;v1523;) {
      var v1520 = TypeScript.SourceUnit;
      var v12407 = opts$$1.unnamed;
      var v1521 = v12407[i$$148];
      code$$12 = JAM.new(v1520, [v1521, null]);
      var v12408 = this.compilationEnvironment;
      var v1522 = v12408.code;
      JAM.call(v1522.push, v1522, [code$$12]);
      i$$148++;
      var v18647 = opts$$1.unnamed;
      var v12409 = v18647.length;
      v1523 = i$$148 < v12409;
    }
    var v22785 = this.compilationEnvironment;
    var v18648 = v22785.code;
    var v12410 = v18648.length;
    var v18649;
    var v24811 = this.compilationSettings;
    var v22786 = v24811.useDefaultLib;
    if (v22786) {
      v18649 = 1;
    } else {
      v18649 = 0;
    }
    var v12411 = v18649;
    var v1526 = v12410 == v12411;
    if (v1526) {
      var v12412 = !printedUsage;
      if (v12412) {
        var v18650 = this.printedVersion;
        v12412 = !v18650;
      }
      var v1525 = v12412;
      if (v1525) {
        this.printVersion();
        opts$$1.printUsage();
        var v1524 = this.ioHost;
        JAM.call(v1524.quit, v1524, [1]);
      }
      return;
    }
    var sourceFiles = [];
    var v12413 = this.compilationSettings;
    var v1528 = v12413.watch;
    if (v1528) {
      var v12414 = this.compilationEnvironment;
      var v1527 = v12414.code;
      sourceFiles = v1527.slice(0);
    }
    var v1529;
    var v18651 = this.compilationSettings;
    var v12415 = v18651.resolve;
    if (v12415) {
      v1529 = this.resolve();
    } else {
      v1529 = this.compilationEnvironment;
    }
    this.resolvedEnvironment = v1529;
    var hasCompileErrors = this.compile();
    var v1530 = hasCompileErrors;
    var v12416 = !v1530;
    if (v12416) {
      v1530 = this.hasResolveErrors;
    }
    var hasErrors = v1530;
    var v1532 = !hasErrors;
    if (v1532) {
      var v12417 = this.compilationSettings;
      var v1531 = v12417.exec;
      if (v1531) {
        this.run();
      }
    }
    var v12418 = this.compilationSettings;
    var v1535 = v12418.watch;
    if (v1535) {
      JAM.call(this.watchFiles, this, [sourceFiles]);
    } else {
      var v1533 = this.ioHost;
      var v12419;
      if (hasErrors) {
        v12419 = 1;
      } else {
        v12419 = 0;
      }
      var v1534 = v12419;
      JAM.call(v1533.quit, v1533, [v1534]);
    }
    return;
  }
  function v1375() {
    var i$$147 = 0;
    var v22787 = this.compilationEnvironment;
    var v18652 = v22787.code;
    var v12420 = v18652.length;
    var v1542 = i$$147 < v12420;
    for (;v1542;) {
      var v12421 = this.compilationEnvironment;
      var v1536 = v12421.code;
      var unit = v1536[i$$147];
      var outputFileName = unit.path;
      var v1538 = JAM.call(TypeScript.isTSFile, TypeScript, [outputFileName]);
      if (v1538) {
        outputFileName = JAM.call(outputFileName.replace, outputFileName, [/\.ts$/, ".js"], JAM.policy.p1);
      } else {
        var v1537 = JAM.call(TypeScript.isSTRFile, TypeScript, [outputFileName]);
        if (v1537) {
          outputFileName = JAM.call(outputFileName.replace, outputFileName, [/\.str$/, ".js"], JAM.policy.p1);
        }
      }
      var v12422 = this.ioHost;
      var v1541 = JAM.call(v12422.fileExists, v12422, [outputFileName]);
      if (v1541) {
        var v1539 = this.ioHost;
        var unitRes = JAM.call(v1539.readFile, v1539, [outputFileName]);
        var v1540 = this.ioHost;
        JAM.call(v1540.run, v1540, [unitRes, outputFileName], JAM.policy.p1);
      }
      i$$147++;
      var v22788 = this.compilationEnvironment;
      var v18653 = v22788.code;
      var v12423 = v18653.length;
      v1542 = i$$147 < v12423;
    }
    return;
  }
  function v1374() {
    function v1373(fileName$$10, useUTF8$$5) {
      var v1543 = _this$$22.ioHost;
      return JAM.call(IOUtils.createFileAndFolderStructure, IOUtils, [v1543, fileName$$10, useUTF8$$5], JAM.policy.p1);
    }
    function v1372(minChar$$37, charLen$$2, message$$23, unitIndex$$15) {
      var v1544 = compiler$$3.errorReporter;
      v1544.hasErrors = true;
      var v18654 = _this$$22.resolvedEnvironment;
      var v12424 = v18654.code;
      var v1545 = v12424[unitIndex$$15];
      var fname$$9 = v1545.path;
      var lineCol$$6 = {line:-1, col:-1};
      var v1546 = compiler$$3.parser;
      JAM.call(v1546.getSourceLineCol, v1546, [lineCol$$6, minChar$$37], JAM.policy.p1);
      var v24812 = fname$$9 + " (";
      var v24813 = lineCol$$6.line;
      var v22789 = v24812 + v24813;
      var v18655 = v22789 + ",";
      var v22790 = lineCol$$6.col;
      var v18656 = v22790 + 1;
      var v12425 = v18655 + v18656;
      var v1547 = v12425 + "): ";
      var msg$$4 = v1547 + message$$23;
      var v12426 = _this$$22.compilationSettings;
      var v1549 = v12426.errorRecovery;
      if (v1549) {
        var v12427 = _this$$22.ioHost;
        var v1548 = v12427.stderr;
        JAM.call(v1548.WriteLine, v1548, [msg$$4]);
      } else {
        throw new SyntaxError(msg$$4);
      }
      return;
    }
    function consumeUnit(code$$11) {
      var addAsResident = false;
      try {
        var v18657 = _this$$22.compilationSettings;
        var v12428 = v18657.resolve;
        var v1555 = !v12428;
        if (v1555) {
          var v1550 = _this$$22.ioHost;
          var v1551 = code$$11.path;
          var v26435 = JAM.call(v1550.readFile, v1550, [v1551]);
          code$$11.content = v26435;
          var v12429 = _this$$22.compilationSettings;
          var v1554 = v12429.generateDeclarationFiles;
          if (v1554) {
            var v1552 = TypeScript.CompilerDiagnostics;
            var v12430 = code$$11.referencedFiles;
            var v1553 = v12430 == null;
            JAM.call(v1552.assert, v1552, [v1553, "With no resolve option, referenced files need to null"], JAM.policy.p1);
            var v26436 = JAM.call(TypeScript.getReferencedFiles, TypeScript, [code$$11]);
            code$$11.referencedFiles = v26436;
          }
        }
        var v1565 = code$$11.content;
        if (v1565) {
          var v12431 = _this$$22.compilationSettings;
          var v1564 = v12431.parseOnly;
          if (v1564) {
            var v1556 = code$$11.content;
            var v1557 = code$$11.path;
            JAM.call(compiler$$3.parseUnit, compiler$$3, [v1556, v1557], JAM.policy.p1);
          } else {
            var v12432 = _this$$22.compilationSettings;
            var v1560 = v12432.errorRecovery;
            if (v1560) {
              var v1558 = compiler$$3.parser;
              var v12433 = _this$$22.ioHost;
              var v1559 = v12433.stderr;
              JAM.call(v1558.setErrorRecovery, v1558, [v1559]);
            }
            var v1561 = code$$11.content;
            var v1562 = code$$11.path;
            var v1563 = code$$11.referencedFiles;
            JAM.call(compiler$$3.addUnit, compiler$$3, [v1561, v1562, addAsResident, v1563], JAM.policy.p1);
          }
        }
      } catch (err$$7) {
        var v1566 = compiler$$3.errorReporter;
        v1566.hasErrors = true;
        var v12434 = _this$$22.ioHost;
        var v1567 = v12434.stderr;
        var v1568 = err$$7.message;
        JAM.call(v1567.WriteLine, v1567, [v1568]);
      }
      return;
    }
    var _this$$22 = this;
    var compiler$$3;
    var v1569 = TypeScript.TypeScriptCompiler;
    var v12435 = this.ioHost;
    var v1570 = v12435.stderr;
    var v12436 = TypeScript.NullLogger;
    var v1571 = new v12436;
    var v1572 = this.compilationSettings;
    compiler$$3 = JAM.new(v1569, [v1570, v1571, v1572]);
    var v12437 = this.ioHost;
    var v1573 = v12437.stderr;
    JAM.call(compiler$$3.setErrorOutput, compiler$$3, [v1573]);
    JAM.call(compiler$$3.setErrorCallback, compiler$$3, [v1372]);
    var v12438 = this.compilationSettings;
    var v1574 = v12438.emitComments;
    if (v1574) {
      compiler$$3.emitCommentsToOutput();
    }
    var iCode = 0;
    var v22791 = this.resolvedEnvironment;
    var v18658 = v22791.code;
    var v12439 = v18658.length;
    var v1577 = iCode < v12439;
    for (;v1577;) {
      var v22792 = this.compilationSettings;
      var v18659 = v22792.parseOnly;
      var v12440 = !v18659;
      var v18660 = !v12440;
      if (v18660) {
        v12440 = iCode > 0;
      }
      var v1576 = v12440;
      if (v1576) {
        var v18661 = this.resolvedEnvironment;
        var v12441 = v18661.code;
        var v1575 = v12441[iCode];
        consumeUnit(v1575);
      }
      iCode++;
      var v22793 = this.resolvedEnvironment;
      var v18662 = v22793.code;
      var v12442 = v18662.length;
      v1577 = iCode < v12442;
    }
    var v12443 = this.ioHost;
    var v1578 = v12443.directoryExists;
    var v12444 = this.ioHost;
    var v1579 = v12444.fileExists;
    var v12445 = this.ioHost;
    var v1580 = v12445.resolvePath;
    var emitterIOHost = {createFile:v1373, directoryExists:v1578, fileExists:v1579, resolvePath:v1580};
    try {
      var v18663 = this.compilationSettings;
      var v12446 = v18663.parseOnly;
      var v1581 = !v12446;
      if (v1581) {
        compiler$$3.typeCheck();
        JAM.call(compiler$$3.emit, compiler$$3, [emitterIOHost]);
        compiler$$3.emitDeclarations();
      } else {
        JAM.call(compiler$$3.emitAST, compiler$$3, [emitterIOHost]);
      }
    } catch (err$$8) {
      var v1582 = compiler$$3.errorReporter;
      v1582.hasErrors = true;
      var v12447 = err$$8.message;
      var v1583 = v12447 != "EmitError";
      if (v1583) {
        throw err$$8;
      }
    }
    var v1584 = compiler$$3.errorReporter;
    return v1584.hasErrors;
  }
  function v1371() {
    var v1585 = TypeScript.CodeResolver;
    var v1586 = this.compilationEnvironment;
    var resolver$$1 = JAM.new(v1585, [v1586]);
    var v1587 = this.compilationSettings;
    var commandLineHost = JAM.new(CommandLineHost, [v1587]);
    var v1588 = this.compilationEnvironment;
    var ret$$2 = JAM.call(commandLineHost.resolveCompilationEnvironment, commandLineHost, [v1588, resolver$$1], JAM.policy.p1);
    this.hasResolveErrors = false;
    var i$$146 = 0;
    var v22794 = this.compilationEnvironment;
    var v18664 = v22794.code;
    var v12448 = v18664.length;
    var v1596 = i$$146 < v12448;
    for (;v1596;) {
      var v25692 = this.compilationEnvironment;
      var v24814 = v25692.code;
      var v22795 = v24814[i$$146];
      var v18665 = v22795.path;
      var v12449 = JAM.call(commandLineHost.isResolved, commandLineHost, [v18665]);
      var v1595 = !v12449;
      if (v1595) {
        this.hasResolveErrors = true;
        var v18666 = this.compilationEnvironment;
        var v12450 = v18666.code;
        var v1589 = v12450[i$$146];
        var path$$45 = v1589.path;
        var v24815 = JAM.call(TypeScript.isSTRFile, TypeScript, [path$$45]);
        var v22796 = !v24815;
        if (v22796) {
          var v24816 = JAM.call(TypeScript.isDSTRFile, TypeScript, [path$$45]);
          v22796 = !v24816;
        }
        var v18667 = v22796;
        if (v18667) {
          var v22797 = JAM.call(TypeScript.isTSFile, TypeScript, [path$$45]);
          v18667 = !v22797;
        }
        var v12451 = v18667;
        if (v12451) {
          var v18668 = JAM.call(TypeScript.isDTSFile, TypeScript, [path$$45]);
          v12451 = !v18668;
        }
        var v1594 = v12451;
        if (v1594) {
          var v12452 = this.ioHost;
          var v1590 = v12452.stderr;
          var v12453 = 'Unknown extension for file: "' + path$$45;
          var v1591 = v12453 + '". Only .ts and .d.ts extensions are allowed.';
          JAM.call(v1590.WriteLine, v1590, [v1591]);
        } else {
          var v12454 = this.ioHost;
          var v1592 = v12454.stderr;
          var v12455 = 'Error reading file "' + path$$45;
          var v1593 = v12455 + '": File not found';
          JAM.call(v1592.WriteLine, v1592, [v1593]);
        }
      }
      i$$146++;
      var v22798 = this.compilationEnvironment;
      var v18669 = v22798.code;
      var v12456 = v18669.length;
      v1596 = i$$146 < v12456;
    }
    return ret$$2;
  }
  function BatchCompiler$$1(ioHost$$7) {
    this.ioHost = ioHost$$7;
    this.resolvedEnvironment = null;
    this.hasResolveErrors = false;
    this.compilerVersion = "0.8.2.0";
    this.printedVersion = false;
    var v1597 = TypeScript.CompilationSettings;
    var v26437 = new v1597;
    this.compilationSettings = v26437;
    var v1598 = TypeScript.CompilationEnvironment;
    var v1599 = this.compilationSettings;
    var v1600 = this.ioHost;
    var v26438 = JAM.new(v1598, [v1599, v1600]);
    this.compilationEnvironment = v26438;
    return;
  }
  var v1601 = BatchCompiler$$1.prototype;
  v1601.resolve = v1371;
  var v1602 = BatchCompiler$$1.prototype;
  v1602.compile = v1374;
  var v1603 = BatchCompiler$$1.prototype;
  v1603.run = v1375;
  var v1604 = BatchCompiler$$1.prototype;
  v1604.batchCompile = v1403;
  var v1605 = BatchCompiler$$1.prototype;
  v1605.printVersion = v1404;
  var v1606 = BatchCompiler$$1.prototype;
  v1606.watchFiles = v1408;
  return BatchCompiler$$1;
}
function v1370() {
  function v1369(preEnv, resolver) {
    function v1368(path$$44, code$$10) {
      var pathId = JAM.call(_this$$21.getPathIdentifier, _this$$21, [path$$44]);
      var v18670 = _this$$21.resolvedPaths;
      var v12457 = v18670[pathId];
      var v1609 = !v12457;
      if (v1609) {
        var v1607 = resolvedEnv.code;
        JAM.call(v1607.push, v1607, [code$$10]);
        var v1608 = _this$$21.resolvedPaths;
        v1608[pathId] = true;
      }
      return;
    }
    function postResolutionError(errorFile, errorMessage$$1) {
      var v1610 = TypeScript.CompilerDiagnostics;
      var v18671 = "Could not resolve file '" + errorFile;
      var v12458 = v18671 + "'";
      var v18672;
      var v22799 = errorMessage$$1 == "";
      if (v22799) {
        v18672 = "";
      } else {
        v18672 = ": " + errorMessage$$1;
      }
      var v12459 = v18672;
      var v1611 = v12458 + v12459;
      JAM.call(v1610.debugPrint, v1610, [v1611]);
      return;
    }
    var traceDependencies = true;
    var _this$$21 = this;
    var v1612 = TypeScript.CompilationEnvironment;
    var v1613 = preEnv.compilationSettings;
    var v1614 = preEnv.ioHost;
    var resolvedEnv = JAM.new(v1612, [v1613, v1614]);
    var v1615 = preEnv.code;
    var nCode = v1615.length;
    var path$$43 = "";
    var resolutionDispatcher$$1 = {postResolutionError:postResolutionError, postResolution:v1368};
    var i$$145 = 0;
    var v1619 = i$$145 < nCode;
    for (;v1619;) {
      var v12460 = preEnv.ioHost;
      var v22800 = preEnv.code;
      var v18673 = v22800[i$$145];
      var v12461 = v18673.path;
      var v1616 = JAM.call(v12460.resolvePath, v12460, [v12461]);
      path$$43 = JAM.call(TypeScript.switchToForwardSlashes, TypeScript, [v1616]);
      var v1617 = this.pathMap;
      var v18674 = preEnv.code;
      var v12462 = v18674[i$$145];
      var v1618 = v12462.path;
      JAM.set(v1617, v1618, path$$43);
      JAM.call(resolver.resolveCode, resolver, [path$$43, "", false, resolutionDispatcher$$1], JAM.policy.p1);
      i$$145++;
      v1619 = i$$145 < nCode;
    }
    return resolvedEnv;
  }
  function v1367(path$$42) {
    var v12463 = this.resolvedPaths;
    var v22801 = this.pathMap;
    var v18675 = v22801[path$$42];
    var v12464 = JAM.call(this.getPathIdentifier, this, [v18675]);
    var v1620 = v12463[v12464];
    return v1620 != undefined;
  }
  function v1366(path$$41) {
    var v1621;
    var v18676 = this.compilationSettings;
    var v12465 = v18676.useCaseSensitiveFileResolution;
    if (v12465) {
      v1621 = path$$41;
    } else {
      v1621 = path$$41.toLocaleUpperCase();
    }
    return v1621;
  }
  function CommandLineHost$$1(compilationSettings$$1) {
    this.compilationSettings = compilationSettings$$1;
    this.pathMap = {};
    this.resolvedPaths = {};
    return;
  }
  var v1622 = CommandLineHost$$1.prototype;
  v1622.getPathIdentifier = v1366;
  var v1623 = CommandLineHost$$1.prototype;
  v1623.isResolved = v1367;
  var v1624 = CommandLineHost$$1.prototype;
  v1624.resolveCompilationEnvironment = v1369;
  return CommandLineHost$$1;
}
function v1365() {
  function v1364(args$$19) {
    var position$$5 = 0;
    var v12466 = args$$19.length;
    var v1635 = position$$5 < v12466;
    for (;v1635;) {
      var v1625 = position$$5;
      position$$5 = position$$5 + 1;
      var current$$4 = args$$19[v1625];
      var match$$3 = current$$4.match(/^(--?|@)(.*)/);
      var value$$43 = null;
      if (match$$3) {
        var v12467 = match$$3[1];
        var v1633 = v12467 === "@";
        if (v1633) {
          var v12468 = this.host;
          var v12469 = match$$3[2];
          var v1626 = JAM.call(v12468.readFile, v12468, [v12469]);
          JAM.call(this.parseString, this, [v1626]);
        } else {
          var arg$$11 = match$$3[2];
          var option$$1 = JAM.call(this.findOption, this, [arg$$11]);
          var v1632 = option$$1 === null;
          if (v1632) {
            var v1627 = this.host;
            var v12470 = "Unknown option '" + arg$$11;
            var v1628 = v12470 + "'";
            JAM.call(v1627.printLine, v1627, [v1628]);
            var v1629 = this.host;
            JAM.call(v1629.printLine, v1629, ["Use the '--help' flag to see options"]);
          } else {
            var v12471 = option$$1.flag;
            var v1631 = !v12471;
            if (v1631) {
              var v1630 = position$$5;
              position$$5 = position$$5 + 1;
              value$$43 = args$$19[v1630];
            }
            JAM.call(option$$1.set, option$$1, [value$$43]);
          }
        }
      } else {
        var v1634 = this.unnamed;
        JAM.call(v1634.push, v1634, [current$$4]);
      }
      var v12472 = args$$19.length;
      v1635 = position$$5 < v12472;
    }
    return;
  }
  function v1363(argString) {
    var position$$4 = 0;
    var tokens = argString.match(/\s+|"|[^\s"]+/g);
    var args$$18 = [];
    var currentArg = "";
    var v12473 = tokens.length;
    var v1645 = position$$4 < v12473;
    for (;v1645;) {
      var token$$7 = tokens[position$$4];
      var v1644 = token$$7 === '"';
      if (v1644) {
        var JSCompiler_temp_const$$39 = currentArg;
        var JSCompiler_inline_result$$40;
        var value$$inline_41 = "";
        var v1636 = position$$4;
        position$$4 = position$$4 + 1;
        tokens[v1636];
        var token$$inline_42 = tokens[position$$4];
        var v12474 = token$$inline_42;
        if (v12474) {
          v12474 = token$$inline_42 !== '"';
        }
        var v1638 = v12474;
        for (;v1638;) {
          var v1637 = position$$4;
          position$$4 = position$$4 + 1;
          tokens[v1637];
          value$$inline_41 = value$$inline_41 + token$$inline_42;
          token$$inline_42 = tokens[position$$4];
          var v12475 = token$$inline_42;
          if (v12475) {
            v12475 = token$$inline_42 !== '"';
          }
          v1638 = v12475;
        }
        var v1639 = position$$4;
        position$$4 = position$$4 + 1;
        tokens[v1639];
        JSCompiler_inline_result$$40 = value$$inline_41;
        currentArg = JSCompiler_temp_const$$39 + JSCompiler_inline_result$$40;
      } else {
        var v1643 = token$$7.match(/\s/);
        if (v1643) {
          var v12476 = currentArg.length;
          var v1640 = v12476 > 0;
          if (v1640) {
            JAM.call(args$$18.push, args$$18, [currentArg]);
            currentArg = "";
          }
          var v1641 = position$$4;
          position$$4 = position$$4 + 1;
          tokens[v1641];
        } else {
          var v1642 = position$$4;
          position$$4 = position$$4 + 1;
          tokens[v1642];
          currentArg = currentArg + token$$7;
        }
      }
      var v12477 = tokens.length;
      v1645 = position$$4 < v12477;
    }
    var v12478 = currentArg.length;
    var v1646 = v12478 > 0;
    if (v1646) {
      JAM.call(args$$18.push, args$$18, [currentArg]);
    }
    JAM.call(this.parse, this, [args$$18]);
    return;
  }
  function v1362(name$$91, config$$2, short$$1) {
    var v1647 = !config$$2;
    if (v1647) {
      config$$2 = short$$1;
      short$$1 = null;
    }
    config$$2.name = name$$91;
    config$$2.short = short$$1;
    config$$2.flag = true;
    var v1648 = this.options;
    JAM.call(v1648.push, v1648, [config$$2]);
    return;
  }
  function v1361(name$$90, config$$1) {
    var short;
    var v1649 = !config$$1;
    if (v1649) {
      config$$1 = short;
      short = null;
    }
    config$$1.name = name$$90;
    config$$1.short = short;
    config$$1.flag = false;
    var v1650 = this.options;
    JAM.call(v1650.push, v1650, [config$$1]);
    return;
  }
  function v1360() {
    function v1359(a$$9, b$$15) {
      var v1651 = a$$9.name;
      var aName = v1651.toLowerCase();
      var v1652 = b$$15.name;
      var bName = v1652.toLowerCase();
      var v1654 = aName > bName;
      if (v1654) {
        return 1;
      } else {
        var v1653 = aName < bName;
        if (v1653) {
          return -1;
        } else {
          return 0;
        }
      }
      return;
    }
    var v1655 = this.host;
    JAM.call(v1655.printLine, v1655, ["Syntax:   tsc [options] [file ..]"]);
    var v1656 = this.host;
    JAM.call(v1656.printLine, v1656, [""]);
    var v1657 = this.host;
    JAM.call(v1657.printLine, v1657, ["Examples: tsc hello.ts"]);
    var v1658 = this.host;
    JAM.call(v1658.printLine, v1658, ["          tsc --out foo.js foo.ts"]);
    var v1659 = this.host;
    JAM.call(v1659.printLine, v1659, ["          tsc @args.txt"]);
    var v1660 = this.host;
    JAM.call(v1660.printLine, v1660, [""]);
    var v1661 = this.host;
    JAM.call(v1661.printLine, v1661, ["Options:"]);
    var output$$1 = [];
    var maxLength = 0;
    var v1662 = this.options;
    var v26439 = v1662.sort(v1359);
    this.options = v26439;
    var i$$144 = 0;
    var v18677 = this.options;
    var v12479 = v18677.length;
    var v1670 = i$$144 < v12479;
    for (;v1670;) {
      var v1663 = this.options;
      var option = v1663[i$$144];
      var v1664 = option.experimental;
      if (v1664) {
        i$$144++;
        var v18678 = this.options;
        var v12480 = v18678.length;
        v1670 = i$$144 < v12480;
        continue;
      }
      var v12481 = option.usage;
      var v1665 = !v12481;
      if (v1665) {
        break;
      }
      var usageString = "  ";
      var v1666;
      var v12483 = option.type;
      if (v12483) {
        var v18679 = option.type;
        var v12482 = v18679.toUpperCase();
        v1666 = " " + v12482;
      } else {
        v1666 = "";
      }
      var type$$61 = v1666;
      var v1667 = option.short;
      if (v1667) {
        var v24817 = this.DEFAULT_SHORT_FLAG;
        var v24818 = option.short;
        var v22802 = v24817 + v24818;
        var v18680 = v22802 + type$$61;
        var v12484 = v18680 + ", ";
        usageString = usageString + v12484;
      }
      var v22803 = this.DEFAULT_LONG_FLAG;
      var v22804 = option.name;
      var v18681 = v22803 + v22804;
      var v12485 = v18681 + type$$61;
      usageString = usageString + v12485;
      var v12486 = option.usage;
      var v1668 = [usageString, v12486];
      JAM.call(output$$1.push, output$$1, [v1668]);
      var v12487 = usageString.length;
      var v1669 = v12487 > maxLength;
      if (v1669) {
        maxLength = usageString.length;
      }
      i$$144++;
      var v18682 = this.options;
      var v12488 = v18682.length;
      v1670 = i$$144 < v12488;
    }
    var v1671 = ["  @<file>", "Insert command line options and files from a file."];
    JAM.call(output$$1.push, output$$1, [v1671]);
    i$$144 = 0;
    var v12489 = output$$1.length;
    var v1674 = i$$144 < v12489;
    for (;v1674;) {
      var v1672 = this.host;
      var v22805 = output$$1[i$$144];
      var v18683 = v22805[0];
      var v26351 = output$$1[i$$144];
      var v26261 = v26351[0];
      var v26082 = v26261.length;
      var v25693 = maxLength - v26082;
      var v24819 = v25693 + 3;
      var v22806 = new Array(v24819);
      var v18684 = v22806.join(" ");
      var v12490 = v18683 + v18684;
      var v18685 = output$$1[i$$144];
      var v12491 = v18685[1];
      var v1673 = v12490 + v12491;
      JAM.call(v1672.printLine, v1672, [v1673]);
      i$$144++;
      var v12492 = output$$1.length;
      v1674 = i$$144 < v12492;
    }
    return;
  }
  function v1358(arg$$10) {
    var i$$143 = 0;
    var v18686 = this.options;
    var v12493 = v18686.length;
    var v1677 = i$$143 < v12493;
    for (;v1677;) {
      var v24820 = this.options;
      var v22807 = v24820[i$$143];
      var v18687 = v22807.short;
      var v12494 = arg$$10 === v18687;
      var v18689 = !v12494;
      if (v18689) {
        var v24821 = this.options;
        var v22808 = v24821[i$$143];
        var v18688 = v22808.name;
        v12494 = arg$$10 === v18688;
      }
      var v1676 = v12494;
      if (v1676) {
        var v1675 = this.options;
        return v1675[i$$143];
      }
      i$$143++;
      var v18690 = this.options;
      var v12495 = v18690.length;
      v1677 = i$$143 < v12495;
    }
    return null;
  }
  function OptionsParser$$1(host) {
    this.host = host;
    this.DEFAULT_SHORT_FLAG = "-";
    this.DEFAULT_LONG_FLAG = "--";
    this.unnamed = [];
    this.options = [];
    return;
  }
  var v1678 = OptionsParser$$1.prototype;
  v1678.findOption = v1358;
  var v1679 = OptionsParser$$1.prototype;
  v1679.printUsage = v1360;
  var v1680 = OptionsParser$$1.prototype;
  v1680.option = v1361;
  var v1681 = OptionsParser$$1.prototype;
  v1681.flag = v1362;
  var v1682 = OptionsParser$$1.prototype;
  v1682.parseString = v1363;
  var v1683 = OptionsParser$$1.prototype;
  v1683.parse = v1364;
  return OptionsParser$$1;
}
function v1357() {
  function getWindowsScriptHostIO() {
    function v1331(exitCode) {
      var v12496 = typeof exitCode;
      var v1684 = v12496 === "undefined";
      if (v1684) {
        exitCode = 0;
      }
      try {
        JAM.call(WScript.Quit, WScript, [exitCode]);
      } catch (e$$16) {
      }
      return;
    }
    function v1330() {
      return WScript.ScriptFullName;
    }
    function v1329(source$$4, filename$$10) {
      try {
        if (JAM.isEval(eval)) {
          eval("introspect(JAM.policy.pFull) { " + source$$4 + " }");
        } else {
          JAM.call(eval, null, [source$$4]);
        }
      } catch (e$$15) {
        var v12497 = "Error while executing file '" + filename$$10;
        var v1685 = v12497 + "'.";
        JAM.call(IOUtils.throwIOError, IOUtils, [v1685, e$$15], JAM.policy.p1);
      }
      return;
    }
    function v1328(str$$17) {
      JAM.call(WScript.Echo, WScript, [str$$17]);
      return;
    }
    function v1327(str$$16) {
      var v1686 = WScript.StdOut;
      JAM.call(v1686.Write, v1686, [str$$16]);
      return;
    }
    function v1326(path$$30, spec, options$$8) {
      function filesInFolder(folder$$1, root) {
        var paths$$1 = [];
        var fc;
        var v1690 = options$$8.recursive;
        if (v1690) {
          var v1687 = folder$$1.subfolders;
          fc = new Enumerator(v1687);
          var v12498 = fc.atEnd();
          var v1689 = !v12498;
          for (;v1689;) {
            var v12499 = fc.item();
            var v18691 = root + "/";
            var v22809 = fc.item();
            var v18692 = v22809.Name;
            var v12500 = v18691 + v18692;
            var v1688 = filesInFolder(v12499, v12500);
            paths$$1 = paths$$1.concat(v1688);
            fc.moveNext();
            var v12501 = fc.atEnd();
            v1689 = !v12501;
          }
        }
        var v1691 = folder$$1.files;
        fc = new Enumerator(v1691);
        var v12502 = fc.atEnd();
        var v1694 = !v12502;
        for (;v1694;) {
          var v12503 = !spec;
          var v18694 = !v12503;
          if (v18694) {
            var v22810 = fc.item();
            var v18693 = v22810.Name;
            v12503 = v18693.match(spec);
          }
          var v1693 = v12503;
          if (v1693) {
            var v12504 = root + "/";
            var v18695 = fc.item();
            var v12505 = v18695.Name;
            var v1692 = v12504 + v12505;
            JAM.call(paths$$1.push, paths$$1, [v1692]);
          }
          fc.moveNext();
          var v12506 = fc.atEnd();
          v1694 = !v12506;
        }
        return paths$$1;
      }
      options$$8 = options$$8 || {};
      var folder = JAM.call(fso.GetFolder, fso, [path$$30]);
      var paths = [];
      return filesInFolder(folder, path$$30);
    }
    function v1325(path$$29) {
      try {
        var v12507 = JAM.call(this.directoryExists, this, [path$$29]);
        var v1695 = !v12507;
        if (v1695) {
          JAM.call(fso.CreateFolder, fso, [path$$29]);
        }
      } catch (e$$14) {
        var v12508 = "Couldn't create directory '" + path$$29;
        var v1696 = v12508 + "'.";
        JAM.call(IOUtils.throwIOError, IOUtils, [v1696, e$$14], JAM.policy.p1);
      }
      return;
    }
    function v1324(path$$28) {
      return JAM.call(fso.FolderExists, fso, [path$$28]);
    }
    function v1323(path$$27, useUTF8$$3) {
      function v1322() {
        try {
          JAM.call(streamObj$$1.SaveToFile, streamObj$$1, [path$$27, 2], JAM.policy.p1);
        } catch (saveError) {
          var v12509 = "Couldn't write to file '" + path$$27;
          var v1697 = v12509 + "'.";
          JAM.call(IOUtils.throwIOError, IOUtils, [v1697, saveError], JAM.policy.p1);
        } finally {
          var v12510 = streamObj$$1.State;
          var v1698 = v12510 != 0;
          if (v1698) {
            streamObj$$1.Close();
          }
          JAM.call(streamObjectPool.push, streamObjectPool, [streamObj$$1]);
        }
        return;
      }
      function v1321(str$$15) {
        JAM.call(streamObj$$1.WriteText, streamObj$$1, [str$$15, 1], JAM.policy.p1);
        return;
      }
      function v1320(str$$14) {
        JAM.call(streamObj$$1.WriteText, streamObj$$1, [str$$14, 0], JAM.policy.p1);
        return;
      }
      try {
        var streamObj$$1 = getStreamObject();
        var v1699;
        if (useUTF8$$3) {
          v1699 = "utf-8";
        } else {
          v1699 = "x-ansi";
        }
        streamObj$$1.Charset = v1699;
        streamObj$$1.Open();
        return {Write:v1320, WriteLine:v1321, Close:v1322};
      } catch (creationError) {
        var v12511 = "Couldn't write to file '" + path$$27;
        var v1700 = v12511 + "'.";
        JAM.call(IOUtils.throwIOError, IOUtils, [v1700, creationError], JAM.policy.p1);
      }
      return;
    }
    function v1319(path$$26) {
      try {
        var v1701 = JAM.call(fso.FileExists, fso, [path$$26]);
        if (v1701) {
          JAM.call(fso.DeleteFile, fso, [path$$26, true], JAM.policy.p1);
        }
      } catch (e$$13) {
        var v12512 = "Couldn't delete file '" + path$$26;
        var v1702 = v12512 + "'.";
        JAM.call(IOUtils.throwIOError, IOUtils, [v1702, e$$13], JAM.policy.p1);
      }
      return;
    }
    function v1318(rootPath, partialFilePath) {
      var v12513 = JAM.call(fso.GetAbsolutePathName, fso, [rootPath]);
      var v1703 = v12513 + "/";
      var path$$25 = v1703 + partialFilePath;
      for (;true;) {
        var v1706 = JAM.call(fso.FileExists, fso, [path$$25]);
        if (v1706) {
          try {
            var content$$6 = JAM.call(this.readFile, this, [path$$25]);
            return {content:content$$6, path:path$$25};
          } catch (err$$5) {
          }
        } else {
          var v1704 = JAM.call(fso.GetAbsolutePathName, fso, [rootPath]);
          rootPath = JAM.call(fso.GetParentFolderName, fso, [v1704]);
          var v1705 = rootPath == "";
          if (v1705) {
            return null;
          } else {
            path$$25 = JAM.call(fso.BuildPath, fso, [rootPath, partialFilePath], JAM.policy.p1);
          }
        }
      }
      return;
    }
    function v1317(path$$24) {
      return JAM.call(fso.GetParentFolderName, fso, [path$$24]);
    }
    function v1316(path$$23) {
      return JAM.call(fso.GetAbsolutePathName, fso, [path$$23]);
    }
    function v1315(path$$22) {
      return JAM.call(fso.FileExists, fso, [path$$22]);
    }
    function v1314(path$$21, contents) {
      var file$$1 = JAM.call(this.createFile, this, [path$$21]);
      JAM.call(file$$1.Write, file$$1, [contents]);
      file$$1.Close();
      return;
    }
    function v1313(path$$20) {
      try {
        var streamObj = getStreamObject();
        streamObj.Open();
        streamObj.Type = 2;
        streamObj.Charset = "x-ansi";
        JAM.call(streamObj.LoadFromFile, streamObj, [path$$20]);
        var bomChar = JAM.call(streamObj.ReadText, streamObj, [2]);
        streamObj.Position = 0;
        var v22811 = JAM.call(bomChar.charCodeAt, bomChar, [0]);
        var v18696 = v22811 == 254;
        if (v18696) {
          var v22812 = JAM.call(bomChar.charCodeAt, bomChar, [1]);
          v18696 = v22812 == 255;
        }
        var v12514 = v18696;
        var v18698 = !v12514;
        if (v18698) {
          var v22813 = JAM.call(bomChar.charCodeAt, bomChar, [0]);
          var v18697 = v22813 == 255;
          if (v18697) {
            var v22814 = JAM.call(bomChar.charCodeAt, bomChar, [1]);
            v18697 = v22814 == 254;
          }
          v12514 = v18697;
        }
        var v1708 = v12514;
        if (v1708) {
          streamObj.Charset = "unicode";
        } else {
          var v18699 = JAM.call(bomChar.charCodeAt, bomChar, [0]);
          var v12515 = v18699 == 239;
          if (v12515) {
            var v18700 = JAM.call(bomChar.charCodeAt, bomChar, [1]);
            v12515 = v18700 == 187;
          }
          var v1707 = v12515;
          if (v1707) {
            streamObj.Charset = "utf-8";
          }
        }
        var str$$13 = JAM.call(streamObj.ReadText, streamObj, [-1]);
        streamObj.Close();
        JAM.call(streamObjectPool.push, streamObjectPool, [streamObj]);
        return str$$13;
      } catch (err$$4) {
        var v12516 = 'Error reading file "' + path$$20;
        var v1709 = v12516 + '".';
        JAM.call(IOUtils.throwIOError, IOUtils, [v1709, err$$4], JAM.policy.p1);
      }
      return;
    }
    function getStreamObject() {
      var v12517 = streamObjectPool.length;
      var v1710 = v12517 > 0;
      if (v1710) {
        return streamObjectPool.pop();
      } else {
        return new ActiveXObject("ADODB.Stream");
      }
      return;
    }
    var fso = new ActiveXObject("Scripting.FileSystemObject");
    var streamObjectPool = [];
    var args$$17 = [];
    var i$$140 = 0;
    var v18701 = WScript.Arguments;
    var v12518 = v18701.length;
    var v1713 = i$$140 < v12518;
    for (;v1713;) {
      var v1711 = args$$17;
      var v1712 = i$$140;
      var v12519 = WScript.Arguments;
      var v26440 = JAM.call(v12519.Item, v12519, [i$$140]);
      v1711[v1712] = v26440;
      i$$140++;
      var v18702 = WScript.Arguments;
      var v12520 = v18702.length;
      v1713 = i$$140 < v12520;
    }
    var v1714 = WScript.StdErr;
    var v1715 = WScript.StdOut;
    return {readFile:v1313, writeFile:v1314, fileExists:v1315, resolvePath:v1316, dirName:v1317, findFile:v1318, deleteFile:v1319, createFile:v1323, directoryExists:v1324, createDirectory:v1325, dir:v1326, print:v1327, printLine:v1328, arguments:args$$17, stderr:v1714, stdout:v1715, watchFile:null, run:v1329, getExecutingFilePath:v1330, quit:v1331};
  }
  function getNodeIO() {
    function v1356() {
      var v1716 = process.mainModule;
      return v1716.filename;
    }
    function v1355(source$$5, filename$$12) {
      var v1717 = require.main;
      v1717.filename = filename$$12;
      var v1718 = require.main;
      var v18703 = JAM.call(_fs.realpathSync, _fs, [filename$$12]);
      var v12521 = JAM.call(_path.dirname, _path, [v18703]);
      var v26441 = JAM.call(_module._nodeModulePaths, _module, [v12521]);
      v1718.paths = v26441;
      var v1719 = require.main;
      JAM.call(v1719._compile, v1719, [source$$5, filename$$12], JAM.policy.p1);
      return;
    }
    function v1354(filename$$11, callback$$28) {
      function v1353() {
        JAM.call(_fs.unwatchFile, _fs, [filename$$11, fileChanged], JAM.policy.p1);
        return;
      }
      function fileChanged(curr, prev$$1) {
        function v1352() {
          processingChange = false;
          return;
        }
        var v1722 = !firstRun;
        if (v1722) {
          var v12522 = curr.mtime;
          var v12523 = prev$$1.mtime;
          var v1720 = v12522 < v12523;
          if (v1720) {
            return;
          }
          JAM.call(_fs.unwatchFile, _fs, [filename$$11, fileChanged], JAM.policy.p1);
          var v1721 = !processingChange;
          if (v1721) {
            processingChange = true;
            JAM.call(callback$$28, null, [filename$$11]);
            JAM.call(setTimeout, null, [v1352, 100]);
          }
        }
        firstRun = false;
        var v1723 = {persistent:true, interval:500};
        JAM.call(_fs.watchFile, _fs, [filename$$11, v1723, fileChanged], JAM.policy.p1);
        return;
      }
      var firstRun = true;
      var processingChange = false;
      fileChanged();
      return {filename:filename$$11, close:v1353};
    }
    function v1351() {
      return;
    }
    function v1350(str$$25) {
      var v1724 = process.stdout;
      var v1725 = str$$25 + "\n";
      JAM.call(v1724.write, v1724, [v1725]);
      return;
    }
    function v1349(str$$24) {
      var v1726 = process.stdout;
      JAM.call(v1726.write, v1726, [str$$24]);
      return;
    }
    function v1348() {
      return;
    }
    function v1347(str$$23) {
      var v1727 = process.stderr;
      var v1728 = str$$23 + "\n";
      JAM.call(v1727.write, v1727, [v1728]);
      return;
    }
    function v1346(str$$22) {
      var v1729 = process.stderr;
      JAM.call(v1729.write, v1729, [str$$22]);
      return;
    }
    function v1345(str$$21) {
      var v1730 = process.stdout;
      var v1731 = str$$21 + "\n";
      JAM.call(v1730.write, v1730, [v1731]);
      return;
    }
    function v1344(str$$20) {
      var v1732 = process.stdout;
      JAM.call(v1732.write, v1732, [str$$20]);
      return;
    }
    function v1343(rootPath$$1, partialFilePath$$1) {
      var v1733 = rootPath$$1 + "/";
      var path$$40 = v1733 + partialFilePath$$1;
      for (;true;) {
        var v1735 = JAM.call(_fs.existsSync, _fs, [path$$40]);
        if (v1735) {
          try {
            var content$$7 = JAM.call(this.readFile, this, [path$$40]);
            return {content:content$$7, path:path$$40};
          } catch (err$$6) {
          }
        } else {
          var parentPath$$1 = JAM.call(_path.resolve, _path, [rootPath$$1, ".."], JAM.policy.p1);
          var v1734 = rootPath$$1 === parentPath$$1;
          if (v1734) {
            return null;
          } else {
            rootPath$$1 = parentPath$$1;
            path$$40 = JAM.call(_path.resolve, _path, [rootPath$$1, partialFilePath$$1], JAM.policy.p1);
          }
        }
      }
      return;
    }
    function v1342(path$$39) {
      return JAM.call(_path.dirname, _path, [path$$39]);
    }
    function v1341(path$$38) {
      return JAM.call(_path.resolve, _path, [path$$38]);
    }
    function v1340(path$$37) {
      var v1736 = JAM.call(_fs.existsSync, _fs, [path$$37]);
      if (v1736) {
        var v12524 = JAM.call(_fs.lstatSync, _fs, [path$$37]);
        v1736 = v12524.isDirectory();
      }
      return v1736;
    }
    function v1339(path$$36) {
      try {
        var v12525 = JAM.call(this.directoryExists, this, [path$$36]);
        var v1737 = !v12525;
        if (v1737) {
          JAM.call(_fs.mkdirSync, _fs, [path$$36]);
        }
      } catch (e$$20) {
        var v12526 = "Couldn't create directory '" + path$$36;
        var v1738 = v12526 + "'.";
        JAM.call(IOUtils.throwIOError, IOUtils, [v1738, e$$20], JAM.policy.p1);
      }
      return;
    }
    function dir(path$$35, spec$$1, options$$9) {
      function filesInFolder$$1(folder$$2) {
        var paths$$2 = [];
        var files = JAM.call(_fs.readdirSync, _fs, [folder$$2]);
        var i$$142 = 0;
        var v12527 = files.length;
        var v1744 = i$$142 < v12527;
        for (;v1744;) {
          var v12528 = folder$$2 + "/";
          var v12529 = files[i$$142];
          var v1739 = v12528 + v12529;
          var stat = JAM.call(_fs.statSync, _fs, [v1739]);
          var v12530 = options$$9.recursive;
          if (v12530) {
            v12530 = stat.isDirectory();
          }
          var v1743 = v12530;
          if (v1743) {
            var v18704 = folder$$2 + "/";
            var v18705 = files[i$$142];
            var v12531 = v18704 + v18705;
            var v1740 = filesInFolder$$1(v12531);
            paths$$2 = paths$$2.concat(v1740);
          } else {
            var v12532 = stat.isFile();
            if (v12532) {
              var v18706 = !spec$$1;
              var v22816 = !v18706;
              if (v22816) {
                var v22815 = files[i$$142];
                v18706 = v22815.match(spec$$1);
              }
              v12532 = v18706;
            }
            var v1742 = v12532;
            if (v1742) {
              var v12533 = folder$$2 + "/";
              var v12534 = files[i$$142];
              var v1741 = v12533 + v12534;
              JAM.call(paths$$2.push, paths$$2, [v1741]);
            }
          }
          i$$142++;
          var v12535 = files.length;
          v1744 = i$$142 < v12535;
        }
        return paths$$2;
      }
      options$$9 = options$$9 || {};
      return filesInFolder$$1(path$$35);
    }
    function v1338(path$$33, useUTF8$$4) {
      function v1337() {
        JAM.call(_fs.closeSync, _fs, [fd]);
        fd = null;
        return;
      }
      function v1336(str$$19) {
        var v1745 = str$$19 + "\r\n";
        JAM.call(_fs.writeSync, _fs, [fd, v1745], JAM.policy.p1);
        return;
      }
      function v1335(str$$18) {
        JAM.call(_fs.writeSync, _fs, [fd, str$$18], JAM.policy.p1);
        return;
      }
      function mkdirRecursiveSync(path$$34) {
        var stats = JAM.call(_fs.statSync, _fs, [path$$34]);
        var v1749 = stats.isFile();
        if (v1749) {
          var v12536 = '"' + path$$34;
          var v1746 = v12536 + "\" exists but isn't a directory.";
          JAM.call(IOUtils.throwIOError, IOUtils, [v1746, null], JAM.policy.p1);
        } else {
          var v1748 = stats.isDirectory();
          if (v1748) {
          } else {
            var v1747 = JAM.call(_path.dirname, _path, [path$$34]);
            mkdirRecursiveSync(v1747);
            JAM.call(_fs.mkdirSync, _fs, [path$$34, 509], JAM.policy.p1);
          }
        }
        return;
      }
      var v1750 = JAM.call(_path.dirname, _path, [path$$33]);
      mkdirRecursiveSync(v1750);
      try {
        var fd = JAM.call(_fs.openSync, _fs, [path$$33, "w"], JAM.policy.p1);
      } catch (e$$19) {
        var v12537 = "Couldn't write to file '" + path$$33;
        var v1751 = v12537 + "'.";
        JAM.call(IOUtils.throwIOError, IOUtils, [v1751, e$$19], JAM.policy.p1);
      }
      return {Write:v1335, WriteLine:v1336, Close:v1337};
    }
    function v1334(path$$32) {
      return JAM.call(_fs.existsSync, _fs, [path$$32]);
    }
    function v1333(path$$31) {
      try {
        JAM.call(_fs.unlinkSync, _fs, [path$$31]);
      } catch (e$$18) {
        var v12538 = "Couldn't delete file '" + path$$31;
        var v1752 = v12538 + "'.";
        JAM.call(IOUtils.throwIOError, IOUtils, [v1752, e$$18], JAM.policy.p1);
      }
      return;
    }
    function v1332(file$$2) {
      try {
        var buffer$$8 = JAM.call(_fs.readFileSync, _fs, [file$$2]);
        var v1759 = buffer$$8[0];
        switch(v1759) {
          case 254:
            var v12539 = buffer$$8[1];
            var v1756 = v12539 == 255;
            if (v1756) {
              var i$$141 = 0;
              var v12540 = i$$141 + 1;
              var v12541 = buffer$$8.length;
              var v1755 = v12540 < v12541;
              for (;v1755;) {
                var temp$$17 = buffer$$8[i$$141];
                var v1753 = i$$141 + 1;
                buffer$$8[i$$141] = buffer$$8[v1753];
                var v1754 = i$$141 + 1;
                buffer$$8[v1754] = temp$$17;
                i$$141 = i$$141 + 2;
                var v12542 = i$$141 + 1;
                var v12543 = buffer$$8.length;
                v1755 = v12542 < v12543;
              }
              return JAM.call(buffer$$8.toString, buffer$$8, ["ucs2", 2], JAM.policy.p1);
            }
            break;
          case 255:
            var v12544 = buffer$$8[1];
            var v1757 = v12544 == 254;
            if (v1757) {
              return JAM.call(buffer$$8.toString, buffer$$8, ["ucs2", 2], JAM.policy.p1);
            }
            break;
          case 239:
            var v12545 = buffer$$8[1];
            var v1758 = v12545 == 187;
            if (v1758) {
              return JAM.call(buffer$$8.toString, buffer$$8, ["utf8", 3], JAM.policy.p1);
            }
          ;
        }
        return buffer$$8.toString();
      } catch (e$$17) {
        var v12546 = 'Error reading file "' + file$$2;
        var v1760 = v12546 + '".';
        JAM.call(IOUtils.throwIOError, IOUtils, [v1760, e$$17], JAM.policy.p1);
      }
      return;
    }
    var _fs = require("fs");
    var _path = require("path");
    var _module = require("module");
    var v1761 = _fs.writeFileSync;
    var v12547 = process.argv;
    var v1762 = v12547.slice(2);
    var v1763 = {Write:v1346, WriteLine:v1347, Close:v1348};
    var v1764 = {Write:v1349, WriteLine:v1350, Close:v1351};
    var v1765 = process.exit;
    return {readFile:v1332, writeFile:v1761, deleteFile:v1333, fileExists:v1334, createFile:v1338, dir:dir, createDirectory:v1339, directoryExists:v1340, resolvePath:v1341, dirName:v1342, findFile:v1343, print:v1344, printLine:v1345, arguments:v1762, stderr:v1763, stdout:v1764, watchFile:v1354, run:v1355, getExecutingFilePath:v1356, quit:v1765};
  }
  var v12548 = typeof ActiveXObject;
  var v1767 = v12548 === "function";
  if (v1767) {
    return getWindowsScriptHostIO();
  } else {
    var v12549 = typeof require;
    var v1766 = v12549 === "function";
    if (v1766) {
      return getNodeIO();
    } else {
      return null;
    }
  }
  return;
}
function v1312(IOUtils$$1) {
  function createDirectoryStructure(ioHost$$5, dirName) {
    var v1768 = JAM.call(ioHost$$5.directoryExists, ioHost$$5, [dirName]);
    if (v1768) {
      return;
    }
    var parentDirectory = JAM.call(ioHost$$5.dirName, ioHost$$5, [dirName]);
    var v1769 = parentDirectory != "";
    if (v1769) {
      createDirectoryStructure(ioHost$$5, parentDirectory);
    }
    JAM.call(ioHost$$5.createDirectory, ioHost$$5, [dirName]);
    return;
  }
  function createFileAndFolderStructure(ioHost$$6, fileName$$9, useUTF8$$2) {
    var path$$19 = JAM.call(ioHost$$6.resolvePath, ioHost$$6, [fileName$$9]);
    var dirName$$1 = JAM.call(ioHost$$6.dirName, ioHost$$6, [path$$19]);
    createDirectoryStructure(ioHost$$6, dirName$$1);
    return JAM.call(ioHost$$6.createFile, ioHost$$6, [path$$19, useUTF8$$2], JAM.policy.p1);
  }
  function throwIOError(message$$22, error$$2) {
    var errorMessage = message$$22;
    var v12550 = error$$2;
    if (v12550) {
      v12550 = error$$2.message;
    }
    var v1770 = v12550;
    if (v1770) {
      var v18707 = error$$2.message;
      var v12551 = " " + v18707;
      errorMessage = errorMessage + v12551;
    }
    throw new Error(errorMessage);
  }
  IOUtils$$1.createFileAndFolderStructure = createFileAndFolderStructure;
  IOUtils$$1.throwIOError = throwIOError;
  return;
}
function v1311(TypeScript$$33) {
  function v1310() {
    function v1309(s$$41) {
      var v1771 = this.logContents;
      JAM.call(v1771.push, v1771, [s$$41]);
      return;
    }
    function v1308() {
      return false;
    }
    function v1307() {
      return false;
    }
    function v1306() {
      return false;
    }
    function v1305() {
      return false;
    }
    function v1304() {
      return false;
    }
    function BufferedLogger$$1() {
      this.logContents = [];
      return;
    }
    var v1772 = BufferedLogger$$1.prototype;
    v1772.information = v1304;
    var v1773 = BufferedLogger$$1.prototype;
    v1773.debug = v1305;
    var v1774 = BufferedLogger$$1.prototype;
    v1774.warning = v1306;
    var v1775 = BufferedLogger$$1.prototype;
    v1775.error = v1307;
    var v1776 = BufferedLogger$$1.prototype;
    v1776.fatal = v1308;
    var v1777 = BufferedLogger$$1.prototype;
    v1777.log = v1309;
    return BufferedLogger$$1;
  }
  function v1303() {
    function v1302(s$$40) {
      var v1778 = this.logger;
      JAM.call(v1778.log, v1778, [s$$40]);
      return;
    }
    function v1301() {
      return this._fatal;
    }
    function v1300() {
      return this._error;
    }
    function v1299() {
      return this._warning;
    }
    function v1298() {
      return this._debug;
    }
    function v1297() {
      return this._information;
    }
    function LoggerAdapter$$1(logger$$8) {
      this.logger = logger$$8;
      var v1779 = this.logger;
      var v26442 = v1779.information();
      this._information = v26442;
      var v1780 = this.logger;
      var v26443 = v1780.debug();
      this._debug = v26443;
      var v1781 = this.logger;
      var v26444 = v1781.warning();
      this._warning = v26444;
      var v1782 = this.logger;
      var v26445 = v1782.error();
      this._error = v26445;
      var v1783 = this.logger;
      var v26446 = v1783.fatal();
      this._fatal = v26446;
      return;
    }
    var v1784 = LoggerAdapter$$1.prototype;
    v1784.information = v1297;
    var v1785 = LoggerAdapter$$1.prototype;
    v1785.debug = v1298;
    var v1786 = LoggerAdapter$$1.prototype;
    v1786.warning = v1299;
    var v1787 = LoggerAdapter$$1.prototype;
    v1787.error = v1300;
    var v1788 = LoggerAdapter$$1.prototype;
    v1788.fatal = v1301;
    var v1789 = LoggerAdapter$$1.prototype;
    v1789.log = v1302;
    return LoggerAdapter$$1;
  }
  function v1296() {
    function v1295(s$$39) {
      return;
    }
    function v1294() {
      return false;
    }
    function v1293() {
      return false;
    }
    function v1292() {
      return false;
    }
    function v1291() {
      return false;
    }
    function v1290() {
      return false;
    }
    function NullLogger$$1() {
      return;
    }
    var v1790 = NullLogger$$1.prototype;
    v1790.information = v1290;
    var v1791 = NullLogger$$1.prototype;
    v1791.debug = v1291;
    var v1792 = NullLogger$$1.prototype;
    v1792.warning = v1292;
    var v1793 = NullLogger$$1.prototype;
    v1793.error = v1293;
    var v1794 = NullLogger$$1.prototype;
    v1794.fatal = v1294;
    var v1795 = NullLogger$$1.prototype;
    v1795.log = v1295;
    return NullLogger$$1;
  }
  function v1289(CompilerDiagnostics$$1) {
    function Alert(output) {
      var v1797 = CompilerDiagnostics$$1.diagnosticWriter;
      if (v1797) {
        var v1796 = CompilerDiagnostics$$1.diagnosticWriter;
        JAM.call(v1796.Alert, v1796, [output]);
      }
      return;
    }
    function debugPrint(s$$37) {
      var v1798 = CompilerDiagnostics$$1.debug;
      if (v1798) {
        Alert(s$$37);
      }
      return;
    }
    function assert(condition$$1, s$$38) {
      var v1800 = CompilerDiagnostics$$1.debug;
      if (v1800) {
        var v1799 = !condition$$1;
        if (v1799) {
          Alert(s$$38);
        }
      }
      return;
    }
    CompilerDiagnostics$$1.debug = false;
    CompilerDiagnostics$$1.diagnosticWriter = null;
    CompilerDiagnostics$$1.analysisPass = 0;
    CompilerDiagnostics$$1.Alert = Alert;
    CompilerDiagnostics$$1.debugPrint = debugPrint;
    CompilerDiagnostics$$1.assert = assert;
    return;
  }
  function timeFunction(logger$$7, funcDescription$$1, func$$5) {
    var v1801 = new Date;
    var start$$14 = +v1801;
    var result$$39 = func$$5();
    var v1802 = new Date;
    var end$$7 = +v1802;
    var v18708 = funcDescription$$1 + " completed in ";
    var v18709 = end$$7 - start$$14;
    var v12552 = v18708 + v18709;
    var v1803 = v12552 + " msec";
    JAM.call(logger$$7.log, logger$$7, [v1803]);
    return result$$39;
  }
  function stringToLiteral(value$$41, length$$18) {
    function addChar(index$$65) {
      var ch$$1 = JAM.call(value$$41.charCodeAt, value$$41, [index$$65]);
      switch(ch$$1) {
        case 9:
          result$$40 = result$$40 + "\\t";
          break;
        case 10:
          result$$40 = result$$40 + "\\n";
          break;
        case 11:
          result$$40 = result$$40 + "\\v";
          break;
        case 12:
          result$$40 = result$$40 + "\\f";
          break;
        case 13:
          result$$40 = result$$40 + "\\r";
          break;
        case 34:
          result$$40 = result$$40 + '\\"';
          break;
        case 39:
          result$$40 = result$$40 + "\\'";
          break;
        case 92:
          result$$40 = result$$40 + "\\";
          break;
        default:
          var v12553 = result$$40;
          var v12554 = value$$41.charAt(index$$65);
          result$$40 = v12553 + v12554;
      }
      return;
    }
    var result$$40 = "";
    var v1804 = value$$41.length;
    var tooLong = v1804 > length$$18;
    if (tooLong) {
      var mid$$1 = length$$18 >> 1;
      var i$$139 = 0;
      var v1805 = i$$139 < mid$$1;
      for (;v1805;) {
        addChar(i$$139);
        i$$139++;
        v1805 = i$$139 < mid$$1;
      }
      result$$40 = result$$40 + "(...)";
      var v1806 = value$$41.length;
      i$$139 = v1806 - mid$$1;
      var v12555 = value$$41.length;
      var v1807 = i$$139 < v12555;
      for (;v1807;) {
        addChar(i$$139);
        i$$139++;
        var v12556 = value$$41.length;
        v1807 = i$$139 < v12556;
      }
    } else {
      length$$18 = value$$41.length;
      i$$139 = 0;
      var v1808 = i$$139 < length$$18;
      for (;v1808;) {
        addChar(i$$139);
        i$$139++;
        v1808 = i$$139 < length$$18;
      }
    }
    return result$$40;
  }
  var v12557 = TypeScript$$33.CompilerDiagnostics;
  var v18710 = !v12557;
  if (v18710) {
    v12557 = TypeScript$$33.CompilerDiagnostics = {};
  }
  var v1809 = v12557;
  v1289(v1809);
  var CompilerDiagnostics = TypeScript$$33.CompilerDiagnostics;
  var NullLogger = v1296();
  TypeScript$$33.NullLogger = NullLogger;
  var LoggerAdapter = v1303();
  TypeScript$$33.LoggerAdapter = LoggerAdapter;
  var BufferedLogger = v1310();
  TypeScript$$33.BufferedLogger = BufferedLogger;
  TypeScript$$33.timeFunction = timeFunction;
  TypeScript$$33.stringToLiteral = stringToLiteral;
  return;
}
function v1288(TypeScript$$32) {
  function v1287() {
    function v1286(enclosingScopeContext$$5, allNames, scope$$36) {
      var result$$38 = [];
      var enclosingScope$$2 = enclosingScopeContext$$5.getScope();
      var i$$138 = 0;
      var v12558 = allNames.length;
      var v1818 = i$$138 < v12558;
      for (;v1818;) {
        var name$$89 = allNames[i$$138];
        var v1810 = enclosingScopeContext$$5.publicsOnly;
        if (v1810) {
          v1810 = enclosingScopeContext$$5.isMemberCompletion;
        }
        var publicsOnly = v1810;
        var symbol$$23 = JAM.call(scope$$36.find, scope$$36, [name$$89, publicsOnly, false], JAM.policy.p1);
        var v1811 = symbol$$23 == null;
        if (v1811) {
          symbol$$23 = JAM.call(scope$$36.find, scope$$36, [name$$89, publicsOnly, true], JAM.policy.p1);
        }
        var v1812;
        var v18711 = symbol$$23;
        if (v18711) {
          var v22817 = symbol$$23.flags;
          var v24822 = TypeScript$$32.SymbolFlags;
          var v22818 = v24822.Private;
          v18711 = v22817 & v22818;
        }
        var v12561 = v18711;
        if (v12561) {
          var v12559 = symbol$$23.container;
          var v12560 = scope$$36.container;
          v1812 = v12559 == v12560;
        } else {
          v1812 = true;
        }
        var displayThisMember = v1812;
        if (symbol$$23) {
          var v18712 = displayThisMember;
          if (v18712) {
            var v24823 = symbol$$23.name;
            var v22819 = JAM.call(TypeScript$$32.isQuoted, TypeScript$$32, [v24823]);
            v18712 = !v22819;
          }
          var v12562 = v18712;
          if (v12562) {
            var v22820 = symbol$$23.name;
            var v18713 = JAM.call(TypeScript$$32.isRelative, TypeScript$$32, [v22820]);
            v12562 = !v18713;
          }
          var v1815 = v12562;
          if (v1815) {
            var v1813 = symbol$$23.getType();
            var typeName$$11 = JAM.call(v1813.getScopedTypeName, v1813, [enclosingScope$$2]);
            var v1814 = JAM.new(ScopeEntry, [name$$89, typeName$$11, symbol$$23]);
            JAM.call(result$$38.push, result$$38, [v1814]);
          }
        } else {
          var v12563 = name$$89 == "true";
          var v18714 = !v12563;
          if (v18714) {
            v12563 = name$$89 == "false";
          }
          var v1817 = v12563;
          if (v1817) {
            var v24824 = this.compiler;
            var v22821 = v24824.typeChecker;
            var v18715 = v22821.booleanType;
            var v12564 = v18715.symbol;
            var v1816 = JAM.new(ScopeEntry, [name$$89, "bool", v12564]);
            JAM.call(result$$38.push, result$$38, [v1816]);
          }
        }
        i$$138++;
        var v12565 = allNames.length;
        v1818 = i$$138 < v12565;
      }
      return result$$38;
    }
    function v1285(enclosingScopeContext$$4) {
      var scope$$35 = JAM.call(this.getScope, this, [enclosingScopeContext$$4]);
      var v1819 = scope$$35 == null;
      if (v1819) {
        return [];
      }
      var v1820 = TypeScript$$32.StringHashTable;
      var inScopeNames = new v1820;
      var v1821 = enclosingScopeContext$$4.isMemberCompletion;
      var allSymbolNames = JAM.call(scope$$35.getAllSymbolNames, scope$$35, [v1821]);
      var i$$137 = 0;
      var v12566 = allSymbolNames.length;
      var v1823 = i$$137 < v12566;
      for (;v1823;) {
        var name$$88 = allSymbolNames[i$$137];
        var v22822 = TypeScript$$32.globalId;
        var v18716 = name$$88 == v22822;
        var v22823 = !v18716;
        if (v22823) {
          v18716 = name$$88 == "_Core";
        }
        var v12567 = v18716;
        var v18717 = !v12567;
        if (v18717) {
          v12567 = name$$88 == "_element";
        }
        var v1822 = v12567;
        if (v1822) {
          i$$137++;
          var v12568 = allSymbolNames.length;
          v1823 = i$$137 < v12568;
          continue;
        }
        JAM.call(inScopeNames.add, inScopeNames, [name$$88, ""], JAM.policy.p1);
        i$$137++;
        var v12569 = allSymbolNames.length;
        v1823 = i$$137 < v12569;
      }
      var v12570 = this.compiler;
      var v1824 = v12570.typeChecker;
      var svModuleDecl = v1824.currentModDecl;
      var v12571 = this.compiler;
      var v1825 = v12571.typeChecker;
      v1825.currentModDecl = enclosingScopeContext$$4.deepestModuleDecl;
      var v1826 = inScopeNames.getAllKeys();
      var result$$37 = JAM.call(this.getTypeNamesForNames, this, [enclosingScopeContext$$4, v1826, scope$$35], JAM.policy.p1);
      var v12572 = this.compiler;
      var v1827 = v12572.typeChecker;
      v1827.currentModDecl = svModuleDecl;
      return result$$37;
    }
    function v1284(enclosingScopeContext$$3) {
      var v12573 = enclosingScopeContext$$3.enclosingObjectLit;
      if (v12573) {
        v12573 = enclosingScopeContext$$3.isMemberCompletion;
      }
      var v1832 = v12573;
      if (v1832) {
        return enclosingScopeContext$$3.getObjectLiteralScope();
      } else {
        var v1831 = enclosingScopeContext$$3.isMemberCompletion;
        if (v1831) {
          var v1830 = enclosingScopeContext$$3.useFullAst;
          if (v1830) {
            var v12574 = this.compiler;
            var v1828 = v12574.typeFlow;
            return JAM.call(v1828.findMemberScopeAtFullAst, v1828, [enclosingScopeContext$$3]);
          } else {
            var v12575 = this.compiler;
            var v1829 = v12575.typeFlow;
            return JAM.call(v1829.findMemberScopeAt, v1829, [enclosingScopeContext$$3]);
          }
        } else {
          return enclosingScopeContext$$3.getScope();
        }
      }
      return;
    }
    function ScopeTraversal$$1(compiler$$2) {
      this.compiler = compiler$$2;
      return;
    }
    var v1833 = ScopeTraversal$$1.prototype;
    v1833.getScope = v1284;
    var v1834 = ScopeTraversal$$1.prototype;
    v1834.getScopeEntries = v1285;
    var v1835 = ScopeTraversal$$1.prototype;
    v1835.getTypeNamesForNames = v1286;
    return ScopeTraversal$$1;
  }
  function v1283() {
    function ScopeEntry$$1(name$$87, type$$60, sym$$49) {
      this.name = name$$87;
      this.type = type$$60;
      this.sym = sym$$49;
      return;
    }
    return ScopeEntry$$1;
  }
  function v1282() {
    function v1281(fileName$$8, useUTF8$$1) {
      try {
        var v12576 = this.emitSettings;
        var v1836 = v12576.ioHost;
        return JAM.call(v1836.createFile, v1836, [fileName$$8, useUTF8$$1], JAM.policy.p1);
      } catch (ex$$6) {
        var v1837 = this.errorReporter;
        var v1838 = ex$$6.message;
        JAM.call(v1837.emitterError, v1837, [v1838]);
      }
      return;
    }
    function v1280(scripts) {
      var i$$136 = 0;
      var len$$68 = scripts.length;
      var v1840 = i$$136 < len$$68;
      for (;v1840;) {
        var script$$38 = scripts[i$$136];
        var v1839 = JAM.call(this.outputScriptToUTF8, this, [script$$38]);
        if (v1839) {
          return true;
        }
        i$$136++;
        v1840 = i$$136 < len$$68;
      }
      return false;
    }
    function v1279(script$$37) {
      var v1841 = script$$37.containsUnicodeChar;
      var v12578 = !v1841;
      if (v12578) {
        var v18718 = this.emitSettings;
        var v12577 = v18718.emitComments;
        if (v12577) {
          v12577 = script$$37.containsUnicodeCharInComment;
        }
        v1841 = v12577;
      }
      return v1841;
    }
    function v1278(ioHost$$4) {
      function v1277(fileName$$7, wholeFileNameReplaced$$3) {
        return JAM.call(TypeScriptCompiler$$1.mapToFileNameExtension, TypeScriptCompiler$$1, [".txt", fileName$$7, wholeFileNameReplaced$$3], JAM.policy.p1);
      }
      JAM.call(this.parseEmitOption, this, [ioHost$$4]);
      var outFile$$1 = null;
      var context$$65 = null;
      var i$$135 = 0;
      var v12579 = this.scripts;
      var v1842 = v12579.members;
      var len$$67 = v1842.length;
      var v1856 = i$$135 < len$$67;
      for (;v1856;) {
        var v12580 = this.scripts;
        var v1843 = v12580.members;
        var script$$36 = v1843[i$$135];
        var v18719 = this.emitSettings;
        var v12581 = v18719.outputMany;
        var v18720 = !v12581;
        if (v18720) {
          v12581 = context$$65 == null;
        }
        var v1849 = v12581;
        if (v1849) {
          var v12582 = this.units;
          var v1844 = v12582[i$$135];
          var fname$$8 = v1844.filename;
          var mapToTxtFileName = v1277;
          var v1845 = this.emitSettings;
          var outFname$$2 = JAM.call(v1845.mapOutputFileName, v1845, [fname$$8, mapToTxtFileName], JAM.policy.p1);
          var v1846 = JAM.call(this.useUTF8ForFile, this, [script$$36]);
          outFile$$1 = JAM.call(this.createFile, this, [outFname$$2, v1846], JAM.policy.p1);
          var v1847 = TypeScript$$32.PrintContext;
          var v1848 = this.parser;
          context$$65 = JAM.new(v1847, [outFile$$1, v1848]);
        }
        var v1850 = TypeScript$$32.getAstWalkerFactory();
        var v1851 = TypeScript$$32.prePrintAST;
        var v1852 = TypeScript$$32.postPrintAST;
        JAM.call(v1850.walk, v1850, [script$$36, v1851, v1852, null, context$$65], JAM.policy.p1);
        var v12583 = this.emitSettings;
        var v1855 = v12583.outputMany;
        if (v1855) {
          try {
            outFile$$1.Close();
          } catch (e$$11) {
            var v1853 = this.errorReporter;
            var v1854 = e$$11.message;
            JAM.call(v1853.emitterError, v1853, [v1854]);
          }
        }
        i$$135++;
        v1856 = i$$135 < len$$67;
      }
      var v18721 = this.emitSettings;
      var v12584 = v18721.outputMany;
      var v1859 = !v12584;
      if (v1859) {
        try {
          outFile$$1.Close();
        } catch (e$$12) {
          var v1857 = this.errorReporter;
          var v1858 = e$$12.message;
          JAM.call(v1857.emitterError, v1857, [v1858]);
        }
      }
      return;
    }
    function v1276(outputFile) {
      var v12585 = this.settings;
      var v1860 = v12585.mapSourceFiles;
      if (v1860) {
        throw Error("Cannot generate source map");
      }
      var v12586 = this.settings;
      var v1861 = v12586.generateDeclarationFiles;
      if (v1861) {
        throw Error("Cannot generate declaration files");
      }
      var v18722 = this.settings;
      var v12587 = v18722.outputOption;
      var v1862 = v12587 != "";
      if (v1862) {
        throw Error("Cannot parse output option");
      }
      var v1863 = TypeScript$$32.Emitter;
      var v1864 = this.typeChecker;
      var v1865 = this.emitSettings;
      var v1866 = this.errorReporter;
      var emitter$$41 = emitter$$41 = JAM.new(v1863, [v1864, "stdout", outputFile, v1865, v1866]);
      var i$$134 = 0;
      var v12588 = this.scripts;
      var v1867 = v12588.members;
      var len$$66 = v1867.length;
      var v1871 = i$$134 < len$$66;
      for (;v1871;) {
        var v12589 = this.scripts;
        var v1868 = v12589.members;
        var script$$35 = v1868[i$$134];
        var v1869 = this.typeChecker;
        v1869.locationInfo = script$$35.locationInfo;
        var v12590 = TypeScript$$32.TokenID;
        var v1870 = v12590.Comma;
        JAM.call(emitter$$41.emitJavascript, emitter$$41, [script$$35, v1870, false], JAM.policy.p1);
        i$$134++;
        v1871 = i$$134 < len$$66;
      }
      return;
    }
    function v1275(ioHost$$3) {
      JAM.call(this.parseEmitOption, this, [ioHost$$3]);
      var emitter$$40 = null;
      var i$$133 = 0;
      var v12591 = this.scripts;
      var v1872 = v12591.members;
      var len$$65 = v1872.length;
      var v1876 = i$$133 < len$$65;
      for (;v1876;) {
        var v12592 = this.scripts;
        var v1873 = v12592.members;
        var script$$34 = v1873[i$$133];
        var v18723 = this.emitSettings;
        var v12593 = v18723.outputMany;
        var v18724 = !v12593;
        if (v18724) {
          v12593 = emitter$$40 == null;
        }
        var v1875 = v12593;
        if (v1875) {
          var v18725 = this.emitSettings;
          var v12594 = v18725.outputMany;
          var v1874 = !v12594;
          emitter$$40 = JAM.call(this.emitUnit, this, [script$$34, v1874], JAM.policy.p1);
        } else {
          JAM.call(this.emitUnit, this, [script$$34, true, emitter$$40], JAM.policy.p1);
        }
        i$$133++;
        v1876 = i$$133 < len$$65;
      }
      if (emitter$$40) {
        emitter$$40.Close();
      }
      return;
    }
    function v1274(script$$33, reuseEmitter$$1, emitter$$39) {
      var v18726 = this.emitSettings;
      var v12595 = JAM.call(script$$33.emitRequired, script$$33, [v18726]);
      var v1877 = !v12595;
      if (v1877) {
        return null;
      }
      var v1878 = script$$33.locationInfo;
      var fname$$7 = v1878.filename;
      var v1890 = !emitter$$39;
      if (v1890) {
        var v1879 = this.emitSettings;
        var v1880 = TypeScriptCompiler$$1.mapToJSFileName;
        var outFname$$1 = JAM.call(v1879.mapOutputFileName, v1879, [fname$$7, v1880], JAM.policy.p1);
        var v1881 = JAM.call(this.useUTF8ForFile, this, [script$$33]);
        var outFile = JAM.call(this.createFile, this, [outFname$$1, v1881], JAM.policy.p1);
        var v1882 = TypeScript$$32.Emitter;
        var v1883 = this.typeChecker;
        var v1884 = this.emitSettings;
        var v1885 = this.errorReporter;
        emitter$$39 = JAM.new(v1882, [v1883, outFname$$1, outFile, v1884, v1885]);
        var v12596 = this.settings;
        var v1887 = v12596.mapSourceFiles;
        if (v1887) {
          var v12597 = TypeScript$$32.SourceMapper;
          var v24825 = TypeScript$$32.SourceMapper;
          var v22824 = v24825.MapFileExtension;
          var v18727 = outFname$$1 + v22824;
          var v12598 = JAM.call(this.createFile, this, [v18727, false], JAM.policy.p1);
          var v12599 = this.errorReporter;
          var v1886 = JAM.new(v12597, [fname$$7, outFname$$1, outFile, v12598, v12599]);
          JAM.call(emitter$$39.setSourceMappings, emitter$$39, [v1886]);
        }
      } else {
        var v12600 = this.settings;
        var v1889 = v12600.mapSourceFiles;
        if (v1889) {
          var v12601 = TypeScript$$32.SourceMapper;
          var v12602 = emitter$$39.emittingFileName;
          var v12603 = emitter$$39.outfile;
          var v18728 = emitter$$39.sourceMapper;
          var v12604 = v18728.sourceMapOut;
          var v12605 = this.errorReporter;
          var v1888 = JAM.new(v12601, [fname$$7, v12602, v12603, v12604, v12605]);
          JAM.call(emitter$$39.setSourceMappings, emitter$$39, [v1888]);
        }
      }
      var v1891 = this.typeChecker;
      v1891.locationInfo = script$$33.locationInfo;
      var v12606 = TypeScript$$32.TokenID;
      var v1892 = v12606.Comma;
      JAM.call(emitter$$39.emitJavascript, emitter$$39, [script$$33, v1892, false], JAM.policy.p1);
      var v1893 = !reuseEmitter$$1;
      if (v1893) {
        emitter$$39.Close();
        return null;
      } else {
        return emitter$$39;
      }
      return;
    }
    function mapToJSFileName(fileName$$6, wholeFileNameReplaced$$2) {
      return JAM.call(TypeScriptCompiler$$1.mapToFileNameExtension, TypeScriptCompiler$$1, [".js", fileName$$6, wholeFileNameReplaced$$2], JAM.policy.p1);
    }
    function mapToFileNameExtension(extension, fileName$$5, wholeFileNameReplaced$$1) {
      if (wholeFileNameReplaced$$1) {
        return fileName$$5;
      } else {
        var splitFname = fileName$$5.split(".");
        splitFname.pop();
        var v1894 = splitFname.join(".");
        return v1894 + extension;
      }
      return;
    }
    function v1273() {
      var v12607 = this.canEmitDeclarations();
      var v1895 = !v12607;
      if (v1895) {
        return;
      }
      var v12608 = this.errorReporter;
      var v1896 = v12608.hasErrors;
      if (v1896) {
        return;
      }
      var v22825 = this.scripts;
      var v18729 = v22825.members;
      var v12609 = v18729.length;
      var v1897 = v12609 == 0;
      if (v1897) {
        return;
      }
      var declarationEmitter$$1 = null;
      var i$$132 = 0;
      var v12610 = this.scripts;
      var v1898 = v12610.members;
      var len$$64 = v1898.length;
      var v1902 = i$$132 < len$$64;
      for (;v1902;) {
        var v12611 = this.scripts;
        var v1899 = v12611.members;
        var script$$32 = v1899[i$$132];
        var v18730 = this.emitSettings;
        var v12612 = v18730.outputMany;
        var v18731 = !v12612;
        if (v18731) {
          v12612 = declarationEmitter$$1 == null;
        }
        var v1901 = v12612;
        if (v1901) {
          var v18732 = this.emitSettings;
          var v12613 = v18732.outputMany;
          var v1900 = !v12613;
          declarationEmitter$$1 = JAM.call(this.emitDeclarationsUnit, this, [script$$32, v1900], JAM.policy.p1);
        } else {
          JAM.call(this.emitDeclarationsUnit, this, [script$$32, true, declarationEmitter$$1], JAM.policy.p1);
        }
        i$$132++;
        v1902 = i$$132 < len$$64;
      }
      if (declarationEmitter$$1) {
        declarationEmitter$$1.Close();
      }
      return;
    }
    function v1272(script$$31, reuseEmitter, declarationEmitter) {
      var v12614 = JAM.call(this.canEmitDeclarations, this, [script$$31]);
      var v1903 = !v12614;
      if (v1903) {
        return null;
      }
      var v1912 = !declarationEmitter;
      if (v1912) {
        var v1904 = this.emitSettings;
        var v12615 = script$$31.locationInfo;
        var v1905 = v12615.filename;
        var v1906 = TypeScriptCompiler$$1.mapToDTSFileName;
        var declareFileName$$2 = JAM.call(v1904.mapOutputFileName, v1904, [v1905, v1906], JAM.policy.p1);
        var v1907 = JAM.call(this.useUTF8ForFile, this, [script$$31]);
        var declareFile = JAM.call(this.createFile, this, [declareFileName$$2, v1907], JAM.policy.p1);
        var v1908 = TypeScript$$32.DeclarationEmitter;
        var v1909 = this.typeChecker;
        var v1910 = this.emitSettings;
        var v1911 = this.errorReporter;
        declarationEmitter = JAM.new(v1908, [v1909, v1910, v1911]);
        JAM.call(declarationEmitter.setDeclarationFile, declarationEmitter, [declareFile]);
      }
      JAM.call(declarationEmitter.emitDeclarations, declarationEmitter, [script$$31]);
      var v1913 = !reuseEmitter;
      if (v1913) {
        declarationEmitter.Close();
        return null;
      } else {
        return declarationEmitter;
      }
      return;
    }
    function v1271(script$$30) {
      var v18733 = this.settings;
      var v12616 = v18733.generateDeclarationFiles;
      var v1914 = !v12616;
      if (v1914) {
        return false;
      }
      var v18734 = !script$$30;
      var v12617 = !v18734;
      if (v12617) {
        var v22826 = script$$30.isDeclareFile;
        var v24826 = !v22826;
        if (v24826) {
          v22826 = script$$30.isResident;
        }
        var v18735 = v22826;
        var v22828 = !v18735;
        if (v22828) {
          var v22827 = script$$30.bod;
          v18735 = v22827 == null;
        }
        v12617 = v18735;
      }
      var v1915 = v12617;
      if (v1915) {
        return false;
      }
      return true;
    }
    function mapToDTSFileName(fileName$$4, wholeFileNameReplaced) {
      return JAM.call(TypeScript$$32.getDeclareFilePath, TypeScript$$32, [fileName$$4]);
    }
    function v1270(script$$29) {
      var v12618 = this.emitSettings;
      var v1917 = v12618.outputMany;
      if (v1917) {
        return JAM.call(this.outputScriptToUTF8, this, [script$$29]);
      } else {
        var v12619 = this.scripts;
        var v1916 = v12619.members;
        return JAM.call(this.outputScriptsToUTF8, this, [v1916]);
      }
      return;
    }
    function v1269(ioHost$$2) {
      var v1918 = this.emitSettings;
      v1918.ioHost = ioHost$$2;
      var v18736 = this.emitSettings;
      var v12620 = v18736.outputOption;
      var v1921 = v12620 == "";
      if (v1921) {
        var v1919 = this.emitSettings;
        v1919.outputMany = true;
        var v1920 = this.emitSettings;
        v1920.commonDirectoryPath = "";
        return;
      }
      var v1922 = this.emitSettings;
      var v22829 = this.emitSettings;
      var v18737 = v22829.ioHost;
      var v22830 = this.emitSettings;
      var v18738 = v22830.outputOption;
      var v12621 = JAM.call(v18737.resolvePath, v18737, [v18738]);
      var v26447 = JAM.call(TypeScript$$32.switchToForwardSlashes, TypeScript$$32, [v12621]);
      v1922.outputOption = v26447;
      var v18739 = this.emitSettings;
      var v12622 = v18739.ioHost;
      var v18740 = this.emitSettings;
      var v12623 = v18740.outputOption;
      var v1927 = JAM.call(v12622.directoryExists, v12622, [v12623]);
      if (v1927) {
        var v1923 = this.emitSettings;
        v1923.outputMany = true;
      } else {
        var v18741 = this.emitSettings;
        var v12624 = v18741.ioHost;
        var v18742 = this.emitSettings;
        var v12625 = v18742.outputOption;
        var v1926 = JAM.call(v12624.fileExists, v12624, [v12625]);
        if (v1926) {
          var v1924 = this.emitSettings;
          v1924.outputMany = false;
        } else {
          var v1925 = this.emitSettings;
          var v22831 = this.emitSettings;
          var v18743 = v22831.outputOption;
          var v12626 = JAM.call(TypeScript$$32.isJSFile, TypeScript$$32, [v18743]);
          v1925.outputMany = !v12626;
        }
      }
      var v12627 = this.isDynamicModuleCompilation();
      if (v12627) {
        var v22832 = this.emitSettings;
        var v18744 = v22832.outputMany;
        v12627 = !v18744;
      }
      var v1929 = v12627;
      if (v1929) {
        var v1928 = this.errorReporter;
        JAM.call(v1928.emitterError, v1928, ["Cannot compile dynamic modules when emitting into single file"]);
      }
      var v12628 = this.emitSettings;
      var v1930 = v12628.outputMany;
      if (v1930) {
        this.updateCommonDirectoryPath();
      }
      return;
    }
    function v1268() {
      var commonComponents = [];
      var commonComponentsLength = -1;
      var i$$131 = 0;
      var v12629 = this.scripts;
      var v1931 = v12629.members;
      var len$$63 = v1931.length;
      var v1941 = i$$131 < len$$63;
      for (;v1941;) {
        var v12630 = this.scripts;
        var v1932 = v12630.members;
        var script$$28 = v1932[i$$131];
        var v12631 = this.emitSettings;
        var v1940 = JAM.call(script$$28.emitRequired, script$$28, [v12631]);
        if (v1940) {
          var v1933 = script$$28.locationInfo;
          var fileName$$3 = v1933.filename;
          var fileComponents = JAM.call(TypeScript$$32.filePathComponents, TypeScript$$32, [fileName$$3]);
          var v1939 = commonComponentsLength == -1;
          if (v1939) {
            commonComponents = fileComponents;
            commonComponentsLength = commonComponents.length;
          } else {
            var updatedPath = false;
            var j$$20 = 0;
            var v12632 = j$$20 < commonComponentsLength;
            if (v12632) {
              var v18745 = fileComponents.length;
              v12632 = j$$20 < v18745;
            }
            var v1937 = v12632;
            for (;v1937;) {
              var v12633 = commonComponents[j$$20];
              var v12634 = fileComponents[j$$20];
              var v1936 = v12633 != v12634;
              if (v1936) {
                commonComponentsLength = j$$20;
                updatedPath = true;
                var v1935 = j$$20 == 0;
                if (v1935) {
                  var v1934 = this.errorReporter;
                  JAM.call(v1934.emitterError, v1934, ["Cannot find the common subdirectory path for the input files"]);
                  return;
                }
                break;
              }
              j$$20++;
              var v12635 = j$$20 < commonComponentsLength;
              if (v12635) {
                var v18746 = fileComponents.length;
                v12635 = j$$20 < v18746;
              }
              v1937 = v12635;
            }
            var v12636 = !updatedPath;
            if (v12636) {
              var v18747 = fileComponents.length;
              v12636 = v18747 < commonComponentsLength;
            }
            var v1938 = v12636;
            if (v1938) {
              commonComponentsLength = fileComponents.length;
            }
          }
        }
        i$$131++;
        v1941 = i$$131 < len$$63;
      }
      var v1942 = this.emitSettings;
      var v18748 = JAM.call(commonComponents.slice, commonComponents, [0, commonComponentsLength], JAM.policy.p1);
      var v12637 = v18748.join("/");
      v1942.commonDirectoryPath = v12637 + "/";
      var v22833 = this.emitSettings;
      var v18749 = v22833.outputOption;
      var v25694 = this.emitSettings;
      var v24827 = v25694.outputOption;
      var v22834 = v24827.length;
      var v18750 = v22834 - 1;
      var v12638 = v18749.charAt(v18750);
      var v1944 = v12638 != "/";
      if (v1944) {
        var v1943 = this.emitSettings;
        var v18751 = v1943.outputOption;
        v1943.outputOption = v18751 + "/";
      }
      return;
    }
    function v1267() {
      var i$$130 = 0;
      var v12639 = this.scripts;
      var v1945 = v12639.members;
      var len$$62 = v1945.length;
      var v1948 = i$$130 < len$$62;
      for (;v1948;) {
        var v12640 = this.scripts;
        var v1946 = v12640.members;
        var script$$27 = v1946[i$$130];
        var v18752 = script$$27.isDeclareFile;
        var v12641 = !v18752;
        if (v12641) {
          var v18753 = script$$27.topLevelMod;
          v12641 = v18753 != null;
        }
        var v1947 = v12641;
        if (v1947) {
          return true;
        }
        i$$130++;
        v1948 = i$$130 < len$$62;
      }
      return false;
    }
    function v1266() {
      function v1265() {
        TypeScript$$32.CompilerDiagnostics.analysisPass++;
        var v1949 = _this$$20.errorOutput;
        JAM.call(_this$$20.initTypeChecker, _this$$20, [v1949]);
        var v1950 = _this$$20.persistentTypeState;
        var v12642 = TypeScript$$32.TypeCheckCollectionMode;
        var v1951 = v12642.Transient;
        JAM.call(v1950.setCollectionMode, v1950, [v1951]);
        _this$$20.cleanTypesForReTypeCheck();
        return _this$$20.typeCheck();
      }
      var _this$$20 = this;
      JAM.call(this.timeFunction, this, ["reTypeCheck()", v1265], JAM.policy.p1);
      return;
    }
    function v1264(updateResult$$4) {
      function v1263() {
        return false;
      }
      return JAM.call(this.timeFunction, this, ["attemptIncrementalTypeCheck()", v1263], JAM.policy.p1);
    }
    function v1262() {
      function v1261() {
        var i$$129 = 0;
        var v12643 = _this$$19.scripts;
        var v1952 = v12643.members;
        var len$$61 = v1952.length;
        var v1956 = i$$129 < len$$61;
        for (;v1956;) {
          var v12644 = _this$$19.scripts;
          var v1953 = v12644.members;
          var script$$26 = v1953[i$$129];
          var v1954 = script$$26.isResident;
          if (v1954) {
            i$$129++;
            v1956 = i$$129 < len$$61;
            continue;
          }
          JAM.call(_this$$19.cleanASTTypesForReTypeCheck, _this$$19, [script$$26]);
          var v1955 = _this$$19.typeChecker;
          JAM.call(v1955.collectTypes, v1955, [script$$26]);
          i$$129++;
          v1956 = i$$129 < len$$61;
        }
        return null;
      }
      var _this$$19 = this;
      JAM.call(this.timeFunction, this, ["cleanTypesForReTypeCheck()", v1261], JAM.policy.p1);
      return;
    }
    function v1260(ast$$122) {
      function cleanASTType(ast$$123, parent$$72) {
        ast$$123.type = null;
        var v12645 = ast$$123.nodeType;
        var v18754 = TypeScript$$32.NodeType;
        var v12646 = v18754.VarDecl;
        var v1963 = v12645 == v12646;
        if (v1963) {
          var vardecl = ast$$123;
          vardecl.sym = null;
        } else {
          var v12647 = ast$$123.nodeType;
          var v18755 = TypeScript$$32.NodeType;
          var v12648 = v18755.ArgDecl;
          var v1962 = v12647 == v12648;
          if (v1962) {
            var argdecl = ast$$123;
            argdecl.sym = null;
          } else {
            var v12649 = ast$$123.nodeType;
            var v18756 = TypeScript$$32.NodeType;
            var v12650 = v18756.Name;
            var v1961 = v12649 == v12650;
            if (v1961) {
              var name$$86 = ast$$123;
              name$$86.sym = null;
            } else {
              var v12651 = ast$$123.nodeType;
              var v18757 = TypeScript$$32.NodeType;
              var v12652 = v18757.FuncDecl;
              var v1960 = v12651 == v12652;
              if (v1960) {
                var funcdecl = ast$$123;
                funcdecl.signature = null;
                var v26448 = new Array;
                funcdecl.freeVariables = v26448;
                funcdecl.symbols = null;
                funcdecl.accessorSymbol = null;
                funcdecl.scopeType = null;
              } else {
                var v12653 = ast$$123.nodeType;
                var v18758 = TypeScript$$32.NodeType;
                var v12654 = v18758.ModuleDeclaration;
                var v1959 = v12653 == v12654;
                if (v1959) {
                  var modDecl$$3 = ast$$123;
                  modDecl$$3.mod = null;
                } else {
                  var v12655 = ast$$123.nodeType;
                  var v18759 = TypeScript$$32.NodeType;
                  var v12656 = v18759.With;
                  var v1958 = v12655 == v12656;
                  if (v1958) {
                    ast$$123.withSym = null;
                  } else {
                    var v12657 = ast$$123.nodeType;
                    var v18760 = TypeScript$$32.NodeType;
                    var v12658 = v18760.Catch;
                    var v1957 = v12657 == v12658;
                    if (v1957) {
                      ast$$123.containedScope = null;
                    }
                  }
                }
              }
            }
          }
        }
        return ast$$123;
      }
      var v1964 = TypeScript$$32.getAstWalkerFactory();
      JAM.call(v1964.walk, v1964, [ast$$122, cleanASTType], JAM.policy.p1);
      return;
    }
    function v1259() {
      function v1258() {
        var v1965 = TypeScript$$32.Binder;
        var v1966 = _this$$18.typeChecker;
        var binder$$1 = JAM.new(v1965, [v1966]);
        var v1967 = _this$$18.typeChecker;
        v1967.units = _this$$18.units;
        var v12659 = _this$$18.typeChecker;
        var v1968 = v12659.globalScope;
        var v12660 = _this$$18.typeChecker;
        var v1969 = v12660.globals;
        JAM.call(binder$$1.bind, binder$$1, [v1968, v1969], JAM.policy.p1);
        var v12661 = _this$$18.typeChecker;
        var v1970 = v12661.globalScope;
        var v12662 = _this$$18.typeChecker;
        var v1971 = v12662.ambientGlobals;
        JAM.call(binder$$1.bind, binder$$1, [v1970, v1971], JAM.policy.p1);
        var v12663 = _this$$18.typeChecker;
        var v1972 = v12663.globalScope;
        var v12664 = _this$$18.typeChecker;
        var v1973 = v12664.globalTypes;
        JAM.call(binder$$1.bind, binder$$1, [v1972, v1973], JAM.policy.p1);
        var v12665 = _this$$18.typeChecker;
        var v1974 = v12665.globalScope;
        var v12666 = _this$$18.typeChecker;
        var v1975 = v12666.ambientGlobalTypes;
        JAM.call(binder$$1.bind, binder$$1, [v1974, v1975], JAM.policy.p1);
        var v1976 = _this$$18;
        var v12667 = TypeScript$$32.TypeFlow;
        var v12668 = _this$$18.logger;
        var v18761 = _this$$18.typeChecker;
        var v12669 = v18761.globalScope;
        var v12670 = _this$$18.parser;
        var v12671 = _this$$18.typeChecker;
        var v26449 = JAM.new(v12667, [v12668, v12669, v12670, v12671]);
        v1976.typeFlow = v26449;
        var i$$128 = 0;
        var script$$25 = null;
        var v12672 = _this$$18.scripts;
        var v1977 = v12672.members;
        var len$$60 = v1977.length;
        var v1978 = _this$$18.persistentTypeState;
        var v12673 = TypeScript$$32.TypeCheckCollectionMode;
        var v1979 = v12673.Resident;
        JAM.call(v1978.setCollectionMode, v1978, [v1979]);
        i$$128 = 0;
        var v1984 = i$$128 < len$$60;
        for (;v1984;) {
          var v12674 = _this$$18.scripts;
          var v1980 = v12674.members;
          script$$25 = v1980[i$$128];
          var v18762 = script$$25.isResident;
          var v12675 = !v18762;
          var v18763 = !v12675;
          if (v18763) {
            v12675 = script$$25.hasBeenTypeChecked;
          }
          var v1981 = v12675;
          if (v1981) {
            i$$128++;
            v1984 = i$$128 < len$$60;
            continue;
          }
          var v1982 = _this$$18.typeFlow;
          JAM.call(v1982.assignScopes, v1982, [script$$25]);
          var v1983 = _this$$18.typeFlow;
          v1983.initLibs();
          i$$128++;
          v1984 = i$$128 < len$$60;
        }
        i$$128 = 0;
        var v1988 = i$$128 < len$$60;
        for (;v1988;) {
          var v12676 = _this$$18.scripts;
          var v1985 = v12676.members;
          script$$25 = v1985[i$$128];
          var v18764 = script$$25.isResident;
          var v12677 = !v18764;
          var v18765 = !v12677;
          if (v18765) {
            v12677 = script$$25.hasBeenTypeChecked;
          }
          var v1986 = v12677;
          if (v1986) {
            i$$128++;
            v1988 = i$$128 < len$$60;
            continue;
          }
          var v1987 = _this$$18.typeFlow;
          JAM.call(v1987.typeCheck, v1987, [script$$25]);
          script$$25.hasBeenTypeChecked = true;
          i$$128++;
          v1988 = i$$128 < len$$60;
        }
        var v1989 = _this$$18.persistentTypeState;
        var v12678 = TypeScript$$32.TypeCheckCollectionMode;
        var v1990 = v12678.Transient;
        JAM.call(v1989.setCollectionMode, v1989, [v1990]);
        var v12679 = _this$$18.scripts;
        var v1991 = v12679.members;
        len$$60 = v1991.length;
        i$$128 = 0;
        var v1996 = i$$128 < len$$60;
        for (;v1996;) {
          var v12680 = _this$$18.scripts;
          var v1992 = v12680.members;
          script$$25 = v1992[i$$128];
          var v1993 = script$$25.isResident;
          if (v1993) {
            i$$128++;
            v1996 = i$$128 < len$$60;
            continue;
          }
          var v1994 = _this$$18.typeFlow;
          JAM.call(v1994.assignScopes, v1994, [script$$25]);
          var v1995 = _this$$18.typeFlow;
          v1995.initLibs();
          i$$128++;
          v1996 = i$$128 < len$$60;
        }
        i$$128 = 0;
        var v2000 = i$$128 < len$$60;
        for (;v2000;) {
          var v12681 = _this$$18.scripts;
          var v1997 = v12681.members;
          script$$25 = v1997[i$$128];
          var v1998 = script$$25.isResident;
          if (v1998) {
            i$$128++;
            v2000 = i$$128 < len$$60;
            continue;
          }
          var v1999 = _this$$18.typeFlow;
          JAM.call(v1999.typeCheck, v1999, [script$$25]);
          i$$128++;
          v2000 = i$$128 < len$$60;
        }
        return null;
      }
      var _this$$18 = this;
      return JAM.call(this.timeFunction, this, ["typeCheck()", v1258], JAM.policy.p1);
    }
    function v1257(sourceText$$9, filename$$9) {
      var v2001 = this.parser;
      var v2002 = this.errorOutput;
      JAM.call(v2001.setErrorRecovery, v2001, [v2002]);
      var v2003 = this.parser;
      var script$$24 = JAM.call(v2003.parse, v2003, [sourceText$$9, filename$$9, 0], JAM.policy.p1);
      var v2004 = this.units;
      var index$$64 = v2004.length;
      var v2005 = this.units;
      JAM.set(v2005, index$$64, script$$24.locationInfo);
      var v2006 = this.typeChecker;
      JAM.call(v2006.collectTypes, v2006, [script$$24]);
      var v2007 = this.scripts;
      JAM.call(v2007.append, v2007, [script$$24]);
      return;
    }
    function v1256(prog$$2, filename$$8) {
      var v12682 = TypeScript$$32.StringSourceText;
      var v2008 = JAM.new(v12682, [prog$$2]);
      JAM.call(this.parseSourceUnit, this, [v2008, filename$$8], JAM.policy.p1);
      return;
    }
    function v1255(sourceText$$8, filename$$7, keepResident$$1, referencedFiles$$2) {
      function v1254() {
        var v2009 = _this$$17.parser;
        var v12683 = _this$$17.units;
        var v2010 = v12683.length;
        var v12684 = TypeScript$$32.AllowedElements;
        var v2011 = v12684.Global;
        var script$$23 = JAM.call(v2009.parse, v2009, [sourceText$$8, filename$$7, v2010, v2011], JAM.policy.p1);
        script$$23.referencedFiles = referencedFiles$$2;
        script$$23.isResident = keepResident$$1;
        var v2012 = _this$$17.persistentTypeState;
        var v12685;
        if (keepResident$$1) {
          var v18766 = TypeScript$$32.TypeCheckCollectionMode;
          v12685 = v18766.Resident;
        } else {
          var v18767 = TypeScript$$32.TypeCheckCollectionMode;
          v12685 = v18767.Transient;
        }
        var v2013 = v12685;
        JAM.call(v2012.setCollectionMode, v2012, [v2013]);
        var v2014 = _this$$17.units;
        var index$$63 = v2014.length;
        var v2015 = _this$$17.units;
        JAM.set(v2015, index$$63, script$$23.locationInfo);
        var v2016 = _this$$17.typeChecker;
        JAM.call(v2016.collectTypes, v2016, [script$$23]);
        var v2017 = _this$$17.scripts;
        JAM.call(v2017.append, v2017, [script$$23]);
        return script$$23;
      }
      var v12686 = typeof referencedFiles$$2;
      var v2018 = v12686 === "undefined";
      if (v2018) {
        referencedFiles$$2 = [];
      }
      var _this$$17 = this;
      var v22835 = "addSourceUnit(" + filename$$7;
      var v18768 = v22835 + ", ";
      var v12687 = v18768 + keepResident$$1;
      var v2019 = v12687 + ")";
      JAM.call(this.timeFunction, this, [v2019, v1254], JAM.policy.p1);
      return;
    }
    function v1253(prog$$1, filename$$6, keepResident, referencedFiles$$1) {
      var v12688 = typeof keepResident;
      var v2020 = v12688 === "undefined";
      if (v2020) {
        keepResident = false;
      }
      var v12689 = typeof referencedFiles$$1;
      var v2021 = v12689 === "undefined";
      if (v2021) {
        referencedFiles$$1 = [];
      }
      var v12690 = TypeScript$$32.StringSourceText;
      var v2022 = JAM.new(v12690, [prog$$1]);
      JAM.call(this.addSourceUnit, this, [v2022, filename$$6, keepResident, referencedFiles$$1], JAM.policy.p1);
      return;
    }
    function v1252(sourceText$$7, filename$$5, setRecovery$$2) {
      function v1251() {
        function v1250(minChar$$36, charLen$$1, message$$21, unitIndex$$14) {
          var v12691 = minChar$$36 + charLen$$1;
          var v2023 = JAM.new(ErrorEntry, [unitIndex$$14, minChar$$36, v12691, message$$21]);
          JAM.call(parseErrors$$4.push, parseErrors$$4, [v2023]);
          return;
        }
        var i$$127 = 0;
        var v2024 = _this$$16.units;
        var len$$59 = v2024.length;
        var v2033 = i$$127 < len$$59;
        for (;v2033;) {
          var v22836 = _this$$16.units;
          var v18769 = v22836[i$$127];
          var v12692 = v18769.filename;
          var v2032 = v12692 == filename$$5;
          if (v2032) {
            var v22837 = _this$$16.scripts;
            var v18770 = v22837.members;
            var v12693 = v18770[i$$127];
            var v2025 = v12693.isResident;
            if (v2025) {
              return JAM.call(UpdateUnitResult.noEdits, UpdateUnitResult, [i$$127]);
            }
            if (setRecovery$$2) {
              var v2026 = _this$$16.parser;
              JAM.call(v2026.setErrorRecovery, v2026, [null]);
            }
            var updateResult$$3;
            var parseErrors$$4 = [];
            var errorCapture$$2 = v1250;
            var v2027 = _this$$16.parser;
            var svErrorCallback = v2027.errorCallback;
            if (svErrorCallback) {
              var v2028 = _this$$16.parser;
              v2028.errorCallback = errorCapture$$2;
            }
            var v12694 = _this$$16.scripts;
            var v2029 = v12694.members;
            var oldScript = v2029[i$$127];
            var v2030 = _this$$16.parser;
            var newScript = JAM.call(v2030.parse, v2030, [sourceText$$7, filename$$5, i$$127], JAM.policy.p1);
            if (svErrorCallback) {
              var v2031 = _this$$16.parser;
              v2031.errorCallback = svErrorCallback;
            }
            updateResult$$3 = JAM.call(UpdateUnitResult.unknownEdits, UpdateUnitResult, [oldScript, newScript, parseErrors$$4], JAM.policy.p1);
            return updateResult$$3;
          }
          i$$127++;
          v2033 = i$$127 < len$$59;
        }
        var v12695 = 'Unknown file "' + filename$$5;
        var v2034 = v12695 + '"';
        throw new Error(v2034);
      }
      var _this$$16 = this;
      var v12696 = "partialUpdateUnit(" + filename$$5;
      var v2035 = v12696 + ")";
      return JAM.call(this.timeFunction, this, [v2035, v1251], JAM.policy.p1);
    }
    function v1249(updateResult$$2) {
      var v2050 = updateResult$$2.kind;
      switch(v2050) {
        case UpdateUnitKind.NoEdits:
          return false;
        case UpdateUnitKind.Unknown:
          var v12697 = this.scripts;
          var v2036 = v12697.members;
          var v2037 = updateResult$$2.unitIndex;
          JAM.set(v2036, v2037, updateResult$$2.script2);
          var v2038 = this.units;
          var v2039 = updateResult$$2.unitIndex;
          var v12698 = updateResult$$2.script2;
          JAM.set(v2038, v2039, v12698.locationInfo);
          var i$$126 = 0;
          var v2040 = updateResult$$2.parseErrors;
          var len$$58 = v2040.length;
          var v2048 = i$$126 < len$$58;
          for (;v2048;) {
            var v2041 = updateResult$$2.parseErrors;
            var e$$10 = v2041[i$$126];
            var v12699 = this.parser;
            var v2047 = v12699.errorCallback;
            if (v2047) {
              var v2042 = this.parser;
              var v2043 = e$$10.minChar;
              var v12700 = e$$10.limChar;
              var v12701 = e$$10.minChar;
              var v2044 = v12700 - v12701;
              var v2045 = e$$10.message;
              var v2046 = e$$10.unitIndex;
              JAM.call(v2042.errorCallback, v2042, [v2043, v2044, v2045, v2046], JAM.policy.p1);
            }
            i$$126++;
            v2048 = i$$126 < len$$58;
          }
          return true;
        case UpdateUnitKind.EditsInsideSingleScope:
          var v12702 = TypeScript$$32.IncrementalParser;
          var v12703 = this.logger;
          var v2049 = JAM.new(v12702, [v12703]);
          JAM.call(v2049.mergeTrees, v2049, [updateResult$$2]);
          return true;
      }
      return;
    }
    function v1248(sourceText$$6, filename$$4, setRecovery$$1) {
      function v1247() {
        var updateResult$$1 = JAM.call(_this$$15.partialUpdateUnit, _this$$15, [sourceText$$6, filename$$4, setRecovery$$1], JAM.policy.p1);
        return JAM.call(_this$$15.applyUpdateResult, _this$$15, [updateResult$$1]);
      }
      var _this$$15 = this;
      var v12704 = "updateSourceUnit(" + filename$$4;
      var v2051 = v12704 + ")";
      return JAM.call(this.timeFunction, this, [v2051, v1247], JAM.policy.p1);
    }
    function v1246(prog, filename$$3, setRecovery) {
      var v12705 = TypeScript$$32.StringSourceText;
      var v2052 = JAM.new(v12705, [prog]);
      return JAM.call(this.updateSourceUnit, this, [v2052, filename$$3, setRecovery], JAM.policy.p1);
    }
    function v1245(fn$$10) {
      var v2053 = this.parser;
      v2053.errorCallback = fn$$10;
      return;
    }
    function v1244() {
      var v2054 = TypeScript$$32.EmitOptions;
      var v2055 = this.settings;
      var v26450 = JAM.new(v2054, [v2055]);
      this.emitSettings = v26450;
      return;
    }
    function v1243(outerr$$2) {
      this.errorOutput = outerr$$2;
      var v2056 = this.errorReporter;
      JAM.call(v2056.setErrOut, v2056, [outerr$$2]);
      var v2057 = this.parser;
      v2057.outfile = outerr$$2;
      return;
    }
    function v1242(errorOutput$$1) {
      var v2058 = this.persistentTypeState;
      v2058.refreshPersistentState();
      var v2059 = TypeScript$$32.TypeChecker;
      var v2060 = this.persistentTypeState;
      var v26451 = JAM.new(v2059, [v2060]);
      this.typeChecker = v26451;
      var v2061 = this.typeChecker;
      v2061.errorReporter = this.errorReporter;
      var v2062 = this.typeChecker;
      var v12706 = this.settings;
      v2062.checkControlFlow = v12706.controlFlow;
      var v2063 = this.typeChecker;
      var v12707 = this.settings;
      v2063.checkControlFlowUseDef = v12707.controlFlowUseDef;
      var v2064 = this.typeChecker;
      var v12708 = this.settings;
      v2064.printControlFlowGraph = v12708.printControlFlow;
      var v2065 = this.typeChecker;
      var v12709 = this.settings;
      v2065.errorsOnWith = v12709.errorOnWith;
      var v2066 = this.typeChecker;
      var v12710 = this.settings;
      v2066.styleSettings = v12710.styleSettings;
      var v2067 = this.typeChecker;
      var v12711 = this.settings;
      v2067.canCallDefinitionSignature = v12711.canCallDefinitionSignature;
      var v2068 = this.errorReporter;
      v2068.checker = this.typeChecker;
      var v2069 = this.errorOutput;
      JAM.call(this.setErrorOutput, this, [v2069]);
      return;
    }
    function v1241(funcDescription, func$$4) {
      var v2070 = this.logger;
      return JAM.call(TypeScript$$32.timeFunction, TypeScript$$32, [v2070, funcDescription, func$$4], JAM.policy.p1);
    }
    function TypeScriptCompiler$$1(errorOutput, logger$$6, settings$$4) {
      var v12712 = typeof logger$$6;
      var v2072 = v12712 === "undefined";
      if (v2072) {
        var v2071 = TypeScript$$32.NullLogger;
        logger$$6 = new v2071;
      }
      var v12713 = typeof settings$$4;
      var v2073 = v12713 === "undefined";
      if (v2073) {
        settings$$4 = TypeScript$$32.defaultSettings;
      }
      this.errorOutput = errorOutput;
      this.logger = logger$$6;
      this.settings = settings$$4;
      var v2074 = TypeScript$$32.Parser;
      var v26452 = new v2074;
      this.parser = v26452;
      this.typeFlow = null;
      var v2075 = TypeScript$$32.ASTList;
      var v26453 = new v2075;
      this.scripts = v26453;
      var v26454 = new Array;
      this.units = v26454;
      var v2076 = TypeScript$$32.ErrorReporter;
      var v2077 = this.errorOutput;
      var v26455 = JAM.new(v2076, [v2077]);
      this.errorReporter = v26455;
      var v2078 = TypeScript$$32.PersistentGlobalTypeState;
      var v2079 = this.errorReporter;
      var v26456 = JAM.new(v2078, [v2079]);
      this.persistentTypeState = v26456;
      var v2080 = this.errorReporter;
      v2080.parser = this.parser;
      var v2081 = this.errorOutput;
      JAM.call(this.initTypeChecker, this, [v2081]);
      var v2082 = this.parser;
      var v18771 = this.settings;
      var v12714 = v18771.styleSettings;
      v2082.style_requireSemi = v12714.requireSemi;
      var v2083 = this.parser;
      var v18772 = this.settings;
      var v12715 = v18772.styleSettings;
      v2083.style_funcInLoop = v12715.funcInLoop;
      var v2084 = this.parser;
      var v12716 = this.settings;
      v2084.inferPropertiesFromThisAssignment = v12716.inferPropertiesFromThisAssignment;
      var v2085 = TypeScript$$32.EmitOptions;
      var v2086 = this.settings;
      var v26457 = JAM.new(v2085, [v2086]);
      this.emitSettings = v26457;
      TypeScript$$32.codeGenTarget = settings$$4.codeGenTarget;
      return;
    }
    var v2087 = TypeScriptCompiler$$1.prototype;
    v2087.timeFunction = v1241;
    var v2088 = TypeScriptCompiler$$1.prototype;
    v2088.initTypeChecker = v1242;
    var v2089 = TypeScriptCompiler$$1.prototype;
    v2089.setErrorOutput = v1243;
    var v2090 = TypeScriptCompiler$$1.prototype;
    v2090.emitCommentsToOutput = v1244;
    var v2091 = TypeScriptCompiler$$1.prototype;
    v2091.setErrorCallback = v1245;
    var v2092 = TypeScriptCompiler$$1.prototype;
    v2092.updateUnit = v1246;
    var v2093 = TypeScriptCompiler$$1.prototype;
    v2093.updateSourceUnit = v1248;
    var v2094 = TypeScriptCompiler$$1.prototype;
    v2094.applyUpdateResult = v1249;
    var v2095 = TypeScriptCompiler$$1.prototype;
    v2095.partialUpdateUnit = v1252;
    var v2096 = TypeScriptCompiler$$1.prototype;
    v2096.addUnit = v1253;
    var v2097 = TypeScriptCompiler$$1.prototype;
    v2097.addSourceUnit = v1255;
    var v2098 = TypeScriptCompiler$$1.prototype;
    v2098.parseUnit = v1256;
    var v2099 = TypeScriptCompiler$$1.prototype;
    v2099.parseSourceUnit = v1257;
    var v2100 = TypeScriptCompiler$$1.prototype;
    v2100.typeCheck = v1259;
    var v2101 = TypeScriptCompiler$$1.prototype;
    v2101.cleanASTTypesForReTypeCheck = v1260;
    var v2102 = TypeScriptCompiler$$1.prototype;
    v2102.cleanTypesForReTypeCheck = v1262;
    var v2103 = TypeScriptCompiler$$1.prototype;
    v2103.attemptIncrementalTypeCheck = v1264;
    var v2104 = TypeScriptCompiler$$1.prototype;
    v2104.reTypeCheck = v1266;
    var v2105 = TypeScriptCompiler$$1.prototype;
    v2105.isDynamicModuleCompilation = v1267;
    var v2106 = TypeScriptCompiler$$1.prototype;
    v2106.updateCommonDirectoryPath = v1268;
    var v2107 = TypeScriptCompiler$$1.prototype;
    v2107.parseEmitOption = v1269;
    var v2108 = TypeScriptCompiler$$1.prototype;
    v2108.useUTF8ForFile = v1270;
    TypeScriptCompiler$$1.mapToDTSFileName = mapToDTSFileName;
    var v2109 = TypeScriptCompiler$$1.prototype;
    v2109.canEmitDeclarations = v1271;
    var v2110 = TypeScriptCompiler$$1.prototype;
    v2110.emitDeclarationsUnit = v1272;
    var v2111 = TypeScriptCompiler$$1.prototype;
    v2111.emitDeclarations = v1273;
    TypeScriptCompiler$$1.mapToFileNameExtension = mapToFileNameExtension;
    TypeScriptCompiler$$1.mapToJSFileName = mapToJSFileName;
    var v2112 = TypeScriptCompiler$$1.prototype;
    v2112.emitUnit = v1274;
    var v2113 = TypeScriptCompiler$$1.prototype;
    v2113.emit = v1275;
    var v2114 = TypeScriptCompiler$$1.prototype;
    v2114.emitToOutfile = v1276;
    var v2115 = TypeScriptCompiler$$1.prototype;
    v2115.emitAST = v1278;
    var v2116 = TypeScriptCompiler$$1.prototype;
    v2116.outputScriptToUTF8 = v1279;
    var v2117 = TypeScriptCompiler$$1.prototype;
    v2117.outputScriptsToUTF8 = v1280;
    var v2118 = TypeScriptCompiler$$1.prototype;
    v2118.createFile = v1281;
    return TypeScriptCompiler$$1;
  }
  function v1240() {
    function ErrorEntry$$1(unitIndex$$13, minChar$$35, limChar$$13, message$$20) {
      this.unitIndex = unitIndex$$13;
      this.minChar = minChar$$35;
      this.limChar = limChar$$13;
      this.message = message$$20;
      return;
    }
    return ErrorEntry$$1;
  }
  function v1239() {
    function singleScopeEdits(script1$$2, script2$$2, scope1$$2, scope2$$1, editRange$$4, parseErrors$$3) {
      var v2119 = UpdateUnitKind.EditsInsideSingleScope;
      var v12717 = script1$$2.locationInfo;
      var v2120 = v12717.unitIndex;
      var result$$36 = new UpdateUnitResult$$1(v2119, v2120, script1$$2, script2$$2);
      result$$36.scope1 = scope1$$2;
      result$$36.scope2 = scope2$$1;
      result$$36.editRange = editRange$$4;
      result$$36.parseErrors = parseErrors$$3;
      return result$$36;
    }
    function unknownEdits(script1$$1, script2$$1, parseErrors$$2) {
      var v2121 = UpdateUnitKind.Unknown;
      var v12718 = script1$$1.locationInfo;
      var v2122 = v12718.unitIndex;
      var result$$35 = new UpdateUnitResult$$1(v2121, v2122, script1$$1, script2$$1);
      result$$35.parseErrors = parseErrors$$2;
      return result$$35;
    }
    function noEdits(unitIndex$$12) {
      var v2123 = UpdateUnitKind.NoEdits;
      return new UpdateUnitResult$$1(v2123, unitIndex$$12, null, null);
    }
    function UpdateUnitResult$$1(kind, unitIndex$$11, script1, script2) {
      this.kind = kind;
      this.unitIndex = unitIndex$$11;
      this.script1 = script1;
      this.script2 = script2;
      this.scope1 = null;
      this.scope2 = null;
      this.editRange = null;
      this.parseErrors = [];
      return;
    }
    UpdateUnitResult$$1.noEdits = noEdits;
    UpdateUnitResult$$1.unknownEdits = unknownEdits;
    UpdateUnitResult$$1.singleScopeEdits = singleScopeEdits;
    return UpdateUnitResult$$1;
  }
  function v1238() {
    function v1237() {
      var v25695 = this.minChar;
      var v24828 = "editRange(minChar=" + v25695;
      var v22838 = v24828 + ", limChar=";
      var v22839 = this.limChar;
      var v18773 = v22838 + v22839;
      var v12719 = v18773 + ", delta=";
      var v12720 = this.delta;
      var v2124 = v12719 + v12720;
      return v2124 + ")";
    }
    function v1236(pos$$8) {
      var v18774 = this.minChar;
      var v12721 = v18774 <= pos$$8;
      if (v12721) {
        var v18775 = this.limChar;
        v12721 = pos$$8 < v18775;
      }
      var v2125 = v12721;
      var v12723 = !v2125;
      if (v12723) {
        var v18776 = this.minChar;
        var v12722 = v18776 <= pos$$8;
        if (v12722) {
          var v22840 = this.limChar;
          var v22841 = this.delta;
          var v18777 = v22840 + v22841;
          v12722 = pos$$8 < v18777;
        }
        v2125 = v12722;
      }
      return v2125;
    }
    function v1235() {
      var v18778 = this.minChar;
      var v12724 = v18778 === -1;
      if (v12724) {
        var v18779 = this.limChar;
        v12724 = v18779 === -1;
      }
      var v2126 = v12724;
      if (v2126) {
        var v12725 = this.delta;
        v2126 = v12725 === -1;
      }
      return v2126;
    }
    function unknown() {
      return new ScriptEditRange$$1(-1, -1, -1);
    }
    function ScriptEditRange$$1(minChar$$34, limChar$$12, delta$$2) {
      this.minChar = minChar$$34;
      this.limChar = limChar$$12;
      this.delta = delta$$2;
      return;
    }
    ScriptEditRange$$1.unknown = unknown;
    var v2127 = ScriptEditRange$$1.prototype;
    v2127.isUnknown = v1235;
    var v2128 = ScriptEditRange$$1.prototype;
    v2128.containsPosition = v1236;
    var v2129 = ScriptEditRange$$1.prototype;
    v2129.toString = v1237;
    return ScriptEditRange$$1;
  }
  function v1234(UpdateUnitKind$$1) {
    UpdateUnitKind$$1._map = [];
    var v2130 = UpdateUnitKind$$1._map;
    v2130[0] = "Unknown";
    UpdateUnitKind$$1.Unknown = 0;
    var v2131 = UpdateUnitKind$$1._map;
    v2131[1] = "NoEdits";
    UpdateUnitKind$$1.NoEdits = 1;
    var v2132 = UpdateUnitKind$$1._map;
    v2132[2] = "EditsInsideSingleScope";
    UpdateUnitKind$$1.EditsInsideSingleScope = 2;
    return;
  }
  var v12726 = TypeScript$$32.UpdateUnitKind;
  var v18780 = !v12726;
  if (v18780) {
    v12726 = TypeScript$$32.UpdateUnitKind = {};
  }
  var v2133 = v12726;
  v1234(v2133);
  var UpdateUnitKind = TypeScript$$32.UpdateUnitKind;
  var ScriptEditRange = v1238();
  TypeScript$$32.ScriptEditRange = ScriptEditRange;
  var UpdateUnitResult = v1239();
  TypeScript$$32.UpdateUnitResult = UpdateUnitResult;
  var ErrorEntry = v1240();
  TypeScript$$32.ErrorEntry = ErrorEntry;
  var v2134 = TypeScript$$32;
  var v12727 = TypeScript$$32.CompilationSettings;
  var v26458 = new v12727;
  v2134.defaultSettings = v26458;
  var TypeScriptCompiler = v1282();
  TypeScript$$32.TypeScriptCompiler = TypeScriptCompiler;
  var ScopeEntry = v1283();
  TypeScript$$32.ScopeEntry = ScopeEntry;
  var ScopeTraversal = v1287();
  TypeScript$$32.ScopeTraversal = ScopeTraversal;
  return;
}
function v1233(TypeScript$$31) {
  function v1232() {
    function v1231(pre$$21, ast$$121) {
      var v12728 = ast$$121.flags;
      var v18781 = TypeScript$$31.ASTFlags;
      var v12729 = v18781.IsStatement;
      var v2135 = JAM.call(TypeScript$$31.hasFlag, TypeScript$$31, [v12728, v12729], JAM.policy.p1);
      return !v2135;
    }
    function v1230(pre$$20, script$$22) {
      if (pre$$20) {
        var v12730 = this.emitOptions;
        var v2144 = v12730.outputMany;
        if (v2144) {
          var i$$125 = 0;
          var v18782 = script$$22.referencedFiles;
          var v12731 = v18782.length;
          var v2143 = i$$125 < v12731;
          for (;v2143;) {
            var v12732 = script$$22.referencedFiles;
            var v2136 = v12732[i$$125];
            var referencePath$$1 = v2136.path;
            var declareFileName$$1;
            var v2140 = JAM.call(TypeScript$$31.isRooted, TypeScript$$31, [referencePath$$1]);
            if (v2140) {
              var v2137 = this.emitOptions;
              var v12733 = TypeScript$$31.TypeScriptCompiler;
              var v2138 = v12733.mapToDTSFileName;
              declareFileName$$1 = JAM.call(v2137.mapOutputFileName, v2137, [referencePath$$1, v2138], JAM.policy.p1);
            } else {
              var v18783 = script$$22.referencedFiles;
              var v12734 = v18783[i$$125];
              var v2139 = v12734.path;
              declareFileName$$1 = JAM.call(TypeScript$$31.getDeclareFilePath, TypeScript$$31, [v2139]);
            }
            var v2141 = this.declFile;
            var v12735 = '/// <reference path="' + declareFileName$$1;
            var v2142 = v12735 + '" />';
            JAM.call(v2141.WriteLine, v2141, [v2142]);
            i$$125++;
            var v18784 = script$$22.referencedFiles;
            var v12736 = v18784.length;
            v2143 = i$$125 < v12736;
          }
        }
        JAM.call(this.pushDeclarationContainer, this, [script$$22]);
      } else {
        JAM.call(this.popDeclarationContainer, this, [script$$22]);
      }
      return true;
    }
    function v1229(pre$$19, moduleDecl$$9) {
      var v12737 = moduleDecl$$9.modFlags;
      var v18785 = TypeScript$$31.ModuleFlags;
      var v12738 = v18785.IsWholeFile;
      var v2164 = JAM.call(TypeScript$$31.hasFlag, TypeScript$$31, [v12737, v12738], JAM.policy.p1);
      if (v2164) {
        var v12739 = moduleDecl$$9.modFlags;
        var v18786 = TypeScript$$31.ModuleFlags;
        var v12740 = v18786.IsDynamic;
        var v2163 = JAM.call(TypeScript$$31.hasFlag, TypeScript$$31, [v12739, v12740], JAM.policy.p1);
        if (v2163) {
          if (pre$$19) {
            var v18787 = this.emitOptions;
            var v12741 = v18787.outputMany;
            var v2154 = !v12741;
            if (v2154) {
              this.singleDeclFile = this.declFile;
              var v2145 = TypeScript$$31.CompilerDiagnostics;
              var v18788 = this.indenter;
              var v12742 = v18788.indentAmt;
              var v2146 = v12742 == 0;
              JAM.call(v2145.assert, v2145, [v2146, "Indent has to be 0 when outputing new file"], JAM.policy.p1);
              var v2147 = this.emitOptions;
              var v22842 = moduleDecl$$9.name;
              var v18789 = v22842.sym;
              var v12743 = v18789.name;
              var v2148 = JAM.call(TypeScript$$31.stripQuotes, TypeScript$$31, [v12743]);
              var v12744 = TypeScript$$31.TypeScriptCompiler;
              var v2149 = v12744.mapToDTSFileName;
              var declareFileName = JAM.call(v2147.mapOutputFileName, v2147, [v2148, v2149], JAM.policy.p1);
              var v2150 = moduleDecl$$9.containsUnicodeChar;
              var v12746 = !v2150;
              if (v12746) {
                var v18790 = this.emitOptions;
                var v12745 = v18790.emitComments;
                if (v12745) {
                  v12745 = moduleDecl$$9.containsUnicodeCharInComment;
                }
                v2150 = v12745;
              }
              var useUTF8InOutputfile$$1 = v2150;
              try {
                var v18791 = this.emitOptions;
                var v12747 = v18791.ioHost;
                var v2151 = JAM.call(v12747.createFile, v12747, [declareFileName, useUTF8InOutputfile$$1], JAM.policy.p1);
                var v26459 = JAM.new(DeclFileWriter, [v2151]);
                this.declFile = v26459;
              } catch (ex$$4) {
                var v2152 = this.errorReporter;
                var v2153 = ex$$4.message;
                JAM.call(v2152.emitterError, v2152, [v2153]);
              }
            }
            JAM.call(this.pushDeclarationContainer, this, [moduleDecl$$9]);
          } else {
            var v18792 = this.emitOptions;
            var v12748 = v18792.outputMany;
            var v2162 = !v12748;
            if (v2162) {
              var v2155 = TypeScript$$31.CompilerDiagnostics;
              var v12749 = this.singleDeclFile;
              var v12750 = this.declFile;
              var v2156 = v12749 != v12750;
              JAM.call(v2155.assert, v2155, [v2156, "singleDeclFile cannot be null as we are going to revert back to it"], JAM.policy.p1);
              var v2157 = TypeScript$$31.CompilerDiagnostics;
              var v18793 = this.indenter;
              var v12751 = v18793.indentAmt;
              var v2158 = v12751 == 0;
              JAM.call(v2157.assert, v2157, [v2158, "Indent has to be 0 when outputing new file"], JAM.policy.p1);
              try {
                var v2159 = this.declFile;
                v2159.Close();
              } catch (ex$$5) {
                var v2160 = this.errorReporter;
                var v2161 = ex$$5.message;
                JAM.call(v2160.emitterError, v2160, [v2161]);
              }
              this.declFile = this.singleDeclFile;
            }
            JAM.call(this.popDeclarationContainer, this, [moduleDecl$$9]);
          }
        }
        return true;
      }
      var v2165 = moduleDecl$$9.isEnum();
      if (v2165) {
        if (pre$$19) {
          JAM.call(this.emitEnumSignature, this, [moduleDecl$$9]);
        }
        return false;
      }
      var v22843 = moduleDecl$$9.modFlags;
      var v18794 = JAM.call(TypeScript$$31.ToDeclFlags, TypeScript$$31, [v22843]);
      var v12752 = JAM.call(this.canEmitPrePostAstSignature, this, [v18794, moduleDecl$$9, pre$$19], JAM.policy.p1);
      var v2166 = !v12752;
      if (v2166) {
        return false;
      }
      if (pre$$19) {
        var v2168 = this.emitDottedModuleName();
        if (v2168) {
          var v12753 = this.dottedModuleEmit;
          this.dottedModuleEmit = v12753 + ".";
        } else {
          var v12754 = moduleDecl$$9.modFlags;
          var v2167 = JAM.call(TypeScript$$31.ToDeclFlags, TypeScript$$31, [v12754]);
          var v26460 = JAM.call(this.getDeclFlagsString, this, [v2167, "module"], JAM.policy.p1);
          this.dottedModuleEmit = v26460;
        }
        var v12755 = this.dottedModuleEmit;
        var v18795 = moduleDecl$$9.name;
        var v12756 = v18795.text;
        this.dottedModuleEmit = v12755 + v12756;
        var v25696 = moduleDecl$$9.members;
        var v24829 = v25696.members;
        var v22844 = v24829.length;
        var v18796 = v22844 == 1;
        if (v18796) {
          var v26083 = moduleDecl$$9.members;
          var v25697 = v26083.members;
          var v24830 = v25697[0];
          var v22845 = v24830.nodeType;
          var v24831 = TypeScript$$31.NodeType;
          var v22846 = v24831.ModuleDeclaration;
          v18796 = v22845 == v22846;
        }
        var v12757 = v18796;
        if (v12757) {
          var v25698 = moduleDecl$$9.members;
          var v24832 = v25698.members;
          var v22847 = v24832[0];
          var v18797 = v22847.isEnum();
          v12757 = !v18797;
        }
        var v2169 = v12757;
        if (v2169) {
          var v24833 = moduleDecl$$9.members;
          var v22848 = v24833.members;
          var v18798 = v22848[0];
          var v12758 = v18798.modFlags;
          var v18799 = TypeScript$$31.ModuleFlags;
          var v12759 = v18799.Exported;
          v2169 = JAM.call(TypeScript$$31.hasFlag, TypeScript$$31, [v12758, v12759], JAM.policy.p1);
        }
        var isCurrentModuleDotted = v2169;
        var moduleDeclComments = moduleDecl$$9.getDocComments();
        var v2170 = isCurrentModuleDotted;
        if (v2170) {
          var v12760 = moduleDeclComments == null;
          var v18801 = !v12760;
          if (v18801) {
            var v18800 = moduleDeclComments.length;
            v12760 = v18800 == 0;
          }
          v2170 = v12760;
        }
        isCurrentModuleDotted = v2170;
        var v2171 = this.isDottedModuleName;
        JAM.call(v2171.push, v2171, [isCurrentModuleDotted]);
        JAM.call(this.pushDeclarationContainer, this, [moduleDecl$$9]);
        var v2176 = !isCurrentModuleDotted;
        if (v2176) {
          JAM.call(this.emitDeclarationComments, this, [moduleDecl$$9]);
          var v2172 = this.declFile;
          var v2173 = this.dottedModuleEmit;
          JAM.call(v2172.Write, v2172, [v2173]);
          var v2174 = this.declFile;
          JAM.call(v2174.WriteLine, v2174, [" {"]);
          var v2175 = this.indenter;
          v2175.increaseIndent();
        }
      } else {
        var v12761 = this.emitDottedModuleName();
        var v2179 = !v12761;
        if (v2179) {
          var v2177 = this.indenter;
          v2177.decreaseIndent();
          this.emitIndent();
          var v2178 = this.declFile;
          JAM.call(v2178.WriteLine, v2178, ["}"]);
        }
        JAM.call(this.popDeclarationContainer, this, [moduleDecl$$9]);
        var v2180 = this.isDottedModuleName;
        v2180.pop();
      }
      return true;
    }
    function v1228(moduleDecl$$8) {
      var v22849 = moduleDecl$$8.modFlags;
      var v18802 = JAM.call(TypeScript$$31.ToDeclFlags, TypeScript$$31, [v22849]);
      var v12762 = JAM.call(this.canEmitSignature, this, [v18802]);
      var v2181 = !v12762;
      if (v2181) {
        return;
      }
      JAM.call(this.emitDeclarationComments, this, [moduleDecl$$8]);
      var v12763 = moduleDecl$$8.modFlags;
      var v2182 = JAM.call(TypeScript$$31.ToDeclFlags, TypeScript$$31, [v12763]);
      JAM.call(this.emitDeclFlags, this, [v2182, "enum"], JAM.policy.p1);
      var v2183 = this.declFile;
      var v18803 = moduleDecl$$8.name;
      var v12764 = v18803.text;
      var v2184 = v12764 + " {";
      JAM.call(v2183.WriteLine, v2183, [v2184]);
      var v2185 = this.indenter;
      v2185.increaseIndent();
      var v12765 = moduleDecl$$8.members;
      var v2186 = v12765.members;
      var membersLen$$1 = v2186.length;
      var j$$19 = 1;
      var v2193 = j$$19 < membersLen$$1;
      for (;v2193;) {
        var v12766 = moduleDecl$$8.members;
        var v2187 = v12766.members;
        var memberDecl$$1 = v2187[j$$19];
        var v12767 = memberDecl$$1.nodeType;
        var v18804 = TypeScript$$31.NodeType;
        var v12768 = v18804.VarDecl;
        var v2192 = v12767 == v12768;
        if (v2192) {
          JAM.call(this.emitDeclarationComments, this, [memberDecl$$1]);
          this.emitIndent();
          var v2188 = this.declFile;
          var v18805 = memberDecl$$1.id;
          var v12769 = v18805.text;
          var v2189 = v12769 + ",";
          JAM.call(v2188.WriteLine, v2188, [v2189]);
        } else {
          var v2190 = TypeScript$$31.CompilerDiagnostics;
          var v12770 = memberDecl$$1.nodeType;
          var v18806 = TypeScript$$31.NodeType;
          var v12771 = v18806.Asg;
          var v2191 = v12770 != v12771;
          JAM.call(v2190.assert, v2190, [v2191, "We want to catch this"], JAM.policy.p1);
        }
        j$$19++;
        v2193 = j$$19 < membersLen$$1;
      }
      var v2194 = this.indenter;
      v2194.decreaseIndent();
      this.emitIndent();
      var v2195 = this.declFile;
      JAM.call(v2195.WriteLine, v2195, ["}"]);
      return;
    }
    function v1227(pre$$18, importDecl$$3) {
      if (pre$$18) {
        var v18807 = this.declarationContainerStack;
        var v12772 = v18807[0];
        var v18808 = importDecl$$3.id;
        var v12773 = v18808.sym;
        var v2204 = JAM.call(v12772.isExternallyVisibleSymbol, v12772, [v12773]);
        if (v2204) {
          JAM.call(this.emitDeclarationComments, this, [importDecl$$3]);
          this.emitIndent();
          var v2196 = this.declFile;
          JAM.call(v2196.Write, v2196, ["import "]);
          var v2197 = this.declFile;
          var v18809 = importDecl$$3.id;
          var v12774 = v18809.text;
          var v2198 = v12774 + " = ";
          JAM.call(v2197.Write, v2197, [v2198]);
          var v2203 = importDecl$$3.isDynamicImport;
          if (v2203) {
            var v2199 = this.declFile;
            var v18810 = importDecl$$3.getAliasName();
            var v12775 = "module (" + v18810;
            var v2200 = v12775 + ");";
            JAM.call(v2199.WriteLine, v2199, [v2200]);
          } else {
            var v2201 = this.declFile;
            var v12776 = importDecl$$3.getAliasName();
            var v2202 = v12776 + ";";
            JAM.call(v2201.WriteLine, v2201, [v2202]);
          }
        }
      }
      return false;
    }
    function v1226(pre$$17, interfaceDecl$$7) {
      var v22850 = interfaceDecl$$7.varFlags;
      var v18811 = JAM.call(TypeScript$$31.ToDeclFlags, TypeScript$$31, [v22850]);
      var v12777 = JAM.call(this.canEmitPrePostAstSignature, this, [v18811, interfaceDecl$$7, pre$$17], JAM.policy.p1);
      var v2205 = !v12777;
      if (v2205) {
        return false;
      }
      if (pre$$17) {
        var v2206 = interfaceDecl$$7.name;
        var interfaceName$$1 = v2206.text;
        JAM.call(this.emitDeclarationComments, this, [interfaceDecl$$7]);
        var v12778 = interfaceDecl$$7.varFlags;
        var v2207 = JAM.call(TypeScript$$31.ToDeclFlags, TypeScript$$31, [v12778]);
        JAM.call(this.emitDeclFlags, this, [v2207, "interface"], JAM.policy.p1);
        var v2208 = this.declFile;
        JAM.call(v2208.Write, v2208, [interfaceName$$1]);
        var v2209 = interfaceDecl$$7.extendsList;
        JAM.call(this.emitBaseList, this, [v2209, "extends"], JAM.policy.p1);
        var v2210 = this.declFile;
        JAM.call(v2210.WriteLine, v2210, [" {"]);
        var v2211 = this.indenter;
        v2211.increaseIndent();
        JAM.call(this.pushDeclarationContainer, this, [interfaceDecl$$7]);
      } else {
        var v2212 = this.indenter;
        v2212.decreaseIndent();
        JAM.call(this.popDeclarationContainer, this, [interfaceDecl$$7]);
        this.emitIndent();
        var v2213 = this.declFile;
        JAM.call(v2213.WriteLine, v2213, ["}"]);
      }
      return true;
    }
    function v1225(pre$$16, classDecl$$10) {
      var v22851 = classDecl$$10.varFlags;
      var v18812 = JAM.call(TypeScript$$31.ToDeclFlags, TypeScript$$31, [v22851]);
      var v12779 = JAM.call(this.canEmitPrePostAstSignature, this, [v18812, classDecl$$10, pre$$16], JAM.policy.p1);
      var v2214 = !v12779;
      if (v2214) {
        return false;
      }
      if (pre$$16) {
        var v2215 = classDecl$$10.name;
        var className$$5 = v2215.text;
        JAM.call(this.emitDeclarationComments, this, [classDecl$$10]);
        var v12780 = classDecl$$10.varFlags;
        var v2216 = JAM.call(TypeScript$$31.ToDeclFlags, TypeScript$$31, [v12780]);
        JAM.call(this.emitDeclFlags, this, [v2216, "class"], JAM.policy.p1);
        var v2217 = this.declFile;
        JAM.call(v2217.Write, v2217, [className$$5]);
        var v2218 = classDecl$$10.extendsList;
        JAM.call(this.emitBaseList, this, [v2218, "extends"], JAM.policy.p1);
        var v2219 = classDecl$$10.implementsList;
        JAM.call(this.emitBaseList, this, [v2219, "implements"], JAM.policy.p1);
        var v2220 = this.declFile;
        JAM.call(v2220.WriteLine, v2220, [" {"]);
        JAM.call(this.pushDeclarationContainer, this, [classDecl$$10]);
        var v2221 = this.indenter;
        v2221.increaseIndent();
        var v2223 = classDecl$$10.constructorDecl;
        if (v2223) {
          var v2222 = classDecl$$10.constructorDecl;
          JAM.call(this.emitClassMembersFromConstructorDefinition, this, [v2222]);
        }
      } else {
        var v2224 = this.indenter;
        v2224.decreaseIndent();
        JAM.call(this.popDeclarationContainer, this, [classDecl$$10]);
        this.emitIndent();
        var v2225 = this.declFile;
        JAM.call(v2225.WriteLine, v2225, ["}"]);
      }
      return true;
    }
    function v1224(funcDecl$$37) {
      var v2238 = funcDecl$$37.arguments;
      if (v2238) {
        var v12781 = funcDecl$$37.arguments;
        var v2226 = v12781.members;
        var argsLen$$3 = v2226.length;
        var v2227 = funcDecl$$37.variableArgList;
        if (v2227) {
          argsLen$$3--;
        }
        var i$$124 = 0;
        var v2237 = i$$124 < argsLen$$3;
        for (;v2237;) {
          var v12782 = funcDecl$$37.arguments;
          var v2228 = v12782.members;
          var argDecl$$4 = v2228[i$$124];
          var v12783 = argDecl$$4.varFlags;
          var v18813 = TypeScript$$31.VarFlags;
          var v12784 = v18813.Property;
          var v2236 = JAM.call(TypeScript$$31.hasFlag, TypeScript$$31, [v12783, v12784], JAM.policy.p1);
          if (v2236) {
            JAM.call(this.emitDeclarationComments, this, [argDecl$$4]);
            var v12785 = argDecl$$4.varFlags;
            var v2229 = JAM.call(TypeScript$$31.ToDeclFlags, TypeScript$$31, [v12785]);
            JAM.call(this.emitDeclFlags, this, [v2229, "var"], JAM.policy.p1);
            var v2230 = this.declFile;
            var v12786 = argDecl$$4.id;
            var v2231 = v12786.text;
            JAM.call(v2230.Write, v2230, [v2231]);
            var v12787 = argDecl$$4.typeExpr;
            if (v12787) {
              var v22852 = argDecl$$4.varFlags;
              var v18814 = JAM.call(TypeScript$$31.ToDeclFlags, TypeScript$$31, [v22852]);
              v12787 = JAM.call(this.canEmitTypeAnnotationSignature, this, [v18814]);
            }
            var v2234 = v12787;
            if (v2234) {
              var v2232 = this.declFile;
              JAM.call(v2232.Write, v2232, [": "]);
              var v2233 = argDecl$$4.type;
              JAM.call(this.emitTypeSignature, this, [v2233]);
            }
            var v2235 = this.declFile;
            JAM.call(v2235.WriteLine, v2235, [";"]);
          }
          i$$124++;
          v2237 = i$$124 < argsLen$$3;
        }
      }
      return;
    }
    function v1223(funcDecl$$36) {
      var accessorSymbol$$1 = funcDecl$$36.accessorSymbol;
      var v12788 = accessorSymbol$$1.getter;
      if (v12788) {
        var v22853 = accessorSymbol$$1.getter;
        var v18815 = v22853.declAST;
        v12788 = v18815 != funcDecl$$36;
      }
      var v2239 = v12788;
      if (v2239) {
        return false;
      }
      JAM.call(this.emitDeclarationComments, this, [accessorSymbol$$1]);
      var v12789 = accessorSymbol$$1.flags;
      var v2240 = JAM.call(TypeScript$$31.ToDeclFlags, TypeScript$$31, [v12789]);
      JAM.call(this.emitDeclFlags, this, [v2240, "var"], JAM.policy.p1);
      var v2241 = this.declFile;
      var v12790 = funcDecl$$36.name;
      var v2242 = v12790.text;
      JAM.call(v2241.Write, v2241, [v2242]);
      var propertyType = accessorSymbol$$1.getType();
      var v18816 = accessorSymbol$$1.flags;
      var v12791 = JAM.call(TypeScript$$31.ToDeclFlags, TypeScript$$31, [v18816]);
      var v2244 = JAM.call(this.canEmitTypeAnnotationSignature, this, [v12791]);
      if (v2244) {
        var v2243 = this.declFile;
        JAM.call(v2243.Write, v2243, [" : "]);
        JAM.call(this.emitTypeSignature, this, [propertyType]);
      }
      var v2245 = this.declFile;
      JAM.call(v2245.WriteLine, v2245, [";"]);
      return false;
    }
    function v1222(bases$$8, qual) {
      var v12792 = bases$$8;
      if (v12792) {
        var v22854 = bases$$8.members;
        var v18817 = v22854.length;
        v12792 = v18817 > 0;
      }
      var v2254 = v12792;
      if (v2254) {
        var v2246 = this.declFile;
        var v12793 = " " + qual;
        var v2247 = v12793 + " ";
        JAM.call(v2246.Write, v2246, [v2247]);
        var v2248 = bases$$8.members;
        var basesLen$$3 = v2248.length;
        var i$$123 = 0;
        var v2253 = i$$123 < basesLen$$3;
        for (;v2253;) {
          var v2249 = bases$$8.members;
          var baseExpr$$3 = v2249[i$$123];
          var v2250 = baseExpr$$3.type;
          var baseSymbol$$4 = v2250.symbol;
          var baseType$$1 = baseExpr$$3.type;
          var v2252 = i$$123 > 0;
          if (v2252) {
            var v2251 = this.declFile;
            JAM.call(v2251.Write, v2251, [", "]);
          }
          JAM.call(this.emitTypeSignature, this, [baseType$$1]);
          i$$123++;
          v2253 = i$$123 < basesLen$$3;
        }
      }
      return;
    }
    function v1221(pre$$15, funcDecl$$35) {
      var v2255 = !pre$$15;
      if (v2255) {
        return false;
      }
      var v2256 = funcDecl$$35.isAccessor();
      if (v2256) {
        return JAM.call(this.emitPropertyAccessorSignature, this, [funcDecl$$35]);
      }
      var v12794 = this.getAstDeclarationContainer();
      var v2257 = v12794.nodeType;
      var v12795 = TypeScript$$31.NodeType;
      var v2258 = v12795.InterfaceDeclaration;
      var isInterfaceMember = v2257 == v2258;
      var v2268 = funcDecl$$35.bod;
      if (v2268) {
        var v2261 = funcDecl$$35.isConstructor;
        if (v2261) {
          var v18818 = funcDecl$$35.type;
          var v12796 = v18818.construct;
          if (v12796) {
            var v25699 = funcDecl$$35.type;
            var v24834 = v25699.construct;
            var v22855 = v24834.signatures;
            var v18819 = v22855.length;
            v12796 = v18819 > 1;
          }
          var v2259 = v12796;
          if (v2259) {
            return false;
          }
        } else {
          var v18820 = funcDecl$$35.type;
          var v12797 = v18820.call;
          if (v12797) {
            var v25700 = funcDecl$$35.type;
            var v24835 = v25700.call;
            var v22856 = v24835.signatures;
            var v18821 = v22856.length;
            v12797 = v18821 > 1;
          }
          var v2260 = v12797;
          if (v2260) {
            return false;
          }
        }
      } else {
        var v22857 = !isInterfaceMember;
        if (v22857) {
          var v24836 = funcDecl$$35.fncFlags;
          var v25701 = TypeScript$$31.FncFlags;
          var v24837 = v25701.Private;
          v22857 = JAM.call(TypeScript$$31.hasFlag, TypeScript$$31, [v24836, v24837], JAM.policy.p1);
        }
        var v18822 = v22857;
        if (v18822) {
          var v22858 = funcDecl$$35.type;
          v18822 = v22858.call;
        }
        var v12798 = v18822;
        if (v12798) {
          var v25702 = funcDecl$$35.type;
          var v24838 = v25702.call;
          var v22859 = v24838.signatures;
          var v18823 = v22859.length;
          v12798 = v18823 > 1;
        }
        var v2267 = v12798;
        if (v2267) {
          var v12799 = funcDecl$$35.type;
          var v2262 = v12799.call;
          var signatures$$4 = v2262.signatures;
          var v2263 = signatures$$4[0];
          var firstSignature = v2263.declAST;
          var v2265 = firstSignature.bod;
          if (v2265) {
            var v2264 = signatures$$4[1];
            firstSignature = v2264.declAST;
          }
          var v2266 = firstSignature != funcDecl$$35;
          if (v2266) {
            return false;
          }
        }
      }
      var v22860 = funcDecl$$35.fncFlags;
      var v18824 = JAM.call(TypeScript$$31.ToDeclFlags, TypeScript$$31, [v22860]);
      var v12800 = JAM.call(this.canEmitSignature, this, [v18824, false], JAM.policy.p1);
      var v2269 = !v12800;
      if (v2269) {
        return false;
      }
      JAM.call(this.emitDeclarationComments, this, [funcDecl$$35]);
      var v2280 = funcDecl$$35.isConstructor;
      if (v2280) {
        this.emitIndent();
        var v2270 = this.declFile;
        JAM.call(v2270.Write, v2270, ["constructor"]);
      } else {
        var id$$24 = funcDecl$$35.getNameText();
        var v2279 = !isInterfaceMember;
        if (v2279) {
          var v12801 = funcDecl$$35.fncFlags;
          var v2271 = JAM.call(TypeScript$$31.ToDeclFlags, TypeScript$$31, [v12801]);
          JAM.call(this.emitDeclFlags, this, [v2271, "function"], JAM.policy.p1);
          var v2272 = this.declFile;
          JAM.call(v2272.Write, v2272, [id$$24]);
        } else {
          this.emitIndent();
          var v2278 = funcDecl$$35.isConstructMember();
          if (v2278) {
            var v2273 = this.declFile;
            JAM.call(v2273.Write, v2273, ["new"]);
          } else {
            var v18825 = funcDecl$$35.isCallMember();
            var v12802 = !v18825;
            if (v12802) {
              var v18826 = funcDecl$$35.isIndexerMember();
              v12802 = !v18826;
            }
            var v2277 = v12802;
            if (v2277) {
              var v2274 = this.declFile;
              JAM.call(v2274.Write, v2274, [id$$24]);
              var v18827 = funcDecl$$35.name;
              var v12803 = v18827.flags;
              var v18828 = TypeScript$$31.ASTFlags;
              var v12804 = v18828.OptionalName;
              var v2276 = JAM.call(TypeScript$$31.hasFlag, TypeScript$$31, [v12803, v12804], JAM.policy.p1);
              if (v2276) {
                var v2275 = this.declFile;
                JAM.call(v2275.Write, v2275, ["? "]);
              }
            }
          }
        }
      }
      var v12805 = funcDecl$$35.isIndexerMember();
      var v2283 = !v12805;
      if (v2283) {
        var v2281 = this.declFile;
        JAM.call(v2281.Write, v2281, ["("]);
      } else {
        var v2282 = this.declFile;
        JAM.call(v2282.Write, v2282, ["["]);
      }
      var v2284 = this.indenter;
      v2284.increaseIndent();
      var v2291 = funcDecl$$35.arguments;
      if (v2291) {
        var v12806 = funcDecl$$35.arguments;
        var v2285 = v12806.members;
        var argsLen$$2 = v2285.length;
        var v2286 = funcDecl$$35.variableArgList;
        if (v2286) {
          argsLen$$2--;
        }
        var i$$122 = 0;
        var v2290 = i$$122 < argsLen$$2;
        for (;v2290;) {
          var v12807 = funcDecl$$35.arguments;
          var v2287 = v12807.members;
          var argDecl$$3 = v2287[i$$122];
          JAM.call(this.emitArgDecl, this, [argDecl$$3, funcDecl$$35], JAM.policy.p1);
          var v12808 = argsLen$$2 - 1;
          var v2289 = i$$122 < v12808;
          if (v2289) {
            var v2288 = this.declFile;
            JAM.call(v2288.Write, v2288, [", "]);
          }
          i$$122++;
          v2290 = i$$122 < argsLen$$2;
        }
      }
      var v2297 = funcDecl$$35.variableArgList;
      if (v2297) {
        var v12809 = funcDecl$$35.arguments;
        var v2292 = v12809.members;
        var v22861 = funcDecl$$35.arguments;
        var v18829 = v22861.members;
        var v12810 = v18829.length;
        var v2293 = v12810 - 1;
        var lastArg$$2 = v2292[v2293];
        var v22862 = funcDecl$$35.arguments;
        var v18830 = v22862.members;
        var v12811 = v18830.length;
        var v2296 = v12811 > 1;
        if (v2296) {
          var v2294 = this.declFile;
          JAM.call(v2294.Write, v2294, [", ..."]);
        } else {
          var v2295 = this.declFile;
          JAM.call(v2295.Write, v2295, ["..."]);
        }
        JAM.call(this.emitArgDecl, this, [lastArg$$2, funcDecl$$35], JAM.policy.p1);
      }
      var v2298 = this.indenter;
      v2298.decreaseIndent();
      var v12812 = funcDecl$$35.isIndexerMember();
      var v2301 = !v12812;
      if (v2301) {
        var v2299 = this.declFile;
        JAM.call(v2299.Write, v2299, [")"]);
      } else {
        var v2300 = this.declFile;
        JAM.call(v2300.Write, v2300, ["]"]);
      }
      var v22863 = funcDecl$$35.isConstructor;
      var v18831 = !v22863;
      if (v18831) {
        var v22864 = funcDecl$$35.returnTypeAnnotation;
        var v24841 = !v22864;
        if (v24841) {
          var v26084 = funcDecl$$35.signature;
          var v25703 = v26084.returnType;
          var v24839 = v25703.type;
          var v25704 = this.checker;
          var v24840 = v25704.anyType;
          v22864 = v24839 != v24840;
        }
        v18831 = v22864;
      }
      var v12813 = v18831;
      if (v12813) {
        var v22865 = funcDecl$$35.fncFlags;
        var v18832 = JAM.call(TypeScript$$31.ToDeclFlags, TypeScript$$31, [v22865]);
        v12813 = JAM.call(this.canEmitTypeAnnotationSignature, this, [v18832]);
      }
      var v2304 = v12813;
      if (v2304) {
        var v2302 = this.declFile;
        JAM.call(v2302.Write, v2302, [": "]);
        var v18833 = funcDecl$$35.signature;
        var v12814 = v18833.returnType;
        var v2303 = v12814.type;
        JAM.call(this.emitTypeSignature, this, [v2303]);
      }
      var v2305 = this.declFile;
      JAM.call(v2305.WriteLine, v2305, [";"]);
      return false;
    }
    function v1220(argDecl$$2, funcDecl$$34) {
      JAM.call(this.emitDeclarationComments, this, [argDecl$$2, false], JAM.policy.p1);
      var v2306 = this.declFile;
      var v12815 = argDecl$$2.id;
      var v2307 = v12815.text;
      JAM.call(v2306.Write, v2306, [v2307]);
      var v2309 = argDecl$$2.isOptionalArg();
      if (v2309) {
        var v2308 = this.declFile;
        JAM.call(v2308.Write, v2308, ["?"]);
      }
      var v18834 = argDecl$$2.typeExpr;
      var v22868 = !v18834;
      if (v22868) {
        var v22866 = argDecl$$2.type;
        var v24842 = this.checker;
        var v22867 = v24842.anyType;
        v18834 = v22866 != v22867;
      }
      var v12816 = v18834;
      if (v12816) {
        var v22869 = funcDecl$$34.fncFlags;
        var v18835 = JAM.call(TypeScript$$31.ToDeclFlags, TypeScript$$31, [v22869]);
        v12816 = JAM.call(this.canEmitTypeAnnotationSignature, this, [v18835]);
      }
      var v2312 = v12816;
      if (v2312) {
        var v2310 = this.declFile;
        JAM.call(v2310.Write, v2310, [": "]);
        var v2311 = argDecl$$2.type;
        JAM.call(this.emitTypeSignature, this, [v2311]);
      }
      return;
    }
    function v1219(pre$$14, block$$2) {
      var v12817 = block$$2.isStatementBlock;
      var v2314 = !v12817;
      if (v2314) {
        if (pre$$14) {
          var v12818 = block$$2.statements;
          var v2313 = v12818.members;
          this.varListCount = v2313.length;
        } else {
          this.varListCount = 0;
        }
        return true;
      }
      return false;
    }
    function v1218(pre$$13, varDecl$$20) {
      var v12819 = pre$$13;
      if (v12819) {
        var v22870 = varDecl$$20.varFlags;
        var v18836 = JAM.call(TypeScript$$31.ToDeclFlags, TypeScript$$31, [v22870]);
        v12819 = JAM.call(this.canEmitSignature, this, [v18836, false], JAM.policy.p1);
      }
      var v2339 = v12819;
      if (v2339) {
        var v12820 = this.getAstDeclarationContainer();
        var v2315 = v12820.nodeType;
        var v12821 = TypeScript$$31.NodeType;
        var v2316 = v12821.InterfaceDeclaration;
        var interfaceMember = v2315 == v2316;
        JAM.call(this.emitDeclarationComments, this, [varDecl$$20]);
        var v2326 = !interfaceMember;
        if (v2326) {
          var v12822 = this.varListCount;
          var v2319 = v12822 >= 0;
          if (v2319) {
            var v12823 = varDecl$$20.varFlags;
            var v2317 = JAM.call(TypeScript$$31.ToDeclFlags, TypeScript$$31, [v12823]);
            JAM.call(this.emitDeclFlags, this, [v2317, "var"], JAM.policy.p1);
            var v2318 = this.varListCount;
            this.varListCount = -v2318;
          }
          var v2320 = this.declFile;
          var v12824 = varDecl$$20.id;
          var v2321 = v12824.text;
          JAM.call(v2320.Write, v2320, [v2321]);
        } else {
          this.emitIndent();
          var v2322 = this.declFile;
          var v12825 = varDecl$$20.id;
          var v2323 = v12825.text;
          JAM.call(v2322.Write, v2322, [v2323]);
          var v18837 = varDecl$$20.id;
          var v12826 = v18837.flags;
          var v18838 = TypeScript$$31.ASTFlags;
          var v12827 = v18838.OptionalName;
          var v2325 = JAM.call(TypeScript$$31.hasFlag, TypeScript$$31, [v12826, v12827], JAM.policy.p1);
          if (v2325) {
            var v2324 = this.declFile;
            JAM.call(v2324.Write, v2324, ["?"]);
          }
        }
        var type$$59 = null;
        var v12828 = varDecl$$20.typeExpr;
        if (v12828) {
          var v18839 = varDecl$$20.typeExpr;
          v12828 = v18839.type;
        }
        var v2331 = v12828;
        if (v2331) {
          var v2327 = varDecl$$20.typeExpr;
          type$$59 = v2327.type;
        } else {
          var v2330 = varDecl$$20.sym;
          if (v2330) {
            var v2328 = varDecl$$20.sym;
            type$$59 = v2328.getType();
            var v18840 = this.checker;
            var v12829 = v18840.anyType;
            var v2329 = type$$59 == v12829;
            if (v2329) {
              type$$59 = null;
            }
          }
        }
        var v12830 = type$$59;
        if (v12830) {
          var v22871 = varDecl$$20.varFlags;
          var v18841 = JAM.call(TypeScript$$31.ToDeclFlags, TypeScript$$31, [v22871]);
          v12830 = JAM.call(this.canEmitTypeAnnotationSignature, this, [v18841]);
        }
        var v2333 = v12830;
        if (v2333) {
          var v2332 = this.declFile;
          JAM.call(v2332.Write, v2332, [": "]);
          JAM.call(this.emitTypeSignature, this, [type$$59]);
        }
        var v12831 = this.varListCount;
        var v2335 = v12831 > 0;
        if (v2335) {
          this.varListCount--;
        } else {
          var v12832 = this.varListCount;
          var v2334 = v12832 < 0;
          if (v2334) {
            this.varListCount++;
          }
        }
        var v12833 = this.varListCount;
        var v2338 = v12833 < 0;
        if (v2338) {
          var v2336 = this.declFile;
          JAM.call(v2336.Write, v2336, [", "]);
        } else {
          var v2337 = this.declFile;
          JAM.call(v2337.WriteLine, v2337, [";"]);
        }
      }
      return false;
    }
    function v1217(astOrSymbol, endLine) {
      var v12834 = typeof endLine;
      var v2340 = v12834 === "undefined";
      if (v2340) {
        endLine = true;
      }
      var v18842 = this.emitOptions;
      var v12835 = v18842.emitComments;
      var v2341 = !v12835;
      if (v2341) {
        return;
      }
      var declComments = astOrSymbol.getDocComments();
      var v12836 = declComments.length;
      var v2347 = v12836 > 0;
      if (v2347) {
        var i$$121 = 0;
        var v12837 = declComments.length;
        var v2343 = i$$121 < v12837;
        for (;v2343;) {
          var v2342 = declComments[i$$121];
          JAM.call(this.emitComment, this, [v2342]);
          i$$121++;
          var v12838 = declComments.length;
          v2343 = i$$121 < v12838;
        }
        if (endLine) {
          var v18843 = this.declFile;
          var v12839 = v18843.onNewLine;
          var v2345 = !v12839;
          if (v2345) {
            var v2344 = this.declFile;
            JAM.call(v2344.WriteLine, v2344, [""]);
          }
        } else {
          var v12840 = this.declFile;
          var v2346 = v12840.onNewLine;
          if (v2346) {
            this.emitIndent();
          }
        }
      }
      return;
    }
    function v1216(comment$$10) {
      var text$$26 = comment$$10.getText();
      var v12841 = this.declFile;
      var v2350 = v12841.onNewLine;
      if (v2350) {
        this.emitIndent();
      } else {
        var v12842 = comment$$10.isBlockComment;
        var v2349 = !v12842;
        if (v2349) {
          var v2348 = this.declFile;
          JAM.call(v2348.WriteLine, v2348, [""]);
          this.emitIndent();
        }
      }
      var v2351 = this.declFile;
      var v2352 = text$$26[0];
      JAM.call(v2351.Write, v2351, [v2352]);
      var i$$120 = 1;
      var v12843 = text$$26.length;
      var v2356 = i$$120 < v12843;
      for (;v2356;) {
        var v2353 = this.declFile;
        JAM.call(v2353.WriteLine, v2353, [""]);
        this.emitIndent();
        var v2354 = this.declFile;
        var v2355 = text$$26[i$$120];
        JAM.call(v2354.Write, v2354, [v2355]);
        i$$120++;
        var v12844 = text$$26.length;
        v2356 = i$$120 < v12844;
      }
      var v12845 = comment$$10.endsLine;
      var v18845 = !v12845;
      if (v18845) {
        var v18844 = comment$$10.isBlockComment;
        v12845 = !v18844;
      }
      var v2359 = v12845;
      if (v2359) {
        var v2357 = this.declFile;
        JAM.call(v2357.WriteLine, v2357, [""]);
      } else {
        var v2358 = this.declFile;
        JAM.call(v2358.Write, v2358, [" "]);
      }
      return;
    }
    function v1215(type$$58) {
      var containingScope = null;
      var declarationContainerAst = this.getAstDeclarationContainer();
      var v2367 = declarationContainerAst.nodeType;
      switch(v2367) {
        case TypeScript$$31.NodeType.ModuleDeclaration:
        ;
        case TypeScript$$31.NodeType.InterfaceDeclaration:
        ;
        case TypeScript$$31.NodeType.FuncDecl:
          var v2361 = declarationContainerAst.type;
          if (v2361) {
            var v2360 = declarationContainerAst.type;
            containingScope = v2360.containedScope;
          }
          break;
        case TypeScript$$31.NodeType.Script:
          var script$$21 = declarationContainerAst;
          var v2363 = script$$21.bod;
          if (v2363) {
            var v2362 = script$$21.bod;
            containingScope = v2362.enclosingScope;
          }
          break;
        case TypeScript$$31.NodeType.ClassDeclaration:
          var v2365 = declarationContainerAst.type;
          if (v2365) {
            var v12846 = declarationContainerAst.type;
            var v2364 = v12846.instanceType;
            containingScope = v2364.containedScope;
          }
          break;
        default:
          var v2366 = TypeScript$$31.CompilerDiagnostics;
          JAM.call(v2366.debugPrint, v2366, ["Unknown containing scope"]);
      }
      var typeNameMembers = JAM.call(type$$58.getScopedTypeNameEx, type$$58, [containingScope]);
      JAM.call(this.emitTypeNamesMember, this, [typeNameMembers]);
      return;
    }
    function v1214(memberName$$5, emitIndent) {
      var v12847 = typeof emitIndent;
      var v2368 = v12847 === "undefined";
      if (v2368) {
        emitIndent = false;
      }
      var v12848 = memberName$$5.prefix;
      var v2374 = v12848 == "{ ";
      if (v2374) {
        if (emitIndent) {
          this.emitIndent();
        }
        var v2369 = this.declFile;
        JAM.call(v2369.WriteLine, v2369, ["{"]);
        var v2370 = this.indenter;
        v2370.increaseIndent();
        emitIndent = true;
      } else {
        var v12849 = memberName$$5.prefix;
        var v2373 = v12849 != "";
        if (v2373) {
          if (emitIndent) {
            this.emitIndent();
          }
          var v2371 = this.declFile;
          var v2372 = memberName$$5.prefix;
          JAM.call(v2371.Write, v2371, [v2372]);
          emitIndent = false;
        }
      }
      var v2381 = memberName$$5.isString();
      if (v2381) {
        if (emitIndent) {
          this.emitIndent();
        }
        var v2375 = this.declFile;
        var v2376 = memberName$$5.text;
        JAM.call(v2375.Write, v2375, [v2376]);
      } else {
        var ar$$1 = memberName$$5;
        var index$$62 = 0;
        var v18846 = ar$$1.entries;
        var v12850 = v18846.length;
        var v2380 = index$$62 < v12850;
        for (;v2380;) {
          var v12851 = ar$$1.entries;
          var v2377 = v12851[index$$62];
          JAM.call(this.emitTypeNamesMember, this, [v2377, emitIndent], JAM.policy.p1);
          var v12852 = ar$$1.delim;
          var v2379 = v12852 == "; ";
          if (v2379) {
            var v2378 = this.declFile;
            JAM.call(v2378.WriteLine, v2378, [";"]);
          }
          index$$62++;
          var v18847 = ar$$1.entries;
          var v12853 = v18847.length;
          v2380 = index$$62 < v12853;
        }
      }
      var v12854 = memberName$$5.suffix;
      var v2387 = v12854 == "}";
      if (v2387) {
        var v2382 = this.indenter;
        v2382.decreaseIndent();
        this.emitIndent();
        var v2383 = this.declFile;
        var v2384 = memberName$$5.suffix;
        JAM.call(v2383.Write, v2383, [v2384]);
      } else {
        var v2385 = this.declFile;
        var v2386 = memberName$$5.suffix;
        JAM.call(v2385.Write, v2385, [v2386]);
      }
      return;
    }
    function v1213(ast$$120) {
      var v2388 = TypeScript$$31.CompilerDiagnostics;
      var v12855 = this.getAstDeclarationContainer();
      var v2389 = ast$$120 != v12855;
      JAM.call(v2388.assert, v2388, [v2389, "Declaration container mismatch"], JAM.policy.p1);
      var v2390 = this.declarationContainerStack;
      v2390.pop();
      return;
    }
    function v1212(ast$$119) {
      var v2391 = this.declarationContainerStack;
      JAM.call(v2391.push, v2391, [ast$$119]);
      return;
    }
    function v1211(declFlag) {
      var v12856 = typeof declFlag;
      var v2393 = v12856 === "undefined";
      if (v2393) {
        var v2392 = TypeScript$$31.DeclFlags;
        declFlag = v2392.None;
      }
      var v18848 = TypeScript$$31.DeclFlags;
      var v12857 = v18848.Private;
      var v2394 = JAM.call(TypeScript$$31.hasFlag, TypeScript$$31, [declFlag, v12857], JAM.policy.p1);
      return !v2394;
    }
    function v1210(declFlags$$3, typeString$$1) {
      var v2395 = this.declFile;
      var v2396 = JAM.call(this.getDeclFlagsString, this, [declFlags$$3, typeString$$1], JAM.policy.p1);
      JAM.call(v2395.Write, v2395, [v2396]);
      return;
    }
    function v1209(declFlags$$2, typeString) {
      var result$$34 = this.getIndentString();
      var accessorString = "";
      var v18849 = TypeScript$$31.DeclFlags;
      var v12858 = v18849.GetAccessor;
      var v2398 = JAM.call(TypeScript$$31.hasFlag, TypeScript$$31, [declFlags$$2, v12858], JAM.policy.p1);
      if (v2398) {
        accessorString = "get ";
      } else {
        var v18850 = TypeScript$$31.DeclFlags;
        var v12859 = v18850.SetAccessor;
        var v2397 = JAM.call(TypeScript$$31.hasFlag, TypeScript$$31, [declFlags$$2, v12859], JAM.policy.p1);
        if (v2397) {
          accessorString = "set ";
        }
      }
      var container$$23 = this.getAstDeclarationContainer();
      var v22872 = container$$23.nodeType;
      var v24843 = TypeScript$$31.NodeType;
      var v22873 = v24843.ModuleDeclaration;
      var v18851 = v22872 == v22873;
      if (v18851) {
        var v22874 = container$$23.modFlags;
        var v24844 = TypeScript$$31.ModuleFlags;
        var v22875 = v24844.IsWholeFile;
        v18851 = JAM.call(TypeScript$$31.hasFlag, TypeScript$$31, [v22874, v22875], JAM.policy.p1);
      }
      var v12860 = v18851;
      if (v12860) {
        var v22876 = TypeScript$$31.DeclFlags;
        var v18852 = v22876.Exported;
        v12860 = JAM.call(TypeScript$$31.hasFlag, TypeScript$$31, [declFlags$$2, v18852], JAM.policy.p1);
      }
      var v2399 = v12860;
      if (v2399) {
        result$$34 = result$$34 + "export ";
      }
      var v22877 = TypeScript$$31.DeclFlags;
      var v18853 = v22877.LocalStatic;
      var v12861 = JAM.call(TypeScript$$31.hasFlag, TypeScript$$31, [declFlags$$2, v18853], JAM.policy.p1);
      var v18855 = !v12861;
      if (v18855) {
        var v22878 = TypeScript$$31.DeclFlags;
        var v18854 = v22878.Static;
        v12861 = JAM.call(TypeScript$$31.hasFlag, TypeScript$$31, [declFlags$$2, v18854], JAM.policy.p1);
      }
      var v2403 = v12861;
      if (v2403) {
        var v12862 = "static " + accessorString;
        result$$34 = result$$34 + v12862;
      } else {
        var v18856 = TypeScript$$31.DeclFlags;
        var v12863 = v18856.Private;
        var v2402 = JAM.call(TypeScript$$31.hasFlag, TypeScript$$31, [declFlags$$2, v12863], JAM.policy.p1);
        if (v2402) {
          var v12864 = "private " + accessorString;
          result$$34 = result$$34 + v12864;
        } else {
          var v18857 = TypeScript$$31.DeclFlags;
          var v12865 = v18857.Public;
          var v2401 = JAM.call(TypeScript$$31.hasFlag, TypeScript$$31, [declFlags$$2, v12865], JAM.policy.p1);
          if (v2401) {
            var v12866 = "public " + accessorString;
            result$$34 = result$$34 + v12866;
          } else {
            var v2400 = accessorString == "";
            if (v2400) {
              var v12867 = typeString + " ";
              result$$34 = result$$34 + v12867;
            } else {
              result$$34 = result$$34 + accessorString;
            }
          }
        }
      }
      return result$$34;
    }
    function v1208(declFlags$$1, astWithPrePostCallback, preCallback) {
      var v2407 = this.ignoreCallbackAst;
      if (v2407) {
        var v2404 = TypeScript$$31.CompilerDiagnostics;
        var v12868 = this.ignoreCallbackAst;
        var v2405 = v12868 != astWithPrePostCallback;
        JAM.call(v2404.assert, v2404, [v2405, "Ignore Callback AST mismatch"], JAM.policy.p1);
        this.ignoreCallbackAst = null;
        return false;
      } else {
        var v12869 = preCallback;
        if (v12869) {
          var v18858 = JAM.call(this.canEmitSignature, this, [declFlags$$1, true, preCallback], JAM.policy.p1);
          v12869 = !v18858;
        }
        var v2406 = v12869;
        if (v2406) {
          this.ignoreCallbackAst = astWithPrePostCallback;
          return false;
        }
      }
      return true;
    }
    function v1207(declFlags, canEmitGlobalAmbientDecl, useDeclarationContainerTop) {
      var v12870 = typeof canEmitGlobalAmbientDecl;
      var v2408 = v12870 === "undefined";
      if (v2408) {
        canEmitGlobalAmbientDecl = true;
      }
      var v12871 = typeof useDeclarationContainerTop;
      var v2409 = v12871 === "undefined";
      if (v2409) {
        useDeclarationContainerTop = true;
      }
      var container$$22;
      if (useDeclarationContainerTop) {
        container$$22 = this.getAstDeclarationContainer();
      } else {
        var v2410 = this.declarationContainerStack;
        var v18859 = this.declarationContainerStack;
        var v12872 = v18859.length;
        var v2411 = v12872 - 2;
        container$$22 = v2410[v2411];
      }
      var v18860 = container$$22.nodeType;
      var v22879 = TypeScript$$31.NodeType;
      var v18861 = v22879.ModuleDeclaration;
      var v12873 = v18860 == v18861;
      if (v12873) {
        var v24845 = TypeScript$$31.DeclFlags;
        var v22880 = v24845.Exported;
        var v18862 = JAM.call(TypeScript$$31.hasFlag, TypeScript$$31, [declFlags, v22880], JAM.policy.p1);
        v12873 = !v18862;
      }
      var v2412 = v12873;
      if (v2412) {
        return false;
      }
      var v18863 = !canEmitGlobalAmbientDecl;
      if (v18863) {
        var v22881 = container$$22.nodeType;
        var v24846 = TypeScript$$31.NodeType;
        var v22882 = v24846.Script;
        v18863 = v22881 == v22882;
      }
      var v12874 = v18863;
      if (v12874) {
        var v22883 = TypeScript$$31.DeclFlags;
        var v18864 = v22883.Ambient;
        v12874 = JAM.call(TypeScript$$31.hasFlag, TypeScript$$31, [declFlags, v18864], JAM.policy.p1);
      }
      var v2413 = v12874;
      if (v2413) {
        return false;
      }
      return true;
    }
    function v1206() {
      var v2414 = this.declFile;
      var v2415 = this.getIndentString();
      JAM.call(v2414.Write, v2414, [v2415]);
      return;
    }
    function v1205(declIndent) {
      var v12875 = typeof declIndent;
      var v2416 = v12875 === "undefined";
      if (v2416) {
        declIndent = false;
      }
      var v12876 = this.emitOptions;
      var v2418 = v12876.minWhitespace;
      if (v2418) {
        return "";
      } else {
        var v2417 = this.indenter;
        return v2417.getIndent();
      }
      return;
    }
    function v1204(script$$20) {
      var v2419 = TypeScript$$31.AstWalkerWithDetailCallback;
      JAM.call(v2419.walk, v2419, [script$$20, this], JAM.policy.p1);
      return;
    }
    function v1203() {
      try {
        var v2420 = this.declFile;
        v2420.Close();
      } catch (ex$$3) {
        var v2421 = this.errorReporter;
        var v2422 = ex$$3.message;
        JAM.call(v2421.emitterError, v2421, [v2422]);
      }
      return;
    }
    function v1202(file) {
      var v26461 = JAM.new(DeclFileWriter, [file]);
      this.declFile = v26461;
      return;
    }
    function v1201() {
      var v2423;
      var v22884 = this.isDottedModuleName;
      var v18865 = v22884.length;
      var v12879 = v18865 == 0;
      if (v12879) {
        v2423 = false;
      } else {
        var v12877 = this.isDottedModuleName;
        var v22885 = this.isDottedModuleName;
        var v18866 = v22885.length;
        var v12878 = v18866 - 1;
        v2423 = v12877[v12878];
      }
      return v2423;
    }
    function v1200() {
      var v2424 = this.declarationContainerStack;
      var v18867 = this.declarationContainerStack;
      var v12880 = v18867.length;
      var v2425 = v12880 - 1;
      return v2424[v2425];
    }
    function DeclarationEmitter$$1(checker$$23, emitOptions$$2, errorReporter$$5) {
      this.checker = checker$$23;
      this.emitOptions = emitOptions$$2;
      this.errorReporter = errorReporter$$5;
      this.declFile = null;
      var v2426 = TypeScript$$31.Indenter;
      var v26462 = new v2426;
      this.indenter = v26462;
      this.declarationContainerStack = [];
      this.isDottedModuleName = [];
      this.ignoreCallbackAst = null;
      this.singleDeclFile = null;
      this.varListCount = 0;
      return;
    }
    var v2427 = DeclarationEmitter$$1.prototype;
    v2427.getAstDeclarationContainer = v1200;
    var v2428 = DeclarationEmitter$$1.prototype;
    v2428.emitDottedModuleName = v1201;
    var v2429 = DeclarationEmitter$$1.prototype;
    v2429.setDeclarationFile = v1202;
    var v2430 = DeclarationEmitter$$1.prototype;
    v2430.Close = v1203;
    var v2431 = DeclarationEmitter$$1.prototype;
    v2431.emitDeclarations = v1204;
    var v2432 = DeclarationEmitter$$1.prototype;
    v2432.getIndentString = v1205;
    var v2433 = DeclarationEmitter$$1.prototype;
    v2433.emitIndent = v1206;
    var v2434 = DeclarationEmitter$$1.prototype;
    v2434.canEmitSignature = v1207;
    var v2435 = DeclarationEmitter$$1.prototype;
    v2435.canEmitPrePostAstSignature = v1208;
    var v2436 = DeclarationEmitter$$1.prototype;
    v2436.getDeclFlagsString = v1209;
    var v2437 = DeclarationEmitter$$1.prototype;
    v2437.emitDeclFlags = v1210;
    var v2438 = DeclarationEmitter$$1.prototype;
    v2438.canEmitTypeAnnotationSignature = v1211;
    var v2439 = DeclarationEmitter$$1.prototype;
    v2439.pushDeclarationContainer = v1212;
    var v2440 = DeclarationEmitter$$1.prototype;
    v2440.popDeclarationContainer = v1213;
    var v2441 = DeclarationEmitter$$1.prototype;
    v2441.emitTypeNamesMember = v1214;
    var v2442 = DeclarationEmitter$$1.prototype;
    v2442.emitTypeSignature = v1215;
    var v2443 = DeclarationEmitter$$1.prototype;
    v2443.emitComment = v1216;
    var v2444 = DeclarationEmitter$$1.prototype;
    v2444.emitDeclarationComments = v1217;
    var v2445 = DeclarationEmitter$$1.prototype;
    v2445.VarDeclCallback = v1218;
    var v2446 = DeclarationEmitter$$1.prototype;
    v2446.BlockCallback = v1219;
    var v2447 = DeclarationEmitter$$1.prototype;
    v2447.emitArgDecl = v1220;
    var v2448 = DeclarationEmitter$$1.prototype;
    v2448.FuncDeclCallback = v1221;
    var v2449 = DeclarationEmitter$$1.prototype;
    v2449.emitBaseList = v1222;
    var v2450 = DeclarationEmitter$$1.prototype;
    v2450.emitPropertyAccessorSignature = v1223;
    var v2451 = DeclarationEmitter$$1.prototype;
    v2451.emitClassMembersFromConstructorDefinition = v1224;
    var v2452 = DeclarationEmitter$$1.prototype;
    v2452.ClassDeclarationCallback = v1225;
    var v2453 = DeclarationEmitter$$1.prototype;
    v2453.InterfaceDeclarationCallback = v1226;
    var v2454 = DeclarationEmitter$$1.prototype;
    v2454.ImportDeclarationCallback = v1227;
    var v2455 = DeclarationEmitter$$1.prototype;
    v2455.emitEnumSignature = v1228;
    var v2456 = DeclarationEmitter$$1.prototype;
    v2456.ModuleDeclarationCallback = v1229;
    var v2457 = DeclarationEmitter$$1.prototype;
    v2457.ScriptCallback = v1230;
    var v2458 = DeclarationEmitter$$1.prototype;
    v2458.DefaultCallback = v1231;
    return DeclarationEmitter$$1;
  }
  function v1199() {
    function v1198() {
      var v2459 = this.declFile;
      v2459.Close();
      return;
    }
    function v1197(s$$36) {
      var v2460 = this.declFile;
      JAM.call(v2460.WriteLine, v2460, [s$$36]);
      this.onNewLine = true;
      return;
    }
    function v1196(s$$35) {
      var v2461 = this.declFile;
      JAM.call(v2461.Write, v2461, [s$$35]);
      this.onNewLine = false;
      return;
    }
    function DeclFileWriter$$1(declFile) {
      this.declFile = declFile;
      this.onNewLine = true;
      return;
    }
    var v2462 = DeclFileWriter$$1.prototype;
    v2462.Write = v1196;
    var v2463 = DeclFileWriter$$1.prototype;
    v2463.WriteLine = v1197;
    var v2464 = DeclFileWriter$$1.prototype;
    v2464.Close = v1198;
    return DeclFileWriter$$1;
  }
  var DeclFileWriter = v1199();
  TypeScript$$31.DeclFileWriter = DeclFileWriter;
  var DeclarationEmitter = v1232();
  TypeScript$$31.DeclarationEmitter = DeclarationEmitter;
  return;
}
function v1195(TypeScript$$30) {
  function v1194() {
    function v1193(ast$$117, start$$13, delta$$1) {
      function pre$$12(cur$$11, parent$$71, walker$$55) {
        var v18868 = cur$$11.limChar;
        var v12881 = v18868 !== -1;
        if (v12881) {
          var v18869 = cur$$11.limChar;
          v12881 = v18869 < start$$13;
        }
        var v2466 = v12881;
        if (v2466) {
          var v2465 = walker$$55.options;
          v2465.goChildren = false;
        }
        applyDelta(cur$$11);
        var v2467 = cur$$11.preComments;
        applyDeltaToComments(v2467);
        var v2468 = cur$$11.postComments;
        applyDeltaToComments(v2468);
        return cur$$11;
      }
      function applyDeltaToComments(comments$$13) {
        var v12882 = comments$$13;
        if (v12882) {
          var v18870 = comments$$13.length;
          v12882 = v18870 > 0;
        }
        var v2471 = v12882;
        if (v2471) {
          var i$$119 = 0;
          var v12883 = comments$$13.length;
          var v2470 = i$$119 < v12883;
          for (;v2470;) {
            var v2469 = comments$$13[i$$119];
            applyDelta(v2469);
            i$$119++;
            var v12884 = comments$$13.length;
            v2470 = i$$119 < v12884;
          }
        }
        return;
      }
      function applyDelta(ast$$118) {
        var v18871 = ast$$118.minChar;
        var v12885 = v18871 !== -1;
        if (v12885) {
          var v18872 = ast$$118.minChar;
          v12885 = v18872 >= start$$13;
        }
        var v2472 = v12885;
        if (v2472) {
          var v12886 = ast$$118.minChar;
          ast$$118.minChar = v12886 + delta$$1;
        }
        var v18873 = ast$$118.limChar;
        var v12887 = v18873 !== -1;
        if (v12887) {
          var v18874 = ast$$118.limChar;
          v12887 = v18874 >= start$$13;
        }
        var v2473 = v12887;
        if (v2473) {
          var v12888 = ast$$118.limChar;
          ast$$118.limChar = v12888 + delta$$1;
        }
        return;
      }
      var v2474 = TypeScript$$30.getAstWalkerFactory();
      JAM.call(v2474.walk, v2474, [ast$$117, pre$$12], JAM.policy.p1);
      return;
    }
    function v1192(script$$19, partial$$1, editRange$$3) {
      var v2475 = script$$19.locationInfo;
      var lineMap1 = v2475.lineMap;
      var v2476 = partial$$1.locationInfo;
      var lineMap2 = v2476.lineMap;
      var v12889 = this.logger;
      var v2483 = v12889.information();
      if (v2483) {
        var v2477 = this.logger;
        JAM.call(v2477.log, v2477, ["lineMap1 (before):"]);
        var v2478 = this.astLogger;
        JAM.call(v2478.logLinemap, v2478, [lineMap1]);
        var v2479 = this.logger;
        JAM.call(v2479.log, v2479, ["lineMap2 (quick parse):"]);
        var v2480 = this.astLogger;
        JAM.call(v2480.logLinemap, v2480, [lineMap2]);
        var v2481 = this.logger;
        var v2482 = "EditRange=" + editRange$$3;
        JAM.call(v2481.log, v2481, [v2482]);
      }
      var i1 = 2;
      var i2 = 2;
      var len1 = lineMap1.length;
      var len2 = lineMap2.length;
      var v2488 = i1 < len1;
      for (;v2488;) {
        var v12890 = lineMap1[i1];
        var v12891 = editRange$$3.minChar;
        var v2487 = v12890 <= v12891;
        if (v2487) {
          i1++;
        } else {
          var v12892 = lineMap1[i1];
          var v12893 = editRange$$3.limChar;
          var v2486 = v12892 >= v12893;
          if (v2486) {
            var v12894 = lineMap1[i1];
            var v12895 = editRange$$3.delta;
            lineMap1[i1] = v12894 + v12895;
            i1++;
          } else {
            var v2485 = i2 < len2;
            if (v2485) {
              var v12896 = lineMap2[i2];
              var v12897 = editRange$$3.minChar;
              var v2484 = v12896 + v12897;
              JAM.call(lineMap1.splice, lineMap1, [i1, 0, v2484], JAM.policy.p1);
              i1++;
              len1++;
              i2++;
            } else {
              JAM.call(lineMap1.splice, lineMap1, [i1, 1], JAM.policy.p1);
              len1--;
            }
          }
        }
        v2488 = i1 < len1;
      }
      var v2495 = i2 < len2;
      if (v2495) {
        var v18875 = len1 - 1;
        var v12898 = lineMap1[v18875];
        var v18876 = lineMap2[i2];
        var v18877 = editRange$$3.minChar;
        var v12899 = v18876 + v18877;
        var v2492 = v12898 >= v12899;
        if (v2492) {
          i1 = 2;
          var v12900 = i1 < len1;
          if (v12900) {
            v12900 = i2 < len2;
          }
          var v2491 = v12900;
          for (;v2491;) {
            var v12901 = lineMap1[i1];
            var v18878 = lineMap2[i2];
            var v18879 = editRange$$3.minChar;
            var v12902 = v18878 + v18879;
            var v2490 = v12901 < v12902;
            if (v2490) {
              i1++;
            } else {
              var v12903 = lineMap2[i2];
              var v12904 = editRange$$3.minChar;
              var v2489 = v12903 + v12904;
              JAM.call(lineMap1.splice, lineMap1, [i1, 0, v2489], JAM.policy.p1);
              i1++;
              len1++;
              i2++;
            }
            var v12905 = i1 < len1;
            if (v12905) {
              v12905 = i2 < len2;
            }
            v2491 = v12905;
          }
        }
        var v2494 = i2 < len2;
        for (;v2494;) {
          var v12906 = lineMap2[i2];
          var v12907 = editRange$$3.minChar;
          var v2493 = v12906 + v12907;
          JAM.call(lineMap1.push, lineMap1, [v2493]);
          i2++;
          v2494 = i2 < len2;
        }
      }
      var v12908 = this.logger;
      var v2498 = v12908.information();
      if (v2498) {
        var v2496 = this.logger;
        JAM.call(v2496.log, v2496, ["lineMap1 (after merge):"]);
        var v2497 = this.astLogger;
        JAM.call(v2497.logLinemap, v2497, [lineMap1]);
      }
      return;
    }
    function v1191(script$$18, oldAst, newAst) {
      function pre$$11(cur$$10, parent$$70, walker$$54) {
        var v2501 = cur$$10 === oldAst;
        if (v2501) {
          newAst.preComments = cur$$10.preComments;
          newAst.postComments = cur$$10.postComments;
          var v2499 = _this$$14.logger;
          JAM.call(v2499.log, v2499, ["replaced old AST node with new one in script AST"]);
          var v2500 = walker$$54.options;
          v2500.stopWalk();
          return newAst;
        }
        var v2504 = JAM.call(TypeScript$$30.isValidAstNode, TypeScript$$30, [cur$$10]);
        if (v2504) {
          var v18880 = cur$$10.limChar;
          var v18881 = oldAst.minChar;
          var v12909 = v18880 < v18881;
          var v18884 = !v12909;
          if (v18884) {
            var v18882 = cur$$10.minChar;
            var v18883 = oldAst.limChar;
            v12909 = v18882 > v18883;
          }
          var v2503 = v12909;
          if (v2503) {
            var v2502 = walker$$54.options;
            v2502.goChildren = false;
          }
        }
        return cur$$10;
      }
      var _this$$14 = this;
      var v2505 = TypeScript$$30.getAstWalkerFactory();
      JAM.call(v2505.walk, v2505, [script$$18, pre$$11], JAM.policy.p1);
      return;
    }
    function v1190(updateResult) {
      function v1189() {
        var v2506 = TypeScript$$30.ScriptEditRange;
        var v12910 = updateResult.scope1;
        var v2507 = v12910.minChar;
        var v12911 = updateResult.scope1;
        var v2508 = v12911.limChar;
        var v12912 = updateResult.editRange;
        var v2509 = v12912.delta;
        var editRange$$2 = JAM.new(v2506, [v2507, v2508, v2509]);
        var v2510 = updateResult.script1;
        var v2511 = editRange$$2.limChar;
        var v2512 = editRange$$2.delta;
        JAM.call(_this$$13.applyDeltaPosition, _this$$13, [v2510, v2511, v2512], JAM.policy.p1);
        var v2513 = updateResult.script2;
        var v2514 = editRange$$2.minChar;
        JAM.call(_this$$13.applyDeltaPosition, _this$$13, [v2513, 0, v2514], JAM.policy.p1);
        var v2515 = updateResult.script1;
        var v2516 = updateResult.script2;
        JAM.call(_this$$13.mergeLocationInfo, _this$$13, [v2515, v2516, editRange$$2], JAM.policy.p1);
        var v2517 = updateResult.script1;
        var v2518 = updateResult.scope1;
        var v2519 = updateResult.scope2;
        JAM.call(_this$$13.replaceAST, _this$$13, [v2517, v2518, v2519], JAM.policy.p1);
        return;
      }
      var _this$$13 = this;
      var v2520 = this.logger;
      JAM.call(TypeScript$$30.timeFunction, TypeScript$$30, [v2520, "mergeTrees()", v1189], JAM.policy.p1);
      return;
    }
    function v1188(previousScript$$1, scriptId$$1, newSourceText$$1, editRange$$1) {
      function errorCapture$$1(minChar$$33, charLen, message$$19, unitIndex$$10) {
        var v12913 = TypeScript$$30.ErrorEntry;
        var v12914 = minChar$$33 + charLen;
        var v2521 = JAM.new(v12913, [unitIndex$$10, minChar$$33, v12914, message$$19]);
        JAM.call(parseErrors$$1.push, parseErrors$$1, [v2521]);
        return;
      }
      var v2522 = this.logger;
      var v12915 = 'attemptIncrementalUpdateUnit("' + scriptId$$1;
      var v2523 = v12915 + '")';
      JAM.call(v2522.log, v2522, [v2523]);
      var v2524 = editRange$$1 === null;
      if (v2524) {
        throw new Error("editRange should be valid");
      }
      var scope1$$1 = JAM.call(this.getEnclosingScopeContextIfSingleScopeEdit, this, [previousScript$$1, scriptId$$1, newSourceText$$1, editRange$$1], JAM.policy.p1);
      var v2525 = scope1$$1 === null;
      if (v2525) {
        return null;
      }
      var v18885 = scope1$$1.scopeStartAST;
      var v12916 = v18885.limChar;
      var v18886 = scope1$$1.scopeStartAST;
      var v12917 = v18886.minChar;
      var v2526 = v12916 - v12917;
      var v2527 = editRange$$1.delta;
      var newScopeLength$$1 = v2526 + v2527;
      var v12918 = newScopeLength$$1;
      var v18887 = newSourceText$$1.getLength();
      var v12919 = v18887 / 2;
      var v2530 = v12918 >= v12919;
      if (v2530) {
        var v2528 = this.logger;
        var v12920 = "  Bailing out because range of scope to reparse (" + newScopeLength$$1;
        var v2529 = v12920 + " characters) is greater than half the size of the source text";
        JAM.call(v2528.log, v2528, [v2529]);
        return null;
      }
      var parseErrors$$1 = [];
      var v2531 = this.logger;
      var v2532 = scope1$$1.scopeStartAST;
      var v12921 = scope1$$1.scopeStartAST;
      var v2533 = v12921.minChar;
      var v18888 = scope1$$1.scopeStartAST;
      var v12922 = v18888.minChar;
      var v2534 = v12922 + newScopeLength$$1;
      var quickParseResult = JAM.call(TypeScript$$30.quickParse, TypeScript$$30, [v2531, v2532, newSourceText$$1, v2533, v2534, errorCapture$$1], JAM.policy.p1);
      var v12923 = quickParseResult.endLexState;
      var v18889 = TypeScript$$30.LexState;
      var v12924 = v18889.Start;
      var v2536 = v12923 != v12924;
      if (v2536) {
        var v2535 = this.logger;
        JAM.call(v2535.log, v2535, ["  Bailing out because scope contains unterminated comment"]);
        return null;
      }
      var scriptFragment$$1 = quickParseResult.Script;
      var v22886 = scriptFragment$$1.vars;
      var v18890 = v22886.members;
      var v12925 = v18890.length;
      var v2538 = v12925 !== 0;
      if (v2538) {
        var v2537 = this.logger;
        JAM.call(v2537.log, v2537, ["  Bailing out because new source text defines variables"]);
        return null;
      }
      var v22887 = scriptFragment$$1.bod;
      var v18891 = v22887.members;
      var v12926 = v18891.length;
      var v2540 = v12926 !== 1;
      if (v2540) {
        var v2539 = this.logger;
        JAM.call(v2539.log, v2539, ["  Bailing out because new source text defines more than one scope (or none)"]);
        return null;
      }
      var oldScope = scope1$$1.scopeStartAST;
      var v12927 = scriptFragment$$1.bod;
      var v2541 = v12927.members;
      var newScope = v2541[0];
      var v12928 = oldScope.nodeType;
      var v12929 = newScope.nodeType;
      var v2543 = v12928 != v12929;
      if (v2543) {
        var v2542 = this.logger;
        JAM.call(v2542.log, v2542, ["  Bailing out because new source text does not define the same scope type as the existing scope"]);
        return null;
      }
      var v18892 = oldScope.leftCurlyCount;
      var v12930 = !v18892;
      var v18894 = !v12930;
      if (v18894) {
        var v18893 = oldScope.rightCurlyCount;
        v12930 = !v18893;
      }
      var v2545 = v12930;
      if (v2545) {
        var v2544 = this.logger;
        JAM.call(v2544.log, v2544, ["  Bailing out because sopce doesn't have left/right curly count"]);
        return null;
      }
      var v12931 = oldScope.leftCurlyCount;
      var v12932 = newScope.leftCurlyCount;
      var v2547 = v12931 !== v12932;
      if (v2547) {
        var v2546 = this.logger;
        JAM.call(v2546.log, v2546, ["  Bailing out because new source text contains more (or fewer) left curly braces"]);
        return null;
      }
      var v12933 = oldScope.rightCurlyCount;
      var v12934 = newScope.rightCurlyCount;
      var v2549 = v12933 !== v12934;
      if (v2549) {
        var v2548 = this.logger;
        JAM.call(v2548.log, v2548, ["  Bailing out because new source text contains more (or fewer) right curly braces"]);
        return null;
      }
      var v12935 = newScope.minChar;
      var v2551 = v12935 !== 0;
      if (v2551) {
        var v2550 = this.logger;
        JAM.call(v2550.log, v2550, ["  Bailing out because new function declaration does not start at position 0"]);
        return null;
      }
      var v12936 = newScope.limChar;
      var v2553 = v12936 !== newScopeLength$$1;
      if (v2553) {
        var v2552 = this.logger;
        JAM.call(v2552.log, v2552, ["  Bailing out because new function declaration does not end at the new end position"]);
        return null;
      }
      var v2554 = TypeScript$$30.UpdateUnitResult;
      return JAM.call(v2554.singleScopeEdits, v2554, [previousScript$$1, scriptFragment$$1, oldScope, newScope, editRange$$1, parseErrors$$1], JAM.policy.p1);
    }
    function v1187(previousScript, scriptId, newSourceText, editRange) {
      var v2555 = this.logger;
      var v12937 = 'checkEditsInsideSingleScope("' + scriptId;
      var v2556 = v12937 + '")';
      JAM.call(v2555.log, v2555, [v2556]);
      var v2557 = editRange === null;
      if (v2557) {
        throw new Error("editRange should be valid");
      }
      var v2559 = editRange.isUnknown();
      if (v2559) {
        var v2558 = this.logger;
        JAM.call(v2558.log, v2558, ["  Bailing out because edit range is unknown"]);
        return null;
      }
      var v2560 = this.logger;
      var v2561 = editRange.minChar;
      var scope1 = JAM.call(TypeScript$$30.findEnclosingScopeAt, TypeScript$$30, [v2560, previousScript, newSourceText, v2561, false], JAM.policy.p1);
      var v2562 = this.logger;
      var v2563 = editRange.limChar;
      var scope2 = JAM.call(TypeScript$$30.findEnclosingScopeAt, TypeScript$$30, [v2562, previousScript, newSourceText, v2563, false], JAM.policy.p1);
      var v12938 = scope1 == null;
      var v18895 = !v12938;
      if (v18895) {
        v12938 = scope2 == null;
      }
      var v2565 = v12938;
      if (v2565) {
        var v2564 = this.logger;
        JAM.call(v2564.log, v2564, ["  Bailing out because containing scopes cannot be determined"]);
        return null;
      }
      var v12939 = scope1.scopeStartAST;
      var v12940 = scope2.scopeStartAST;
      var v2567 = v12939 !== v12940;
      if (v2567) {
        var v2566 = this.logger;
        JAM.call(v2566.log, v2566, ["  Bailing out because edit overlaps 2 disctint scopes"]);
        return null;
      }
      var v18896 = scope1.scopeStartAST;
      var v12941 = v18896.limChar;
      var v18897 = scope1.scopeStartAST;
      var v12942 = v18897.minChar;
      var v2568 = v12941 - v12942;
      var v2569 = editRange.delta;
      var newScopeLength = v2568 + v2569;
      var v2571 = newScopeLength <= 0;
      if (v2571) {
        var v2570 = this.logger;
        JAM.call(v2570.log, v2570, ["  Bailing out because scope has been entirely removed from new source text"]);
        return null;
      }
      return scope1;
    }
    function IncrementalParser$$1(logger$$5) {
      this.logger = logger$$5;
      var v2572 = TypeScript$$30.AstLogger;
      var v2573 = this.logger;
      var v26463 = JAM.new(v2572, [v2573]);
      this.astLogger = v26463;
      return;
    }
    var v2574 = IncrementalParser$$1.prototype;
    v2574.getEnclosingScopeContextIfSingleScopeEdit = v1187;
    var v2575 = IncrementalParser$$1.prototype;
    v2575.attemptIncrementalUpdateUnit = v1188;
    var v2576 = IncrementalParser$$1.prototype;
    v2576.mergeTrees = v1190;
    var v2577 = IncrementalParser$$1.prototype;
    v2577.replaceAST = v1191;
    var v2578 = IncrementalParser$$1.prototype;
    v2578.mergeLocationInfo = v1192;
    var v2579 = IncrementalParser$$1.prototype;
    v2579.applyDeltaPosition = v1193;
    return IncrementalParser$$1;
  }
  var IncrementalParser = v1194();
  TypeScript$$30.IncrementalParser = IncrementalParser;
  return;
}
function v1186(TypeScript$$29) {
  function v1185() {
    function v1184(str$$12) {
      var v2580 = this.styleSettings;
      JAM.call(v2580.parseOptions, v2580, [str$$12]);
      return;
    }
    function CompilationSettings$$1() {
      var v26464 = new StyleSettings;
      this.styleSettings = v26464;
      this.propagateConstants = false;
      this.minWhitespace = false;
      this.parseOnly = false;
      this.errorRecovery = false;
      this.emitComments = false;
      this.watch = false;
      this.exec = false;
      this.resolve = true;
      this.controlFlow = false;
      this.printControlFlow = false;
      this.controlFlowUseDef = false;
      this.errorOnWith = true;
      this.preprocess = true;
      this.canCallDefinitionSignature = false;
      this.inferPropertiesFromThisAssignment = false;
      this.useDefaultLib = true;
      var v2581 = TypeScript$$29.CodeGenTarget;
      this.codeGenTarget = v2581.ES3;
      var v2582 = TypeScript$$29.ModuleGenTarget;
      this.moduleGenTarget = v2582.Synchronous;
      this.outputOption = "";
      this.mapSourceFiles = false;
      this.generateDeclarationFiles = false;
      this.useCaseSensitiveFileResolution = false;
      return;
    }
    var v2583 = CompilationSettings$$1.prototype;
    v2583.setStyleOptions = v1184;
    return CompilationSettings$$1;
  }
  function v1183() {
    function v1182(str$$11) {
      var opts = str$$11.split(";");
      var i$$118 = 0;
      var len$$57 = opts.length;
      var v2588 = i$$118 < len$$57;
      for (;v2588;) {
        var opt$$1 = opts[i$$118];
        var val$$7 = true;
        var colonIndex = opt$$1.lastIndexOf(":");
        var v2586 = colonIndex >= 0;
        if (v2586) {
          var v2584 = colonIndex + 1;
          var valStr = JAM.call(opt$$1.substring, opt$$1, [v2584]);
          opt$$1 = JAM.call(opt$$1.substring, opt$$1, [0, colonIndex], JAM.policy.p1);
          var v2585 = valStr == "off";
          if (v2585) {
            val$$7 = false;
          }
        }
        var v12943 = JAM.call(this.setOption, this, [opt$$1, val$$7], JAM.policy.p1);
        var v2587 = !v12943;
        if (v2587) {
          return;
        }
        i$$118++;
        v2588 = i$$118 < len$$57;
      }
      return;
    }
    function v1181(opt, val$$6) {
      var optExists = this[opt];
      var v2589 = optExists !== undefined;
      if (v2589) {
        JAM.set(this, opt, val$$6);
        return true;
      } else {
        return false;
      }
      return;
    }
    function StyleSettings$$1() {
      this.bitwise = false;
      this.blockInCompoundStmt = false;
      this.eqeqeq = false;
      this.forin = false;
      this.emptyBlocks = true;
      this.newMustBeUsed = false;
      this.requireSemi = false;
      this.assignmentInCond = false;
      this.eqnull = false;
      this.evalOK = true;
      this.innerScopeDeclEscape = true;
      this.funcInLoop = true;
      this.reDeclareLocal = true;
      this.literalSubscript = true;
      this.implicitAny = false;
      return;
    }
    var v2590 = StyleSettings$$1.prototype;
    v2590.setOption = v1181;
    var v2591 = StyleSettings$$1.prototype;
    v2591.parseOptions = v1182;
    return StyleSettings$$1;
  }
  function getAdditionalDependencyPath(comment$$6) {
    var amdDependencyRegEx = /^(\/\/\/\s*<amd-dependency\s+path=)('|")(.+?)\2\s*(static=('|")(.+?)\2\s*)*\/>/igm;
    var match$$1 = JAM.call(amdDependencyRegEx.exec, amdDependencyRegEx, [comment$$6]);
    if (match$$1) {
      var path$$18 = match$$1[3];
      return path$$18;
    } else {
      return null;
    }
    return;
  }
  function getImplicitImport(comment$$7) {
    var implicitImportRegEx = /^(\/\/\/\s*<implicit-import\s*)*\/>/igm;
    var match$$2 = JAM.call(implicitImportRegEx.exec, implicitImportRegEx, [comment$$7]);
    if (match$$2) {
      return true;
    }
    return false;
  }
  function getStyleSettings(comment$$8, styleSettings) {
    var styleRegEx = /^(\/\/\/\s*<style\s+)(([a-zA-Z])+=('|").+('|"))\s*\/>/igm;
    var settings$$2 = JAM.call(styleRegEx.exec, styleRegEx, [comment$$8]);
    if (settings$$2) {
      var settingsRegEx = /^([a-zA-Z]+=['"]on['|"])/igm;
      var v2592 = settings$$2[2];
      settings$$2 = JAM.call(settingsRegEx.exec, settingsRegEx, [v2592]);
      if (settings$$2) {
        var i$$117 = 0;
        var v12944 = settings$$2.length;
        var v2609 = i$$117 < v12944;
        for (;v2609;) {
          var v2593 = settings$$2[i$$117];
          var setting = v2593.split("=");
          var on = '"on"';
          var v2608 = setting[0];
          switch(v2608) {
            case "blockInCompoundStmt":
              var v2594 = setting[1];
              styleSettings.blockInCompoundStmt = v2594 == on;
              break;
            case "eqeqeq":
              var v2595 = setting[1];
              styleSettings.eqeqeq = v2595 == on;
              break;
            case "forin":
              var v2596 = setting[1];
              styleSettings.forin = v2596 == on;
              break;
            case "emptyBlocks":
              var v2597 = setting[1];
              styleSettings.emptyBlocks = v2597 == on;
              break;
            case "newMustBeUsed":
              var v2598 = setting[1];
              styleSettings.newMustBeUsed = v2598 == on;
              break;
            case "requireSemi":
              var v2599 = setting[1];
              styleSettings.requireSemi = v2599 == on;
              break;
            case "assignmentInCond":
              var v2600 = setting[1];
              styleSettings.assignmentInCond = v2600 == on;
              break;
            case "eqnull":
              var v2601 = setting[1];
              styleSettings.eqnull = v2601 == on;
              break;
            case "evalOK":
              var v2602 = setting[1];
              styleSettings.evalOK = v2602 == on;
              break;
            case "innerScopeDeclEscape":
              var v2603 = setting[1];
              styleSettings.innerScopeDeclEscape = v2603 == on;
              break;
            case "funcInLoop":
              var v2604 = setting[1];
              styleSettings.funcInLoop = v2604 == on;
              break;
            case "reDeclareLocal":
              var v2605 = setting[1];
              styleSettings.reDeclareLocal = v2605 == on;
              break;
            case "literalSubscript":
              var v2606 = setting[1];
              styleSettings.literalSubscript = v2606 == on;
              break;
            case "implicitAny":
              var v2607 = setting[1];
              styleSettings.implicitAny = v2607 == on;
          }
          i$$117++;
          var v12945 = settings$$2.length;
          v2609 = i$$117 < v12945;
        }
      }
    }
    return;
  }
  function getReferencedFiles(sourceText$$4) {
    var preProcessInfo = preProcessFile(sourceText$$4, null, false);
    return preProcessInfo.referencedFiles;
  }
  function preProcessFile(sourceText$$5, options$$7, readImportFiles) {
    var v12946 = typeof options$$7;
    var v2610 = v12946 === "undefined";
    if (v2610) {
      options$$7 = new CompilationSettings;
    }
    var v12947 = typeof readImportFiles;
    var v2611 = v12947 === "undefined";
    if (v2611) {
      readImportFiles = true;
    }
    var v2612 = TypeScript$$29.Scanner;
    var scanner$$1 = new v2612;
    scanner$$1.resetComments();
    var v12948 = TypeScript$$29.LexMode;
    var v2613 = v12948.File;
    JAM.call(scanner$$1.setSourceText, scanner$$1, [sourceText$$5, v2613], JAM.policy.p1);
    var tok$$5 = scanner$$1.scan();
    var comments$$12 = [];
    var comment$$9 = null;
    var leftCurlies = [];
    var settings$$3 = options$$7;
    var referencedFiles = [];
    var importedFiles = [];
    var isLibFile = false;
    var v12949 = tok$$5.tokenId;
    var v18898 = TypeScript$$29.TokenID;
    var v12950 = v18898.EndOfFile;
    var v2625 = v12949 != v12950;
    for (;v2625;) {
      var v12951 = readImportFiles;
      if (v12951) {
        var v18899 = tok$$5.tokenId;
        var v22888 = TypeScript$$29.TokenID;
        var v18900 = v22888.Import;
        v12951 = v18899 == v18900;
      }
      var v2622 = v12951;
      if (v2622) {
        tok$$5 = scanner$$1.scan();
        var v18901 = tok$$5.tokenId;
        var v22889 = TypeScript$$29.TokenID;
        var v18902 = v22889.Identifier;
        var v12952 = v18901 == v18902;
        var v18903 = !v12952;
        if (v18903) {
          v12952 = JAM.call(TypeScript$$29.convertTokToID, TypeScript$$29, [tok$$5, false], JAM.policy.p1);
        }
        var v2621 = v12952;
        if (v2621) {
          tok$$5 = scanner$$1.scan();
          var v12953 = tok$$5.tokenId;
          var v18904 = TypeScript$$29.TokenID;
          var v12954 = v18904.Equals;
          var v2620 = v12953 == v12954;
          if (v2620) {
            tok$$5 = scanner$$1.scan();
            var v12955 = tok$$5.tokenId;
            var v18905 = TypeScript$$29.TokenID;
            var v12956 = v18905.Module;
            var v2619 = v12955 == v12956;
            if (v2619) {
              tok$$5 = scanner$$1.scan();
              var v12957 = tok$$5.tokenId;
              var v18906 = TypeScript$$29.TokenID;
              var v12958 = v18906.OpenParen;
              var v2618 = v12957 == v12958;
              if (v2618) {
                tok$$5 = scanner$$1.scan();
                var v12959 = tok$$5.tokenId;
                var v18907 = TypeScript$$29.TokenID;
                var v12960 = v18907.StringLiteral;
                var v2617 = v12959 == v12960;
                if (v2617) {
                  var v2614 = scanner$$1.startPos;
                  var v2615 = scanner$$1.pos;
                  var v18908 = tok$$5.getText();
                  var v12961 = JAM.call(TypeScript$$29.switchToForwardSlashes, TypeScript$$29, [v18908]);
                  var v2616 = JAM.call(TypeScript$$29.stripQuotes, TypeScript$$29, [v12961]);
                  var ref$$2 = {minChar:v2614, limChar:v2615, path:v2616, isResident:false};
                  JAM.call(importedFiles.push, importedFiles, [ref$$2]);
                }
              }
            }
          }
        }
      }
      var v12962 = tok$$5.tokenId;
      var v18909 = TypeScript$$29.TokenID;
      var v12963 = v18909.OpenBrace;
      var v2623 = v12962 == v12963;
      if (v2623) {
        JAM.call(leftCurlies.push, leftCurlies, [tok$$5]);
      }
      var v12964 = tok$$5.tokenId;
      var v18910 = TypeScript$$29.TokenID;
      var v12965 = v18910.CloseBrace;
      var v2624 = v12964 == v12965;
      if (v2624) {
        leftCurlies.pop();
      }
      tok$$5 = scanner$$1.scan();
      var v12966 = tok$$5.tokenId;
      var v18911 = TypeScript$$29.TokenID;
      var v12967 = v18911.EndOfFile;
      v2625 = v12966 != v12967;
    }
    comments$$12 = scanner$$1.getComments();
    var iComment = 0;
    var v12968 = comments$$12.length;
    var v2638 = iComment < v12968;
    for (;v2638;) {
      comment$$9 = comments$$12[iComment];
      var v12969 = comment$$9.isBlock;
      var v2637 = !v12969;
      if (v2637) {
        var referencedCode;
        JSCompiler_inline_label_getFileReferenceFromReferencePath_29: {
          var comment$$inline_23 = comment$$9.getText();
          var referencesRegEx$$inline_24 = /^(\/\/\/\s*<reference\s+path=)('|")(.+?)\2\s*(static=('|")(.+?)\2\s*)*\/>/igm;
          var match$$inline_25 = JAM.call(referencesRegEx$$inline_24.exec, referencesRegEx$$inline_24, [comment$$inline_23]);
          if (match$$inline_25) {
            var v2626 = match$$inline_25[3];
            var path$$inline_26 = JAM.call(TypeScript$$29.normalizePath, TypeScript$$29, [v2626]);
            var adjustedPath$$inline_27 = JAM.call(TypeScript$$29.normalizePath, TypeScript$$29, [path$$inline_26]);
            var v12970 = match$$inline_25.length;
            var v2627 = v12970 >= 7;
            if (v2627) {
              var v12971 = match$$inline_25[6];
              v2627 = v12971 == "true";
            }
            var isResident$$inline_28 = v2627;
            if (isResident$$inline_28) {
              var v2628 = TypeScript$$29.CompilerDiagnostics;
              var v2629 = path$$inline_26 + " is resident";
              JAM.call(v2628.debugPrint, v2628, [v2629]);
            }
            var v2630 = JAM.call(TypeScript$$29.switchToForwardSlashes, TypeScript$$29, [adjustedPath$$inline_27]);
            referencedCode = {minChar:0, limChar:0, path:v2630, isResident:isResident$$inline_28};
          } else {
            referencedCode = null;
          }
        }
        if (referencedCode) {
          referencedCode.minChar = comment$$9.startPos;
          var v2631 = referencedCode.minChar;
          var v12972 = comment$$9.value;
          var v2632 = v12972.length;
          referencedCode.limChar = v2631 + v2632;
          JAM.call(referencedFiles.push, referencedFiles, [referencedCode]);
        }
        if (settings$$3) {
          var v2633 = comment$$9.getText();
          var v2634 = settings$$3.styleSettings;
          getStyleSettings(v2633, v2634);
          var isNoLibRegex = /^(\/\/\/\s*<reference\s+no-default-lib=)('|")(.+?)\2\s*\/>/igm;
          var v2635 = comment$$9.getText();
          var isNoLibMatch = JAM.call(isNoLibRegex.exec, isNoLibRegex, [v2635]);
          if (isNoLibMatch) {
            var v2636 = isNoLibMatch[3];
            isLibFile = v2636 == "true";
          }
        }
      }
      iComment++;
      var v12973 = comments$$12.length;
      v2638 = iComment < v12973;
    }
    return {settings:settings$$3, referencedFiles:referencedFiles, importedFiles:importedFiles, isLibFile:isLibFile};
  }
  var StyleSettings = v1183();
  TypeScript$$29.StyleSettings = StyleSettings;
  var CompilationSettings = v1185();
  TypeScript$$29.CompilationSettings = CompilationSettings;
  TypeScript$$29.getAdditionalDependencyPath = getAdditionalDependencyPath;
  TypeScript$$29.getImplicitImport = getImplicitImport;
  TypeScript$$29.getStyleSettings = getStyleSettings;
  TypeScript$$29.getReferencedFiles = getReferencedFiles;
  TypeScript$$29.preProcessFile = preProcessFile;
  return;
}
function v1180(TypeScript$$28) {
  function v1179() {
    function v1178(referencePath, parentPath, performSearch, resolutionDispatcher) {
      var resolvedFile = {content:"", path:referencePath};
      var v2639 = this.environment;
      var ioHost$$1 = v2639.ioHost;
      var isRelativePath = JAM.call(TypeScript$$28.isRelative, TypeScript$$28, [referencePath]);
      var v2640;
      if (isRelativePath) {
        v2640 = false;
      } else {
        v2640 = JAM.call(TypeScript$$28.isRooted, TypeScript$$28, [referencePath]);
      }
      var isRootedPath = v2640;
      var v2641;
      if (isRelativePath) {
        var v18912 = parentPath + "/";
        var v12974 = v18912 + referencePath;
        v2641 = JAM.call(ioHost$$1.resolvePath, ioHost$$1, [v12974]);
      } else {
        var v12975;
        var v24847 = isRootedPath;
        var v25705 = !v24847;
        if (v25705) {
          v24847 = !parentPath;
        }
        var v22890 = v24847;
        var v24848 = !v22890;
        if (v24848) {
          v22890 = performSearch;
        }
        var v18914 = v22890;
        if (v18914) {
          v12975 = referencePath;
        } else {
          var v18913 = parentPath + "/";
          v12975 = v18913 + referencePath;
        }
        v2641 = v12975;
      }
      var normalizedPath = v2641;
      var v18915 = JAM.call(TypeScript$$28.isSTRFile, TypeScript$$28, [normalizedPath]);
      var v12976 = !v18915;
      if (v12976) {
        var v18916 = JAM.call(TypeScript$$28.isTSFile, TypeScript$$28, [normalizedPath]);
        v12976 = !v18916;
      }
      var v2642 = v12976;
      if (v2642) {
        normalizedPath = normalizedPath + ".ts";
      }
      var v2643 = JAM.call(TypeScript$$28.stripQuotes, TypeScript$$28, [normalizedPath]);
      normalizedPath = JAM.call(TypeScript$$28.switchToForwardSlashes, TypeScript$$28, [v2643]);
      var v2644;
      var v22891 = this.environment;
      var v18917 = v22891.compilationSettings;
      var v12977 = v18917.useCaseSensitiveFileResolution;
      if (v12977) {
        v2644 = normalizedPath;
      } else {
        v2644 = normalizedPath.toLocaleUpperCase();
      }
      var absoluteModuleID = v2644;
      var v18918 = this.visited;
      var v12978 = v18918[absoluteModuleID];
      var v2685 = !v12978;
      if (v2685) {
        var v12979 = isRelativePath || isRootedPath;
        var v18919 = !v12979;
        if (v18919) {
          v12979 = !performSearch;
        }
        var v2671 = v12979;
        if (v2671) {
          try {
            var v2645 = TypeScript$$28.CompilerDiagnostics;
            var v2646 = "   Reading code from " + normalizedPath;
            JAM.call(v2645.debugPrint, v2645, [v2646]);
            try {
              var v26465 = JAM.call(ioHost$$1.readFile, ioHost$$1, [normalizedPath]);
              resolvedFile.content = v26465;
            } catch (err) {
              try {
                var v2648 = JAM.call(TypeScript$$28.isSTRFile, TypeScript$$28, [normalizedPath]);
                if (v2648) {
                  normalizedPath = JAM.call(TypeScript$$28.changePathToTS, TypeScript$$28, [normalizedPath]);
                } else {
                  var v2647 = JAM.call(TypeScript$$28.isTSFile, TypeScript$$28, [normalizedPath]);
                  if (v2647) {
                    normalizedPath = JAM.call(TypeScript$$28.changePathToSTR, TypeScript$$28, [normalizedPath]);
                  }
                }
                var v2649 = TypeScript$$28.CompilerDiagnostics;
                var v2650 = "   Reading code from " + normalizedPath;
                JAM.call(v2649.debugPrint, v2649, [v2650]);
                var v26466 = JAM.call(ioHost$$1.readFile, ioHost$$1, [normalizedPath]);
                resolvedFile.content = v26466;
              } catch (err$$1) {
                normalizedPath = JAM.call(TypeScript$$28.changePathToDSTR, TypeScript$$28, [normalizedPath]);
                var v2651 = TypeScript$$28.CompilerDiagnostics;
                var v2652 = "   Reading code from " + normalizedPath;
                JAM.call(v2651.debugPrint, v2651, [v2652]);
                try {
                  var v26467 = JAM.call(ioHost$$1.readFile, ioHost$$1, [normalizedPath]);
                  resolvedFile.content = v26467;
                } catch (err$$2) {
                  normalizedPath = JAM.call(TypeScript$$28.changePathToDTS, TypeScript$$28, [normalizedPath]);
                  var v2653 = TypeScript$$28.CompilerDiagnostics;
                  var v2654 = "   Reading code from " + normalizedPath;
                  JAM.call(v2653.debugPrint, v2653, [v2654]);
                  var v26468 = JAM.call(ioHost$$1.readFile, ioHost$$1, [normalizedPath]);
                  resolvedFile.content = v26468;
                }
              }
            }
            var v2655 = TypeScript$$28.CompilerDiagnostics;
            var v2656 = "   Found code at " + normalizedPath;
            JAM.call(v2655.debugPrint, v2655, [v2656]);
            resolvedFile.path = normalizedPath;
            var v2657 = this.visited;
            v2657[absoluteModuleID] = true;
          } catch (err$$3) {
            var v2658 = TypeScript$$28.CompilerDiagnostics;
            var v2659 = "   Did not find code for " + referencePath;
            JAM.call(v2658.debugPrint, v2658, [v2659]);
          }
        } else {
          resolvedFile = JAM.call(ioHost$$1.findFile, ioHost$$1, [parentPath, normalizedPath], JAM.policy.p1);
          var v2662 = !resolvedFile;
          if (v2662) {
            var v2661 = JAM.call(TypeScript$$28.isSTRFile, TypeScript$$28, [normalizedPath]);
            if (v2661) {
              normalizedPath = JAM.call(TypeScript$$28.changePathToTS, TypeScript$$28, [normalizedPath]);
            } else {
              var v2660 = JAM.call(TypeScript$$28.isTSFile, TypeScript$$28, [normalizedPath]);
              if (v2660) {
                normalizedPath = JAM.call(TypeScript$$28.changePathToSTR, TypeScript$$28, [normalizedPath]);
              }
            }
            resolvedFile = JAM.call(ioHost$$1.findFile, ioHost$$1, [parentPath, normalizedPath], JAM.policy.p1);
          }
          var v2664 = !resolvedFile;
          if (v2664) {
            normalizedPath = JAM.call(TypeScript$$28.changePathToDTS, TypeScript$$28, [normalizedPath]);
            resolvedFile = JAM.call(ioHost$$1.findFile, ioHost$$1, [parentPath, normalizedPath], JAM.policy.p1);
            var v2663 = !resolvedFile;
            if (v2663) {
              normalizedPath = JAM.call(TypeScript$$28.changePathToDSTR, TypeScript$$28, [normalizedPath]);
              resolvedFile = JAM.call(ioHost$$1.findFile, ioHost$$1, [parentPath, normalizedPath], JAM.policy.p1);
            }
          }
          if (resolvedFile) {
            var v12980 = resolvedFile.path;
            var v2665 = JAM.call(TypeScript$$28.stripQuotes, TypeScript$$28, [v12980]);
            var v26469 = JAM.call(TypeScript$$28.switchToForwardSlashes, TypeScript$$28, [v2665]);
            resolvedFile.path = v26469;
            var v2666 = TypeScript$$28.CompilerDiagnostics;
            var v12981 = referencePath + " resolved to: ";
            var v12982 = resolvedFile.path;
            var v2667 = v12981 + v12982;
            JAM.call(v2666.debugPrint, v2666, [v2667]);
            resolvedFile.content = resolvedFile.content;
            var v2668 = this.visited;
            v2668[absoluteModuleID] = true;
          } else {
            var v2669 = TypeScript$$28.CompilerDiagnostics;
            var v2670 = "Could not find " + referencePath;
            JAM.call(v2669.debugPrint, v2669, [v2670]);
          }
        }
        var v12983 = resolvedFile;
        if (v12983) {
          v12983 = resolvedFile.content;
        }
        var v2684 = v12983;
        if (v2684) {
          var v2672 = resolvedFile.path;
          var rootDir = JAM.call(ioHost$$1.dirName, ioHost$$1, [v2672]);
          var v2673 = resolvedFile.path;
          var v2674 = resolvedFile.content;
          var sourceUnit = JAM.new(SourceUnit, [v2673, v2674]);
          var v12984 = this.environment;
          var v2675 = v12984.compilationSettings;
          var preProcessedFileInfo = JAM.call(TypeScript$$28.preProcessFile, TypeScript$$28, [sourceUnit, v2675], JAM.policy.p1);
          sourceUnit.referencedFiles = preProcessedFileInfo.referencedFiles;
          var i$$116 = 0;
          var v18920 = preProcessedFileInfo.referencedFiles;
          var v12985 = v18920.length;
          var v2680 = i$$116 < v12985;
          for (;v2680;) {
            var v2676 = preProcessedFileInfo.referencedFiles;
            var referencedFile = v2676[i$$116];
            var v2677;
            var v18921 = referencedFile.path;
            var v12988 = JAM.call(TypeScript$$28.isRooted, TypeScript$$28, [v18921]);
            if (v12988) {
              v2677 = referencedFile.path;
            } else {
              var v12986 = rootDir + "/";
              var v12987 = referencedFile.path;
              v2677 = v12986 + v12987;
            }
            normalizedPath = v2677;
            normalizedPath = JAM.call(ioHost$$1.resolvePath, ioHost$$1, [normalizedPath]);
            var v2678 = referencePath == normalizedPath;
            if (v2678) {
              JAM.call(resolutionDispatcher.postResolutionError, resolutionDispatcher, [normalizedPath, "File contains reference to itself", null], JAM.policy.p1);
              i$$116++;
              var v18922 = preProcessedFileInfo.referencedFiles;
              var v12989 = v18922.length;
              v2680 = i$$116 < v12989;
              continue;
            }
            var v2679 = referencedFile.path;
            JAM.call(this.resolveCode, this, [v2679, rootDir, false, resolutionDispatcher], JAM.policy.p1);
            i$$116++;
            var v18923 = preProcessedFileInfo.referencedFiles;
            var v12990 = v18923.length;
            v2680 = i$$116 < v12990;
          }
          i$$116 = 0;
          var v18924 = preProcessedFileInfo.importedFiles;
          var v12991 = v18924.length;
          var v2682 = i$$116 < v12991;
          for (;v2682;) {
            var v18925 = preProcessedFileInfo.importedFiles;
            var v12992 = v18925[i$$116];
            var v2681 = v12992.path;
            JAM.call(this.resolveCode, this, [v2681, rootDir, true, resolutionDispatcher], JAM.policy.p1);
            i$$116++;
            var v18926 = preProcessedFileInfo.importedFiles;
            var v12993 = v18926.length;
            v2682 = i$$116 < v12993;
          }
          var v2683 = sourceUnit.path;
          JAM.call(resolutionDispatcher.postResolution, resolutionDispatcher, [v2683, sourceUnit], JAM.policy.p1);
        }
      }
      return;
    }
    function CodeResolver$$1(environment) {
      this.environment = environment;
      this.visited = {};
      return;
    }
    var v2686 = CodeResolver$$1.prototype;
    v2686.resolveCode = v1178;
    return CodeResolver$$1;
  }
  function v1177() {
    function CompilationEnvironment$$1(compilationSettings, ioHost) {
      this.compilationSettings = compilationSettings;
      this.ioHost = ioHost;
      this.residentCode = [];
      this.code = [];
      return;
    }
    return CompilationEnvironment$$1;
  }
  function v1176() {
    function v1175() {
      var v2687 = this.content;
      return v2687.length;
    }
    function v1174(start$$12, end$$6) {
      var v2688 = this.content;
      return JAM.call(v2688.substring, v2688, [start$$12, end$$6], JAM.policy.p1);
    }
    function SourceUnit$$1(path$$16, content$$5) {
      this.path = path$$16;
      this.content = content$$5;
      this.referencedFiles = null;
      return;
    }
    var v2689 = SourceUnit$$1.prototype;
    v2689.getText = v1174;
    var v2690 = SourceUnit$$1.prototype;
    v2690.getLength = v1175;
    return SourceUnit$$1;
  }
  var SourceUnit = v1176();
  TypeScript$$28.SourceUnit = SourceUnit;
  var CompilationEnvironment = v1177();
  TypeScript$$28.CompilationEnvironment = CompilationEnvironment;
  var CodeResolver = v1179();
  TypeScript$$28.CodeResolver = CodeResolver;
  return;
}
function v1173(TypeScript$$27) {
  function stripQuotes(str$$7) {
    var v18927 = JAM.call(str$$7.replace, str$$7, ['"', ""], JAM.policy.p1);
    var v12994 = JAM.call(v18927.replace, v18927, ["'", ""], JAM.policy.p1);
    var v2691 = JAM.call(v12994.replace, v12994, ["'", ""], JAM.policy.p1);
    return JAM.call(v2691.replace, v2691, ['"', ""], JAM.policy.p1);
  }
  function isQuoted(str$$8) {
    var v22892 = str$$8.indexOf('"');
    var v18928 = v22892 != -1;
    var v22894 = !v18928;
    if (v22894) {
      var v22893 = str$$8.indexOf("'");
      v18928 = v22893 != -1;
    }
    var v12995 = v18928;
    var v18930 = !v12995;
    if (v18930) {
      var v18929 = str$$8.indexOf("'");
      v12995 = v18929 != -1;
    }
    var v2692 = v12995;
    var v12997 = !v2692;
    if (v12997) {
      var v12996 = str$$8.indexOf('"');
      v2692 = v12996 != -1;
    }
    return v2692;
  }
  function quoteStr(str$$9) {
    var v2693 = '"' + str$$9;
    return v2693 + '"';
  }
  function swapQuotes(str$$10) {
    var v12998 = str$$10.indexOf('"');
    var v2694 = v12998 != -1;
    if (v2694) {
      str$$10 = JAM.call(str$$10.replace, str$$10, ['"', "'"], JAM.policy.p1);
      str$$10 = JAM.call(str$$10.replace, str$$10, ['"', "'"], JAM.policy.p1);
    } else {
      str$$10 = JAM.call(str$$10.replace, str$$10, ["'", '"'], JAM.policy.p1);
      str$$10 = JAM.call(str$$10.replace, str$$10, ["'", '"'], JAM.policy.p1);
    }
    return str$$10;
  }
  function switchToForwardSlashes(path$$8) {
    return JAM.call(path$$8.replace, path$$8, [/\\/g, "/"], JAM.policy.p1);
  }
  function trimModName(modName$$4) {
    var v18931 = modName$$4.length;
    var v12999 = v18931 > 6;
    if (v12999) {
      var v24849 = modName$$4.length;
      var v22895 = v24849 - 6;
      var v22896 = modName$$4.length;
      var v18932 = JAM.call(modName$$4.substring, modName$$4, [v22895, v22896], JAM.policy.p1);
      v12999 = v18932 == ".d.str";
    }
    var v2696 = v12999;
    if (v2696) {
      var v13000 = modName$$4.length;
      var v2695 = v13000 - 6;
      return JAM.call(modName$$4.substring, modName$$4, [0, v2695], JAM.policy.p1);
    }
    var v18933 = modName$$4.length;
    var v13001 = v18933 > 4;
    if (v13001) {
      var v24850 = modName$$4.length;
      var v22897 = v24850 - 4;
      var v22898 = modName$$4.length;
      var v18934 = JAM.call(modName$$4.substring, modName$$4, [v22897, v22898], JAM.policy.p1);
      v13001 = v18934 == ".str";
    }
    var v2698 = v13001;
    if (v2698) {
      var v13002 = modName$$4.length;
      var v2697 = v13002 - 4;
      return JAM.call(modName$$4.substring, modName$$4, [0, v2697], JAM.policy.p1);
    }
    var v18935 = modName$$4.length;
    var v13003 = v18935 > 5;
    if (v13003) {
      var v24851 = modName$$4.length;
      var v22899 = v24851 - 5;
      var v22900 = modName$$4.length;
      var v18936 = JAM.call(modName$$4.substring, modName$$4, [v22899, v22900], JAM.policy.p1);
      v13003 = v18936 == ".d.ts";
    }
    var v2700 = v13003;
    if (v2700) {
      var v13004 = modName$$4.length;
      var v2699 = v13004 - 5;
      return JAM.call(modName$$4.substring, modName$$4, [0, v2699], JAM.policy.p1);
    }
    var v18937 = modName$$4.length;
    var v13005 = v18937 > 3;
    if (v13005) {
      var v24852 = modName$$4.length;
      var v22901 = v24852 - 3;
      var v22902 = modName$$4.length;
      var v18938 = JAM.call(modName$$4.substring, modName$$4, [v22901, v22902], JAM.policy.p1);
      v13005 = v18938 == ".ts";
    }
    var v2702 = v13005;
    if (v2702) {
      var v13006 = modName$$4.length;
      var v2701 = v13006 - 3;
      return JAM.call(modName$$4.substring, modName$$4, [0, v2701], JAM.policy.p1);
    }
    var v18939 = modName$$4.length;
    var v13007 = v18939 > 3;
    if (v13007) {
      var v24853 = modName$$4.length;
      var v22903 = v24853 - 3;
      var v22904 = modName$$4.length;
      var v18940 = JAM.call(modName$$4.substring, modName$$4, [v22903, v22904], JAM.policy.p1);
      v13007 = v18940 == ".js";
    }
    var v2704 = v13007;
    if (v2704) {
      var v13008 = modName$$4.length;
      var v2703 = v13008 - 3;
      return JAM.call(modName$$4.substring, modName$$4, [0, v2703], JAM.policy.p1);
    }
    return modName$$4;
  }
  function getDeclareFilePath(fname) {
    var v2705;
    var v13010 = isSTRFile(fname);
    if (v13010) {
      v2705 = changePathToDSTR(fname);
    } else {
      var v13009;
      var v18941 = isTSFile(fname);
      if (v18941) {
        v13009 = changePathToDTS(fname);
      } else {
        v13009 = changePathToDTS(fname);
      }
      v2705 = v13009;
    }
    return v2705;
  }
  function isFileOfExtension(fname$$1, ext) {
    var invariantFname = fname$$1.toLocaleUpperCase();
    var invariantExt = ext.toLocaleUpperCase();
    var extLength = invariantExt.length;
    var v13011 = invariantFname.length;
    var v2706 = v13011 > extLength;
    if (v2706) {
      var v22905 = invariantFname.length;
      var v18942 = v22905 - extLength;
      var v18943 = invariantFname.length;
      var v13012 = JAM.call(invariantFname.substring, invariantFname, [v18942, v18943], JAM.policy.p1);
      v2706 = v13012 == invariantExt;
    }
    return v2706;
  }
  function isJSFile(fname$$2) {
    return isFileOfExtension(fname$$2, ".js");
  }
  function isSTRFile(fname$$3) {
    return isFileOfExtension(fname$$3, ".str");
  }
  function isTSFile(fname$$4) {
    return isFileOfExtension(fname$$4, ".ts");
  }
  function isDSTRFile(fname$$5) {
    return isFileOfExtension(fname$$5, ".d.str");
  }
  function isDTSFile(fname$$6) {
    return isFileOfExtension(fname$$6, ".d.ts");
  }
  function getPrettyName(modPath$$3, quote$$1, treatAsFileName) {
    var v13013 = typeof quote$$1;
    var v2707 = v13013 === "undefined";
    if (v2707) {
      quote$$1 = true;
    }
    var v13014 = typeof treatAsFileName;
    var v2708 = v13014 === "undefined";
    if (v2708) {
      treatAsFileName = false;
    }
    var v2709;
    if (treatAsFileName) {
      v2709 = switchToForwardSlashes(modPath$$3);
    } else {
      var v13015 = stripQuotes(modPath$$3);
      v2709 = trimModName(v13015);
    }
    var modName$$5 = v2709;
    var components = JAM.call(this.getPathComponents, this, [modName$$5]);
    var v2710;
    var v13017 = components.length;
    if (v13017) {
      var v13016;
      if (quote$$1) {
        var v24854 = components.length;
        var v22906 = v24854 - 1;
        var v18944 = components[v22906];
        v13016 = quoteStr(v18944);
      } else {
        var v22907 = components.length;
        var v18945 = v22907 - 1;
        v13016 = components[v18945];
      }
      v2710 = v13016;
    } else {
      v2710 = modPath$$3;
    }
    return v2710;
  }
  function getPathComponents(path$$9) {
    return path$$9.split("/");
  }
  function getRelativePathToFixedPath(fixedModFilePath, absoluteModPath) {
    absoluteModPath = switchToForwardSlashes(absoluteModPath);
    var modComponents = JAM.call(this.getPathComponents, this, [absoluteModPath]);
    var fixedModComponents = JAM.call(this.getPathComponents, this, [fixedModFilePath]);
    var joinStartIndex = 0;
    var v18946 = modComponents.length;
    var v13018 = joinStartIndex < v18946;
    if (v13018) {
      var v18947 = fixedModComponents.length;
      v13018 = joinStartIndex < v18947;
    }
    var v2712 = v13018;
    for (;v2712;) {
      var v13019 = fixedModComponents[joinStartIndex];
      var v13020 = modComponents[joinStartIndex];
      var v2711 = v13019 != v13020;
      if (v2711) {
        break;
      }
      joinStartIndex++;
      var v18948 = modComponents.length;
      var v13021 = joinStartIndex < v18948;
      if (v13021) {
        var v18949 = fixedModComponents.length;
        v13021 = joinStartIndex < v18949;
      }
      v2712 = v13021;
    }
    var v2717 = joinStartIndex != 0;
    if (v2717) {
      var relativePath = "";
      var v2713 = modComponents.length;
      var relativePathComponents = JAM.call(modComponents.slice, modComponents, [joinStartIndex, v2713], JAM.policy.p1);
      var v13022 = fixedModComponents.length;
      var v2715 = joinStartIndex < v13022;
      for (;v2715;) {
        var v13023 = fixedModComponents[joinStartIndex];
        var v2714 = v13023 != "";
        if (v2714) {
          relativePath = relativePath + "../";
        }
        joinStartIndex++;
        var v13024 = fixedModComponents.length;
        v2715 = joinStartIndex < v13024;
      }
      var v2716 = relativePathComponents.join("/");
      return relativePath + v2716;
    }
    return absoluteModPath;
  }
  function quoteBaseName(modPath$$4) {
    var v2718 = stripQuotes(modPath$$4);
    var modName$$6 = trimModName(v2718);
    var path$$10 = getRootFilePath(modName$$6);
    var v2721 = path$$10 == "";
    if (v2721) {
      return modPath$$4;
    } else {
      var components$$1 = modName$$6.split(path$$10);
      var v2719;
      var v18950 = components$$1.length;
      var v13025 = v18950 > 1;
      if (v13025) {
        v2719 = 1;
      } else {
        v2719 = 0;
      }
      var fileIndex = v2719;
      var v2720 = components$$1[fileIndex];
      return quoteStr(v2720);
    }
    return;
  }
  function changePathToSTR(modPath$$5) {
    var v13026 = stripQuotes(modPath$$5);
    var v2722 = trimModName(v13026);
    return v2722 + ".str";
  }
  function changePathToDSTR(modPath$$6) {
    var v13027 = stripQuotes(modPath$$6);
    var v2723 = trimModName(v13027);
    return v2723 + ".d.str";
  }
  function changePathToTS(modPath$$7) {
    var v13028 = stripQuotes(modPath$$7);
    var v2724 = trimModName(v13028);
    return v2724 + ".ts";
  }
  function changePathToDTS(modPath$$8) {
    var v13029 = stripQuotes(modPath$$8);
    var v2725 = trimModName(v13029);
    return v2725 + ".d.ts";
  }
  function isRelative(path$$11) {
    var v2726 = path$$11.charAt(0);
    return v2726 == ".";
  }
  function isRooted(path$$12) {
    var v22908 = path$$12.charAt(0);
    var v18951 = v22908 == "\\";
    var v22910 = !v18951;
    if (v22910) {
      var v22909 = path$$12.charAt(0);
      v18951 = v22909 == "/";
    }
    var v13030 = v18951;
    var v18953 = !v13030;
    if (v18953) {
      var v18952 = path$$12.indexOf(":\\");
      v13030 = v18952 != -1;
    }
    var v2727 = v13030;
    var v13032 = !v2727;
    if (v13032) {
      var v13031 = path$$12.indexOf(":/");
      v2727 = v13031 != -1;
    }
    return v2727;
  }
  function getRootFilePath(outFname) {
    var v2730 = outFname == "";
    if (v2730) {
      return outFname;
    } else {
      var v2728 = outFname.indexOf("/");
      var isPath = v2728 != -1;
      var v2729;
      if (isPath) {
        v2729 = filePath(outFname);
      } else {
        v2729 = "";
      }
      return v2729;
    }
    return;
  }
  function filePathComponents(fullPath) {
    fullPath = switchToForwardSlashes(fullPath);
    var components$$2 = getPathComponents(fullPath);
    var v13033 = components$$2.length;
    var v2731 = v13033 - 1;
    return JAM.call(components$$2.slice, components$$2, [0, v2731], JAM.policy.p1);
  }
  function filePath(fullPath$$1) {
    var path$$13 = filePathComponents(fullPath$$1);
    var v2732 = path$$13.join("/");
    return v2732 + "/";
  }
  function normalizeURL(url$$2) {
    var hostDomainAndPortRegex = /^(https?:\/\/[\-\w\.]+(:\d+)?\/)(.*)$/i;
    var matches = JAM.call(hostDomainAndPortRegex.exec, hostDomainAndPortRegex, [url$$2]);
    if (matches) {
      var hostDomainAndPort = matches[1];
      var actualPath = matches[3];
      var v2733 = normalizePath(actualPath);
      return hostDomainAndPort + v2733;
    }
    return normalizePath(url$$2);
  }
  function normalizePath(path$$14) {
    path$$14 = switchToForwardSlashes(path$$14);
    var v2734 = path$$14.charAt(0);
    var startedWithSep = v2734 === "/";
    var parts = JAM.call(this.getPathComponents, this, [path$$14]);
    var i$$115 = 0;
    var v13034 = parts.length;
    var v2738 = i$$115 < v13034;
    for (;v2738;) {
      var v18954 = parts[i$$115];
      var v13035 = v18954 === ".";
      var v18956 = !v13035;
      if (v18956) {
        var v18955 = parts[i$$115];
        v13035 = v18955 === "";
      }
      var v2735 = v13035;
      if (v2735) {
        JAM.call(parts.splice, parts, [i$$115, 1], JAM.policy.p1);
        i$$115--;
      }
      var v18957 = i$$115 > 0;
      if (v18957) {
        var v22911 = parts[i$$115];
        v18957 = v22911 === "..";
      }
      var v13036 = v18957;
      if (v13036) {
        var v22912 = i$$115 - 1;
        var v18958 = parts[v22912];
        v13036 = v18958 !== "..";
      }
      var v2737 = v13036;
      if (v2737) {
        var v2736 = i$$115 - 1;
        JAM.call(parts.splice, parts, [v2736, 2], JAM.policy.p1);
        i$$115 = i$$115 - 2;
      }
      i$$115++;
      var v13037 = parts.length;
      v2738 = i$$115 < v13037;
    }
    var v13038;
    if (startedWithSep) {
      v13038 = "/";
    } else {
      v13038 = "";
    }
    var v2739 = v13038;
    var v2740 = parts.join("/");
    return v2739 + v2740;
  }
  function normalizeImportPath(path$$15) {
    return normalizePath(path$$15);
  }
  TypeScript$$27.stripQuotes = stripQuotes;
  TypeScript$$27.isQuoted = isQuoted;
  TypeScript$$27.quoteStr = quoteStr;
  TypeScript$$27.swapQuotes = swapQuotes;
  TypeScript$$27.switchToForwardSlashes = switchToForwardSlashes;
  TypeScript$$27.trimModName = trimModName;
  TypeScript$$27.getDeclareFilePath = getDeclareFilePath;
  TypeScript$$27.isJSFile = isJSFile;
  TypeScript$$27.isSTRFile = isSTRFile;
  TypeScript$$27.isTSFile = isTSFile;
  TypeScript$$27.isDSTRFile = isDSTRFile;
  TypeScript$$27.isDTSFile = isDTSFile;
  TypeScript$$27.getPrettyName = getPrettyName;
  TypeScript$$27.getPathComponents = getPathComponents;
  TypeScript$$27.getRelativePathToFixedPath = getRelativePathToFixedPath;
  TypeScript$$27.quoteBaseName = quoteBaseName;
  TypeScript$$27.changePathToSTR = changePathToSTR;
  TypeScript$$27.changePathToDSTR = changePathToDSTR;
  TypeScript$$27.changePathToTS = changePathToTS;
  TypeScript$$27.changePathToDTS = changePathToDTS;
  TypeScript$$27.isRelative = isRelative;
  TypeScript$$27.isRooted = isRooted;
  TypeScript$$27.getRootFilePath = getRootFilePath;
  TypeScript$$27.filePathComponents = filePathComponents;
  TypeScript$$27.filePath = filePath;
  TypeScript$$27.normalizeURL = normalizeURL;
  TypeScript$$27.pathNormalizeRegExp = /\//g;
  TypeScript$$27.normalizePath = normalizePath;
  TypeScript$$27.normalizeImportPath = normalizeImportPath;
  return;
}
function v1172(TypeScript$$26) {
  function v1171() {
    function TypeLink$$1() {
      this.type = null;
      this.ast = null;
      return;
    }
    return TypeLink$$1;
  }
  function v1170(_super$$67) {
    function v1169(moduleType$$2) {
      var moduleName$$2 = null;
      var v13039 = this.members;
      var v2741 = v13039.allMembers;
      moduleName$$2 = JAM.call(ModuleType$$1.findDynamicModuleNameInHashTable, ModuleType$$1, [moduleType$$2, v2741], JAM.policy.p1);
      var v2743 = moduleName$$2 == null;
      if (v2743) {
        var v13040 = this.ambientMembers;
        var v2742 = v13040.allMembers;
        moduleName$$2 = JAM.call(ModuleType$$1.findDynamicModuleNameInHashTable, ModuleType$$1, [moduleType$$2, v2742], JAM.policy.p1);
      }
      return moduleName$$2;
    }
    function findDynamicModuleNameInHashTable(moduleType$$1, members$$27) {
      function v1168(key$$51, s$$34, c$$13) {
        var v13041 = moduleName$$1 == null;
        if (v13041) {
          var v18959 = JAM.call(TypeScript$$26.isQuoted, TypeScript$$26, [key$$51]);
          v13041 = !v18959;
        }
        var v2745 = v13041;
        if (v2745) {
          var symbol$$22 = s$$34;
          var type$$57 = symbol$$22.getType();
          var v2744 = type$$57 == moduleType$$1;
          if (v2744) {
            moduleName$$1 = {name:key$$51, symbol:symbol$$22};
          }
        }
        return;
      }
      var moduleName$$1 = null;
      JAM.call(members$$27.map, members$$27, [v1168, null], JAM.policy.p1);
      return moduleName$$1;
    }
    function v1167() {
      return null;
    }
    function v1166() {
      return null;
    }
    function v1165() {
      return this.ambientEnclosedTypes;
    }
    function v1164() {
      return this.enclosedTypes;
    }
    function v1163() {
      var v13042 = this.members;
      var v2746 = v13042 != null;
      var v13044 = !v2746;
      if (v13044) {
        var v13043 = this.enclosedTypes;
        v2746 = v13043 != null;
      }
      return v2746;
    }
    function v1162() {
      return true;
    }
    function ModuleType$$1(enclosedTypes$$4, ambientEnclosedTypes$$4) {
      JAM.call(_super$$67.call, _super$$67, [this]);
      this.enclosedTypes = enclosedTypes$$4;
      this.ambientEnclosedTypes = ambientEnclosedTypes$$4;
      this.importedModules = [];
      return;
    }
    JAM.call(__extends, null, [ModuleType$$1, _super$$67], JAM.policy.p1);
    var v2747 = ModuleType$$1.prototype;
    v2747.isModuleType = v1162;
    var v2748 = ModuleType$$1.prototype;
    v2748.hasMembers = v1163;
    var v2749 = ModuleType$$1.prototype;
    v2749.getAllEnclosedTypes = v1164;
    var v2750 = ModuleType$$1.prototype;
    v2750.getAllAmbientEnclosedTypes = v1165;
    var v2751 = ModuleType$$1.prototype;
    v2751.getPublicEnclosedTypes = v1166;
    var v2752 = ModuleType$$1.prototype;
    v2752.getpublicAmbientEnclosedTypes = v1167;
    ModuleType$$1.findDynamicModuleNameInHashTable = findDynamicModuleNameInHashTable;
    var v2753 = ModuleType$$1.prototype;
    v2753.findDynamicModuleName = v1169;
    return ModuleType$$1;
  }
  function v1161() {
    function v1160() {
      var v13045 = this.elementType;
      var v18961 = !v13045;
      if (v18961) {
        var v18960 = this.symbol;
        v13045 = !v18960;
      }
      var v2754 = v13045;
      if (v2754) {
        return [];
      }
      var v13046 = this.isClassInstance();
      var v18962 = !v13046;
      if (v18962) {
        v13046 = this.isClass();
      }
      var v2758 = v13046;
      if (v2758) {
        var v22913 = this.symbol;
        var v18963 = v22913.declAST;
        var v13047 = v18963.nodeType;
        var v18964 = TypeScript$$26.NodeType;
        var v13048 = v18964.FuncDecl;
        var v2757 = v13047 == v13048;
        if (v2757) {
          var v18965 = this.symbol;
          var v13049 = v18965.declAST;
          var v2755 = v13049.classDecl;
          return v2755.getDocComments();
        } else {
          var v2756 = this.symbol;
          return v2756.getDocComments();
        }
      }
      var v22914 = this.symbol;
      var v18966 = v22914.name;
      if (v18966) {
        var v24855 = this.symbol;
        var v22915 = v24855.name;
        v18966 = v22915 != "_anonymous";
      }
      var v13050 = v18966;
      if (v13050) {
        var v25706 = this.call;
        var v24856 = v25706 == null;
        if (v24856) {
          var v25707 = this.construct;
          v24856 = v25707 == null;
        }
        var v22916 = v24856;
        if (v22916) {
          var v24857 = this.index;
          v22916 = v24857 == null;
        }
        var v18967 = v22916;
        var v22917 = !v18967;
        if (v22917) {
          v18967 = this.members;
        }
        v13050 = v18967;
      }
      var v2760 = v13050;
      if (v2760) {
        var v2759 = this.symbol;
        return v2759.getDocComments();
      }
      return [];
    }
    function v1159() {
      return null;
    }
    function v1158() {
      return null;
    }
    function v1157() {
      return null;
    }
    function v1156() {
      return null;
    }
    function v1155() {
      var v2761 = this.members;
      return v2761 != null;
    }
    function v1154() {
      return false;
    }
    function v1153(b$$14, checker$$22, acceptVoid$$1, comparisonInfo$$17) {
      var v18968 = checker$$22.anyType;
      var v13051 = this == v18968;
      var v18970 = !v13051;
      if (v18970) {
        var v18969 = checker$$22.anyType;
        v13051 = b$$14 == v18969;
      }
      var v2777 = v13051;
      if (v2777) {
        return checker$$22.anyType;
      } else {
        var v2776 = this == b$$14;
        if (v2776) {
          return this;
        } else {
          var v18971 = checker$$22.nullType;
          var v13052 = b$$14 == v18971;
          if (v13052) {
            var v18972 = checker$$22.nullType;
            v13052 = this != v18972;
          }
          var v2775 = v13052;
          if (v2775) {
            return this;
          } else {
            var v18973 = checker$$22.nullType;
            var v13053 = this == v18973;
            if (v13053) {
              var v18974 = checker$$22.nullType;
              v13053 = b$$14 != v18974;
            }
            var v2774 = v13053;
            if (v2774) {
              return b$$14;
            } else {
              var v18975 = acceptVoid$$1;
              if (v18975) {
                var v22918 = checker$$22.voidType;
                v18975 = b$$14 == v22918;
              }
              var v13054 = v18975;
              if (v13054) {
                var v18976 = checker$$22.voidType;
                v13054 = this != v18976;
              }
              var v2773 = v13054;
              if (v2773) {
                return this;
              } else {
                var v18977 = acceptVoid$$1;
                if (v18977) {
                  var v22919 = checker$$22.voidType;
                  v18977 = this == v22919;
                }
                var v13055 = v18977;
                if (v13055) {
                  var v18978 = checker$$22.voidType;
                  v13055 = b$$14 != v18978;
                }
                var v2772 = v13055;
                if (v2772) {
                  return b$$14;
                } else {
                  var v18979 = checker$$22.undefinedType;
                  var v13056 = b$$14 == v18979;
                  if (v13056) {
                    var v18980 = checker$$22.undefinedType;
                    v13056 = this != v18980;
                  }
                  var v2771 = v13056;
                  if (v2771) {
                    return this;
                  } else {
                    var v18981 = checker$$22.undefinedType;
                    var v13057 = this == v18981;
                    if (v13057) {
                      var v18982 = checker$$22.undefinedType;
                      v13057 = b$$14 != v18982;
                    }
                    var v2770 = v13057;
                    if (v2770) {
                      return b$$14;
                    } else {
                      var v13058 = this.elementType;
                      if (v13058) {
                        v13058 = b$$14.elementType;
                      }
                      var v2769 = v13058;
                      if (v2769) {
                        var v13059 = this.elementType;
                        var v13060 = b$$14.elementType;
                        var v2766 = v13059 == v13060;
                        if (v2766) {
                          return this;
                        } else {
                          var v2762 = this.elementType;
                          var v2763 = b$$14.elementType;
                          var mergedET = JAM.call(v2762.mergeOrdered, v2762, [v2763, checker$$22, acceptVoid$$1, comparisonInfo$$17], JAM.policy.p1);
                          var v2765 = mergedET == null;
                          if (v2765) {
                            var v2764 = checker$$22.anyType;
                            return JAM.call(checker$$22.makeArrayType, checker$$22, [v2764]);
                          } else {
                            return JAM.call(checker$$22.makeArrayType, checker$$22, [mergedET]);
                          }
                        }
                      } else {
                        var v2768 = JAM.call(checker$$22.sourceIsSubtypeOfTarget, checker$$22, [this, b$$14, comparisonInfo$$17], JAM.policy.p1);
                        if (v2768) {
                          return b$$14;
                        } else {
                          var v2767 = JAM.call(checker$$22.sourceIsSubtypeOfTarget, checker$$22, [b$$14, this, comparisonInfo$$17], JAM.policy.p1);
                          if (v2767) {
                            return this;
                          } else {
                            return null;
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      return;
    }
    function v1152(baseType) {
      var v2782 = baseType == this;
      if (v2782) {
        return true;
      } else {
        var v2781 = this.extendsList;
        if (v2781) {
          var i$$114 = 0;
          var v2778 = this.extendsList;
          var len$$56 = v2778.length;
          var v2780 = i$$114 < len$$56;
          for (;v2780;) {
            var v18983 = this.extendsList;
            var v13061 = v18983[i$$114];
            var v2779 = JAM.call(v13061.hasBase, v13061, [baseType]);
            if (v2779) {
              return true;
            }
            i$$114++;
            v2780 = i$$114 < len$$56;
          }
        }
      }
      return false;
    }
    function v1151(pattern$$8, replacement$$6, checker$$21, membersOnly) {
      function v1150(key$$50, s$$33, unused$$5) {
        var sym$$48 = s$$33;
        var bSym$$4 = JAM.call(sym$$48.specializeType, sym$$48, [pattern$$8, replacement$$6, checker$$21], JAM.policy.p1);
        var v2783 = result$$33.ambientMembers;
        var v2784 = bSym$$4.name;
        JAM.call(v2783.addPrivateMember, v2783, [v2784, bSym$$4], JAM.policy.p1);
        return;
      }
      function v1149(key$$49, s$$32, unused$$4) {
        var sym$$47 = s$$32;
        var bSym$$3 = JAM.call(sym$$47.specializeType, sym$$47, [pattern$$8, replacement$$6, checker$$21], JAM.policy.p1);
        var v2785 = result$$33.ambientMembers;
        var v2786 = bSym$$3.name;
        JAM.call(v2785.addPublicMember, v2785, [v2786, bSym$$3], JAM.policy.p1);
        return;
      }
      function v1148(key$$48, s$$31, unused$$3) {
        var sym$$46 = s$$31;
        var bSym$$2 = JAM.call(sym$$46.specializeType, sym$$46, [pattern$$8, replacement$$6, checker$$21], JAM.policy.p1);
        var v2787 = result$$33.members;
        var v2788 = bSym$$2.name;
        JAM.call(v2787.addPrivateMember, v2787, [v2788, bSym$$2], JAM.policy.p1);
        return;
      }
      function v1147(key$$47, s$$30, unused$$2) {
        var sym$$45 = s$$30;
        var bSym$$1 = JAM.call(sym$$45.specializeType, sym$$45, [pattern$$8, replacement$$6, checker$$21], JAM.policy.p1);
        var v2789 = result$$33.members;
        var v2790 = bSym$$1.name;
        JAM.call(v2789.addPublicMember, v2789, [v2790, bSym$$1], JAM.policy.p1);
        return;
      }
      var v2791 = pattern$$8 == this;
      if (v2791) {
        return replacement$$6;
      }
      var result$$33 = this;
      if (membersOnly) {
        var v2801 = this.isReferenceType();
        if (v2801) {
          result$$33 = new Type$$1;
          var v2795 = this.members;
          if (v2795) {
            var v2792 = result$$33;
            var v13062 = TypeScript$$26.ScopedMembers;
            var v18984 = TypeScript$$26.DualStringHashTable;
            var v22920 = TypeScript$$26.StringHashTable;
            var v18985 = new v22920;
            var v22921 = TypeScript$$26.StringHashTable;
            var v18986 = new v22921;
            var v13063 = JAM.new(v18984, [v18985, v18986]);
            var v26470 = JAM.new(v13062, [v13063]);
            v2792.members = v26470;
            var v13064 = this.members;
            var v2793 = v13064.publicMembers;
            JAM.call(v2793.map, v2793, [v1147, null], JAM.policy.p1);
            var v13065 = this.members;
            var v2794 = v13065.privateMembers;
            JAM.call(v2794.map, v2794, [v1148, null], JAM.policy.p1);
          }
          var v2799 = this.ambientMembers;
          if (v2799) {
            var v2796 = result$$33;
            var v13066 = TypeScript$$26.ScopedMembers;
            var v18987 = TypeScript$$26.DualStringHashTable;
            var v22922 = TypeScript$$26.StringHashTable;
            var v18988 = new v22922;
            var v22923 = TypeScript$$26.StringHashTable;
            var v18989 = new v22923;
            var v13067 = JAM.new(v18987, [v18988, v18989]);
            var v26471 = JAM.new(v13066, [v13067]);
            v2796.ambientMembers = v26471;
            var v13068 = this.ambientMembers;
            var v2797 = v13068.publicMembers;
            JAM.call(v2797.map, v2797, [v1149, null], JAM.policy.p1);
            var v13069 = this.ambientMembers;
            var v2798 = v13069.privateMembers;
            JAM.call(v2798.map, v2798, [v1150, null], JAM.policy.p1);
          }
          var v2800 = result$$33;
          var v26472 = JAM.call(checker$$21.scopeOf, checker$$21, [result$$33]);
          v2800.containedScope = v26472;
          result$$33.memberScope = result$$33.containedScope;
        }
      } else {
        var v2807 = this.elementType;
        if (v2807) {
          var v13070 = this.elementType;
          var v2804 = v13070 == pattern$$8;
          if (v2804) {
            result$$33 = JAM.call(checker$$21.makeArrayType, checker$$21, [replacement$$6]);
          } else {
            var v18990 = this.elementType;
            var v13071 = v18990.elementType;
            var v2803 = v13071 == pattern$$8;
            if (v2803) {
              var v2802 = JAM.call(checker$$21.makeArrayType, checker$$21, [replacement$$6]);
              result$$33 = JAM.call(checker$$21.makeArrayType, checker$$21, [v2802]);
            }
          }
        } else {
          var v2806 = this.call;
          if (v2806) {
            result$$33 = new Type$$1;
            var v2805 = result$$33;
            var v13072 = this.call;
            var v26473 = JAM.call(v13072.specializeType, v13072, [pattern$$8, replacement$$6, checker$$21], JAM.policy.p1);
            v2805.call = v26473;
          }
        }
      }
      return result$$33;
    }
    function v1146() {
      var v24858 = this.members;
      var v25708 = !v24858;
      if (v25708) {
        v24858 = this.extendsList;
      }
      var v22924 = v24858;
      var v24859 = !v22924;
      if (v24859) {
        v22924 = this.construct;
      }
      var v18991 = v22924;
      var v22925 = !v18991;
      if (v22925) {
        v18991 = this.call;
      }
      var v13073 = v18991;
      var v18992 = !v13073;
      if (v18992) {
        v13073 = this.index;
      }
      var v2808 = v13073;
      var v13074 = !v2808;
      if (v13074) {
        v2808 = this.elementType;
      }
      return v2808;
    }
    function v1145(flow$$1) {
      var v13075 = flow$$1.anyType;
      var v2823 = this == v13075;
      if (v2823) {
        return null;
      } else {
        var v2822 = this.isDouble();
        if (v2822) {
          var v2810 = flow$$1.numberInterfaceType;
          if (v2810) {
            var v2809 = flow$$1.numberInterfaceType;
            return v2809.memberScope;
          } else {
            return null;
          }
        } else {
          var v2821 = this.isBoolean();
          if (v2821) {
            var v2812 = flow$$1.booleanInterfaceType;
            if (v2812) {
              var v2811 = flow$$1.booleanInterfaceType;
              return v2811.memberScope;
            } else {
              return null;
            }
          } else {
            var v13076 = flow$$1.stringType;
            var v2820 = this == v13076;
            if (v2820) {
              var v2814 = flow$$1.stringInterfaceType;
              if (v2814) {
                var v2813 = flow$$1.stringInterfaceType;
                return v2813.memberScope;
              } else {
                return null;
              }
            } else {
              var v2819 = this.elementType;
              if (v2819) {
                var v2818 = flow$$1.arrayInterfaceType;
                if (v2818) {
                  var v2815 = this.elementType;
                  var v2816 = flow$$1.arrayInterfaceType;
                  var v2817 = flow$$1.checker;
                  var arrInstType$$3 = JAM.call(v2815.getArrayBase, v2815, [v2816, v2817], JAM.policy.p1);
                  return arrInstType$$3.memberScope;
                } else {
                  return null;
                }
              } else {
                return this.memberScope;
              }
            }
          }
        }
      }
      return;
    }
    function v1144(checker$$20) {
      var v13077 = this.isClassInstance();
      var v18993 = !v13077;
      if (v18993) {
        v13077 = this.isClass();
      }
      var v2827 = v13077;
      if (v2827) {
        var v13078 = this.symbol;
        var v2826 = v13078.declAST;
        if (v2826) {
          var v2824 = checker$$20.typeFlow;
          var v13079 = this.symbol;
          var v2825 = v13079.declAST;
          JAM.call(v2824.inScopeTypeCheckDecl, v2824, [v2825]);
        }
      }
      return;
    }
    function v1143(prefix$$5, topLevel$$1, isElementType$$1, scope$$34) {
      function v1142(key$$46, s$$29, unused$$1) {
        var sym$$44 = s$$29;
        var v18994 = sym$$44.flags;
        var v22926 = TypeScript$$26.SymbolFlags;
        var v18995 = v22926.BuiltIn;
        var v13080 = JAM.call(TypeScript$$26.hasFlag, TypeScript$$26, [v18994, v18995], JAM.policy.p1);
        var v2830 = !v13080;
        if (v2830) {
          var typeNameMember = JAM.call(sym$$44.getTypeNameEx, sym$$44, [scope$$34]);
          var v13081 = typeNameMember.isArray();
          if (v13081) {
            var v18996 = typeNameMember.delim;
            v13081 = v18996 == delim;
          }
          var v2829 = v13081;
          if (v2829) {
            var v2828 = typeNameMember.entries;
            JAM.call(allMemberNames.addAll, allMemberNames, [v2828]);
          } else {
            JAM.call(allMemberNames.add, allMemberNames, [typeNameMember]);
          }
          memCount++;
          curlies$$1 = true;
        }
        return;
      }
      var v2850 = this.elementType;
      if (v2850) {
        var v13082 = this.elementType;
        var v2831 = JAM.call(v13082.getMemberTypeNameEx, v13082, [prefix$$5, false, true, scope$$34], JAM.policy.p1);
        return JAM.call(MemberName.create, MemberName, [v2831, "", "[]"], JAM.policy.p1);
      } else {
        var v22927 = this.symbol;
        if (v22927) {
          var v24860 = this.symbol;
          v22927 = v24860.name;
        }
        var v18997 = v22927;
        if (v18997) {
          var v24861 = this.symbol;
          var v22928 = v24861.name;
          v18997 = v22928 != "_anonymous";
        }
        var v13083 = v18997;
        if (v13083) {
          var v26085 = this.call;
          var v25709 = v26085 == null;
          if (v25709) {
            var v26086 = this.construct;
            v25709 = v26086 == null;
          }
          var v24862 = v25709;
          if (v24862) {
            var v25710 = this.index;
            v24862 = v25710 == null;
          }
          var v22929 = v24862;
          var v24865 = !v22929;
          if (v24865) {
            var v24863 = this.typeFlags;
            var v25711 = TypeScript$$26.TypeFlags;
            var v24864 = v25711.BuildingName;
            v22929 = JAM.call(TypeScript$$26.hasFlag, TypeScript$$26, [v24863, v24864], JAM.policy.p1);
          }
          var v18998 = v22929;
          var v22931 = !v18998;
          if (v22931) {
            var v22930 = this.members;
            if (v22930) {
              var v24866 = this.isClass();
              v22930 = !v24866;
            }
            v18998 = v22930;
          }
          v13083 = v18998;
        }
        var v2849 = v13083;
        if (v2849) {
          var v2832 = this.symbol;
          var tn = JAM.call(v2832.scopeRelativeName, v2832, [scope$$34]);
          var v13084;
          var v18999 = tn == "null";
          if (v18999) {
            v13084 = "any";
          } else {
            v13084 = tn;
          }
          var v2833 = v13084;
          return JAM.call(MemberName.create, MemberName, [v2833]);
        } else {
          var v19000 = this.members;
          var v22932 = !v19000;
          if (v22932) {
            v19000 = this.call;
          }
          var v13085 = v19000;
          var v19001 = !v13085;
          if (v19001) {
            v13085 = this.construct;
          }
          var v2848 = v13085;
          if (v2848) {
            var v13086 = this.typeFlags;
            var v19002 = TypeScript$$26.TypeFlags;
            var v13087 = v19002.BuildingName;
            var v2834 = JAM.call(TypeScript$$26.hasFlag, TypeScript$$26, [v13086, v13087], JAM.policy.p1);
            if (v2834) {
              return JAM.call(MemberName.create, MemberName, ["this"]);
            }
            var v13088 = this.typeFlags;
            var v19003 = TypeScript$$26.TypeFlags;
            var v13089 = v19003.BuildingName;
            this.typeFlags = v13088 | v13089;
            var builder$$5 = "";
            var allMemberNames = new MemberNameArray;
            var v2835 = isElementType$$1;
            var v13091 = !v2835;
            if (v13091) {
              var v13090 = this.index;
              v2835 = v13090 != null;
            }
            var curlies$$1 = v2835;
            var memCount = 0;
            var delim = "; ";
            var v2837 = this.members;
            if (v2837) {
              var v13092 = this.members;
              var v2836 = v13092.allMembers;
              JAM.call(v2836.map, v2836, [v1142, null], JAM.policy.p1);
            }
            var signatureCount = this.callCount();
            var j$$18;
            var len$$55 = 0;
            var v13093 = !curlies$$1;
            if (v13093) {
              v13093 = signatureCount == 1;
            }
            var v2838 = v13093;
            if (v2838) {
              v2838 = topLevel$$1;
            }
            var shortform$$3 = v2838;
            var v2840 = this.call;
            if (v2840) {
              var v13094 = this.call;
              var v2839 = JAM.call(v13094.toStrings, v13094, [prefix$$5, shortform$$3, scope$$34], JAM.policy.p1);
              JAM.call(allMemberNames.addAll, allMemberNames, [v2839]);
            }
            var v2842 = this.construct;
            if (v2842) {
              var v13095 = this.construct;
              var v2841 = JAM.call(v13095.toStrings, v13095, ["new", shortform$$3, scope$$34], JAM.policy.p1);
              JAM.call(allMemberNames.addAll, allMemberNames, [v2841]);
            }
            var v2844 = this.index;
            if (v2844) {
              var v13096 = this.index;
              var v2843 = JAM.call(v13096.toStrings, v13096, ["", shortform$$3, scope$$34], JAM.policy.p1);
              JAM.call(allMemberNames.addAll, allMemberNames, [v2843]);
            }
            var v13097 = curlies$$1;
            var v19005 = !v13097;
            if (v19005) {
              var v19004 = signatureCount > 1;
              if (v19004) {
                v19004 = topLevel$$1;
              }
              v13097 = v19004;
            }
            var v2846 = v13097;
            if (v2846) {
              allMemberNames.prefix = "{ ";
              allMemberNames.suffix = "}";
              allMemberNames.delim = delim;
            } else {
              var v19006 = allMemberNames.entries;
              var v13098 = v19006.length;
              var v2845 = v13098 > 1;
              if (v2845) {
                allMemberNames.delim = delim;
              }
            }
            var v13099 = this.typeFlags;
            var v22933 = TypeScript$$26.TypeFlags;
            var v19007 = v22933.BuildingName;
            var v13100 = ~v19007;
            this.typeFlags = v13099 & v13100;
            var v13101 = signatureCount == 0;
            if (v13101) {
              v13101 = memCount == 0;
            }
            var v2847 = v13101;
            if (v2847) {
              return JAM.call(MemberName.create, MemberName, ["{}"]);
            } else {
              return allMemberNames;
            }
          } else {
            return JAM.call(MemberName.create, MemberName, ["{}"]);
          }
        }
      }
      return;
    }
    function v1141(scope$$33) {
      var prefix$$4 = "";
      var topLevel = true;
      var isElementType = false;
      var memberName$$4 = JAM.call(this.getMemberTypeNameEx, this, [prefix$$4, topLevel, isElementType, scope$$33], JAM.policy.p1);
      return memberName$$4.toString();
    }
    function v1140() {
      var total = 0;
      var v2851 = this.call;
      if (v2851) {
        var v22934 = this.call;
        var v19008 = v22934.signatures;
        var v13102 = v19008.length;
        total = total + v13102;
      }
      var v2852 = this.construct;
      if (v2852) {
        var v22935 = this.construct;
        var v19009 = v22935.signatures;
        var v13103 = v19009.length;
        total = total + v13103;
      }
      var v2853 = this.index;
      if (v2853) {
        var v22936 = this.index;
        var v19010 = v22936.signatures;
        var v13104 = v19010.length;
        total = total + v13104;
      }
      return total;
    }
    function v1139(scope$$32) {
      return JAM.call(this.getMemberTypeNameEx, this, ["", true, false, scope$$32], JAM.policy.p1);
    }
    function v1138(scope$$31) {
      return JAM.call(this.getMemberTypeName, this, [scope$$31]);
    }
    function v1137() {
      return JAM.call(this.getMemberTypeName, this, [null]);
    }
    function v1136() {
      var v2854 = this.primitiveTypeClass;
      var v2855 = Primitive.Null;
      return JAM.call(TypeScript$$26.hasFlag, TypeScript$$26, [v2854, v2855], JAM.policy.p1);
    }
    function v1135() {
      var v2856 = this.primitiveTypeClass;
      var v2857 = Primitive.Boolean;
      return JAM.call(TypeScript$$26.hasFlag, TypeScript$$26, [v2856, v2857], JAM.policy.p1);
    }
    function v1134() {
      var v2858 = this.primitiveTypeClass;
      var v2859 = Primitive.String;
      return JAM.call(TypeScript$$26.hasFlag, TypeScript$$26, [v2858, v2859], JAM.policy.p1);
    }
    function v1133() {
      var v2860 = this.primitiveTypeClass;
      var v2861 = Primitive.Double;
      return JAM.call(TypeScript$$26.hasFlag, TypeScript$$26, [v2860, v2861], JAM.policy.p1);
    }
    function v1132() {
      var v13105 = this.typeFlags;
      var v19011 = TypeScript$$26.TypeFlags;
      var v13106 = v19011.HasImplementation;
      this.typeFlags = v13105 | v13106;
      return;
    }
    function v1131() {
      var v2862 = this.typeFlags;
      var v13107 = TypeScript$$26.TypeFlags;
      var v2863 = v13107.HasImplementation;
      return JAM.call(TypeScript$$26.hasFlag, TypeScript$$26, [v2862, v2863], JAM.policy.p1);
    }
    function v1130() {
      var v2864 = this.isClass();
      if (v2864) {
        return this.instanceType;
      } else {
        return this;
      }
      return;
    }
    function v1129() {
      var v13108 = this.symbol;
      if (v13108) {
        var v19012 = this.elementType;
        v13108 = !v19012;
      }
      var v2865 = v13108;
      if (v2865) {
        var v19013 = this.symbol;
        var v13109 = v19013.type;
        v2865 = v13109.isClass();
      }
      return v2865;
    }
    function v1128() {
      var v2866 = this.elementType;
      return v2866 != null;
    }
    function v1127() {
      var v2867 = this.instanceType;
      return v2867 != null;
    }
    function v1126(arrInstType$$2, checker$$19) {
      var v2868 = this.arrayCache;
      return JAM.call(v2868.specialize, v2868, [arrInstType$$2, checker$$19], JAM.policy.p1);
    }
    function v1125() {
      var v13110 = this.extendsList;
      if (v13110) {
        var v22937 = this.extendsList;
        var v19014 = v22937.length;
        v13110 = v19014 > 0;
      }
      var v2870 = v13110;
      if (v2870) {
        var v2869 = this.extendsList;
        return v2869[0];
      } else {
        return null;
      }
      return;
    }
    function Type$$1() {
      this.typeID = currentTypeID;
      currentTypeID = currentTypeID + 1;
      this.construct = null;
      this.call = null;
      this.index = null;
      var v2871 = TypeScript$$26.CompilerDiagnostics;
      this.passTypeCreated = v2871.analysisPass;
      this.primitiveTypeClass = Primitive.None;
      var v2872 = TypeScript$$26.TypeFlags;
      this.typeFlags = v2872.None;
      return;
    }
    var v2873 = Type$$1.prototype;
    v2873.baseClass = v1125;
    var v2874 = Type$$1.prototype;
    v2874.getArrayBase = v1126;
    var v2875 = Type$$1.prototype;
    v2875.isClass = v1127;
    var v2876 = Type$$1.prototype;
    v2876.isArray = v1128;
    var v2877 = Type$$1.prototype;
    v2877.isClassInstance = v1129;
    var v2878 = Type$$1.prototype;
    v2878.getInstanceType = v1130;
    var v2879 = Type$$1.prototype;
    v2879.hasImplementation = v1131;
    var v2880 = Type$$1.prototype;
    v2880.setHasImplementation = v1132;
    var v2881 = Type$$1.prototype;
    v2881.isDouble = v1133;
    var v2882 = Type$$1.prototype;
    v2882.isString = v1134;
    var v2883 = Type$$1.prototype;
    v2883.isBoolean = v1135;
    var v2884 = Type$$1.prototype;
    v2884.isNull = v1136;
    var v2885 = Type$$1.prototype;
    v2885.getTypeName = v1137;
    var v2886 = Type$$1.prototype;
    v2886.getScopedTypeName = v1138;
    var v2887 = Type$$1.prototype;
    v2887.getScopedTypeNameEx = v1139;
    var v2888 = Type$$1.prototype;
    v2888.callCount = v1140;
    var v2889 = Type$$1.prototype;
    v2889.getMemberTypeName = v1141;
    var v2890 = Type$$1.prototype;
    v2890.getMemberTypeNameEx = v1143;
    var v2891 = Type$$1.prototype;
    v2891.checkDecl = v1144;
    var v2892 = Type$$1.prototype;
    v2892.getMemberScope = v1145;
    var v2893 = Type$$1.prototype;
    v2893.isReferenceType = v1146;
    var v2894 = Type$$1.prototype;
    v2894.specializeType = v1151;
    var v2895 = Type$$1.prototype;
    v2895.hasBase = v1152;
    var v2896 = Type$$1.prototype;
    v2896.mergeOrdered = v1153;
    var v2897 = Type$$1.prototype;
    v2897.isModuleType = v1154;
    var v2898 = Type$$1.prototype;
    v2898.hasMembers = v1155;
    var v2899 = Type$$1.prototype;
    v2899.getAllEnclosedTypes = v1156;
    var v2900 = Type$$1.prototype;
    v2900.getAllAmbientEnclosedTypes = v1157;
    var v2901 = Type$$1.prototype;
    v2901.getPublicEnclosedTypes = v1158;
    var v2902 = Type$$1.prototype;
    v2902.getpublicAmbientEnclosedTypes = v1159;
    var v2903 = Type$$1.prototype;
    v2903.getDocComments = v1160;
    return Type$$1;
  }
  function v1124(_super$$66) {
    function v1123(entries) {
      var i$$113 = 0;
      var v13111 = entries.length;
      var v2906 = i$$113 < v13111;
      for (;v2906;) {
        var v2904 = this.entries;
        var v2905 = entries[i$$113];
        JAM.call(v2904.push, v2904, [v2905]);
        i$$113++;
        var v13112 = entries.length;
        v2906 = i$$113 < v13112;
      }
      return;
    }
    function v1122(entry$$2) {
      var v2907 = this.entries;
      JAM.call(v2907.push, v2907, [entry$$2]);
      return;
    }
    function v1121() {
      return true;
    }
    function MemberNameArray$$1() {
      JAM.call(_super$$66.apply, _super$$66, [this, arguments], JAM.policy.p1);
      this.delim = "";
      this.entries = [];
      return;
    }
    JAM.call(__extends, null, [MemberNameArray$$1, _super$$66], JAM.policy.p1);
    var v2908 = MemberNameArray$$1.prototype;
    v2908.isArray = v1121;
    var v2909 = MemberNameArray$$1.prototype;
    v2909.add = v1122;
    var v2910 = MemberNameArray$$1.prototype;
    v2910.addAll = v1123;
    return MemberNameArray$$1;
  }
  function v1120(_super$$65) {
    function v1119() {
      return true;
    }
    function MemberNameString$$1(text$$25) {
      JAM.call(_super$$65.call, _super$$65, [this]);
      this.text = text$$25;
      return;
    }
    JAM.call(__extends, null, [MemberNameString$$1, _super$$65], JAM.policy.p1);
    var v2911 = MemberNameString$$1.prototype;
    v2911.isString = v1119;
    return MemberNameString$$1;
  }
  function v1118() {
    function create(arg1, arg2, arg3) {
      var v13113 = typeof arg1;
      var v2913 = v13113 == "string";
      if (v2913) {
        return JAM.new(MemberNameString, [arg1]);
      } else {
        var result$$32 = new MemberNameArray;
        if (arg2) {
          result$$32.prefix = arg2;
        }
        if (arg3) {
          result$$32.suffix = arg3;
        }
        var v2912 = result$$32.entries;
        JAM.call(v2912.push, v2912, [arg1]);
        return result$$32;
      }
      return;
    }
    function memberNameToString(memberName$$3) {
      var result$$31 = memberName$$3.prefix;
      var v2915 = memberName$$3.isString();
      if (v2915) {
        var v13114 = memberName$$3.text;
        result$$31 = result$$31 + v13114;
      } else {
        var ar = memberName$$3;
        var index$$61 = 0;
        var v19015 = ar.entries;
        var v13115 = v19015.length;
        var v2914 = index$$61 < v13115;
        for (;v2914;) {
          var v22938 = ar.entries;
          var v19016 = v22938[index$$61];
          var v13116 = JAM.call(MemberName$$1.memberNameToString, MemberName$$1, [v19016]);
          result$$31 = result$$31 + v13116;
          var v13117 = ar.delim;
          result$$31 = result$$31 + v13117;
          index$$61++;
          var v19017 = ar.entries;
          var v13118 = v19017.length;
          v2914 = index$$61 < v13118;
        }
      }
      var v13119 = memberName$$3.suffix;
      result$$31 = result$$31 + v13119;
      return result$$31;
    }
    function v1117() {
      return JAM.call(MemberName$$1.memberNameToString, MemberName$$1, [this]);
    }
    function v1116() {
      return false;
    }
    function v1115() {
      return false;
    }
    function MemberName$$1() {
      this.prefix = "";
      this.suffix = "";
      return;
    }
    var v2916 = MemberName$$1.prototype;
    v2916.isString = v1115;
    var v2917 = MemberName$$1.prototype;
    v2917.isArray = v1116;
    var v2918 = MemberName$$1.prototype;
    v2918.toString = v1117;
    MemberName$$1.memberNameToString = memberNameToString;
    MemberName$$1.create = create;
    return MemberName$$1;
  }
  function v1114(Primitive$$1) {
    Primitive$$1._map = [];
    Primitive$$1.None = 0;
    Primitive$$1.Void = 1;
    Primitive$$1.Double = 2;
    Primitive$$1.String = 4;
    Primitive$$1.Boolean = 8;
    Primitive$$1.Any = 16;
    Primitive$$1.Null = 32;
    Primitive$$1.Undefined = 64;
    return;
  }
  function getTypeLink(ast$$116, checker$$18, autoVar) {
    var result$$30 = new TypeLink;
    result$$30.ast = ast$$116;
    var v13120 = ast$$116 == null;
    if (v13120) {
      v13120 = autoVar;
    }
    var v2919 = v13120;
    if (v2919) {
      result$$30.type = checker$$18.anyType;
    } else {
      result$$30.type = null;
    }
    return result$$30;
  }
  var v13121 = TypeScript$$26.Primitive;
  var v19018 = !v13121;
  if (v19018) {
    v13121 = TypeScript$$26.Primitive = {};
  }
  var v2920 = v13121;
  v1114(v2920);
  var Primitive = TypeScript$$26.Primitive;
  var MemberName = v1118();
  TypeScript$$26.MemberName = MemberName;
  var MemberNameString = v1120(MemberName);
  TypeScript$$26.MemberNameString = MemberNameString;
  var MemberNameArray = v1124(MemberName);
  TypeScript$$26.MemberNameArray = MemberNameArray;
  var currentTypeID = -1;
  var Type = v1161();
  TypeScript$$26.Type = Type;
  var ModuleType = v1170(Type);
  TypeScript$$26.ModuleType = ModuleType;
  var TypeLink = v1171();
  TypeScript$$26.TypeLink = TypeLink;
  TypeScript$$26.getTypeLink = getTypeLink;
  return;
}
function v1113(TypeScript$$25) {
  function v1112() {
    function v1111(enclosingScopeContext$$2) {
      function preFindMemberScopeFullAstFuzy(ast$$115, parent$$69, walker$$53) {
        var v2923 = JAM.call(TypeScript$$25.isValidAstNode, TypeScript$$25, [ast$$115]);
        if (v2923) {
          var v19019 = ast$$115.flags;
          var v13122 = JAM.call(TypeScript$$25.hasFlag, TypeScript$$25, [v19019, matchFlag$$2], JAM.policy.p1);
          if (v13122) {
            var v22939 = ast$$115.minChar;
            var v19020 = v22939 < pos$$7;
            if (v19020) {
              var v22940 = ast$$115.limChar;
              v19020 = pos$$7 <= v22940;
            }
            v13122 = v19020;
          }
          var v2921 = v13122;
          if (v2921) {
            astResult = ast$$115;
          }
          var v2922 = walker$$53.options;
          var v19021 = ast$$115.minChar;
          var v13123 = v19021 <= pos$$7;
          if (v13123) {
            var v19022 = ast$$115.limChar;
            v13123 = pos$$7 <= v19022;
          }
          v2922.goChildren = v13123;
        }
        return ast$$115;
      }
      function preFindMemberScopeFullAst(ast$$114, parent$$68, walker$$52) {
        var v2927 = JAM.call(TypeScript$$25.isValidAstNode, TypeScript$$25, [ast$$114]);
        if (v2927) {
          var v19023 = ast$$114.flags;
          var v13124 = JAM.call(TypeScript$$25.hasFlag, TypeScript$$25, [v19023, matchFlag$$2], JAM.policy.p1);
          if (v13124) {
            var v22941 = ast$$114.limChar;
            var v19024 = pos$$7 == v22941;
            var v22944 = !v19024;
            if (v22944) {
              var v22942 = pos$$7 - 1;
              var v22943 = ast$$114.limChar;
              v19024 = v22942 == v22943;
            }
            v13124 = v19024;
          }
          var v2925 = v13124;
          if (v2925) {
            astResult = ast$$114;
            var v2924 = walker$$52.options;
            v2924.stopWalk();
          }
          var v2926 = walker$$52.options;
          var v19025 = ast$$114.minChar;
          var v13125 = v19025 <= pos$$7;
          if (v13125) {
            var v19026 = ast$$114.limChar;
            v13125 = pos$$7 <= v19026;
          }
          v2926.goChildren = v13125;
        }
        return ast$$114;
      }
      var v2928 = TypeScript$$25.ASTFlags;
      var matchFlag$$2 = v2928.DotLHS;
      var pos$$7 = enclosingScopeContext$$2.pos;
      var astResult = null;
      var v2929 = TypeScript$$25.getAstWalkerFactory();
      var v2930 = enclosingScopeContext$$2.script;
      JAM.call(v2929.walk, v2929, [v2930, preFindMemberScopeFullAst], JAM.policy.p1);
      var v2933 = astResult == null;
      if (v2933) {
        var v2931 = TypeScript$$25.getAstWalkerFactory();
        var v2932 = enclosingScopeContext$$2.script;
        JAM.call(v2931.walk, v2931, [v2932, preFindMemberScopeFullAstFuzy], JAM.policy.p1);
      }
      var v19027 = astResult;
      if (v19027) {
        v19027 = enclosingScopeContext$$2.enclosingClassDecl;
      }
      var v13126 = v19027;
      if (v13126) {
        var v19028 = astResult.type;
        var v24867 = enclosingScopeContext$$2.enclosingClassDecl;
        var v22945 = v24867.type;
        var v19029 = v22945.instanceType;
        v13126 = v19028 == v19029;
      }
      var v2934 = v13126;
      if (v2934) {
        enclosingScopeContext$$2.publicsOnly = false;
      }
      var v13127 = astResult;
      if (v13127) {
        v13127 = astResult.type;
      }
      var v2936 = v13127;
      if (v2936) {
        var v2935 = astResult.type;
        return JAM.call(v2935.getMemberScope, v2935, [this]);
      } else {
        return null;
      }
      return;
    }
    function v1110(enclosingScopeContext$$1) {
      var v13128 = TypeScript$$25.ASTFlags;
      var v2937 = v13128.DotLHS;
      return JAM.call(this.findMemberScope, this, [enclosingScopeContext$$1, v2937], JAM.policy.p1);
    }
    function v1109(enclosingScopeContext, matchFlag$$1) {
      var enclosingScope$$1 = enclosingScopeContext.getScope();
      var v2938 = enclosingScopeContext.pos;
      var v13129 = enclosingScopeContext.scopeStartAST;
      var v2939 = v13129.minChar;
      var pos$$6 = v2938 - v2939;
      var scriptFragment = enclosingScopeContext.getScriptFragment();
      var v2940 = TypeScript$$25.MemberScopeContext;
      var memContext = JAM.new(v2940, [this, pos$$6, matchFlag$$1]);
      memContext.scope = enclosingScope$$1;
      var v13130 = scriptFragment.nodeType;
      var v19030 = TypeScript$$25.NodeType;
      var v13131 = v19030.Name;
      var v2947 = v13130 == v13131;
      if (v2947) {
        var v2941 = scriptFragment.type;
        return JAM.call(v2941.getMemberScope, v2941, [this]);
      } else {
        var v2942 = TypeScript$$25.getAstWalkerFactory();
        var v2943 = TypeScript$$25.preFindMemberScope;
        JAM.call(v2942.walk, v2942, [scriptFragment, v2943, null, null, memContext], JAM.policy.p1);
        var v19031 = memContext.ast;
        if (v19031) {
          v19031 = enclosingScopeContext.enclosingClassDecl;
        }
        var v13132 = v19031;
        if (v13132) {
          var v22946 = memContext.ast;
          var v19032 = v22946.type;
          var v24868 = enclosingScopeContext.enclosingClassDecl;
          var v22947 = v24868.type;
          var v19033 = v22947.instanceType;
          v13132 = v19032 == v19033;
        }
        var v2944 = v13132;
        if (v2944) {
          enclosingScopeContext.publicsOnly = false;
        }
        var v2946 = memContext.type;
        if (v2946) {
          var v2945 = memContext.type;
          return JAM.call(v2945.getMemberScope, v2945, [this]);
        } else {
          return null;
        }
      }
      return;
    }
    function v1108(ast$$113) {
      var script$$17 = ast$$113;
      var v2948 = this.checker;
      v2948.locationInfo = script$$17.locationInfo;
      var v13133 = this.checker;
      var v2949 = v13133.gloMod;
      var v2950 = this.globalScope;
      var globalChain$$1 = JAM.new(ScopeChain, [v2949, null, v2950]);
      var v2951 = TypeScript$$25.AssignScopeContext;
      var v19034 = this.checker;
      var v13134 = v19034.currentModDecl;
      var v2952 = [v13134];
      var context$$64 = JAM.new(v2951, [globalChain$$1, this, v2952]);
      var v2953 = TypeScript$$25.getAstWalkerFactory();
      var v2954 = TypeScript$$25.preAssignScopes;
      var v2955 = TypeScript$$25.postAssignScopes;
      JAM.call(v2953.walk, v2953, [ast$$113, v2954, v2955, null, context$$64], JAM.policy.p1);
      return;
    }
    function v1107(ast$$112) {
      var callEx$$5 = ast$$112;
      var v22948 = this.checker;
      var v19035 = v22948.styleSettings;
      var v13135 = v19035.newMustBeUsed;
      if (v13135) {
        var v19036 = ast$$112.nodeType;
        var v22949 = TypeScript$$25.NodeType;
        var v19037 = v22949.New;
        v13135 = v19036 == v19037;
      }
      var v2961 = v13135;
      if (v2961) {
        var v13136 = ast$$112.flags;
        var v19038 = TypeScript$$25.ASTFlags;
        var v13137 = v19038.IsStatement;
        var v2957 = JAM.call(TypeScript$$25.hasFlag, TypeScript$$25, [v13136, v13137], JAM.policy.p1);
        if (v2957) {
          var v13138 = this.checker;
          var v2956 = v13138.errorReporter;
          JAM.call(v2956.styleError, v2956, [ast$$112, "use of new expression as a statement"], JAM.policy.p1);
        }
      } else {
        var v24869 = this.checker;
        var v22950 = v24869.styleSettings;
        var v19039 = v22950.evalOK;
        var v13139 = !v19039;
        if (v13139) {
          var v19040 = ast$$112.nodeType;
          var v22951 = TypeScript$$25.NodeType;
          var v19041 = v22951.Call;
          v13139 = v19040 == v19041;
        }
        var v2960 = v13139;
        if (v2960) {
          var v22952 = callEx$$5.target;
          var v19042 = v22952.nodeType;
          var v22953 = TypeScript$$25.NodeType;
          var v19043 = v22953.Name;
          var v13140 = v19042 == v19043;
          if (v13140) {
            var v22954 = callEx$$5.target;
            var v19044 = v22954.text;
            v13140 = v19044 == "eval";
          }
          var v2959 = v13140;
          if (v2959) {
            var v13141 = this.checker;
            var v2958 = v13141.errorReporter;
            JAM.call(v2958.styleError, v2958, [callEx$$5, "eval not permitted"], JAM.policy.p1);
          }
        }
      }
      var v19045 = callEx$$5.target;
      var v13142 = v19045.nodeType;
      var v19046 = TypeScript$$25.NodeType;
      var v13143 = v19046.FuncDecl;
      var v2963 = v13142 == v13143;
      if (v2963) {
        var v2962 = callEx$$5.target;
        v2962.isInlineCallLiteral = true;
      }
      var prevInSuperCall = this.inSuperCall;
      var v19047 = callEx$$5.target;
      var v13144 = v19047.nodeType;
      var v19048 = TypeScript$$25.NodeType;
      var v13145 = v19048.Super;
      var v2964 = v13144 == v13145;
      if (v2964) {
        this.inSuperCall = true;
      }
      var v2965 = callEx$$5.target;
      var v26474 = JAM.call(this.typeCheck, this, [v2965]);
      callEx$$5.target = v26474;
      var v2966 = callEx$$5.arguments;
      JAM.call(this.preTypeCheckCallArgs, this, [v2966]);
      var target$$37 = callEx$$5.target;
      var v22955 = target$$37.type;
      var v19049 = v22955 == null;
      var v22958 = !v19049;
      if (v22958) {
        var v22956 = target$$37.type;
        var v22957 = this.anyType;
        v19049 = v22956 == v22957;
      }
      var v13146 = v19049;
      var v19051 = !v13146;
      if (v19051) {
        var v19050 = this.functionInterfaceType;
        if (v19050) {
          var v22959 = target$$37.type;
          var v22960 = this.functionInterfaceType;
          v19050 = v22959 == v22960;
        }
        v13146 = v19050;
      }
      var v2978 = v13146;
      if (v2978) {
        callEx$$5.type = this.anyType;
      } else {
        var fnType$$1 = target$$37.type;
        var v2977 = fnType$$1.call;
        if (v2977) {
          var v2967 = fnType$$1.call;
          var signature$$14 = JAM.call(this.resolveOverload, this, [callEx$$5, v2967], JAM.policy.p1);
          var v2969 = signature$$14 == null;
          if (v2969) {
            callEx$$5.type = this.anyType;
          } else {
            var v2968 = signature$$14.returnType;
            callEx$$5.type = v2968.type;
            callEx$$5.signature = signature$$14;
          }
        } else {
          var v25712 = callEx$$5.target;
          var v24870 = v25712.nodeType;
          var v25713 = TypeScript$$25.NodeType;
          var v24871 = v25713.Super;
          var v22961 = v24870 == v24871;
          if (v22961) {
            v22961 = this.thisFnc;
          }
          var v19052 = v22961;
          if (v19052) {
            var v22962 = this.thisFnc;
            v19052 = v22962.isConstructor;
          }
          var v13147 = v19052;
          if (v13147) {
            var v22963 = this.thisFnc;
            var v19053 = v22963.fncFlags;
            var v22964 = TypeScript$$25.FncFlags;
            var v19054 = v22964.ClassMethod;
            v13147 = JAM.call(TypeScript$$25.hasFlag, TypeScript$$25, [v19053, v19054], JAM.policy.p1);
          }
          var v2976 = v13147;
          if (v2976) {
            var v2970;
            var v22965 = fnType$$1.symbol;
            var v19055 = v22965.type;
            var v13149 = v19055.construct;
            if (v13149) {
              var v22966 = fnType$$1.symbol;
              var v19056 = v22966.type;
              var v13148 = v19056.construct;
              v2970 = JAM.call(this.resolveOverload, this, [callEx$$5, v13148], JAM.policy.p1);
            } else {
              v2970 = null;
            }
            signature$$14 = v2970;
            var v2972 = signature$$14 == null;
            if (v2972) {
              callEx$$5.type = this.anyType;
            } else {
              var v13150 = callEx$$5.flags;
              var v19057 = TypeScript$$25.ASTFlags;
              var v13151 = v19057.ClassBaseConstructorCall;
              callEx$$5.flags = v13150 | v13151;
              var v2971 = signature$$14.returnType;
              callEx$$5.type = v2971.type;
              callEx$$5.signature = signature$$14;
            }
          } else {
            callEx$$5.type = this.anyType;
            var v13152 = this.checker;
            var v2973 = v13152.errorReporter;
            var v2974 = callEx$$5.nodeType;
            var v2975 = this.scope;
            JAM.call(v2973.invalidCall, v2973, [callEx$$5, v2974, v2975], JAM.policy.p1);
          }
        }
      }
      JAM.call(this.postTypeCheckCallArgs, this, [callEx$$5]);
      this.inSuperCall = prevInSuperCall;
      return callEx$$5;
    }
    function v1106(callEx$$4) {
      var acceptedTargetType = false;
      var i$$112 = 0;
      var v22967 = callEx$$4.target;
      if (v22967) {
        var v24872 = callEx$$4.target;
        v22967 = v24872.type;
      }
      var v19058 = v22967;
      if (v19058) {
        v19058 = callEx$$4.signature;
      }
      var v13153 = v19058;
      if (v13153) {
        v13153 = callEx$$4.arguments;
      }
      var v2998 = v13153;
      if (v2998) {
        var sig$$4 = callEx$$4.signature;
        var v13154 = sig$$4;
        if (v13154) {
          var v24873 = callEx$$4.arguments;
          var v22968 = v24873.members;
          var v19059 = v22968.length;
          var v19060 = sig$$4.nonOptionalParameterCount;
          v13154 = v19059 >= v19060;
        }
        var v2997 = v13154;
        if (v2997) {
          acceptedTargetType = true;
          var targetType$$8 = null;
          var v2979;
          var v13157 = sig$$4.hasVariableArgList;
          if (v13157) {
            var v19061 = sig$$4.parameters;
            var v13155 = v19061.length;
            v2979 = v13155 - 1;
          } else {
            var v13156 = sig$$4.parameters;
            v2979 = v13156.length;
          }
          var nonVarArgFormalParamLength = v2979;
          var v2980;
          var v24874 = callEx$$4.arguments;
          var v22969 = v24874.members;
          var v19062 = v22969.length;
          var v13159 = v19062 < nonVarArgFormalParamLength;
          if (v13159) {
            var v19063 = callEx$$4.arguments;
            var v13158 = v19063.members;
            v2980 = v13158.length;
          } else {
            v2980 = nonVarArgFormalParamLength;
          }
          var nonVarArgActualParamLength = v2980;
          i$$112 = 0;
          var v2987 = i$$112 < nonVarArgActualParamLength;
          for (;v2987;) {
            var v13160 = sig$$4.parameters;
            var v2981 = v13160[i$$112];
            targetType$$8 = v2981.getType();
            var v22970 = callEx$$4.arguments;
            var v19064 = v22970.members;
            var v13161 = v19064[i$$112];
            var v2986 = v13161.nodeType;
            switch(v2986) {
              case TypeScript$$25.NodeType.FuncDecl:
              ;
              case TypeScript$$25.NodeType.ObjectLit:
              ;
              case TypeScript$$25.NodeType.ArrayLit:
                var v2982 = this.checker;
                var v13162 = this.checker;
                var v2983 = v13162.inProvisionalTypecheckMode();
                var v24875 = sig$$4.parameters;
                var v22971 = v24875[i$$112];
                var v19065 = v22971.declAST;
                var v13163 = v19065.isParenthesized;
                var v2984 = !v13163;
                var v19066 = callEx$$4.arguments;
                var v13164 = v19066.members;
                var v2985 = v13164[i$$112];
                JAM.call(v2982.typeCheckWithContextualType, v2982, [targetType$$8, v2983, v2984, v2985], JAM.policy.p1);
            }
            i$$112++;
            v2987 = i$$112 < nonVarArgActualParamLength;
          }
          var v2996 = sig$$4.hasVariableArgList;
          if (v2996) {
            var v2988 = sig$$4.nonOptionalParameterCount;
            var varArgParamIndex = v2988 - 1;
            var v13165 = sig$$4.parameters;
            var v2989 = v13165[varArgParamIndex];
            targetType$$8 = v2989.getType();
            if (targetType$$8) {
              targetType$$8 = targetType$$8.elementType;
            }
            var v22972 = sig$$4.parameters;
            var v19067 = v22972[varArgParamIndex];
            var v13166 = v19067.declAST;
            var v2990 = v13166.isParenthesized;
            var isParenthesized = !v2990;
            i$$112 = nonVarArgActualParamLength;
            var v22973 = callEx$$4.arguments;
            var v19068 = v22973.members;
            var v13167 = v19068.length;
            var v2995 = i$$112 < v13167;
            for (;v2995;) {
              var v22974 = callEx$$4.arguments;
              var v19069 = v22974.members;
              var v13168 = v19069[i$$112];
              var v2994 = v13168.nodeType;
              switch(v2994) {
                case TypeScript$$25.NodeType.FuncDecl:
                ;
                case TypeScript$$25.NodeType.ObjectLit:
                ;
                case TypeScript$$25.NodeType.ArrayLit:
                  var v2991 = this.checker;
                  var v13169 = this.checker;
                  var v2992 = v13169.inProvisionalTypecheckMode();
                  var v19070 = callEx$$4.arguments;
                  var v13170 = v19070.members;
                  var v2993 = v13170[i$$112];
                  JAM.call(v2991.typeCheckWithContextualType, v2991, [targetType$$8, v2992, isParenthesized, v2993], JAM.policy.p1);
              }
              i$$112++;
              var v22975 = callEx$$4.arguments;
              var v19071 = v22975.members;
              var v13171 = v19071.length;
              v2995 = i$$112 < v13171;
            }
          }
        }
      }
      var v13172 = !acceptedTargetType;
      if (v13172) {
        v13172 = callEx$$4.arguments;
      }
      var v3003 = v13172;
      if (v3003) {
        var v2999 = this.checker;
        v2999.killCurrentContextualType();
        i$$112 = 0;
        var v22976 = callEx$$4.arguments;
        var v19072 = v22976.members;
        var v13173 = v19072.length;
        var v3002 = i$$112 < v13173;
        for (;v3002;) {
          var v22977 = callEx$$4.arguments;
          var v19073 = v22977.members;
          var v13174 = v19073[i$$112];
          var v3001 = v13174.nodeType;
          switch(v3001) {
            case TypeScript$$25.NodeType.FuncDecl:
            ;
            case TypeScript$$25.NodeType.ObjectLit:
            ;
            case TypeScript$$25.NodeType.ArrayLit:
              var v19074 = callEx$$4.arguments;
              var v13175 = v19074.members;
              var v3000 = v13175[i$$112];
              JAM.call(this.typeCheck, this, [v3000]);
            default:
            ;
          }
          i$$112++;
          var v22978 = callEx$$4.arguments;
          var v19075 = v22978.members;
          var v13176 = v19075.length;
          v3002 = i$$112 < v13176;
        }
      }
      return;
    }
    function v1105(args$$16) {
      var v3004 = !args$$16;
      if (v3004) {
        return;
      }
      var i$$111 = 0;
      var v19076 = args$$16.members;
      var v13177 = v19076.length;
      var v3007 = i$$111 < v13177;
      for (;v3007;) {
        var v19077 = args$$16.members;
        var v13178 = v19077[i$$111];
        var v3006 = v13178.nodeType;
        switch(v3006) {
          case TypeScript$$25.NodeType.FuncDecl:
          ;
          case TypeScript$$25.NodeType.ObjectLit:
          ;
          case TypeScript$$25.NodeType.ArrayLit:
            i$$111++;
            var v19078 = args$$16.members;
            var v13179 = v19078.length;
            v3007 = i$$111 < v13179;
            continue;
          default:
            var v13180 = args$$16.members;
            var v3005 = v13180[i$$111];
            JAM.call(this.typeCheck, this, [v3005]);
        }
        i$$111++;
        var v19079 = args$$16.members;
        var v13181 = v19079.length;
        v3007 = i$$111 < v13181;
      }
      return;
    }
    function v1104(ast$$111) {
      var callEx$$3 = ast$$111;
      var v3008 = callEx$$3.target;
      var v26475 = JAM.call(this.typeCheck, this, [v3008]);
      callEx$$3.target = v26475;
      var target$$36 = callEx$$3.target;
      var v19080 = target$$36.type;
      var v13182 = v19080.construct;
      var v19082 = !v13182;
      if (v19082) {
        var v19081 = target$$36.type;
        v13182 = v19081.call;
      }
      var v3011 = v13182;
      if (v3011) {
        var v3009 = callEx$$3.arguments;
        JAM.call(this.preTypeCheckCallArgs, this, [v3009]);
      } else {
        var v3010 = callEx$$3.arguments;
        var v26476 = JAM.call(this.typeCheck, this, [v3010]);
        callEx$$3.arguments = v26476;
      }
      var v13183 = target$$36.type;
      var v13184 = this.anyType;
      var v3028 = v13183 == v13184;
      if (v3028) {
        callEx$$3.type = this.anyType;
        var v3012 = callEx$$3.arguments;
        var v26477 = JAM.call(this.typeCheck, this, [v3012]);
        callEx$$3.arguments = v26477;
      } else {
        var v13185 = target$$36.type;
        var v3027 = v13185.construct;
        if (v3027) {
          var v13186 = target$$36.type;
          var v3013 = v13186.construct;
          var signature$$13 = JAM.call(this.resolveOverload, this, [callEx$$3, v3013], JAM.policy.p1);
          var v3016 = signature$$13 == null;
          if (v3016) {
            callEx$$3.type = this.anyType;
          } else {
            var v19083 = signature$$13.returnType;
            var v13187 = v19083.type;
            var v13188 = this.voidType;
            var v3015 = v13187 == v13188;
            if (v3015) {
              callEx$$3.type = this.anyType;
              callEx$$3.signature = signature$$13;
            } else {
              var v3014 = signature$$13.returnType;
              callEx$$3.type = v3014.type;
              callEx$$3.signature = signature$$13;
            }
          }
        } else {
          var v13189 = target$$36.type;
          var v3026 = v13189.call;
          if (v3026) {
            var v13190 = target$$36.type;
            var v3017 = v13190.call;
            signature$$13 = JAM.call(this.resolveOverload, this, [callEx$$3, v3017], JAM.policy.p1);
            var v3021 = signature$$13 == null;
            if (v3021) {
              callEx$$3.type = this.anyType;
            } else {
              var v22979 = signature$$13.returnType;
              var v19084 = v22979.type;
              var v19085 = this.voidType;
              var v13191 = v19084 == v19085;
              var v19088 = !v13191;
              if (v19088) {
                var v22980 = signature$$13.returnType;
                var v19086 = v22980.type;
                var v19087 = this.anyType;
                v13191 = v19086 == v19087;
              }
              var v3020 = v13191;
              if (v3020) {
                callEx$$3.type = this.anyType;
                callEx$$3.signature = signature$$13;
              } else {
                var v13192 = this.checker;
                var v3018 = v13192.errorReporter;
                var v3019 = callEx$$3.target;
                JAM.call(v3018.simpleError, v3018, [v3019, "new expression only valid on constructors"], JAM.policy.p1);
              }
            }
          } else {
            var v13193 = target$$36.type;
            var v3025 = v13193.elementType;
            if (v3025) {
              callEx$$3.type = target$$36.type;
            } else {
              var v13194 = this.checker;
              var v3022 = v13194.errorReporter;
              var v3023 = callEx$$3.nodeType;
              var v3024 = this.scope;
              JAM.call(v3022.invalidCall, v3022, [callEx$$3, v3023, v3024], JAM.policy.p1);
              callEx$$3.type = this.anyType;
            }
          }
        }
      }
      JAM.call(this.postTypeCheckCallArgs, this, [callEx$$3]);
      return callEx$$3;
    }
    function v1103(application, group$$1) {
      var v3029 = this.resolutionDataCache;
      var rd$$2 = v3029.getResolutionData();
      var actuals$$1 = rd$$2.actuals;
      var exactCandidates$$1 = rd$$2.exactCandidates;
      var conversionCandidates$$1 = rd$$2.conversionCandidates;
      var candidate = null;
      var v13195 = group$$1.signatures;
      var v3030 = v13195.length;
      var hasOverloads = v3030 > 1;
      var v3031 = TypeScript$$25.TypeComparisonInfo;
      var comparisonInfo$$16 = new v3031;
      var args$$15 = null;
      var target$$35 = null;
      var v19089 = application.nodeType;
      var v22981 = TypeScript$$25.NodeType;
      var v19090 = v22981.Call;
      var v13196 = v19089 == v19090;
      var v19093 = !v13196;
      if (v19093) {
        var v19091 = application.nodeType;
        var v22982 = TypeScript$$25.NodeType;
        var v19092 = v22982.New;
        v13196 = v19091 == v19092;
      }
      var v3040 = v13196;
      if (v3040) {
        var callEx$$2 = application;
        args$$15 = callEx$$2.arguments;
        target$$35 = callEx$$2.target;
        var v3035 = callEx$$2.arguments;
        if (v3035) {
          var v13197 = callEx$$2.arguments;
          var v3032 = v13197.members;
          var len$$54 = v3032.length;
          var i$$110 = 0;
          var v3034 = i$$110 < len$$54;
          for (;v3034;) {
            var v19094 = callEx$$2.arguments;
            var v13198 = v19094.members;
            var v3033 = v13198[i$$110];
            actuals$$1[i$$110] = v3033.type;
            i$$110++;
            v3034 = i$$110 < len$$54;
          }
        }
      } else {
        var v13199 = application.nodeType;
        var v19095 = TypeScript$$25.NodeType;
        var v13200 = v19095.Index;
        var v3039 = v13199 == v13200;
        if (v3039) {
          var binExp = application;
          target$$35 = binExp.operand1;
          var v3036 = TypeScript$$25.ASTList;
          args$$15 = new v3036;
          var v3037 = args$$15.members;
          v3037[0] = binExp.operand2;
          var v3038 = binExp.operand2;
          actuals$$1[0] = v3038.type;
        }
      }
      var j$$17 = 0;
      var v3041 = group$$1.signatures;
      var groupLen = v3041.length;
      var v3046 = j$$17 < groupLen;
      for (;v3046;) {
        var v3042 = group$$1.signatures;
        var signature$$12 = v3042[j$$17];
        var v19096 = hasOverloads;
        if (v19096) {
          var v22983 = group$$1.definitionSignature;
          v19096 = signature$$12 == v22983;
        }
        var v13201 = v19096;
        if (v13201) {
          var v22984 = this.checker;
          var v19097 = v22984.canCallDefinitionSignature;
          v13201 = !v19097;
        }
        var v3043 = v13201;
        if (v3043) {
          j$$17++;
          v3046 = j$$17 < groupLen;
          continue;
        }
        var v24876 = signature$$12.returnType;
        var v22985 = v24876.type;
        var v19098 = !v22985;
        if (v19098) {
          v19098 = signature$$12.declAST;
        }
        var v13202 = v19098;
        if (v13202) {
          var v19099 = signature$$12.typeCheckStatus;
          var v22986 = TypeScript$$25.TypeCheckStatus;
          var v19100 = v22986.Finished;
          v13202 = v19099 != v19100;
        }
        var v3045 = v13202;
        if (v3045) {
          var v3044 = signature$$12.declAST;
          JAM.call(this.typeCheckFunction, this, [v3044]);
        }
        JAM.call(this.tryAddCandidates, this, [signature$$12, actuals$$1, exactCandidates$$1, conversionCandidates$$1, comparisonInfo$$16], JAM.policy.p1);
        j$$17++;
        v3046 = j$$17 < groupLen;
      }
      var v13203 = exactCandidates$$1.length;
      var v3062 = v13203 == 0;
      if (v3062) {
        var v3047 = this.checker;
        var applicableCandidates = JAM.call(v3047.getApplicableSignatures, v3047, [conversionCandidates$$1, args$$15, comparisonInfo$$16], JAM.policy.p1);
        var v13204 = applicableCandidates.length;
        var v3055 = v13204 > 0;
        if (v3055) {
          var v3048 = this.checker;
          var candidateInfo = JAM.call(v3048.findMostApplicableSignature, v3048, [applicableCandidates, args$$15], JAM.policy.p1);
          var v3050 = candidateInfo.ambiguous;
          if (v3050) {
            var v13205 = this.checker;
            var v3049 = v13205.errorReporter;
            JAM.call(v3049.simpleError, v3049, [target$$35, "Ambiguous call expression - could not choose overload"], JAM.policy.p1);
          }
          candidate = candidateInfo.sig;
        } else {
          var emsg$$3 = "Supplied parameters do not match any signature of call target";
          var v3054 = comparisonInfo$$16.message;
          if (v3054) {
            var v13206 = this.checker;
            var v3051 = v13206.errorReporter;
            var v13207 = emsg$$3 + ":\n\t";
            var v13208 = comparisonInfo$$16.message;
            var v3052 = v13207 + v13208;
            JAM.call(v3051.simpleError, v3051, [target$$35, v3052], JAM.policy.p1);
          } else {
            var v13209 = this.checker;
            var v3053 = v13209.errorReporter;
            JAM.call(v3053.simpleError, v3053, [target$$35, emsg$$3], JAM.policy.p1);
          }
        }
      } else {
        var v13210 = exactCandidates$$1.length;
        var v3061 = v13210 > 1;
        if (v3061) {
          var applicableSigs$$1 = [];
          i$$110 = 0;
          var v13211 = exactCandidates$$1.length;
          var v3057 = i$$110 < v13211;
          for (;v3057;) {
            var v3056 = exactCandidates$$1[i$$110];
            applicableSigs$$1[i$$110] = {signature:v3056, hadProvisionalErrors:false};
            i$$110++;
            var v13212 = exactCandidates$$1.length;
            v3057 = i$$110 < v13212;
          }
          var v3058 = this.checker;
          candidateInfo = JAM.call(v3058.findMostApplicableSignature, v3058, [applicableSigs$$1, args$$15], JAM.policy.p1);
          var v3060 = candidateInfo.ambiguous;
          if (v3060) {
            var v13213 = this.checker;
            var v3059 = v13213.errorReporter;
            JAM.call(v3059.simpleError, v3059, [target$$35, "Ambiguous call expression - could not choose overload"], JAM.policy.p1);
          }
          candidate = candidateInfo.sig;
        } else {
          candidate = exactCandidates$$1[0];
        }
      }
      var v3063 = this.resolutionDataCache;
      JAM.call(v3063.returnResolutionData, v3063, [rd$$2]);
      return candidate;
    }
    function v1102(signature$$11, actuals, exactCandidates, conversionCandidates, comparisonInfo$$15) {
      var lowerBound = signature$$11.nonOptionalParameterCount;
      var v3064 = signature$$11.parameters;
      var upperBound = v3064.length;
      var formalLen = lowerBound;
      var acceptable = false;
      var v19101 = actuals.length;
      var v13214 = v19101 >= lowerBound;
      if (v13214) {
        var v19102 = signature$$11.hasVariableArgList;
        var v22988 = !v19102;
        if (v22988) {
          var v22987 = actuals.length;
          v19102 = v22987 <= upperBound;
        }
        v13214 = v19102;
      }
      var v3066 = v13214;
      if (v3066) {
        var v3065;
        var v13216 = signature$$11.hasVariableArgList;
        if (v13216) {
          var v13215 = signature$$11.parameters;
          v3065 = v13215.length;
        } else {
          v3065 = actuals.length;
        }
        formalLen = v3065;
        acceptable = true;
      }
      var repeatType = null;
      var v13217 = acceptable;
      var v19103 = !v13217;
      if (v19103) {
        v13217 = signature$$11.hasVariableArgList;
      }
      var v3079 = v13217;
      if (v3079) {
        var v3069 = signature$$11.hasVariableArgList;
        if (v3069) {
          formalLen = formalLen - 1;
          var v22989 = signature$$11.parameters;
          var v19104 = v22989[formalLen];
          var v13218 = v19104.parameter;
          var v3067 = v13218.typeLink;
          repeatType = v3067.type;
          repeatType = repeatType.elementType;
          var v3068 = actuals.length;
          acceptable = v3068 >= formalLen;
        }
        var len$$53 = actuals.length;
        var exact = acceptable;
        var convert = acceptable;
        var i$$109 = 0;
        var v3075 = i$$109 < len$$53;
        for (;v3075;) {
          var typeA;
          var v3071 = i$$109 < formalLen;
          if (v3071) {
            var v22990 = signature$$11.parameters;
            var v19105 = v22990[i$$109];
            var v13219 = v19105.parameter;
            var v3070 = v13219.typeLink;
            typeA = v3070.type;
          } else {
            typeA = repeatType;
          }
          var typeB = actuals[i$$109];
          var v19106 = !typeA;
          var v22991 = !v19106;
          if (v22991) {
            v19106 = !typeB;
          }
          var v13220 = v19106;
          var v19108 = !v13220;
          if (v19108) {
            var v22992 = this.checker;
            var v19107 = JAM.call(v22992.typesAreIdentical, v22992, [typeA, typeB], JAM.policy.p1);
            v13220 = !v19107;
          }
          var v3072 = v13220;
          if (v3072) {
            exact = false;
          }
          var v19109 = this.checker;
          var v13221 = JAM.call(v19109.sourceIsAssignableToTarget, v19109, [typeB, typeA, comparisonInfo$$15], JAM.policy.p1);
          var v3073 = !v13221;
          if (v3073) {
            convert = false;
          }
          var v13222 = exact || convert;
          var v3074 = !v13222;
          if (v3074) {
            break;
          }
          i$$109++;
          v3075 = i$$109 < len$$53;
        }
        if (exact) {
          var v3076 = exactCandidates.length;
          JAM.set(exactCandidates, v3076, signature$$11);
        } else {
          var v13223 = convert;
          if (v13223) {
            var v19110 = exactCandidates.length;
            v13223 = v19110 == 0;
          }
          var v3078 = v13223;
          if (v3078) {
            var v3077 = conversionCandidates.length;
            JAM.set(conversionCandidates, v3077, signature$$11);
          }
        }
      }
      return;
    }
    function v1101(binex$$13) {
      var v3080 = binex$$13.operand1;
      var v26478 = JAM.call(this.typeCheck, this, [v3080]);
      binex$$13.operand1 = v26478;
      var v3081 = binex$$13.operand2;
      var v26479 = JAM.call(this.typeCheck, this, [v3081]);
      binex$$13.operand2 = v26479;
      var v3082 = binex$$13.operand2;
      binex$$13.type = v3082.type;
      return binex$$13;
    }
    function v1100(binex$$12) {
      var v3083 = binex$$12.operand1;
      var v26480 = JAM.call(this.typeCheck, this, [v3083]);
      binex$$12.operand1 = v26480;
      var v3084 = binex$$12.operand2;
      var v26481 = JAM.call(this.typeCheck, this, [v3084]);
      binex$$12.operand2 = v26481;
      var v3085 = binex$$12.operand1;
      var leftType$$6 = v3085.type;
      var v3086 = binex$$12.operand2;
      var rightType$$5 = v3086.type;
      var v22993 = this.checker;
      var v19111 = v22993.anyType;
      var v13224 = leftType$$6 == v19111;
      var v19113 = !v13224;
      if (v19113) {
        var v22994 = this.checker;
        var v19112 = v22994.anyType;
        v13224 = rightType$$5 == v19112;
      }
      var v3103 = v13224;
      if (v3103) {
        var v3087 = this.checker;
        binex$$12.type = v3087.anyType;
      } else {
        var v19114 = this.checker;
        var v13225 = v19114.booleanType;
        var v3102 = leftType$$6 == v13225;
        if (v3102) {
          var v19115 = this.checker;
          var v13226 = v19115.booleanType;
          var v3090 = rightType$$5 == v13226;
          if (v3090) {
            var v3088 = this.checker;
            binex$$12.type = v3088.booleanType;
          } else {
            var v3089 = this.checker;
            binex$$12.type = v3089.anyType;
          }
        } else {
          var v19116 = this.checker;
          var v13227 = v19116.numberType;
          var v3101 = leftType$$6 == v13227;
          if (v3101) {
            var v19117 = this.checker;
            var v13228 = v19117.numberType;
            var v3093 = rightType$$5 == v13228;
            if (v3093) {
              var v3091 = this.checker;
              binex$$12.type = v3091.numberType;
            } else {
              var v3092 = this.checker;
              binex$$12.type = v3092.anyType;
            }
          } else {
            var v19118 = this.checker;
            var v13229 = v19118.stringType;
            var v3100 = leftType$$6 == v13229;
            if (v3100) {
              var v19119 = this.checker;
              var v13230 = v19119.stringType;
              var v3096 = rightType$$5 == v13230;
              if (v3096) {
                var v3094 = this.checker;
                binex$$12.type = v3094.stringType;
              } else {
                var v3095 = this.checker;
                binex$$12.type = v3095.anyType;
              }
            } else {
              var v13231 = this.checker;
              var v3099 = JAM.call(v13231.sourceIsSubtypeOfTarget, v13231, [leftType$$6, rightType$$5], JAM.policy.p1);
              if (v3099) {
                binex$$12.type = rightType$$5;
              } else {
                var v13232 = this.checker;
                var v3098 = JAM.call(v13232.sourceIsSubtypeOfTarget, v13232, [rightType$$5, leftType$$6], JAM.policy.p1);
                if (v3098) {
                  binex$$12.type = leftType$$6;
                } else {
                  var v3097 = this.checker;
                  binex$$12.type = v3097.anyType;
                }
              }
            }
          }
        }
      }
      return binex$$12;
    }
    function v1099(ast$$110) {
      var binex$$11 = ast$$110;
      var v3104 = binex$$11.operand1;
      var v26482 = JAM.call(this.typeCheck, this, [v3104]);
      binex$$11.operand1 = v26482;
      var v3105 = binex$$11.operand2;
      var v26483 = JAM.call(this.typeCheck, this, [v3105]);
      binex$$11.operand2 = v26483;
      var v3106 = binex$$11.operand2;
      binex$$11.type = v3106.type;
      return binex$$11;
    }
    function v1098(ast$$109) {
      var binex$$10 = ast$$109;
      var v3107 = binex$$10.operand1;
      var v26484 = JAM.call(this.typeCheck, this, [v3107]);
      binex$$10.operand1 = v26484;
      var v3108 = binex$$10.operand2;
      var v26485 = JAM.call(this.typeCheck, this, [v3108]);
      binex$$10.operand2 = v26485;
      var v25714 = binex$$10.operand1;
      var v24877 = v25714.type;
      var v25715 = this.checker;
      var v24878 = v25715.anyType;
      var v22995 = v24877 == v24878;
      var v24882 = !v22995;
      if (v24882) {
        var v24879 = this.checker;
        var v25716 = binex$$10.operand1;
        var v24880 = v25716.type;
        var v24881 = this.objectInterfaceType;
        v22995 = JAM.call(v24879.sourceIsSubtypeOfTarget, v24879, [v24880, v24881], JAM.policy.p1);
      }
      var v19120 = v22995;
      if (v19120) {
        var v25717 = binex$$10.operand2;
        var v24883 = v25717.type;
        var v24884 = this.anyType;
        var v22996 = v24883 == v24884;
        var v24888 = !v22996;
        if (v24888) {
          var v24885 = this.checker;
          var v25718 = binex$$10.operand2;
          var v24886 = v25718.type;
          var v24887 = this.functionInterfaceType;
          v22996 = JAM.call(v24885.sourceIsSubtypeOfTarget, v24885, [v24886, v24887], JAM.policy.p1);
        }
        v19120 = v22996;
      }
      var v13233 = v19120;
      var v3110 = !v13233;
      if (v3110) {
        var v13234 = this.checker;
        var v3109 = v13234.errorReporter;
        JAM.call(v3109.simpleError, v3109, [ast$$109, "The instanceof operator requires the left operand to be of type Any or an object type, and the right operand to be of type Any or a subtype of the Function interface type"], JAM.policy.p1);
      }
      binex$$10.type = this.booleanType;
      return binex$$10;
    }
    function v1097(returnStmt$$1) {
      var v3136 = this.thisFnc;
      if (v3136) {
        var targetType$$7 = null;
        var v13235 = this.checker;
        var v3115 = v13235.hasTargetType();
        if (v3115) {
          var v3111 = this.checker;
          var tcContext = v3111.currentContextualTypeContext;
          var accessorType$$1 = tcContext.targetAccessorType;
          if (accessorType$$1) {
            targetType$$7 = accessorType$$1;
          } else {
            var v13236 = this.checker;
            var v3112 = v13236.currentContextualTypeContext;
            var targetSig$$1 = v3112.targetSig;
            var v13237 = targetSig$$1;
            if (v13237) {
              var v22997 = targetSig$$1.returnType;
              var v19121 = v22997.type;
              var v19122 = this.voidType;
              v13237 = v19121 != v19122;
            }
            var v3114 = v13237;
            if (v3114) {
              var v3113 = targetSig$$1.returnType;
              targetType$$7 = v3113.type;
            }
          }
        }
        var v3135 = returnStmt$$1.returnExpression;
        if (v3135) {
          var v3116 = this.thisFnc;
          var v19123 = v3116.fncFlags;
          var v22998 = TypeScript$$25.FncFlags;
          var v19124 = v22998.HasReturnExpression;
          v3116.fncFlags = v19123 | v19124;
          var v22999 = targetType$$7 == null;
          if (v22999) {
            var v24889 = this.thisFnc;
            v22999 = v24889.returnTypeAnnotation;
          }
          var v19125 = v22999;
          if (v19125) {
            var v24890 = this.thisFnc;
            var v23000 = v24890.returnTypeAnnotation;
            v19125 = v23000.type;
          }
          var v13238 = v19125;
          if (v13238) {
            var v24891 = this.thisFnc;
            var v23001 = v24891.returnTypeAnnotation;
            var v19126 = v23001.type;
            var v19127 = this.voidType;
            v13238 = v19126 != v19127;
          }
          var v3118 = v13238;
          if (v3118) {
            var v13239 = this.thisFnc;
            var v3117 = v13239.returnTypeAnnotation;
            targetType$$7 = v3117.type;
          }
          var v3119 = this.checker;
          var v13240 = this.checker;
          var v3120 = v13240.inProvisionalTypecheckMode();
          var v3121 = targetType$$7 != null;
          var v3122 = returnStmt$$1.returnExpression;
          JAM.call(v3119.typeCheckWithContextualType, v3119, [targetType$$7, v3120, v3121, v3122], JAM.policy.p1);
          var v3123;
          var v23002 = this.thisFnc;
          var v19128 = v23002.returnTypeAnnotation;
          if (v19128) {
            var v24892 = this.thisFnc;
            var v23003 = v24892.returnTypeAnnotation;
            v19128 = v23003.type;
          }
          var v13242 = v19128;
          if (v13242) {
            var v19129 = this.thisFnc;
            var v13241 = v19129.returnTypeAnnotation;
            v3123 = v13241.type;
          } else {
            v3123 = targetType$$7;
          }
          var expectedReturnType = v3123;
          if (expectedReturnType) {
            var v19130 = this.voidType;
            var v13243 = expectedReturnType == v19130;
            if (v13243) {
              var v23004 = returnStmt$$1.returnExpression;
              var v19131 = v23004.type;
              var v19132 = this.voidType;
              v13243 = v19131 != v19132;
            }
            var v3127 = v13243;
            if (v3127) {
              var v13244 = this.checker;
              var v3124 = v13244.errorReporter;
              JAM.call(v3124.simpleError, v3124, [returnStmt$$1, "Return with value expression in void function"], JAM.policy.p1);
              var v3125 = returnStmt$$1.returnExpression;
              returnStmt$$1.type = v3125.type;
            } else {
              var v3126 = returnStmt$$1.returnExpression;
              var v26486 = JAM.call(this.cast, this, [v3126, expectedReturnType], JAM.policy.p1);
              returnStmt$$1.returnExpression = v26486;
              returnStmt$$1.type = expectedReturnType;
            }
          } else {
            if (targetType$$7) {
              var v19133 = returnStmt$$1.returnExpression;
              var v13245 = v19133.type;
              var v13246 = this.voidType;
              var v3130 = v13245 != v13246;
              if (v3130) {
                var v3128 = returnStmt$$1.returnExpression;
                var v26487 = JAM.call(this.cast, this, [v3128, targetType$$7], JAM.policy.p1);
                returnStmt$$1.returnExpression = v26487;
              } else {
                var v3129 = returnStmt$$1.returnExpression;
                v3129.type = targetType$$7;
              }
            }
            var v3131 = returnStmt$$1.returnExpression;
            returnStmt$$1.type = v3131.type;
          }
          var v13247 = this.thisFnc;
          var v3132 = v13247.returnStatementsWithExpressions;
          var v19134 = this.thisFnc;
          var v13248 = v19134.returnStatementsWithExpressions;
          var v3133 = v13248.length;
          JAM.set(v3132, v3133, returnStmt$$1);
        } else {
          var v3134;
          var v13250 = targetType$$7 == null;
          if (v13250) {
            var v13249 = this.checker;
            v3134 = v13249.voidType;
          } else {
            v3134 = targetType$$7;
          }
          returnStmt$$1.type = v3134;
        }
      }
      return returnStmt$$1;
    }
    function v1096(type$$56, ast$$108) {
      var v19135 = type$$56;
      if (v19135) {
        v19135 = type$$56.construct;
      }
      var v13251 = v19135;
      if (v13251) {
        var v24893 = type$$56.construct;
        var v23005 = v24893.signatures;
        var v19136 = v23005.length;
        v13251 = v19136 > 0;
      }
      var v3140 = v13251;
      if (v3140) {
        var i$$108 = 0;
        var v23006 = type$$56.construct;
        var v19137 = v23006.signatures;
        var v13252 = v19137.length;
        var v3139 = i$$108 < v13252;
        for (;v3139;) {
          var v25719 = type$$56.construct;
          var v24894 = v25719.signatures;
          var v23007 = v24894[i$$108];
          var v19138 = v23007.returnType;
          var v13253 = v19138.type;
          var v19139 = this.checker;
          var v13254 = v19139.voidType;
          var v3138 = v13253 == v13254;
          if (v3138) {
            var v13255 = this.checker;
            var v3137 = v13255.errorReporter;
            JAM.call(v3137.simpleError, v3137, [ast$$108, "Constructors may not have a return type of 'void'"], JAM.policy.p1);
            break;
          }
          i$$108++;
          var v23008 = type$$56.construct;
          var v19140 = v23008.signatures;
          var v13256 = v19140.length;
          v3139 = i$$108 < v13256;
        }
      }
      return;
    }
    function v1095(arrayLit) {
      function v1094(index$$60) {
        var v13257 = elements$$2.members;
        var v3141 = v13257[index$$60];
        return v3141.type;
      }
      function v1093(index$$59, type$$55) {
        var v13258 = elements$$2.members;
        var v3142 = v13258[index$$59];
        v3142.type = type$$55;
        return;
      }
      function v1092() {
        var v3143 = elements$$2.members;
        return v3143.length;
      }
      var elements$$2 = arrayLit.operand;
      var elementType = this.anyType;
      var targetElementType = null;
      var v3144 = TypeScript$$25.TypeComparisonInfo;
      var comparisonInfo$$14 = new v3144;
      comparisonInfo$$14.onlyCaptureFirstError = true;
      var v13259 = this.checker;
      var v3147 = v13259.hasTargetType();
      if (v3147) {
        var v13260 = this.checker;
        var v3145 = v13260.currentContextualTypeContext;
        var targetType$$6 = v3145.contextualType;
        var v3146 = targetType$$6.elementType;
        if (v3146) {
          targetElementType = targetType$$6.elementType;
        }
      }
      if (elements$$2) {
        var prevInArrayElemTypeCheck = this.inArrayElementTypeCheck;
        this.inArrayElementTypeCheck = true;
        var v3148 = this.checker;
        var v13261 = this.checker;
        var v3149 = v13261.inProvisionalTypecheckMode();
        var v3150 = targetElementType != null;
        JAM.call(v3148.typeCheckWithContextualType, v3148, [targetElementType, v3149, v3150, elements$$2], JAM.policy.p1);
        this.inArrayElementTypeCheck = prevInArrayElemTypeCheck;
        var v13262 = elements$$2.members;
        var v3151 = v13262[0];
        elementType = v3151.type;
        var collection$$3 = {getLength:v1092, setTypeAtIndex:v1093, getTypeAtIndex:v1094};
        var v3152 = this.checker;
        elementType = JAM.call(v3152.findBestCommonType, v3152, [elementType, targetElementType, collection$$3, false, comparisonInfo$$14], JAM.policy.p1);
        var v23009 = this.checker;
        var v19141 = v23009.undefinedType;
        var v13263 = elementType == v19141;
        var v19143 = !v13263;
        if (v19143) {
          var v19142 = !prevInArrayElemTypeCheck;
          if (v19142) {
            var v23010 = this.nullType;
            v19142 = elementType == v23010;
          }
          v13263 = v19142;
        }
        var v3153 = v13263;
        if (v3153) {
          elementType = this.anyType;
        }
      }
      var v3159 = !elementType;
      if (v3159) {
        var emsg$$2 = "Incompatible types in array literal expression";
        var v13264 = comparisonInfo$$14.message;
        var v3157 = !v13264;
        if (v3157) {
          var v13265 = this.checker;
          var v3154 = v13265.errorReporter;
          JAM.call(v3154.simpleError, v3154, [arrayLit, emsg$$2], JAM.policy.p1);
        } else {
          var v13266 = this.checker;
          var v3155 = v13266.errorReporter;
          var v13267 = emsg$$2 + ": ";
          var v13268 = comparisonInfo$$14.message;
          var v3156 = v13267 + v13268;
          JAM.call(v3155.simpleError, v3155, [arrayLit, v3156], JAM.policy.p1);
        }
        elementType = this.anyType;
      } else {
        if (targetElementType) {
          var v13269 = this.checker;
          var v3158 = JAM.call(v13269.sourceIsAssignableToTarget, v13269, [elementType, targetElementType], JAM.policy.p1);
          if (v3158) {
            elementType = targetElementType;
          }
        }
      }
      var v3160 = arrayLit;
      var v13270 = this.checker;
      var v26488 = JAM.call(v13270.makeArrayType, v13270, [elementType]);
      v3160.type = v26488;
      return;
    }
    function v1091(objectLit$$2) {
      var v3161 = TypeScript$$25.Type;
      var resultType$$2 = new v3161;
      var v3162 = TypeScript$$25.TypeSymbol;
      var v13271 = this.checker;
      var v3163 = v13271.anon;
      var v3164 = objectLit$$2.minChar;
      var v13272 = objectLit$$2.limChar;
      var v13273 = objectLit$$2.minChar;
      var v3165 = v13272 - v13273;
      var v19144 = this.checker;
      var v13274 = v19144.locationInfo;
      var v3166 = v13274.unitIndex;
      var v26489 = JAM.new(v3162, [v3163, v3164, v3165, v3166, resultType$$2]);
      resultType$$2.symbol = v26489;
      var v3167 = TypeScript$$25.ScopedMembers;
      var v13275 = TypeScript$$25.DualStringHashTable;
      var v19145 = TypeScript$$25.StringHashTable;
      var v13276 = new v19145;
      var v19146 = TypeScript$$25.StringHashTable;
      var v13277 = new v19146;
      var v3168 = JAM.new(v13275, [v13276, v13277]);
      var v26490 = JAM.new(v3167, [v3168]);
      resultType$$2.members = v26490;
      var v3169 = TypeScript$$25.SymbolTableScope;
      var v3170 = resultType$$2.members;
      var v26491 = JAM.new(v3169, [v3170, null, null, null, null]);
      resultType$$2.memberScope = v26491;
      var v3171 = TypeScript$$25.SymbolAggregateScope;
      var v3172 = resultType$$2.symbol;
      var aggScope$$3 = JAM.new(v3171, [v3172]);
      var v3173 = resultType$$2.memberScope;
      JAM.call(aggScope$$3.addParentScope, aggScope$$3, [v3173]);
      var v3174 = this.scope;
      JAM.call(aggScope$$3.addParentScope, aggScope$$3, [v3174]);
      resultType$$2.containedScope = aggScope$$3;
      var memberDecls$$1 = objectLit$$2.operand;
      var prevThisType$$3 = this.thisType;
      var acceptTargetType = false;
      var targetType$$5 = null;
      var v13278 = this.checker;
      var v3179 = v13278.hasTargetType();
      if (v3179) {
        var v13279 = this.checker;
        var v3175 = v13279.currentContextualTypeContext;
        targetType$$5 = v3175.contextualType;
        var v19147 = targetType$$5;
        if (v19147) {
          v19147 = targetType$$5.symbol;
        }
        var v13280 = v19147;
        if (v13280) {
          var v23011 = this.checker;
          var v24895 = targetType$$5.symbol;
          var v23012 = v24895.typeCheckStatus;
          var v19148 = JAM.call(v23011.typeStatusIsFinished, v23011, [v23012]);
          v13280 = !v19148;
        }
        var v3178 = v13280;
        if (v3178) {
          var v13281 = targetType$$5.symbol;
          var v3177 = v13281.declAST;
          if (v3177) {
            var v13282 = targetType$$5.symbol;
            var v3176 = v13282.declAST;
            JAM.call(this.typeCheck, this, [v3176]);
          }
        }
        acceptTargetType = true;
      }
      if (memberDecls$$1) {
        var i$$107 = 0;
        var v3180 = memberDecls$$1.members;
        var len$$52 = v3180.length;
        var v3210 = i$$107 < len$$52;
        for (;v3210;) {
          var v3181 = memberDecls$$1.members;
          var binex$$9 = v3181[i$$107];
          var id$$23 = binex$$9.operand1;
          var text$$24;
          var targetMember$$1 = null;
          var fieldSymbol$$4 = null;
          var v13283 = id$$23.nodeType;
          var v19149 = TypeScript$$25.NodeType;
          var v13284 = v19149.Name;
          var v3185 = v13283 == v13284;
          if (v3185) {
            text$$24 = id$$23.text;
          } else {
            var v13285 = id$$23.nodeType;
            var v19150 = TypeScript$$25.NodeType;
            var v13286 = v19150.QString;
            var v3184 = v13285 == v13286;
            if (v3184) {
              var idText$$5 = id$$23.text;
              var v13287 = idText$$5.length;
              var v3182 = v13287 - 1;
              text$$24 = JAM.call(idText$$5.substring, idText$$5, [1, v3182], JAM.policy.p1);
            } else {
              var v13288 = this.checker;
              var v3183 = v13288.errorReporter;
              JAM.call(v3183.simpleError, v3183, [objectLit$$2, "malformed object literal"], JAM.policy.p1);
              resultType$$2 = this.anyType;
              break;
            }
          }
          var v13289 = acceptTargetType;
          if (v13289) {
            v13289 = targetType$$5.memberScope;
          }
          var v3187 = v13289;
          if (v3187) {
            var v3186 = targetType$$5.memberScope;
            targetMember$$1 = JAM.call(v3186.find, v3186, [text$$24, false, false], JAM.policy.p1);
          }
          var v23013 = binex$$9.operand2;
          var v19151 = v23013.nodeType;
          var v23014 = TypeScript$$25.NodeType;
          var v19152 = v23014.FuncDecl;
          var v13290 = v19151 == v19152;
          if (v13290) {
            var v19153 = binex$$9.operand2;
            v13290 = v19153.isAccessor();
          }
          var v3192 = v13290;
          if (v3192) {
            var funcDecl$$33 = binex$$9.operand2;
            var v13291 = resultType$$2.members;
            var v3188 = v13291.publicMembers;
            var accessorSym$$1 = JAM.call(v3188.lookup, v3188, [text$$24]);
            var v3189 = this.checker;
            var v3190 = resultType$$2.memberScope;
            accessorSym$$1 = JAM.call(v3189.createAccessorSymbol, v3189, [funcDecl$$33, accessorSym$$1, resultType$$2, true, false, v3190, null], JAM.policy.p1);
            funcDecl$$33.accessorSymbol = accessorSym$$1;
            fieldSymbol$$4 = accessorSym$$1;
            var v13292 = id$$23.nodeType;
            var v19154 = TypeScript$$25.NodeType;
            var v13293 = v19154.Name;
            var v3191 = v13292 == v13293;
            if (v3191) {
              id$$23.sym = accessorSym$$1;
            }
          }
          var v3193 = this.checker;
          var v13294;
          var v19155 = acceptTargetType && targetMember$$1;
          if (v19155) {
            v13294 = targetMember$$1.getType();
          } else {
            v13294 = null;
          }
          var v3194 = v13294;
          var v3195 = binex$$9.operand2;
          JAM.call(v3193.typeCheckWithContextualType, v3193, [v3194, false, acceptTargetType, v3195], JAM.policy.p1);
          var v3199 = acceptTargetType && targetMember$$1;
          if (v3199) {
            var v24896 = binex$$9.operand2;
            var v23015 = v24896.type;
            var v23016 = this.anyType;
            var v19156 = v23015 == v23016;
            var v23020 = !v19156;
            if (v23020) {
              var v23017 = this.checker;
              var v24897 = binex$$9.operand2;
              var v23018 = v24897.type;
              var v23019 = targetMember$$1.getType();
              v19156 = JAM.call(v23017.sourceIsAssignableToTarget, v23017, [v23018, v23019], JAM.policy.p1);
            }
            var v13295 = v19156;
            var v19158 = !v13295;
            if (v19158) {
              var v25720 = binex$$9.operand2;
              var v24898 = v25720.nodeType;
              var v25721 = TypeScript$$25.NodeType;
              var v24899 = v25721.FuncDecl;
              var v23021 = v24898 == v24899;
              if (v23021) {
                var v24900 = binex$$9.operand2;
                v23021 = v24900.isAccessor();
              }
              var v19157 = v23021;
              if (v19157) {
                var v24901 = binex$$9.operand2;
                var v23022 = JAM.call(this.typeFromAccessorFuncDecl, this, [v24901]);
                var v23023 = targetMember$$1.getType();
                v19157 = v23022 == v23023;
              }
              v13295 = v19157;
            }
            var v3197 = v13295;
            if (v3197) {
              var v3196 = binex$$9.operand1;
              var v26492 = targetMember$$1.getType();
              v3196.type = v26492;
            }
          } else {
            var v3198 = binex$$9.operand2;
            var v13296;
            var v24902 = binex$$9.operand2;
            var v23024 = v24902.type;
            var v24903 = this.checker;
            var v23025 = v24903.undefinedType;
            var v19160 = v23024 == v23025;
            if (v19160) {
              v13296 = this.anyType;
            } else {
              var v19159 = binex$$9.operand2;
              v13296 = v19159.type;
            }
            v3198.type = v13296;
          }
          var v3209 = fieldSymbol$$4 == null;
          if (v3209) {
            var v3200 = binex$$9.operand2;
            var memberType$$1 = v3200.type;
            var v3201 = TypeScript$$25.ValueLocation;
            var field$$6 = new v3201;
            var v3202 = TypeScript$$25.FieldSymbol;
            var v3203 = id$$23.minChar;
            var v19161 = this.checker;
            var v13297 = v19161.locationInfo;
            var v3204 = v13297.unitIndex;
            fieldSymbol$$4 = JAM.new(v3202, [text$$24, v3203, v3204, true, field$$6]);
            var v13298 = fieldSymbol$$4.flags;
            var v19162 = TypeScript$$25.SymbolFlags;
            var v13299 = v19162.Property;
            fieldSymbol$$4.flags = v13298 | v13299;
            field$$6.symbol = fieldSymbol$$4;
            var v3205 = this.checker;
            var v26493 = v3205.getTypeCheckFinishedStatus();
            fieldSymbol$$4.typeCheckStatus = v26493;
            var v3206 = TypeScript$$25.TypeLink;
            var v26494 = new v3206;
            field$$6.typeLink = v26494;
            var v3207 = field$$6.typeLink;
            v3207.type = memberType$$1;
            var v13300 = resultType$$2.members;
            var v3208 = v13300.publicMembers;
            JAM.call(v3208.add, v3208, [text$$24, fieldSymbol$$4], JAM.policy.p1);
          }
          fieldSymbol$$4.isObjectLitField = true;
          i$$107++;
          v3210 = i$$107 < len$$52;
        }
      }
      this.thisType = prevThisType$$3;
      objectLit$$2.type = resultType$$2;
      if (targetType$$5) {
        objectLit$$2.targetType = targetType$$5;
      }
      return;
    }
    function v1090(funcDecl$$32) {
      var v13301 = funcDecl$$32.isAccessor();
      var v3211 = !v13301;
      if (v3211) {
        return null;
      }
      var v13302 = funcDecl$$32.fncFlags;
      var v19163 = TypeScript$$25.FncFlags;
      var v13303 = v19163.GetAccessor;
      var v3214 = JAM.call(TypeScript$$25.hasFlag, TypeScript$$25, [v13302, v13303], JAM.policy.p1);
      if (v3214) {
        var v24904 = funcDecl$$32.type;
        var v23026 = v24904.call;
        var v19164 = v23026.signatures;
        var v13304 = v19164[0];
        var v3212 = v13304.returnType;
        return v3212.type;
      } else {
        var v25722 = funcDecl$$32.type;
        var v24905 = v25722.call;
        var v23027 = v24905.signatures;
        var v19165 = v23027[0];
        var v13305 = v19165.parameters;
        var v3213 = v13305[0];
        return v3213.getType();
      }
      return;
    }
    function v1089(ifStmt$$1) {
      var v3215 = ifStmt$$1.cond;
      var v26495 = JAM.call(this.typeCheck, this, [v3215]);
      ifStmt$$1.cond = v26495;
      var v3216 = ifStmt$$1.cond;
      JAM.call(this.typeCheckCondExpr, this, [v3216]);
      var v3217 = ifStmt$$1.thenBod;
      var v26496 = JAM.call(this.typeCheck, this, [v3217]);
      ifStmt$$1.thenBod = v26496;
      var v3218 = ifStmt$$1.elseBod;
      var v26497 = JAM.call(this.typeCheck, this, [v3218]);
      ifStmt$$1.elseBod = v26497;
      var v3219 = ifStmt$$1.thenBod;
      JAM.call(this.typeCheckCompoundStmtBlock, this, [v3219, "if statement"], JAM.policy.p1);
      var v3220 = ifStmt$$1.elseBod;
      JAM.call(this.typeCheckCompoundStmtBlock, this, [v3220, "if statement"], JAM.policy.p1);
      ifStmt$$1.type = this.voidType;
      return ifStmt$$1;
    }
    function v1088(stmts$$3, stmtType) {
      var v23028 = this.checker;
      var v19166 = v23028.styleSettings;
      var v13306 = v19166.blockInCompoundStmt;
      if (v13306) {
        v13306 = stmts$$3;
      }
      var v3224 = v13306;
      if (v3224) {
        var v13307 = stmts$$3.nodeType;
        var v19167 = TypeScript$$25.NodeType;
        var v13308 = v19167.Block;
        var v3223 = v13307 != v13308;
        if (v3223) {
          var v13309 = this.checker;
          var v3221 = v13309.errorReporter;
          var v3222 = stmtType + " requires a block";
          JAM.call(v3221.styleError, v3221, [stmts$$3, v3222], JAM.policy.p1);
        }
      }
      return;
    }
    function v1087(cond$$3) {
      var v19168 = this.checker;
      var v13310 = v19168.styleSettings;
      var v3227 = v13310.assignmentInCond;
      if (v3227) {
        var v19169 = cond$$3 !== null;
        if (v19169) {
          var v23029 = cond$$3.nodeType;
          var v24906 = TypeScript$$25.NodeType;
          var v23030 = v24906.Asg;
          v19169 = v23029 >= v23030;
        }
        var v13311 = v19169;
        if (v13311) {
          var v19170 = cond$$3.nodeType;
          var v23031 = TypeScript$$25.NodeType;
          var v19171 = v23031.LastAsg;
          v13311 = v19170 <= v19171;
        }
        var v3226 = v13311;
        if (v3226) {
          var v13312 = this.checker;
          var v3225 = v13312.errorReporter;
          JAM.call(v3225.simpleError, v3225, [cond$$3, "top-level assignment statement in conditional expression"], JAM.policy.p1);
        }
      }
      return;
    }
    function v1086(doWhileStmt) {
      var v3228 = doWhileStmt.cond;
      var v26498 = JAM.call(this.typeCheck, this, [v3228]);
      doWhileStmt.cond = v26498;
      var v3229 = doWhileStmt.cond;
      JAM.call(this.typeCheckCondExpr, this, [v3229]);
      var v3230 = doWhileStmt.body;
      var v26499 = JAM.call(this.typeCheck, this, [v3230]);
      doWhileStmt.body = v26499;
      var v3231 = doWhileStmt.body;
      JAM.call(this.typeCheckCompoundStmtBlock, this, [v3231, "do while statement"], JAM.policy.p1);
      doWhileStmt.type = this.voidType;
      return doWhileStmt;
    }
    function v1085(whileStmt$$1) {
      var v3232 = whileStmt$$1.cond;
      var v26500 = JAM.call(this.typeCheck, this, [v3232]);
      whileStmt$$1.cond = v26500;
      var v3233 = whileStmt$$1.cond;
      JAM.call(this.typeCheckCondExpr, this, [v3233]);
      var v3234 = whileStmt$$1.body;
      var v26501 = JAM.call(this.typeCheck, this, [v3234]);
      whileStmt$$1.body = v26501;
      var v3235 = whileStmt$$1.body;
      JAM.call(this.typeCheckCompoundStmtBlock, this, [v3235, "while statement"], JAM.policy.p1);
      whileStmt$$1.type = this.voidType;
      return whileStmt$$1;
    }
    function v1084(forInStmt$$1) {
      var v3236 = forInStmt$$1.obj;
      var v26502 = JAM.call(this.typeCheck, this, [v3236]);
      forInStmt$$1.obj = v26502;
      var v13313 = forInStmt$$1.lval;
      var v3237 = JAM.call(this.typeCheck, this, [v13313]);
      var v13314 = this.checker;
      var v3238 = v13314.stringType;
      var v26503 = JAM.call(this.cast, this, [v3237, v3238], JAM.policy.p1);
      forInStmt$$1.lval = v26503;
      var v19172 = forInStmt$$1.lval;
      var v13315 = v19172.nodeType;
      var v19173 = TypeScript$$25.NodeType;
      var v13316 = v19173.VarDecl;
      var v3244 = v13315 == v13316;
      if (v3244) {
        var varDecl$$19 = forInStmt$$1.lval;
        var v3240 = varDecl$$19.typeExpr;
        if (v3240) {
          var v13317 = this.checker;
          var v3239 = v13317.errorReporter;
          JAM.call(v3239.simpleError, v3239, [varDecl$$19, "Variable declarations for for/in expressions may not contain a type annotation"], JAM.policy.p1);
        }
        var v3243 = varDecl$$19.sym;
        if (v3243) {
          var v3241 = varDecl$$19.sym;
          var v13318 = this.checker;
          var v3242 = v13318.stringType;
          JAM.call(v3241.setType, v3241, [v3242]);
        }
      }
      var v3245 = forInStmt$$1.body;
      var v26504 = JAM.call(this.typeCheck, this, [v3245]);
      forInStmt$$1.body = v26504;
      var v3246 = forInStmt$$1.body;
      JAM.call(this.typeCheckCompoundStmtBlock, this, [v3246, "for in statement"], JAM.policy.p1);
      return forInStmt$$1;
    }
    function v1083(withStmt$$2) {
      var v13319 = this.checker;
      var v3249 = v13319.errorsOnWith;
      if (v3249) {
        var v13320 = this.checker;
        var v3247 = v13320.errorReporter;
        var v3248 = withStmt$$2.expr;
        JAM.call(v3247.simpleError, v3247, [v3248, "All symbols within a 'with' block will be typed as 'any'"], JAM.policy.p1);
      }
      var v3250 = withStmt$$2.expr;
      var v26505 = JAM.call(this.typeCheck, this, [v3250]);
      withStmt$$2.expr = v26505;
      var v3251 = this.checker;
      v3251.inWith = true;
      var v3252 = withStmt$$2.body;
      var v26506 = JAM.call(this.typeCheck, this, [v3252]);
      withStmt$$2.body = v26506;
      var v3253 = withStmt$$2.body;
      JAM.call(this.typeCheckCompoundStmtBlock, this, [v3253, "with statement"], JAM.policy.p1);
      var v3254 = this.checker;
      v3254.inWith = false;
      return withStmt$$2;
    }
    function v1082(forStmt$$1) {
      var v3255 = forStmt$$1.init;
      var v26507 = JAM.call(this.typeCheck, this, [v3255]);
      forStmt$$1.init = v26507;
      this.nestingLevel++;
      var v3256 = forStmt$$1.cond;
      var v26508 = JAM.call(this.typeCheck, this, [v3256]);
      forStmt$$1.cond = v26508;
      var v3257 = forStmt$$1.cond;
      JAM.call(this.typeCheckCondExpr, this, [v3257]);
      var v3258 = forStmt$$1.incr;
      var v26509 = JAM.call(this.typeCheck, this, [v3258]);
      forStmt$$1.incr = v26509;
      this.nestingLevel--;
      var v3259 = forStmt$$1.body;
      var v26510 = JAM.call(this.typeCheck, this, [v3259]);
      forStmt$$1.body = v26510;
      var v3260 = forStmt$$1.body;
      JAM.call(this.typeCheckCompoundStmtBlock, this, [v3260, "for statement"], JAM.policy.p1);
      forStmt$$1.type = this.voidType;
      return forStmt$$1;
    }
    function v1081(moduleDecl$$7) {
      var v13321 = moduleDecl$$7.mod;
      var v3261 = !v13321;
      if (v3261) {
        return moduleDecl$$7;
      }
      var v3263 = this.currentScript;
      if (v3263) {
        var v3262 = this.currentScript;
        v3262.requiresGlobal = true;
      }
      var mod$$3 = moduleDecl$$7.mod;
      var sym$$43 = null;
      var prevScope$$6 = this.scope;
      var prevThisType$$2 = this.thisType;
      var v3264 = this.checker;
      var prevCurrentModDecl$$1 = v3264.currentModDecl;
      var v3265 = this.checker;
      v3265.currentModDecl = moduleDecl$$7;
      this.thisType = null;
      this.scope = mod$$3.containedScope;
      var v3266 = moduleDecl$$7.members;
      JAM.call(this.typeCheck, this, [v3266]);
      sym$$43 = mod$$3.symbol;
      var v3267 = this.checker;
      v3267.currentModDecl = prevCurrentModDecl$$1;
      this.thisType = prevThisType$$2;
      this.scope = prevScope$$6;
      moduleDecl$$7.type = mod$$3;
      if (sym$$43) {
        var v3268 = TypeScript$$25.TypeCheckStatus;
        sym$$43.typeCheckStatus = v3268.Finished;
      }
      return moduleDecl$$7;
    }
    function v1080(importDecl$$2) {
      var v3269 = importDecl$$2.alias;
      var mod$$2 = v3269.type;
      var sym$$42 = null;
      var prevInImportTC = this.inImportTypeCheck;
      this.inImportTypeCheck = true;
      var v3270 = importDecl$$2.alias;
      JAM.call(this.typeCheck, this, [v3270]);
      var v3271 = importDecl$$2.alias;
      mod$$2 = v3271.type;
      var v3277 = mod$$2 == null;
      if (v3277) {
        var v13322 = this.checker;
        var v3272 = v13322.errorReporter;
        var v3273 = importDecl$$2.alias;
        var v23032 = importDecl$$2.id;
        var v19174 = v23032.actualText;
        var v13323 = "Could not resolve module alias '" + v19174;
        var v3274 = v13323 + "'";
        JAM.call(v3272.simpleError, v3272, [v3273, v3274], JAM.policy.p1);
        var v3275 = this.checker;
        mod$$2 = v3275.anyType;
        var v13324 = importDecl$$2.id;
        var v3276 = v13324.sym;
        v3276.type = mod$$2;
      }
      var v3278 = importDecl$$2.id;
      v3278.type = mod$$2;
      sym$$42 = mod$$2.symbol;
      var v13325 = mod$$2.isModuleType();
      var v3286 = !v13325;
      if (v3286) {
        var v13326 = this.checker;
        var v3279 = v13326.errorReporter;
        var v3280 = importDecl$$2.alias;
        JAM.call(v3279.simpleError, v3279, [v3280, "A module cannot be aliased to a non-module type"], JAM.policy.p1);
      } else {
        sym$$42.type = mod$$2;
        var v24907 = this.checker;
        var v23033 = v24907.typeFlow;
        var v19175 = v23033.currentScript;
        if (v19175) {
          var v25723 = this.checker;
          var v24908 = v25723.typeFlow;
          var v23034 = v24908.currentScript;
          v19175 = v23034.topLevelMod;
        }
        var v13327 = v19175;
        if (v13327) {
          var v25724 = this.checker;
          var v24909 = v25724.typeFlow;
          var v23035 = v24909.currentScript;
          var v19176 = v23035.topLevelMod;
          v13327 = v19176.mod;
        }
        var v3282 = v13327;
        if (v3282) {
          var v25725 = this.checker;
          var v24910 = v25725.typeFlow;
          var v23036 = v24910.currentScript;
          var v19177 = v23036.topLevelMod;
          var v13328 = v19177.mod;
          var v3281 = v13328.importedModules;
          JAM.call(v3281.push, v3281, [importDecl$$2]);
        }
        var v13329 = importDecl$$2.id;
        var v3283 = v13329.sym;
        v3283.type = mod$$2;
        var v13330 = mod$$2.symbol;
        if (v13330) {
          var v19178 = mod$$2.symbol;
          v13330 = v19178.declAST;
        }
        var v3285 = v13330;
        if (v3285) {
          var v13331 = mod$$2.symbol;
          var v3284 = v13331.declAST;
          var v19179 = v3284.modFlags;
          var v24911 = TypeScript$$25.ModuleFlags;
          var v23037 = v24911.ShouldEmitModuleDecl;
          var v19180 = ~v23037;
          v3284.modFlags = v19179 & v19180;
        }
      }
      this.inImportTypeCheck = prevInImportTC;
      return importDecl$$2;
    }
    function v1079(interfaceDecl$$6) {
      var v3287 = interfaceDecl$$6.type;
      JAM.call(this.typeCheckBases, this, [v3287]);
      var v3288 = interfaceDecl$$6.extendsList;
      var v13332 = interfaceDecl$$6.type;
      var v3289 = v13332.symbol;
      JAM.call(this.typeCheckBaseListPrivacy, this, [v3288, v3289, true], JAM.policy.p1);
      var v3290 = interfaceDecl$$6.members;
      JAM.call(this.typeCheck, this, [v3290]);
      var v3291 = interfaceDecl$$6.type;
      JAM.call(this.checkBaseTypeMemberInheritance, this, [v3291, interfaceDecl$$6], JAM.policy.p1);
      var v3305 = interfaceDecl$$6.extendsList;
      if (v3305) {
        var i$$106 = 0;
        var v23038 = interfaceDecl$$6.extendsList;
        var v19181 = v23038.members;
        var v13333 = v19181.length;
        var v3304 = i$$106 < v13333;
        for (;v3304;) {
          var v24912 = interfaceDecl$$6.extendsList;
          var v23039 = v24912.members;
          var v19182 = v23039[i$$106];
          var v13334 = v19182.type;
          var v3295 = v13334.call;
          if (v3295) {
            var v13335 = interfaceDecl$$6.type;
            var v3294 = v13335.call;
            if (v3294) {
              var v13336 = interfaceDecl$$6.type;
              var v3292 = v13336.call;
              var v23040 = interfaceDecl$$6.type;
              var v19183 = v23040.call;
              var v13337 = v19183.signatures;
              var v26087 = interfaceDecl$$6.extendsList;
              var v25726 = v26087.members;
              var v24913 = v25726[i$$106];
              var v23041 = v24913.type;
              var v19184 = v23041.call;
              var v13338 = v19184.signatures;
              var v26511 = v13337.concat(v13338);
              v3292.signatures = v26511;
            } else {
              var v3293 = interfaceDecl$$6.type;
              var v24914 = interfaceDecl$$6.extendsList;
              var v23042 = v24914.members;
              var v19185 = v23042[i$$106];
              var v13339 = v19185.type;
              v3293.call = v13339.call;
            }
          }
          var v24915 = interfaceDecl$$6.extendsList;
          var v23043 = v24915.members;
          var v19186 = v23043[i$$106];
          var v13340 = v19186.type;
          var v3299 = v13340.construct;
          if (v3299) {
            var v13341 = interfaceDecl$$6.type;
            var v3298 = v13341.construct;
            if (v3298) {
              var v13342 = interfaceDecl$$6.type;
              var v3296 = v13342.construct;
              var v23044 = interfaceDecl$$6.type;
              var v19187 = v23044.construct;
              var v13343 = v19187.signatures;
              var v26088 = interfaceDecl$$6.extendsList;
              var v25727 = v26088.members;
              var v24916 = v25727[i$$106];
              var v23045 = v24916.type;
              var v19188 = v23045.construct;
              var v13344 = v19188.signatures;
              var v26512 = v13343.concat(v13344);
              v3296.signatures = v26512;
            } else {
              var v3297 = interfaceDecl$$6.type;
              var v24917 = interfaceDecl$$6.extendsList;
              var v23046 = v24917.members;
              var v19189 = v23046[i$$106];
              var v13345 = v19189.type;
              v3297.construct = v13345.construct;
            }
          }
          var v24918 = interfaceDecl$$6.extendsList;
          var v23047 = v24918.members;
          var v19190 = v23047[i$$106];
          var v13346 = v19190.type;
          var v3303 = v13346.index;
          if (v3303) {
            var v13347 = interfaceDecl$$6.type;
            var v3302 = v13347.index;
            if (v3302) {
              var v13348 = interfaceDecl$$6.type;
              var v3300 = v13348.index;
              var v23048 = interfaceDecl$$6.type;
              var v19191 = v23048.index;
              var v13349 = v19191.signatures;
              var v26089 = interfaceDecl$$6.extendsList;
              var v25728 = v26089.members;
              var v24919 = v25728[i$$106];
              var v23049 = v24919.type;
              var v19192 = v23049.index;
              var v13350 = v19192.signatures;
              var v26513 = v13349.concat(v13350);
              v3300.signatures = v26513;
            } else {
              var v3301 = interfaceDecl$$6.type;
              var v24920 = interfaceDecl$$6.extendsList;
              var v23050 = v24920.members;
              var v19193 = v23050[i$$106];
              var v13351 = v19193.type;
              v3301.index = v13351.index;
            }
          }
          i$$106++;
          var v23051 = interfaceDecl$$6.extendsList;
          var v19194 = v23051.members;
          var v13352 = v19194.length;
          v3304 = i$$106 < v13352;
        }
      }
      return interfaceDecl$$6;
    }
    function v1078(type$$54, ast$$107) {
      var v3309 = type$$54.call;
      if (v3309) {
        var v3306 = type$$54.call;
        var v3307 = this.checker;
        var v13353 = type$$54.construct;
        var v3308 = v13353 != null;
        JAM.call(v3306.typeCheck, v3306, [v3307, ast$$107, v3308], JAM.policy.p1);
      }
      var v3312 = type$$54.construct;
      if (v3312) {
        var v3310 = type$$54.construct;
        var v3311 = this.checker;
        JAM.call(v3310.typeCheck, v3310, [v3311, ast$$107, false], JAM.policy.p1);
      }
      var v3315 = type$$54.index;
      if (v3315) {
        var v3313 = type$$54.index;
        var v3314 = this.checker;
        JAM.call(v3313.typeCheck, v3313, [v3314, ast$$107, false], JAM.policy.p1);
      }
      return;
    }
    function v1077(classDecl$$9) {
      var v3316 = classDecl$$9.type;
      var typeSymbol$$6 = v3316.symbol;
      var v13354 = typeSymbol$$6.typeCheckStatus;
      var v19195 = TypeScript$$25.TypeCheckStatus;
      var v13355 = v19195.Finished;
      var v3320 = v13354 == v13355;
      if (v3320) {
        return classDecl$$9;
      } else {
        var v13356 = typeSymbol$$6.typeCheckStatus;
        var v19196 = TypeScript$$25.TypeCheckStatus;
        var v13357 = v19196.Started;
        var v3319 = v13356 == v13357;
        if (v3319) {
          return classDecl$$9;
        } else {
          var v3317 = TypeScript$$25.TypeCheckStatus;
          typeSymbol$$6.typeCheckStatus = v3317.Started;
          var v3318 = this.checker;
          JAM.call(v3318.addStartedPTO, v3318, [typeSymbol$$6]);
        }
      }
      var prevScope$$5 = this.scope;
      var svClassNode$$1 = this.thisClassNode;
      this.thisClassNode = classDecl$$9;
      var classType$$6 = classDecl$$9.type;
      var v3321 = classType$$6.instanceType;
      JAM.call(this.typeCheckBases, this, [v3321]);
      var v3322 = classDecl$$9.extendsList;
      JAM.call(this.typeCheckBaseListPrivacy, this, [v3322, typeSymbol$$6, true], JAM.policy.p1);
      var v3323 = classDecl$$9.implementsList;
      JAM.call(this.typeCheckBaseListPrivacy, this, [v3323, typeSymbol$$6, false], JAM.policy.p1);
      var prevThisType$$1 = this.thisType;
      this.thisType = classType$$6.instanceType;
      var v3324 = classType$$6.instanceType;
      this.scope = v3324.containedScope;
      var v3329 = classDecl$$9.constructorDecl;
      if (v3329) {
        var v3325 = classType$$6.instanceType;
        this.scope = v3325.constructorScope;
        var ssb$$1 = this.scope;
        var v3326 = ssb$$1.valueMembers;
        var funcTable$$2 = v3326.allMembers;
        var v19197 = classDecl$$9.constructorDecl;
        var v13358 = v19197.type;
        var v3327 = v13358.symbol;
        var v13359 = classDecl$$9.constructorDecl;
        var v3328 = v13359.arguments;
        JAM.call(this.addConstructorLocalArgs, this, [v3327, v3328, funcTable$$2, true], JAM.policy.p1);
      }
      var v3330 = classDecl$$9.members;
      JAM.call(this.typeCheck, this, [v3330]);
      var v3331 = TypeScript$$25.TypeCheckStatus;
      typeSymbol$$6.typeCheckStatus = v3331.Finished;
      JAM.call(this.checkBaseTypeMemberInheritance, this, [classType$$6, classDecl$$9], JAM.policy.p1);
      JAM.call(this.checkMembersImplementInterfaces, this, [classType$$6]);
      JAM.call(this.typeCheckOverloadSignatures, this, [classType$$6, classDecl$$9], JAM.policy.p1);
      var v3332 = classType$$6.instanceType;
      JAM.call(this.typeCheckOverloadSignatures, this, [v3332, classDecl$$9], JAM.policy.p1);
      var v13360 = classDecl$$9.constructorDecl;
      var v3336 = !v13360;
      if (v3336) {
        var v23052 = classDecl$$9.extendsList;
        if (v23052) {
          var v25729 = classDecl$$9.extendsList;
          var v24921 = v25729.members;
          v23052 = v24921.length;
        }
        var v19198 = v23052;
        if (v19198) {
          var v25730 = classDecl$$9.extendsList;
          var v24922 = v25730.members;
          var v23053 = v24922[0];
          v19198 = v23053.type;
        }
        var v13361 = v19198;
        if (v13361) {
          var v26262 = classDecl$$9.extendsList;
          var v26090 = v26262.members;
          var v25731 = v26090[0];
          var v24923 = v25731.type;
          var v23054 = v24923.symbol;
          var v19199 = v23054.type;
          v13361 = v19199.isClass();
        }
        var v3335 = v13361;
        if (v3335) {
          var v3333 = classDecl$$9.type;
          var v25732 = classDecl$$9.extendsList;
          var v24924 = v25732.members;
          var v23055 = v24924[0];
          var v19200 = v23055.type;
          var v13362 = v19200.symbol;
          var v3334 = v13362.type;
          JAM.call(TypeScript$$25.cloneParentConstructGroupForChildType, TypeScript$$25, [v3333, v3334], JAM.policy.p1);
        }
      }
      this.thisType = prevThisType$$1;
      this.thisClassNode = svClassNode$$1;
      this.scope = prevScope$$5;
      return classDecl$$9;
    }
    function v1076(derivedType, derivedTypeDecl) {
      function v1075(key$$45, s$$28, c$$12) {
        var sym$$41 = s$$28;
        var j$$16 = 0;
        var v3349 = j$$16 < len$$51;
        for (;v3349;) {
          var v3337 = instanceType$$6.extendsList;
          var base$$3 = v3337[j$$16];
          var v13363 = base$$3.memberScope;
          var v3348 = v13363 == null;
          if (v3348) {
            var v13364 = _this$$12.checker;
            var v3338 = v13364.errorReporter;
            var v23056 = base$$3.symbol;
            var v19201 = v23056.name;
            var v13365 = "Base type '" + v19201;
            var v3339 = v13365 + "' lacks an implementation.";
            JAM.call(v3338.simpleError, v3338, [derivedTypeDecl, v3339], JAM.policy.p1);
          } else {
            var v3340 = base$$3.memberScope;
            var v3341 = sym$$41.name;
            var bSym = JAM.call(v3340.find, v3340, [v3341, false, false], JAM.policy.p1);
            if (bSym) {
              var aType = sym$$41.getType();
              var bType = bSym.getType();
              var v19202 = _this$$12.checker;
              var v13366 = JAM.call(v19202.sourceIsSubtypeOfTarget, v19202, [aType, bType], JAM.policy.p1);
              var v3347 = !v13366;
              if (v3347) {
                var v13367 = _this$$12.checker;
                var v3342 = v13367.errorReporter;
                var v24925 = sym$$41.name;
                var v23057 = "Type of overridden member '" + v24925;
                var v19203 = v23057 + "' is not subtype of original member defined by type '";
                var v23058 = bSym.container;
                var v19204 = v23058.name;
                var v13368 = v19203 + v19204;
                var v3343 = v13368 + "'";
                JAM.call(v3342.simpleErrorFromSym, v3342, [sym$$41, v3343], JAM.policy.p1);
              } else {
                var v19205 = sym$$41.kind();
                var v23059 = TypeScript$$25.SymbolKind;
                var v19206 = v23059.Type;
                var v13369 = v19205 == v19206;
                if (v13369) {
                  var v19207 = bSym.kind();
                  var v23060 = TypeScript$$25.SymbolKind;
                  var v19208 = v23060.Field;
                  v13369 = v19207 == v19208;
                }
                var v3346 = v13369;
                if (v3346) {
                  var v13370 = _this$$12.checker;
                  var v3344 = v13370.errorReporter;
                  var v19209 = sym$$41.name;
                  var v13371 = "Cannot override field '" + v19209;
                  var v3345 = v13371 + "' with method";
                  JAM.call(v3344.simpleErrorFromSym, v3344, [sym$$41, v3345], JAM.policy.p1);
                }
              }
            }
          }
          j$$16++;
          v3349 = j$$16 < len$$51;
        }
        return;
      }
      var _this$$12 = this;
      var instanceType$$6 = derivedType.getInstanceType();
      var v13372 = instanceType$$6.extendsList;
      var v3350 = v13372 == null;
      if (v3350) {
        return;
      }
      var v3351 = instanceType$$6.extendsList;
      var len$$51 = v3351.length;
      var v3359 = len$$51 > 0;
      if (v3359) {
        var v3352 = TypeScript$$25.StringHashTable;
        var names$$1 = new v3352;
        var v3356 = instanceType$$6.isClassInstance();
        if (v3356) {
          var i$$105 = 0;
          var v3355 = i$$105 < len$$51;
          for (;v3355;) {
            var v13373 = instanceType$$6.extendsList;
            var v3353 = v13373[i$$105];
            var v3354 = i$$105 > 0;
            JAM.call(this.assertUniqueNamesInBaseTypes, this, [names$$1, v3353, derivedTypeDecl, v3354], JAM.policy.p1);
            i$$105++;
            v3355 = i$$105 < len$$51;
          }
        }
        var v3358 = instanceType$$6.members;
        if (v3358) {
          var v13374 = instanceType$$6.members;
          var v3357 = v13374.publicMembers;
          JAM.call(v3357.map, v3357, [v1075, null], JAM.policy.p1);
        }
      }
      return;
    }
    function v1074(names, type$$53, classDecl$$8, checkUnique) {
      function v1073(key$$44, s$$27, c$$11) {
        var sym$$40 = s$$27;
        var v3360 = sym$$40.name;
        var dup = JAM.call(names.lookup, names, [v3360]);
        if (dup) {
          if (checkUnique) {
            var v13375 = _this$$11.checker;
            var v3361 = v13375.errorReporter;
            var v26352 = classDecl$$8.name;
            var v26263 = v26352.actualText;
            var v26091 = "duplicate member name in bases for " + v26263;
            var v25733 = v26091 + ": ";
            var v26092 = type$$53.symbol;
            var v25734 = v26092.name;
            var v24926 = v25733 + v25734;
            var v23061 = v24926 + " and ";
            var v24927 = dup.container;
            var v23062 = v24927.name;
            var v19210 = v23061 + v23062;
            var v13376 = v19210 + " both contain member with name ";
            var v13377 = sym$$40.name;
            var v3362 = v13376 + v13377;
            JAM.call(v3361.simpleError, v3361, [classDecl$$8, v3362], JAM.policy.p1);
          }
        } else {
          var v3363 = sym$$40.name;
          JAM.call(names.add, names, [v3363, sym$$40], JAM.policy.p1);
        }
        return;
      }
      var _this$$11 = this;
      if (type$$53) {
        var v3365 = type$$53.members;
        if (v3365) {
          var v13378 = type$$53.members;
          var v3364 = v13378.publicMembers;
          JAM.call(v3364.map, v3364, [v1073, null], JAM.policy.p1);
        }
        var v3370 = type$$53.extendsList;
        if (v3370) {
          var v3366 = type$$53.extendsList;
          var len$$50 = v3366.length;
          var i$$104 = 0;
          var v3369 = i$$104 < len$$50;
          for (;v3369;) {
            var v25735 = type$$53.extendsList;
            var v24928 = v25735[i$$104];
            var v23063 = v24928.symbol;
            var v19211 = v23063.flags;
            var v23064 = TypeScript$$25.SymbolFlags;
            var v19212 = v23064.RecursivelyReferenced;
            var v13379 = v19211 & v19212;
            var v3368 = !v13379;
            if (v3368) {
              var v13380 = type$$53.extendsList;
              var v3367 = v13380[i$$104];
              JAM.call(this.assertUniqueNamesInBaseTypes, this, [names, v3367, classDecl$$8, checkUnique], JAM.policy.p1);
            }
            i$$104++;
            v3369 = i$$104 < len$$50;
          }
        }
      }
      return;
    }
    function v1072(bases$$7) {
      var v3371 = bases$$7 == null;
      if (v3371) {
        return;
      }
      var v3372 = bases$$7.members;
      var basesLen$$2 = v3372.length;
      var i$$103 = 0;
      var v3375 = i$$103 < basesLen$$2;
      for (;v3375;) {
        var v3373 = bases$$7.members;
        var baseExpr$$2 = v3373[i$$103];
        var baseSymbol$$3 = null;
        var v13381 = baseExpr$$2.nodeType;
        var v19213 = TypeScript$$25.NodeType;
        var v13382 = v19213.Call;
        var v3374 = v13381 == v13382;
        if (v3374) {
          JAM.call(this.typeCheckNew, this, [baseExpr$$2]);
        }
        i$$103++;
        v3375 = i$$103 < basesLen$$2;
      }
      return;
    }
    function v1071(implementingType) {
      var instanceType$$5 = implementingType.getInstanceType();
      var v3388 = instanceType$$5.implementsList;
      if (v3388) {
        var v3376 = instanceType$$5.implementsList;
        var len$$49 = v3376.length;
        var i$$102 = 0;
        var v3387 = i$$102 < len$$49;
        for (;v3387;) {
          var v3377 = instanceType$$5.implementsList;
          var interfaceType$$3 = v3377[i$$102];
          var v3378 = TypeScript$$25.TypeComparisonInfo;
          var comparisonInfo$$13 = new v3378;
          var v19214 = this.checker;
          var v13383 = JAM.call(v19214.sourceIsSubtypeOfTarget, v19214, [instanceType$$5, interfaceType$$3, comparisonInfo$$13], JAM.policy.p1);
          var v3386 = !v13383;
          if (v3386) {
            var v23065 = instanceType$$5.getTypeName();
            var v19215 = "Class '" + v23065;
            var v13384 = v19215 + "' declares interface '";
            var v13385 = interfaceType$$3.getTypeName();
            var v3379 = v13384 + v13385;
            var emsg$$1 = v3379 + "' but does not implement it";
            var v13386 = comparisonInfo$$13.message;
            var v3385 = !v13386;
            if (v3385) {
              var v13387 = this.checker;
              var v3380 = v13387.errorReporter;
              var v3381 = instanceType$$5.symbol;
              JAM.call(v3380.simpleErrorFromSym, v3380, [v3381, emsg$$1], JAM.policy.p1);
            } else {
              var v13388 = this.checker;
              var v3382 = v13388.errorReporter;
              var v3383 = instanceType$$5.symbol;
              var v13389 = emsg$$1 + ": ";
              var v13390 = comparisonInfo$$13.message;
              var v3384 = v13389 + v13390;
              JAM.call(v3382.simpleErrorFromSym, v3382, [v3383, v3384], JAM.policy.p1);
            }
          }
          i$$102++;
          v3387 = i$$102 < len$$49;
        }
      }
      return;
    }
    function v1070(type$$52) {
      var seenInterface = false;
      var bases$$6 = type$$52.extendsList;
      var baseLinks = type$$52.extendsTypeLinks;
      if (bases$$6) {
        var len$$48 = bases$$6.length;
        var v3389 = len$$48 > 0;
        if (v3389) {
          var v13391 = type$$52.typeFlags;
          var v19216 = TypeScript$$25.TypeFlags;
          var v13392 = v19216.HasBaseType;
          type$$52.typeFlags = v13391 | v13392;
        }
        var i$$101 = 0;
        var v3414 = i$$101 < len$$48;
        for (;v3414;) {
          var v13393 = bases$$6[i$$101];
          var v19217 = this.checker;
          var v13394 = v19217.anyType;
          var v3400 = v13393 == v13394;
          if (v3400) {
            var v3390 = baseLinks[i$$101];
            v3390.type = null;
            var v13395 = this.checker;
            var v3391 = v13395.errorReporter;
            var oldErrors = v3391.errorSink;
            var v3392 = TypeScript$$25.CompilerDiagnostics;
            var v13396 = oldErrors.length;
            var v3393 = v13396 == 0;
            JAM.call(v3392.assert, v3392, [v3393, "There shouldnt be any contextual errors when typechecking base type names"], JAM.policy.p1);
            var v13397 = this.checker;
            var v3394 = v13397.errorReporter;
            v3394.pushToErrorSink = true;
            var v3395 = this.checker;
            var v3396 = baseLinks[i$$101];
            var v3397 = type$$52.containedScope;
            var v26514 = JAM.call(v3395.resolveBaseTypeLink, v3395, [v3396, v3397], JAM.policy.p1);
            bases$$6[i$$101] = v26514;
            var v13398 = this.checker;
            var v3398 = v13398.errorReporter;
            v3398.pushToErrorSink = false;
            var v13399 = this.checker;
            var v3399 = v13399.errorReporter;
            v3399.freeCapturedErrors();
          }
          var base$$2 = bases$$6[i$$101];
          var v3401 = baseLinks[i$$101];
          var baseRef$$1 = v3401.ast;
          var v13400 = base$$2.symbol;
          if (v13400) {
            var v23066 = base$$2.symbol;
            var v19218 = v23066.name;
            v13400 = v19218 == "Object";
          }
          var v3402 = v13400;
          if (v3402) {
            var v19219 = base$$2.symbol;
            var v13401 = v19219.container;
            var v19220 = this.checker;
            var v13402 = v19220.gloMod;
            v3402 = v13401 == v13402;
          }
          var baseTypeOfObject = v3402;
          if (baseTypeOfObject) {
            var v13403 = type$$52.typeFlags;
            var v19221 = TypeScript$$25.TypeFlags;
            var v13404 = v19221.HasBaseTypeOfObject;
            type$$52.typeFlags = v13403 | v13404;
          }
          var v3413 = base$$2.isClassInstance();
          if (v3413) {
            var v13405 = type$$52.isClassInstance();
            var v3405 = !v13405;
            if (v3405) {
              var v13406 = this.checker;
              var v3403 = v13406.errorReporter;
              JAM.call(v3403.simpleError, v3403, [baseRef$$1, "Interface base type must be interface"], JAM.policy.p1);
            } else {
              if (seenInterface) {
                var v13407 = this.checker;
                var v3404 = v13407.errorReporter;
                JAM.call(v3404.simpleError, v3404, [baseRef$$1, "Class may not follow interface as base type"], JAM.policy.p1);
              }
            }
          } else {
            var v3412 = base$$2.isModuleType();
            if (v3412) {
              var v13408 = this.checker;
              var v3406 = v13408.errorReporter;
              JAM.call(v3406.simpleError, v3406, [baseRef$$1, "Types may not be derived from module types"], JAM.policy.p1);
            } else {
              var v3411 = base$$2.members;
              if (v3411) {
                var v3407 = !seenInterface;
                if (v3407) {
                  seenInterface = true;
                }
              } else {
                var v13409 = type$$52.isClassInstance();
                var v3410 = !v13409;
                if (v3410) {
                  var v13410 = this.checker;
                  var v3408 = v13410.errorReporter;
                  JAM.call(v3408.simpleError, v3408, [baseRef$$1, "Interface base type must be interface"], JAM.policy.p1);
                } else {
                  var v13411 = this.checker;
                  var v3409 = v13411.errorReporter;
                  JAM.call(v3409.simpleError, v3409, [baseRef$$1, "Base type must be interface or class"], JAM.policy.p1);
                }
                break;
              }
            }
          }
          i$$101++;
          v3414 = i$$101 < len$$48;
        }
      }
      return;
    }
    function v1069(funcDecl$$31) {
      function v1068(typeName$$10, isModuleName$$9) {
        return JAM.call(_this$$10.functionReturnTypePrivacyErrorReporter, _this$$10, [funcDecl$$31, signature$$10, typeName$$10, isModuleName$$9], JAM.policy.p1);
      }
      function v1067(index$$58) {
        var v13412 = funcDecl$$31.returnStatementsWithExpressions;
        var v3415 = v13412[index$$58];
        return v3415.type;
      }
      function v1066(index$$57, type$$51) {
        var v13413 = funcDecl$$31.returnStatementsWithExpressions;
        var v3416 = v13413[index$$57];
        v3416.type = type$$51;
        return;
      }
      function v1065() {
        var v3417 = funcDecl$$31.returnStatementsWithExpressions;
        return v3417.length;
      }
      function v1064(sym$$39) {
        var v3418 = sym$$39.kind();
        var v13414 = TypeScript$$25.SymbolKind;
        var v3419 = v13414.Parameter;
        return v3418 == v3419;
      }
      function v1063(typeName$$9, isModuleName$$8) {
        var v13415 = signature$$10.parameters;
        var v3420 = v13415[p$$1];
        return JAM.call(_this$$10.functionArgumentPrivacyErrorReporter, _this$$10, [funcDecl$$31, p$$1, v3420, typeName$$9, isModuleName$$8], JAM.policy.p1);
      }
      function v1062(typeName$$8, isModuleName$$7) {
        return JAM.call(_this$$10.functionArgumentPrivacyErrorReporter, _this$$10, [funcDecl$$31, p$$1, symbol$$21, typeName$$8, isModuleName$$7], JAM.policy.p1);
      }
      var _this$$10 = this;
      this.nestingLevel = 0;
      var fnType = funcDecl$$31.type;
      var fgSym$$4 = fnType.symbol;
      var signature$$10 = funcDecl$$31.signature;
      var v13416 = this.checker;
      var v13417 = signature$$10.typeCheckStatus;
      var v3428 = JAM.call(v13416.typeStatusIsFinished, v13416, [v13417]);
      if (v3428) {
        return funcDecl$$31;
      } else {
        var v13418 = signature$$10.typeCheckStatus;
        var v19222 = TypeScript$$25.TypeCheckStatus;
        var v13419 = v19222.Started;
        var v3427 = v13418 == v13419;
        if (v3427) {
          var v25736 = funcDecl$$31.returnTypeAnnotation;
          var v24929 = !v25736;
          if (v24929) {
            v24929 = funcDecl$$31.bod;
          }
          var v23067 = v24929;
          if (v23067) {
            var v24930 = funcDecl$$31.isSignature();
            v23067 = !v24930;
          }
          var v19223 = v23067;
          if (v19223) {
            var v23068 = funcDecl$$31.isConstructor;
            v19223 = !v23068;
          }
          var v13420 = v19223;
          if (v13420) {
            v13420 = JAM.call(this.allReturnsAreVoid, this, [funcDecl$$31]);
          }
          var v3426 = v13420;
          if (v3426) {
            var v3421 = signature$$10.returnType;
            v3421.type = this.voidType;
            return funcDecl$$31;
          } else {
            var v13421 = funcDecl$$31.returnTypeAnnotation;
            var v3425 = v13421 == null;
            if (v3425) {
              var v19224 = this.checker;
              var v13422 = v19224.styleSettings;
              var v3423 = v13422.implicitAny;
              if (v3423) {
                var v13423 = this.checker;
                var v3422 = v13423.errorReporter;
                JAM.call(v3422.styleError, v3422, [funcDecl$$31, "type implicitly set to 'any'"], JAM.policy.p1);
              }
              var v3424 = signature$$10.returnType;
              v3424.type = this.anyType;
              var v13424 = fgSym$$4.flags;
              var v19225 = TypeScript$$25.SymbolFlags;
              var v13425 = v19225.RecursivelyReferenced;
              fgSym$$4.flags = v13424 | v13425;
            }
            return funcDecl$$31;
          }
        }
      }
      var v3429 = TypeScript$$25.TypeCheckStatus;
      signature$$10.typeCheckStatus = v3429.Started;
      var v3430 = this.checker;
      JAM.call(v3430.addStartedPTO, v3430, [signature$$10]);
      var prevScope$$4 = this.scope;
      var prevFnc = this.thisFnc;
      var prevMethodStatus$$2 = this.enclosingFncIsMethod;
      var prevClassNode = this.thisClassNode;
      var v3431 = funcDecl$$31.isMethod();
      var v13426 = !v3431;
      if (v13426) {
        v3431 = funcDecl$$31.isConstructor;
      }
      this.enclosingFncIsMethod = v3431;
      this.thisFnc = funcDecl$$31;
      var v3432 = funcDecl$$31.type;
      var container$$21 = v3432.symbol;
      var prevThisType = this.thisType;
      var v3433 = this.checker;
      var prevLocationInfo$$2 = v3433.locationInfo;
      var funcTable$$1 = null;
      var acceptedContextualType = false;
      var targetParams = null;
      var targetReturnType$$1 = null;
      var v3434 = funcDecl$$31.isAccessor();
      if (v3434) {
        var v13427 = funcDecl$$31.fncFlags;
        var v19226 = TypeScript$$25.FncFlags;
        var v13428 = v19226.GetAccessor;
        v3434 = JAM.call(TypeScript$$25.hasFlag, TypeScript$$25, [v13427, v13428], JAM.policy.p1);
      }
      var isGetter$$4 = v3434;
      var v3435 = funcDecl$$31.isAccessor();
      if (v3435) {
        var v13429 = funcDecl$$31.fncFlags;
        var v19227 = TypeScript$$25.FncFlags;
        var v13430 = v19227.SetAccessor;
        v3435 = JAM.call(TypeScript$$25.hasFlag, TypeScript$$25, [v13429, v13430], JAM.policy.p1);
      }
      var isSetter$$4 = v3435;
      var v3436;
      var v19228 = isGetter$$4 || isSetter$$4;
      if (v19228) {
        v19228 = funcDecl$$31.accessorSymbol;
      }
      var v13432 = v19228;
      if (v13432) {
        var v13431 = funcDecl$$31.accessorSymbol;
        v3436 = v13431.getType();
      } else {
        v3436 = null;
      }
      var accessorType = v3436;
      var v3437 = this.checker;
      var prevModDecl$$1 = v3437.currentModDecl;
      var v13433 = funcDecl$$31.isConstructor;
      if (v13433) {
        var v19229 = funcDecl$$31.isOverload;
        v13433 = !v19229;
      }
      var v3447 = v13433;
      if (v3447) {
        var v13434 = fnType.instanceType;
        var v3439 = v13434 == null;
        if (v3439) {
          var v13435 = this.checker;
          var v3438 = v13435.errorReporter;
          JAM.call(v3438.simpleError, v3438, [funcDecl$$31, "Malformed function body (is this a class named the same as an existing interface?)"], JAM.policy.p1);
          return funcDecl$$31;
        }
        var v3440 = fnType.instanceType;
        this.scope = v3440.constructorScope;
        var ssb = this.scope;
        var v3441 = ssb.valueMembers;
        funcTable$$1 = v3441.allMembers;
      } else {
        var v19230 = funcDecl$$31.isSpecialFn();
        if (v19230) {
          var v24931 = funcDecl$$31.fncFlags;
          var v25737 = TypeScript$$25.FncFlags;
          var v24932 = v25737.Signature;
          var v23069 = v24931 & v24932;
          v19230 = !v23069;
        }
        var v13436 = v19230;
        var v19231 = !v13436;
        if (v19231) {
          v13436 = funcDecl$$31.isOverload;
        }
        var v3446 = v13436;
        if (v3446) {
          funcTable$$1 = funcDecl$$31.symbols;
          var v23070 = funcDecl$$31.fncFlags;
          var v24933 = TypeScript$$25.FncFlags;
          var v23071 = v24933.Static;
          var v19232 = JAM.call(TypeScript$$25.hasFlag, TypeScript$$25, [v23070, v23071], JAM.policy.p1);
          var v13437 = !v19232;
          if (v13437) {
            v13437 = fnType.containedScope;
          }
          var v3442 = v13437;
          if (v3442) {
            this.scope = fnType.containedScope;
          }
        } else {
          var v3443 = funcDecl$$31.bod;
          if (v3443) {
            this.scope = fnType.containedScope;
          }
          ssb = this.scope;
          var v13438 = ssb;
          if (v13438) {
            v13438 = ssb.valueMembers;
          }
          var v3445 = v13438;
          if (v3445) {
            var v3444 = ssb.valueMembers;
            funcTable$$1 = v3444.allMembers;
          }
        }
      }
      var v19233 = funcDecl$$31.isConstructor;
      if (v19233) {
        v19233 = funcDecl$$31.bod;
      }
      var v13439 = v19233;
      if (v13439) {
        var v19234 = funcDecl$$31.fncFlags;
        var v23072 = TypeScript$$25.FncFlags;
        var v19235 = v23072.ClassMethod;
        v13439 = JAM.call(TypeScript$$25.hasFlag, TypeScript$$25, [v19234, v19235], JAM.policy.p1);
      }
      var v3459 = v13439;
      if (v3459) {
        var v23073 = funcDecl$$31.classDecl;
        var v19236 = v23073.type;
        var v13440 = v19236.instanceType;
        var v3448 = v13440.typeFlags;
        var v13441 = TypeScript$$25.TypeFlags;
        var v3449 = v13441.HasBaseType;
        var hasBaseType = JAM.call(TypeScript$$25.hasFlag, TypeScript$$25, [v3448, v3449], JAM.policy.p1);
        var v3450 = !hasBaseType;
        var v13444 = !v3450;
        if (v13444) {
          var v24934 = funcDecl$$31.classDecl;
          var v23074 = v24934.type;
          var v19237 = v23074.instanceType;
          var v13442 = v19237.typeFlags;
          var v19238 = TypeScript$$25.TypeFlags;
          var v13443 = v19238.HasBaseTypeOfObject;
          v3450 = JAM.call(TypeScript$$25.hasFlag, TypeScript$$25, [v13442, v13443], JAM.policy.p1);
        }
        var noSuperCallAllowed = v3450;
        var v13445 = funcDecl$$31.classDecl;
        var v3451 = v13445.varFlags;
        var v13446 = TypeScript$$25.VarFlags;
        var v3452 = v13446.ClassSuperMustBeFirstCallInConstructor;
        var superCallMustBeFirst = JAM.call(TypeScript$$25.hasFlag, TypeScript$$25, [v3451, v3452], JAM.policy.p1);
        var v13447 = noSuperCallAllowed;
        if (v13447) {
          v13447 = JAM.call(this.classConstructorHasSuperCall, this, [funcDecl$$31]);
        }
        var v3458 = v13447;
        if (v3458) {
          var v13448 = this.checker;
          var v3453 = v13448.errorReporter;
          JAM.call(v3453.simpleError, v3453, [funcDecl$$31, "Calls to 'super' constructor are not allowed in classes that either inherit directly from 'Object' or have no base class"], JAM.policy.p1);
        } else {
          if (hasBaseType) {
            if (superCallMustBeFirst) {
              var v23075 = funcDecl$$31.bod;
              var v19239 = !v23075;
              var v23077 = !v19239;
              if (v23077) {
                var v25738 = funcDecl$$31.bod;
                var v24935 = v25738.members;
                var v23076 = v24935.length;
                v19239 = !v23076;
              }
              var v13449 = v19239;
              var v19241 = !v13449;
              if (v19241) {
                var v26353 = funcDecl$$31.bod;
                var v26264 = v26353.members;
                var v26093 = v26264[0];
                var v25739 = v26093.nodeType;
                var v26094 = TypeScript$$25.NodeType;
                var v25740 = v26094.Call;
                var v24936 = v25739 == v25740;
                if (v24936) {
                  var v26397 = funcDecl$$31.bod;
                  var v26354 = v26397.members;
                  var v26265 = v26354[0];
                  var v26095 = v26265.target;
                  var v25741 = v26095.nodeType;
                  var v26096 = TypeScript$$25.NodeType;
                  var v25742 = v26096.Super;
                  v24936 = v25741 == v25742;
                }
                var v23078 = v24936;
                var v24938 = !v23078;
                if (v24938) {
                  var v26355 = funcDecl$$31.bod;
                  var v26266 = v26355.flags;
                  var v26356 = TypeScript$$25.ASTFlags;
                  var v26267 = v26356.StrictMode;
                  var v26097 = JAM.call(TypeScript$$25.hasFlag, TypeScript$$25, [v26266, v26267], JAM.policy.p1);
                  if (v26097) {
                    var v26398 = funcDecl$$31.bod;
                    var v26357 = v26398.members;
                    var v26268 = v26357.length;
                    v26097 = v26268 > 1;
                  }
                  var v25743 = v26097;
                  if (v25743) {
                    var v26399 = funcDecl$$31.bod;
                    var v26358 = v26399.members;
                    var v26269 = v26358[1];
                    var v26098 = v26269.nodeType;
                    var v26270 = TypeScript$$25.NodeType;
                    var v26099 = v26270.Call;
                    v25743 = v26098 == v26099;
                  }
                  var v24937 = v25743;
                  if (v24937) {
                    var v26400 = funcDecl$$31.bod;
                    var v26359 = v26400.members;
                    var v26271 = v26359[1];
                    var v26100 = v26271.target;
                    var v25744 = v26100.nodeType;
                    var v26101 = TypeScript$$25.NodeType;
                    var v25745 = v26101.Super;
                    v24937 = v25744 == v25745;
                  }
                  v23078 = v24937;
                }
                var v19240 = v23078;
                v13449 = !v19240;
              }
              var v3455 = v13449;
              if (v3455) {
                var v13450 = this.checker;
                var v3454 = v13450.errorReporter;
                JAM.call(v3454.simpleError, v3454, [funcDecl$$31, "If a derived class contains initialized properties or constructor parameter properties, the first statement in the constructor body must be a call to the super constructor"], JAM.policy.p1);
              }
            } else {
              var v13451 = JAM.call(this.classConstructorHasSuperCall, this, [funcDecl$$31]);
              var v3457 = !v13451;
              if (v3457) {
                var v13452 = this.checker;
                var v3456 = v13452.errorReporter;
                JAM.call(v3456.simpleError, v3456, [funcDecl$$31, "Constructors for derived classes must contain a call to the class's 'super' constructor"], JAM.policy.p1);
              }
            }
          }
        }
      }
      var v13453 = funcDecl$$31.isMethod();
      if (v13453) {
        var v19242 = funcDecl$$31.type;
        v13453 = v19242.enclosingType;
      }
      var v3464 = v13453;
      if (v3464) {
        var enclosingClassNode = null;
        var v25746 = funcDecl$$31.type;
        var v24939 = v25746.enclosingType;
        var v23079 = v24939.symbol;
        var v19243 = v23079.declAST;
        var v13454 = v19243.nodeType;
        var v19244 = TypeScript$$25.NodeType;
        var v13455 = v19244.FuncDecl;
        var v3463 = v13454 == v13455;
        if (v3463) {
          var v23080 = funcDecl$$31.type;
          var v19245 = v23080.enclosingType;
          var v13456 = v19245.symbol;
          var v3460 = v13456.declAST;
          enclosingClassNode = v3460.classDecl;
        } else {
          var v25747 = funcDecl$$31.type;
          var v24940 = v25747.enclosingType;
          var v23081 = v24940.symbol;
          var v19246 = v23081.declAST;
          var v13457 = v19246.nodeType;
          var v19247 = TypeScript$$25.NodeType;
          var v13458 = v19247.ClassDeclaration;
          var v3462 = v13457 == v13458;
          if (v3462) {
            var v19248 = funcDecl$$31.type;
            var v13459 = v19248.enclosingType;
            var v3461 = v13459.symbol;
            enclosingClassNode = v3461.declAST;
          }
        }
        if (enclosingClassNode) {
          this.thisClassNode = enclosingClassNode;
        }
      }
      var v3469 = fnType.enclosingType;
      if (v3469) {
        var v3465 = fnType.symbol;
        var enclosingSym = v3465.container;
        var v19249 = enclosingSym;
        if (v19249) {
          v19249 = enclosingSym.isType();
        }
        var v13460 = v19249;
        if (v13460) {
          var v19250 = enclosingSym.getType();
          v13460 = v19250.isClass();
        }
        var v3466 = v13460;
        if (v3466) {
          enclosingSym = enclosingSym.container;
        }
        var v19251 = enclosingSym;
        if (v19251) {
          v19251 = enclosingSym.declAST;
        }
        var v13461 = v19251;
        if (v13461) {
          var v23082 = enclosingSym.declAST;
          var v19252 = v23082.nodeType;
          var v23083 = TypeScript$$25.NodeType;
          var v19253 = v23083.ModuleDeclaration;
          v13461 = v19252 == v19253;
        }
        var v3468 = v13461;
        if (v3468) {
          var v3467 = this.checker;
          v3467.currentModDecl = enclosingSym.declAST;
        }
      }
      var v13462 = funcDecl$$31.unitIndex;
      var v3473 = v13462 > 0;
      if (v3473) {
        var v19254 = this.checker;
        var v13463 = v19254.units;
        if (v13463) {
          var v19255 = funcDecl$$31.unitIndex;
          var v24941 = this.checker;
          var v23084 = v24941.units;
          var v19256 = v23084.length;
          v13463 = v19255 < v19256;
        }
        var v3472 = v13463;
        if (v3472) {
          var v3470 = this.checker;
          var v19257 = this.checker;
          var v13464 = v19257.units;
          var v13465 = funcDecl$$31.unitIndex;
          v3470.locationInfo = v13464[v13465];
        } else {
          var v3471 = this.checker;
          v3471.locationInfo = TypeScript$$25.unknownLocationInfo;
        }
      }
      var v3474 = fnType.enclosingType;
      if (v3474) {
        this.thisType = fnType.enclosingType;
      } else {
        this.thisType = prevThisType;
      }
      var v3475 = signature$$10.parameters;
      var paramLen$$4 = v3475.length;
      var v23085 = funcDecl$$31.isConstructor;
      var v19258 = !v23085;
      if (v19258) {
        v19258 = funcDecl$$31.bod;
      }
      var v13466 = v19258;
      if (v13466) {
        var v19259 = funcDecl$$31.isSignature();
        v13466 = !v19259;
      }
      var v3524 = v13466;
      if (v3524) {
        var tmpParamScope = this.scope;
        ssb = this.scope;
        var v19260 = funcDecl$$31.isMethod();
        var v13467 = !v19260;
        if (v13467) {
          var v19261 = funcDecl$$31.returnTypeAnnotation;
          v13467 = v19261 == null;
        }
        var v3493 = v13467;
        if (v3493) {
          var v19262 = prevScope$$4;
          if (v19262) {
            v19262 = funcDecl$$31.name;
          }
          var v13468 = v19262;
          if (v13468) {
            var v23086 = funcDecl$$31.name;
            var v19263 = v23086.isMissing();
            v13468 = !v19263;
          }
          var v3480 = v13468;
          if (v3480) {
            var v13469 = funcDecl$$31.name;
            var v3476 = v13469.text;
            var considerSym = JAM.call(prevScope$$4.findAmbient, prevScope$$4, [v3476, false, false], JAM.policy.p1);
            var v19264 = considerSym;
            if (v19264) {
              v19264 = considerSym.declAST;
            }
            var v13470 = v19264;
            if (v13470) {
              var v19265 = considerSym.declAST;
              v13470 = v19265.type;
            }
            var v3479 = v13470;
            if (v3479) {
              var v3477 = this.checker;
              var v13471 = considerSym.declAST;
              var v3478 = v13471.type;
              JAM.call(v3477.setContextualType, v3477, [v3478, false], JAM.policy.p1);
            }
          }
          var v13472 = this.checker;
          var v3492 = v13472.hasTargetType();
          if (v3492) {
            var v3481 = this.checker;
            var candidateTypeContext = v3481.currentContextualTypeContext;
            var candidateType$$1 = candidateTypeContext.contextualType;
            var v13473 = this.checker;
            var v3491 = JAM.call(v13473.canContextuallyTypeFunction, v13473, [candidateType$$1, funcDecl$$31, true], JAM.policy.p1);
            if (v3491) {
              var v3482;
              var v13474 = candidateType$$1.construct;
              if (v13474) {
                v3482 = candidateType$$1.construct;
              } else {
                v3482 = candidateType$$1.call;
              }
              var candidateSigs$$1 = v3482;
              var v3483 = candidateSigs$$1.signatures;
              candidateTypeContext.targetSig = v3483[0];
              var v3484 = candidateTypeContext.targetSig;
              var candidateParams = v3484.parameters;
              targetParams = candidateParams;
              var v13475 = candidateTypeContext.targetSig;
              var v3485 = v13475.returnType;
              targetReturnType$$1 = v3485.type;
              var v13476 = candidateTypeContext.targetSig;
              var v3488 = v13476.declAST;
              if (v3488) {
                var v19266 = candidateTypeContext.targetSig;
                var v13477 = v19266.declAST;
                var v3487 = v13477.isConstructor;
                if (v3487) {
                  funcDecl$$31.isTargetTypedAsMethod = true;
                } else {
                  var v19267 = candidateTypeContext.targetSig;
                  var v13478 = v19267.declAST;
                  var v3486 = v13478.isMethod();
                  if (v3486) {
                    funcDecl$$31.isTargetTypedAsMethod = true;
                  }
                }
              }
              fgSym$$4.type = candidateTypeContext.contextualType;
              acceptedContextualType = true;
            } else {
              var v13479 = candidateType$$1;
              if (v13479) {
                v13479 = funcDecl$$31.isAccessor();
              }
              var v3490 = v13479;
              if (v3490) {
                accessorType = candidateType$$1;
                candidateTypeContext.targetAccessorType = accessorType;
              } else {
                var v3489 = this.checker;
                v3489.killCurrentContextualType();
              }
            }
          }
        }
        var paramTable = ssb.valueMembers;
        var v3494 = TypeScript$$25.SymbolScopeBuilder;
        var v26515 = JAM.new(v3494, [paramTable, null, null, null, prevScope$$4, container$$21]);
        this.scope = v26515;
        var p$$1 = 0;
        var v3507 = p$$1 < paramLen$$4;
        for (;v3507;) {
          var v3495 = signature$$10.parameters;
          var symbol$$21 = v3495[p$$1];
          var ast$$106 = symbol$$21.declAST;
          var v19268 = this.checker;
          var v13480 = v19268.hasTargetType();
          if (v13480) {
            var v19269 = targetParams;
            if (v19269) {
              var v26102 = this.checker;
              var v25748 = v26102.currentContextualTypeContext;
              var v24942 = v25748.targetSig;
              var v23087 = v24942.hasVariableArgList;
              var v24944 = !v23087;
              if (v24944) {
                var v24943 = targetParams.length;
                v23087 = p$$1 < v24943;
              }
              v19269 = v23087;
            }
            v13480 = v19269;
          }
          var v3502 = v13480;
          if (v3502) {
            var v3496 = this.checker;
            candidateTypeContext = v3496.currentContextualTypeContext;
            var v3497 = candidateTypeContext.targetSig;
            var hasVarArgList = v3497.hasVariableArgList;
            var v3498 = ast$$106;
            var v13481;
            var v23088 = hasVarArgList;
            if (v23088) {
              var v25749 = targetParams.length;
              var v24945 = v25749 - 1;
              v23088 = p$$1 >= v24945;
            }
            var v19272 = v23088;
            if (v19272) {
              var v25750 = targetParams.length;
              var v24946 = v25750 - 1;
              var v23089 = targetParams[v24946];
              var v19270 = v23089.getType();
              v13481 = v19270.elementType;
            } else {
              var v19271 = targetParams[p$$1];
              v13481 = v19271.getType();
            }
            v3498.type = v13481;
            var v3499 = ast$$106.sym;
            var v3500 = ast$$106.type;
            JAM.call(v3499.setType, v3499, [v3500]);
            var v3501 = ast$$106.sym;
            var v13482 = this.checker;
            var v26516 = v13482.getTypeCheckFinishedStatus();
            v3501.typeCheckStatus = v26516;
          } else {
            JAM.call(this.typeCheck, this, [ast$$106]);
          }
          var v3503 = isSetter$$4 && accessorType;
          if (v3503) {
            ast$$106 = JAM.call(this.cast, this, [ast$$106, accessorType], JAM.policy.p1);
          }
          symbol$$21.container = container$$21;
          var v3504 = symbol$$21.getType();
          JAM.call(this.checkTypePrivacy, this, [v3504, container$$21, v1062], JAM.policy.p1);
          var v3505 = paramTable.publicMembers;
          var v3506 = symbol$$21.name;
          JAM.call(v3505.add, v3505, [v3506, symbol$$21], JAM.policy.p1);
          p$$1++;
          v3507 = p$$1 < paramLen$$4;
        }
        this.scope = tmpParamScope;
      } else {
        var v3508 = funcDecl$$31.arguments;
        JAM.call(this.typeCheck, this, [v3508]);
        p$$1 = 0;
        var v3514 = p$$1 < paramLen$$4;
        for (;v3514;) {
          var v23090 = signature$$10.parameters;
          var v19273 = v23090[p$$1];
          var v13483 = v19273.parameter;
          var v3509 = v13483.typeLink;
          var v23091 = funcDecl$$31.arguments;
          var v19274 = v23091.members;
          var v13484 = v19274[p$$1];
          v3509.type = v13484.type;
          var v19275 = signature$$10.parameters;
          var v13485 = v19275[p$$1];
          var v3510 = v13485.getType();
          JAM.call(this.checkTypePrivacy, this, [v3510, container$$21, v1063], JAM.policy.p1);
          var v23092 = funcDecl$$31.arguments;
          var v19276 = v23092.members;
          var v13486 = v19276[p$$1];
          var v3513 = v13486.parameterPropertySym;
          if (v3513) {
            var v23093 = funcDecl$$31.arguments;
            var v19277 = v23093.members;
            var v13487 = v19277[p$$1];
            var v3511 = v13487.parameterPropertySym;
            var v23094 = funcDecl$$31.arguments;
            var v19278 = v23094.members;
            var v13488 = v19278[p$$1];
            var v3512 = v13488.type;
            JAM.call(v3511.setType, v3511, [v3512]);
          }
          p$$1++;
          v3514 = p$$1 < paramLen$$4;
        }
        var v13489 = funcDecl$$31.fncFlags;
        var v19279 = TypeScript$$25.FncFlags;
        var v13490 = v19279.IndexerMember;
        var v3523 = v13489 & v13490;
        if (v3523) {
          var v13491 = !paramLen$$4;
          var v19280 = !v13491;
          if (v19280) {
            v13491 = paramLen$$4 > 1;
          }
          var v3522 = v13491;
          if (v3522) {
            var v13492 = this.checker;
            var v3515 = v13492.errorReporter;
            JAM.call(v3515.simpleError, v3515, [funcDecl$$31, "Index signatures may take one and only one parameter"], JAM.policy.p1);
          } else {
            var v24947 = funcDecl$$31.arguments;
            var v23095 = v24947.members;
            var v19281 = v23095[0];
            var v13493 = v19281.type;
            var v19282 = this.checker;
            var v13494 = v19282.numberType;
            var v3521 = v13493 == v13494;
            if (v3521) {
              var v3516 = fnType.index;
              var v19283 = v3516.flags;
              var v23096 = TypeScript$$25.SignatureFlags;
              var v19284 = v23096.IsNumberIndexer;
              v3516.flags = v19283 | v19284;
            } else {
              var v24948 = funcDecl$$31.arguments;
              var v23097 = v24948.members;
              var v19285 = v23097[0];
              var v13495 = v19285.type;
              var v19286 = this.checker;
              var v13496 = v19286.stringType;
              var v3520 = v13495 == v13496;
              if (v3520) {
                var v3517 = fnType.index;
                var v19287 = v3517.flags;
                var v23098 = TypeScript$$25.SignatureFlags;
                var v19288 = v23098.IsStringIndexer;
                v3517.flags = v19287 | v19288;
              } else {
                var v13497 = this.checker;
                var v3518 = v13497.errorReporter;
                var v19289 = funcDecl$$31.arguments;
                var v13498 = v19289.members;
                var v3519 = v13498[0];
                JAM.call(v3518.simpleError, v3518, [v3519, "Index signatures may only take 'string' or 'number' as their parameter"], JAM.policy.p1);
              }
            }
          }
        }
      }
      var v13499 = funcDecl$$31.bod;
      if (v13499) {
        var v19290 = funcDecl$$31.isSignature();
        v13499 = !v19290;
      }
      var v3556 = v13499;
      if (v3556) {
        var v13500 = funcDecl$$31.isConstructor;
        var v3533 = !v13500;
        if (v3533) {
          JAM.call(this.addFormals, this, [container$$21, signature$$10, funcTable$$1], JAM.policy.p1);
        } else {
          var v13501 = funcDecl$$31.type;
          var v3525 = v13501.symbol;
          var v3526 = funcDecl$$31.arguments;
          var v13502 = funcDecl$$31.fncFlags;
          var v19291 = TypeScript$$25.FncFlags;
          var v13503 = v19291.ClassMethod;
          var v3527 = JAM.call(TypeScript$$25.hasFlag, TypeScript$$25, [v13502, v13503], JAM.policy.p1);
          JAM.call(this.addConstructorLocalArgs, this, [v3525, v3526, funcTable$$1, v3527], JAM.policy.p1);
          var v13504 = this.thisClassNode;
          if (v13504) {
            var v19292 = this.thisClassNode;
            v13504 = v19292.extendsList;
          }
          var v3532 = v13504;
          if (v3532) {
            var tmpScope = this.scope;
            var v3528 = TypeScript$$25.ScopedMembers;
            var funcMembers$$1 = JAM.new(v3528, [funcTable$$1]);
            var v3529 = TypeScript$$25.FilteredSymbolScopeBuilder;
            var v13505 = funcDecl$$31.type;
            var v3530 = v13505.symbol;
            var v26517 = JAM.new(v3529, [funcMembers$$1, prevScope$$4, v3530, v1064]);
            this.scope = v26517;
            var v13506 = this.thisClassNode;
            var v3531 = v13506.extendsList;
            JAM.call(this.typeCheckBaseCalls, this, [v3531]);
            this.scope = tmpScope;
          }
        }
        var v3534 = this.checker;
        var prevMod = v3534.currentModDecl;
        var v23099 = funcDecl$$31.type;
        if (v23099) {
          var v24949 = funcDecl$$31.type;
          v23099 = v24949.symbol;
        }
        var v19293 = v23099;
        if (v19293) {
          var v23100 = funcDecl$$31.isMethod();
          v19293 = !v23100;
        }
        var v13507 = v19293;
        if (v13507) {
          var v23101 = funcDecl$$31.type;
          var v19294 = v23101.symbol;
          v13507 = v19294.declModule;
        }
        var v3536 = v13507;
        if (v3536) {
          var v3535 = this.checker;
          var v19295 = funcDecl$$31.type;
          var v13508 = v19295.symbol;
          v3535.currentModDecl = v13508.declModule;
        }
        if (acceptedContextualType) {
          var v3537 = this.checker;
          var v13509 = this.checker;
          var v3538 = v13509.inProvisionalTypecheckMode();
          JAM.call(v3537.setContextualType, v3537, [null, v3538], JAM.policy.p1);
        }
        var v3539 = funcDecl$$31.bod;
        JAM.call(this.typeCheck, this, [v3539]);
        if (acceptedContextualType) {
          var v3540 = this.checker;
          v3540.unsetContextualType();
        }
        var v3541 = this.checker;
        v3541.currentModDecl = prevMod;
        var v13510 = this.checker;
        var v3548 = v13510.checkControlFlow;
        if (v3548) {
          var cfg = funcDecl$$31.buildControlFlow();
          var v13511 = this.checker;
          var v3543 = v13511.printControlFlowGraph;
          if (v3543) {
            var v19296 = this.checker;
            var v13512 = v19296.errorReporter;
            var v3542 = v13512.outfile;
            JAM.call(cfg.print, cfg, [v3542]);
          }
          var v13513 = this.checker;
          var v3544 = v13513.errorReporter;
          JAM.call(cfg.reportUnreachable, cfg, [v3544]);
          var v13514 = this.checker;
          var v3547 = v13514.checkControlFlowUseDef;
          if (v3547) {
            var v13515 = this.checker;
            var v3545 = v13515.errorReporter;
            var v13516 = funcDecl$$31.type;
            var v3546 = v13516.symbol;
            JAM.call(cfg.useDef, cfg, [v3545, v3546], JAM.policy.p1);
          }
        }
        var v3555 = funcDecl$$31.isConstructor;
        if (v3555) {
          var fns$$1 = funcDecl$$31.scopes;
          var v3549 = fns$$1.members;
          var fnsLen$$1 = v3549.length;
          var freeVars$$2;
          var sym$$38;
          var j$$15 = 0;
          var v3554 = j$$15 < fnsLen$$1;
          for (;v3554;) {
            var v3550 = fns$$1.members;
            var fn$$9 = v3550[j$$15];
            var v13517 = fn$$9.isSignature();
            var v3553 = !v13517;
            if (v3553) {
              var v19297 = fn$$9.fncFlags;
              var v23102 = TypeScript$$25.FncFlags;
              var v19298 = v23102.Method;
              var v13518 = JAM.call(TypeScript$$25.hasFlag, TypeScript$$25, [v19297, v19298], JAM.policy.p1);
              if (v13518) {
                var v23103 = fn$$9.fncFlags;
                var v24950 = TypeScript$$25.FncFlags;
                var v23104 = v24950.Static;
                var v19299 = JAM.call(TypeScript$$25.hasFlag, TypeScript$$25, [v23103, v23104], JAM.policy.p1);
                v13518 = !v19299;
              }
              var v3552 = v13518;
              if (v3552) {
                var v13519 = funcDecl$$31.type;
                var v3551 = v13519.symbol;
                JAM.call(this.checkPromoteFreeVars, this, [fn$$9, v3551], JAM.policy.p1);
              }
            }
            j$$15++;
            v3554 = j$$15 < fnsLen$$1;
          }
        }
      }
      this.scope = prevScope$$4;
      this.thisFnc = prevFnc;
      this.thisClassNode = prevClassNode;
      this.enclosingFncIsMethod = prevMethodStatus$$2;
      this.thisType = prevThisType;
      var v3557 = this.checker;
      v3557.locationInfo = prevLocationInfo$$2;
      var v3558 = this.checker;
      v3558.currentModDecl = prevModDecl$$1;
      var v3559 = signature$$10;
      var v13520 = this.checker;
      var v26518 = v13520.getTypeCheckFinishedStatus();
      v3559.typeCheckStatus = v26518;
      var v3567 = funcDecl$$31.returnTypeAnnotation;
      if (v3567) {
        var v13521 = funcDecl$$31.returnTypeAnnotation;
        var v3560 = v13521.type;
        var v3561 = funcDecl$$31.returnTypeAnnotation;
        JAM.call(this.checkForVoidConstructor, this, [v3560, v3561], JAM.policy.p1);
        var v19300 = signature$$10.returnType;
        var v13522 = v19300.type;
        var v3565 = v13522 == null;
        if (v3565) {
          var v3562 = this.checker;
          var v3563 = this.scope;
          var v3564 = signature$$10.returnType;
          JAM.call(v3562.resolveTypeLink, v3562, [v3563, v3564, false], JAM.policy.p1);
        }
      } else {
        if (targetReturnType$$1) {
          var v3566 = signature$$10.returnType;
          v3566.type = targetReturnType$$1;
        }
      }
      var v23105 = fgSym$$4.flags;
      var v24951 = TypeScript$$25.SymbolFlags;
      var v23106 = v24951.RecursivelyReferenced;
      var v19301 = v23105 & v23106;
      var v13523 = !v19301;
      if (v13523) {
        var v23107 = funcDecl$$31.returnStatementsWithExpressions;
        var v19302 = v23107.length;
        v13523 = v19302 > 0;
      }
      var v3575 = v13523;
      if (v3575) {
        var collection$$2 = {getLength:v1065, setTypeAtIndex:v1066, getTypeAtIndex:v1067};
        var v13524 = funcDecl$$31.returnStatementsWithExpressions;
        var v3568 = v13524[0];
        var bestCommonReturnType = v3568.type;
        var v3569 = this.checker;
        bestCommonReturnType = JAM.call(v3569.findBestCommonType, v3569, [bestCommonReturnType, null, collection$$2, true], JAM.policy.p1);
        if (bestCommonReturnType) {
          var v3570 = signature$$10.returnType;
          var v13525 = this.checker;
          var v26519 = JAM.call(v13525.widenType, v13525, [bestCommonReturnType]);
          v3570.type = v26519;
        } else {
          var i$$100 = 0;
          var v19303 = funcDecl$$31.returnStatementsWithExpressions;
          var v13526 = v19303.length;
          var v3573 = i$$100 < v13526;
          for (;v3573;) {
            var v13527 = this.checker;
            var v3571 = v13527.errorReporter;
            var v13528 = funcDecl$$31.returnStatementsWithExpressions;
            var v3572 = v13528[i$$100];
            JAM.call(v3571.simpleError, v3571, [v3572, "Incompatible return type"], JAM.policy.p1);
            i$$100++;
            var v19304 = funcDecl$$31.returnStatementsWithExpressions;
            var v13529 = v19304.length;
            v3573 = i$$100 < v13529;
          }
          var v3574 = signature$$10.returnType;
          v3574.type = this.anyType;
        }
      }
      var onlyHasThrow = false;
      var v19305 = signature$$10.returnType;
      var v13530 = v19305.type;
      var v3590 = v13530 == null;
      if (v3590) {
        var v13531 = funcDecl$$31.fncFlags;
        var v19306 = TypeScript$$25.FncFlags;
        var v13532 = v19306.HasReturnExpression;
        var v3580 = JAM.call(TypeScript$$25.hasFlag, TypeScript$$25, [v13531, v13532], JAM.policy.p1);
        if (v3580) {
          var v19307 = this.checker;
          var v13533 = v19307.styleSettings;
          var v3577 = v13533.implicitAny;
          if (v3577) {
            var v13534 = this.checker;
            var v3576 = v13534.errorReporter;
            JAM.call(v3576.styleError, v3576, [funcDecl$$31, "type implicitly set to 'any'"], JAM.policy.p1);
          }
          var v3578 = signature$$10.returnType;
          v3578.type = this.anyType;
        } else {
          var v3579 = signature$$10.returnType;
          v3579.type = this.voidType;
        }
      } else {
        var v23108 = signature$$10.returnType;
        var v19308 = v23108.type;
        var v19309 = this.nullType;
        var v13535 = v19308 == v19309;
        var v19312 = !v13535;
        if (v19312) {
          var v23109 = signature$$10.returnType;
          var v19310 = v23109.type;
          var v23110 = this.checker;
          var v19311 = v23110.undefinedType;
          v13535 = v19310 == v19311;
        }
        var v3589 = v13535;
        if (v3589) {
          var v3581 = signature$$10.returnType;
          v3581.type = this.anyType;
        } else {
          var v24952 = signature$$10.returnType;
          var v23111 = v24952.type;
          var v23112 = this.voidType;
          var v19313 = v23111 != v23112;
          if (v19313) {
            var v24953 = signature$$10.returnType;
            var v23113 = v24953.type;
            var v24954 = this.checker;
            var v23114 = v24954.undefinedType;
            v19313 = v23113 != v23114;
          }
          var v13536 = v19313;
          if (v13536) {
            var v23115 = signature$$10.returnType;
            var v19314 = v23115.type;
            var v19315 = this.anyType;
            v13536 = v19314 != v19315;
          }
          var v3588 = v13536;
          if (v3588) {
            var v24955 = funcDecl$$31.isSignature();
            var v23116 = !v24955;
            if (v23116) {
              var v24956 = funcDecl$$31.isConstructor;
              v23116 = !v24956;
            }
            var v19316 = v23116;
            if (v19316) {
              var v24957 = funcDecl$$31.fncFlags;
              var v25751 = TypeScript$$25.FncFlags;
              var v24958 = v25751.HasReturnExpression;
              var v23117 = JAM.call(TypeScript$$25.hasFlag, TypeScript$$25, [v24957, v24958], JAM.policy.p1);
              v19316 = !v23117;
            }
            var v13537 = v19316;
            if (v13537) {
              var v23118 = funcDecl$$31.fncFlags;
              var v24959 = TypeScript$$25.FncFlags;
              var v23119 = v24959.IsFatArrowFunction;
              var v19317 = JAM.call(TypeScript$$25.hasFlag, TypeScript$$25, [v23118, v23119], JAM.policy.p1);
              v13537 = !v19317;
            }
            var v3586 = v13537;
            if (v3586) {
              var v23120 = funcDecl$$31.bod;
              var v19318 = v23120.members;
              var v13538 = v19318.length;
              var v3582 = v13538 > 0;
              if (v3582) {
                var v24960 = funcDecl$$31.bod;
                var v23121 = v24960.members;
                var v19319 = v23121[0];
                var v13539 = v19319.nodeType;
                var v19320 = TypeScript$$25.NodeType;
                var v13540 = v19320.Throw;
                v3582 = v13539 == v13540;
              }
              onlyHasThrow = v3582;
              var v3585 = !onlyHasThrow;
              if (v3585) {
                var v13541 = this.checker;
                var v3583 = v13541.errorReporter;
                var v13542 = funcDecl$$31.returnTypeAnnotation;
                var v19321 = !v13542;
                if (v19321) {
                  v13542 = funcDecl$$31;
                }
                var v3584 = v13542;
                JAM.call(v3583.simpleError, v3583, [v3584, "Function declared a non-void return type, but has no return expression"], JAM.policy.p1);
              }
            }
            var v13543 = signature$$10.returnType;
            var v3587 = v13543.type;
            JAM.call(this.checkTypePrivacy, this, [v3587, container$$21, v1068], JAM.policy.p1);
          }
        }
      }
      var v3603 = funcDecl$$31.accessorSymbol;
      if (v3603) {
        var v3591 = funcDecl$$31.accessorSymbol;
        accessorType = v3591.getType();
        var v19322 = !onlyHasThrow;
        if (v19322) {
          var v23122 = funcDecl$$31.fncFlags;
          var v24961 = TypeScript$$25.FncFlags;
          var v23123 = v24961.GetAccessor;
          v19322 = JAM.call(TypeScript$$25.hasFlag, TypeScript$$25, [v23122, v23123], JAM.policy.p1);
        }
        var v13544 = v19322;
        if (v13544) {
          var v23124 = funcDecl$$31.fncFlags;
          var v24962 = TypeScript$$25.FncFlags;
          var v23125 = v24962.HasReturnExpression;
          var v19323 = JAM.call(TypeScript$$25.hasFlag, TypeScript$$25, [v23124, v23125], JAM.policy.p1);
          v13544 = !v19323;
        }
        var v3593 = v13544;
        if (v3593) {
          var v13545 = this.checker;
          var v3592 = v13545.errorReporter;
          JAM.call(v3592.simpleError, v3592, [funcDecl$$31, "Getters must return a value"], JAM.policy.p1);
        }
        if (accessorType) {
          var v23126 = funcDecl$$31.fncFlags;
          var v24963 = TypeScript$$25.FncFlags;
          var v23127 = v24963.GetAccessor;
          var v19324 = JAM.call(TypeScript$$25.hasFlag, TypeScript$$25, [v23126, v23127], JAM.policy.p1);
          if (v19324) {
            var v24964 = signature$$10.returnType;
            var v23128 = v24964.type;
            v19324 = accessorType != v23128;
          }
          var v13546 = v19324;
          var v19326 = !v13546;
          if (v19326) {
            var v25752 = funcDecl$$31.arguments;
            var v24965 = v25752.members;
            var v23129 = v24965.length;
            var v19325 = v23129 > 0;
            if (v19325) {
              var v26103 = funcDecl$$31.arguments;
              var v25753 = v26103.members;
              var v24966 = v25753[0];
              var v23130 = v24966.type;
              v19325 = accessorType != v23130;
            }
            v13546 = v19325;
          }
          var v3595 = v13546;
          if (v3595) {
            var v13547 = this.checker;
            var v3594 = v13547.errorReporter;
            JAM.call(v3594.simpleError, v3594, [funcDecl$$31, "Getter and setter types do not agree"], JAM.policy.p1);
          }
        } else {
          var v13548 = funcDecl$$31.fncFlags;
          var v19327 = TypeScript$$25.FncFlags;
          var v13549 = v19327.GetAccessor;
          var v3602 = JAM.call(TypeScript$$25.hasFlag, TypeScript$$25, [v13548, v13549], JAM.policy.p1);
          if (v3602) {
            var v3596 = funcDecl$$31.accessorSymbol;
            var v13550 = signature$$10.returnType;
            var v3597 = v13550.type;
            JAM.call(v3596.setType, v3596, [v3597]);
          } else {
            var v23131 = funcDecl$$31.arguments;
            var v19328 = v23131.members;
            var v13551 = v19328.length;
            var v3601 = v13551 != 1;
            if (v3601) {
              var v13552 = this.checker;
              var v3598 = v13552.errorReporter;
              JAM.call(v3598.simpleError, v3598, [funcDecl$$31, "Setters may have one and only one argument"], JAM.policy.p1);
            } else {
              var v3599 = funcDecl$$31.accessorSymbol;
              var v23132 = funcDecl$$31.arguments;
              var v19329 = v23132.members;
              var v13553 = v19329[0];
              var v3600 = v13553.type;
              JAM.call(v3599.setType, v3599, [v3600]);
            }
          }
        }
      }
      JAM.call(this.typeCheckOverloadSignatures, this, [fnType, funcDecl$$31], JAM.policy.p1);
      return funcDecl$$31;
    }
    function v1061(funcDecl$$30, signature$$9, typeName$$7, isModuleName$$6) {
      var reportOnFuncDecl = false;
      var v19330 = funcDecl$$30.returnTypeAnnotation;
      var v13554 = v19330 != null;
      if (v13554) {
        var v23133 = funcDecl$$30.returnTypeAnnotation;
        var v19331 = v23133.type;
        var v23134 = signature$$9.returnType;
        var v19332 = v23134.type;
        v13554 = v19331 == v19332;
      }
      var v3605 = v13554;
      if (v3605) {
        var v3604 = funcDecl$$30.returnTypeAnnotation;
        JAM.call(this.returnTypePrivacyError, this, [v3604, funcDecl$$30, typeName$$7, isModuleName$$6], JAM.policy.p1);
      }
      var i$$99 = 0;
      var v19333 = funcDecl$$30.returnStatementsWithExpressions;
      var v13555 = v19333.length;
      var v3608 = i$$99 < v13555;
      for (;v3608;) {
        var v23135 = funcDecl$$30.returnStatementsWithExpressions;
        var v19334 = v23135[i$$99];
        var v13556 = v19334.type;
        var v19335 = signature$$9.returnType;
        var v13557 = v19335.type;
        var v3607 = v13556 == v13557;
        if (v3607) {
          var v13558 = funcDecl$$30.returnStatementsWithExpressions;
          var v3606 = v13558[i$$99];
          JAM.call(this.returnTypePrivacyError, this, [v3606, funcDecl$$30, typeName$$7, isModuleName$$6], JAM.policy.p1);
        } else {
          reportOnFuncDecl = true;
        }
        i$$99++;
        var v19336 = funcDecl$$30.returnStatementsWithExpressions;
        var v13559 = v19336.length;
        v3608 = i$$99 < v13559;
      }
      if (reportOnFuncDecl) {
        JAM.call(this.returnTypePrivacyError, this, [funcDecl$$30, funcDecl$$30, typeName$$7, isModuleName$$6], JAM.policy.p1);
      }
      return;
    }
    function v1060(astError, funcDecl$$29, typeName$$6, isModuleName$$5) {
      var v3609 = funcDecl$$29.isAccessor();
      if (v3609) {
        var v13560 = funcDecl$$29.fncFlags;
        var v19337 = TypeScript$$25.FncFlags;
        var v13561 = v19337.GetAccessor;
        v3609 = JAM.call(TypeScript$$25.hasFlag, TypeScript$$25, [v13560, v13561], JAM.policy.p1);
      }
      var isGetter$$3 = v3609;
      var v3610 = funcDecl$$29.isAccessor();
      if (v3610) {
        var v13562 = funcDecl$$29.fncFlags;
        var v19338 = TypeScript$$25.FncFlags;
        var v13563 = v19338.SetAccessor;
        v3610 = JAM.call(TypeScript$$25.hasFlag, TypeScript$$25, [v13562, v13563], JAM.policy.p1);
      }
      var isSetter$$3 = v3610;
      var v3611 = funcDecl$$29.fncFlags;
      var v13564 = TypeScript$$25.FncFlags;
      var v3612 = v13564.Public;
      var isPublicFunc$$1 = JAM.call(TypeScript$$25.hasFlag, TypeScript$$25, [v3611, v3612], JAM.policy.p1);
      var v19339 = funcDecl$$29.type;
      var v13565 = v19339.symbol;
      var v13566 = this.checker;
      var v3613 = JAM.call(v13565.getInterfaceDeclFromSymbol, v13565, [v13566]);
      var isContainerInterface$$1 = v3613 != null;
      var typestring$$3 = "";
      if (isModuleName$$5) {
        var quotestring$$3 = "";
        var v13567 = JAM.call(TypeScript$$25.isQuoted, TypeScript$$25, [typeName$$6]);
        var v3614 = !v13567;
        if (v3614) {
          quotestring$$3 = "'";
        }
        var v13568 = " is using inaccessible module " + quotestring$$3;
        var v3615 = v13568 + typeName$$6;
        typestring$$3 = v3615 + quotestring$$3;
      } else {
        var v3616 = " has or is using private type '" + typeName$$6;
        typestring$$3 = v3616 + "'";
      }
      var v3633 = !isContainerInterface$$1;
      if (v3633) {
        if (isGetter$$3) {
          var v13569 = this.checker;
          var v3617 = v13569.errorReporter;
          var v23136;
          if (isPublicFunc$$1) {
            v23136 = "public";
          } else {
            v23136 = "exported";
          }
          var v19340 = v23136;
          var v13570 = v19340 + " getter return type";
          var v3618 = v13570 + typestring$$3;
          JAM.call(v3617.simpleError, v3617, [astError, v3618], JAM.policy.p1);
        } else {
          var v3621 = !isSetter$$3;
          if (v3621) {
            var v13571 = this.checker;
            var v3619 = v13571.errorReporter;
            var v23137;
            if (isPublicFunc$$1) {
              v23137 = "public";
            } else {
              v23137 = "exported";
            }
            var v19341 = v23137;
            var v13572 = v19341 + " function return type";
            var v3620 = v13572 + typestring$$3;
            JAM.call(v3619.simpleError, v3619, [astError, v3620], JAM.policy.p1);
          }
        }
      } else {
        var v3632 = funcDecl$$29.isConstructMember();
        if (v3632) {
          var v13573 = this.checker;
          var v3622 = v13573.errorReporter;
          var v3623 = "exported interface's constructor return type" + typestring$$3;
          JAM.call(v3622.simpleError, v3622, [astError, v3623], JAM.policy.p1);
        } else {
          var v3631 = funcDecl$$29.isCallMember();
          if (v3631) {
            var v13574 = this.checker;
            var v3624 = v13574.errorReporter;
            var v3625 = "exported interface's call return type" + typestring$$3;
            JAM.call(v3624.simpleError, v3624, [astError, v3625], JAM.policy.p1);
          } else {
            var v3630 = funcDecl$$29.isIndexerMember();
            if (v3630) {
              var v13575 = this.checker;
              var v3626 = v13575.errorReporter;
              var v3627 = "exported interface's indexer return type" + typestring$$3;
              JAM.call(v3626.simpleError, v3626, [astError, v3627], JAM.policy.p1);
            } else {
              var v13576 = this.checker;
              var v3628 = v13576.errorReporter;
              var v3629 = "exported interface's function return type" + typestring$$3;
              JAM.call(v3628.simpleError, v3628, [astError, v3629], JAM.policy.p1);
            }
          }
        }
      }
      return;
    }
    function v1059(funcDecl$$28, p, paramSymbol, typeName$$5, isModuleName$$4) {
      var v3634 = funcDecl$$28.isAccessor();
      if (v3634) {
        var v13577 = funcDecl$$28.fncFlags;
        var v19342 = TypeScript$$25.FncFlags;
        var v13578 = v19342.GetAccessor;
        v3634 = JAM.call(TypeScript$$25.hasFlag, TypeScript$$25, [v13577, v13578], JAM.policy.p1);
      }
      var isGetter$$2 = v3634;
      var v3635 = funcDecl$$28.isAccessor();
      if (v3635) {
        var v13579 = funcDecl$$28.fncFlags;
        var v19343 = TypeScript$$25.FncFlags;
        var v13580 = v19343.SetAccessor;
        v3635 = JAM.call(TypeScript$$25.hasFlag, TypeScript$$25, [v13579, v13580], JAM.policy.p1);
      }
      var isSetter$$2 = v3635;
      var v3636 = funcDecl$$28.fncFlags;
      var v13581 = TypeScript$$25.FncFlags;
      var v3637 = v13581.Public;
      var isPublicFunc = JAM.call(TypeScript$$25.hasFlag, TypeScript$$25, [v3636, v3637], JAM.policy.p1);
      var v19344 = funcDecl$$28.type;
      var v13582 = v19344.symbol;
      var v13583 = this.checker;
      var v3638 = JAM.call(v13582.getInterfaceDeclFromSymbol, v13582, [v13583]);
      var isContainerInterface = v3638 != null;
      var typestring$$2 = "";
      if (isModuleName$$4) {
        var quotestring$$2 = "";
        var v13584 = JAM.call(TypeScript$$25.isQuoted, TypeScript$$25, [typeName$$5]);
        var v3639 = !v13584;
        if (v3639) {
          quotestring$$2 = "'";
        }
        var v13585 = " is using inaccessible module " + quotestring$$2;
        var v3640 = v13585 + typeName$$5;
        typestring$$2 = v3640 + quotestring$$2;
      } else {
        var v3641 = " has or is using private type '" + typeName$$5;
        typestring$$2 = v3641 + "'";
      }
      var v3665 = !isContainerInterface;
      if (v3665) {
        var v3652 = funcDecl$$28.isConstructor;
        if (v3652) {
          var v13586 = this.checker;
          var v3642 = v13586.errorReporter;
          var v19345 = funcDecl$$28.arguments;
          var v13587 = v19345.members;
          var v3643 = v13587[p];
          var v23138 = paramSymbol.name;
          var v19346 = "exported class's constructor parameter '" + v23138;
          var v13588 = v19346 + "'";
          var v3644 = v13588 + typestring$$2;
          JAM.call(v3642.simpleError, v3642, [v3643, v3644], JAM.policy.p1);
        } else {
          if (isSetter$$2) {
            var v13589 = this.checker;
            var v3645 = v13589.errorReporter;
            var v19347 = funcDecl$$28.arguments;
            var v13590 = v19347.members;
            var v3646 = v13590[p];
            var v25754;
            if (isPublicFunc) {
              v25754 = "public";
            } else {
              v25754 = "exported";
            }
            var v24967 = v25754;
            var v23139 = v24967 + " setter parameter '";
            var v23140 = paramSymbol.name;
            var v19348 = v23139 + v23140;
            var v13591 = v19348 + "'";
            var v3647 = v13591 + typestring$$2;
            JAM.call(v3645.simpleError, v3645, [v3646, v3647], JAM.policy.p1);
          } else {
            var v3651 = !isGetter$$2;
            if (v3651) {
              var v13592 = this.checker;
              var v3648 = v13592.errorReporter;
              var v19349 = funcDecl$$28.arguments;
              var v13593 = v19349.members;
              var v3649 = v13593[p];
              var v25755;
              if (isPublicFunc) {
                v25755 = "public";
              } else {
                v25755 = "exported";
              }
              var v24968 = v25755;
              var v23141 = v24968 + " function parameter '";
              var v23142 = paramSymbol.name;
              var v19350 = v23141 + v23142;
              var v13594 = v19350 + "'";
              var v3650 = v13594 + typestring$$2;
              JAM.call(v3648.simpleError, v3648, [v3649, v3650], JAM.policy.p1);
            }
          }
        }
      } else {
        var v3664 = funcDecl$$28.isConstructMember();
        if (v3664) {
          var v13595 = this.checker;
          var v3653 = v13595.errorReporter;
          var v19351 = funcDecl$$28.arguments;
          var v13596 = v19351.members;
          var v3654 = v13596[p];
          var v23143 = paramSymbol.name;
          var v19352 = "exported interface's constructor parameter '" + v23143;
          var v13597 = v19352 + "'";
          var v3655 = v13597 + typestring$$2;
          JAM.call(v3653.simpleError, v3653, [v3654, v3655], JAM.policy.p1);
        } else {
          var v3663 = funcDecl$$28.isCallMember();
          if (v3663) {
            var v13598 = this.checker;
            var v3656 = v13598.errorReporter;
            var v19353 = funcDecl$$28.arguments;
            var v13599 = v19353.members;
            var v3657 = v13599[p];
            var v23144 = paramSymbol.name;
            var v19354 = "exported interface's call parameter '" + v23144;
            var v13600 = v19354 + "'";
            var v3658 = v13600 + typestring$$2;
            JAM.call(v3656.simpleError, v3656, [v3657, v3658], JAM.policy.p1);
          } else {
            var v13601 = funcDecl$$28.isIndexerMember();
            var v3662 = !v13601;
            if (v3662) {
              var v13602 = this.checker;
              var v3659 = v13602.errorReporter;
              var v19355 = funcDecl$$28.arguments;
              var v13603 = v19355.members;
              var v3660 = v13603[p];
              var v23145 = paramSymbol.name;
              var v19356 = "exported interface's function parameter '" + v23145;
              var v13604 = v19356 + "'";
              var v3661 = v13604 + typestring$$2;
              JAM.call(v3659.simpleError, v3659, [v3660, v3661], JAM.policy.p1);
            }
          }
        }
      }
      return;
    }
    function v1058(sgroup, declSymbol$$4, errorCallback$$6) {
      if (sgroup) {
        var v3666 = sgroup.signatures;
        var len$$47 = v3666.length;
        var i$$98 = 0;
        var v19357 = sgroup.signatures;
        var v13605 = v19357.length;
        var v3675 = i$$98 < v13605;
        for (;v3675;) {
          var v3667 = sgroup.signatures;
          var signature$$8 = v3667[i$$98];
          var v13606 = len$$47 > 1;
          if (v13606) {
            var v19358 = sgroup.definitionSignature;
            v13606 = signature$$8 == v19358;
          }
          var v3668 = v13606;
          if (v3668) {
            i$$98++;
            var v19359 = sgroup.signatures;
            var v13607 = v19359.length;
            v3675 = i$$98 < v13607;
            continue;
          }
          var v3670 = signature$$8.returnType;
          if (v3670) {
            var v13608 = signature$$8.returnType;
            var v3669 = v13608.type;
            JAM.call(this.checkTypePrivacy, this, [v3669, declSymbol$$4, errorCallback$$6], JAM.policy.p1);
          }
          var v3671 = signature$$8.parameters;
          var paramLen$$3 = v3671.length;
          var j$$14 = 0;
          var v3674 = j$$14 < paramLen$$3;
          for (;v3674;) {
            var v3672 = signature$$8.parameters;
            var param$$7 = v3672[j$$14];
            var v3673 = param$$7.getType();
            JAM.call(this.checkTypePrivacy, this, [v3673, declSymbol$$4, errorCallback$$6], JAM.policy.p1);
            j$$14++;
            v3674 = j$$14 < paramLen$$3;
          }
          i$$98++;
          var v19360 = sgroup.signatures;
          var v13609 = v19360.length;
          v3675 = i$$98 < v13609;
        }
      }
      return;
    }
    function v1057(type$$50, declSymbol$$3, errorCallback$$5) {
      function v1056(key$$43, s$$26, unused) {
        var sym$$37 = s$$26;
        var v19361 = sym$$37.flags;
        var v23146 = TypeScript$$25.SymbolFlags;
        var v19362 = v23146.BuiltIn;
        var v13610 = JAM.call(TypeScript$$25.hasFlag, TypeScript$$25, [v19361, v19362], JAM.policy.p1);
        var v3677 = !v13610;
        if (v3677) {
          var v3676 = sym$$37.getType();
          JAM.call(_this$$9.checkTypePrivacy, _this$$9, [v3676, declSymbol$$3, errorCallback$$5], JAM.policy.p1);
        }
        return;
      }
      var _this$$9 = this;
      var v19363 = type$$50;
      if (v19363) {
        var v23147 = type$$50.primitiveTypeClass;
        var v24969 = TypeScript$$25.Primitive;
        var v23148 = v24969.None;
        v19363 = v23147 == v23148;
      }
      var v13611 = v19363;
      var v3678 = !v13611;
      if (v3678) {
        return;
      }
      var v3680 = type$$50.isArray();
      if (v3680) {
        var v3679 = type$$50.elementType;
        return JAM.call(this.checkTypePrivacy, this, [v3679, declSymbol$$3, errorCallback$$5], JAM.policy.p1);
      }
      var v23149 = type$$50.symbol;
      if (v23149) {
        var v24970 = type$$50.symbol;
        v23149 = v24970.name;
      }
      var v19364 = v23149;
      if (v19364) {
        var v24971 = type$$50.symbol;
        var v23150 = v24971.name;
        v19364 = v23150 != "_anonymous";
      }
      var v13612 = v19364;
      if (v13612) {
        var v25756 = type$$50.call;
        var v24972 = v25756 == null;
        if (v24972) {
          var v25757 = type$$50.construct;
          v24972 = v25757 == null;
        }
        var v23151 = v24972;
        if (v23151) {
          var v24973 = type$$50.index;
          v23151 = v24973 == null;
        }
        var v19365 = v23151;
        var v23153 = !v19365;
        if (v23153) {
          var v23152 = type$$50.members;
          if (v23152) {
            var v24974 = type$$50.isClass();
            v23152 = !v24974;
          }
          v19365 = v23152;
        }
        v13612 = v19365;
      }
      var v3682 = v13612;
      if (v3682) {
        var v3681 = type$$50.symbol;
        return JAM.call(this.checkSymbolPrivacy, this, [v3681, declSymbol$$3, errorCallback$$5], JAM.policy.p1);
      }
      var v3684 = type$$50.members;
      if (v3684) {
        var v13613 = type$$50.members;
        var v3683 = v13613.allMembers;
        JAM.call(v3683.map, v3683, [v1056, null], JAM.policy.p1);
      }
      var v3685 = type$$50.call;
      JAM.call(this.checkSignatureGroupPrivacy, this, [v3685, declSymbol$$3, errorCallback$$5], JAM.policy.p1);
      var v3686 = type$$50.construct;
      JAM.call(this.checkSignatureGroupPrivacy, this, [v3686, declSymbol$$3, errorCallback$$5], JAM.policy.p1);
      var v3687 = type$$50.index;
      JAM.call(this.checkSignatureGroupPrivacy, this, [v3687, declSymbol$$3, errorCallback$$5], JAM.policy.p1);
      return;
    }
    function v1055(typeSymbol$$5, declSymbol$$2, errorCallback$$4) {
      var externalModuleSymbol = null;
      var declSymbolPath = null;
      var v13614 = this.checker;
      var v3695 = JAM.call(typeSymbol$$5.isExternallyVisible, typeSymbol$$5, [v13614]);
      if (v3695) {
        var typeSymbolPath = typeSymbol$$5.pathToRoot();
        declSymbolPath = declSymbol$$2.pathToRoot();
        var typeSymbolLength = typeSymbolPath.length;
        var declSymbolPathLength = declSymbolPath.length;
        var v3693 = typeSymbolLength > 0;
        if (v3693) {
          var v25758 = typeSymbolLength - 1;
          var v24975 = typeSymbolPath[v25758];
          var v23154 = v24975.getType();
          var v19366 = v23154.isModuleType();
          if (v19366) {
            var v24976 = typeSymbolLength - 1;
            var v23155 = typeSymbolPath[v24976];
            v19366 = v23155.isDynamic;
          }
          var v13615 = v19366;
          if (v13615) {
            var v23156 = typeSymbolLength - 1;
            var v19367 = typeSymbolPath[v23156];
            var v23157 = declSymbolPathLength - 1;
            var v19368 = declSymbolPath[v23157];
            v13615 = v19367 != v19368;
          }
          var v3692 = v13615;
          if (v3692) {
            var v3688 = typeSymbolLength - 1;
            externalModuleSymbol = typeSymbolPath[v3688];
          } else {
            var v3691 = typeSymbolLength > 1;
            if (v3691) {
              var v25759 = typeSymbolLength - 2;
              var v24977 = typeSymbolPath[v25759];
              var v23158 = v24977.getType();
              var v19369 = v23158.isModuleType();
              if (v19369) {
                var v24978 = typeSymbolLength - 2;
                var v23159 = typeSymbolPath[v24978];
                v19369 = v23159.isDynamic;
              }
              var v13616 = v19369;
              if (v13616) {
                var v19370 = declSymbolPathLength == 1;
                var v23162 = !v19370;
                if (v23162) {
                  var v24979 = typeSymbolLength - 2;
                  var v23160 = typeSymbolPath[v24979];
                  var v24980 = declSymbolPathLength - 2;
                  var v23161 = declSymbolPath[v24980];
                  v19370 = v23160 != v23161;
                }
                v13616 = v19370;
              }
              var v3690 = v13616;
              if (v3690) {
                var v3689 = typeSymbolLength - 2;
                externalModuleSymbol = typeSymbolPath[v3689];
              }
            }
          }
        }
        var v3694 = externalModuleSymbol == null;
        if (v3694) {
          return;
        }
      }
      var v3696 = this.checker;
      var interfaceDecl$$5 = JAM.call(declSymbol$$2.getInterfaceDeclFromSymbol, declSymbol$$2, [v3696]);
      var v13617 = interfaceDecl$$5;
      if (v13617) {
        var v23163 = interfaceDecl$$5.varFlags;
        var v24981 = TypeScript$$25.VarFlags;
        var v23164 = v24981.Exported;
        var v19371 = JAM.call(TypeScript$$25.hasFlag, TypeScript$$25, [v23163, v23164], JAM.policy.p1);
        v13617 = !v19371;
      }
      var v3697 = v13617;
      if (v3697) {
        return;
      }
      var checkVisibilitySymbol = declSymbol$$2;
      var varDecl$$18 = declSymbol$$2.getVarDeclFromSymbol();
      if (varDecl$$18) {
        var v13618 = varDecl$$18.varFlags;
        var v19372 = TypeScript$$25.VarFlags;
        var v13619 = v19372.Private;
        var v3699 = JAM.call(TypeScript$$25.hasFlag, TypeScript$$25, [v13618, v13619], JAM.policy.p1);
        if (v3699) {
          return;
        } else {
          var v13620 = varDecl$$18.varFlags;
          var v19373 = TypeScript$$25.VarFlags;
          var v13621 = v19373.Public;
          var v3698 = JAM.call(TypeScript$$25.hasFlag, TypeScript$$25, [v13620, v13621], JAM.policy.p1);
          if (v3698) {
            checkVisibilitySymbol = declSymbol$$2.container;
          }
        }
      }
      var v13622 = this.checker;
      var v3706 = JAM.call(checkVisibilitySymbol.isExternallyVisible, checkVisibilitySymbol, [v13622]);
      if (v3706) {
        var privateSymbolName = typeSymbol$$5.name;
        var v3704 = externalModuleSymbol != null;
        if (v3704) {
          var prettyName$$2 = JAM.call(externalModuleSymbol.getPrettyNameOfDynamicModule, externalModuleSymbol, [declSymbolPath]);
          var v3703 = prettyName$$2 != null;
          if (v3703) {
            var v3700 = this.currentScript;
            var v3701 = prettyName$$2.symbol;
            var v3702 = this.checker;
            JAM.call(v3700.AddExternallyVisibleImportedSymbol, v3700, [v3701, v3702], JAM.policy.p1);
            return;
          } else {
            privateSymbolName = externalModuleSymbol.prettyName;
          }
        }
        var v13623 = typeSymbol$$5.name;
        var v3705 = v13623 != privateSymbolName;
        JAM.call(errorCallback$$4, null, [privateSymbolName, v3705], JAM.policy.p1);
      }
      return;
    }
    function v1054(bases$$5, declSymbol$$1, extendsList$$8) {
      function v1053(typeName$$4, isModuleName$$3) {
        return JAM.call(_this$$8.baseListPrivacyErrorReporter, _this$$8, [bases$$5, i$$97, declSymbol$$1, extendsList$$8, typeName$$4, isModuleName$$3], JAM.policy.p1);
      }
      var _this$$8 = this;
      if (bases$$5) {
        var v3707 = bases$$5.members;
        var basesLen$$1 = v3707.length;
        var i$$97 = 0;
        var v3710 = i$$97 < basesLen$$1;
        for (;v3710;) {
          var v24982 = bases$$5.members;
          var v23165 = v24982[i$$97];
          var v19374 = v23165.type;
          var v13624 = !v19374;
          var v19377 = !v13624;
          if (v19377) {
            var v24983 = bases$$5.members;
            var v23166 = v24983[i$$97];
            var v19375 = v23166.type;
            var v23167 = this.checker;
            var v19376 = v23167.anyType;
            v13624 = v19375 == v19376;
          }
          var v3708 = v13624;
          if (v3708) {
            i$$97++;
            v3710 = i$$97 < basesLen$$1;
            continue;
          }
          var v23168 = bases$$5.members;
          var v19378 = v23168[i$$97];
          var v13625 = v19378.type;
          var v3709 = v13625.symbol;
          JAM.call(this.checkSymbolPrivacy, this, [v3709, declSymbol$$1, v1053], JAM.policy.p1);
          i$$97++;
          v3710 = i$$97 < basesLen$$1;
        }
      }
      return;
    }
    function v1052(bases$$4, i$$96, declSymbol, extendsList$$7, typeName$$3, isModuleName$$2) {
      var v19379 = bases$$4.members;
      var v13626 = v19379[i$$96];
      var v3711 = v13626.type;
      var baseSymbol$$2 = v3711.symbol;
      var v3712;
      var v23169 = declSymbol.declAST;
      var v19380 = v23169.nodeType;
      var v23170 = TypeScript$$25.NodeType;
      var v19381 = v23170.InterfaceDeclaration;
      var v13627 = v19380 == v19381;
      if (v13627) {
        v3712 = "interface";
      } else {
        v3712 = "class";
      }
      var declTypeString = v3712;
      var v3713;
      if (extendsList$$7) {
        v3713 = "extends";
      } else {
        v3713 = "implements";
      }
      var baseListTypeString = v3713;
      var v3714;
      var v23171 = baseSymbol$$2.declAST;
      var v19382 = v23171.nodeType;
      var v23172 = TypeScript$$25.NodeType;
      var v19383 = v23172.InterfaceDeclaration;
      var v13628 = v19382 == v19383;
      if (v13628) {
        v3714 = "interface";
      } else {
        v3714 = "class";
      }
      var baseTypeString = v3714;
      var typestring$$1 = "";
      if (isModuleName$$2) {
        var quotestring$$1 = "";
        var v13629 = JAM.call(TypeScript$$25.isQuoted, TypeScript$$25, [typeName$$3]);
        var v3715 = !v13629;
        if (v3715) {
          quotestring$$1 = "'";
        }
        typestring$$1 = " is using inaccessible module ";
        var v23173 = " " + baseTypeString;
        var v19384 = v23173 + " from private module ";
        var v13630 = v19384 + quotestring$$1;
        var v3716 = v13630 + typeName$$3;
        baseTypeString = v3716 + quotestring$$1;
      } else {
        var v19385 = " private " + baseTypeString;
        var v13631 = v19385 + " '";
        var v3717 = v13631 + typeName$$3;
        baseTypeString = v3717 + "'";
      }
      var v13632 = this.checker;
      var v3718 = v13632.errorReporter;
      var v13633 = bases$$4.members;
      var v3719 = v13633[i$$96];
      var v25760 = "exported " + declTypeString;
      var v24984 = v25760 + " '";
      var v24985 = declSymbol.name;
      var v23174 = v24984 + v24985;
      var v19386 = v23174 + "' ";
      var v13634 = v19386 + baseListTypeString;
      var v3720 = v13634 + baseTypeString;
      JAM.call(v3718.simpleError, v3718, [v3719, v3720], JAM.policy.p1);
      return;
    }
    function v1051(funcDecl$$27) {
      function preFindSuperCall(ast$$105, parent$$67, walker$$51) {
        var go$$5 = true;
        var v3722 = ast$$105.nodeType;
        switch(v3722) {
          case TypeScript$$25.NodeType.FuncDecl:
            go$$5 = false;
            break;
          case TypeScript$$25.NodeType.Call:
            var call = ast$$105;
            var v19387 = call.target;
            var v13635 = v19387.nodeType;
            var v19388 = TypeScript$$25.NodeType;
            var v13636 = v19388.Super;
            var v3721 = v13635 == v13636;
            if (v3721) {
              go$$5 = false;
              foundSuper = true;
            }
          ;
          default:
          ;
        }
        var v3723 = walker$$51.options;
        v3723.goChildren = go$$5;
        return ast$$105;
      }
      var foundSuper = false;
      var v3724 = TypeScript$$25.getAstWalkerFactory();
      var v3725 = funcDecl$$27.bod;
      JAM.call(v3724.walk, v3724, [v3725, preFindSuperCall], JAM.policy.p1);
      return foundSuper;
    }
    function v1050(funcDecl$$26) {
      function v1049(ast$$104, parent$$66, walker$$50) {
        var go$$4 = true;
        var v3727 = ast$$104.nodeType;
        switch(v3727) {
          case TypeScript$$25.NodeType.FuncDecl:
            go$$4 = false;
            break;
          case TypeScript$$25.NodeType.Return:
            var returnStmt = ast$$104;
            var v3726 = returnStmt.returnExpression;
            if (v3726) {
              allReturnsAreVoid = false;
              go$$4 = false;
            }
          ;
          default:
          ;
        }
        var v3728 = walker$$50.options;
        v3728.goChildren = go$$4;
        var v3729 = walker$$50.options;
        v3729.goNextSibling = go$$4;
        return ast$$104;
      }
      var allReturnsAreVoid = true;
      var v23175 = funcDecl$$26.signature;
      var v19389 = v23175.returnType;
      var v13637 = v19389.type;
      var v3732 = v13637 == null;
      if (v3732) {
        var preFindReturnExpressionTypes = v1049;
        var v3730 = TypeScript$$25.getAstWalkerFactory();
        var v3731 = funcDecl$$26.bod;
        JAM.call(v3730.walk, v3730, [v3731, preFindReturnExpressionTypes], JAM.policy.p1);
      }
      return allReturnsAreVoid;
    }
    function v1048(funcDecl$$25, constructorSym) {
      var freeVars$$1 = funcDecl$$25.freeVariables;
      var k$$14 = 0;
      var len$$46 = freeVars$$1.length;
      var v3740 = k$$14 < len$$46;
      for (;v3740;) {
        var sym$$36 = freeVars$$1[k$$14];
        var v19390 = sym$$36.isInstanceProperty();
        var v13638 = !v19390;
        if (v13638) {
          var v19391 = sym$$36.container;
          v13638 = v19391 == constructorSym;
        }
        var v3739 = v13638;
        if (v3739) {
          var v3733 = TypeScript$$25.instanceFilter;
          v3733.reset();
          var v13639 = this.scope;
          var v13640 = TypeScript$$25.instanceFilter;
          var v13641 = sym$$36.name;
          var v3736 = JAM.call(v13639.search, v13639, [v13640, v13641, false, false], JAM.policy.p1);
          if (v3736) {
            var v13642 = this.checker;
            var v3734 = v13642.errorReporter;
            var v24986 = sym$$36.name;
            var v23176 = "Constructor-local variable shadows class property '" + v24986;
            var v19392 = v23176 + "'. To access the class property, use 'self.";
            var v19393 = sym$$36.name;
            var v13643 = v19392 + v19393;
            var v3735 = v13643 + "'";
            JAM.call(v3734.simpleError, v3734, [funcDecl$$25, v3735], JAM.policy.p1);
          }
          var v13644 = this.checker;
          var v3737 = v13644.errorReporter;
          var v19394 = sym$$36.name;
          var v13645 = "Constructor-local variables may not be accessed from instance method bodies. Consider changing local variable '" + v19394;
          var v3738 = v13645 + "' to a class property";
          JAM.call(v3737.simpleError, v3737, [funcDecl$$25, v3738], JAM.policy.p1);
        }
        k$$14++;
        v3740 = k$$14 < len$$46;
      }
      return;
    }
    function v1047(funcDecl$$24) {
      var v13646 = funcDecl$$24.isMethod();
      var v3743 = !v13646;
      if (v3743) {
        var freeVars = funcDecl$$24.freeVariables;
        var k$$13 = 0;
        var len$$45 = freeVars.length;
        var v3742 = k$$13 < len$$45;
        for (;v3742;) {
          var sym$$35 = freeVars[k$$13];
          var v3741 = sym$$35.isInstanceProperty();
          if (v3741) {
            return true;
          }
          k$$13++;
          v3742 = k$$13 < len$$45;
        }
      }
      var fns = funcDecl$$24.scopes;
      var v3744 = fns.members;
      var fnsLen = v3744.length;
      var j$$13 = 0;
      var v3747 = j$$13 < fnsLen;
      for (;v3747;) {
        var v3745 = fns.members;
        var fn$$8 = v3745[j$$13];
        var v3746 = JAM.call(this.checkInitSelf, this, [fn$$8]);
        if (v3746) {
          return true;
        }
        j$$13++;
        v3747 = j$$13 < fnsLen;
      }
      return false;
    }
    function v1046(container$$20, args$$14, table$$9, isClass$$1) {
      if (args$$14) {
        var v3748 = args$$14.members;
        var len$$44 = v3748.length;
        var i$$95 = 0;
        var v3761 = i$$95 < len$$44;
        for (;v3761;) {
          var v3749 = args$$14.members;
          var local$$1 = v3749[i$$95];
          var v19395 = local$$1.sym;
          var v13647 = v19395 == null;
          var v19397 = !v13647;
          if (v19397) {
            var v19396 = isClass$$1;
            var v23179 = !v19396;
            if (v23179) {
              var v24987 = local$$1.sym;
              var v23177 = v24987.kind();
              var v24988 = TypeScript$$25.SymbolKind;
              var v23178 = v24988.Field;
              v19396 = v23177 != v23178;
            }
            v13647 = v19396;
          }
          var v3760 = v13647;
          if (v3760) {
            var result$$29 = null;
            var v23180 = local$$1.id;
            var v19398 = v23180.text;
            var v13648 = result$$29 = JAM.call(table$$9.lookup, table$$9, [v19398]);
            var v3759 = v13648 == null;
            if (v3759) {
              JAM.call(this.resolveBoundDecl, this, [local$$1]);
              var v3750 = TypeScript$$25.ValueLocation;
              var localVar$$1 = new v3750;
              var v3751 = TypeScript$$25.TypeLink;
              var v26520 = new v3751;
              localVar$$1.typeLink = v26520;
              var v3752 = TypeScript$$25.ParameterSymbol;
              var v13649 = local$$1.id;
              var v3753 = v13649.text;
              var v3754 = local$$1.minChar;
              var v19399 = this.checker;
              var v13650 = v19399.locationInfo;
              var v3755 = v13650.unitIndex;
              var varSym$$2 = JAM.new(v3752, [v3753, v3754, v3755, localVar$$1]);
              varSym$$2.declAST = local$$1;
              localVar$$1.symbol = varSym$$2;
              var v3756 = localVar$$1.typeLink;
              v3756.type = local$$1.type;
              var v3757 = localVar$$1.symbol;
              v3757.container = container$$20;
              local$$1.sym = localVar$$1.symbol;
              var v13651 = local$$1.id;
              var v3758 = v13651.text;
              JAM.call(table$$9.add, table$$9, [v3758, varSym$$2], JAM.policy.p1);
            } else {
              var v26521 = result$$29.getType();
              local$$1.type = v26521;
              local$$1.sym = result$$29;
            }
          }
          i$$95++;
          v3761 = i$$95 < len$$44;
        }
      }
      return;
    }
    function v1045(scope$$30, container$$19, vars$$3, table$$8, isModContainer) {
      var v3762 = vars$$3.members;
      var len$$43 = v3762.length;
      var hasArgsDef = false;
      var i$$94 = 0;
      var v3786 = i$$94 < len$$43;
      for (;v3786;) {
        var v3763 = vars$$3.members;
        var local = v3763[i$$94];
        var v19400 = local.sym;
        var v13652 = v19400 == null;
        var v19403 = !v13652;
        if (v19403) {
          var v23181 = local.sym;
          var v19401 = v23181.kind();
          var v23182 = TypeScript$$25.SymbolKind;
          var v19402 = v23182.Field;
          v13652 = v19401 != v19402;
        }
        var v3785 = v13652;
        if (v3785) {
          var result$$28 = null;
          var v23183 = local.id;
          var v19404 = v23183.text;
          var v13653 = result$$28 = JAM.call(table$$8.lookup, table$$8, [v19404]);
          var v3784 = v13653 == null;
          if (v3784) {
            var v3764 = TypeScript$$25.ValueLocation;
            var localVar = new v3764;
            var v3765 = TypeScript$$25.TypeLink;
            var v26522 = new v3765;
            localVar.typeLink = v26522;
            var varSym$$1 = null;
            var v13654 = local.varFlags;
            var v19405 = TypeScript$$25.VarFlags;
            var v13655 = v19405.Static;
            var v3774 = JAM.call(TypeScript$$25.hasFlag, TypeScript$$25, [v13654, v13655], JAM.policy.p1);
            if (v3774) {
              var v13656 = local.varFlags;
              var v19406 = TypeScript$$25.VarFlags;
              var v13657 = v19406.LocalStatic;
              local.varFlags = v13656 | v13657;
              var v3766 = TypeScript$$25.FieldSymbol;
              var v13658 = local.id;
              var v3767 = v13658.text;
              var v3768 = local.minChar;
              var v19407 = this.checker;
              var v13659 = v19407.locationInfo;
              var v3769 = v13659.unitIndex;
              varSym$$1 = JAM.new(v3766, [v3767, v3768, v3769, true, localVar]);
            } else {
              var v3770 = TypeScript$$25.VariableSymbol;
              var v13660 = local.id;
              var v3771 = v13660.text;
              var v3772 = local.minChar;
              var v19408 = this.checker;
              var v13661 = v19408.locationInfo;
              var v3773 = v13661.unitIndex;
              varSym$$1 = JAM.new(v3770, [v3771, v3772, v3773, localVar]);
            }
            var v3775 = local.varFlags;
            JAM.call(varSym$$1.transferVarFlags, varSym$$1, [v3775]);
            localVar.symbol = varSym$$1;
            varSym$$1.declAST = local;
            var v3776 = localVar.typeLink;
            v3776.ast = local.typeExpr;
            var v3777 = this.checker;
            var v3778 = localVar.typeLink;
            JAM.call(v3777.resolveTypeLink, v3777, [scope$$30, v3778, false], JAM.policy.p1);
            var v19409 = local.type;
            var v13662 = v19409 == null;
            if (v13662) {
              var v19410 = local.init;
              v13662 = v19410 == null;
            }
            var v3779 = v13662;
            if (v3779) {
              local.type = this.anyType;
            }
            var v3780 = localVar.typeLink;
            v3780.type = local.type;
            var v3781 = localVar.symbol;
            v3781.container = container$$19;
            local.sym = localVar.symbol;
            var v13663 = local.id;
            var v3782 = v13663.text;
            JAM.call(table$$8.add, table$$8, [v3782, varSym$$1], JAM.policy.p1);
            var v19411 = local.id;
            var v13664 = v19411.text;
            var v3783 = v13664 == "arguments";
            if (v3783) {
              hasArgsDef = true;
            }
          } else {
            var v26523 = result$$28.getType();
            local.type = v26523;
            local.sym = result$$28;
          }
        }
        i$$94++;
        v3786 = i$$94 < len$$43;
      }
      var v3795 = !isModContainer;
      if (v3795) {
        var v3794 = !hasArgsDef;
        if (v3794) {
          var v3787 = TypeScript$$25.ValueLocation;
          var argLoc = new v3787;
          var v3788 = TypeScript$$25.TypeLink;
          var v26524 = new v3788;
          argLoc.typeLink = v26524;
          var v3789 = TypeScript$$25.VariableSymbol;
          var v3790 = vars$$3.minChar;
          var v19412 = this.checker;
          var v13665 = v19412.locationInfo;
          var v3791 = v13665.unitIndex;
          var theArgSym = JAM.new(v3789, ["arguments", v3790, v3791, argLoc]);
          var v13666 = this.iargumentsInterfaceType;
          var v3792 = !v13666;
          if (v3792) {
            var argumentsSym = JAM.call(scope$$30.find, scope$$30, ["IArguments", false, true], JAM.policy.p1);
            if (argumentsSym) {
              var v13667 = argumentsSym.flags;
              var v19413 = TypeScript$$25.SymbolFlags;
              var v13668 = v19413.CompilerGenerated;
              argumentsSym.flags = v13667 | v13668;
              var v26525 = argumentsSym.getType();
              this.iargumentsInterfaceType = v26525;
            } else {
              this.iargumentsInterfaceType = this.anyType;
            }
          }
          var v3793 = argLoc.typeLink;
          v3793.type = this.iargumentsInterfaceType;
          JAM.call(table$$8.add, table$$8, ["arguments", theArgSym], JAM.policy.p1);
        }
      }
      return;
    }
    function v1044(container$$18, signature$$7, table$$7) {
      var v3796 = signature$$7.parameters;
      var len$$42 = v3796.length;
      var i$$93 = 0;
      var v3799 = i$$93 < len$$42;
      for (;v3799;) {
        var v3797 = signature$$7.parameters;
        var symbol$$20 = v3797[i$$93];
        symbol$$20.container = container$$18;
        var v3798 = symbol$$20.name;
        JAM.call(table$$7.add, table$$7, [v3798, symbol$$20], JAM.policy.p1);
        i$$93++;
        v3799 = i$$93 < len$$42;
      }
      return;
    }
    function v1043(trinex) {
      var v3800 = trinex.operand1;
      var v26526 = JAM.call(this.typeCheck, this, [v3800]);
      trinex.operand1 = v26526;
      var v3801 = trinex.operand2;
      var v26527 = JAM.call(this.typeCheck, this, [v3801]);
      trinex.operand2 = v26527;
      var v3802 = trinex.operand3;
      var v26528 = JAM.call(this.typeCheck, this, [v3802]);
      trinex.operand3 = v26528;
      var v3803 = trinex.operand2;
      var leftType$$5 = v3803.type;
      var v3804 = trinex.operand3;
      var rightType$$4 = v3804.type;
      var v3810 = leftType$$5 == rightType$$4;
      if (v3810) {
        trinex.type = leftType$$5;
      } else {
        var v13669 = this.checker;
        var v3809 = JAM.call(v13669.sourceIsSubtypeOfTarget, v13669, [leftType$$5, rightType$$4], JAM.policy.p1);
        if (v3809) {
          trinex.type = rightType$$4;
        } else {
          var v13670 = this.checker;
          var v3808 = JAM.call(v13670.sourceIsSubtypeOfTarget, v13670, [rightType$$4, leftType$$5], JAM.policy.p1);
          if (v3808) {
            trinex.type = leftType$$5;
          } else {
            trinex.type = this.anyType;
            var v13671 = this.checker;
            var v3805 = v13671.errorReporter;
            var v3806 = trinex.printLabel();
            var v3807 = this.scope;
            JAM.call(v3805.incompatibleTypes, v3805, [trinex, leftType$$5, rightType$$4, v3806, v3807], JAM.policy.p1);
          }
        }
      }
      return trinex;
    }
    function v1042(binex$$8, assignment$$2) {
      var v13672 = binex$$8.operand1;
      var v3811 = JAM.call(this.typeCheck, this, [v13672]);
      var v3812 = this.doubleType;
      var v26529 = JAM.call(this.cast, this, [v3811, v3812], JAM.policy.p1);
      binex$$8.operand1 = v26529;
      var v13673 = binex$$8.operand2;
      var v3813 = JAM.call(this.typeCheck, this, [v13673]);
      var v3814 = this.doubleType;
      var v26530 = JAM.call(this.cast, this, [v3813, v3814], JAM.policy.p1);
      binex$$8.operand2 = v26530;
      var v13674 = assignment$$2;
      if (v13674) {
        var v23184 = binex$$8.operand1;
        var v19414 = JAM.call(this.astIsWriteable, this, [v23184]);
        v13674 = !v19414;
      }
      var v3816 = v13674;
      if (v3816) {
        var v13675 = this.checker;
        var v3815 = v13675.errorReporter;
        JAM.call(v3815.valueCannotBeModified, v3815, [binex$$8]);
      }
      binex$$8.type = this.doubleType;
      return binex$$8;
    }
    function v1041(binex$$7) {
      var v13676 = binex$$7.operand1;
      var v3817 = JAM.call(this.typeCheck, this, [v13676]);
      var v3818 = this.stringType;
      var v26531 = JAM.call(this.cast, this, [v3817, v3818], JAM.policy.p1);
      binex$$7.operand1 = v26531;
      var v3819 = binex$$7.operand2;
      var v26532 = JAM.call(this.typeCheck, this, [v3819]);
      binex$$7.operand2 = v26532;
      var v25761 = binex$$7.operand1;
      var v24989 = v25761.type;
      var v25762 = this.checker;
      var v24990 = v25762.anyType;
      var v23185 = v24989 == v24990;
      var v24993 = !v23185;
      if (v24993) {
        var v25763 = binex$$7.operand1;
        var v24991 = v25763.type;
        var v25764 = this.checker;
        var v24992 = v25764.stringType;
        v23185 = v24991 == v24992;
      }
      var v19415 = v23185;
      if (v19415) {
        var v25765 = binex$$7.operand2;
        var v24994 = v25765.type;
        var v24995 = this.anyType;
        var v23186 = v24994 == v24995;
        var v24999 = !v23186;
        if (v24999) {
          var v24996 = this.checker;
          var v25766 = binex$$7.operand2;
          var v24997 = v25766.type;
          var v24998 = this.objectInterfaceType;
          v23186 = JAM.call(v24996.sourceIsSubtypeOfTarget, v24996, [v24997, v24998], JAM.policy.p1);
        }
        v19415 = v23186;
      }
      var v13677 = v19415;
      var v3821 = !v13677;
      if (v3821) {
        var v13678 = this.checker;
        var v3820 = v13678.errorReporter;
        JAM.call(v3820.simpleError, v3820, [binex$$7, "The in operator requires the left operand to be of type Any or the String primitive type, and the right operand to be of type Any or an object type"], JAM.policy.p1);
      }
      binex$$7.type = this.booleanType;
      return binex$$7;
    }
    function v1040(ast$$103) {
      var binex$$6 = ast$$103;
      var v3822 = binex$$6.operand1;
      var v26533 = JAM.call(this.typeCheck, this, [v3822]);
      binex$$6.operand1 = v26533;
      var v3823 = binex$$6.operand2;
      var v26534 = JAM.call(this.typeCheck, this, [v3823]);
      binex$$6.operand2 = v26534;
      var v23187 = this.checker;
      var v19416 = v23187.styleSettings;
      var v13679 = v19416.literalSubscript;
      var v3826 = !v13679;
      if (v3826) {
        var v19417 = binex$$6.operand2;
        var v13680 = v19417.nodeType;
        var v19418 = TypeScript$$25.NodeType;
        var v13681 = v19418.QString;
        var v3825 = v13680 == v13681;
        if (v3825) {
          var v13682 = this.checker;
          var v3824 = v13682.errorReporter;
          JAM.call(v3824.styleError, v3824, [ast$$103, "use literal subscript ('.') notation instead)"], JAM.policy.p1);
        }
      }
      var v3827 = binex$$6.operand1;
      var objExprType = v3827.type;
      var v3828 = binex$$6.operand2;
      var indexExprType = v3828.type;
      var v3847 = objExprType.elementType;
      if (v3847) {
        var v25000 = this.checker;
        var v23188 = v25000.anyType;
        var v19419 = indexExprType == v23188;
        var v23190 = !v19419;
        if (v23190) {
          var v25001 = this.checker;
          var v23189 = v25001.numberType;
          v19419 = indexExprType == v23189;
        }
        var v13683 = v19419;
        var v19422 = !v13683;
        if (v19422) {
          var v19420 = indexExprType.typeFlags;
          var v23191 = TypeScript$$25.TypeFlags;
          var v19421 = v23191.IsEnum;
          v13683 = JAM.call(TypeScript$$25.hasFlag, TypeScript$$25, [v19420, v19421], JAM.policy.p1);
        }
        var v3833 = v13683;
        if (v3833) {
          binex$$6.type = objExprType.elementType;
        } else {
          var v19423 = this.checker;
          var v13684 = v19423.stringType;
          var v3832 = indexExprType == v13684;
          if (v3832) {
            var v3829 = this.checker;
            binex$$6.type = v3829.anyType;
          } else {
            var v13685 = this.checker;
            var v3830 = v13685.errorReporter;
            JAM.call(v3830.simpleError, v3830, [binex$$6, "Illegal property access"], JAM.policy.p1);
            var v3831 = this.checker;
            binex$$6.type = v3831.anyType;
          }
        }
      } else {
        var v3846 = objExprType.index;
        if (v3846) {
          var v25767 = this.checker;
          var v25002 = v25767.anyType;
          var v23192 = indexExprType == v25002;
          var v25004 = !v23192;
          if (v25004) {
            var v26272 = objExprType.index;
            var v26104 = v26272.flags;
            var v26273 = TypeScript$$25.SignatureFlags;
            var v26105 = v26273.IsStringIndexer;
            var v25768 = v26104 & v26105;
            var v26108 = !v25768;
            if (v26108) {
              var v26274 = objExprType.index;
              var v26106 = v26274.flags;
              var v26275 = TypeScript$$25.SignatureFlags;
              var v26107 = v26275.IsNumberIndexer;
              v25768 = v26106 & v26107;
            }
            var v25003 = v25768;
            v23192 = !v25003;
          }
          var v19424 = v23192;
          var v23194 = !v19424;
          if (v23194) {
            var v25769 = objExprType.index;
            var v25005 = v25769.flags;
            var v25770 = TypeScript$$25.SignatureFlags;
            var v25006 = v25770.IsStringIndexer;
            var v23193 = v25005 & v25006;
            if (v23193) {
              var v25771 = this.checker;
              var v25007 = v25771.stringType;
              v23193 = indexExprType == v25007;
            }
            v19424 = v23193;
          }
          var v13686 = v19424;
          var v19426 = !v13686;
          if (v19426) {
            var v25008 = objExprType.index;
            var v23195 = v25008.flags;
            var v25009 = TypeScript$$25.SignatureFlags;
            var v23196 = v25009.IsNumberIndexer;
            var v19425 = v23195 & v23196;
            if (v19425) {
              var v25772 = this.checker;
              var v25010 = v25772.numberType;
              var v23197 = indexExprType == v25010;
              var v25013 = !v23197;
              if (v25013) {
                var v25011 = indexExprType.typeFlags;
                var v25773 = TypeScript$$25.TypeFlags;
                var v25012 = v25773.IsEnum;
                v23197 = JAM.call(TypeScript$$25.hasFlag, TypeScript$$25, [v25011, v25012], JAM.policy.p1);
              }
              v19425 = v23197;
            }
            v13686 = v19425;
          }
          var v3841 = v13686;
          if (v3841) {
            var v3834 = objExprType.index;
            var sig$$3 = JAM.call(this.resolveOverload, this, [ast$$103, v3834], JAM.policy.p1);
            if (sig$$3) {
              var v3835 = sig$$3.returnType;
              binex$$6.type = v3835.type;
            } else {
              var v3836 = this.checker;
              binex$$6.type = v3836.anyType;
            }
          } else {
            var v19427 = this.checker;
            var v13687 = v19427.stringType;
            var v3840 = indexExprType == v13687;
            if (v3840) {
              var v3837 = this.checker;
              binex$$6.type = v3837.anyType;
            } else {
              var v13688 = this.checker;
              var v3838 = v13688.errorReporter;
              JAM.call(v3838.simpleError, v3838, [binex$$6, "Illegal property access"], JAM.policy.p1);
              var v3839 = this.checker;
              binex$$6.type = v3839.anyType;
            }
          }
        } else {
          var v26276 = this.checker;
          var v26109 = v26276.anyType;
          var v25774 = objExprType == v26109;
          var v26111 = !v25774;
          if (v26111) {
            var v26277 = this.checker;
            var v26110 = v26277.stringType;
            v25774 = objExprType == v26110;
          }
          var v25014 = v25774;
          var v25776 = !v25014;
          if (v25776) {
            var v26112 = this.checker;
            var v25775 = v26112.numberType;
            v25014 = objExprType == v25775;
          }
          var v23198 = v25014;
          var v25016 = !v23198;
          if (v25016) {
            var v25777 = this.checker;
            var v25015 = v25777.booleanType;
            v23198 = objExprType == v25015;
          }
          var v19428 = v23198;
          var v23199 = !v19428;
          if (v23199) {
            v19428 = objExprType.isReferenceType();
          }
          var v13689 = v19428;
          if (v13689) {
            var v25778 = this.checker;
            var v25017 = v25778.anyType;
            var v23200 = indexExprType == v25017;
            var v25019 = !v23200;
            if (v25019) {
              var v25779 = this.checker;
              var v25018 = v25779.stringType;
              v23200 = indexExprType == v25018;
            }
            var v19429 = v23200;
            var v23202 = !v19429;
            if (v23202) {
              var v25780 = this.checker;
              var v25020 = v25780.numberType;
              var v23201 = indexExprType == v25020;
              var v25023 = !v23201;
              if (v25023) {
                var v25021 = indexExprType.typeFlags;
                var v25781 = TypeScript$$25.TypeFlags;
                var v25022 = v25781.IsEnum;
                v23201 = JAM.call(TypeScript$$25.hasFlag, TypeScript$$25, [v25021, v25022], JAM.policy.p1);
              }
              v19429 = v23201;
            }
            v13689 = v19429;
          }
          var v3845 = v13689;
          if (v3845) {
            var v3842 = this.checker;
            binex$$6.type = v3842.anyType;
          } else {
            var v13690 = this.checker;
            var v3843 = v13690.errorReporter;
            JAM.call(v3843.simpleError, v3843, [binex$$6, "Illegal property access"], JAM.policy.p1);
            var v3844 = this.checker;
            binex$$6.type = v3844.anyType;
          }
        }
      }
      return binex$$6;
    }
    function v1039(ast$$102) {
      var binex$$5 = ast$$102;
      var v13691 = binex$$5.operand2;
      var v3848 = v13691.isParenthesized;
      var applyTargetType$$2 = !v3848;
      var v3849 = binex$$5.operand1;
      var v26535 = JAM.call(this.typeCheck, this, [v3849]);
      binex$$5.operand1 = v26535;
      var v3850 = this.checker;
      var v13692 = binex$$5.operand1;
      var v3851 = v13692.type;
      var v13693 = this.checker;
      var v3852 = v13693.inProvisionalTypecheckMode();
      var v3853 = binex$$5.operand2;
      JAM.call(v3850.typeCheckWithContextualType, v3850, [v3851, v3852, applyTargetType$$2, v3853], JAM.policy.p1);
      var v3854 = binex$$5.operand1;
      var leftType$$4 = v3854.type;
      var v3855 = binex$$5.operand2;
      var rightType$$3 = v3855.type;
      var v19430 = binex$$5.operand1;
      var v13694 = JAM.call(this.astIsWriteable, this, [v19430]);
      var v3857 = !v13694;
      if (v3857) {
        var v13695 = this.checker;
        var v3856 = v13695.errorReporter;
        JAM.call(v3856.valueCannotBeModified, v3856, [binex$$5]);
      }
      var v19431 = binex$$5.operand1;
      var v13696 = v19431.nodeType;
      var v19432 = TypeScript$$25.NodeType;
      var v13697 = v19432.Call;
      var v3858 = v13696 == v13697;
      if (v3858) {
        var callEx$$1 = binex$$5.operand1
      }
      var preserveScope$$1 = false;
      var preservedContainedScope$$1 = null;
      var v13698 = binex$$5.operand2;
      var v3860 = v13698.type;
      if (v3860) {
        var v13699 = binex$$5.operand2;
        var v3859 = v13699.type;
        preservedContainedScope$$1 = v3859.containedScope;
        preserveScope$$1 = true;
      }
      var v3861 = binex$$5.operand2;
      var v13700 = applyTargetType$$2;
      if (v13700) {
        var v23203 = this.checker;
        var v19433 = v23203.inProvisionalTypecheckMode();
        v13700 = !v19433;
      }
      var v3862 = v13700;
      var v26536 = JAM.call(this.castWithCoercion, this, [v3861, leftType$$4, v3862, false], JAM.policy.p1);
      binex$$5.operand2 = v26536;
      var v13701 = preserveScope$$1;
      if (v13701) {
        var v25024 = binex$$5.operand2;
        var v23204 = v25024.type;
        var v19434 = v23204.containedScope;
        v13701 = v19434 == null;
      }
      var v3864 = v13701;
      if (v3864) {
        var v13702 = binex$$5.operand2;
        var v3863 = v13702.type;
        v3863.containedScope = preservedContainedScope$$1;
      }
      binex$$5.type = rightType$$3;
      return binex$$5;
    }
    function v1038(ast$$101) {
      var binex$$4 = ast$$101;
      var v3865 = binex$$4.operand1;
      var v26537 = JAM.call(this.typeCheck, this, [v3865]);
      binex$$4.operand1 = v26537;
      var v3866 = binex$$4.operand2;
      var v26538 = JAM.call(this.typeCheck, this, [v3866]);
      binex$$4.operand2 = v26538;
      var v3867 = binex$$4.operand1;
      var leftType$$3 = v3867.type;
      var v3868 = binex$$4.operand2;
      var rightType$$2 = v3868.type;
      var v23205 = this.checker;
      var v19435 = JAM.call(v23205.sourceIsAssignableToTarget, v23205, [leftType$$3, rightType$$2], JAM.policy.p1);
      var v13703 = !v19435;
      if (v13703) {
        var v23206 = this.checker;
        var v19436 = JAM.call(v23206.sourceIsAssignableToTarget, v23206, [rightType$$2, leftType$$3], JAM.policy.p1);
        v13703 = !v19436;
      }
      var v3872 = v13703;
      if (v3872) {
        var v13704 = this.checker;
        var v3869 = v13704.errorReporter;
        var v3870 = binex$$4.printLabel();
        var v3871 = this.scope;
        JAM.call(v3869.incompatibleTypes, v3869, [binex$$4, leftType$$3, rightType$$2, v3870, v3871], JAM.policy.p1);
      }
      binex$$4.type = this.booleanType;
      return binex$$4;
    }
    function v1037(ast$$100) {
      var binex$$3 = ast$$100;
      var leftIsFnc = false;
      var v3873 = binex$$3.operand1;
      var v26539 = JAM.call(this.typeCheck, this, [v3873]);
      binex$$3.operand1 = v26539;
      var v3874 = binex$$3.operand1;
      var leftType$$2 = v3874.type;
      var leftScope = null;
      if (leftType$$2) {
        var v13705 = this.anyType;
        var v3892 = leftType$$2 == v13705;
        if (v3892) {
          binex$$3.type = this.anyType;
          return binex$$3;
        } else {
          var v13706 = this.stringType;
          var v3891 = leftType$$2 == v13706;
          if (v3891) {
            var v3876 = this.stringInterfaceType;
            if (v3876) {
              var v3875 = this.stringInterfaceType;
              leftScope = v3875.memberScope;
            } else {
              binex$$3.type = this.anyType;
              return binex$$3;
            }
          } else {
            var v13707 = this.doubleType;
            var v3890 = leftType$$2 == v13707;
            if (v3890) {
              var v3878 = this.numberInterfaceType;
              if (v3878) {
                var v3877 = this.numberInterfaceType;
                leftScope = v3877.memberScope;
              } else {
                binex$$3.type = this.anyType;
                return binex$$3;
              }
            } else {
              var v13708 = this.booleanType;
              var v3889 = leftType$$2 == v13708;
              if (v3889) {
                var v3880 = this.booleanInterfaceType;
                if (v3880) {
                  var v3879 = this.booleanInterfaceType;
                  leftScope = v3879.memberScope;
                } else {
                  binex$$3.type = this.anyType;
                  return binex$$3;
                }
              } else {
                var v19437 = leftType$$2.call;
                var v23207 = !v19437;
                if (v23207) {
                  v19437 = leftType$$2.construct;
                }
                var v13709 = v19437;
                if (v13709) {
                  var v19438 = leftType$$2.members;
                  v13709 = v19438 == null;
                }
                var v3888 = v13709;
                if (v3888) {
                  var v3882 = this.functionInterfaceType;
                  if (v3882) {
                    var v3881 = this.functionInterfaceType;
                    leftScope = v3881.memberScope;
                  } else {
                    binex$$3.type = this.anyType;
                    return binex$$3;
                  }
                } else {
                  var v3887 = leftType$$2.elementType;
                  if (v3887) {
                    var v3886 = this.arrayInterfaceType;
                    if (v3886) {
                      var v3883 = leftType$$2.elementType;
                      var v3884 = this.arrayInterfaceType;
                      var v3885 = this.checker;
                      var arrInstType$$1 = JAM.call(v3883.getArrayBase, v3883, [v3884, v3885], JAM.policy.p1);
                      leftScope = arrInstType$$1.memberScope;
                    } else {
                      binex$$3.type = this.anyType;
                      return binex$$3;
                    }
                  } else {
                    leftScope = leftType$$2.memberScope;
                  }
                }
              }
            }
          }
        }
      }
      var v3920 = leftScope == null;
      if (v3920) {
        var v13710 = this.checker;
        var v3893 = v13710.errorReporter;
        JAM.call(v3893.expectedClassOrInterface, v3893, [binex$$3]);
        binex$$3.type = this.anyType;
      } else {
        var propertyName$$8 = binex$$3.operand2;
        var v13711 = this.thisClassNode;
        if (v13711) {
          var v23208 = binex$$3.operand1;
          var v19439 = v23208.type;
          var v25025 = this.thisClassNode;
          var v23209 = v25025.type;
          var v19440 = v23209.instanceType;
          v13711 = v19439 == v19440;
        }
        var v3894 = v13711;
        var v13712 = !v3894;
        if (v13712) {
          v3894 = this.inTypeRefTypeCheck;
        }
        var lhsIsEnclosingType = v3894;
        var v3895 = propertyName$$8.text;
        var v3896 = !lhsIsEnclosingType;
        var v3897 = this.inTypeRefTypeCheck;
        var symbol$$19 = JAM.call(leftScope.find, leftScope, [v3895, v3896, v3897], JAM.policy.p1);
        var v3908 = !symbol$$19;
        if (v3908) {
          var v13713 = this.objectInterfaceType;
          if (v13713) {
            v13713 = leftType$$2;
          }
          var v3907 = v13713;
          if (v3907) {
            var v3901 = leftType$$2.isReferenceType();
            if (v3901) {
              var v13714 = this.objectInterfaceType;
              var v3898 = v13714.memberScope;
              var v3899 = propertyName$$8.text;
              var v3900 = this.inTypeRefTypeCheck;
              symbol$$19 = JAM.call(v3898.find, v3898, [v3899, false, v3900], JAM.policy.p1);
            }
            var v3906 = !symbol$$19;
            if (v3906) {
              var v13715 = this.functionInterfaceType;
              if (v13715) {
                var v19441 = leftType$$2.call;
                var v23210 = !v19441;
                if (v23210) {
                  v19441 = leftType$$2.construct;
                }
                v13715 = v19441;
              }
              var v3905 = v13715;
              if (v3905) {
                var v13716 = this.functionInterfaceType;
                var v3902 = v13716.memberScope;
                var v3903 = propertyName$$8.text;
                var v3904 = this.inTypeRefTypeCheck;
                symbol$$19 = JAM.call(v3902.find, v3902, [v3903, false, v3904], JAM.policy.p1);
              }
            }
          }
        }
        var v13717 = !symbol$$19;
        var v19443 = !v13717;
        if (v19443) {
          var v23211 = this.checker;
          var v19442 = JAM.call(symbol$$19.visible, symbol$$19, [leftScope, v23211], JAM.policy.p1);
          v13717 = !v19442;
        }
        var v3919 = v13717;
        if (v3919) {
          binex$$3.type = this.anyType;
          var v3914 = symbol$$19 == null;
          if (v3914) {
            var v13718 = this.checker;
            var v3909 = v13718.errorReporter;
            var v25026 = propertyName$$8.actualText;
            var v23212 = "The property '" + v25026;
            var v19444 = v23212 + "' does not exist on value of type '";
            var v23213 = this.scope;
            var v19445 = JAM.call(leftType$$2.getScopedTypeName, leftType$$2, [v23213]);
            var v13719 = v19444 + v19445;
            var v3910 = v13719 + "'";
            JAM.call(v3909.simpleError, v3909, [propertyName$$8, v3910], JAM.policy.p1);
          } else {
            var v13720 = this.inTypeRefTypeCheck;
            var v3913 = !v13720;
            if (v3913) {
              var v13721 = this.checker;
              var v3911 = v13721.errorReporter;
              var v25027 = propertyName$$8.actualText;
              var v23214 = "The property '" + v25027;
              var v19446 = v23214 + " on type '";
              var v23215 = this.scope;
              var v19447 = JAM.call(leftType$$2.getScopedTypeName, leftType$$2, [v23215]);
              var v13722 = v19446 + v19447;
              var v3912 = v13722 + "' is not visible";
              JAM.call(v3911.simpleError, v3911, [binex$$3, v3912], JAM.policy.p1);
            }
          }
        } else {
          var v3918 = symbol$$19.isVariable();
          if (v3918) {
            var v3917 = symbol$$19.isInferenceSymbol();
            if (v3917) {
              var infSym$$2 = symbol$$19;
              var v13723 = infSym$$2.declAST;
              if (v13723) {
                var v23216 = this.checker;
                var v23217 = infSym$$2.typeCheckStatus;
                var v19448 = JAM.call(v23216.typeStatusIsFinished, v23216, [v23217]);
                v13723 = !v19448;
              }
              var v3916 = v13723;
              if (v3916) {
                var v3915 = infSym$$2.declAST;
                JAM.call(this.inScopeTypeCheckDecl, this, [v3915]);
              }
            }
          }
          propertyName$$8.sym = symbol$$19;
          var v26540 = symbol$$19.getType();
          binex$$3.type = v26540;
        }
      }
      var v13724 = binex$$3.type;
      var v3921 = v13724 == null;
      if (v3921) {
        binex$$3.type = this.anyType;
      }
      return binex$$3;
    }
    function v1036(ast$$99, assignment$$1) {
      var binex$$2 = ast$$99;
      var v3922 = binex$$2.operand1;
      var v26541 = JAM.call(this.typeCheck, this, [v3922]);
      binex$$2.operand1 = v26541;
      var v3923 = binex$$2.operand2;
      var v26542 = JAM.call(this.typeCheck, this, [v3923]);
      binex$$2.operand2 = v26542;
      var v3924 = binex$$2.operand1;
      var leftType$$1 = v3924.type;
      var v3925 = binex$$2.operand2;
      var rightType$$1 = v3925.type;
      var v13725 = assignment$$1;
      if (v13725) {
        var v23218 = binex$$2.operand1;
        var v19449 = JAM.call(this.astIsWriteable, this, [v23218]);
        v13725 = !v19449;
      }
      var v3927 = v13725;
      if (v3927) {
        var v13726 = this.checker;
        var v3926 = v13726.errorReporter;
        JAM.call(v3926.valueCannotBeModified, v3926, [binex$$2]);
      }
      var v23219 = this.checker;
      var v19450 = v23219.styleSettings;
      var v13727 = v19450.bitwise;
      if (v13727) {
        var v25782 = binex$$2.nodeType;
        var v26113 = TypeScript$$25.NodeType;
        var v25783 = v26113.And;
        var v25028 = v25782 == v25783;
        var v25786 = !v25028;
        if (v25786) {
          var v25784 = binex$$2.nodeType;
          var v26114 = TypeScript$$25.NodeType;
          var v25785 = v26114.Or;
          v25028 = v25784 == v25785;
        }
        var v23220 = v25028;
        var v25031 = !v23220;
        if (v25031) {
          var v25029 = binex$$2.nodeType;
          var v25787 = TypeScript$$25.NodeType;
          var v25030 = v25787.AsgAnd;
          v23220 = v25029 == v25030;
        }
        var v19451 = v23220;
        var v23223 = !v19451;
        if (v23223) {
          var v23221 = binex$$2.nodeType;
          var v25032 = TypeScript$$25.NodeType;
          var v23222 = v25032.AsgOr;
          v19451 = v23221 == v23222;
        }
        v13727 = v19451;
      }
      var v3930 = v13727;
      if (v3930) {
        var v13728 = this.checker;
        var v3928 = v13728.errorReporter;
        var v19452 = TypeScript$$25.nodeTypeTable;
        var v19453 = binex$$2.nodeType;
        var v13729 = v19452[v19453];
        var v3929 = "use of " + v13729;
        JAM.call(v3928.styleError, v3928, [ast$$99, v3929], JAM.policy.p1);
      }
      var v13730 = leftType$$1 == null;
      var v19454 = !v13730;
      if (v19454) {
        v13730 = rightType$$1 == null;
      }
      var v3932 = v13730;
      if (v3932) {
        var v13731 = this.checker;
        var v3931 = v13731.errorReporter;
        JAM.call(v3931.simpleError, v3931, [binex$$2, "Could not typecheck arithmetic operation.  Possible recursive typecheck error?"], JAM.policy.p1);
        binex$$2.type = this.anyType;
        return binex$$2;
      }
      var nodeType$$14 = binex$$2.nodeType;
      var v13732 = this.checker;
      var v3933 = JAM.call(v13732.isNullOrUndefinedType, v13732, [leftType$$1]);
      if (v3933) {
        leftType$$1 = rightType$$1;
      }
      var v13733 = this.checker;
      var v3934 = JAM.call(v13733.isNullOrUndefinedType, v13733, [rightType$$1]);
      if (v3934) {
        rightType$$1 = leftType$$1;
      }
      var v3935 = this.checker;
      leftType$$1 = JAM.call(v3935.widenType, v3935, [leftType$$1]);
      var v3936 = this.checker;
      rightType$$1 = JAM.call(v3936.widenType, v3936, [rightType$$1]);
      var v23224 = TypeScript$$25.NodeType;
      var v19455 = v23224.Add;
      var v13734 = nodeType$$14 == v19455;
      var v19457 = !v13734;
      if (v19457) {
        var v23225 = TypeScript$$25.NodeType;
        var v19456 = v23225.AsgAdd;
        v13734 = nodeType$$14 == v19456;
      }
      var v3957 = v13734;
      if (v3957) {
        var v23226 = this.checker;
        var v19458 = v23226.stringType;
        var v13735 = leftType$$1 == v19458;
        var v19460 = !v13735;
        if (v19460) {
          var v23227 = this.checker;
          var v19459 = v23227.stringType;
          v13735 = rightType$$1 == v19459;
        }
        var v3947 = v13735;
        if (v3947) {
          var v3937 = this.checker;
          binex$$2.type = v3937.stringType;
        } else {
          var v23228 = this.checker;
          var v19461 = v23228.numberType;
          var v13736 = leftType$$1 == v19461;
          if (v13736) {
            var v23229 = this.checker;
            var v19462 = v23229.numberType;
            v13736 = rightType$$1 == v19462;
          }
          var v3946 = v13736;
          if (v3946) {
            var v3938 = this.checker;
            binex$$2.type = v3938.numberType;
          } else {
            var v19463 = this.checker;
            var v23230 = this.checker;
            var v19464 = v23230.numberType;
            var v13737 = JAM.call(v19463.sourceIsSubtypeOfTarget, v19463, [leftType$$1, v19464], JAM.policy.p1);
            if (v13737) {
              var v19465 = this.checker;
              var v23231 = this.checker;
              var v19466 = v23231.numberType;
              v13737 = JAM.call(v19465.sourceIsSubtypeOfTarget, v19465, [rightType$$1, v19466], JAM.policy.p1);
            }
            var v3945 = v13737;
            if (v3945) {
              var v3939 = this.checker;
              binex$$2.type = v3939.numberType;
            } else {
              var v23232 = this.checker;
              var v19467 = v23232.anyType;
              var v13738 = leftType$$1 == v19467;
              var v19469 = !v13738;
              if (v19469) {
                var v23233 = this.checker;
                var v19468 = v23233.anyType;
                v13738 = rightType$$1 == v19468;
              }
              var v3944 = v13738;
              if (v3944) {
                var v3940 = this.checker;
                binex$$2.type = v3940.anyType;
              } else {
                binex$$2.type = this.anyType;
                var v13739 = this.checker;
                var v3941 = v13739.errorReporter;
                var v3942 = binex$$2.printLabel();
                var v3943 = this.scope;
                JAM.call(v3941.incompatibleTypes, v3941, [binex$$2, leftType$$1, rightType$$1, v3942, v3943], JAM.policy.p1);
              }
            }
          }
        }
      } else {
        var v23234 = this.checker;
        var v19470 = v23234.numberType;
        var v13740 = leftType$$1 == v19470;
        if (v13740) {
          var v23235 = this.checker;
          var v19471 = v23235.numberType;
          v13740 = rightType$$1 == v19471;
        }
        var v3956 = v13740;
        if (v3956) {
          var v3948 = this.checker;
          binex$$2.type = v3948.numberType;
        } else {
          var v19472 = this.checker;
          var v23236 = this.checker;
          var v19473 = v23236.numberType;
          var v13741 = JAM.call(v19472.sourceIsSubtypeOfTarget, v19472, [leftType$$1, v19473], JAM.policy.p1);
          if (v13741) {
            var v19474 = this.checker;
            var v23237 = this.checker;
            var v19475 = v23237.numberType;
            v13741 = JAM.call(v19474.sourceIsSubtypeOfTarget, v19474, [rightType$$1, v19475], JAM.policy.p1);
          }
          var v3955 = v13741;
          if (v3955) {
            var v3949 = this.checker;
            binex$$2.type = v3949.numberType;
          } else {
            var v23238 = this.checker;
            var v19476 = v23238.anyType;
            var v13742 = leftType$$1 == v19476;
            var v19478 = !v13742;
            if (v19478) {
              var v23239 = this.checker;
              var v19477 = v23239.anyType;
              v13742 = rightType$$1 == v19477;
            }
            var v3954 = v13742;
            if (v3954) {
              var v3950 = this.checker;
              binex$$2.type = v3950.numberType;
            } else {
              binex$$2.type = this.anyType;
              var v13743 = this.checker;
              var v3951 = v13743.errorReporter;
              var v3952 = binex$$2.printLabel();
              var v3953 = this.scope;
              JAM.call(v3951.incompatibleTypes, v3951, [binex$$2, leftType$$1, rightType$$1, v3952, v3953], JAM.policy.p1);
            }
          }
        }
      }
      return binex$$2;
    }
    function v1035(ast$$98, assignment) {
      var binex$$1 = ast$$98;
      var resultType$$1 = null;
      var v3958 = binex$$1.operand1;
      var v26543 = JAM.call(this.typeCheck, this, [v3958]);
      binex$$1.operand1 = v26543;
      var v3959 = binex$$1.operand2;
      var v26544 = JAM.call(this.typeCheck, this, [v3959]);
      binex$$1.operand2 = v26544;
      var v3960 = binex$$1.operand1;
      var leftType = v3960.type;
      var v3961 = binex$$1.operand2;
      var rightType = v3961.type;
      var v13744 = assignment;
      if (v13744) {
        var v19479 = JAM.call(this.astIsWriteable, this, [binex$$1]);
        v13744 = !v19479;
      }
      var v3963 = v13744;
      if (v3963) {
        var v13745 = this.checker;
        var v3962 = v13745.errorReporter;
        JAM.call(v3962.valueCannotBeModified, v3962, [binex$$1]);
      }
      var v19480 = this.checker;
      var v13746 = v19480.styleSettings;
      var v3966 = v13746.bitwise;
      if (v3966) {
        var v13747 = this.checker;
        var v3964 = v13747.errorReporter;
        var v19481 = TypeScript$$25.nodeTypeTable;
        var v19482 = binex$$1.nodeType;
        var v13748 = v19481[v19482];
        var v3965 = "use of " + v13748;
        JAM.call(v3964.styleError, v3964, [ast$$98, v3965], JAM.policy.p1);
      }
      var v19483 = this.checker;
      var v19484 = this.doubleType;
      var v13749 = JAM.call(v19483.sourceIsSubtypeOfTarget, v19483, [leftType, v19484], JAM.policy.p1);
      if (v13749) {
        var v19485 = this.checker;
        var v19486 = this.doubleType;
        v13749 = JAM.call(v19485.sourceIsSubtypeOfTarget, v19485, [rightType, v19486], JAM.policy.p1);
      }
      var v3972 = v13749;
      if (v3972) {
        resultType$$1 = this.doubleType;
      } else {
        var v19487 = this.booleanType;
        var v13750 = leftType == v19487;
        if (v13750) {
          var v19488 = this.booleanType;
          v13750 = rightType == v19488;
        }
        var v3971 = v13750;
        if (v3971) {
          resultType$$1 = this.booleanType;
        } else {
          var v13751 = this.anyType;
          var v3970 = leftType == v13751;
          if (v3970) {
            var v23240 = this.anyType;
            var v19489 = rightType == v23240;
            var v23242 = !v19489;
            if (v23242) {
              var v23241 = this.doubleType;
              v19489 = rightType == v23241;
            }
            var v13752 = v19489;
            var v19491 = !v13752;
            if (v19491) {
              var v19490 = this.booleanType;
              v13752 = rightType == v19490;
            }
            var v3967 = v13752;
            if (v3967) {
              resultType$$1 = this.anyType;
            }
          } else {
            var v13753 = this.anyType;
            var v3969 = rightType == v13753;
            if (v3969) {
              var v23243 = this.anyType;
              var v19492 = leftType == v23243;
              var v23245 = !v19492;
              if (v23245) {
                var v23244 = this.doubleType;
                v19492 = leftType == v23244;
              }
              var v13754 = v19492;
              var v19494 = !v13754;
              if (v19494) {
                var v19493 = this.booleanType;
                v13754 = leftType == v19493;
              }
              var v3968 = v13754;
              if (v3968) {
                resultType$$1 = this.anyType;
              }
            }
          }
        }
      }
      var v3976 = resultType$$1 == null;
      if (v3976) {
        resultType$$1 = this.anyType;
        var v13755 = this.checker;
        var v3973 = v13755.errorReporter;
        var v3974 = binex$$1.printLabel();
        var v3975 = this.scope;
        JAM.call(v3973.incompatibleTypes, v3973, [binex$$1, leftType, rightType, v3974, v3975], JAM.policy.p1);
      }
      binex$$1.type = resultType$$1;
      return binex$$1;
    }
    function v1034(ast$$97) {
      var unex$$3 = ast$$97;
      var lval$$1 = unex$$3.operand;
      var v13756 = JAM.call(this.astIsWriteable, this, [unex$$3]);
      var v3980 = !v13756;
      if (v3980) {
        var v13757 = this.checker;
        var v3977 = v13757.errorReporter;
        JAM.call(v3977.valueCannotBeModified, v3977, [unex$$3]);
        unex$$3.type = this.doubleType;
      } else {
        unex$$3 = JAM.call(this.typeCheckUnaryNumberOperator, this, [ast$$97]);
        var v25033 = unex$$3.operand;
        var v23246 = v25033.type;
        var v25034 = this.checker;
        var v23247 = v25034.numberType;
        var v19495 = v23246 != v23247;
        if (v19495) {
          var v25035 = unex$$3.operand;
          var v23248 = v25035.type;
          var v25036 = this.checker;
          var v23249 = v25036.anyType;
          v19495 = v23248 != v23249;
        }
        var v13758 = v19495;
        if (v13758) {
          var v25788 = unex$$3.operand;
          var v25037 = v25788.type;
          var v23250 = v25037.typeFlags;
          var v25038 = TypeScript$$25.TypeFlags;
          var v23251 = v25038.IsEnum;
          var v19496 = v23250 & v23251;
          v13758 = !v19496;
        }
        var v3979 = v13758;
        if (v3979) {
          var v13759 = this.checker;
          var v3978 = v13759.errorReporter;
          JAM.call(v3978.simpleError, v3978, [ast$$97, "'++' and '--' may only be applied to operands of type 'number' or 'any'"], JAM.policy.p1);
        }
      }
      return unex$$3;
    }
    function v1033(ast$$96) {
      var v3981 = ast$$96.flags;
      var v13760 = TypeScript$$25.ASTFlags;
      var v3982 = v13760.Writeable;
      return JAM.call(TypeScript$$25.hasFlag, TypeScript$$25, [v3981, v3982], JAM.policy.p1);
    }
    function v1032(ast$$95) {
      var unex$$2 = ast$$95;
      var v3983 = unex$$2.operand;
      var v26545 = JAM.call(this.typeCheck, this, [v3983]);
      unex$$2.operand = v26545;
      unex$$2.type = this.booleanType;
      return unex$$2;
    }
    function v1031(ast$$94) {
      var unex$$1 = ast$$94;
      var v3984 = unex$$1.operand;
      var v26546 = JAM.call(this.typeCheck, this, [v3984]);
      unex$$1.operand = v26546;
      unex$$1.type = this.doubleType;
      return ast$$94;
    }
    function v1030(ast$$93) {
      var unex = ast$$93;
      var v3985 = unex.operand;
      var v26547 = JAM.call(this.typeCheck, this, [v3985]);
      unex.operand = v26547;
      unex.type = this.doubleType;
      return unex;
    }
    function v1029(script$$16) {
      var v3986 = this.checker;
      v3986.locationInfo = script$$16.locationInfo;
      var v3987 = this.checker;
      this.scope = v3987.globalScope;
      var v13761 = script$$16.topLevelMod;
      var v3992 = !v13761;
      if (v3992) {
        var v3988 = this.scope;
        var v13762 = this.checker;
        var v3989 = v13762.gloMod;
        var v3990 = script$$16.vars;
        var v13763 = this.checker;
        var v3991 = v13763.globals;
        JAM.call(this.addLocalsFromScope, this, [v3988, v3989, v3990, v3991, true], JAM.policy.p1);
      }
      this.currentScript = script$$16;
      var v3993 = script$$16.bod;
      var v26548 = JAM.call(this.typeCheck, this, [v3993]);
      script$$16.bod = v26548;
      this.currentScript = null;
      return script$$16;
    }
    function v1028(ast$$92) {
      function v1027(id$$22) {
        var v3994 = _this$$7.scope;
        return JAM.call(v3994.find, v3994, [id$$22, false, typespace$$24], JAM.policy.p1);
      }
      var _this$$7 = this;
      var identifier$$3 = ast$$92;
      var v13764 = this.checker;
      var v4015 = v13764.inWith;
      if (v4015) {
        identifier$$3.type = this.anyType;
      } else {
        var typespace$$24 = this.inTypeRefTypeCheck;
        var idText$$4 = identifier$$3.text;
        var originalIdText$$1 = idText$$4;
        var v3995 = identifier$$3.text;
        var isDynamicModuleName = JAM.call(TypeScript$$25.isQuoted, TypeScript$$25, [v3995]);
        var v3996 = this.scope;
        var symbol$$18 = JAM.call(v3996.find, v3996, [idText$$4, false, typespace$$24], JAM.policy.p1);
        var v13765 = symbol$$18 == null;
        if (v13765) {
          v13765 = isDynamicModuleName;
        }
        var v3999 = v13765;
        if (v3999) {
          var v3997 = this.checker;
          var v19497 = this.currentScript;
          var v13766 = v19497.locationInfo;
          var v3998 = v13766.filename;
          symbol$$18 = JAM.call(v3997.findSymbolForDynamicModule, v3997, [idText$$4, v3998, v1027], JAM.policy.p1);
        }
        var v4014 = !symbol$$18;
        if (v4014) {
          var v13767 = identifier$$3.isMissing();
          var v4002 = !v13767;
          if (v4002) {
            var v13768 = this.checker;
            var v4000 = v13768.errorReporter;
            var v4001 = identifier$$3.text;
            JAM.call(v4000.unresolvedSymbol, v4000, [identifier$$3, v4001], JAM.policy.p1);
          }
          identifier$$3.type = this.anyType;
        } else {
          var v19498 = TypeScript$$25.optimizeModuleCodeGen;
          if (v19498) {
            v19498 = symbol$$18;
          }
          var v13769 = v19498;
          if (v13769) {
            v13769 = symbol$$18.isType();
          }
          var v4006 = v13769;
          if (v4006) {
            var symType$$2 = symbol$$18.getType();
            var v19499 = symType$$2;
            if (v19499) {
              v19499 = symbol$$18.aliasLink;
            }
            var v13770 = v19499;
            if (v13770) {
              v13770 = symbol$$18.onlyReferencedAsTypeRef;
            }
            var v4005 = v13770;
            if (v4005) {
              var v4003 = symType$$2.symbol;
              var modDecl$$2 = v4003.declAST;
              var v13771 = modDecl$$2;
              if (v13771) {
                var v19500 = modDecl$$2.modFlags;
                var v23252 = TypeScript$$25.ModuleFlags;
                var v19501 = v23252.IsDynamic;
                v13771 = JAM.call(TypeScript$$25.hasFlag, TypeScript$$25, [v19500, v19501], JAM.policy.p1);
              }
              var v4004 = v13771;
              if (v4004) {
                symbol$$18.onlyReferencedAsTypeRef = this.inTypeRefTypeCheck;
              }
            }
          }
          var v23253 = symbol$$18.declAST;
          if (v23253) {
            var v25789 = symbol$$18.declAST;
            var v25039 = v25789.nodeType;
            var v25790 = TypeScript$$25.NodeType;
            var v25040 = v25790.FuncDecl;
            v23253 = v25039 == v25040;
          }
          var v19502 = v23253;
          if (v19502) {
            var v25041 = symbol$$18.declAST;
            var v23254 = v25041.returnTypeAnnotation;
            v19502 = !v23254;
          }
          var v13772 = v19502;
          if (v13772) {
            var v25042 = symbol$$18.declAST;
            var v23255 = v25042.signature;
            var v19503 = v23255.typeCheckStatus;
            var v23256 = TypeScript$$25.TypeCheckStatus;
            var v19504 = v23256.Started;
            v13772 = v19503 == v19504;
          }
          var v4009 = v13772;
          if (v4009) {
            var v19505 = symbol$$18.declAST;
            var v13773 = v19505.type;
            var v4007 = v13773.symbol;
            var v19506 = v4007.flags;
            var v23257 = TypeScript$$25.SymbolFlags;
            var v19507 = v23257.RecursivelyReferenced;
            v4007.flags = v19506 | v19507;
            var v19508 = symbol$$18.declAST;
            var v13774 = v19508.signature;
            var v4008 = v13774.returnType;
            v4008.type = this.anyType;
          }
          JAM.call(this.setTypeFromSymbol, this, [ast$$92, symbol$$18], JAM.policy.p1);
          identifier$$3.sym = symbol$$18;
          var v4013 = this.thisFnc;
          if (v4013) {
            var v19509 = this.thisFnc;
            var v13775 = v19509.type;
            if (v13775) {
              var v19510 = symbol$$18.container;
              var v25043 = this.thisFnc;
              var v23258 = v25043.type;
              var v19511 = v23258.symbol;
              v13775 = v19510 != v19511;
            }
            var v4012 = v13775;
            if (v4012) {
              var v13776 = this.thisFnc;
              var v4010 = v13776.freeVariables;
              var v19512 = this.thisFnc;
              var v13777 = v19512.freeVariables;
              var v4011 = v13777.length;
              JAM.set(v4010, v4011, symbol$$18);
            }
          }
        }
      }
      return ast$$92;
    }
    function v1026(ast$$91, symbol$$17) {
      var v4031 = symbol$$17.isVariable();
      if (v4031) {
        var v4022 = symbol$$17.isInferenceSymbol();
        if (v4022) {
          var infSym$$1 = symbol$$17;
          var v13778 = infSym$$1.declAST;
          if (v13778) {
            var v23259 = this.checker;
            var v23260 = infSym$$1.typeCheckStatus;
            var v19513 = JAM.call(v23259.typeStatusIsFinished, v23259, [v23260]);
            v13778 = !v19513;
          }
          var v4017 = v13778;
          if (v4017) {
            var v4016 = infSym$$1.declAST;
            JAM.call(this.inScopeTypeCheckDecl, this, [v4016]);
          }
          var v23261 = this.checker;
          var v19514 = v23261.styleSettings;
          var v13779 = v19514.innerScopeDeclEscape;
          var v4021 = !v13779;
          if (v4021) {
            var v13780 = infSym$$1.declAST;
            if (v13780) {
              var v23262 = infSym$$1.declAST;
              var v19515 = v23262.nodeType;
              var v23263 = TypeScript$$25.NodeType;
              var v19516 = v23263.VarDecl;
              v13780 = v19515 == v19516;
            }
            var v4020 = v13780;
            if (v4020) {
              var v13781 = this.nestingLevel;
              var v19517 = infSym$$1.declAST;
              var v13782 = v19517.nestingLevel;
              var v4019 = v13781 < v13782;
              if (v4019) {
                var v13783 = this.checker;
                var v4018 = v13783.errorReporter;
                JAM.call(v4018.styleError, v4018, [ast$$91, "Illegal reference to a variable defined in more nested scope"], JAM.policy.p1);
              }
            }
          }
        }
        var v26549 = symbol$$17.getType();
        ast$$91.type = v26549;
        var v13784 = symbol$$17.writeable();
        var v4025 = !v13784;
        if (v4025) {
          var v4023 = ast$$91.flags;
          var v19518 = TypeScript$$25.ASTFlags;
          var v13785 = v19518.Writeable;
          var v4024 = ~v13785;
          ast$$91.flags = v4023 & v4024;
        }
      } else {
        var v4030 = symbol$$17.isType();
        if (v4030) {
          var v26550 = symbol$$17.getType();
          ast$$91.type = v26550;
          var v4026 = ast$$91.flags;
          var v19519 = TypeScript$$25.ASTFlags;
          var v13786 = v19519.Writeable;
          var v4027 = ~v13786;
          ast$$91.flags = v4026 & v4027;
        } else {
          ast$$91.type = this.anyType;
          var v13787 = this.checker;
          var v4028 = v13787.errorReporter;
          var v4029 = symbol$$17.name;
          JAM.call(v4028.symbolDoesNotReferToAValue, v4028, [ast$$91, v4029], JAM.policy.p1);
        }
      }
      return;
    }
    function v1025(ast$$90) {
      ast$$90.type = this.anyType;
      var illegalThisRef = false;
      var v13788 = this.thisFnc;
      var v4039 = v13788 == null;
      if (v4039) {
        var v4035 = this.thisType;
        if (v4035) {
          var v13789 = this.thisClassNode;
          if (v13789) {
            var v23264 = this.thisClassNode;
            var v19520 = v23264.nodeType;
            var v23265 = TypeScript$$25.NodeType;
            var v19521 = v23265.ClassDeclaration;
            v13789 = v19520 == v19521;
          }
          var v4032 = v13789;
          if (v4032) {
            illegalThisRef = true;
          } else {
            ast$$90.type = this.thisType;
          }
        } else {
          var v13790 = this.checker;
          var v4034 = v13790.currentModDecl;
          if (v4034) {
            var v13791 = this.checker;
            var v4033 = v13791.errorReporter;
            JAM.call(v4033.simpleError, v4033, [ast$$90, "'this' may not be referenced within module bodies"], JAM.policy.p1);
          }
        }
      } else {
        var v13792 = this.thisClassNode;
        if (v13792) {
          var v25044 = this.thisFnc;
          var v23266 = v25044.fncFlags;
          var v25045 = TypeScript$$25.FncFlags;
          var v23267 = v25045.IsPropertyBound;
          var v19522 = JAM.call(TypeScript$$25.hasFlag, TypeScript$$25, [v23266, v23267], JAM.policy.p1);
          var v23269 = !v19522;
          if (v23269) {
            var v23268 = this.inSuperCall;
            if (v23268) {
              var v25791 = this.thisClassNode;
              var v25046 = v25791.varFlags;
              var v25792 = TypeScript$$25.VarFlags;
              var v25047 = v25792.ClassSuperMustBeFirstCallInConstructor;
              v23268 = JAM.call(TypeScript$$25.hasFlag, TypeScript$$25, [v25046, v25047], JAM.policy.p1);
            }
            v19522 = v23268;
          }
          v13792 = v19522;
        }
        var v4036 = v13792;
        if (v4036) {
          illegalThisRef = true;
        }
        var v23270 = this.thisFnc;
        var v19523 = v23270.isMethod();
        var v23272 = !v19523;
        if (v23272) {
          var v23271 = this.thisFnc;
          v19523 = v23271.isConstructor;
        }
        var v13793 = v19523;
        var v19525 = !v13793;
        if (v19525) {
          var v19524 = this.thisFnc;
          v13793 = v19524.isTargetTypedAsMethod;
        }
        var v4038 = v13793;
        if (v4038) {
          var v13794 = this.thisType;
          if (v13794) {
            var v25048 = this.thisFnc;
            var v23273 = v25048.fncFlags;
            var v25049 = TypeScript$$25.FncFlags;
            var v23274 = v25049.Static;
            var v19526 = v23273 & v23274;
            v13794 = !v19526;
          }
          var v4037 = v13794;
          if (v4037) {
            ast$$90.type = this.thisType;
          }
        }
      }
      var v23275 = this.enclosingFncIsMethod;
      var v19527 = !v23275;
      if (v19527) {
        v19527 = this.thisFnc;
      }
      var v13795 = v19527;
      if (v13795) {
        var v23276 = this.thisFnc;
        var v19528 = v23276.fncFlags;
        var v23277 = TypeScript$$25.FncFlags;
        var v19529 = v23277.IsFatArrowFunction;
        v13795 = JAM.call(TypeScript$$25.hasFlag, TypeScript$$25, [v19528, v19529], JAM.policy.p1);
      }
      var v4055 = v13795;
      if (v4055) {
        var v13796 = this.thisFnc;
        var v4054 = v13796.boundToProperty;
        if (v4054) {
          var v19530 = this.thisFnc;
          var v13797 = v19530.boundToProperty;
          var v4040 = v13797.sym;
          var container$$17 = v4040.container;
          var v19531 = container$$17.declAST;
          var v13798 = v19531.nodeType;
          var v19532 = TypeScript$$25.NodeType;
          var v13799 = v19532.FuncDecl;
          var v4042 = v13798 == v13799;
          if (v4042) {
            var v4041 = container$$17.declAST;
            v4041.setHasSelfReference();
          }
        } else {
          var v4043 = this.thisFnc;
          var encFnc = v4043.enclosingFnc;
          var firstEncFnc = encFnc;
          for (;encFnc;) {
            var v13800 = this.thisClassNode;
            if (v13800) {
              var v19533 = encFnc.fncFlags;
              var v23278 = TypeScript$$25.FncFlags;
              var v19534 = v23278.IsPropertyBound;
              v13800 = JAM.call(TypeScript$$25.hasFlag, TypeScript$$25, [v19533, v19534], JAM.policy.p1);
            }
            var v4044 = v13800;
            if (v4044) {
              illegalThisRef = true;
            }
            var v23279 = encFnc.fncFlags;
            var v25050 = TypeScript$$25.FncFlags;
            var v23280 = v25050.IsFatArrowFunction;
            var v19535 = JAM.call(TypeScript$$25.hasFlag, TypeScript$$25, [v23279, v23280], JAM.policy.p1);
            var v13801 = !v19535;
            var v19536 = !v13801;
            if (v19536) {
              v13801 = encFnc.hasSelfReference();
            }
            var v4045 = v13801;
            if (v4045) {
              encFnc.setHasSelfReference();
              break;
            }
            encFnc = encFnc.enclosingFnc;
          }
          var v13802 = !encFnc;
          if (v13802) {
            v13802 = firstEncFnc;
          }
          var v4052 = v13802;
          if (v4052) {
            encFnc = firstEncFnc;
            encFnc.setHasSelfReference();
          } else {
            var v4051 = !encFnc;
            if (v4051) {
              var v4050 = this.thisClassNode;
              if (v4050) {
                var v4046 = this.thisClassNode;
                var v19537 = v4046.varFlags;
                var v23281 = TypeScript$$25.VarFlags;
                var v19538 = v23281.MustCaptureThis;
                v4046.varFlags = v19537 | v19538;
              } else {
                var v13803 = this.checker;
                var v4049 = v13803.currentModDecl;
                if (v4049) {
                  var v13804 = this.checker;
                  var v4047 = v13804.currentModDecl;
                  var v19539 = v4047.modFlags;
                  var v23282 = TypeScript$$25.ModuleFlags;
                  var v19540 = v23282.MustCaptureThis;
                  v4047.modFlags = v19539 | v19540;
                } else {
                  var v4048 = this.checker;
                  v4048.mustCaptureGlobalThis = true;
                }
              }
            }
          }
          var v23283 = encFnc;
          if (v23283) {
            var v25051 = encFnc.isMethod();
            var v25793 = !v25051;
            if (v25793) {
              v25051 = encFnc.isConstructor;
            }
            v23283 = v25051;
          }
          var v19541 = v23283;
          if (v19541) {
            v19541 = this.thisType;
          }
          var v13805 = v19541;
          if (v13805) {
            var v23284 = encFnc.fncFlags;
            var v25052 = TypeScript$$25.FncFlags;
            var v23285 = v25052.Static;
            var v19542 = JAM.call(TypeScript$$25.hasFlag, TypeScript$$25, [v23284, v23285], JAM.policy.p1);
            v13805 = !v19542;
          }
          var v4053 = v13805;
          if (v4053) {
            ast$$90.type = this.thisType;
          }
        }
      }
      if (illegalThisRef) {
        var v13806 = this.checker;
        var v4056 = v13806.errorReporter;
        JAM.call(v4056.simpleError, v4056, [ast$$90, "Keyword 'this' cannot be referenced in initializers in a class body, or in super constructor calls"], JAM.policy.p1);
      }
      return ast$$90;
    }
    function v1024(ast$$89) {
      var v19543 = this.thisType;
      if (v19543) {
        var v23286 = this.enclosingFncIsMethod;
        if (v23286) {
          var v25794 = this.thisFnc;
          var v25053 = v25794.isStatic();
          v23286 = !v25053;
        }
        v19543 = v23286;
      }
      var v13807 = v19543;
      if (v13807) {
        var v19544 = this.thisType;
        v13807 = v19544.baseClass();
      }
      var v4064 = v13807;
      if (v4064) {
        var v4057 = this.thisType;
        var v26551 = v4057.baseClass();
        ast$$89.type = v26551;
      } else {
        var v25795 = this.enclosingFncIsMethod;
        var v25054 = !v25795;
        if (v25054) {
          v25054 = this.thisType;
        }
        var v23287 = v25054;
        if (v23287) {
          var v25055 = this.thisType;
          v23287 = v25055.baseClass();
        }
        var v19545 = v23287;
        if (v19545) {
          v19545 = this.thisFnc;
        }
        var v13808 = v19545;
        if (v13808) {
          var v23288 = this.thisFnc;
          var v19546 = v23288.fncFlags;
          var v23289 = TypeScript$$25.FncFlags;
          var v19547 = v23289.IsFatArrowFunction;
          v13808 = JAM.call(TypeScript$$25.hasFlag, TypeScript$$25, [v19546, v19547], JAM.policy.p1);
        }
        var v4062 = v13808;
        if (v4062) {
          var v4058 = this.thisFnc;
          var enclosingFnc = v4058.enclosingFnc;
          var v13809 = enclosingFnc.fncFlags;
          var v19548 = TypeScript$$25.FncFlags;
          var v13810 = v19548.IsFatArrowFunction;
          var v4059 = JAM.call(TypeScript$$25.hasFlag, TypeScript$$25, [v13809, v13810], JAM.policy.p1);
          for (;v4059;) {
            enclosingFnc = enclosingFnc.enclosingFnc;
            var v13811 = enclosingFnc.fncFlags;
            var v19549 = TypeScript$$25.FncFlags;
            var v13812 = v19549.IsFatArrowFunction;
            v4059 = JAM.call(TypeScript$$25.hasFlag, TypeScript$$25, [v13811, v13812], JAM.policy.p1);
          }
          var v19550 = enclosingFnc;
          if (v19550) {
            var v23290 = enclosingFnc.isMethod();
            var v25056 = !v23290;
            if (v25056) {
              v23290 = enclosingFnc.isConstructor;
            }
            v19550 = v23290;
          }
          var v13813 = v19550;
          if (v13813) {
            var v19551 = enclosingFnc.isStatic();
            v13813 = !v19551;
          }
          var v4061 = v13813;
          if (v4061) {
            var v4060 = this.thisType;
            var v26552 = v4060.baseClass();
            ast$$89.type = v26552;
            enclosingFnc.setHasSuperReferenceInFatArrowFunction();
            return ast$$89;
          }
        }
        ast$$89.type = this.anyType;
        var v13814 = this.checker;
        var v4063 = v13814.errorReporter;
        JAM.call(v4063.invalidSuperReference, v4063, [ast$$89]);
      }
      return ast$$89;
    }
    function v1023(varDecl$$17, typeName$$2, isModuleName$$1) {
      var typestring = "";
      if (isModuleName$$1) {
        var quotestring = "";
        var v13815 = JAM.call(TypeScript$$25.isQuoted, TypeScript$$25, [typeName$$2]);
        var v4065 = !v13815;
        if (v4065) {
          quotestring = "'";
        }
        var v13816 = " is using inaccessible module " + quotestring;
        var v4066 = v13816 + typeName$$2;
        typestring = v4066 + quotestring;
      } else {
        var v4067 = " has or is using private type '" + typeName$$2;
        typestring = v4067 + "'";
      }
      var v13817 = varDecl$$17.varFlags;
      var v19552 = TypeScript$$25.VarFlags;
      var v13818 = v19552.Public;
      var v4075 = JAM.call(TypeScript$$25.hasFlag, TypeScript$$25, [v13817, v13818], JAM.policy.p1);
      if (v4075) {
        var v25057 = varDecl$$17.sym;
        var v23291 = v25057.container;
        var v19553 = v23291.declAST;
        var v13819 = v19553.nodeType;
        var v19554 = TypeScript$$25.NodeType;
        var v13820 = v19554.InterfaceDeclaration;
        var v4072 = v13819 == v13820;
        if (v4072) {
          var v13821 = this.checker;
          var v4068 = v13821.errorReporter;
          var v25058 = varDecl$$17.sym;
          var v23292 = v25058.name;
          var v19555 = "property '" + v23292;
          var v13822 = v19555 + "' of exported interface";
          var v4069 = v13822 + typestring;
          JAM.call(v4068.simpleError, v4068, [varDecl$$17, v4069], JAM.policy.p1);
        } else {
          var v13823 = this.checker;
          var v4070 = v13823.errorReporter;
          var v25059 = varDecl$$17.sym;
          var v23293 = v25059.name;
          var v19556 = "public member '" + v23293;
          var v13824 = v19556 + "' of exported class";
          var v4071 = v13824 + typestring;
          JAM.call(v4070.simpleError, v4070, [varDecl$$17, v4071], JAM.policy.p1);
        }
      } else {
        var v13825 = this.checker;
        var v4073 = v13825.errorReporter;
        var v25060 = varDecl$$17.sym;
        var v23294 = v25060.name;
        var v19557 = "exported variable '" + v23294;
        var v13826 = v19557 + "'";
        var v4074 = v13826 + typestring;
        JAM.call(v4073.simpleError, v4073, [varDecl$$17, v4074], JAM.policy.p1);
      }
      return;
    }
    function v1022(varDecl$$16) {
      function v1021(typeName$$1, isModuleName) {
        return JAM.call(_this$$6.varPrivacyErrorReporter, _this$$6, [varDecl$$16, typeName$$1, isModuleName], JAM.policy.p1);
      }
      function v1020(ast$$88, parent$$65, walker$$49) {
        var v13827 = ast$$88;
        if (v13827) {
          var v19558 = ast$$88.nodeType;
          var v23295 = TypeScript$$25.NodeType;
          var v19559 = v23295.FuncDecl;
          v13827 = v19558 == v19559;
        }
        var v4078 = v13827;
        if (v4078) {
          var v13828 = ast$$88.fncFlags;
          var v19560 = TypeScript$$25.FncFlags;
          var v13829 = v19560.IsFatArrowFunction;
          var v4076 = JAM.call(TypeScript$$25.hasFlag, TypeScript$$25, [v13828, v13829], JAM.policy.p1);
          if (v4076) {
            var v13830 = ast$$88.fncFlags;
            var v19561 = TypeScript$$25.FncFlags;
            var v13831 = v19561.IsPropertyBound;
            ast$$88.fncFlags = v13830 | v13831;
          }
          var v4077 = walker$$49.options;
          v4077.goChildren = false;
        }
        return ast$$88;
      }
      var _this$$6 = this;
      var infSym = varDecl$$16.sym;
      var v4128 = infSym == null;
      if (v4128) {
        var v4083 = varDecl$$16.init;
        if (v4083) {
          var v4079 = varDecl$$16;
          var v13832 = varDecl$$16.init;
          var v26553 = JAM.call(this.typeCheck, this, [v13832]);
          v4079.init = v26553;
          var v4080 = varDecl$$16;
          var v13833 = this.checker;
          var v19562 = varDecl$$16.init;
          var v13834 = v19562.type;
          var v26554 = JAM.call(v13833.widenType, v13833, [v13834]);
          v4080.type = v26554;
        } else {
          var v19563 = this.checker;
          var v13835 = v19563.styleSettings;
          var v4082 = v13835.implicitAny;
          if (v4082) {
            var v13836 = this.checker;
            var v4081 = v13836.errorReporter;
            JAM.call(v4081.styleError, v4081, [varDecl$$16, "type implicitly set to 'any'"], JAM.policy.p1);
          }
          varDecl$$16.type = this.anyType;
        }
      } else {
        var v13837 = infSym.typeCheckStatus;
        var v19564 = TypeScript$$25.TypeCheckStatus;
        var v13838 = v19564.Started;
        var v4127 = v13837 == v13838;
        if (v4127) {
          var v19565 = this.checker;
          var v13839 = v19565.styleSettings;
          var v4085 = v13839.implicitAny;
          if (v4085) {
            var v13840 = this.checker;
            var v4084 = v13840.errorReporter;
            JAM.call(v4084.styleError, v4084, [varDecl$$16, "type implicitly set to 'any'"], JAM.policy.p1);
          }
          varDecl$$16.type = this.anyType;
          var v4086 = this.anyType;
          JAM.call(infSym.setType, infSym, [v4086]);
        } else {
          var v13841 = infSym.typeCheckStatus;
          var v19566 = TypeScript$$25.TypeCheckStatus;
          var v13842 = v19566.NotStarted;
          var v4126 = v13841 == v13842;
          if (v4126) {
            var v4087 = TypeScript$$25.TypeCheckStatus;
            infSym.typeCheckStatus = v4087.Started;
            var v4088 = this.checker;
            JAM.call(v4088.addStartedPTO, v4088, [infSym]);
            var resolved$$1 = false;
            var v13843 = varDecl$$16.type;
            var v4092 = v13843 == null;
            if (v4092) {
              var v4091 = varDecl$$16.typeExpr;
              if (v4091) {
                JAM.call(this.resolveBoundDecl, this, [varDecl$$16]);
                resolved$$1 = true;
                var v4089 = varDecl$$16.typeExpr;
                varDecl$$16.type = v4089.type;
                var v4090 = infSym;
                var v13844 = this.checker;
                var v26555 = v13844.getTypeCheckFinishedStatus();
                v4090.typeCheckStatus = v26555;
              }
            }
            var v4119 = varDecl$$16.init;
            if (v4119) {
              var v4093 = varDecl$$16.varFlags;
              var v13845 = TypeScript$$25.VarFlags;
              var v4094 = v13845.LocalStatic;
              var isLocalStatic = JAM.call(TypeScript$$25.hasFlag, TypeScript$$25, [v4093, v4094], JAM.policy.p1);
              var prevScope$$3 = this.scope;
              var v13846 = varDecl$$16.init;
              var v4095 = v13846.isParenthesized;
              var applyTargetType$$1 = !v4095;
              if (isLocalStatic) {
                var v19567 = varDecl$$16.sym;
                var v13847 = v19567.container;
                var v4096 = v13847.getType();
                this.scope = v4096.memberScope;
              }
              var v19568 = varDecl$$16.varFlags;
              var v23296 = TypeScript$$25.VarFlags;
              var v19569 = v23296.Property;
              var v13848 = JAM.call(TypeScript$$25.hasFlag, TypeScript$$25, [v19568, v19569], JAM.policy.p1);
              if (v13848) {
                v13848 = this.thisClassNode;
              }
              var v4099 = v13848;
              if (v4099) {
                var v4097 = TypeScript$$25.getAstWalkerFactory();
                var v4098 = varDecl$$16.init;
                JAM.call(v4097.walk, v4097, [v4098, v1020], JAM.policy.p1);
              }
              var v4100 = this.checker;
              var v4101 = varDecl$$16.type;
              var v13849 = this.checker;
              var v4102 = v13849.inProvisionalTypecheckMode();
              var v4103 = varDecl$$16.init;
              JAM.call(v4100.typeCheckWithContextualType, v4100, [v4101, v4102, applyTargetType$$1, v4103], JAM.policy.p1);
              this.scope = prevScope$$3;
              var v4116 = varDecl$$16.type;
              if (v4116) {
                var preserveScope = false;
                var preservedContainedScope = null;
                var v13850 = varDecl$$16.init;
                var v4108 = v13850.type;
                if (v4108) {
                  var v13851 = varDecl$$16.init;
                  var v4104 = v13851.type;
                  preservedContainedScope = v4104.containedScope;
                  preserveScope = true;
                  var v19570 = varDecl$$16.init;
                  var v13852 = v19570.type;
                  var v13853 = this.voidType;
                  var v4107 = v13852 == v13853;
                  if (v4107) {
                    var v13854 = this.checker;
                    var v4105 = v13854.errorReporter;
                    var v23297 = varDecl$$16.id;
                    var v19571 = v23297.actualText;
                    var v13855 = "Cannot assign type 'void' to variable '" + v19571;
                    var v4106 = v13855 + "'";
                    JAM.call(v4105.simpleError, v4105, [varDecl$$16, v4106], JAM.policy.p1);
                  }
                }
                var v4109 = varDecl$$16;
                var v13856 = varDecl$$16.init;
                var v13857 = varDecl$$16.type;
                var v19572 = applyTargetType$$1;
                if (v19572) {
                  var v25061 = this.checker;
                  var v23298 = v25061.inProvisionalTypecheckMode();
                  v19572 = !v23298;
                }
                var v13858 = v19572;
                var v26556 = JAM.call(this.castWithCoercion, this, [v13856, v13857, v13858, false], JAM.policy.p1);
                v4109.init = v26556;
                var v13859 = preserveScope;
                if (v13859) {
                  var v25062 = varDecl$$16.init;
                  var v23299 = v25062.type;
                  var v19573 = v23299.containedScope;
                  v13859 = v19573 == null;
                }
                var v4111 = v13859;
                if (v4111) {
                  var v13860 = varDecl$$16.init;
                  var v4110 = v13860.type;
                  v4110.containedScope = preservedContainedScope;
                }
              } else {
                var v4112 = varDecl$$16;
                var v13861 = this.checker;
                var v19574 = varDecl$$16.init;
                var v13862 = v19574.type;
                var v26557 = JAM.call(v13861.widenType, v13861, [v13862]);
                v4112.type = v26557;
                var v13863 = varDecl$$16.type;
                var v13864 = this.voidType;
                var v4115 = v13863 == v13864;
                if (v4115) {
                  var v13865 = this.checker;
                  var v4113 = v13865.errorReporter;
                  var v23300 = varDecl$$16.id;
                  var v19575 = v23300.actualText;
                  var v13866 = "Cannot assign type 'void' to variable '" + v19575;
                  var v4114 = v13866 + "'";
                  JAM.call(v4113.simpleError, v4113, [varDecl$$16, v4114], JAM.policy.p1);
                  varDecl$$16.type = this.anyType;
                }
              }
              var v4117 = varDecl$$16.type;
              JAM.call(infSym.setType, infSym, [v4117]);
            } else {
              var v4118 = !resolved$$1;
              if (v4118) {
                JAM.call(this.resolveBoundDecl, this, [varDecl$$16]);
              }
            }
            var v4120 = infSym;
            var v13867 = this.checker;
            var v26558 = v13867.getTypeCheckFinishedStatus();
            v4120.typeCheckStatus = v26558;
          } else {
            var v19576 = this.checker;
            var v19577 = infSym.typeCheckStatus;
            var v13868 = JAM.call(v19576.typeStatusIsFinished, v19576, [v19577]);
            if (v13868) {
              var v19578 = infSym.declAST;
              v13868 = v19578 != varDecl$$16;
            }
            var v4125 = v13868;
            if (v4125) {
              var v4124 = varDecl$$16.init;
              if (v4124) {
                var v4121 = varDecl$$16;
                var v13869 = varDecl$$16.init;
                var v26559 = JAM.call(this.typeCheck, this, [v13869]);
                v4121.init = v26559;
                var v4122 = varDecl$$16;
                var v26560 = infSym.getType();
                v4122.type = v26560;
                var v4123 = varDecl$$16;
                var v13870 = varDecl$$16.init;
                var v13871 = varDecl$$16.type;
                var v26561 = JAM.call(this.cast, this, [v13870, v13871], JAM.policy.p1);
                v4123.init = v26561;
              }
            }
          }
        }
      }
      var v13872 = varDecl$$16.id;
      if (v13872) {
        v13872 = varDecl$$16.sym;
      }
      var v4130 = v13872;
      if (v4130) {
        var v4129 = varDecl$$16.id;
        v4129.sym = varDecl$$16.sym;
      }
      var v13873 = varDecl$$16.sym;
      if (v13873) {
        var v19579 = varDecl$$16.sym;
        v13873 = v19579.container;
      }
      var v4133 = v13873;
      if (v4133) {
        var v13874 = varDecl$$16.sym;
        var v4131 = v13874.getType();
        var v4132 = varDecl$$16.sym;
        JAM.call(this.checkTypePrivacy, this, [v4131, v4132, v1021], JAM.policy.p1);
      }
      return varDecl$$16;
    }
    function v1019(varDecl$$15) {
      var v4150 = varDecl$$15.typeExpr;
      if (v4150) {
        var v25796 = varDecl$$15.typeExpr;
        var v25063 = v25796.type;
        var v23301 = v25063 == null;
        var v25065 = !v23301;
        if (v25065) {
          var v26115 = varDecl$$15.typeExpr;
          var v25797 = v26115.type;
          if (v25797) {
            var v26278 = varDecl$$15.typeExpr;
            var v26116 = v26278.type;
            var v26117 = this.anyType;
            v25797 = v26116 == v26117;
          }
          var v25064 = v25797;
          if (v25064) {
            v25064 = this.scope;
          }
          v23301 = v25064;
        }
        var v19580 = v23301;
        var v23303 = !v19580;
        if (v23303) {
          var v25798 = varDecl$$15.typeExpr;
          var v25066 = v25798.type;
          var v23302 = v25066.symbol;
          v19580 = v23302 == null;
        }
        var v13875 = v19580;
        var v19582 = !v13875;
        if (v19582) {
          var v23304 = this.checker;
          var v26118 = varDecl$$15.typeExpr;
          var v25799 = v26118.type;
          var v25067 = v25799.symbol;
          var v23305 = v25067.typeCheckStatus;
          var v19581 = JAM.call(v23304.typeStatusIsFinished, v23304, [v23305]);
          v13875 = !v19581;
        }
        var v4135 = v13875;
        if (v4135) {
          var v4134 = varDecl$$15.typeExpr;
          JAM.call(this.typeCheck, this, [v4134]);
        }
        var v4136 = varDecl$$15.typeExpr;
        varDecl$$15.type = v4136.type;
        var v4139 = varDecl$$15.sym;
        if (v4139) {
          var v4137 = varDecl$$15.sym;
          var v4138 = varDecl$$15.type;
          JAM.call(v4137.setType, v4137, [v4138]);
        }
      } else {
        var v13876 = varDecl$$15.init;
        var v4149 = v13876 == null;
        if (v4149) {
          var v19583 = this.checker;
          var v13877 = v19583.styleSettings;
          var v4141 = v13877.implicitAny;
          if (v4141) {
            var v13878 = this.checker;
            var v4140 = v13878.errorReporter;
            JAM.call(v4140.styleError, v4140, [varDecl$$15, "type implicitly set to 'any'"], JAM.policy.p1);
          }
          varDecl$$15.type = this.anyType;
          var v4148 = varDecl$$15.sym;
          if (v4148) {
            var v13879 = varDecl$$15.sym;
            var v4145 = v13879.isType();
            if (v4145) {
              var tsym$$1 = varDecl$$15.sym;
              var v4144 = tsym$$1.isMethod;
              if (v4144) {
                var v13880 = this.checker;
                var v4142 = v13880.errorReporter;
                JAM.call(v4142.simpleError, v4142, [varDecl$$15, "Cannot bind method group to variable.  (Did you mean to use 'declare function' instead of 'declare var'?)"], JAM.policy.p1);
                return;
              } else {
                var v13881 = this.checker;
                var v4143 = v13881.errorReporter;
                JAM.call(v4143.simpleError, v4143, [varDecl$$15, "Cannot bind type to variable"], JAM.policy.p1);
                return;
              }
            }
            var v4146 = varDecl$$15.sym;
            var v4147 = varDecl$$15.type;
            JAM.call(v4146.setType, v4146, [v4147]);
          }
        }
      }
      return;
    }
    function v1018(varDecl$$14) {
      var sym$$34 = varDecl$$14.sym;
      var svThisFnc$$1 = this.thisFnc;
      var svThisType$$1 = this.thisType;
      var prevMethodStatus$$1 = this.enclosingFncIsMethod;
      var v4151 = this.checker;
      var prevLocationInfo$$1 = v4151.locationInfo;
      var v13882 = sym$$34;
      if (v13882) {
        v13882 = sym$$34.container;
      }
      var v4161 = v13882;
      if (v4161) {
        var v4152;
        var v19584 = varDecl$$14.varFlags;
        var v23306 = TypeScript$$25.VarFlags;
        var v19585 = v23306.ClassConstructorProperty;
        var v13885 = JAM.call(TypeScript$$25.hasFlag, TypeScript$$25, [v19584, v19585], JAM.policy.p1);
        if (v13885) {
          var v19586 = sym$$34.container;
          var v13883 = v19586.getType();
          v4152 = v13883.constructorScope;
        } else {
          var v13884 = sym$$34.container;
          v4152 = v13884.instanceScope();
        }
        var instanceScope = v4152;
        var v19587 = varDecl$$14.varFlags;
        var v23307 = TypeScript$$25.VarFlags;
        var v19588 = v23307.Property;
        var v13886 = JAM.call(TypeScript$$25.hasFlag, TypeScript$$25, [v19587, v19588], JAM.policy.p1);
        if (v13886) {
          var v25068 = sym$$34.container;
          var v23308 = v25068.declAST;
          var v19589 = v23308.nodeType;
          var v23309 = TypeScript$$25.NodeType;
          var v19590 = v23309.FuncDecl;
          v13886 = v19589 == v19590;
        }
        var v4154 = v13886;
        if (v4154) {
          var v4153 = sym$$34.container;
          this.thisFnc = v4153.declAST;
        }
        if (instanceScope) {
          var prevScope$$2 = this.scope;
          this.scope = instanceScope;
          var container$$16 = sym$$34.container;
          var v23310 = this.checker;
          var v19591 = v23310.units;
          if (v19591) {
            var v23311 = sym$$34.unitIndex;
            v19591 = v23311 >= 0;
          }
          var v13887 = v19591;
          if (v13887) {
            var v19592 = sym$$34.unitIndex;
            var v25069 = this.checker;
            var v23312 = v25069.units;
            var v19593 = v23312.length;
            v13887 = v19592 < v19593;
          }
          var v4157 = v13887;
          if (v4157) {
            var v4155 = this.checker;
            var v19594 = this.checker;
            var v13888 = v19594.units;
            var v13889 = sym$$34.unitIndex;
            v4155.locationInfo = v13888[v13889];
          } else {
            var v4156 = this.checker;
            v4156.locationInfo = TypeScript$$25.unknownLocationInfo;
          }
          for (;container$$16;) {
            var v13890 = container$$16.kind();
            var v19595 = TypeScript$$25.SymbolKind;
            var v13891 = v19595.Type;
            var v4160 = v13890 == v13891;
            if (v4160) {
              var typeSym$$3 = container$$16;
              var type$$49 = typeSym$$3.type;
              var v4158 = type$$49.call;
              if (v4158) {
                this.enclosingFncIsMethod = typeSym$$3.isMethod;
              }
              var v4159 = type$$49.isClass();
              if (v4159) {
                this.thisType = type$$49.instanceType;
                break;
              }
            }
            container$$16 = container$$16.container;
          }
          JAM.call(this.typeCheckBoundDecl, this, [varDecl$$14]);
          this.scope = prevScope$$2;
        }
      }
      this.thisFnc = svThisFnc$$1;
      this.thisType = svThisType$$1;
      var v4162 = this.checker;
      v4162.locationInfo = prevLocationInfo$$1;
      this.enclosingFncIsMethod = prevMethodStatus$$1;
      return;
    }
    function v1017(ast$$87) {
      var v19596 = ast$$87.nodeType;
      var v23313 = TypeScript$$25.NodeType;
      var v19597 = v23313.VarDecl;
      var v13892 = v19596 == v19597;
      var v19600 = !v13892;
      if (v19600) {
        var v19598 = ast$$87.nodeType;
        var v23314 = TypeScript$$25.NodeType;
        var v19599 = v23314.ArgDecl;
        v13892 = v19598 == v19599;
      }
      var v4165 = v13892;
      if (v4165) {
        JAM.call(this.inScopeTypeCheckBoundDecl, this, [ast$$87]);
      } else {
        var v13893 = ast$$87.nodeType;
        var v19601 = TypeScript$$25.NodeType;
        var v13894 = v19601.FuncDecl;
        var v4164 = v13893 == v13894;
        if (v4164) {
          var funcDecl$$23 = ast$$87;
          var v4163 = funcDecl$$23.isAccessor();
          if (v4163) {
            JAM.call(this.typeCheckFunction, this, [funcDecl$$23]);
          }
        }
      }
      return;
    }
    function v1016(ast$$86) {
      if (ast$$86) {
        return JAM.call(ast$$86.typeCheck, ast$$86, [this]);
      } else {
        return null;
      }
      return;
    }
    function v1015(ast$$85, enclosingScope) {
      var prevScope$$1 = this.scope;
      this.scope = enclosingScope;
      var svThisFnc = this.thisFnc;
      var svThisType = this.thisType;
      var svThisClassNode = this.thisClassNode;
      var v4166 = this.checker;
      var svCurrentModDecl = v4166.currentModDecl;
      var prevMethodStatus = this.enclosingFncIsMethod;
      var v4167 = this.scope;
      var container$$15 = v4167.container;
      var fnc$$1 = null;
      for (;container$$15;) {
        var v13895 = container$$15.kind();
        var v19602 = TypeScript$$25.SymbolKind;
        var v13896 = v19602.Type;
        var v4174 = v13895 == v13896;
        if (v4174) {
          var typeSym$$2 = container$$15;
          var type$$48 = typeSym$$2.type;
          var v4169 = type$$48.call;
          if (v4169) {
            var v4168 = fnc$$1 == null;
            if (v4168) {
              this.enclosingFncIsMethod = typeSym$$2.isMethod;
              fnc$$1 = container$$15.declAST;
            }
          }
          var v4171 = type$$48.isClass();
          if (v4171) {
            this.thisType = type$$48.instanceType;
            var v13897 = typeSym$$2.declAST;
            if (v13897) {
              var v23315 = typeSym$$2.declAST;
              var v19603 = v23315.nodeType;
              var v23316 = TypeScript$$25.NodeType;
              var v19604 = v23316.ClassDeclaration;
              v13897 = v19603 == v19604;
            }
            var v4170 = v13897;
            if (v4170) {
              this.thisClassNode = typeSym$$2.declAST;
            }
            break;
          }
          var v4173 = type$$48.isModuleType();
          if (v4173) {
            var v4172 = this.checker;
            v4172.currentModDecl = typeSym$$2.declAST;
            break;
          }
        }
        container$$15 = container$$15.container;
      }
      this.thisFnc = fnc$$1;
      var updated = JAM.call(this.typeCheck, this, [ast$$85]);
      this.thisFnc = svThisFnc;
      this.thisType = svThisType;
      this.thisClassNode = svThisClassNode;
      var v4175 = this.checker;
      v4175.currentModDecl = svCurrentModDecl;
      this.enclosingFncIsMethod = prevMethodStatus;
      this.scope = prevScope$$1;
      return;
    }
    function v1014(ast$$84, type$$47, applyCoercion, typeAssertion) {
      var v4176 = TypeScript$$25.TypeComparisonInfo;
      var comparisonInfo$$12 = new v4176;
      var v19605 = this.checker;
      var v19606 = ast$$84.type;
      var v13898 = JAM.call(v19605.sourceIsAssignableToTarget, v19605, [v19606, type$$47, comparisonInfo$$12], JAM.policy.p1);
      var v19608 = !v13898;
      if (v19608) {
        var v19607 = typeAssertion;
        if (v19607) {
          var v23317 = this.checker;
          var v23318 = ast$$84.type;
          v19607 = JAM.call(v23317.sourceIsAssignableToTarget, v23317, [type$$47, v23318, comparisonInfo$$12], JAM.policy.p1);
        }
        v13898 = v19607;
      }
      var v4182 = v13898;
      if (v4182) {
        if (applyCoercion) {
          var v4178 = type$$47 == null;
          if (v4178) {
            ast$$84.type = this.anyType;
          } else {
            var v4177 = type$$47.isClass();
            if (v4177) {
              ast$$84.type = type$$47.instanceType;
            } else {
              ast$$84.type = type$$47;
            }
          }
        }
        return ast$$84;
      } else {
        var v13899 = this.checker;
        var v4179 = v13899.errorReporter;
        var v4180 = ast$$84.type;
        var v4181 = this.scope;
        JAM.call(v4179.incompatibleTypes, v4179, [ast$$84, v4180, type$$47, null, v4181, comparisonInfo$$12], JAM.policy.p1);
        return ast$$84;
      }
      return;
    }
    function v1013(ast$$83, type$$46) {
      return JAM.call(this.castWithCoercion, this, [ast$$83, type$$46, true, false], JAM.policy.p1);
    }
    function v1012() {
      var v4183 = this.globalScope;
      var arraySym = JAM.call(v4183.find, v4183, ["Array", false, true], JAM.policy.p1);
      var v13900 = arraySym;
      if (v13900) {
        var v19609 = arraySym.kind();
        var v23319 = TypeScript$$25.SymbolKind;
        var v19610 = v23319.Type;
        v13900 = v19609 == v19610;
      }
      var v4184 = v13900;
      if (v4184) {
        this.arrayInterfaceType = arraySym.type;
      }
      var v4185 = this.globalScope;
      var stringSym = JAM.call(v4185.find, v4185, ["String", false, true], JAM.policy.p1);
      var v13901 = stringSym;
      if (v13901) {
        var v19611 = stringSym.kind();
        var v23320 = TypeScript$$25.SymbolKind;
        var v19612 = v23320.Type;
        v13901 = v19611 == v19612;
      }
      var v4186 = v13901;
      if (v4186) {
        this.stringInterfaceType = stringSym.type;
      }
      var v4187 = this.globalScope;
      var objectSym = JAM.call(v4187.find, v4187, ["Object", false, true], JAM.policy.p1);
      var v13902 = objectSym;
      if (v13902) {
        var v19613 = objectSym.kind();
        var v23321 = TypeScript$$25.SymbolKind;
        var v19614 = v23321.Type;
        v13902 = v19613 == v19614;
      }
      var v4188 = v13902;
      if (v4188) {
        this.objectInterfaceType = objectSym.type;
      }
      var v4189 = this.globalScope;
      var fnSym = JAM.call(v4189.find, v4189, ["Function", false, true], JAM.policy.p1);
      var v13903 = fnSym;
      if (v13903) {
        var v19615 = fnSym.kind();
        var v23322 = TypeScript$$25.SymbolKind;
        var v19616 = v23322.Type;
        v13903 = v19615 == v19616;
      }
      var v4190 = v13903;
      if (v4190) {
        this.functionInterfaceType = fnSym.type;
      }
      var v4191 = this.globalScope;
      var numberSym = JAM.call(v4191.find, v4191, ["Number", false, true], JAM.policy.p1);
      var v13904 = numberSym;
      if (v13904) {
        var v19617 = numberSym.kind();
        var v23323 = TypeScript$$25.SymbolKind;
        var v19618 = v23323.Type;
        v13904 = v19617 == v19618;
      }
      var v4192 = v13904;
      if (v4192) {
        this.numberInterfaceType = numberSym.type;
      }
      var v4193 = this.globalScope;
      var booleanSym = JAM.call(v4193.find, v4193, ["Boolean", false, true], JAM.policy.p1);
      var v13905 = booleanSym;
      if (v13905) {
        var v19619 = booleanSym.kind();
        var v23324 = TypeScript$$25.SymbolKind;
        var v19620 = v23324.Type;
        v13905 = v19619 == v19620;
      }
      var v4194 = v13905;
      if (v4194) {
        this.booleanInterfaceType = booleanSym.type;
      }
      var v4195 = this.globalScope;
      var regexSym = JAM.call(v4195.find, v4195, ["RegExp", false, true], JAM.policy.p1);
      var v13906 = regexSym;
      if (v13906) {
        var v19621 = regexSym.kind();
        var v23325 = TypeScript$$25.SymbolKind;
        var v19622 = v23325.Type;
        v13906 = v19621 == v19622;
      }
      var v4196 = v13906;
      if (v4196) {
        this.regexType = regexSym.type;
      }
      return;
    }
    function TypeFlow$$1(logger$$4, initScope, parser$$2, checker$$17) {
      this.logger = logger$$4;
      this.initScope = initScope;
      this.parser = parser$$2;
      this.checker = checker$$17;
      this.thisFnc = null;
      this.thisClassNode = null;
      this.enclosingFncIsMethod = false;
      this.arrayInterfaceType = null;
      this.stringInterfaceType = null;
      this.objectInterfaceType = null;
      this.functionInterfaceType = null;
      this.numberInterfaceType = null;
      this.booleanInterfaceType = null;
      this.iargumentsInterfaceType = null;
      this.currentScript = null;
      this.inImportTypeCheck = false;
      this.inTypeRefTypeCheck = false;
      this.inArrayElementTypeCheck = false;
      var v26562 = new ResolutionDataCache;
      this.resolutionDataCache = v26562;
      this.nestingLevel = 0;
      this.inSuperCall = false;
      var v4197 = this.checker;
      v4197.typeFlow = this;
      this.scope = this.initScope;
      this.globalScope = this.initScope;
      var v4198 = this.checker;
      this.doubleType = v4198.numberType;
      var v4199 = this.checker;
      this.booleanType = v4199.booleanType;
      var v4200 = this.checker;
      this.stringType = v4200.stringType;
      var v4201 = this.checker;
      this.anyType = v4201.anyType;
      this.regexType = this.anyType;
      var v4202 = this.checker;
      this.nullType = v4202.nullType;
      var v4203 = this.checker;
      this.voidType = v4203.voidType;
      var v4204 = this.checker;
      var v4205 = this.anyType;
      var v26563 = JAM.call(v4204.makeArrayType, v4204, [v4205]);
      this.arrayAnyType = v26563;
      return;
    }
    var v4206 = TypeFlow$$1.prototype;
    v4206.initLibs = v1012;
    var v4207 = TypeFlow$$1.prototype;
    v4207.cast = v1013;
    var v4208 = TypeFlow$$1.prototype;
    v4208.castWithCoercion = v1014;
    var v4209 = TypeFlow$$1.prototype;
    v4209.inScopeTypeCheck = v1015;
    var v4210 = TypeFlow$$1.prototype;
    v4210.typeCheck = v1016;
    var v4211 = TypeFlow$$1.prototype;
    v4211.inScopeTypeCheckDecl = v1017;
    var v4212 = TypeFlow$$1.prototype;
    v4212.inScopeTypeCheckBoundDecl = v1018;
    var v4213 = TypeFlow$$1.prototype;
    v4213.resolveBoundDecl = v1019;
    var v4214 = TypeFlow$$1.prototype;
    v4214.typeCheckBoundDecl = v1022;
    var v4215 = TypeFlow$$1.prototype;
    v4215.varPrivacyErrorReporter = v1023;
    var v4216 = TypeFlow$$1.prototype;
    v4216.typeCheckSuper = v1024;
    var v4217 = TypeFlow$$1.prototype;
    v4217.typeCheckThis = v1025;
    var v4218 = TypeFlow$$1.prototype;
    v4218.setTypeFromSymbol = v1026;
    var v4219 = TypeFlow$$1.prototype;
    v4219.typeCheckName = v1028;
    var v4220 = TypeFlow$$1.prototype;
    v4220.typeCheckScript = v1029;
    var v4221 = TypeFlow$$1.prototype;
    v4221.typeCheckBitNot = v1030;
    var v4222 = TypeFlow$$1.prototype;
    v4222.typeCheckUnaryNumberOperator = v1031;
    var v4223 = TypeFlow$$1.prototype;
    v4223.typeCheckLogNot = v1032;
    var v4224 = TypeFlow$$1.prototype;
    v4224.astIsWriteable = v1033;
    var v4225 = TypeFlow$$1.prototype;
    v4225.typeCheckIncOrDec = v1034;
    var v4226 = TypeFlow$$1.prototype;
    v4226.typeCheckBitwiseOperator = v1035;
    var v4227 = TypeFlow$$1.prototype;
    v4227.typeCheckArithmeticOperator = v1036;
    var v4228 = TypeFlow$$1.prototype;
    v4228.typeCheckDotOperator = v1037;
    var v4229 = TypeFlow$$1.prototype;
    v4229.typeCheckBooleanOperator = v1038;
    var v4230 = TypeFlow$$1.prototype;
    v4230.typeCheckAsgOperator = v1039;
    var v4231 = TypeFlow$$1.prototype;
    v4231.typeCheckIndex = v1040;
    var v4232 = TypeFlow$$1.prototype;
    v4232.typeCheckInOperator = v1041;
    var v4233 = TypeFlow$$1.prototype;
    v4233.typeCheckShift = v1042;
    var v4234 = TypeFlow$$1.prototype;
    v4234.typeCheckQMark = v1043;
    var v4235 = TypeFlow$$1.prototype;
    v4235.addFormals = v1044;
    var v4236 = TypeFlow$$1.prototype;
    v4236.addLocalsFromScope = v1045;
    var v4237 = TypeFlow$$1.prototype;
    v4237.addConstructorLocalArgs = v1046;
    var v4238 = TypeFlow$$1.prototype;
    v4238.checkInitSelf = v1047;
    var v4239 = TypeFlow$$1.prototype;
    v4239.checkPromoteFreeVars = v1048;
    var v4240 = TypeFlow$$1.prototype;
    v4240.allReturnsAreVoid = v1050;
    var v4241 = TypeFlow$$1.prototype;
    v4241.classConstructorHasSuperCall = v1051;
    var v4242 = TypeFlow$$1.prototype;
    v4242.baseListPrivacyErrorReporter = v1052;
    var v4243 = TypeFlow$$1.prototype;
    v4243.typeCheckBaseListPrivacy = v1054;
    var v4244 = TypeFlow$$1.prototype;
    v4244.checkSymbolPrivacy = v1055;
    var v4245 = TypeFlow$$1.prototype;
    v4245.checkTypePrivacy = v1057;
    var v4246 = TypeFlow$$1.prototype;
    v4246.checkSignatureGroupPrivacy = v1058;
    var v4247 = TypeFlow$$1.prototype;
    v4247.functionArgumentPrivacyErrorReporter = v1059;
    var v4248 = TypeFlow$$1.prototype;
    v4248.returnTypePrivacyError = v1060;
    var v4249 = TypeFlow$$1.prototype;
    v4249.functionReturnTypePrivacyErrorReporter = v1061;
    var v4250 = TypeFlow$$1.prototype;
    v4250.typeCheckFunction = v1069;
    var v4251 = TypeFlow$$1.prototype;
    v4251.typeCheckBases = v1070;
    var v4252 = TypeFlow$$1.prototype;
    v4252.checkMembersImplementInterfaces = v1071;
    var v4253 = TypeFlow$$1.prototype;
    v4253.typeCheckBaseCalls = v1072;
    var v4254 = TypeFlow$$1.prototype;
    v4254.assertUniqueNamesInBaseTypes = v1074;
    var v4255 = TypeFlow$$1.prototype;
    v4255.checkBaseTypeMemberInheritance = v1076;
    var v4256 = TypeFlow$$1.prototype;
    v4256.typeCheckClass = v1077;
    var v4257 = TypeFlow$$1.prototype;
    v4257.typeCheckOverloadSignatures = v1078;
    var v4258 = TypeFlow$$1.prototype;
    v4258.typeCheckInterface = v1079;
    var v4259 = TypeFlow$$1.prototype;
    v4259.typeCheckImportDecl = v1080;
    var v4260 = TypeFlow$$1.prototype;
    v4260.typeCheckModule = v1081;
    var v4261 = TypeFlow$$1.prototype;
    v4261.typeCheckFor = v1082;
    var v4262 = TypeFlow$$1.prototype;
    v4262.typeCheckWith = v1083;
    var v4263 = TypeFlow$$1.prototype;
    v4263.typeCheckForIn = v1084;
    var v4264 = TypeFlow$$1.prototype;
    v4264.typeCheckWhile = v1085;
    var v4265 = TypeFlow$$1.prototype;
    v4265.typeCheckDoWhile = v1086;
    var v4266 = TypeFlow$$1.prototype;
    v4266.typeCheckCondExpr = v1087;
    var v4267 = TypeFlow$$1.prototype;
    v4267.typeCheckCompoundStmtBlock = v1088;
    var v4268 = TypeFlow$$1.prototype;
    v4268.typeCheckIf = v1089;
    var v4269 = TypeFlow$$1.prototype;
    v4269.typeFromAccessorFuncDecl = v1090;
    var v4270 = TypeFlow$$1.prototype;
    v4270.typeCheckObjectLit = v1091;
    var v4271 = TypeFlow$$1.prototype;
    v4271.typeCheckArrayLit = v1095;
    var v4272 = TypeFlow$$1.prototype;
    v4272.checkForVoidConstructor = v1096;
    var v4273 = TypeFlow$$1.prototype;
    v4273.typeCheckReturn = v1097;
    var v4274 = TypeFlow$$1.prototype;
    v4274.typeCheckInstOf = v1098;
    var v4275 = TypeFlow$$1.prototype;
    v4275.typeCheckCommaOperator = v1099;
    var v4276 = TypeFlow$$1.prototype;
    v4276.typeCheckLogOr = v1100;
    var v4277 = TypeFlow$$1.prototype;
    v4277.typeCheckLogAnd = v1101;
    var v4278 = TypeFlow$$1.prototype;
    v4278.tryAddCandidates = v1102;
    var v4279 = TypeFlow$$1.prototype;
    v4279.resolveOverload = v1103;
    var v4280 = TypeFlow$$1.prototype;
    v4280.typeCheckNew = v1104;
    var v4281 = TypeFlow$$1.prototype;
    v4281.preTypeCheckCallArgs = v1105;
    var v4282 = TypeFlow$$1.prototype;
    v4282.postTypeCheckCallArgs = v1106;
    var v4283 = TypeFlow$$1.prototype;
    v4283.typeCheckCall = v1107;
    var v4284 = TypeFlow$$1.prototype;
    v4284.assignScopes = v1108;
    var v4285 = TypeFlow$$1.prototype;
    v4285.findMemberScope = v1109;
    var v4286 = TypeFlow$$1.prototype;
    v4286.findMemberScopeAt = v1110;
    var v4287 = TypeFlow$$1.prototype;
    v4287.findMemberScopeAtFullAst = v1111;
    return TypeFlow$$1;
  }
  function v1011() {
    function v1010(rd$$1) {
      var v4288 = rd$$1.actuals;
      v4288.length = 0;
      var v4289 = rd$$1.exactCandidates;
      v4289.length = 0;
      var v4290 = rd$$1.conversionCandidates;
      v4290.length = 0;
      this.nextUp = rd$$1.id;
      return;
    }
    function v1009() {
      var rd = null;
      var v13907 = this.nextUp;
      var v13908 = this.cacheSize;
      var v4293 = v13907 < v13908;
      if (v4293) {
        var v4291 = this.rdCache;
        var v4292 = this.nextUp;
        rd = v4291[v4292];
      }
      var v4300 = rd == null;
      if (v4300) {
        this.cacheSize++;
        var v4294 = new Array;
        var v4295 = new Array;
        var v4296 = new Array;
        var v4297 = this.cacheSize;
        rd = {actuals:v4294, exactCandidates:v4295, conversionCandidates:v4296, id:v4297};
        var v4298 = this.rdCache;
        var v4299 = this.cacheSize;
        JAM.set(v4298, v4299, rd);
      }
      this.nextUp++;
      return rd;
    }
    function ResolutionDataCache$$1() {
      this.cacheSize = 16;
      this.rdCache = [];
      this.nextUp = 0;
      var i$$92 = 0;
      var v13909 = this.cacheSize;
      var v4302 = i$$92 < v13909;
      for (;v4302;) {
        var v4301 = this.rdCache;
        var v13910 = new Array;
        var v13911 = new Array;
        var v13912 = new Array;
        v4301[i$$92] = {actuals:v13910, exactCandidates:v13911, conversionCandidates:v13912, id:i$$92};
        i$$92++;
        var v13913 = this.cacheSize;
        v4302 = i$$92 < v13913;
      }
      return;
    }
    var v4303 = ResolutionDataCache$$1.prototype;
    v4303.getResolutionData = v1009;
    var v4304 = ResolutionDataCache$$1.prototype;
    v4304.returnResolutionData = v1010;
    return ResolutionDataCache$$1;
  }
  function v1008() {
    function v1007(ast$$82) {
      var v4306 = this.current;
      if (v4306) {
        var v13914 = this.current;
        var v4305 = v13914.content;
        JAM.call(v4305.append, v4305, [ast$$82]);
      }
      return;
    }
    function v1006(target$$34, isContinue) {
      var targetBB = null;
      var i$$91 = 0;
      var v4307 = this.statementStack;
      var len$$41 = v4307.length;
      var v4310 = i$$91 < len$$41;
      for (;v4310;) {
        var v4308 = this.statementStack;
        var targetInfo$$5 = v4308[i$$91];
        var v13915 = targetInfo$$5.stmt;
        var v4309 = v13915 == target$$34;
        if (v4309) {
          if (isContinue) {
            targetBB = targetInfo$$5.continueBB;
          } else {
            targetBB = targetInfo$$5.breakBB;
          }
          break;
        }
        i$$91++;
        v4310 = i$$91 < len$$41;
      }
      if (targetBB) {
        var v4311 = this.current;
        JAM.call(v4311.addSuccessor, v4311, [targetBB]);
      }
      this.setUnreachable();
      return;
    }
    function v1005(ast$$81) {
      var v13916 = this.unreachable;
      var v4312 = v13916 === null;
      if (v4312) {
        var v26564 = new Array;
        this.unreachable = v26564;
      }
      var v4313 = this.unreachable;
      var v13917 = this.unreachable;
      var v4314 = v13917.length;
      JAM.set(v4313, v4314, ast$$81);
      return;
    }
    function v1004() {
      this.current = null;
      this.noContinuation = true;
      return;
    }
    function v1003() {
      var v4315 = this.current;
      var v4316 = this.exit;
      JAM.call(v4315.addSuccessor, v4315, [v4316]);
      this.setUnreachable();
      return;
    }
    function v1002() {
      var v4317 = this.statementStack;
      return v4317.pop();
    }
    function v1001(stmt$$5, continueBB, breakBB) {
      var v4318 = this.statementStack;
      var v4319 = {stmt:stmt$$5, continueBB:continueBB, breakBB:breakBB};
      JAM.call(v4318.push, v4318, [v4319]);
      return;
    }
    function v1000(outfile$$14) {
      function node$$3(bb$$6) {
        var v13918 = bb$$6.index;
        var v4320 = v13918 < 0;
        if (v4320) {
          bb$$6.index = index$$56;
          index$$56 = index$$56 + 1;
        }
        var v13919 = _this$$5.exit;
        var v4323 = bb$$6 == v13919;
        if (v4323) {
          var v13920 = bb$$6.index;
          var v4321 = "Exit block with index " + v13920;
          JAM.call(outfile$$14.WriteLine, outfile$$14, [v4321]);
        } else {
          var v13921 = bb$$6.index;
          var v4322 = "Basic block with index " + v13921;
          JAM.call(outfile$$14.WriteLine, outfile$$14, [v4322]);
          JAM.call(_this$$5.printBlockContent, _this$$5, [bb$$6, outfile$$14], JAM.policy.p1);
        }
        return;
      }
      function preEdges$$1() {
        JAM.call(outfile$$14.Write, outfile$$14, ["  Branches to "]);
        return;
      }
      function postEdges$$1() {
        JAM.call(outfile$$14.WriteLine, outfile$$14, [""]);
        return;
      }
      function edge(node1, node2) {
        var v13922 = node2.index;
        var v4324 = v13922 < 0;
        if (v4324) {
          node2.index = index$$56;
          index$$56 = index$$56 + 1;
        }
        var v13923 = node2.index;
        var v4325 = v13923 + " ";
        JAM.call(outfile$$14.Write, outfile$$14, [v4325]);
        return;
      }
      var _this$$5 = this;
      var index$$56 = 0;
      JAM.call(this.bfs, this, [node$$3, edge, preEdges$$1, postEdges$$1], JAM.policy.p1);
      var v13924 = this.unreachable;
      var v4329 = v13924 != null;
      if (v4329) {
        var i$$90 = 0;
        var v4326 = this.unreachable;
        var len$$40 = v4326.length;
        var v4328 = i$$90 < len$$40;
        for (;v4328;) {
          JAM.call(outfile$$14.WriteLine, outfile$$14, ["Unreachable basic block ..."]);
          var v13925 = this.unreachable;
          var v4327 = v13925[i$$90];
          JAM.call(this.printAST, this, [v4327, outfile$$14], JAM.policy.p1);
          i$$90++;
          v4328 = i$$90 < len$$40;
        }
      }
      return;
    }
    function v999(er$$1, funcSym) {
      function v998(index$$55) {
        var v4330 = useDefContext$$3.uses;
        var ast$$80 = v4330[index$$55];
        var v19623 = ast$$80.actualText;
        var v13926 = "use of variable '" + v19623;
        var v4331 = v13926 + "' that is not definitely assigned";
        JAM.call(er$$1.simpleError, er$$1, [ast$$80, v4331], JAM.policy.p1);
        return;
      }
      function useDefInit(bb$$5) {
        var v26565 = JAM.new(BBUseDefInfo, [bb$$5]);
        bb$$5.useDef = v26565;
        var v4332 = bb$$5.useDef;
        JAM.call(v4332.initialize, v4332, [useDefContext$$3]);
        var v4333 = _this$$4.linearBBs;
        var v13927 = _this$$4.linearBBs;
        var v4334 = v13927.length;
        JAM.set(v4333, v4334, bb$$5);
        return;
      }
      var _this$$4 = this;
      var useDefContext$$3 = new UseDefContext;
      useDefContext$$3.func = funcSym;
      JAM.call(this.bfs, this, [useDefInit, null, null, null], JAM.policy.p1);
      var i$$89;
      var bbLen;
      i$$89 = 0;
      var v13928 = this.linearBBs;
      bbLen = v13928.length;
      var v4337 = i$$89 < bbLen;
      for (;v4337;) {
        var v19624 = this.linearBBs;
        var v13929 = v19624[i$$89];
        var v4335 = v13929.useDef;
        JAM.call(v4335.initializeGen, v4335, [useDefContext$$3]);
        var v19625 = this.linearBBs;
        var v13930 = v19625[i$$89];
        var v4336 = v13930.useDef;
        JAM.call(v4336.initializeKill, v4336, [useDefContext$$3]);
        i$$89++;
        v4337 = i$$89 < bbLen;
      }
      var changed$$1 = true;
      for (;changed$$1;) {
        changed$$1 = false;
        i$$89 = 0;
        var v4339 = i$$89 < bbLen;
        for (;v4339;) {
          var v23326 = this.linearBBs;
          var v19626 = v23326[i$$89];
          var v13931 = v19626.useDef;
          var v4338 = v13931.updateTop();
          var v13932 = !v4338;
          if (v13932) {
            v4338 = changed$$1;
          }
          changed$$1 = v4338;
          i$$89++;
          v4339 = i$$89 < bbLen;
        }
      }
      var v13933 = this.entry;
      var v4340 = v13933.useDef;
      var top$$1 = v4340.top;
      JAM.call(top$$1.map, top$$1, [v998]);
      return;
    }
    function v997(nodeFunc, edgeFunc, preEdges, postEdges) {
      var markValue = this.markBase;
      var v13934 = this.markBase;
      this.markBase = v13934 + 1;
      var q = new Array;
      var v4341 = q.length;
      q[v4341] = this.entry;
      var v13935 = q.length;
      var v4349 = v13935 > 0;
      for (;v4349;) {
        var bb$$4 = q.pop();
        var v13936 = JAM.call(bb$$4.marked, bb$$4, [markValue]);
        var v4348 = !v13936;
        if (v4348) {
          bb$$4.mark();
          if (nodeFunc) {
            JAM.call(nodeFunc, null, [bb$$4]);
          }
          var v4342 = bb$$4.successors;
          var succLen$$1 = v4342.length;
          var v4347 = succLen$$1 > 0;
          if (v4347) {
            if (preEdges) {
              preEdges();
            }
            var j$$12 = succLen$$1 - 1;
            var v4346 = j$$12 >= 0;
            for (;v4346;) {
              var v4343 = bb$$4.successors;
              var successor$$1 = v4343[j$$12];
              var v19627 = this.markBase;
              var v13937 = JAM.call(successor$$1.marked, successor$$1, [v19627]);
              var v4345 = !v13937;
              if (v4345) {
                if (edgeFunc) {
                  JAM.call(edgeFunc, null, [bb$$4, successor$$1], JAM.policy.p1);
                }
                var v4344 = q.length;
                q[v4344] = successor$$1;
              }
              j$$12--;
              v4346 = j$$12 >= 0;
            }
            if (postEdges) {
              postEdges();
            }
          }
        }
        var v13938 = q.length;
        v4349 = v13938 > 0;
      }
      return;
    }
    function v996(bb$$3, outfile$$13) {
      var content$$4 = bb$$3.content;
      var i$$88 = 0;
      var v4350 = content$$4.members;
      var len$$39 = v4350.length;
      var v4352 = i$$88 < len$$39;
      for (;v4352;) {
        var v4351 = content$$4.members;
        var ast$$79 = v4351[i$$88];
        JAM.call(this.printAST, this, [ast$$79, outfile$$13], JAM.policy.p1);
        i$$88++;
        v4352 = i$$88 < len$$39;
      }
      return;
    }
    function v995(ast$$78, outfile$$12) {
      var v4353 = TypeScript$$25.PrintContext;
      var printContext = JAM.new(v4353, [outfile$$12, null]);
      printContext.increaseIndent();
      var v4354 = TypeScript$$25.getAstWalkerFactory();
      var v4355 = TypeScript$$25.prePrintAST;
      var v4356 = TypeScript$$25.postPrintAST;
      JAM.call(v4354.walk, v4354, [ast$$78, v4355, v4356, null, printContext], JAM.policy.p1);
      printContext.decreaseIndent();
      return;
    }
    function v994(er) {
      var v13939 = this.unreachable;
      if (v13939) {
        var v23327 = this.unreachable;
        var v19628 = v23327.length;
        v13939 = v19628 > 0;
      }
      var v4361 = v13939;
      if (v4361) {
        var v4357 = this.unreachable;
        var len$$38 = v4357.length;
        var i$$87 = 0;
        var v4360 = i$$87 < len$$38;
        for (;v4360;) {
          var v4358 = this.unreachable;
          var unreachableAST = v4358[i$$87];
          var v13940 = unreachableAST.nodeType;
          var v19629 = TypeScript$$25.NodeType;
          var v13941 = v19629.EndCode;
          var v4359 = v13940 != v13941;
          if (v4359) {
            JAM.call(er.simpleError, er, [unreachableAST, "unreachable code"], JAM.policy.p1);
          }
          i$$87++;
          v4360 = i$$87 < len$$38;
        }
      }
      return;
    }
    function v993() {
      var v4362 = this.currentSwitch;
      v4362.pop();
      return;
    }
    function v992(bb$$2) {
      var v4363 = this.currentSwitch;
      JAM.call(v4363.push, v4363, [bb$$2]);
      return;
    }
    function v991(ast$$77, parent$$64) {
      var v4364 = this.walker;
      return JAM.call(v4364.walk, v4364, [ast$$77, parent$$64], JAM.policy.p1);
    }
    function ControlFlowContext$$1(current$$3, exit$$1) {
      this.current = current$$3;
      this.exit = exit$$1;
      this.entry = null;
      this.unreachable = null;
      this.noContinuation = false;
      var v26566 = new Array;
      this.statementStack = v26566;
      var v26567 = new Array;
      this.currentSwitch = v26567;
      this.markBase = 0;
      var v26568 = new Array;
      this.linearBBs = v26568;
      this.entry = this.current;
      return;
    }
    var v4365 = ControlFlowContext$$1.prototype;
    v4365.walk = v991;
    var v4366 = ControlFlowContext$$1.prototype;
    v4366.pushSwitch = v992;
    var v4367 = ControlFlowContext$$1.prototype;
    v4367.popSwitch = v993;
    var v4368 = ControlFlowContext$$1.prototype;
    v4368.reportUnreachable = v994;
    var v4369 = ControlFlowContext$$1.prototype;
    v4369.printAST = v995;
    var v4370 = ControlFlowContext$$1.prototype;
    v4370.printBlockContent = v996;
    var v4371 = ControlFlowContext$$1.prototype;
    v4371.bfs = v997;
    var v4372 = ControlFlowContext$$1.prototype;
    v4372.useDef = v999;
    var v4373 = ControlFlowContext$$1.prototype;
    v4373.print = v1000;
    var v4374 = ControlFlowContext$$1.prototype;
    v4374.pushStatement = v1001;
    var v4375 = ControlFlowContext$$1.prototype;
    v4375.popStatement = v1002;
    var v4376 = ControlFlowContext$$1.prototype;
    v4376.returnStmt = v1003;
    var v4377 = ControlFlowContext$$1.prototype;
    v4377.setUnreachable = v1004;
    var v4378 = ControlFlowContext$$1.prototype;
    v4378.addUnreachable = v1005;
    var v4379 = ControlFlowContext$$1.prototype;
    v4379.unconditionalBranch = v1006;
    var v4380 = ControlFlowContext$$1.prototype;
    v4380.addContent = v1007;
    return ControlFlowContext$$1;
  }
  function v990() {
    function v989(successor) {
      var v4381 = this.successors;
      var v13942 = this.successors;
      var v4382 = v13942.length;
      JAM.set(v4381, v4382, successor);
      var v4383 = successor.predecessors;
      var v13943 = successor.predecessors;
      var v4384 = v13943.length;
      JAM.set(v4383, v4384, this);
      return;
    }
    function v988() {
      this.markValue++;
      return;
    }
    function v987(markBase) {
      var v4385 = this.markValue;
      return v4385 > markBase;
    }
    function BasicBlock$$1() {
      var v26569 = new Array;
      this.predecessors = v26569;
      this.index = -1;
      this.markValue = 0;
      var v26570 = new Array;
      this.successors = v26570;
      this.useDef = null;
      var v4386 = TypeScript$$25.ASTList;
      var v26571 = new v4386;
      this.content = v26571;
      return;
    }
    var v4387 = BasicBlock$$1.prototype;
    v4387.marked = v987;
    var v4388 = BasicBlock$$1.prototype;
    v4388.mark = v988;
    var v4389 = BasicBlock$$1.prototype;
    v4389.addSuccessor = v989;
    return BasicBlock$$1;
  }
  function v986() {
    function v985(b$$13) {
      var oldFirstBits = this.firstBits;
      var v13944 = this.firstBits;
      var v19630 = b$$13.firstBits;
      var v13945 = ~v19630;
      this.firstBits = v13944 & v13945;
      var v4395 = this.restOfBits;
      if (v4395) {
        var k$$12 = 0;
        var v4390 = this.restOfBits;
        var len$$37 = v4390.length;
        var v4394 = k$$12 < len$$37;
        for (;v4394;) {
          var v4391 = this.restOfBits;
          var myBits$$4 = v4391[k$$12];
          var v4392 = b$$13.restOfBits;
          var bBits$$3 = v4392[k$$12];
          var v4393 = this.restOfBits;
          var v19631 = v4393[k$$12];
          var v19632 = ~bBits$$3;
          v4393[k$$12] = v19631 & v19632;
          k$$12++;
          v4394 = k$$12 < len$$37;
        }
      }
      return;
    }
    function v984(b$$12) {
      var v13946 = this.firstBits;
      var v13947 = b$$12.firstBits;
      var v4396 = v13946 != v13947;
      if (v4396) {
        return true;
      }
      var v4402 = this.restOfBits;
      if (v4402) {
        var k$$11 = 0;
        var v4397 = this.restOfBits;
        var len$$36 = v4397.length;
        var v4401 = k$$11 < len$$36;
        for (;v4401;) {
          var v4398 = this.restOfBits;
          var myBits$$3 = v4398[k$$11];
          var v4399 = b$$12.restOfBits;
          var bBits$$2 = v4399[k$$11];
          var v4400 = myBits$$3 != bBits$$2;
          if (v4400) {
            return true;
          }
          k$$11++;
          v4401 = k$$11 < len$$36;
        }
      }
      return false;
    }
    function v983(b$$11) {
      var v13948 = this.firstBits;
      var v13949 = b$$11.firstBits;
      this.firstBits = v13948 & v13949;
      var v4408 = this.restOfBits;
      if (v4408) {
        var k$$10 = 0;
        var v4403 = this.restOfBits;
        var len$$35 = v4403.length;
        var v4407 = k$$10 < len$$35;
        for (;v4407;) {
          var v4404 = this.restOfBits;
          var myBits$$2 = v4404[k$$10];
          var v4405 = b$$11.restOfBits;
          var bBits$$1 = v4405[k$$10];
          var v4406 = this.restOfBits;
          v4406[k$$10] = myBits$$2 & bBits$$1;
          k$$10++;
          v4407 = k$$10 < len$$35;
        }
      }
      return;
    }
    function v982(b$$10) {
      var v13950 = this.firstBits;
      var v13951 = b$$10.firstBits;
      this.firstBits = v13950 | v13951;
      var v4414 = this.restOfBits;
      if (v4414) {
        var k$$9 = 0;
        var v4409 = this.restOfBits;
        var len$$34 = v4409.length;
        var v4413 = k$$9 < len$$34;
        for (;v4413;) {
          var v4410 = this.restOfBits;
          var myBits$$1 = v4410[k$$9];
          var v4411 = b$$10.restOfBits;
          var bBits = v4411[k$$9];
          var v4412 = this.restOfBits;
          v4412[k$$9] = myBits$$1 | bBits;
          k$$9++;
          v4413 = k$$9 < len$$34;
        }
      }
      return;
    }
    function v981(fn$$7) {
      var k$$8;
      k$$8 = 0;
      var v13952 = BitVector$$1.packBits;
      var v4417 = k$$8 < v13952;
      for (;v4417;) {
        var v13953 = this.bitCount;
        var v4415 = k$$8 == v13953;
        if (v4415) {
          return;
        }
        var v19633 = 1 << k$$8;
        var v19634 = this.firstBits;
        var v13954 = v19633 & v19634;
        var v4416 = v13954 != 0;
        if (v4416) {
          JAM.call(fn$$7, null, [k$$8]);
        }
        k$$8++;
        var v13955 = BitVector$$1.packBits;
        v4417 = k$$8 < v13955;
      }
      var v4423 = this.restOfBits;
      if (v4423) {
        var len$$33;
        var cumu = BitVector$$1.packBits;
        k$$8 = 0;
        var v13956 = this.restOfBits;
        len$$33 = v13956.length;
        var v4422 = k$$8 < len$$33;
        for (;v4422;) {
          var v4418 = this.restOfBits;
          var myBits = v4418[k$$8];
          var j$$11 = 0;
          var v13957 = BitVector$$1.packBits;
          var v4421 = j$$11 < v13957;
          for (;v4421;) {
            var v19635 = 1 << j$$11;
            var v13958 = v19635 & myBits;
            var v4419 = v13958 != 0;
            if (v4419) {
              JAM.call(fn$$7, null, [cumu]);
            }
            cumu++;
            var v13959 = this.bitCount;
            var v4420 = cumu == v13959;
            if (v4420) {
              return;
            }
            j$$11++;
            var v13960 = BitVector$$1.packBits;
            v4421 = j$$11 < v13960;
          }
          k$$8++;
          v4422 = k$$8 < len$$33;
        }
      }
      return;
    }
    function v980(bitIndex, value$$40) {
      var v13961 = BitVector$$1.packBits;
      var v4428 = bitIndex < v13961;
      if (v4428) {
        if (value$$40) {
          var v13962 = this.firstBits;
          var v13963 = 1 << bitIndex;
          this.firstBits = v13962 | v13963;
        } else {
          var v13964 = this.firstBits;
          var v19636 = 1 << bitIndex;
          var v13965 = ~v19636;
          this.firstBits = v13964 & v13965;
        }
      } else {
        var v19637 = BitVector$$1.packBits;
        var v13966 = bitIndex / v19637;
        var v4424 = Math.floor(v13966);
        var offset$$9 = v4424 - 1;
        var v4425 = BitVector$$1.packBits;
        var localIndex = bitIndex % v4425;
        if (value$$40) {
          var v4426 = this.restOfBits;
          var v19638 = v4426[offset$$9];
          var v19639 = 1 << localIndex;
          v4426[offset$$9] = v19638 | v19639;
        } else {
          var v4427 = this.restOfBits;
          var v19640 = v4427[offset$$9];
          var v23328 = 1 << localIndex;
          var v19641 = ~v23328;
          v4427[offset$$9] = v19640 & v19641;
        }
      }
      return;
    }
    function BitVector$$1(bitCount$$1) {
      this.bitCount = bitCount$$1;
      this.firstBits = 0;
      this.restOfBits = null;
      var v13967 = this.bitCount;
      var v13968 = BitVector$$1.packBits;
      var v4432 = v13967 > v13968;
      if (v4432) {
        var v26572 = new Array;
        this.restOfBits = v26572;
        var v13969 = this.bitCount;
        var v13970 = BitVector$$1.packBits;
        var v4429 = v13969 / v13970;
        var len$$32 = Math.floor(v4429);
        var i$$86 = 0;
        var v4431 = i$$86 < len$$32;
        for (;v4431;) {
          var v4430 = this.restOfBits;
          v4430[i$$86] = 0;
          i$$86++;
          v4431 = i$$86 < len$$32;
        }
      }
      return;
    }
    BitVector$$1.packBits = 30;
    var v4433 = BitVector$$1.prototype;
    v4433.set = v980;
    var v4434 = BitVector$$1.prototype;
    v4434.map = v981;
    var v4435 = BitVector$$1.prototype;
    v4435.union = v982;
    var v4436 = BitVector$$1.prototype;
    v4436.intersection = v983;
    var v4437 = BitVector$$1.prototype;
    v4437.notEq = v984;
    var v4438 = BitVector$$1.prototype;
    v4438.difference = v985;
    return BitVector$$1;
  }
  function v979() {
    function v978(sym$$33, bbUses) {
      var v4439 = this.symbolMap;
      var v4440 = sym$$33.name;
      var index$$54 = JAM.call(v4439.lookup, v4439, [v4440]);
      var v4441 = this.useIndexBySymbol;
      var usesOfSym = v4441[index$$54];
      var k$$7 = 0;
      var len$$31 = usesOfSym.length;
      var v4443 = k$$7 < len$$31;
      for (;v4443;) {
        var v4442 = usesOfSym[k$$7];
        JAM.call(bbUses.set, bbUses, [v4442, true], JAM.policy.p1);
        k$$7++;
        v4443 = k$$7 < len$$31;
      }
      return;
    }
    function v977(sym$$32) {
      var v13971 = sym$$32;
      if (v13971) {
        var v19642 = sym$$32.container;
        var v19643 = this.func;
        v13971 = v19642 == v19643;
      }
      var v4444 = v13971;
      if (v4444) {
        var v13972 = sym$$32.kind();
        var v19644 = TypeScript$$25.SymbolKind;
        var v13973 = v19644.Variable;
        v4444 = v13972 == v13973;
      }
      return v4444;
    }
    function v976(ast$$76) {
      var v4445 = this.uses;
      var v13974 = this.uses;
      var v4446 = v13974.length;
      JAM.set(v4445, v4446, ast$$76);
      var v13975 = this.uses;
      var v4447 = v13975.length;
      return v4447 - 1;
    }
    function v975(symIndex$$1, astIndex$$1) {
      var v4448 = this.useIndexBySymbol;
      var useBySym = v4448[symIndex$$1];
      var v4450 = useBySym == undefined;
      if (v4450) {
        useBySym = new Array;
        var v4449 = this.useIndexBySymbol;
        JAM.set(v4449, symIndex$$1, useBySym);
      }
      var v4451 = useBySym.length;
      JAM.set(useBySym, v4451, astIndex$$1);
      return;
    }
    function v974(sym$$31) {
      var name$$85 = sym$$31.name;
      var v4452 = this.symbolMap;
      var index$$53 = JAM.call(v4452.lookup, v4452, [name$$85]);
      var v4455 = index$$53 == null;
      if (v4455) {
        index$$53 = this.symbolCount;
        var v13976 = this.symbolCount;
        this.symbolCount = v13976 + 1;
        var v4453 = this.symbols;
        JAM.set(v4453, index$$53, sym$$31);
        var v4454 = this.symbolMap;
        JAM.call(v4454.add, v4454, [name$$85, index$$53], JAM.policy.p1);
      }
      return index$$53;
    }
    function UseDefContext$$1() {
      var v26573 = new Array;
      this.useIndexBySymbol = v26573;
      var v26574 = new Array;
      this.uses = v26574;
      var v26575 = new Array;
      this.symbols = v26575;
      var v4456 = TypeScript$$25.StringHashTable;
      var v26576 = new v4456;
      this.symbolMap = v26576;
      this.symbolCount = 0;
      return;
    }
    var v4457 = UseDefContext$$1.prototype;
    v4457.getSymbolIndex = v974;
    var v4458 = UseDefContext$$1.prototype;
    v4458.addUse = v975;
    var v4459 = UseDefContext$$1.prototype;
    v4459.getUseIndex = v976;
    var v4460 = UseDefContext$$1.prototype;
    v4460.isLocalSym = v977;
    var v4461 = UseDefContext$$1.prototype;
    v4461.killSymbol = v978;
    return UseDefContext$$1;
  }
  function v973() {
    function v972(useDefContext$$2) {
      var v13977 = this.gen;
      var v4462 = v13977.bitCount;
      var v26577 = JAM.new(BitVector, [v4462]);
      this.kill = v26577;
      var s$$25 = 0;
      var v4463 = this.defsBySymbol;
      var symbolLen$$1 = v4463.length;
      var v4469 = s$$25 < symbolLen$$1;
      for (;v4469;) {
        var v13978 = this.defsBySymbol;
        var v4468 = v13978[s$$25];
        if (v4468) {
          var v4464 = useDefContext$$2.useIndexBySymbol;
          var globalSymUses = v4464[s$$25];
          if (globalSymUses) {
            var u$$1 = 0;
            var useLen = globalSymUses.length;
            var v4467 = u$$1 < useLen;
            for (;v4467;) {
              var v4465 = this.kill;
              var v4466 = globalSymUses[u$$1];
              JAM.call(v4465.set, v4465, [v4466, true], JAM.policy.p1);
              u$$1++;
              v4467 = u$$1 < useLen;
            }
          }
        }
        s$$25++;
        v4469 = s$$25 < symbolLen$$1;
      }
      return;
    }
    function v971(useDefContext$$1) {
      var v4470 = this.useIndexBySymbol;
      var symbolLen = v4470.length;
      var v4471 = useDefContext$$1.uses;
      var bitCount = v4471.length;
      var v26578 = JAM.new(BitVector, [bitCount]);
      this.gen = v26578;
      var s$$24 = 0;
      var v4477 = s$$24 < symbolLen;
      for (;v4477;) {
        var v4472 = this.useIndexBySymbol;
        var symUses$$1 = v4472[s$$24];
        var v13979 = symUses$$1 != undefined;
        if (v13979) {
          var v19645 = symUses$$1.length;
          v13979 = v19645 > 0;
        }
        var v4476 = v13979;
        if (v4476) {
          var u = 0;
          var uLen = symUses$$1.length;
          var v4475 = u < uLen;
          for (;v4475;) {
            var v4473 = this.gen;
            var v4474 = symUses$$1[u];
            JAM.call(v4473.set, v4473, [v4474, true], JAM.policy.p1);
            u++;
            v4475 = u < uLen;
          }
        }
        s$$24++;
        v4477 = s$$24 < symbolLen;
      }
      this.top = this.gen;
      return;
    }
    function v970(useDefContext) {
      function defSym(sym$$29, context$$62) {
        var v4480 = JAM.call(context$$62.isLocalSym, context$$62, [sym$$29]);
        if (v4480) {
          var index$$52 = JAM.call(context$$62.getSymbolIndex, context$$62, [sym$$29]);
          var v4478 = _this$$3.useIndexBySymbol;
          var v26579 = new Array;
          JAM.set(v4478, index$$52, v26579);
          var v4479 = _this$$3.defsBySymbol;
          v4479[index$$52] = true;
        }
        return;
      }
      function initUseDefPre(cur$$9, parent$$63, walker$$48) {
        var context$$61 = walker$$48.state;
        var v4481 = cur$$9 == null;
        if (v4481) {
          cur$$9 = null;
        }
        var v13980 = cur$$9.nodeType;
        var v19646 = TypeScript$$25.NodeType;
        var v13981 = v19646.VarDecl;
        var v4498 = v13980 == v13981;
        if (v4498) {
          var varDecl$$13 = cur$$9;
          var v13982 = varDecl$$13.init;
          var v19649 = !v13982;
          if (v19649) {
            var v19647 = varDecl$$13.varFlags;
            var v23329 = TypeScript$$25.VarFlags;
            var v19648 = v23329.AutoInit;
            v13982 = JAM.call(TypeScript$$25.hasFlag, TypeScript$$25, [v19647, v19648], JAM.policy.p1);
          }
          var v4483 = v13982;
          if (v4483) {
            var v4482 = varDecl$$13.sym;
            defSym(v4482, context$$61);
          }
        } else {
          var v13983 = cur$$9.nodeType;
          var v19650 = TypeScript$$25.NodeType;
          var v13984 = v19650.Name;
          var v4497 = v13983 == v13984;
          if (v4497) {
            if (parent$$63) {
              var v13985 = parent$$63.nodeType;
              var v19651 = TypeScript$$25.NodeType;
              var v13986 = v19651.Asg;
              var v4487 = v13985 == v13986;
              if (v4487) {
                var asg = parent$$63;
                var v13987 = asg.operand1;
                var v4484 = v13987 == cur$$9;
                if (v4484) {
                  return cur$$9;
                }
              } else {
                var v13988 = parent$$63.nodeType;
                var v19652 = TypeScript$$25.NodeType;
                var v13989 = v19652.VarDecl;
                var v4486 = v13988 == v13989;
                if (v4486) {
                  var parentDecl = parent$$63;
                  var v13990 = parentDecl.id;
                  var v4485 = v13990 == cur$$9;
                  if (v4485) {
                    return cur$$9;
                  }
                }
              }
            }
            var id$$21 = cur$$9;
            var sym$$inline_16 = id$$21.sym;
            var context$$inline_17 = context$$61;
            var ast$$inline_18 = cur$$9;
            var v4491 = JAM.call(context$$inline_17.isLocalSym, context$$inline_17, [sym$$inline_16]);
            if (v4491) {
              var symIndex$$inline_19 = JAM.call(context$$inline_17.getSymbolIndex, context$$inline_17, [sym$$inline_16]);
              var v19653 = _this$$3.useIndexBySymbol;
              var v13991 = v19653[symIndex$$inline_19];
              var v4489 = v13991 == undefined;
              if (v4489) {
                var v4488 = _this$$3.useIndexBySymbol;
                var v26580 = new Array;
                JAM.set(v4488, symIndex$$inline_19, v26580);
              }
              var v4490 = _this$$3.useIndexBySymbol;
              var symUses$$inline_20 = v4490[symIndex$$inline_19];
              var astIndex$$inline_21 = JAM.call(context$$inline_17.getUseIndex, context$$inline_17, [ast$$inline_18]);
              JAM.call(context$$inline_17.addUse, context$$inline_17, [symIndex$$inline_19, astIndex$$inline_21], JAM.policy.p1);
              JAM.call(symUses$$inline_20.push, symUses$$inline_20, [astIndex$$inline_21]);
            }
          } else {
            var v19654 = cur$$9.nodeType;
            var v23330 = TypeScript$$25.NodeType;
            var v19655 = v23330.Asg;
            var v13992 = v19654 >= v19655;
            if (v13992) {
              var v19656 = cur$$9.nodeType;
              var v23331 = TypeScript$$25.NodeType;
              var v19657 = v23331.LastAsg;
              v13992 = v19656 <= v19657;
            }
            var v4496 = v13992;
            if (v4496) {
              asg = cur$$9;
              var v13993 = asg.operand1;
              if (v13993) {
                var v23332 = asg.operand1;
                var v19658 = v23332.nodeType;
                var v23333 = TypeScript$$25.NodeType;
                var v19659 = v23333.Name;
                v13993 = v19658 == v19659;
              }
              var v4493 = v13993;
              if (v4493) {
                id$$21 = asg.operand1;
                var v4492 = id$$21.sym;
                defSym(v4492, context$$61);
              }
            } else {
              var v13994 = cur$$9.nodeType;
              var v19660 = TypeScript$$25.NodeType;
              var v13995 = v19660.FuncDecl;
              var v4495 = v13994 == v13995;
              if (v4495) {
                var v4494 = walker$$48.options;
                v4494.goChildren = false;
              }
            }
          }
        }
        return cur$$9;
      }
      var _this$$3 = this;
      var v4499 = TypeScript$$25.AstWalkOptions;
      var options$$6 = new v4499;
      options$$6.reverseSiblings = true;
      var v4500 = TypeScript$$25.getAstWalkerFactory();
      var v13996 = this.bb;
      var v4501 = v13996.content;
      JAM.call(v4500.walk, v4500, [v4501, initUseDefPre, null, options$$6, useDefContext], JAM.policy.p1);
      return;
    }
    function v969() {
      var v13997 = this.top;
      var v4502 = v13997.bitCount;
      var temp$$16 = JAM.new(BitVector, [v4502]);
      var i$$85 = 0;
      var v13998 = this.bb;
      var v4503 = v13998.successors;
      var succLen = v4503.length;
      var v4507 = i$$85 < succLen;
      for (;v4507;) {
        var v13999 = this.bb;
        var v4504 = v13999.successors;
        var succ = v4504[i$$85];
        var v4506 = succ.useDef;
        if (v4506) {
          var v14000 = succ.useDef;
          var v4505 = v14000.top;
          JAM.call(temp$$16.union, temp$$16, [v4505]);
        }
        i$$85++;
        v4507 = i$$85 < succLen;
      }
      var v4508 = this.kill;
      JAM.call(temp$$16.difference, temp$$16, [v4508]);
      var v4509 = this.gen;
      JAM.call(temp$$16.union, temp$$16, [v4509]);
      var v4510 = this.top;
      var changed = JAM.call(temp$$16.notEq, temp$$16, [v4510]);
      this.top = temp$$16;
      return changed;
    }
    function BBUseDefInfo$$1(bb$$1) {
      this.bb = bb$$1;
      var v26581 = new Array;
      this.defsBySymbol = v26581;
      var v26582 = new Array;
      this.useIndexBySymbol = v26582;
      return;
    }
    var v4511 = BBUseDefInfo$$1.prototype;
    v4511.updateTop = v969;
    var v4512 = BBUseDefInfo$$1.prototype;
    v4512.initialize = v970;
    var v4513 = BBUseDefInfo$$1.prototype;
    v4513.initializeGen = v971;
    var v4514 = BBUseDefInfo$$1.prototype;
    v4514.initializeKill = v972;
    return BBUseDefInfo$$1;
  }
  function v968() {
    function ScopeChain$$1(container$$14, previous$$1, scope$$29) {
      this.container = container$$14;
      this.previous = previous$$1;
      this.scope = scope$$29;
      return;
    }
    return ScopeChain$$1;
  }
  var ScopeChain = v968();
  TypeScript$$25.ScopeChain = ScopeChain;
  var BBUseDefInfo = v973();
  TypeScript$$25.BBUseDefInfo = BBUseDefInfo;
  var UseDefContext = v979();
  TypeScript$$25.UseDefContext = UseDefContext;
  var BitVector = v986();
  TypeScript$$25.BitVector = BitVector;
  var BasicBlock = v990();
  TypeScript$$25.BasicBlock = BasicBlock;
  var ControlFlowContext = v1008();
  TypeScript$$25.ControlFlowContext = ControlFlowContext;
  var ResolutionDataCache = v1011();
  TypeScript$$25.ResolutionDataCache = ResolutionDataCache;
  var TypeFlow = v1112();
  TypeScript$$25.TypeFlow = TypeFlow;
  return;
}
function v967(TypeScript$$24) {
  function v966() {
    function Continuation$$1(normalBlock) {
      this.normalBlock = normalBlock;
      this.exceptionBlock = -1;
      return;
    }
    return Continuation$$1;
  }
  function getBaseTypeLinks(bases$$3, baseTypeLinks) {
    if (bases$$3) {
      var v4515 = bases$$3.members;
      var len$$30 = v4515.length;
      var v4516 = baseTypeLinks == null;
      if (v4516) {
        baseTypeLinks = new Array;
      }
      var i$$83 = 0;
      var v4520 = i$$83 < len$$30;
      for (;v4520;) {
        var v4517 = bases$$3.members;
        var baseExpr$$1 = v4517[i$$83];
        var name$$82 = baseExpr$$1;
        var v4518 = TypeScript$$24.TypeLink;
        var typeLink$$3 = new v4518;
        typeLink$$3.ast = name$$82;
        var v4519 = baseTypeLinks.length;
        JAM.set(baseTypeLinks, v4519, typeLink$$3);
        i$$83++;
        v4520 = i$$83 < len$$30;
      }
    }
    return baseTypeLinks;
  }
  function getBases(type$$44, typeDecl) {
    var v4521 = typeDecl.extendsList;
    var v4522 = type$$44.extendsTypeLinks;
    var v26583 = getBaseTypeLinks(v4521, v4522);
    type$$44.extendsTypeLinks = v26583;
    var v4523 = typeDecl.implementsList;
    var v4524 = type$$44.implementsTypeLinks;
    var v26584 = getBaseTypeLinks(v4523, v4524);
    type$$44.implementsTypeLinks = v26584;
    return;
  }
  function createNewConstructGroupForType(type$$45) {
    var v4525 = TypeScript$$24.Signature;
    var signature$$6 = new v4525;
    var v4526 = TypeScript$$24.TypeLink;
    var v26585 = new v4526;
    signature$$6.returnType = v26585;
    var v4527 = signature$$6.returnType;
    v4527.type = type$$45.instanceType;
    signature$$6.parameters = [];
    var v4528 = TypeScript$$24.SignatureGroup;
    var v26586 = new v4528;
    type$$45.construct = v26586;
    var v4529 = type$$45.construct;
    JAM.call(v4529.addSignature, v4529, [signature$$6]);
    return;
  }
  function cloneParentConstructGroupForChildType(child$$1, parent$$53) {
    var v4530 = TypeScript$$24.SignatureGroup;
    var v26587 = new v4530;
    child$$1.construct = v26587;
    var sig$$1 = null;
    var v14001 = parent$$53.construct;
    var v4531 = !v14001;
    if (v4531) {
      createNewConstructGroupForType(parent$$53);
    }
    var i$$84 = 0;
    var v23334 = parent$$53.construct;
    var v19661 = v23334.signatures;
    var v14002 = v19661.length;
    var v4540 = i$$84 < v14002;
    for (;v4540;) {
      var v4532 = TypeScript$$24.Signature;
      sig$$1 = new v4532;
      var v19662 = parent$$53.construct;
      var v14003 = v19662.signatures;
      var v4533 = v14003[i$$84];
      sig$$1.parameters = v4533.parameters;
      var v19663 = parent$$53.construct;
      var v14004 = v19663.signatures;
      var v4534 = v14004[i$$84];
      sig$$1.nonOptionalParameterCount = v4534.nonOptionalParameterCount;
      var v19664 = parent$$53.construct;
      var v14005 = v19664.signatures;
      var v4535 = v14005[i$$84];
      sig$$1.typeCheckStatus = v4535.typeCheckStatus;
      var v19665 = parent$$53.construct;
      var v14006 = v19665.signatures;
      var v4536 = v14006[i$$84];
      sig$$1.declAST = v4536.declAST;
      var v4537 = TypeScript$$24.TypeLink;
      var v26588 = new v4537;
      sig$$1.returnType = v26588;
      var v4538 = sig$$1.returnType;
      v4538.type = child$$1.instanceType;
      var v4539 = child$$1.construct;
      JAM.call(v4539.addSignature, v4539, [sig$$1]);
      i$$84++;
      var v23335 = parent$$53.construct;
      var v19666 = v23335.signatures;
      var v14007 = v19666.length;
      v4540 = i$$84 < v14007;
    }
    return;
  }
  function findTypeSymbolInScopeChain(name$$83, scopeChain$$2) {
    var v4541 = scopeChain$$2.scope;
    var symbol$$14 = JAM.call(v4541.find, v4541, [name$$83, false, true], JAM.policy.p1);
    var v14008 = symbol$$14 == null;
    if (v14008) {
      v14008 = scopeChain$$2.previous;
    }
    var v4543 = v14008;
    if (v4543) {
      var v4542 = scopeChain$$2.previous;
      symbol$$14 = findTypeSymbolInScopeChain(name$$83, v4542);
    }
    return symbol$$14;
  }
  function findSymbolFromAlias(alias$$2, context$$51) {
    function v965(id$$20) {
      var v4546 = context$$51.members;
      if (v4546) {
        var v4544 = context$$51.members;
        return JAM.call(v4544.lookup, v4544, [name$$84]);
      } else {
        var v4545 = context$$51.topLevelScope;
        return findTypeSymbolInScopeChain(name$$84, v4545);
      }
      return;
    }
    var symbol$$15 = null;
    var v4552 = alias$$2.nodeType;
    switch(v4552) {
      case TypeScript$$24.NodeType.Name:
        var name$$84 = alias$$2.text;
        var isDynamic = JAM.call(TypeScript$$24.isQuoted, TypeScript$$24, [name$$84]);
        var findSym = v965;
        if (isDynamic) {
          var v14009 = context$$51.tcContext;
          var v4547 = v14009.checker;
          var v23336 = context$$51.tcContext;
          var v19667 = v23336.script;
          var v14010 = v19667.locationInfo;
          var v4548 = v14010.filename;
          symbol$$15 = JAM.call(v4547.findSymbolForDynamicModule, v4547, [name$$84, v4548, findSym], JAM.policy.p1);
        } else {
          symbol$$15 = JAM.call(findSym, null, [name$$84]);
        }
        break;
      case TypeScript$$24.NodeType.Dot:
        var dottedExpr = alias$$2;
        var v4549 = dottedExpr.operand1;
        var op1Sym = findSymbolFromAlias(v4549, context$$51);
        var v14011 = op1Sym;
        if (v14011) {
          v14011 = op1Sym.getType();
        }
        var v4551 = v14011;
        if (v4551) {
          var v4550 = dottedExpr.operand2;
          symbol$$15 = findSymbolFromAlias(v4550, context$$51);
        }
      ;
      default:
      ;
    }
    if (symbol$$15) {
      var symType$$1 = symbol$$15.getType();
      if (symType$$1) {
        var members$$25 = symType$$1.members;
        if (members$$25) {
          context$$51.members = members$$25.publicMembers;
        }
      }
    }
    return symbol$$15;
  }
  function preCollectImportTypes(ast$$66, parent$$54, context$$52) {
    var scopeChain$$3 = context$$52.scopeChain;
    var typeSymbol$$2 = null;
    var modType = null;
    var importDecl$$1 = ast$$66;
    var v4553 = importDecl$$1.alias;
    var v4554 = {topLevelScope:scopeChain$$3, members:null, tcContext:context$$52};
    var aliasedModSymbol = findSymbolFromAlias(v4553, v4554);
    var v14012 = context$$52.scopeChain;
    var v4555 = v14012.container;
    var v14013 = context$$52.checker;
    var v4556 = v14013.gloMod;
    var isGlobal$$1 = v4555 == v4556;
    if (aliasedModSymbol) {
      var aliasedModType = aliasedModSymbol.getType();
      if (aliasedModType) {
        modType = aliasedModType;
      }
    }
    var v4557 = TypeScript$$24.TypeSymbol;
    var v14014 = importDecl$$1.id;
    var v4558 = v14014.text;
    var v14015 = importDecl$$1.id;
    var v4559 = v14015.minChar;
    var v14016 = importDecl$$1.limChar;
    var v14017 = importDecl$$1.minChar;
    var v4560 = v14016 - v14017;
    var v19668 = context$$52.checker;
    var v14018 = v19668.locationInfo;
    var v4561 = v14018.unitIndex;
    typeSymbol$$2 = JAM.new(v4557, [v4558, v4559, v4560, v4561, modType]);
    typeSymbol$$2.aliasLink = importDecl$$1;
    var v14019 = context$$52.scopeChain;
    var v4563 = v14019.moduleDecl;
    if (v4563) {
      var v14020 = typeSymbol$$2.flags;
      var v19669 = TypeScript$$24.SymbolFlags;
      var v14021 = v19669.ModuleMember;
      typeSymbol$$2.flags = v14020 | v14021;
      var v4562 = context$$52.scopeChain;
      typeSymbol$$2.declModule = v4562.moduleDecl;
    }
    typeSymbol$$2.declAST = importDecl$$1;
    var v4564 = importDecl$$1.id;
    v4564.sym = typeSymbol$$2;
    var v4565 = scopeChain$$3.scope;
    var v4566 = scopeChain$$3.container;
    var v14022 = context$$52.checker;
    var v4567 = v14022.errorReporter;
    JAM.call(v4565.enter, v4565, [v4566, ast$$66, typeSymbol$$2, v4567, isGlobal$$1, true, false], JAM.policy.p1);
    var v4568 = scopeChain$$3.scope;
    var v4569 = scopeChain$$3.container;
    var v14023 = context$$52.checker;
    var v4570 = v14023.errorReporter;
    JAM.call(v4568.enter, v4568, [v4569, ast$$66, typeSymbol$$2, v4570, isGlobal$$1, false, false], JAM.policy.p1);
    return true;
  }
  function preCollectModuleTypes(ast$$67, parent$$55, context$$53) {
    var scopeChain$$4 = context$$53.scopeChain;
    var moduleDecl$$6 = ast$$67;
    var v4571 = moduleDecl$$6.modFlags;
    var v14024 = TypeScript$$24.ModuleFlags;
    var v4572 = v14024.Ambient;
    var isAmbient$$5 = JAM.call(TypeScript$$24.hasFlag, TypeScript$$24, [v4571, v4572], JAM.policy.p1);
    var v4573 = moduleDecl$$6.modFlags;
    var v14025 = TypeScript$$24.ModuleFlags;
    var v4574 = v14025.IsEnum;
    var isEnum = JAM.call(TypeScript$$24.hasFlag, TypeScript$$24, [v4573, v4574], JAM.policy.p1);
    var v14026 = context$$53.scopeChain;
    var v4575 = v14026.container;
    var v14027 = context$$53.checker;
    var v4576 = v14027.gloMod;
    var isGlobal$$2 = v4575 == v4576;
    var v4577 = moduleDecl$$6.modFlags;
    var v14028 = TypeScript$$24.ModuleFlags;
    var v4578 = v14028.Exported;
    var isExported$$2 = JAM.call(TypeScript$$24.hasFlag, TypeScript$$24, [v4577, v4578], JAM.policy.p1);
    var v4579 = moduleDecl$$6.name;
    var modName$$3 = v4579.text;
    var isDynamic$$1 = JAM.call(TypeScript$$24.isQuoted, TypeScript$$24, [modName$$3]);
    var v4580 = scopeChain$$4.scope;
    var symbol$$16 = JAM.call(v4580.findLocal, v4580, [modName$$3, false, false], JAM.policy.p1);
    var typeSymbol$$3 = null;
    var modType$$1 = null;
    var v14029 = symbol$$16 == null;
    var v19672 = !v14029;
    if (v19672) {
      var v19670 = symbol$$16.kind();
      var v23337 = TypeScript$$24.SymbolKind;
      var v19671 = v23337.Type;
      v14029 = v19670 != v19671;
    }
    var v4629 = v14029;
    if (v4629) {
      var v4590 = modType$$1 == null;
      if (v4590) {
        var v4581 = TypeScript$$24.ScopedMembers;
        var v14030 = TypeScript$$24.DualStringHashTable;
        var v19673 = TypeScript$$24.StringHashTable;
        var v14031 = new v19673;
        var v19674 = TypeScript$$24.StringHashTable;
        var v14032 = new v19674;
        var v4582 = JAM.new(v14030, [v14031, v14032]);
        var enclosedTypes$$3 = JAM.new(v4581, [v4582]);
        var v4583 = TypeScript$$24.ScopedMembers;
        var v14033 = TypeScript$$24.DualStringHashTable;
        var v19675 = TypeScript$$24.StringHashTable;
        var v14034 = new v19675;
        var v19676 = TypeScript$$24.StringHashTable;
        var v14035 = new v19676;
        var v4584 = JAM.new(v14033, [v14034, v14035]);
        var ambientEnclosedTypes$$3 = JAM.new(v4583, [v4584]);
        var v4585 = TypeScript$$24.ModuleType;
        modType$$1 = JAM.new(v4585, [enclosedTypes$$3, ambientEnclosedTypes$$3]);
        if (isEnum) {
          var v14036 = modType$$1.typeFlags;
          var v19677 = TypeScript$$24.TypeFlags;
          var v14037 = v19677.IsEnum;
          modType$$1.typeFlags = v14036 | v14037;
        }
        var v4586 = TypeScript$$24.ScopedMembers;
        var v14038 = TypeScript$$24.DualStringHashTable;
        var v19678 = TypeScript$$24.StringHashTable;
        var v14039 = new v19678;
        var v19679 = TypeScript$$24.StringHashTable;
        var v14040 = new v19679;
        var v4587 = JAM.new(v14038, [v14039, v14040]);
        var v26589 = JAM.new(v4586, [v4587]);
        modType$$1.members = v26589;
        var v4588 = TypeScript$$24.ScopedMembers;
        var v14041 = TypeScript$$24.DualStringHashTable;
        var v19680 = TypeScript$$24.StringHashTable;
        var v14042 = new v19680;
        var v19681 = TypeScript$$24.StringHashTable;
        var v14043 = new v19681;
        var v4589 = JAM.new(v14041, [v14042, v14043]);
        var v26590 = JAM.new(v4588, [v4589]);
        modType$$1.ambientMembers = v26590;
        modType$$1.setHasImplementation();
      }
      var v4591 = TypeScript$$24.TypeSymbol;
      var v14044 = moduleDecl$$6.name;
      var v4592 = v14044.minChar;
      var v4593 = modName$$3.length;
      var v19682 = context$$53.checker;
      var v14045 = v19682.locationInfo;
      var v4594 = v14045.unitIndex;
      typeSymbol$$3 = JAM.new(v4591, [modName$$3, v4592, v4593, v4594, modType$$1]);
      var v4595 = moduleDecl$$6.prettyName;
      var v26591 = JAM.call(TypeScript$$24.isQuoted, TypeScript$$24, [v4595]);
      typeSymbol$$3.isDynamic = v26591;
      var v14046 = context$$53.scopeChain;
      var v4597 = v14046.moduleDecl;
      if (v4597) {
        var v4596 = context$$53.scopeChain;
        typeSymbol$$3.declModule = v4596.moduleDecl;
      }
      typeSymbol$$3.declAST = moduleDecl$$6;
      typeSymbol$$3.prettyName = moduleDecl$$6.prettyName;
      var v4598 = scopeChain$$4.scope;
      var v4599 = scopeChain$$4.container;
      var v14047 = context$$53.checker;
      var v4600 = v14047.errorReporter;
      var v4601 = isExported$$2 || isGlobal$$2;
      JAM.call(v4598.enter, v4598, [v4599, ast$$67, typeSymbol$$3, v4600, v4601, true, isAmbient$$5], JAM.policy.p1);
      var v4602 = scopeChain$$4.scope;
      var v4603 = scopeChain$$4.container;
      var v14048 = context$$53.checker;
      var v4604 = v14048.errorReporter;
      var v4605 = isExported$$2 || isGlobal$$2;
      JAM.call(v4602.enter, v4602, [v4603, ast$$67, typeSymbol$$3, v4604, v4605, false, isAmbient$$5], JAM.policy.p1);
      modType$$1.symbol = typeSymbol$$3;
    } else {
      var v19683 = symbol$$16;
      if (v19683) {
        v19683 = symbol$$16.declAST;
      }
      var v14049 = v19683;
      if (v14049) {
        var v23338 = symbol$$16.declAST;
        var v19684 = v23338.nodeType;
        var v23339 = TypeScript$$24.NodeType;
        var v19685 = v23339.ModuleDeclaration;
        v14049 = v19684 != v19685;
      }
      var v4608 = v14049;
      if (v4608) {
        var v14050 = context$$53.checker;
        var v4606 = v14050.errorReporter;
        var v14051 = "Conflicting symbol name for module '" + modName$$3;
        var v4607 = v14051 + "'";
        JAM.call(v4606.simpleError, v4606, [moduleDecl$$6, v4607], JAM.policy.p1);
      }
      typeSymbol$$3 = symbol$$16;
      var v14052 = typeSymbol$$3.type;
      var v4609 = v14052.getAllEnclosedTypes();
      var publicEnclosedTypes = v4609.publicMembers;
      var v4610;
      var v14054 = publicEnclosedTypes == null;
      if (v14054) {
        var v14053 = TypeScript$$24.StringHashTable;
        v4610 = new v14053;
      } else {
        v4610 = publicEnclosedTypes;
      }
      var publicEnclosedTypesTable = v4610;
      var v4611 = TypeScript$$24.ScopedMembers;
      var v14055 = TypeScript$$24.DualStringHashTable;
      var v19686 = TypeScript$$24.StringHashTable;
      var v14056 = new v19686;
      var v4612 = JAM.new(v14055, [publicEnclosedTypesTable, v14056]);
      enclosedTypes$$3 = JAM.new(v4611, [v4612]);
      var v14057 = typeSymbol$$3.type;
      var v4613 = v14057.getAllAmbientEnclosedTypes();
      var publicEnclosedAmbientTypes = v4613.publicMembers;
      var v4614;
      var v14059 = publicEnclosedAmbientTypes == null;
      if (v14059) {
        var v14058 = TypeScript$$24.StringHashTable;
        v4614 = new v14058;
      } else {
        v4614 = publicEnclosedAmbientTypes;
      }
      var publicAmbientEnclosedTypesTable = v4614;
      var v4615 = TypeScript$$24.ScopedMembers;
      var v14060 = TypeScript$$24.DualStringHashTable;
      var v19687 = TypeScript$$24.StringHashTable;
      var v14061 = new v19687;
      var v4616 = JAM.new(v14060, [publicAmbientEnclosedTypesTable, v14061]);
      ambientEnclosedTypes$$3 = JAM.new(v4615, [v4616]);
      var v14062 = typeSymbol$$3.type;
      var v4617 = v14062.members;
      var publicMembers = v4617.publicMembers;
      var v4618;
      var v14064 = publicMembers == null;
      if (v14064) {
        var v14063 = TypeScript$$24.StringHashTable;
        v4618 = new v14063;
      } else {
        v4618 = publicMembers;
      }
      var publicMembersTable = v4618;
      var v4619 = TypeScript$$24.ScopedMembers;
      var v14065 = TypeScript$$24.DualStringHashTable;
      var v19688 = TypeScript$$24.StringHashTable;
      var v14066 = new v19688;
      var v4620 = JAM.new(v14065, [publicMembersTable, v14066]);
      var members$$26 = JAM.new(v4619, [v4620]);
      var v14067 = typeSymbol$$3.type;
      var v4621 = v14067.ambientMembers;
      var publicAmbientMembers = v4621.publicMembers;
      var v4622;
      var v14069 = publicAmbientMembers == null;
      if (v14069) {
        var v14068 = TypeScript$$24.StringHashTable;
        v4622 = new v14068;
      } else {
        v4622 = publicAmbientMembers;
      }
      var publicAmbientMembersTable = v4622;
      var v4623 = TypeScript$$24.ScopedMembers;
      var v14070 = TypeScript$$24.DualStringHashTable;
      var v19689 = TypeScript$$24.StringHashTable;
      var v14071 = new v19689;
      var v4624 = JAM.new(v14070, [publicAmbientMembersTable, v14071]);
      var ambientMembers$$2 = JAM.new(v4623, [v4624]);
      var v4625 = TypeScript$$24.ModuleType;
      modType$$1 = JAM.new(v4625, [enclosedTypes$$3, ambientEnclosedTypes$$3]);
      if (isEnum) {
        var v14072 = modType$$1.typeFlags;
        var v19690 = TypeScript$$24.TypeFlags;
        var v14073 = v19690.IsEnum;
        modType$$1.typeFlags = v14072 | v14073;
      }
      modType$$1.members = members$$26;
      modType$$1.ambientMembers = ambientMembers$$2;
      modType$$1.setHasImplementation();
      modType$$1.symbol = typeSymbol$$3;
      var v4626 = moduleDecl$$6.minChar;
      JAM.call(typeSymbol$$3.addLocation, typeSymbol$$3, [v4626]);
      var v4627 = typeSymbol$$3.expansions;
      JAM.call(v4627.push, v4627, [modType$$1]);
      var v4628 = typeSymbol$$3.expansionsDeclAST;
      JAM.call(v4628.push, v4628, [moduleDecl$$6]);
    }
    var v14074 = context$$53.scopeChain;
    var v4631 = v14074.moduleDecl;
    if (v4631) {
      var v14075 = context$$53.scopeChain;
      var v4630 = v14075.moduleDecl;
      v4630.recordNonInterface();
    }
    if (isExported$$2) {
      var v14076 = typeSymbol$$3.flags;
      var v19691 = TypeScript$$24.SymbolFlags;
      var v14077 = v19691.Exported;
      typeSymbol$$3.flags = v14076 | v14077;
    }
    var v19692 = context$$53.scopeChain;
    var v14078 = v19692.moduleDecl;
    var v19695 = !v14078;
    if (v19695) {
      var v23340 = context$$53.scopeChain;
      var v19693 = v23340.container;
      var v23341 = context$$53.checker;
      var v19694 = v23341.gloMod;
      v14078 = v19693 == v19694;
    }
    var v4632 = v14078;
    if (v4632) {
      var v14079 = typeSymbol$$3.flags;
      var v19696 = TypeScript$$24.SymbolFlags;
      var v14080 = v19696.ModuleMember;
      typeSymbol$$3.flags = v14079 | v14080;
    }
    moduleDecl$$6.mod = modType$$1;
    var v4633 = modType$$1.members;
    var v4634 = modType$$1.ambientMembers;
    var v4635 = modType$$1.enclosedTypes;
    var v4636 = modType$$1.ambientEnclosedTypes;
    JAM.call(TypeScript$$24.pushTypeCollectionScope, TypeScript$$24, [typeSymbol$$3, v4633, v4634, v4635, v4636, context$$53, null, null, moduleDecl$$6], JAM.policy.p1);
    return true;
  }
  function preCollectClassTypes(ast$$68, parent$$56, context$$54) {
    var scopeChain$$5 = context$$54.scopeChain;
    var classDecl$$7 = ast$$68;
    var classType$$5;
    var instanceType$$4;
    var typeSymbol$$4 = null;
    var v4637 = classDecl$$7.name;
    var className$$4 = v4637.text;
    var alreadyInScope = false;
    var v4638 = classDecl$$7.varFlags;
    var v14081 = TypeScript$$24.VarFlags;
    var v4639 = v14081.Ambient;
    var isAmbient$$6 = JAM.call(TypeScript$$24.hasFlag, TypeScript$$24, [v4638, v4639], JAM.policy.p1);
    var v4640 = classDecl$$7.varFlags;
    var v14082 = TypeScript$$24.VarFlags;
    var v4641 = v14082.Exported;
    var isExported$$3 = JAM.call(TypeScript$$24.hasFlag, TypeScript$$24, [v4640, v4641], JAM.policy.p1);
    var v14083 = context$$54.scopeChain;
    var v4642 = v14083.container;
    var v14084 = context$$54.checker;
    var v4643 = v14084.gloMod;
    var isGlobal$$3 = v4642 == v4643;
    var containerMod = scopeChain$$5.container;
    var foundValSymbol = false;
    var v4644 = scopeChain$$5.scope;
    typeSymbol$$4 = JAM.call(v4644.findLocal, v4644, [className$$4, false, true], JAM.policy.p1);
    var v4651 = !typeSymbol$$4;
    if (v4651) {
      var v4645 = scopeChain$$5.scope;
      var valTypeSymbol = JAM.call(v4645.findLocal, v4645, [className$$4, false, false], JAM.policy.p1);
      var v25070 = valTypeSymbol;
      if (v25070) {
        v25070 = valTypeSymbol.isType();
      }
      var v23342 = v25070;
      if (v23342) {
        v23342 = valTypeSymbol.declAST;
      }
      var v19697 = v23342;
      if (v19697) {
        var v25071 = valTypeSymbol.declAST;
        var v23343 = v25071.nodeType;
        var v25072 = TypeScript$$24.NodeType;
        var v23344 = v25072.FuncDecl;
        v19697 = v23343 == v23344;
      }
      var v14085 = v19697;
      if (v14085) {
        var v19698 = valTypeSymbol.declAST;
        v14085 = v19698.isSignature();
      }
      var v4650 = v14085;
      if (v4650) {
        typeSymbol$$4 = valTypeSymbol;
        foundValSymbol = true;
        if (isExported$$3) {
          var v14086 = typeSymbol$$4.flags;
          var v19699 = TypeScript$$24.SymbolFlags;
          var v14087 = v19699.Exported;
          typeSymbol$$4.flags = v14086 | v14087;
        }
        if (isAmbient$$6) {
          var v14088 = typeSymbol$$4.flags;
          var v19700 = TypeScript$$24.SymbolFlags;
          var v14089 = v19700.Ambient;
          typeSymbol$$4.flags = v14088 | v14089;
        }
        var v14090 = context$$54.scopeChain;
        var v4646 = v14090.scope;
        var v14091 = context$$54.scopeChain;
        var v4647 = v14091.container;
        var v14092 = context$$54.checker;
        var v4648 = v14092.errorReporter;
        var v4649 = isExported$$3 || isGlobal$$3;
        JAM.call(v4646.enter, v4646, [v4647, ast$$68, typeSymbol$$4, v4648, v4649, true, isAmbient$$6], JAM.policy.p1);
      }
    }
    var v19701 = typeSymbol$$4;
    if (v19701) {
      v19701 = !foundValSymbol;
    }
    var v14093 = v19701;
    if (v14093) {
      var v19702 = typeSymbol$$4.declAST;
      v14093 = v19702 != classDecl$$7;
    }
    var v4652 = v14093;
    if (v4652) {
      typeSymbol$$4 = null;
    }
    var v4697 = typeSymbol$$4 == null;
    if (v4697) {
      var v4653 = scopeChain$$5.scope;
      var valueSymbol = JAM.call(v4653.findLocal, v4653, [className$$4, false, false], JAM.policy.p1);
      var v4654 = TypeScript$$24.Type;
      classType$$5 = new v4654;
      classType$$5.setHasImplementation();
      var v4655 = TypeScript$$24.Type;
      instanceType$$4 = new v4655;
      instanceType$$4.setHasImplementation();
      classType$$5.instanceType = instanceType$$4;
      var v4656 = TypeScript$$24.ScopedMembers;
      var v14094 = TypeScript$$24.DualStringHashTable;
      var v19703 = TypeScript$$24.StringHashTable;
      var v14095 = new v19703;
      var v19704 = TypeScript$$24.StringHashTable;
      var v14096 = new v19704;
      var v4657 = JAM.new(v14094, [v14095, v14096]);
      var v26592 = JAM.new(v4656, [v4657]);
      classType$$5.members = v26592;
      var v4658 = TypeScript$$24.ScopedMembers;
      var v14097 = TypeScript$$24.DualStringHashTable;
      var v19705 = TypeScript$$24.StringHashTable;
      var v14098 = new v19705;
      var v19706 = TypeScript$$24.StringHashTable;
      var v14099 = new v19706;
      var v4659 = JAM.new(v14097, [v14098, v14099]);
      var v26593 = JAM.new(v4658, [v4659]);
      classType$$5.ambientMembers = v26593;
      var classType$$inline_10 = classType$$5;
      var ast$$inline_11 = classDecl$$7;
      var context$$inline_12 = context$$54;
      var v4660 = TypeScript$$24.ValueLocation;
      var field$$inline_13 = new v4660;
      var v4661 = TypeScript$$24.TypeLink;
      var v26594 = new v4661;
      field$$inline_13.typeLink = v26594;
      var v4662 = field$$inline_13.typeLink;
      v4662.ast = ast$$inline_11;
      var v4663 = field$$inline_13.typeLink;
      v4663.type = classType$$inline_10.instanceType;
      var v4664 = TypeScript$$24.FieldSymbol;
      var v4665 = ast$$inline_11.minChar;
      var v19707 = context$$inline_12.checker;
      var v14100 = v19707.locationInfo;
      var v4666 = v14100.unitIndex;
      var fieldSymbol$$inline_14 = JAM.new(v4664, ["prototype", v4665, v4666, true, field$$inline_13]);
      var v14101 = fieldSymbol$$inline_14.flags;
      var v23345 = TypeScript$$24.SymbolFlags;
      var v19708 = v23345.Property;
      var v23346 = TypeScript$$24.SymbolFlags;
      var v19709 = v23346.BuiltIn;
      var v14102 = v19708 | v19709;
      fieldSymbol$$inline_14.flags = v14101 | v14102;
      field$$inline_13.symbol = fieldSymbol$$inline_14;
      fieldSymbol$$inline_14.declAST = ast$$inline_11;
      var v4667 = classType$$inline_10.members;
      JAM.call(v4667.addPublicMember, v4667, ["prototype", fieldSymbol$$inline_14], JAM.policy.p1);
      var v4668 = TypeScript$$24.ScopedMembers;
      var v14103 = TypeScript$$24.DualStringHashTable;
      var v19710 = TypeScript$$24.StringHashTable;
      var v14104 = new v19710;
      var v19711 = TypeScript$$24.StringHashTable;
      var v14105 = new v19711;
      var v4669 = JAM.new(v14103, [v14104, v14105]);
      var v26595 = JAM.new(v4668, [v4669]);
      instanceType$$4.members = v26595;
      var v4670 = TypeScript$$24.ScopedMembers;
      var v14106 = TypeScript$$24.DualStringHashTable;
      var v19712 = TypeScript$$24.StringHashTable;
      var v14107 = new v19712;
      var v19713 = TypeScript$$24.StringHashTable;
      var v14108 = new v19713;
      var v4671 = JAM.new(v14106, [v14107, v14108]);
      var v26596 = JAM.new(v4670, [v4671]);
      instanceType$$4.ambientMembers = v26596;
      var v4672 = TypeScript$$24.TypeSymbol;
      var v14109 = classDecl$$7.name;
      var v4673 = v14109.minChar;
      var v4674 = className$$4.length;
      var v19714 = context$$54.checker;
      var v14110 = v19714.locationInfo;
      var v4675 = v14110.unitIndex;
      typeSymbol$$4 = JAM.new(v4672, [className$$4, v4673, v4674, v4675, classType$$5]);
      typeSymbol$$4.declAST = classDecl$$7;
      typeSymbol$$4.instanceType = instanceType$$4;
      classType$$5.symbol = typeSymbol$$4;
      instanceType$$4.symbol = typeSymbol$$4;
      var v14111 = context$$54.scopeChain;
      var v4678 = v14111.moduleDecl;
      if (v4678) {
        var v14112 = context$$54.scopeChain;
        var v4676 = v14112.moduleDecl;
        v4676.recordNonInterface();
        var v4677 = context$$54.scopeChain;
        typeSymbol$$4.declModule = v4677.moduleDecl;
        var v14113 = typeSymbol$$4.flags;
        var v19715 = TypeScript$$24.SymbolFlags;
        var v14114 = v19715.ModuleMember;
        typeSymbol$$4.flags = v14113 | v14114;
      }
      if (isExported$$3) {
        var v14115 = typeSymbol$$4.flags;
        var v19716 = TypeScript$$24.SymbolFlags;
        var v14116 = v19716.Exported;
        typeSymbol$$4.flags = v14115 | v14116;
      }
      if (isAmbient$$6) {
        var v14117 = typeSymbol$$4.flags;
        var v19717 = TypeScript$$24.SymbolFlags;
        var v14118 = v19717.Ambient;
        typeSymbol$$4.flags = v14117 | v14118;
      }
      ast$$68.type = classType$$5;
      var v14119 = context$$54.scopeChain;
      var v4679 = v14119.scope;
      var v14120 = context$$54.scopeChain;
      var v4680 = v14120.container;
      var v14121 = context$$54.checker;
      var v4681 = v14121.errorReporter;
      var v4682 = isExported$$3 || isGlobal$$3;
      JAM.call(v4679.enter, v4679, [v4680, ast$$68, typeSymbol$$4, v4681, v4682, true, isAmbient$$6], JAM.policy.p1);
      var v4687 = valueSymbol == null;
      if (v4687) {
        var v14122 = context$$54.scopeChain;
        var v4683 = v14122.scope;
        var v14123 = context$$54.scopeChain;
        var v4684 = v14123.container;
        var v14124 = context$$54.checker;
        var v4685 = v14124.errorReporter;
        var v4686 = isExported$$3 || isGlobal$$3;
        JAM.call(v4683.enter, v4683, [v4684, ast$$68, typeSymbol$$4, v4685, v4686, false, isAmbient$$6], JAM.policy.p1);
      }
    } else {
      classType$$5 = typeSymbol$$4.type;
      var v14125 = classType$$5.instanceType;
      var v4696 = v14125 == null;
      if (v4696) {
        var v4688 = TypeScript$$24.Type;
        var v26597 = new v4688;
        classType$$5.instanceType = v26597;
        var v4689 = classType$$5.instanceType;
        v4689.setHasImplementation();
        var v4690 = classType$$5.instanceType;
        var v14126 = TypeScript$$24.ScopedMembers;
        var v19718 = TypeScript$$24.DualStringHashTable;
        var v23347 = TypeScript$$24.StringHashTable;
        var v19719 = new v23347;
        var v23348 = TypeScript$$24.StringHashTable;
        var v19720 = new v23348;
        var v14127 = JAM.new(v19718, [v19719, v19720]);
        var v26598 = JAM.new(v14126, [v14127]);
        v4690.members = v26598;
        var v4691 = classType$$5.instanceType;
        v4691.symbol = classType$$5.symbol;
        var v4692 = TypeScript$$24.ScopedMembers;
        var v14128 = TypeScript$$24.DualStringHashTable;
        var v19721 = TypeScript$$24.StringHashTable;
        var v14129 = new v19721;
        var v19722 = TypeScript$$24.StringHashTable;
        var v14130 = new v19722;
        var v4693 = JAM.new(v14128, [v14129, v14130]);
        var v26599 = JAM.new(v4692, [v4693]);
        classType$$5.members = v26599;
        var v4694 = TypeScript$$24.ScopedMembers;
        var v14131 = TypeScript$$24.DualStringHashTable;
        var v19723 = TypeScript$$24.StringHashTable;
        var v14132 = new v19723;
        var v19724 = TypeScript$$24.StringHashTable;
        var v14133 = new v19724;
        var v4695 = JAM.new(v14131, [v14132, v14133]);
        var v26600 = JAM.new(v4694, [v4695]);
        classType$$5.ambientMembers = v26600;
      }
      instanceType$$4 = classType$$5.instanceType;
      ast$$68.type = classType$$5;
    }
    var v14134 = classDecl$$7.constructorDecl;
    var v4703 = !v14134;
    if (v4703) {
      var v25073 = typeSymbol$$4;
      if (v25073) {
        v25073 = typeSymbol$$4.declAST;
      }
      var v23349 = v25073;
      if (v23349) {
        var v25074 = typeSymbol$$4.declAST;
        v23349 = v25074.type;
      }
      var v19725 = v23349;
      if (v19725) {
        var v25075 = typeSymbol$$4.declAST;
        var v23350 = v25075.type;
        v19725 = v23350.call;
      }
      var v14135 = v19725;
      if (v14135) {
        var v23351 = typeSymbol$$4.declAST;
        var v19726 = v23351.isOverload;
        v14135 = !v19726;
      }
      var v4701 = v14135;
      if (v4701) {
        var v14136 = context$$54.checker;
        var v4698 = v14136.errorReporter;
        var v4699 = typeSymbol$$4.declAST;
        var v4700 = typeSymbol$$4.name;
        JAM.call(v4698.duplicateIdentifier, v4698, [v4699, v4700], JAM.policy.p1);
      }
      var v4702 = classDecl$$7.type;
      createNewConstructGroupForType(v4702);
    }
    var v14137 = classType$$5.typeFlags;
    var v19727 = TypeScript$$24.TypeFlags;
    var v14138 = v19727.IsClass;
    classType$$5.typeFlags = v14137 | v14138;
    var v14139 = instanceType$$4.typeFlags;
    var v19728 = TypeScript$$24.TypeFlags;
    var v14140 = v19728.IsClass;
    instanceType$$4.typeFlags = v14139 | v14140;
    getBases(instanceType$$4, classDecl$$7);
    var v4704 = instanceType$$4.members;
    var v4705 = instanceType$$4.ambientMembers;
    JAM.call(TypeScript$$24.pushTypeCollectionScope, TypeScript$$24, [typeSymbol$$4, v4704, v4705, null, null, context$$54, instanceType$$4, classType$$5, null], JAM.policy.p1);
    return true;
  }
  function preCollectInterfaceTypes(ast$$69, parent$$57, context$$55) {
    var scopeChain$$6 = context$$55.scopeChain;
    var interfaceDecl$$4 = ast$$69;
    var interfaceSymbol$$1 = null;
    var interfaceType$$2 = null;
    var v4706 = interfaceDecl$$4.varFlags;
    var v14141 = TypeScript$$24.VarFlags;
    var v4707 = v14141.Exported;
    var isExported$$4 = JAM.call(TypeScript$$24.hasFlag, TypeScript$$24, [v4706, v4707], JAM.policy.p1);
    var v14142 = context$$55.scopeChain;
    var v4708 = v14142.container;
    var v14143 = context$$55.checker;
    var v4709 = v14143.gloMod;
    var isGlobal$$4 = v4708 == v4709;
    var alreadyInScope$$1 = true;
    alreadyInScope$$1 = false;
    var v4710 = interfaceDecl$$4.name;
    var interfaceName = v4710.text;
    var v4711 = scopeChain$$6.scope;
    interfaceSymbol$$1 = JAM.call(v4711.findLocal, v4711, [interfaceName, false, true], JAM.policy.p1);
    var v4722 = interfaceSymbol$$1 == null;
    if (v4722) {
      var v4712 = TypeScript$$24.Type;
      interfaceType$$2 = new v4712;
      var v4713 = TypeScript$$24.TypeSymbol;
      var v14144 = interfaceDecl$$4.name;
      var v4714 = v14144.minChar;
      var v4715 = interfaceName.length;
      var v19729 = context$$55.checker;
      var v14145 = v19729.locationInfo;
      var v4716 = v14145.unitIndex;
      interfaceSymbol$$1 = JAM.new(v4713, [interfaceName, v4714, v4715, v4716, interfaceType$$2]);
      interfaceType$$2.symbol = interfaceSymbol$$1;
      var v4717 = TypeScript$$24.ScopedMembers;
      var v14146 = TypeScript$$24.DualStringHashTable;
      var v19730 = TypeScript$$24.StringHashTable;
      var v14147 = new v19730;
      var v19731 = TypeScript$$24.StringHashTable;
      var v14148 = new v19731;
      var v4718 = JAM.new(v14146, [v14147, v14148]);
      var v26601 = JAM.new(v4717, [v4718]);
      interfaceType$$2.members = v26601;
      var v4719 = TypeScript$$24.ScopedMembers;
      var v14149 = TypeScript$$24.DualStringHashTable;
      var v19732 = TypeScript$$24.StringHashTable;
      var v14150 = new v19732;
      var v19733 = TypeScript$$24.StringHashTable;
      var v14151 = new v19733;
      var v4720 = JAM.new(v14149, [v14150, v14151]);
      var v26602 = JAM.new(v4719, [v4720]);
      interfaceType$$2.ambientMembers = v26602;
      interfaceSymbol$$1.declAST = interfaceDecl$$4;
      var v4721 = context$$55.scopeChain;
      interfaceSymbol$$1.declModule = v4721.moduleDecl;
    } else {
      alreadyInScope$$1 = true;
      interfaceType$$2 = interfaceSymbol$$1.type;
    }
    var v4724 = !interfaceType$$2;
    if (v4724) {
      var v4723 = context$$55.checker;
      interfaceType$$2 = v4723.anyType;
    }
    ast$$69.type = interfaceType$$2;
    getBases(interfaceType$$2, interfaceDecl$$4);
    if (isExported$$4) {
      var v14152 = interfaceSymbol$$1.flags;
      var v19734 = TypeScript$$24.SymbolFlags;
      var v14153 = v19734.Exported;
      interfaceSymbol$$1.flags = v14152 | v14153;
    }
    var v14154 = context$$55.scopeChain;
    var v4725 = v14154.moduleDecl;
    if (v4725) {
      var v14155 = interfaceSymbol$$1.flags;
      var v19735 = TypeScript$$24.SymbolFlags;
      var v14156 = v19735.ModuleMember;
      interfaceSymbol$$1.flags = v14155 | v14156;
    }
    var v4730 = !alreadyInScope$$1;
    if (v4730) {
      var v14157 = context$$55.scopeChain;
      var v4726 = v14157.scope;
      var v14158 = context$$55.scopeChain;
      var v4727 = v14158.container;
      var v14159 = context$$55.checker;
      var v4728 = v14159.errorReporter;
      var v4729 = isGlobal$$4 || isExported$$4;
      JAM.call(v4726.enter, v4726, [v4727, ast$$69, interfaceSymbol$$1, v4728, v4729, true, false], JAM.policy.p1);
    }
    var v4731 = interfaceType$$2.members;
    var v4732 = interfaceType$$2.ambientMembers;
    JAM.call(TypeScript$$24.pushTypeCollectionScope, TypeScript$$24, [interfaceSymbol$$1, v4731, v4732, null, null, context$$55, interfaceType$$2, null, null], JAM.policy.p1);
    return true;
  }
  function preCollectArgDeclTypes(ast$$70, parent$$58, context$$56) {
    var scopeChain$$7 = context$$56.scopeChain;
    var argDecl$$1 = ast$$70;
    var v14160 = argDecl$$1.varFlags;
    var v23352 = TypeScript$$24.VarFlags;
    var v19736 = v23352.Public;
    var v23353 = TypeScript$$24.VarFlags;
    var v19737 = v23353.Private;
    var v14161 = v19736 | v19737;
    var v4749 = JAM.call(TypeScript$$24.hasFlag, TypeScript$$24, [v14160, v14161], JAM.policy.p1);
    if (v4749) {
      var v4733 = TypeScript$$24.ValueLocation;
      var field$$4 = new v4733;
      var v4734 = argDecl$$1.varFlags;
      var v14162 = TypeScript$$24.VarFlags;
      var v4735 = v14162.Private;
      var isPrivate$$2 = JAM.call(TypeScript$$24.hasFlag, TypeScript$$24, [v4734, v4735], JAM.policy.p1);
      var v4736 = TypeScript$$24.FieldSymbol;
      var v14163 = argDecl$$1.id;
      var v4737 = v14163.text;
      var v14164 = argDecl$$1.id;
      var v4738 = v14164.minChar;
      var v19738 = context$$56.checker;
      var v14165 = v19738.locationInfo;
      var v4739 = v14165.unitIndex;
      var v19739 = argDecl$$1.varFlags;
      var v23354 = TypeScript$$24.VarFlags;
      var v19740 = v23354.Readonly;
      var v14166 = JAM.call(TypeScript$$24.hasFlag, TypeScript$$24, [v19739, v19740], JAM.policy.p1);
      var v4740 = !v14166;
      var fieldSymbol$$2 = JAM.new(v4736, [v4737, v4738, v4739, v4740, field$$4]);
      var v4741 = argDecl$$1.varFlags;
      JAM.call(fieldSymbol$$2.transferVarFlags, fieldSymbol$$2, [v4741]);
      field$$4.symbol = fieldSymbol$$2;
      fieldSymbol$$2.declAST = ast$$70;
      argDecl$$1.parameterPropertySym = fieldSymbol$$2;
      var v14167 = context$$56.scopeChain;
      var v4742 = v14167.scope;
      var v14168 = context$$56.scopeChain;
      var v4743 = v14168.container;
      var v14169 = context$$56.checker;
      var v4744 = v14169.errorReporter;
      var v4745 = !isPrivate$$2;
      JAM.call(v4742.enter, v4742, [v4743, ast$$70, fieldSymbol$$2, v4744, v4745, false, false], JAM.policy.p1);
      var v4746 = argDecl$$1.typeExpr;
      var v4747 = context$$56.checker;
      var v14170 = argDecl$$1.init;
      var v4748 = v14170 == null;
      var v26603 = JAM.call(TypeScript$$24.getTypeLink, TypeScript$$24, [v4746, v4747, v4748], JAM.policy.p1);
      field$$4.typeLink = v26603;
      argDecl$$1.sym = fieldSymbol$$2;
    }
    return false;
  }
  function preCollectVarDeclTypes(ast$$71, parent$$59, context$$57) {
    var scopeChain$$8 = context$$57.scopeChain;
    var varDecl$$12 = ast$$71;
    var v4750 = varDecl$$12.varFlags;
    var v14171 = TypeScript$$24.VarFlags;
    var v4751 = v14171.Ambient;
    var isAmbient$$7 = JAM.call(TypeScript$$24.hasFlag, TypeScript$$24, [v4750, v4751], JAM.policy.p1);
    var v4752 = varDecl$$12.varFlags;
    var v14172 = TypeScript$$24.VarFlags;
    var v4753 = v14172.Exported;
    var isExported$$5 = JAM.call(TypeScript$$24.hasFlag, TypeScript$$24, [v4752, v4753], JAM.policy.p1);
    var v14173 = context$$57.scopeChain;
    var v4754 = v14173.container;
    var v14174 = context$$57.checker;
    var v4755 = v14174.gloMod;
    var isGlobal$$5 = v4754 == v4755;
    var v4756 = varDecl$$12.varFlags;
    var v14175 = TypeScript$$24.VarFlags;
    var v4757 = v14175.Property;
    var isProperty = JAM.call(TypeScript$$24.hasFlag, TypeScript$$24, [v4756, v4757], JAM.policy.p1);
    var v4758 = varDecl$$12.varFlags;
    var v14176 = TypeScript$$24.VarFlags;
    var v4759 = v14176.Static;
    var isStatic$$8 = JAM.call(TypeScript$$24.hasFlag, TypeScript$$24, [v4758, v4759], JAM.policy.p1);
    var v4760 = varDecl$$12.varFlags;
    var v14177 = TypeScript$$24.VarFlags;
    var v4761 = v14177.Private;
    var isPrivate$$3 = JAM.call(TypeScript$$24.hasFlag, TypeScript$$24, [v4760, v4761], JAM.policy.p1);
    var v14178 = varDecl$$12.id;
    var v4762 = v14178.flags;
    var v14179 = TypeScript$$24.ASTFlags;
    var v4763 = v14179.OptionalName;
    var isOptional$$1 = JAM.call(TypeScript$$24.hasFlag, TypeScript$$24, [v4762, v4763], JAM.policy.p1);
    var v14180 = context$$57.scopeChain;
    var v4765 = v14180.moduleDecl;
    if (v4765) {
      var v14181 = context$$57.scopeChain;
      var v4764 = v14181.moduleDecl;
      v4764.recordNonInterface();
    }
    var v19741 = isProperty || isExported$$5;
    var v23357 = !v19741;
    if (v23357) {
      var v25076 = context$$57.scopeChain;
      var v23355 = v25076.container;
      var v25077 = context$$57.checker;
      var v23356 = v25077.gloMod;
      v19741 = v23355 == v23356;
    }
    var v14182 = v19741;
    var v19743 = !v14182;
    if (v19743) {
      var v19742 = context$$57.scopeChain;
      v14182 = v19742.moduleDecl;
    }
    var v4792 = v14182;
    if (v4792) {
      if (isAmbient$$7) {
        var v4766 = scopeChain$$8.scope;
        var v14183 = varDecl$$12.id;
        var v4767 = v14183.text;
        var existingSym = JAM.call(v4766.findLocal, v4766, [v4767, false, false], JAM.policy.p1);
        if (existingSym) {
          varDecl$$12.sym = existingSym;
          return false;
        }
      }
      var v14184 = varDecl$$12.id;
      var v4769 = v14184 == null;
      if (v4769) {
        var v14185 = context$$57.checker;
        var v4768 = v14185.errorReporter;
        JAM.call(v4768.simpleError, v4768, [varDecl$$12, "Expected variable identifier at this location"], JAM.policy.p1);
        return false;
      }
      var v4770 = TypeScript$$24.ValueLocation;
      var field$$5 = new v4770;
      var v4771 = TypeScript$$24.FieldSymbol;
      var v14186 = varDecl$$12.id;
      var v4772 = v14186.text;
      var v14187 = varDecl$$12.id;
      var v4773 = v14187.minChar;
      var v19744 = context$$57.checker;
      var v14188 = v19744.locationInfo;
      var v4774 = v14188.unitIndex;
      var v19745 = varDecl$$12.varFlags;
      var v23358 = TypeScript$$24.VarFlags;
      var v19746 = v23358.Readonly;
      var v14189 = v19745 & v19746;
      var v19747 = TypeScript$$24.VarFlags;
      var v14190 = v19747.None;
      var v4775 = v14189 == v14190;
      var fieldSymbol$$3 = JAM.new(v4771, [v4772, v4773, v4774, v4775, field$$5]);
      var v4776 = varDecl$$12.varFlags;
      JAM.call(fieldSymbol$$3.transferVarFlags, fieldSymbol$$3, [v4776]);
      if (isOptional$$1) {
        var v14191 = fieldSymbol$$3.flags;
        var v19748 = TypeScript$$24.SymbolFlags;
        var v14192 = v19748.Optional;
        fieldSymbol$$3.flags = v14191 | v14192;
      }
      field$$5.symbol = fieldSymbol$$3;
      fieldSymbol$$3.declAST = ast$$71;
      var v19749 = context$$57.scopeChain;
      var v14193 = v19749.moduleDecl;
      var v19752 = !v14193;
      if (v19752) {
        var v23359 = context$$57.scopeChain;
        var v19750 = v23359.container;
        var v23360 = context$$57.checker;
        var v19751 = v23360.gloMod;
        v14193 = v19750 == v19751;
      }
      var v4778 = v14193;
      if (v4778) {
        var v14194 = fieldSymbol$$3.flags;
        var v19753 = TypeScript$$24.SymbolFlags;
        var v14195 = v19753.ModuleMember;
        fieldSymbol$$3.flags = v14194 | v14195;
        var v4777 = context$$57.scopeChain;
        fieldSymbol$$3.declModule = v4777.moduleDecl;
      }
      var v23361 = varDecl$$12.varFlags;
      var v25078 = TypeScript$$24.VarFlags;
      var v23362 = v25078.Property;
      var v19754 = JAM.call(TypeScript$$24.hasFlag, TypeScript$$24, [v23361, v23362], JAM.policy.p1);
      if (v19754) {
        v19754 = isStatic$$8;
      }
      var v14196 = v19754;
      if (v14196) {
        var v19755 = context$$57.scopeChain;
        v14196 = v19755.classType;
      }
      var v4787 = v14196;
      if (v4787) {
        var v25800 = context$$57.scopeChain;
        var v25079 = v25800.classType;
        var v23363 = v25079.members;
        var v19756 = v23363.publicMembers;
        var v23364 = varDecl$$12.id;
        var v19757 = v23364.text;
        var v14197 = JAM.call(v19756.add, v19756, [v19757, fieldSymbol$$3], JAM.policy.p1);
        var v4781 = !v14197;
        if (v4781) {
          var v14198 = context$$57.checker;
          var v4779 = v14198.errorReporter;
          var v4780 = fieldSymbol$$3.name;
          JAM.call(v4779.duplicateIdentifier, v4779, [ast$$71, v4780], JAM.policy.p1);
        }
        var v14199 = context$$57.scopeChain;
        var v4782 = v14199.classType;
        fieldSymbol$$3.container = v4782.symbol;
      } else {
        var v14200 = context$$57.scopeChain;
        var v4783 = v14200.scope;
        var v14201 = context$$57.scopeChain;
        var v4784 = v14201.container;
        var v14202 = context$$57.checker;
        var v4785 = v14202.errorReporter;
        var v14203 = !isPrivate$$3;
        if (v14203) {
          var v23365 = isProperty || isExported$$5;
          var v25080 = !v23365;
          if (v25080) {
            v23365 = isGlobal$$5;
          }
          var v19758 = v23365;
          var v23366 = !v19758;
          if (v23366) {
            v19758 = isStatic$$8;
          }
          v14203 = v19758;
        }
        var v4786 = v14203;
        JAM.call(v4783.enter, v4783, [v4784, ast$$71, fieldSymbol$$3, v4785, v4786, false, isAmbient$$7], JAM.policy.p1);
      }
      var v14204 = varDecl$$12.varFlags;
      var v19759 = TypeScript$$24.VarFlags;
      var v14205 = v19759.Exported;
      var v4788 = JAM.call(TypeScript$$24.hasFlag, TypeScript$$24, [v14204, v14205], JAM.policy.p1);
      if (v4788) {
        var v14206 = fieldSymbol$$3.flags;
        var v19760 = TypeScript$$24.SymbolFlags;
        var v14207 = v19760.Exported;
        fieldSymbol$$3.flags = v14206 | v14207;
      }
      var v4789 = varDecl$$12.typeExpr;
      var v4790 = context$$57.checker;
      var v14208 = varDecl$$12.init;
      var v4791 = v14208 == null;
      var v26604 = JAM.call(TypeScript$$24.getTypeLink, TypeScript$$24, [v4789, v4790, v4791], JAM.policy.p1);
      field$$5.typeLink = v26604;
      varDecl$$12.sym = fieldSymbol$$3;
    }
    return false;
  }
  function preCollectFuncDeclTypes(ast$$72, parent$$60, context$$58) {
    var scopeChain$$9 = context$$58.scopeChain;
    var v14209 = context$$58.scopeChain;
    var v4794 = v14209.moduleDecl;
    if (v4794) {
      var v14210 = context$$58.scopeChain;
      var v4793 = v14210.moduleDecl;
      v4793.recordNonInterface();
    }
    var funcDecl$$22 = ast$$72;
    var fgSym$$3 = null;
    var nameText$$3 = funcDecl$$22.getNameText();
    var v4795 = funcDecl$$22.fncFlags;
    var v19761 = TypeScript$$24.FncFlags;
    var v14211 = v19761.Exported;
    var v19762 = TypeScript$$24.FncFlags;
    var v14212 = v19762.ClassPropertyMethodExported;
    var v4796 = v14211 | v14212;
    var isExported$$6 = JAM.call(TypeScript$$24.hasFlag, TypeScript$$24, [v4795, v4796], JAM.policy.p1);
    var v4797 = funcDecl$$22.fncFlags;
    var v14213 = TypeScript$$24.FncFlags;
    var v4798 = v14213.Static;
    var isStatic$$9 = JAM.call(TypeScript$$24.hasFlag, TypeScript$$24, [v4797, v4798], JAM.policy.p1);
    var v4799 = funcDecl$$22.fncFlags;
    var v14214 = TypeScript$$24.FncFlags;
    var v4800 = v14214.Private;
    var isPrivate$$4 = JAM.call(TypeScript$$24.hasFlag, TypeScript$$24, [v4799, v4800], JAM.policy.p1);
    var v4801 = funcDecl$$22.isConstructMember();
    var v14215 = !v4801;
    if (v14215) {
      v4801 = funcDecl$$22.isConstructor;
    }
    var isConstructor$$3 = v4801;
    var v4802;
    var v25081 = funcDecl$$22.isMethod();
    if (v25081) {
      v25081 = isStatic$$9;
    }
    var v23367 = v25081;
    var v25082 = !v23367;
    if (v25082) {
      v23367 = funcDecl$$22.isAccessor();
    }
    var v19763 = v23367;
    if (v19763) {
      var v23368 = context$$58.scopeChain;
      v19763 = v23368.classType;
    }
    var v14218 = v19763;
    if (v14218) {
      var v19764 = context$$58.scopeChain;
      var v14216 = v19764.classType;
      v4802 = v14216.symbol;
    } else {
      var v14217 = context$$58.scopeChain;
      v4802 = v14217.container;
    }
    var containerSym = v4802;
    var v4803 = context$$58.scopeChain;
    var containerScope = v4803.scope;
    var v14219 = context$$58.checker;
    var v4804 = v14219.gloMod;
    var isGlobal$$6 = containerSym == v4804;
    var v4805 = funcDecl$$22.name;
    if (v4805) {
      var v19765 = funcDecl$$22.name;
      var v14220 = v19765.flags;
      var v19766 = TypeScript$$24.ASTFlags;
      var v14221 = v19766.OptionalName;
      v4805 = JAM.call(TypeScript$$24.hasFlag, TypeScript$$24, [v14220, v14221], JAM.policy.p1);
    }
    var isOptional$$2 = v4805;
    var go$$2 = false;
    var foundSymbol = false;
    var v14222 = isConstructor$$3;
    if (v14222) {
      var v19767 = funcDecl$$22.fncFlags;
      var v23369 = TypeScript$$24.FncFlags;
      var v19768 = v23369.ClassMethod;
      v14222 = JAM.call(TypeScript$$24.hasFlag, TypeScript$$24, [v19767, v19768], JAM.policy.p1);
    }
    var v4807 = v14222;
    if (v4807) {
      containerSym = containerSym.container;
      var v4806 = scopeChain$$9.previous;
      containerScope = v4806.scope;
    }
    var v14223 = context$$58.checker;
    var v4808 = v14223.locationInfo;
    funcDecl$$22.unitIndex = v4808.unitIndex;
    var v26119 = funcDecl$$22.isConstructor;
    var v25801 = !v26119;
    if (v25801) {
      v25801 = containerSym;
    }
    var v25083 = v25801;
    if (v25083) {
      v25083 = containerSym.declAST;
    }
    var v23370 = v25083;
    if (v23370) {
      var v25802 = containerSym.declAST;
      var v25084 = v25802.nodeType;
      var v25803 = TypeScript$$24.NodeType;
      var v25085 = v25803.FuncDecl;
      v23370 = v25084 == v25085;
    }
    var v19769 = v23370;
    if (v19769) {
      var v23371 = containerSym.declAST;
      v19769 = v23371.isConstructor;
    }
    var v14224 = v19769;
    if (v14224) {
      var v19770 = funcDecl$$22.isMethod();
      v14224 = !v19770;
    }
    var v4809 = v14224;
    if (v4809) {
      return go$$2;
    }
    var v14225 = funcDecl$$22.fncFlags;
    var v19771 = TypeScript$$24.FncFlags;
    var v14226 = v19771.Signature;
    var v4845 = JAM.call(TypeScript$$24.hasFlag, TypeScript$$24, [v14225, v14226], JAM.policy.p1);
    if (v4845) {
      var v4810 = context$$58.scopeChain;
      var instType$$1 = v4810.thisType;
      var v14227 = nameText$$3;
      if (v14227) {
        v14227 = nameText$$3 != "__missing";
      }
      var v4814 = v14227;
      if (v4814) {
        if (isStatic$$9) {
          var v19772 = containerSym.type;
          var v14228 = v19772.members;
          var v4811 = v14228.allMembers;
          fgSym$$3 = JAM.call(v4811.lookup, v4811, [nameText$$3]);
        } else {
          fgSym$$3 = JAM.call(containerScope.findLocal, containerScope, [nameText$$3, false, false], JAM.policy.p1);
          var v4812 = fgSym$$3 == null;
          if (v4812) {
            fgSym$$3 = JAM.call(containerScope.findLocal, containerScope, [nameText$$3, false, true], JAM.policy.p1);
          }
        }
        if (fgSym$$3) {
          foundSymbol = true;
          var v19773 = funcDecl$$22.isSignature();
          var v14229 = !v19773;
          if (v14229) {
            var v23372 = funcDecl$$22.fncFlags;
            var v25086 = TypeScript$$24.FncFlags;
            var v23373 = v25086.Ambient;
            var v19774 = JAM.call(TypeScript$$24.hasFlag, TypeScript$$24, [v23372, v23373], JAM.policy.p1);
            var v23374 = fgSym$$3.flags;
            var v25087 = TypeScript$$24.SymbolFlags;
            var v23375 = v25087.Ambient;
            var v19775 = JAM.call(TypeScript$$24.hasFlag, TypeScript$$24, [v23374, v23375], JAM.policy.p1);
            v14229 = v19774 != v19775;
          }
          var v4813 = v14229;
          if (v4813) {
            fgSym$$3 = null;
          }
        }
      }
      var v4823 = fgSym$$3 == null;
      if (v4823) {
        var v14230 = funcDecl$$22.isSpecialFn();
        var v4817 = !v14230;
        if (v4817) {
          var v23376 = context$$58.checker;
          var v23377 = !foundSymbol;
          var v19776 = JAM.call(v23376.createFunctionSignature, v23376, [funcDecl$$22, containerSym, containerScope, null, v23377], JAM.policy.p1);
          var v14231 = v19776.declAST;
          var v4815 = v14231.type;
          fgSym$$3 = v4815.symbol;
        } else {
          var v23378 = context$$58.checker;
          var v19777 = JAM.call(v23378.createFunctionSignature, v23378, [funcDecl$$22, containerSym, containerScope, containerSym, false], JAM.policy.p1);
          var v14232 = v19777.declAST;
          var v4816 = v14232.type;
          fgSym$$3 = v4816.symbol;
        }
        var v19778 = fgSym$$3.declAST;
        var v14233 = v19778 == null;
        var v19780 = !v14233;
        if (v19780) {
          var v19779 = funcDecl$$22.isSpecialFn();
          v14233 = !v19779;
        }
        var v4818 = v14233;
        if (v4818) {
          fgSym$$3.declAST = ast$$72;
        }
      } else {
        var v14234 = fgSym$$3.kind();
        var v19781 = TypeScript$$24.SymbolKind;
        var v14235 = v19781.Type;
        var v4822 = v14234 == v14235;
        if (v4822) {
          var v23379 = context$$58.checker;
          var v19782 = JAM.call(v23379.createFunctionSignature, v23379, [funcDecl$$22, containerSym, containerScope, fgSym$$3, false], JAM.policy.p1);
          var v14236 = v19782.declAST;
          var v4819 = v14236.type;
          fgSym$$3 = v4819.symbol;
        } else {
          var v14237 = context$$58.checker;
          var v4820 = v14237.errorReporter;
          var v23380 = funcDecl$$22.name;
          var v19783 = v23380.actualText;
          var v14238 = "Function or method '" + v19783;
          var v4821 = v14238 + "' already declared as a property";
          JAM.call(v4820.simpleError, v4820, [funcDecl$$22, v4821], JAM.policy.p1);
        }
      }
      var v14239 = funcDecl$$22.isSpecialFn();
      if (v14239) {
        v14239 = !isStatic$$9;
      }
      var v4825 = v14239;
      if (v4825) {
        var v4824;
        if (instType$$1) {
          v4824 = instType$$1;
        } else {
          v4824 = fgSym$$3.type;
        }
        funcDecl$$22.type = v4824;
      } else {
        funcDecl$$22.type = fgSym$$3.type;
      }
    } else {
      if (nameText$$3) {
        if (isStatic$$9) {
          var v19784 = containerSym.type;
          var v14240 = v19784.members;
          var v4826 = v14240.allMembers;
          fgSym$$3 = JAM.call(v4826.lookup, v4826, [nameText$$3]);
        } else {
          var v14241 = funcDecl$$22.isConstructor;
          if (v14241) {
            var v19785 = context$$58.scopeChain;
            v14241 = v19785.previous;
          }
          var v4828 = v14241;
          if (v4828) {
            var v19786 = context$$58.scopeChain;
            var v14242 = v19786.previous;
            var v4827 = v14242.scope;
            fgSym$$3 = JAM.call(v4827.findLocal, v4827, [nameText$$3, false, false], JAM.policy.p1);
          }
          var v4829 = fgSym$$3 == null;
          if (v4829) {
            fgSym$$3 = JAM.call(containerScope.findLocal, containerScope, [nameText$$3, false, false], JAM.policy.p1);
          }
        }
        if (fgSym$$3) {
          foundSymbol = true;
          var v23381 = !isConstructor$$3;
          if (v23381) {
            var v25804 = fgSym$$3.declAST;
            var v25088 = v25804.nodeType;
            var v25805 = TypeScript$$24.NodeType;
            var v25089 = v25805.FuncDecl;
            v23381 = v25088 == v25089;
          }
          var v19787 = v23381;
          if (v19787) {
            var v25090 = fgSym$$3.declAST;
            var v23382 = v25090.isAccessor();
            v19787 = !v23382;
          }
          var v14243 = v19787;
          if (v14243) {
            var v23383 = fgSym$$3.declAST;
            var v19788 = v23383.isSignature();
            v14243 = !v19788;
          }
          var v4830 = v14243;
          if (v4830) {
            fgSym$$3 = null;
            foundSymbol = false;
          }
        }
      }
      var v26120 = fgSym$$3;
      if (v26120) {
        var v26279 = fgSym$$3.isAccessor();
        v26120 = !v26279;
      }
      var v25806 = v26120;
      if (v25806) {
        v25806 = fgSym$$3.type;
      }
      var v25091 = v25806;
      if (v25091) {
        var v25807 = fgSym$$3.type;
        v25091 = v25807.construct;
      }
      var v23384 = v25091;
      if (v23384) {
        var v26121 = fgSym$$3.type;
        var v25808 = v26121.construct;
        var v25092 = v25808.signatures;
        v23384 = v25092 != [];
      }
      var v19789 = v23384;
      if (v19789) {
        var v26360 = fgSym$$3.type;
        var v26280 = v26360.construct;
        var v26122 = v26280.signatures;
        var v25809 = v26122[0];
        var v25093 = v25809.declAST;
        var v23385 = v25093 == null;
        var v25095 = !v23385;
        if (v25095) {
          var v26420 = fgSym$$3.type;
          var v26401 = v26420.construct;
          var v26361 = v26401.signatures;
          var v26281 = v26361[0];
          var v26123 = v26281.declAST;
          var v25810 = v26123.fncFlags;
          var v26124 = TypeScript$$24.FncFlags;
          var v25811 = v26124.Ambient;
          var v25094 = JAM.call(TypeScript$$24.hasFlag, TypeScript$$24, [v25810, v25811], JAM.policy.p1);
          v23385 = !v25094;
        }
        v19789 = v23385;
      }
      var v14244 = v19789;
      if (v14244) {
        var v19790 = funcDecl$$22.isConstructor;
        v14244 = !v19790;
      }
      var v4832 = v14244;
      if (v4832) {
        var v14245 = context$$58.checker;
        var v4831 = v14245.errorReporter;
        JAM.call(v4831.simpleError, v4831, [funcDecl$$22, "Functions may not have class overloads"], JAM.policy.p1);
      }
      var v25096 = fgSym$$3;
      if (v25096) {
        var v26125 = fgSym$$3.kind();
        var v26282 = TypeScript$$24.SymbolKind;
        var v26126 = v26282.Type;
        var v25812 = v26125 == v26126;
        v25096 = !v25812;
      }
      var v23386 = v25096;
      if (v23386) {
        v23386 = funcDecl$$22.isMethod();
      }
      var v19791 = v23386;
      if (v19791) {
        var v23387 = funcDecl$$22.isAccessor();
        v19791 = !v23387;
      }
      var v14246 = v19791;
      if (v14246) {
        var v19792 = funcDecl$$22.isConstructor;
        v14246 = !v19792;
      }
      var v4836 = v14246;
      if (v4836) {
        var v14247 = context$$58.checker;
        var v4833 = v14247.errorReporter;
        var v23388 = funcDecl$$22.name;
        var v19793 = v23388.actualText;
        var v14248 = "Function or method '" + v19793;
        var v4834 = v14248 + "' already declared as a property";
        JAM.call(v4833.simpleError, v4833, [funcDecl$$22, v4834], JAM.policy.p1);
        var v4835 = context$$58.checker;
        fgSym$$3.type = v4835.anyType;
      }
      var v4837 = context$$58.checker;
      var v4838 = !foundSymbol;
      var sig$$2 = JAM.call(v4837.createFunctionSignature, v4837, [funcDecl$$22, containerSym, containerScope, fgSym$$3, v4838], JAM.policy.p1);
      var v23389 = !fgSym$$3;
      var v25099 = !v23389;
      if (v25099) {
        var v25813 = fgSym$$3.declAST;
        var v25097 = v25813.nodeType;
        var v25814 = TypeScript$$24.NodeType;
        var v25098 = v25814.FuncDecl;
        v23389 = v25097 != v25098;
      }
      var v19794 = v23389;
      if (v19794) {
        v19794 = funcDecl$$22.isAccessor();
      }
      var v14249 = v19794;
      var v19796 = !v14249;
      if (v19796) {
        var v19795 = fgSym$$3;
        if (v19795) {
          v19795 = fgSym$$3.isAccessor();
        }
        v14249 = v19795;
      }
      var v4842 = v14249;
      if (v4842) {
        var v4839 = context$$58.checker;
        var v4840 = containerSym.type;
        var v14250 = funcDecl$$22.isMethod();
        if (v14250) {
          v14250 = isStatic$$9;
        }
        var v4841 = v14250;
        var v26605 = JAM.call(v4839.createAccessorSymbol, v4839, [funcDecl$$22, fgSym$$3, v4840, v4841, true, containerScope, containerSym], JAM.policy.p1);
        funcDecl$$22.accessorSymbol = v26605;
      }
      var v14251 = funcDecl$$22.type;
      var v4843 = v14251.symbol;
      v4843.declAST = ast$$72;
      var v4844 = funcDecl$$22.isConstructor;
      if (v4844) {
        go$$2 = true;
      }
    }
    if (isExported$$6) {
      var v14252 = funcDecl$$22.type;
      var v4847 = v14252.call;
      if (v4847) {
        var v14253 = funcDecl$$22.type;
        var v4846 = v14253.symbol;
        var v19797 = v4846.flags;
        var v23390 = TypeScript$$24.SymbolFlags;
        var v19798 = v23390.Exported;
        v4846.flags = v19797 | v19798;
      }
      var v23391 = fgSym$$3;
      if (v23391) {
        var v25100 = fgSym$$3.isAccessor();
        v23391 = !v25100;
      }
      var v19799 = v23391;
      if (v19799) {
        var v23392 = fgSym$$3.kind();
        var v25101 = TypeScript$$24.SymbolKind;
        var v23393 = v25101.Type;
        v19799 = v23392 == v23393;
      }
      var v14254 = v19799;
      if (v14254) {
        var v19800 = fgSym$$3.type;
        v14254 = v19800.call;
      }
      var v4848 = v14254;
      if (v4848) {
        var v14255 = fgSym$$3.flags;
        var v19801 = TypeScript$$24.SymbolFlags;
        var v14256 = v19801.Exported;
        fgSym$$3.flags = v14255 | v14256;
      }
    }
    var v19802 = context$$58.scopeChain;
    var v14257 = v19802.moduleDecl;
    if (v14257) {
      var v19803 = funcDecl$$22.isSpecialFn();
      v14257 = !v19803;
    }
    var v4851 = v14257;
    if (v4851) {
      var v14258 = funcDecl$$22.type;
      var v4849 = v14258.symbol;
      var v19804 = v4849.flags;
      var v23394 = TypeScript$$24.SymbolFlags;
      var v19805 = v23394.ModuleMember;
      v4849.flags = v19804 | v19805;
      var v14259 = funcDecl$$22.type;
      var v4850 = v14259.symbol;
      var v14260 = context$$58.scopeChain;
      v4850.declModule = v14260.moduleDecl;
    }
    var v4852 = fgSym$$3 && isOptional$$2;
    if (v4852) {
      var v14261 = fgSym$$3.flags;
      var v19806 = TypeScript$$24.SymbolFlags;
      var v14262 = v19806.Optional;
      fgSym$$3.flags = v14261 | v14262;
    }
    return go$$2;
  }
  function preCollectTypes(ast$$73, parent$$61, walker$$46) {
    var context$$59 = walker$$46.state;
    var go$$3 = false;
    var scopeChain$$10 = context$$59.scopeChain;
    var v14263 = ast$$73.nodeType;
    var v19807 = TypeScript$$24.NodeType;
    var v14264 = v19807.Script;
    var v4865 = v14263 == v14264;
    if (v4865) {
      var script$$15 = ast$$73;
      context$$59.script = script$$15;
      go$$3 = true;
    } else {
      var v14265 = ast$$73.nodeType;
      var v19808 = TypeScript$$24.NodeType;
      var v14266 = v19808.List;
      var v4864 = v14265 == v14266;
      if (v4864) {
        go$$3 = true;
      } else {
        var v14267 = ast$$73.nodeType;
        var v19809 = TypeScript$$24.NodeType;
        var v14268 = v19809.ImportDeclaration;
        var v4863 = v14267 == v14268;
        if (v4863) {
          go$$3 = preCollectImportTypes(ast$$73, parent$$61, context$$59);
        } else {
          var v14269 = ast$$73.nodeType;
          var v19810 = TypeScript$$24.NodeType;
          var v14270 = v19810.With;
          var v4862 = v14269 == v14270;
          if (v4862) {
            go$$3 = false;
          } else {
            var v14271 = ast$$73.nodeType;
            var v19811 = TypeScript$$24.NodeType;
            var v14272 = v19811.ModuleDeclaration;
            var v4861 = v14271 == v14272;
            if (v4861) {
              go$$3 = preCollectModuleTypes(ast$$73, parent$$61, context$$59);
            } else {
              var v14273 = ast$$73.nodeType;
              var v19812 = TypeScript$$24.NodeType;
              var v14274 = v19812.ClassDeclaration;
              var v4860 = v14273 == v14274;
              if (v4860) {
                go$$3 = preCollectClassTypes(ast$$73, parent$$61, context$$59);
              } else {
                var v14275 = ast$$73.nodeType;
                var v19813 = TypeScript$$24.NodeType;
                var v14276 = v19813.Block;
                var v4859 = v14275 == v14276;
                if (v4859) {
                  go$$3 = true;
                } else {
                  var v14277 = ast$$73.nodeType;
                  var v19814 = TypeScript$$24.NodeType;
                  var v14278 = v19814.InterfaceDeclaration;
                  var v4858 = v14277 == v14278;
                  if (v4858) {
                    go$$3 = preCollectInterfaceTypes(ast$$73, parent$$61, context$$59);
                  } else {
                    var v14279 = ast$$73.nodeType;
                    var v19815 = TypeScript$$24.NodeType;
                    var v14280 = v19815.ArgDecl;
                    var v4857 = v14279 == v14280;
                    if (v4857) {
                      go$$3 = preCollectArgDeclTypes(ast$$73, parent$$61, context$$59);
                    } else {
                      var v14281 = ast$$73.nodeType;
                      var v19816 = TypeScript$$24.NodeType;
                      var v14282 = v19816.VarDecl;
                      var v4856 = v14281 == v14282;
                      if (v4856) {
                        go$$3 = preCollectVarDeclTypes(ast$$73, parent$$61, context$$59);
                      } else {
                        var v14283 = ast$$73.nodeType;
                        var v19817 = TypeScript$$24.NodeType;
                        var v14284 = v19817.FuncDecl;
                        var v4855 = v14283 == v14284;
                        if (v4855) {
                          go$$3 = preCollectFuncDeclTypes(ast$$73, parent$$61, context$$59);
                        } else {
                          var v14285 = ast$$73.isStatementOrExpression();
                          if (v14285) {
                            var v19818 = context$$59.scopeChain;
                            v14285 = v19818.moduleDecl;
                          }
                          var v4854 = v14285;
                          if (v4854) {
                            var v14286 = context$$59.scopeChain;
                            var v4853 = v14286.moduleDecl;
                            v4853.recordNonInterface();
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    var v4866 = walker$$46.options;
    v4866.goChildren = go$$3;
    return ast$$73;
  }
  function postCollectTypes(ast$$74, parent$$62, walker$$47) {
    var context$$60 = walker$$47.state;
    var v14287 = ast$$74.nodeType;
    var v19819 = TypeScript$$24.NodeType;
    var v14288 = v19819.ModuleDeclaration;
    var v4869 = v14287 == v14288;
    if (v4869) {
      JAM.call(TypeScript$$24.popTypeCollectionScope, TypeScript$$24, [context$$60]);
    } else {
      var v14289 = ast$$74.nodeType;
      var v19820 = TypeScript$$24.NodeType;
      var v14290 = v19820.ClassDeclaration;
      var v4868 = v14289 == v14290;
      if (v4868) {
        JAM.call(TypeScript$$24.popTypeCollectionScope, TypeScript$$24, [context$$60]);
      } else {
        var v14291 = ast$$74.nodeType;
        var v19821 = TypeScript$$24.NodeType;
        var v14292 = v19821.InterfaceDeclaration;
        var v4867 = v14291 == v14292;
        if (v4867) {
          JAM.call(TypeScript$$24.popTypeCollectionScope, TypeScript$$24, [context$$60]);
        }
      }
    }
    return ast$$74;
  }
  var Continuation = v966();
  TypeScript$$24.Continuation = Continuation;
  TypeScript$$24.createNewConstructGroupForType = createNewConstructGroupForType;
  TypeScript$$24.cloneParentConstructGroupForChildType = cloneParentConstructGroupForChildType;
  TypeScript$$24.globalId = "__GLO";
  TypeScript$$24.preCollectImportTypes = preCollectImportTypes;
  TypeScript$$24.preCollectModuleTypes = preCollectModuleTypes;
  TypeScript$$24.preCollectClassTypes = preCollectClassTypes;
  TypeScript$$24.preCollectInterfaceTypes = preCollectInterfaceTypes;
  TypeScript$$24.preCollectArgDeclTypes = preCollectArgDeclTypes;
  TypeScript$$24.preCollectVarDeclTypes = preCollectVarDeclTypes;
  TypeScript$$24.preCollectFuncDeclTypes = preCollectFuncDeclTypes;
  TypeScript$$24.preCollectTypes = preCollectTypes;
  TypeScript$$24.postCollectTypes = postCollectTypes;
  return;
}
function v964(TypeScript$$23) {
  function v963() {
    function v962(sourceSig, targetSig, assignableTo$$2, comparisonCache$$2, comparisonInfo$$11) {
      var v19822 = sourceSig.parameters;
      var v14293 = !v19822;
      var v19824 = !v14293;
      if (v19824) {
        var v19823 = targetSig.parameters;
        v14293 = !v19823;
      }
      var v4870 = v14293;
      if (v4870) {
        return false;
      }
      var v4871;
      var v14295 = targetSig.hasVariableArgList;
      if (v14295) {
        var v14294 = targetSig.nonOptionalParameterCount;
        v4871 = v14294 - 1;
      } else {
        v4871 = targetSig.nonOptionalParameterCount;
      }
      var targetVarArgCount = v4871;
      var v4872;
      var v14297 = sourceSig.hasVariableArgList;
      if (v14297) {
        var v14296 = sourceSig.nonOptionalParameterCount;
        v4872 = v14296 - 1;
      } else {
        v4872 = sourceSig.nonOptionalParameterCount;
      }
      var sourceVarArgCount = v4872;
      var v14298 = sourceVarArgCount > targetVarArgCount;
      if (v14298) {
        var v19825 = targetSig.hasVariableArgList;
        v14298 = !v19825;
      }
      var v4874 = v14298;
      if (v4874) {
        if (comparisonInfo$$11) {
          var v14299 = comparisonInfo$$11.flags;
          var v19826 = TypeScript$$23.TypeRelationshipFlags;
          var v14300 = v19826.SourceSignatureHasTooManyParameters;
          comparisonInfo$$11.flags = v14299 | v14300;
          var v14301 = "Call signature expects " + targetVarArgCount;
          var v4873 = v14301 + " or fewer parameters";
          JAM.call(comparisonInfo$$11.addMessageToFront, comparisonInfo$$11, [v4873]);
        }
        return false;
      }
      var v4875 = sourceSig.returnType;
      var sourceReturnType = v4875.type;
      var v4876 = targetSig.returnType;
      var targetReturnType = v4876.type;
      var v14302 = this.voidType;
      var v4878 = targetReturnType != v14302;
      if (v4878) {
        var v14303 = JAM.call(this.sourceIsRelatableToTarget, this, [sourceReturnType, targetReturnType, assignableTo$$2, comparisonCache$$2, comparisonInfo$$11], JAM.policy.p1);
        var v4877 = !v14303;
        if (v4877) {
          if (comparisonInfo$$11) {
            var v14304 = comparisonInfo$$11.flags;
            var v19827 = TypeScript$$23.TypeRelationshipFlags;
            var v14305 = v19827.IncompatibleReturnTypes;
            comparisonInfo$$11.flags = v14304 | v14305;
          }
          return false;
        }
      }
      var v4879;
      var v19828 = sourceVarArgCount < targetVarArgCount;
      if (v19828) {
        v19828 = sourceSig.hasVariableArgList;
      }
      var v14306 = v19828;
      if (v14306) {
        v4879 = targetVarArgCount;
      } else {
        v4879 = sourceVarArgCount;
      }
      var len$$29 = v4879;
      var sourceParamType = null;
      var targetParamType = null;
      var sourceParamName = "";
      var targetParamName = "";
      var iSource = 0;
      var iTarget = 0;
      var v4895 = iSource < len$$29;
      for (;v4895;) {
        var v19829 = sourceSig.hasVariableArgList;
        var v14307 = !v19829;
        var v19830 = !v14307;
        if (v19830) {
          v14307 = iSource < sourceVarArgCount;
        }
        var v4886 = v14307;
        if (v4886) {
          var v23395 = sourceSig.parameters;
          var v19831 = v23395[iSource];
          var v14308 = v19831.parameter;
          var v4880 = v14308.typeLink;
          sourceParamType = v4880.type;
          var v23396 = sourceSig.parameters;
          var v19832 = v23396[iSource];
          var v14309 = v19832.parameter;
          var v4881 = v14309.symbol;
          sourceParamName = v4881.name;
        } else {
          var v4885 = iSource == sourceVarArgCount;
          if (v4885) {
            var v23397 = sourceSig.parameters;
            var v19833 = v23397[iSource];
            var v14310 = v19833.parameter;
            var v4882 = v14310.typeLink;
            sourceParamType = v4882.type;
            var v4883 = sourceParamType.elementType;
            if (v4883) {
              sourceParamType = sourceParamType.elementType;
            }
            var v23398 = sourceSig.parameters;
            var v19834 = v23398[iSource];
            var v14311 = v19834.parameter;
            var v4884 = v14311.symbol;
            sourceParamName = v4884.name;
          }
        }
        var v23399 = targetSig.parameters;
        var v19835 = v23399.length;
        var v14312 = iTarget < v19835;
        if (v14312) {
          v14312 = iTarget < targetVarArgCount;
        }
        var v4893 = v14312;
        if (v4893) {
          var v23400 = targetSig.parameters;
          var v19836 = v23400[iTarget];
          var v14313 = v19836.parameter;
          var v4887 = v14313.typeLink;
          targetParamType = v4887.type;
          var v23401 = targetSig.parameters;
          var v19837 = v23401[iTarget];
          var v14314 = v19837.parameter;
          var v4888 = v14314.symbol;
          targetParamName = v4888.name;
        } else {
          var v14315 = targetSig.hasVariableArgList;
          if (v14315) {
            v14315 = iTarget == targetVarArgCount;
          }
          var v4892 = v14315;
          if (v4892) {
            var v23402 = targetSig.parameters;
            var v19838 = v23402[iTarget];
            var v14316 = v19838.parameter;
            var v4889 = v14316.typeLink;
            targetParamType = v4889.type;
            var v4890 = targetParamType.elementType;
            if (v4890) {
              targetParamType = targetParamType.elementType;
            }
            var v23403 = targetSig.parameters;
            var v19839 = v23403[iTarget];
            var v14317 = v19839.parameter;
            var v4891 = v14317.symbol;
            targetParamName = v4891.name;
          }
        }
        var v19840 = JAM.call(this.sourceIsRelatableToTarget, this, [sourceParamType, targetParamType, assignableTo$$2, comparisonCache$$2, comparisonInfo$$11], JAM.policy.p1);
        var v23404 = !v19840;
        if (v23404) {
          v19840 = JAM.call(this.sourceIsRelatableToTarget, this, [targetParamType, sourceParamType, assignableTo$$2, comparisonCache$$2, comparisonInfo$$11], JAM.policy.p1);
        }
        var v14318 = v19840;
        var v4894 = !v14318;
        if (v4894) {
          if (comparisonInfo$$11) {
            var v14319 = comparisonInfo$$11.flags;
            var v19841 = TypeScript$$23.TypeRelationshipFlags;
            var v14320 = v19841.IncompatibleParameterTypes;
            comparisonInfo$$11.flags = v14319 | v14320;
          }
          return false;
        }
        iSource++;
        iTarget++;
        v4895 = iSource < len$$29;
      }
      return true;
    }
    function v961(sourceSG, targetSG, assignableTo$$1, comparisonCache$$1, comparisonInfo$$10) {
      var v4896 = sourceSG == targetSG;
      if (v4896) {
        return true;
      }
      var v14321 = sourceSG && targetSG;
      var v4897 = !v14321;
      if (v4897) {
        return false;
      }
      var mSig = null;
      var nSig = null;
      var foundMatch = false;
      var iMSig = 0;
      var v19842 = targetSG.signatures;
      var v14322 = v19842.length;
      var v4902 = iMSig < v14322;
      for (;v4902;) {
        var v4898 = targetSG.signatures;
        mSig = v4898[iMSig];
        var iNSig = 0;
        var v19843 = sourceSG.signatures;
        var v14323 = v19843.length;
        var v4901 = iNSig < v14323;
        for (;v4901;) {
          var v4899 = sourceSG.signatures;
          nSig = v4899[iNSig];
          var v4900 = JAM.call(this.signatureIsRelatableToTarget, this, [nSig, mSig, assignableTo$$1, comparisonCache$$1, comparisonInfo$$10], JAM.policy.p1);
          if (v4900) {
            foundMatch = true;
            break;
          }
          iNSig++;
          var v19844 = sourceSG.signatures;
          var v14324 = v19844.length;
          v4901 = iNSig < v14324;
        }
        if (foundMatch) {
          foundMatch = false;
          iMSig++;
          var v19845 = targetSG.signatures;
          var v14325 = v19845.length;
          v4902 = iMSig < v14325;
          continue;
        }
        return false;
      }
      return true;
    }
    function v960(source$$3, target$$33, assignableTo, comparisonCache, comparisonInfo$$9) {
      var v4903 = source$$3 == target$$33;
      if (v4903) {
        return true;
      }
      var v14326 = source$$3 && target$$33;
      var v4904 = !v14326;
      if (v4904) {
        return true;
      }
      var v14327 = source$$3.typeID;
      var v4905 = v14327 << 16;
      var v4906 = target$$33.typeID;
      var comboId$$1 = v4905 | v4906;
      var v14328 = comparisonCache[comboId$$1];
      var v4907 = v14328 != undefined;
      if (v4907) {
        return true;
      }
      if (assignableTo) {
        var v19846 = this.anyType;
        var v14329 = source$$3 == v19846;
        var v19848 = !v14329;
        if (v19848) {
          var v19847 = this.anyType;
          v14329 = target$$33 == v19847;
        }
        var v4908 = v14329;
        if (v4908) {
          return true;
        }
      } else {
        var v14330 = this.anyType;
        var v4909 = target$$33 == v14330;
        if (v4909) {
          return true;
        }
      }
      var v14331 = this.undefinedType;
      var v4910 = source$$3 == v14331;
      if (v4910) {
        return true;
      }
      var v19849 = this.nullType;
      var v14332 = source$$3 == v19849;
      if (v14332) {
        var v23405 = this.undefinedType;
        var v19850 = target$$33 != v23405;
        if (v19850) {
          var v23406 = this.voidType;
          v19850 = target$$33 != v23406;
        }
        v14332 = v19850;
      }
      var v4911 = v14332;
      if (v4911) {
        return true;
      }
      var v19851 = this.numberType;
      var v14333 = target$$33 == v19851;
      if (v14333) {
        var v19852 = source$$3.typeFlags;
        var v23407 = TypeScript$$23.TypeFlags;
        var v19853 = v23407.IsEnum;
        v14333 = v19852 & v19853;
      }
      var v4912 = v14333;
      if (v4912) {
        return true;
      }
      var v19854 = this.numberType;
      var v14334 = source$$3 == v19854;
      if (v14334) {
        var v19855 = target$$33.typeFlags;
        var v23408 = TypeScript$$23.TypeFlags;
        var v19856 = v23408.IsEnum;
        v14334 = v19855 & v19856;
      }
      var v4913 = v14334;
      if (v4913) {
        return true;
      }
      var v19857 = source$$3.typeFlags;
      var v23409 = TypeScript$$23.TypeFlags;
      var v19858 = v23409.IsEnum;
      var v14335 = v19857 & v19858;
      var v19861 = !v14335;
      if (v19861) {
        var v19859 = target$$33.typeFlags;
        var v23410 = TypeScript$$23.TypeFlags;
        var v19860 = v23410.IsEnum;
        v14335 = v19859 & v19860;
      }
      var v4914 = v14335;
      if (v4914) {
        return false;
      }
      var v14336 = source$$3.isArray();
      var v19862 = !v14336;
      if (v19862) {
        v14336 = target$$33.isArray();
      }
      var v4918 = v14336;
      if (v4918) {
        var v19863 = source$$3.isArray();
        if (v19863) {
          v19863 = target$$33.isArray();
        }
        var v14337 = v19863;
        var v4915 = !v14337;
        if (v4915) {
          return false;
        }
        comparisonCache[comboId$$1] = false;
        var v4916 = source$$3.elementType;
        var v4917 = target$$33.elementType;
        var ret$$1 = JAM.call(this.sourceIsRelatableToTarget, this, [v4916, v4917, assignableTo, comparisonCache, comparisonInfo$$9], JAM.policy.p1);
        if (ret$$1) {
          comparisonCache[comboId$$1] = true;
        } else {
          comparisonCache[comboId$$1] = undefined;
        }
        return ret$$1;
      }
      var v14338 = source$$3.primitiveTypeClass;
      var v14339 = target$$33.primitiveTypeClass;
      var v4926 = v14338 != v14339;
      if (v4926) {
        var v14340 = target$$33.primitiveTypeClass;
        var v19864 = TypeScript$$23.Primitive;
        var v14341 = v19864.None;
        var v4925 = v14340 == v14341;
        if (v4925) {
          var v19865 = this.numberType;
          var v14342 = source$$3 == v19865;
          if (v14342) {
            var v19866 = this.typeFlow;
            v14342 = v19866.numberInterfaceType;
          }
          var v4924 = v14342;
          if (v4924) {
            var v4919 = this.typeFlow;
            source$$3 = v4919.numberInterfaceType;
          } else {
            var v19867 = this.stringType;
            var v14343 = source$$3 == v19867;
            if (v14343) {
              var v19868 = this.typeFlow;
              v14343 = v19868.stringInterfaceType;
            }
            var v4923 = v14343;
            if (v4923) {
              var v4920 = this.typeFlow;
              source$$3 = v4920.stringInterfaceType;
            } else {
              var v19869 = this.booleanType;
              var v14344 = source$$3 == v19869;
              if (v14344) {
                var v19870 = this.typeFlow;
                v14344 = v19870.booleanInterfaceType;
              }
              var v4922 = v14344;
              if (v4922) {
                var v4921 = this.typeFlow;
                source$$3 = v4921.booleanInterfaceType;
              } else {
                return false;
              }
            }
          }
        } else {
          return false;
        }
      }
      comparisonCache[comboId$$1] = false;
      var v4927 = JAM.call(source$$3.hasBase, source$$3, [target$$33]);
      if (v4927) {
        comparisonCache[comboId$$1] = true;
        return true;
      }
      var v19871 = this.typeFlow;
      var v14345 = v19871.objectInterfaceType;
      if (v14345) {
        var v23411 = this.typeFlow;
        var v19872 = v23411.objectInterfaceType;
        v14345 = target$$33 == v19872;
      }
      var v4928 = v14345;
      if (v4928) {
        return true;
      }
      var v23412 = this.typeFlow;
      var v19873 = v23412.functionInterfaceType;
      if (v19873) {
        var v23413 = source$$3.call;
        var v25102 = !v23413;
        if (v25102) {
          v23413 = source$$3.construct;
        }
        v19873 = v23413;
      }
      var v14346 = v19873;
      if (v14346) {
        var v23414 = this.typeFlow;
        var v19874 = v23414.functionInterfaceType;
        v14346 = target$$33 == v19874;
      }
      var v4929 = v14346;
      if (v4929) {
        return true;
      }
      var v14347 = target$$33.isClass();
      var v19875 = !v14347;
      if (v19875) {
        v14347 = target$$33.isClassInstance();
      }
      var v4930 = v14347;
      if (v4930) {
        comparisonCache[comboId$$1] = undefined;
        return false;
      }
      var v14348 = target$$33.memberScope;
      if (v14348) {
        v14348 = source$$3.memberScope;
      }
      var v4960 = v14348;
      if (v4960) {
        var v4931 = target$$33.memberScope;
        var mPropKeys = JAM.call(v4931.getAllValueSymbolNames, v4931, [true]);
        var mProp = null;
        var nProp = null;
        var mPropType = null;
        var nPropType = null;
        var inferenceSymbol = null;
        var iMProp = 0;
        var v14349 = mPropKeys.length;
        var v4959 = iMProp < v14349;
        for (;v4959;) {
          var v4932 = target$$33.memberScope;
          var v4933 = mPropKeys[iMProp];
          mProp = JAM.call(v4932.find, v4932, [v4933, false, false], JAM.policy.p1);
          var v4934 = source$$3.memberScope;
          var v4935 = mPropKeys[iMProp];
          nProp = JAM.call(v4934.find, v4934, [v4935, false, false], JAM.policy.p1);
          var v25815 = mProp.name;
          var v25103 = v25815 == "arguments";
          if (v25103) {
            var v25816 = this.typeFlow;
            v25103 = v25816.iargumentsInterfaceType;
          }
          var v23415 = v25103;
          if (v23415) {
            var v26283 = this.typeFlow;
            var v26127 = v26283.iargumentsInterfaceType;
            var v25817 = v26127.symbol;
            var v25104 = v25817.flags;
            var v25818 = TypeScript$$23.SymbolFlags;
            var v25105 = v25818.CompilerGenerated;
            v23415 = v25104 & v25105;
          }
          var v19876 = v23415;
          if (v19876) {
            var v23416 = mProp.kind();
            var v25106 = TypeScript$$23.SymbolKind;
            var v23417 = v25106.Variable;
            v19876 = v23416 == v23417;
          }
          var v14350 = v19876;
          if (v14350) {
            var v25107 = mProp.variable;
            var v23418 = v25107.typeLink;
            var v19877 = v23418.type;
            var v23419 = this.typeFlow;
            var v19878 = v23419.iargumentsInterfaceType;
            v14350 = v19877 == v19878;
          }
          var v4936 = v14350;
          if (v4936) {
            iMProp++;
            var v14351 = mPropKeys.length;
            v4959 = iMProp < v14351;
            continue;
          }
          var v4940 = mProp.isInferenceSymbol();
          if (v4940) {
            inferenceSymbol = mProp;
            var v14352 = inferenceSymbol.typeCheckStatus;
            var v19879 = TypeScript$$23.TypeCheckStatus;
            var v14353 = v19879.NotStarted;
            var v4939 = v14352 == v14353;
            if (v4939) {
              var v4937 = this.typeFlow;
              var v4938 = mProp.declAST;
              JAM.call(v4937.typeCheck, v4937, [v4938]);
            }
          }
          mPropType = mProp.getType();
          var v4951 = !nProp;
          if (v4951) {
            var v14354 = this.typeFlow;
            var v4943 = v14354.objectInterfaceType;
            if (v4943) {
              var v19880 = this.typeFlow;
              var v14355 = v19880.objectInterfaceType;
              var v4941 = v14355.memberScope;
              var v4942 = mPropKeys[iMProp];
              nProp = JAM.call(v4941.find, v4941, [v4942, false, false], JAM.policy.p1);
            }
            var v4950 = !nProp;
            if (v4950) {
              var v19881 = this.typeFlow;
              var v14356 = v19881.functionInterfaceType;
              if (v14356) {
                var v19882 = mPropType.call;
                var v23420 = !v19882;
                if (v23420) {
                  v19882 = mPropType.construct;
                }
                v14356 = v19882;
              }
              var v4946 = v14356;
              if (v4946) {
                var v19883 = this.typeFlow;
                var v14357 = v19883.functionInterfaceType;
                var v4944 = v14357.memberScope;
                var v4945 = mPropKeys[iMProp];
                nProp = JAM.call(v4944.find, v4944, [v4945, false, false], JAM.policy.p1);
              }
              var v4949 = !nProp;
              if (v4949) {
                var v19884 = mProp.flags;
                var v23421 = TypeScript$$23.SymbolFlags;
                var v19885 = v23421.Optional;
                var v14358 = v19884 & v19885;
                var v4948 = !v14358;
                if (v4948) {
                  comparisonCache[comboId$$1] = undefined;
                  if (comparisonInfo$$9) {
                    var v14359 = comparisonInfo$$9.flags;
                    var v19886 = TypeScript$$23.TypeRelationshipFlags;
                    var v14360 = v19886.RequiredPropertyIsMissing;
                    comparisonInfo$$9.flags = v14359 | v14360;
                    var v26128 = source$$3.getTypeName();
                    var v25819 = "Type '" + v26128;
                    var v25108 = v25819 + "' is missing property '";
                    var v25109 = mPropKeys[iMProp];
                    var v23422 = v25108 + v25109;
                    var v19887 = v23422 + "' from type '";
                    var v19888 = target$$33.getTypeName();
                    var v14361 = v19887 + v19888;
                    var v4947 = v14361 + "'";
                    JAM.call(comparisonInfo$$9.addMessageToFront, comparisonInfo$$9, [v4947]);
                  }
                  return false;
                } else {
                  iMProp++;
                  var v14362 = mPropKeys.length;
                  v4959 = iMProp < v14362;
                  continue;
                }
              }
            }
          }
          var v4955 = nProp.isInferenceSymbol();
          if (v4955) {
            inferenceSymbol = nProp;
            var v14363 = inferenceSymbol.typeCheckStatus;
            var v19889 = TypeScript$$23.TypeCheckStatus;
            var v14364 = v19889.NotStarted;
            var v4954 = v14363 == v14364;
            if (v4954) {
              var v4952 = this.typeFlow;
              var v4953 = nProp.declAST;
              JAM.call(v4952.typeCheck, v4952, [v4953]);
            }
          }
          nPropType = nProp.getType();
          var v14365 = mPropType && nPropType;
          if (v14365) {
            var v25820 = nPropType.typeID;
            var v25110 = v25820 << 16;
            var v25111 = mPropType.typeID;
            var v23423 = v25110 | v25111;
            var v19890 = comparisonCache[v23423];
            v14365 = v19890 != undefined;
          }
          var v4956 = v14365;
          if (v4956) {
            iMProp++;
            var v14366 = mPropKeys.length;
            v4959 = iMProp < v14366;
            continue;
          }
          var v14367 = JAM.call(this.sourceIsRelatableToTarget, this, [nPropType, mPropType, assignableTo, comparisonCache, comparisonInfo$$9], JAM.policy.p1);
          var v4958 = !v14367;
          if (v4958) {
            comparisonCache[comboId$$1] = undefined;
            if (comparisonInfo$$9) {
              var v14368 = comparisonInfo$$9.flags;
              var v19891 = TypeScript$$23.TypeRelationshipFlags;
              var v14369 = v19891.IncompatiblePropertyTypes;
              comparisonInfo$$9.flags = v14368 | v14369;
              var v26129 = mProp.name;
              var v25821 = "Types of property '" + v26129;
              var v25112 = v25821 + "' of types '";
              var v25113 = source$$3.getTypeName();
              var v23424 = v25112 + v25113;
              var v19892 = v23424 + "' and '";
              var v19893 = target$$33.getTypeName();
              var v14370 = v19892 + v19893;
              var v4957 = v14370 + "' are incompatible";
              JAM.call(comparisonInfo$$9.addMessageToFront, comparisonInfo$$9, [v4957]);
            }
            return false;
          }
          iMProp++;
          var v14371 = mPropKeys.length;
          v4959 = iMProp < v14371;
        }
      }
      var v14372 = source$$3.call;
      var v19894 = !v14372;
      if (v19894) {
        v14372 = target$$33.call;
      }
      var v4967 = v14372;
      if (v4967) {
        var v19895 = source$$3.call;
        var v19896 = target$$33.call;
        var v14373 = JAM.call(this.signatureGroupIsRelatableToTarget, this, [v19895, v19896, assignableTo, comparisonCache, comparisonInfo$$9], JAM.policy.p1);
        var v4966 = !v14373;
        if (v4966) {
          if (comparisonInfo$$9) {
            var v14374 = source$$3.call;
            if (v14374) {
              v14374 = target$$33.call;
            }
            var v4965 = v14374;
            if (v4965) {
              var v25114 = source$$3.getTypeName();
              var v23425 = "Call signatures of types '" + v25114;
              var v19897 = v23425 + "' and '";
              var v19898 = target$$33.getTypeName();
              var v14375 = v19897 + v19898;
              var v4961 = v14375 + "' are incompatible";
              JAM.call(comparisonInfo$$9.addMessageToFront, comparisonInfo$$9, [v4961]);
            } else {
              var v4962;
              var v14376 = target$$33.call;
              if (v14376) {
                v4962 = target$$33.getTypeName();
              } else {
                v4962 = source$$3.getTypeName();
              }
              var hasSig = v4962;
              var v4963;
              var v19899 = target$$33.call;
              var v14377 = !v19899;
              if (v14377) {
                v4963 = target$$33.getTypeName();
              } else {
                v4963 = source$$3.getTypeName();
              }
              var lacksSig = v4963;
              var v23426 = "Type '" + hasSig;
              var v19900 = v23426 + "' requires a call signature, but Type '";
              var v14378 = v19900 + lacksSig;
              var v4964 = v14378 + "' lacks one";
              JAM.call(comparisonInfo$$9.setMessage, comparisonInfo$$9, [v4964]);
            }
            var v14379 = comparisonInfo$$9.flags;
            var v19901 = TypeScript$$23.TypeRelationshipFlags;
            var v14380 = v19901.IncompatibleSignatures;
            comparisonInfo$$9.flags = v14379 | v14380;
          }
          comparisonCache[comboId$$1] = undefined;
          return false;
        }
      }
      var v14381 = source$$3.construct;
      var v19902 = !v14381;
      if (v19902) {
        v14381 = target$$33.construct;
      }
      var v4974 = v14381;
      if (v4974) {
        var v19903 = source$$3.construct;
        var v19904 = target$$33.construct;
        var v14382 = JAM.call(this.signatureGroupIsRelatableToTarget, this, [v19903, v19904, assignableTo, comparisonCache, comparisonInfo$$9], JAM.policy.p1);
        var v4973 = !v14382;
        if (v4973) {
          if (comparisonInfo$$9) {
            var v14383 = source$$3.construct;
            if (v14383) {
              v14383 = target$$33.construct;
            }
            var v4972 = v14383;
            if (v4972) {
              var v25115 = source$$3.getTypeName();
              var v23427 = "Construct signatures of types '" + v25115;
              var v19905 = v23427 + "' and '";
              var v19906 = target$$33.getTypeName();
              var v14384 = v19905 + v19906;
              var v4968 = v14384 + "' are incompatible";
              JAM.call(comparisonInfo$$9.addMessageToFront, comparisonInfo$$9, [v4968]);
            } else {
              var v4969;
              var v14385 = target$$33.construct;
              if (v14385) {
                v4969 = target$$33.getTypeName();
              } else {
                v4969 = source$$3.getTypeName();
              }
              hasSig = v4969;
              var v4970;
              var v19907 = target$$33.construct;
              var v14386 = !v19907;
              if (v14386) {
                v4970 = target$$33.getTypeName();
              } else {
                v4970 = source$$3.getTypeName();
              }
              lacksSig = v4970;
              var v23428 = "Type '" + hasSig;
              var v19908 = v23428 + "' requires a construct signature, but Type '";
              var v14387 = v19908 + lacksSig;
              var v4971 = v14387 + "' lacks one";
              JAM.call(comparisonInfo$$9.setMessage, comparisonInfo$$9, [v4971]);
            }
            var v14388 = comparisonInfo$$9.flags;
            var v19909 = TypeScript$$23.TypeRelationshipFlags;
            var v14389 = v19909.IncompatibleSignatures;
            comparisonInfo$$9.flags = v14388 | v14389;
          }
          comparisonCache[comboId$$1] = undefined;
          return false;
        }
      }
      var v4979 = target$$33.index;
      if (v4979) {
        var v4975;
        var v23429 = target$$33.index;
        var v19910 = !v23429;
        if (v19910) {
          var v23430 = this.typeFlow;
          v19910 = v23430.objectInterfaceType;
        }
        var v14391 = v19910;
        if (v14391) {
          var v19911 = this.typeFlow;
          var v14390 = v19911.objectInterfaceType;
          v4975 = v14390.index;
        } else {
          v4975 = target$$33.index;
        }
        var targetIndex = v4975;
        var v4976;
        var v23431 = source$$3.index;
        var v19912 = !v23431;
        if (v19912) {
          var v23432 = this.typeFlow;
          v19912 = v23432.objectInterfaceType;
        }
        var v14393 = v19912;
        if (v14393) {
          var v19913 = this.typeFlow;
          var v14392 = v19913.objectInterfaceType;
          v4976 = v14392.index;
        } else {
          v4976 = source$$3.index;
        }
        var sourceIndex = v4976;
        var v14394 = JAM.call(this.signatureGroupIsRelatableToTarget, this, [sourceIndex, targetIndex, assignableTo, comparisonCache, comparisonInfo$$9], JAM.policy.p1);
        var v4978 = !v14394;
        if (v4978) {
          if (comparisonInfo$$9) {
            var v25116 = source$$3.getTypeName();
            var v23433 = "Index signatures of types '" + v25116;
            var v19914 = v23433 + "' and '";
            var v19915 = target$$33.getTypeName();
            var v14395 = v19914 + v19915;
            var v4977 = v14395 + "' are incompatible";
            JAM.call(comparisonInfo$$9.addMessageToFront, comparisonInfo$$9, [v4977]);
            var v14396 = comparisonInfo$$9.flags;
            var v19916 = TypeScript$$23.TypeRelationshipFlags;
            var v14397 = v19916.IncompatibleSignatures;
            comparisonInfo$$9.flags = v14396 | v14397;
          }
          comparisonCache[comboId$$1] = undefined;
          return false;
        }
      }
      comparisonCache[comboId$$1] = true;
      return true;
    }
    function v959(s1$$2, s2$$2) {
      var comparisonInfo$$8;
      var v4980 = this.assignableCache;
      return JAM.call(this.signatureIsRelatableToTarget, this, [s1$$2, s2$$2, true, v4980, comparisonInfo$$8], JAM.policy.p1);
    }
    function v958(sg1$$2, sg2$$2, comparisonInfo$$7) {
      var v4981 = this.assignableCache;
      return JAM.call(this.signatureGroupIsRelatableToTarget, this, [sg1$$2, sg2$$2, true, v4981, comparisonInfo$$7], JAM.policy.p1);
    }
    function v957(source$$2, target$$32, comparisonInfo$$6) {
      var v4982 = this.assignableCache;
      return JAM.call(this.sourceIsRelatableToTarget, this, [source$$2, target$$32, true, v4982, comparisonInfo$$6], JAM.policy.p1);
    }
    function v956(s1$$1, s2$$1, comparisonInfo$$5) {
      var v4983 = this.subtypeCache;
      return JAM.call(this.signatureIsRelatableToTarget, this, [s1$$1, s2$$1, false, v4983, comparisonInfo$$5], JAM.policy.p1);
    }
    function v955(sg1$$1, sg2$$1, comparisonInfo$$4) {
      var v4984 = this.subtypeCache;
      return JAM.call(this.signatureGroupIsRelatableToTarget, this, [sg1$$1, sg2$$1, false, v4984, comparisonInfo$$4], JAM.policy.p1);
    }
    function v954(source$$1, target$$31, comparisonInfo$$3) {
      var v4985 = this.subtypeCache;
      return JAM.call(this.sourceIsRelatableToTarget, this, [source$$1, target$$31, false, v4985, comparisonInfo$$3], JAM.policy.p1);
    }
    function v953(s1, s2) {
      var v14398 = s1.hasVariableArgList;
      var v14399 = s2.hasVariableArgList;
      var v4986 = v14398 != v14399;
      if (v4986) {
        return false;
      }
      var v14400 = s1.nonOptionalParameterCount;
      var v14401 = s2.nonOptionalParameterCount;
      var v4987 = v14400 != v14401;
      if (v4987) {
        return false;
      }
      var v19917 = s1.parameters;
      var v14402 = v19917.length;
      var v19918 = s2.parameters;
      var v14403 = v19918.length;
      var v4988 = v14402 != v14403;
      if (v4988) {
        return false;
      }
      var v23434 = s1.returnType;
      var v19919 = v23434.type;
      var v23435 = s2.returnType;
      var v19920 = v23435.type;
      var v14404 = JAM.call(this.typesAreIdentical, this, [v19919, v19920], JAM.policy.p1);
      var v4989 = !v14404;
      if (v4989) {
        return false;
      }
      var iParam = 0;
      var v19921 = s1.parameters;
      var v14405 = v19921.length;
      var v4991 = iParam < v14405;
      for (;v4991;) {
        var v26130 = s1.parameters;
        var v25822 = v26130[iParam];
        var v25117 = v25822.parameter;
        var v23436 = v25117.typeLink;
        var v19922 = v23436.type;
        var v26131 = s2.parameters;
        var v25823 = v26131[iParam];
        var v25118 = v25823.parameter;
        var v23437 = v25118.typeLink;
        var v19923 = v23437.type;
        var v14406 = JAM.call(this.typesAreIdentical, this, [v19922, v19923], JAM.policy.p1);
        var v4990 = !v14406;
        if (v4990) {
          return false;
        }
        iParam++;
        var v19924 = s1.parameters;
        var v14407 = v19924.length;
        v4991 = iParam < v14407;
      }
      return true;
    }
    function v952(sg1, sg2) {
      var v4992 = sg1 == sg2;
      if (v4992) {
        return true;
      }
      var v14408 = !sg1;
      var v19925 = !v14408;
      if (v19925) {
        v14408 = !sg2;
      }
      var v4993 = v14408;
      if (v4993) {
        return false;
      }
      var v19926 = sg1.signatures;
      var v14409 = v19926.length;
      var v19927 = sg2.signatures;
      var v14410 = v19927.length;
      var v4994 = v14409 != v14410;
      if (v4994) {
        return false;
      }
      var sig1 = null;
      var sig2 = null;
      var sigsMatch = false;
      var iSig1 = 0;
      var v19928 = sg1.signatures;
      var v14411 = v19928.length;
      var v4999 = iSig1 < v14411;
      for (;v4999;) {
        var v4995 = sg1.signatures;
        sig1 = v4995[iSig1];
        var iSig2 = 0;
        var v19929 = sg2.signatures;
        var v14412 = v19929.length;
        var v4998 = iSig2 < v14412;
        for (;v4998;) {
          var v4996 = sg2.signatures;
          sig2 = v4996[iSig2];
          var v4997 = JAM.call(this.signaturesAreIdentical, this, [sig1, sig2], JAM.policy.p1);
          if (v4997) {
            sigsMatch = true;
            break;
          }
          iSig2++;
          var v19930 = sg2.signatures;
          var v14413 = v19930.length;
          v4998 = iSig2 < v14413;
        }
        if (sigsMatch) {
          sigsMatch = false;
          iSig1++;
          var v19931 = sg1.signatures;
          var v14414 = v19931.length;
          v4999 = iSig1 < v14414;
          continue;
        }
        return false;
      }
      return true;
    }
    function v951(t1$$1, t2$$1) {
      var v5000 = t1$$1 == t2$$1;
      if (v5000) {
        return true;
      }
      var v14415 = !t1$$1;
      var v19932 = !v14415;
      if (v19932) {
        v14415 = !t2$$1;
      }
      var v5001 = v14415;
      if (v5001) {
        return false;
      }
      var v14416 = t1$$1.isClass();
      var v19933 = !v14416;
      if (v19933) {
        v14416 = t1$$1.isClassInstance();
      }
      var v5002 = v14416;
      if (v5002) {
        return false;
      }
      var v14417 = t2$$1.typeID;
      var v5003 = v14417 << 16;
      var v5004 = t1$$1.typeID;
      var comboId = v5003 | v5004;
      var v14418 = this.identicalCache;
      var v5005 = v14418[comboId];
      if (v5005) {
        return true;
      }
      var v19934 = t1$$1.typeFlags;
      var v23438 = TypeScript$$23.TypeFlags;
      var v19935 = v23438.IsEnum;
      var v14419 = v19934 & v19935;
      var v19938 = !v14419;
      if (v19938) {
        var v19936 = t2$$1.typeFlags;
        var v23439 = TypeScript$$23.TypeFlags;
        var v19937 = v23439.IsEnum;
        v14419 = v19936 & v19937;
      }
      var v5006 = v14419;
      if (v5006) {
        return false;
      }
      var v14420 = t1$$1.isArray();
      var v19939 = !v14420;
      if (v19939) {
        v14420 = t2$$1.isArray();
      }
      var v5013 = v14420;
      if (v5013) {
        var v19940 = t1$$1.isArray();
        if (v19940) {
          v19940 = t2$$1.isArray();
        }
        var v14421 = v19940;
        var v5007 = !v14421;
        if (v5007) {
          return false;
        }
        var v5008 = this.identicalCache;
        v5008[comboId] = false;
        var v5009 = t1$$1.elementType;
        var v5010 = t2$$1.elementType;
        var ret = JAM.call(this.typesAreIdentical, this, [v5009, v5010], JAM.policy.p1);
        if (ret) {
          var v5011 = this.subtypeCache;
          v5011[comboId] = true;
        } else {
          var v5012 = this.subtypeCache;
          v5012[comboId] = undefined;
        }
        return ret;
      }
      var v14422 = t1$$1.primitiveTypeClass;
      var v14423 = t2$$1.primitiveTypeClass;
      var v5014 = v14422 != v14423;
      if (v5014) {
        return false;
      }
      var v5015 = this.identicalCache;
      v5015[comboId] = false;
      var v14424 = t1$$1.memberScope;
      if (v14424) {
        v14424 = t2$$1.memberScope;
      }
      var v5034 = v14424;
      if (v5034) {
        var v14425 = t1$$1.memberScope;
        var v5016 = JAM.call(v14425.getAllValueSymbolNames, v14425, [true]);
        var t1MemberKeys = v5016.sort();
        var v14426 = t2$$1.memberScope;
        var v5017 = JAM.call(v14426.getAllValueSymbolNames, v14426, [true]);
        var t2MemberKeys = v5017.sort();
        var v14427 = t1MemberKeys.length;
        var v14428 = t2MemberKeys.length;
        var v5019 = v14427 != v14428;
        if (v5019) {
          var v5018 = this.identicalCache;
          v5018[comboId] = undefined;
          return false;
        }
        var t1MemberSymbol = null;
        var t2MemberSymbol = null;
        var t1MemberType = null;
        var t2MemberType = null;
        var iMember$$1 = 0;
        var v14429 = t1MemberKeys.length;
        var v5031 = iMember$$1 < v14429;
        for (;v5031;) {
          var v14430 = t1MemberKeys[iMember$$1];
          var v14431 = t2MemberKeys[iMember$$1];
          var v5021 = v14430 != v14431;
          if (v5021) {
            var v5020 = this.identicalCache;
            v5020[comboId] = undefined;
            return false;
          }
          var v5022 = t1$$1.memberScope;
          var v5023 = t1MemberKeys[iMember$$1];
          t1MemberSymbol = JAM.call(v5022.find, v5022, [v5023, false, false], JAM.policy.p1);
          var v5024 = t2$$1.memberScope;
          var v5025 = t2MemberKeys[iMember$$1];
          t2MemberSymbol = JAM.call(v5024.find, v5024, [v5025, false, false], JAM.policy.p1);
          var v19941 = t1MemberSymbol.flags;
          var v23440 = TypeScript$$23.SymbolFlags;
          var v19942 = v23440.Optional;
          var v14432 = v19941 & v19942;
          var v19943 = t2MemberSymbol.flags;
          var v23441 = TypeScript$$23.SymbolFlags;
          var v19944 = v23441.Optional;
          var v14433 = v19943 & v19944;
          var v5027 = v14432 != v14433;
          if (v5027) {
            var v5026 = this.identicalCache;
            v5026[comboId] = undefined;
            return false;
          }
          t1MemberType = t1MemberSymbol.getType();
          t2MemberType = t2MemberSymbol.getType();
          var v14434 = t1MemberType && t2MemberType;
          if (v14434) {
            var v23442 = this.identicalCache;
            var v25824 = t2MemberType.typeID;
            var v25119 = v25824 << 16;
            var v25120 = t1MemberType.typeID;
            var v23443 = v25119 | v25120;
            var v19945 = v23442[v23443];
            v14434 = v19945 != undefined;
          }
          var v5028 = v14434;
          if (v5028) {
            iMember$$1++;
            var v14435 = t1MemberKeys.length;
            v5031 = iMember$$1 < v14435;
            continue;
          }
          var v14436 = JAM.call(this.typesAreIdentical, this, [t1MemberType, t2MemberType], JAM.policy.p1);
          var v5030 = !v14436;
          if (v5030) {
            var v5029 = this.identicalCache;
            v5029[comboId] = undefined;
            return false;
          }
          iMember$$1++;
          var v14437 = t1MemberKeys.length;
          v5031 = iMember$$1 < v14437;
        }
      } else {
        var v14438 = t1$$1.memberScope;
        var v19946 = !v14438;
        if (v19946) {
          v14438 = t2$$1.memberScope;
        }
        var v5033 = v14438;
        if (v5033) {
          var v5032 = this.identicalCache;
          v5032[comboId] = undefined;
          return false;
        }
      }
      var v19947 = t1$$1.call;
      var v19948 = t2$$1.call;
      var v14439 = JAM.call(this.signatureGroupsAreIdentical, this, [v19947, v19948], JAM.policy.p1);
      var v5036 = !v14439;
      if (v5036) {
        var v5035 = this.identicalCache;
        v5035[comboId] = undefined;
        return false;
      }
      var v19949 = t1$$1.construct;
      var v19950 = t2$$1.construct;
      var v14440 = JAM.call(this.signatureGroupsAreIdentical, this, [v19949, v19950], JAM.policy.p1);
      var v5038 = !v14440;
      if (v5038) {
        var v5037 = this.identicalCache;
        v5037[comboId] = undefined;
        return false;
      }
      var v19951 = t1$$1.index;
      var v19952 = t2$$1.index;
      var v14441 = JAM.call(this.signatureGroupsAreIdentical, this, [v19951, v19952], JAM.policy.p1);
      var v5040 = !v14441;
      if (v5040) {
        var v5039 = this.identicalCache;
        v5039[comboId] = undefined;
        return false;
      }
      var v5041 = this.identicalCache;
      v5041[comboId] = true;
      return true;
    }
    function v950(initialType, targetType$$4, collection$$1, acceptVoid, comparisonInfo$$2) {
      var i$$82 = 0;
      var len$$28 = collection$$1.getLength();
      var nlastChecked = 0;
      var bestCommonType = initialType;
      if (targetType$$4) {
        var v5042;
        if (bestCommonType) {
          v5042 = JAM.call(bestCommonType.mergeOrdered, bestCommonType, [targetType$$4, this, acceptVoid], JAM.policy.p1);
        } else {
          v5042 = targetType$$4;
        }
        bestCommonType = v5042;
      }
      var convergenceType = bestCommonType;
      var v5049 = nlastChecked < len$$28;
      for (;v5049;) {
        i$$82 = 0;
        var v5046 = i$$82 < len$$28;
        for (;v5046;) {
          var v5043 = i$$82 == nlastChecked;
          if (v5043) {
            i$$82++;
            v5046 = i$$82 < len$$28;
            continue;
          }
          var v14442 = convergenceType;
          if (v14442) {
            var v19953 = JAM.call(collection$$1.getTypeAtIndex, collection$$1, [i$$82]);
            v14442 = bestCommonType = JAM.call(convergenceType.mergeOrdered, convergenceType, [v19953, this, acceptVoid, comparisonInfo$$2], JAM.policy.p1);
          }
          var v5044 = v14442;
          if (v5044) {
            convergenceType = bestCommonType;
          }
          var v19954 = this.anyType;
          var v14443 = bestCommonType == v19954;
          var v19955 = !v14443;
          if (v19955) {
            v14443 = bestCommonType == null;
          }
          var v5045 = v14443;
          if (v5045) {
            break;
          } else {
            if (targetType$$4) {
              JAM.call(collection$$1.setTypeAtIndex, collection$$1, [i$$82, targetType$$4], JAM.policy.p1);
            }
          }
          i$$82++;
          v5046 = i$$82 < len$$28;
        }
        var v5047 = convergenceType && bestCommonType;
        if (v5047) {
          break;
        }
        nlastChecked++;
        var v5048 = nlastChecked < len$$28;
        if (v5048) {
          convergenceType = JAM.call(collection$$1.getTypeAtIndex, collection$$1, [nlastChecked]);
        }
        v5049 = nlastChecked < len$$28;
      }
      var v5050;
      if (acceptVoid) {
        v5050 = bestCommonType;
      } else {
        var v14444;
        var v23444 = this.voidType;
        var v19956 = bestCommonType == v23444;
        if (v19956) {
          v14444 = null;
        } else {
          v14444 = bestCommonType;
        }
        v5050 = v14444;
      }
      return v5050;
    }
    function v949(t$$1) {
      var v14445 = this.undefinedType;
      var v5051 = t$$1 == v14445;
      var v14447 = !v5051;
      if (v14447) {
        var v14446 = this.nullType;
        v5051 = t$$1 == v14446;
      }
      return v5051;
    }
    function v948(t) {
      var v19957 = this.undefinedType;
      var v14448 = t == v19957;
      var v19959 = !v14448;
      if (v19959) {
        var v19958 = this.nullType;
        v14448 = t == v19958;
      }
      var v5052 = v14448;
      if (v5052) {
        return this.anyType;
      }
      return t;
    }
    function v947(targetType$$3, objectLit$$1) {
      var v19960 = this.typeFlow;
      var v14449 = v19960.objectInterfaceType;
      var v5053 = targetType$$3 == v14449;
      if (v5053) {
        return true;
      }
      var memberDecls = objectLit$$1.operand;
      var v19961 = memberDecls;
      if (v19961) {
        v19961 = targetType$$3.memberScope;
      }
      var v14450 = v19961;
      var v5054 = !v14450;
      if (v5054) {
        return false;
      }
      var id$$19 = null;
      var targetMember = null;
      var text$$23 = "";
      var foundSyms = {};
      var i$$81 = 0;
      var v19962 = memberDecls.members;
      var v14451 = v19962.length;
      var v5061 = i$$81 < v14451;
      for (;v5061;) {
        var v14452 = memberDecls.members;
        var v5055 = v14452[i$$81];
        id$$19 = v5055.operand1;
        var v14453 = id$$19.nodeType;
        var v19963 = TypeScript$$23.NodeType;
        var v14454 = v19963.Name;
        var v5058 = v14453 == v14454;
        if (v5058) {
          text$$23 = id$$19.text;
        } else {
          var v14455 = id$$19.nodeType;
          var v19964 = TypeScript$$23.NodeType;
          var v14456 = v19964.QString;
          var v5057 = v14455 == v14456;
          if (v5057) {
            var idText$$3 = id$$19.text;
            var v14457 = idText$$3.length;
            var v5056 = v14457 - 1;
            text$$23 = JAM.call(idText$$3.substring, idText$$3, [1, v5056], JAM.policy.p1);
          } else {
            return false;
          }
        }
        var v5059 = targetType$$3.memberScope;
        targetMember = JAM.call(v5059.find, v5059, [text$$23, true, false], JAM.policy.p1);
        var v5060 = !targetMember;
        if (v5060) {
          return false;
        }
        foundSyms[text$$23] = true;
        i$$81++;
        var v19965 = memberDecls.members;
        var v14458 = v19965.length;
        v5061 = i$$81 < v14458;
      }
      var v5062 = targetType$$3.memberScope;
      var targetMembers = JAM.call(v5062.getAllValueSymbolNames, v5062, [true]);
      i$$81 = 0;
      var v14459 = targetMembers.length;
      var v5065 = i$$81 < v14459;
      for (;v5065;) {
        var memberName$$2 = targetMembers[i$$81];
        var v5063 = targetType$$3.memberScope;
        var memberSym = JAM.call(v5063.find, v5063, [memberName$$2, true, false], JAM.policy.p1);
        var v23445 = targetMembers[i$$81];
        var v19966 = foundSyms[v23445];
        var v14460 = !v19966;
        if (v14460) {
          var v23446 = memberSym.flags;
          var v25121 = TypeScript$$23.SymbolFlags;
          var v23447 = v25121.Optional;
          var v19967 = JAM.call(TypeScript$$23.hasFlag, TypeScript$$23, [v23446, v23447], JAM.policy.p1);
          v14460 = !v19967;
        }
        var v5064 = v14460;
        if (v5064) {
          return false;
        }
        i$$81++;
        var v14461 = targetMembers.length;
        v5065 = i$$81 < v14461;
      }
      return true;
    }
    function v946(candidateType, funcDecl$$21, beStringent) {
      var v23448 = funcDecl$$21.isParenthesized;
      var v25122 = !v23448;
      if (v25122) {
        v23448 = funcDecl$$21.isMethod();
      }
      var v19968 = v23448;
      var v23450 = !v19968;
      if (v23450) {
        var v23449 = beStringent;
        if (v23449) {
          v23449 = funcDecl$$21.returnTypeAnnotation;
        }
        v19968 = v23449;
      }
      var v14462 = v19968;
      var v19969 = !v14462;
      if (v19969) {
        v14462 = funcDecl$$21.isInlineCallLiteral;
      }
      var v5066 = v14462;
      if (v5066) {
        return false;
      }
      var v5067 = beStringent;
      var v14464 = !v5067;
      if (v14464) {
        var v19970 = this.typeFlow;
        var v14463 = v19970.functionInterfaceType;
        v5067 = v14463 == candidateType;
      }
      beStringent = v5067;
      var v5068 = !beStringent;
      if (v5068) {
        return true;
      }
      var v14465 = funcDecl$$21.signature;
      var v5072 = !v14465;
      if (v5072) {
        var v19971 = this.typeFlow;
        var v14466 = v19971.scope;
        var v5069 = v14466.container;
        var v14467 = this.typeFlow;
        var v5070 = v14467.scope;
        JAM.call(this.createFunctionSignature, this, [funcDecl$$21, v5069, v5070, null, null], JAM.policy.p1);
        var v5071 = this.typeFlow;
        JAM.call(v5071.typeCheck, v5071, [funcDecl$$21]);
      }
      var signature$$5 = funcDecl$$21.signature;
      var v5073 = signature$$5.parameters;
      var paramLen$$2 = v5073.length;
      var i$$80 = 0;
      var v5076 = i$$80 < paramLen$$2;
      for (;v5076;) {
        var v5074 = signature$$5.parameters;
        var param$$6 = v5074[i$$80];
        var symbol$$13 = param$$6;
        var argDecl = symbol$$13.declAST;
        var v14468 = beStringent;
        if (v14468) {
          v14468 = argDecl.typeExpr;
        }
        var v5075 = v14468;
        if (v5075) {
          return false;
        }
        i$$80++;
        v5076 = i$$80 < paramLen$$2;
      }
      var v14469 = candidateType.construct;
      if (v14469) {
        v14469 = candidateType.call;
      }
      var v5077 = v14469;
      if (v5077) {
        return false;
      }
      var v5078;
      var v14470 = candidateType.construct;
      if (v14470) {
        v5078 = candidateType.construct;
      } else {
        v5078 = candidateType.call;
      }
      var candidateSigs = v5078;
      var v14471 = !candidateSigs;
      var v19973 = !v14471;
      if (v19973) {
        var v23451 = candidateSigs.signatures;
        var v19972 = v23451.length;
        v14471 = v19972 > 1;
      }
      var v5079 = v14471;
      if (v5079) {
        return false;
      }
      return true;
    }
    function v945(signatures$$3, args$$13, comparisonInfo$$1) {
      var applicableSigs = [];
      var memberType = null;
      var miss = false;
      var cxt = null;
      var hadProvisionalErrors = false;
      var i$$79 = 0;
      var v14472 = signatures$$3.length;
      var v5107 = i$$79 < v14472;
      for (;v5107;) {
        miss = false;
        var j$$10 = 0;
        var v19974 = args$$13.members;
        var v14473 = v19974.length;
        var v5104 = j$$10 < v14473;
        for (;v5104;) {
          var v23452 = signatures$$3[i$$79];
          var v19975 = v23452.parameters;
          var v14474 = v19975.length;
          var v5080 = j$$10 >= v14474;
          if (v5080) {
            j$$10++;
            var v19976 = args$$13.members;
            var v14475 = v19976.length;
            v5104 = j$$10 < v14475;
            continue;
          }
          var v19977 = signatures$$3[i$$79];
          var v14476 = v19977.parameters;
          var v5081 = v14476[j$$10];
          memberType = v5081.getType();
          var v25123 = signatures$$3[i$$79];
          var v23453 = v25123.declAST;
          var v19978 = v23453.variableArgList;
          if (v19978) {
            var v25825 = signatures$$3[i$$79];
            var v25124 = v25825.nonOptionalParameterCount;
            var v23454 = v25124 - 1;
            v19978 = j$$10 >= v23454;
          }
          var v14477 = v19978;
          if (v14477) {
            v14477 = memberType.isArray();
          }
          var v5082 = v14477;
          if (v5082) {
            memberType = memberType.elementType;
          }
          var v14478 = this.anyType;
          var v5103 = memberType == v14478;
          if (v5103) {
          } else {
            var v23455 = args$$13.members;
            var v19979 = v23455[j$$10];
            var v14479 = v19979.nodeType;
            var v19980 = TypeScript$$23.NodeType;
            var v14480 = v19980.FuncDecl;
            var v5102 = v14479 == v14480;
            if (v5102) {
              var v19981 = this.typeFlow;
              var v14481 = v19981.functionInterfaceType;
              if (v14481) {
                var v23456 = this.typeFlow;
                var v19982 = v23456.functionInterfaceType;
                v14481 = memberType == v19982;
              }
              var v5083 = v14481;
              if (v5083) {
                j$$10++;
                var v19983 = args$$13.members;
                var v14482 = v19983.length;
                v5104 = j$$10 < v14482;
                continue;
              }
              var v23457 = args$$13.members;
              var v19984 = v23457[j$$10];
              var v14483 = JAM.call(this.canContextuallyTypeFunction, this, [memberType, v19984, true], JAM.policy.p1);
              var v5091 = !v14483;
              if (v5091) {
                var v19985 = args$$13.members;
                var v14484 = v19985[j$$10];
                var v5087 = JAM.call(this.canContextuallyTypeFunction, this, [memberType, v14484, false], JAM.policy.p1);
                if (v5087) {
                  var v5084 = this.typeFlow;
                  var v14485 = args$$13.members;
                  var v5085 = v14485[j$$10];
                  JAM.call(v5084.typeCheck, v5084, [v5085]);
                  var v25125 = args$$13.members;
                  var v23458 = v25125[j$$10];
                  var v19986 = v23458.type;
                  var v14486 = JAM.call(this.sourceIsAssignableToTarget, this, [v19986, memberType, comparisonInfo$$1], JAM.policy.p1);
                  var v5086 = !v14486;
                  if (v5086) {
                    break;
                  }
                } else {
                  break;
                }
              } else {
                var v14487 = args$$13.members;
                var v5088 = v14487[j$$10];
                JAM.call(this.typeCheckWithContextualType, this, [memberType, true, true, v5088], JAM.policy.p1);
                this.cleanStartedPTO();
                hadProvisionalErrors = this.hadProvisionalErrors();
                var v25126 = args$$13.members;
                var v23459 = v25126[j$$10];
                var v19987 = v23459.type;
                var v14488 = JAM.call(this.sourceIsAssignableToTarget, this, [v19987, memberType, comparisonInfo$$1], JAM.policy.p1);
                var v5090 = !v14488;
                if (v5090) {
                  if (comparisonInfo$$1) {
                    var v26132 = memberType.getTypeName();
                    var v25826 = "Could not apply type '" + v26132;
                    var v25127 = v25826 + "' to argument ";
                    var v25128 = j$$10 + 1;
                    var v23460 = v25127 + v25128;
                    var v19988 = v23460 + ", which is of type '";
                    var v25827 = args$$13.members;
                    var v25129 = v25827[j$$10];
                    var v23461 = v25129.type;
                    var v19989 = v23461.getTypeName();
                    var v14489 = v19988 + v19989;
                    var v5089 = v14489 + "'";
                    JAM.call(comparisonInfo$$1.setMessage, comparisonInfo$$1, [v5089]);
                  }
                  miss = true;
                }
                this.resetProvisionalErrors();
                if (miss) {
                  break;
                }
              }
            } else {
              var v23462 = args$$13.members;
              var v19990 = v23462[j$$10];
              var v14490 = v19990.nodeType;
              var v19991 = TypeScript$$23.NodeType;
              var v14491 = v19991.ObjectLit;
              var v5101 = v14490 == v14491;
              if (v5101) {
                var v19992 = this.typeFlow;
                var v14492 = v19992.objectInterfaceType;
                if (v14492) {
                  var v23463 = this.typeFlow;
                  var v19993 = v23463.objectInterfaceType;
                  v14492 = memberType == v19993;
                }
                var v5092 = v14492;
                if (v5092) {
                  j$$10++;
                  var v19994 = args$$13.members;
                  var v14493 = v19994.length;
                  v5104 = j$$10 < v14493;
                  continue;
                }
                var v14494 = args$$13.members;
                var v5093 = v14494[j$$10];
                JAM.call(this.typeCheckWithContextualType, this, [memberType, true, true, v5093], JAM.policy.p1);
                this.cleanStartedPTO();
                hadProvisionalErrors = this.hadProvisionalErrors();
                var v25130 = args$$13.members;
                var v23464 = v25130[j$$10];
                var v19995 = v23464.type;
                var v14495 = JAM.call(this.sourceIsAssignableToTarget, this, [v19995, memberType, comparisonInfo$$1], JAM.policy.p1);
                var v5095 = !v14495;
                if (v5095) {
                  if (comparisonInfo$$1) {
                    var v26133 = memberType.getTypeName();
                    var v25828 = "Could not apply type '" + v26133;
                    var v25131 = v25828 + "' to argument ";
                    var v25132 = j$$10 + 1;
                    var v23465 = v25131 + v25132;
                    var v19996 = v23465 + ", which is of type '";
                    var v25829 = args$$13.members;
                    var v25133 = v25829[j$$10];
                    var v23466 = v25133.type;
                    var v19997 = v23466.getTypeName();
                    var v14496 = v19996 + v19997;
                    var v5094 = v14496 + "'";
                    JAM.call(comparisonInfo$$1.setMessage, comparisonInfo$$1, [v5094]);
                  }
                  miss = true;
                }
                this.resetProvisionalErrors();
                if (miss) {
                  break;
                }
              } else {
                var v23467 = args$$13.members;
                var v19998 = v23467[j$$10];
                var v14497 = v19998.nodeType;
                var v19999 = TypeScript$$23.NodeType;
                var v14498 = v19999.ArrayLit;
                var v5100 = v14497 == v14498;
                if (v5100) {
                  var v20000 = this.typeFlow;
                  var v14499 = v20000.arrayInterfaceType;
                  if (v14499) {
                    var v23468 = this.typeFlow;
                    var v20001 = v23468.arrayInterfaceType;
                    v14499 = memberType == v20001;
                  }
                  var v5096 = v14499;
                  if (v5096) {
                    j$$10++;
                    var v20002 = args$$13.members;
                    var v14500 = v20002.length;
                    v5104 = j$$10 < v14500;
                    continue;
                  }
                  var v14501 = args$$13.members;
                  var v5097 = v14501[j$$10];
                  JAM.call(this.typeCheckWithContextualType, this, [memberType, true, true, v5097], JAM.policy.p1);
                  this.cleanStartedPTO();
                  hadProvisionalErrors = this.hadProvisionalErrors();
                  var v25134 = args$$13.members;
                  var v23469 = v25134[j$$10];
                  var v20003 = v23469.type;
                  var v14502 = JAM.call(this.sourceIsAssignableToTarget, this, [v20003, memberType, comparisonInfo$$1], JAM.policy.p1);
                  var v5099 = !v14502;
                  if (v5099) {
                    if (comparisonInfo$$1) {
                      var v26134 = memberType.getTypeName();
                      var v25830 = "Could not apply type '" + v26134;
                      var v25135 = v25830 + "' to argument ";
                      var v25136 = j$$10 + 1;
                      var v23470 = v25135 + v25136;
                      var v20004 = v23470 + ", which is of type '";
                      var v25831 = args$$13.members;
                      var v25137 = v25831[j$$10];
                      var v23471 = v25137.type;
                      var v20005 = v23471.getTypeName();
                      var v14503 = v20004 + v20005;
                      var v5098 = v14503 + "'";
                      JAM.call(comparisonInfo$$1.setMessage, comparisonInfo$$1, [v5098]);
                    }
                    break;
                  }
                  this.resetProvisionalErrors();
                  if (miss) {
                    break;
                  }
                }
              }
            }
          }
          j$$10++;
          var v20006 = args$$13.members;
          var v14504 = v20006.length;
          v5104 = j$$10 < v14504;
        }
        var v20007 = args$$13.members;
        var v14505 = v20007.length;
        var v5106 = j$$10 == v14505;
        if (v5106) {
          var v5105 = applicableSigs.length;
          var v14506 = signatures$$3[i$$79];
          applicableSigs[v5105] = {signature:v14506, hadProvisionalErrors:hadProvisionalErrors};
        }
        hadProvisionalErrors = false;
        i$$79++;
        var v14507 = signatures$$3.length;
        v5107 = i$$79 < v14507;
      }
      return applicableSigs;
    }
    function v944(signatures$$2, args$$12) {
      function v943(index$$51) {
        var v5108;
        if (index$$51) {
          var v20008 = Q.signature;
          var v14508 = v20008.returnType;
          v5108 = v14508.type;
        } else {
          var v20009 = best.signature;
          var v14509 = v20009.returnType;
          v5108 = v14509.type;
        }
        return v5108;
      }
      function v942(index$$50, type$$43) {
        return;
      }
      function v941() {
        return 2;
      }
      var v14510 = signatures$$2.length;
      var v5110 = v14510 == 1;
      if (v5110) {
        var v14511 = signatures$$2[0];
        var v5109 = v14511.signature;
        return {sig:v5109, ambiguous:false};
      }
      var best = signatures$$2[0];
      var Q = null;
      var AType = null;
      var PType = null;
      var QType = null;
      var ambiguous = false;
      var qSig = 1;
      var v14512 = signatures$$2.length;
      var v5124 = qSig < v14512;
      for (;v5124;) {
        Q = signatures$$2[qSig];
        var i$$78 = 0;
        i$$78 = 0;
        var v14513 = args$$12;
        if (v14513) {
          var v23472 = args$$12.members;
          var v20010 = v23472.length;
          v14513 = i$$78 < v20010;
        }
        var v5121 = v14513;
        for (;v5121;) {
          var v14514 = args$$12.members;
          var v5111 = v14514[i$$78];
          AType = v5111.type;
          var v5112;
          var v25138 = best.signature;
          var v23473 = v25138.parameters;
          var v20011 = v23473.length;
          var v14517 = i$$78 < v20011;
          if (v14517) {
            var v23474 = best.signature;
            var v20012 = v23474.parameters;
            var v14515 = v20012[i$$78];
            v5112 = v14515.getType();
          } else {
            var v25139 = best.signature;
            var v23475 = v25139.parameters;
            var v26135 = best.signature;
            var v25832 = v26135.parameters;
            var v25140 = v25832.length;
            var v23476 = v25140 - 1;
            var v20013 = v23475[v23476];
            var v14516 = v20013.getType();
            v5112 = v14516.elementType;
          }
          PType = v5112;
          var v5113;
          var v25141 = Q.signature;
          var v23477 = v25141.parameters;
          var v20014 = v23477.length;
          var v14520 = i$$78 < v20014;
          if (v14520) {
            var v23478 = Q.signature;
            var v20015 = v23478.parameters;
            var v14518 = v20015[i$$78];
            v5113 = v14518.getType();
          } else {
            var v25142 = Q.signature;
            var v23479 = v25142.parameters;
            var v26136 = Q.signature;
            var v25833 = v26136.parameters;
            var v25143 = v25833.length;
            var v23480 = v25143 - 1;
            var v20016 = v23479[v23480];
            var v14519 = v20016.getType();
            v5113 = v14519.elementType;
          }
          QType = v5113;
          var v5120 = JAM.call(this.typesAreIdentical, this, [PType, QType], JAM.policy.p1);
          if (v5120) {
          } else {
            var v5119 = JAM.call(this.typesAreIdentical, this, [AType, PType], JAM.policy.p1);
            if (v5119) {
              break;
            } else {
              var v5118 = JAM.call(this.typesAreIdentical, this, [AType, QType], JAM.policy.p1);
              if (v5118) {
                best = Q;
                break;
              } else {
                var v5117 = JAM.call(this.sourceIsSubtypeOfTarget, this, [PType, QType], JAM.policy.p1);
                if (v5117) {
                  break;
                } else {
                  var v5116 = JAM.call(this.sourceIsSubtypeOfTarget, this, [QType, PType], JAM.policy.p1);
                  if (v5116) {
                    best = Q;
                    break;
                  } else {
                    var v5115 = Q.hadProvisionalErrors;
                    if (v5115) {
                      break;
                    } else {
                      var v5114 = best.hadProvisionalErrors;
                      if (v5114) {
                        best = Q;
                        break;
                      }
                    }
                  }
                }
              }
            }
          }
          i$$78++;
          var v14521 = args$$12;
          if (v14521) {
            var v23481 = args$$12.members;
            var v20017 = v23481.length;
            v14521 = i$$78 < v20017;
          }
          v5121 = v14521;
        }
        var v14522 = !args$$12;
        var v20019 = !v14522;
        if (v20019) {
          var v23482 = args$$12.members;
          var v20018 = v23482.length;
          v14522 = i$$78 == v20018;
        }
        var v5123 = v14522;
        if (v5123) {
          var collection = {getLength:v941, setTypeAtIndex:v942, getTypeAtIndex:v943};
          var v20020 = best.signature;
          var v14523 = v20020.returnType;
          var v5122 = v14523.type;
          var bct = JAM.call(this.findBestCommonType, this, [v5122, null, collection, true], JAM.policy.p1);
          ambiguous = !bct;
        } else {
          ambiguous = false;
        }
        qSig++;
        var v14524 = signatures$$2.length;
        v5124 = qSig < v14524;
      }
      var v5125 = best.signature;
      return {sig:v5125, ambiguous:ambiguous};
    }
    function v940(typeLink$$2, scope$$28) {
      this.resolvingBases = true;
      JAM.call(this.resolveTypeLink, this, [scope$$28, typeLink$$2, true], JAM.policy.p1);
      this.resolvingBases = false;
      var extendsType = null;
      var v14525 = typeLink$$2.type;
      var v5127 = v14525.isClass();
      if (v5127) {
        var v5126 = typeLink$$2.type;
        extendsType = v5126.instanceType;
      } else {
        extendsType = typeLink$$2.type;
      }
      return extendsType;
    }
    function v939(scope$$27, typeLink$$1, supplyVar$$1) {
      var arrayCount$$1 = 0;
      var v14526 = typeLink$$1.type;
      var v5170 = v14526 == null;
      if (v5170) {
        var ast$$64 = typeLink$$1.ast;
        if (ast$$64) {
          var v14527 = typeLink$$1.type;
          var v5164 = v14527 == null;
          for (;v5164;) {
            var v5163 = ast$$64.nodeType;
            switch(v5163) {
              case TypeScript$$23.NodeType.Name:
                var identifier$$2 = ast$$64;
                var v5128 = identifier$$2.text;
                var symbol$$12 = JAM.call(scope$$27.find, scope$$27, [v5128, false, true], JAM.policy.p1);
                var v5139 = symbol$$12 == null;
                if (v5139) {
                  typeLink$$1.type = this.anyType;
                  var v5129 = this.errorReporter;
                  var v5130 = identifier$$2.actualText;
                  JAM.call(v5129.unresolvedSymbol, v5129, [identifier$$2, v5130], JAM.policy.p1);
                } else {
                  var v5138 = symbol$$12.isType();
                  if (v5138) {
                    var v14528 = JAM.call(symbol$$12.visible, symbol$$12, [scope$$27, this], JAM.policy.p1);
                    var v5133 = !v14528;
                    if (v5133) {
                      var v5131 = this.errorReporter;
                      var v20021 = identifier$$2.actualText;
                      var v14529 = "The symbol '" + v20021;
                      var v5132 = v14529 + "' is not visible at this point";
                      JAM.call(v5131.simpleError, v5131, [ast$$64, v5132], JAM.policy.p1);
                    }
                    identifier$$2.sym = symbol$$12;
                    var v26606 = symbol$$12.getType();
                    typeLink$$1.type = v26606;
                    var v5136 = typeLink$$1.type;
                    if (v5136) {
                      var v14530 = typeLink$$1.type;
                      var v5135 = v14530.isClass();
                      if (v5135) {
                        var v5134 = typeLink$$1.type;
                        typeLink$$1.type = v5134.instanceType;
                      }
                    } else {
                      typeLink$$1.type = this.anyType;
                    }
                  } else {
                    typeLink$$1.type = this.anyType;
                    var v5137 = this.errorReporter;
                    JAM.call(v5137.simpleError, v5137, [ast$$64, "Expected type"], JAM.policy.p1);
                  }
                }
                break;
              case TypeScript$$23.NodeType.Dot:
                var v26607 = JAM.call(this.resolveTypeMember, this, [scope$$27, ast$$64], JAM.policy.p1);
                typeLink$$1.type = v26607;
                break;
              case TypeScript$$23.NodeType.TypeRef:
                var typeRef$$2 = ast$$64;
                arrayCount$$1 = typeRef$$2.arrayCount;
                ast$$64 = typeRef$$2.term;
                var v5140 = ast$$64 == null;
                if (v5140) {
                  typeLink$$1.type = this.anyType;
                }
                break;
              case TypeScript$$23.NodeType.InterfaceDeclaration:
                var interfaceDecl$$3 = ast$$64;
                var v5141 = TypeScript$$23.Type;
                var interfaceType$$1 = new v5141;
                var v5142 = TypeScript$$23.TypeSymbol;
                var v14531 = interfaceDecl$$3.name;
                var v5143 = v14531.text;
                var v5144 = ast$$64.minChar;
                var v14532 = ast$$64.limChar;
                var v14533 = ast$$64.minChar;
                var v5145 = v14532 - v14533;
                var v14534 = this.locationInfo;
                var v5146 = v14534.unitIndex;
                var interfaceSymbol = JAM.new(v5142, [v5143, v5144, v5145, v5146, interfaceType$$1]);
                interfaceType$$1.symbol = interfaceSymbol;
                var v5147 = TypeScript$$23.ScopedMembers;
                var v14535 = TypeScript$$23.DualStringHashTable;
                var v20022 = TypeScript$$23.StringHashTable;
                var v14536 = new v20022;
                var v20023 = TypeScript$$23.StringHashTable;
                var v14537 = new v20023;
                var v5148 = JAM.new(v14535, [v14536, v14537]);
                var v26608 = JAM.new(v5147, [v5148]);
                interfaceType$$1.members = v26608;
                var v5149 = TypeScript$$23.SymbolTableScope;
                var v5150 = interfaceType$$1.members;
                var v26609 = JAM.new(v5149, [v5150, null, null, null, interfaceSymbol]);
                interfaceType$$1.containedScope = v26609;
                var v5151 = interfaceType$$1.containedScope;
                v5151.container = interfaceSymbol;
                interfaceType$$1.memberScope = interfaceType$$1.containedScope;
                var memberList = interfaceDecl$$3.members;
                var props$$1 = memberList.members;
                var propsLen = props$$1.length;
                var j$$9 = 0;
                var v5161 = j$$9 < propsLen;
                for (;v5161;) {
                  var propDecl = props$$1[j$$9];
                  var propSym = null;
                  var addMember = true;
                  var id$$18 = null;
                  var v14538 = propDecl.nodeType;
                  var v20024 = TypeScript$$23.NodeType;
                  var v14539 = v20024.FuncDecl;
                  var v5156 = v14538 == v14539;
                  if (v5156) {
                    var funcDecl$$20 = propDecl;
                    id$$18 = funcDecl$$20.name;
                    var v14540 = interfaceType$$1.members;
                    var v5152 = v14540.allMembers;
                    var v5153 = funcDecl$$20.getNameText();
                    propSym = JAM.call(v5152.lookup, v5152, [v5153]);
                    addMember = propSym == null;
                    var v5154 = funcDecl$$20.isSpecialFn();
                    if (v5154) {
                      addMember = false;
                      propSym = JAM.call(this.resolveFuncDecl, this, [funcDecl$$20, scope$$27, interfaceSymbol], JAM.policy.p1);
                    } else {
                      propSym = JAM.call(this.resolveFuncDecl, this, [funcDecl$$20, scope$$27, propSym], JAM.policy.p1);
                    }
                    funcDecl$$20.type = propSym.type;
                  } else {
                    id$$18 = propDecl.id;
                    propSym = JAM.call(this.resolveVarDecl, this, [propDecl, scope$$27], JAM.policy.p1);
                    var v5155 = id$$18.isMissing();
                    addMember = !v5155;
                  }
                  if (addMember) {
                    var v14541 = id$$18;
                    if (v14541) {
                      var v20025 = id$$18.flags;
                      var v23483 = TypeScript$$23.ASTFlags;
                      var v20026 = v23483.OptionalName;
                      v14541 = JAM.call(TypeScript$$23.hasFlag, TypeScript$$23, [v20025, v20026], JAM.policy.p1);
                    }
                    var v5157 = v14541;
                    if (v5157) {
                      var v14542 = propSym.flags;
                      var v20027 = TypeScript$$23.SymbolFlags;
                      var v14543 = v20027.Optional;
                      propSym.flags = v14542 | v14543;
                    }
                    var v23484 = interfaceType$$1.members;
                    var v20028 = v23484.allMembers;
                    var v20029 = propSym.name;
                    var v14544 = JAM.call(v20028.add, v20028, [v20029, propSym], JAM.policy.p1);
                    var v5160 = !v14544;
                    if (v5160) {
                      var v5158 = this.errorReporter;
                      var v5159 = propSym.name;
                      JAM.call(v5158.duplicateIdentifier, v5158, [ast$$64, v5159], JAM.policy.p1);
                    }
                  }
                  j$$9++;
                  v5161 = j$$9 < propsLen;
                }
                ast$$64.type = interfaceType$$1;
                typeLink$$1.type = interfaceType$$1;
                break;
              case TypeScript$$23.NodeType.FuncDecl:
                var tsym = JAM.call(this.resolveFuncDecl, this, [ast$$64, scope$$27, null], JAM.policy.p1);
                typeLink$$1.type = tsym.type;
                break;
              default:
                typeLink$$1.type = this.anyType;
                var v5162 = this.errorReporter;
                JAM.call(v5162.simpleError, v5162, [ast$$64, "Expected type"], JAM.policy.p1);
            }
            var v14545 = typeLink$$1.type;
            v5164 = v14545 == null;
          }
        }
        var count$$5 = arrayCount$$1;
        var v5166 = count$$5 > 0;
        for (;v5166;) {
          var v5165 = typeLink$$1.type;
          var v26610 = JAM.call(this.makeArrayType, this, [v5165]);
          typeLink$$1.type = v26610;
          count$$5--;
          v5166 = count$$5 > 0;
        }
        var v14546 = supplyVar$$1;
        if (v14546) {
          var v20030 = typeLink$$1.type;
          v14546 = v20030 == null;
        }
        var v5167 = v14546;
        if (v5167) {
          typeLink$$1.type = this.anyType;
        }
        var v5169 = typeLink$$1.ast;
        if (v5169) {
          var v5168 = typeLink$$1.ast;
          v5168.type = typeLink$$1.type;
        }
      }
      return;
    }
    function v938(varDecl$$11, scope$$26) {
      var v5171 = TypeScript$$23.ValueLocation;
      var field$$2 = new v5171;
      var v5172 = TypeScript$$23.FieldSymbol;
      var v14547 = varDecl$$11.id;
      var v5173 = v14547.text;
      var v5174 = varDecl$$11.minChar;
      var v14548 = this.locationInfo;
      var v5175 = v14548.unitIndex;
      var v20031 = varDecl$$11.varFlags;
      var v23485 = TypeScript$$23.VarFlags;
      var v20032 = v23485.Readonly;
      var v14549 = v20031 & v20032;
      var v20033 = TypeScript$$23.VarFlags;
      var v14550 = v20033.None;
      var v5176 = v14549 == v14550;
      var fieldSymbol = JAM.new(v5172, [v5173, v5174, v5175, v5176, field$$2]);
      var v5177 = varDecl$$11.varFlags;
      JAM.call(fieldSymbol.transferVarFlags, fieldSymbol, [v5177]);
      field$$2.symbol = fieldSymbol;
      fieldSymbol.declAST = varDecl$$11;
      var v5178 = varDecl$$11.typeExpr;
      var v14551 = varDecl$$11.init;
      var v5179 = v14551 == null;
      var v26611 = JAM.call(TypeScript$$23.getTypeLink, TypeScript$$23, [v5178, this, v5179], JAM.policy.p1);
      field$$2.typeLink = v26611;
      var v5180 = field$$2.typeLink;
      JAM.call(this.resolveTypeLink, this, [scope$$26, v5180, true], JAM.policy.p1);
      varDecl$$11.sym = fieldSymbol;
      var v5181 = field$$2.typeLink;
      varDecl$$11.type = v5181.type;
      return fieldSymbol;
    }
    function v937(funcDecl$$19, scope$$25, fgSym$$2) {
      var v23486 = scope$$25.container;
      var v20034 = JAM.call(this.createFunctionSignature, this, [funcDecl$$19, v23486, scope$$25, fgSym$$2, false], JAM.policy.p1);
      var v14552 = v20034.declAST;
      var v5182 = v14552.type;
      var functionGroupSymbol = v5182.symbol;
      var signatures$$1;
      var v5187 = funcDecl$$19.isConstructMember();
      if (v5187) {
        var v14553 = functionGroupSymbol.type;
        var v5183 = v14553.construct;
        signatures$$1 = v5183.signatures;
      } else {
        var v5186 = funcDecl$$19.isIndexerMember();
        if (v5186) {
          var v20035 = functionGroupSymbol.type;
          var v14554 = v20035.getInstanceType();
          var v5184 = v14554.index;
          signatures$$1 = v5184.signatures;
        } else {
          var v14555 = functionGroupSymbol.type;
          var v5185 = v14555.call;
          signatures$$1 = v5185.signatures;
        }
      }
      var v14556 = signatures$$1.length;
      var v5188 = v14556 - 1;
      var signature$$4 = signatures$$1[v5188];
      var v5189 = signature$$4.parameters;
      var len$$27 = v5189.length;
      var i$$77 = 0;
      var v5192 = i$$77 < len$$27;
      for (;v5192;) {
        var v5190 = signature$$4.parameters;
        var paramSym$$2 = v5190[i$$77];
        var v14557 = paramSym$$2.parameter;
        var v5191 = v14557.typeLink;
        JAM.call(this.resolveTypeLink, this, [scope$$25, v5191, true], JAM.policy.p1);
        i$$77++;
        v5192 = i$$77 < len$$27;
      }
      var v14558 = len$$27;
      if (v14558) {
        v14558 = funcDecl$$19.variableArgList;
      }
      var v5197 = v14558;
      if (v5197) {
        var v26137 = signature$$4.parameters;
        var v26138 = len$$27 - 1;
        var v25834 = v26137[v26138];
        var v25144 = v25834.parameter;
        var v23487 = v25144.typeLink;
        var v20036 = v23487.type;
        var v14559 = v20036.elementType;
        var v5196 = !v14559;
        if (v5196) {
          var v5193 = this.errorReporter;
          var v23488 = signature$$4.parameters;
          var v23489 = len$$27 - 1;
          var v20037 = v23488[v23489];
          var v14560 = v20037.parameter;
          var v5194 = v14560.symbol;
          JAM.call(v5193.simpleErrorFromSym, v5193, [v5194, "... parameter must have array type"], JAM.policy.p1);
          var v23490 = signature$$4.parameters;
          var v23491 = len$$27 - 1;
          var v20038 = v23490[v23491];
          var v14561 = v20038.parameter;
          var v5195 = v14561.typeLink;
          var v25835 = signature$$4.parameters;
          var v25836 = len$$27 - 1;
          var v25145 = v25835[v25836];
          var v23492 = v25145.parameter;
          var v20039 = v23492.typeLink;
          var v14562 = v20039.type;
          var v26612 = JAM.call(this.makeArrayType, this, [v14562]);
          v5195.type = v26612;
        }
      }
      var v5198 = signature$$4.returnType;
      var v5199 = funcDecl$$19.isSignature();
      JAM.call(this.resolveTypeLink, this, [scope$$25, v5198, v5199], JAM.policy.p1);
      return functionGroupSymbol;
    }
    function v936(scope$$24, dotNode$$2) {
      function v935(id$$17) {
        return JAM.call(scope$$24.find, scope$$24, [id$$17, false, true], JAM.policy.p1);
      }
      var lhs = dotNode$$2.operand1;
      var rhs = dotNode$$2.operand2;
      var resultType = this.anyType;
      var lhsType = this.anyType;
      var v14563 = lhs && rhs;
      if (v14563) {
        var v20040 = rhs.nodeType;
        var v23493 = TypeScript$$23.NodeType;
        var v20041 = v23493.Name;
        v14563 = v20040 == v20041;
      }
      var v5228 = v14563;
      if (v5228) {
        var v14564 = lhs.nodeType;
        var v20042 = TypeScript$$23.NodeType;
        var v14565 = v20042.Dot;
        var v5219 = v14564 == v14565;
        if (v5219) {
          lhsType = JAM.call(this.resolveTypeMember, this, [scope$$24, lhs], JAM.policy.p1);
        } else {
          var v14566 = lhs.nodeType;
          var v20043 = TypeScript$$23.NodeType;
          var v14567 = v20043.Name;
          var v5218 = v14566 == v14567;
          if (v5218) {
            var identifier$$1 = lhs;
            var v5200 = identifier$$1.text;
            var symbol$$11 = JAM.call(scope$$24.find, scope$$24, [v5200, false, true], JAM.policy.p1);
            var v5217 = symbol$$11 == null;
            if (v5217) {
              var v5201 = this.errorReporter;
              var v5202 = identifier$$1.actualText;
              JAM.call(v5201.unresolvedSymbol, v5201, [identifier$$1, v5202], JAM.policy.p1);
            } else {
              var v5216 = symbol$$11.isType();
              if (v5216) {
                var typeSymbol$$1 = symbol$$11;
                var v20044 = typeSymbol$$1.aliasLink;
                if (v20044) {
                  var v23494 = typeSymbol$$1.type;
                  v20044 = !v23494;
                }
                var v14568 = v20044;
                if (v14568) {
                  var v25146 = typeSymbol$$1.aliasLink;
                  var v23495 = v25146.alias;
                  var v20045 = v23495.nodeType;
                  var v23496 = TypeScript$$23.NodeType;
                  var v20046 = v23496.Name;
                  v14568 = v20045 == v20046;
                }
                var v5206 = v14568;
                if (v5206) {
                  var v14569 = typeSymbol$$1.aliasLink;
                  var v5203 = v14569.alias;
                  var modPath$$2 = v5203.text;
                  var v14570 = this.locationInfo;
                  var v5204 = v14570.filename;
                  var modSym$$1 = JAM.call(this.findSymbolForDynamicModule, this, [modPath$$2, v5204, v935], JAM.policy.p1);
                  if (modSym$$1) {
                    var v5205 = typeSymbol$$1;
                    var v26613 = modSym$$1.getType();
                    v5205.type = v26613;
                  }
                }
                var v14571 = TypeScript$$23.optimizeModuleCodeGen;
                if (v14571) {
                  v14571 = symbol$$11;
                }
                var v5211 = v14571;
                if (v5211) {
                  var symType = symbol$$11.getType();
                  var v20047 = symType;
                  if (v20047) {
                    v20047 = typeSymbol$$1.aliasLink;
                  }
                  var v14572 = v20047;
                  if (v14572) {
                    v14572 = typeSymbol$$1.onlyReferencedAsTypeRef;
                  }
                  var v5210 = v14572;
                  if (v5210) {
                    var v5207 = symType.symbol;
                    var modDecl$$1 = v5207.declAST;
                    var v14573 = modDecl$$1;
                    if (v14573) {
                      var v20048 = modDecl$$1.modFlags;
                      var v23497 = TypeScript$$23.ModuleFlags;
                      var v20049 = v23497.IsDynamic;
                      v14573 = JAM.call(TypeScript$$23.hasFlag, TypeScript$$23, [v20048, v20049], JAM.policy.p1);
                    }
                    var v5209 = v14573;
                    if (v5209) {
                      var v5208 = this.resolvingBases;
                      typeSymbol$$1.onlyReferencedAsTypeRef = !v5208;
                    }
                  }
                }
                var v14574 = JAM.call(symbol$$11.visible, symbol$$11, [scope$$24, this], JAM.policy.p1);
                var v5214 = !v14574;
                if (v5214) {
                  var v5212 = this.errorReporter;
                  var v20050 = identifier$$1.actualText;
                  var v14575 = "The symbol '" + v20050;
                  var v5213 = v14575 + "' is not visible at this point";
                  JAM.call(v5212.simpleError, v5212, [lhs, v5213], JAM.policy.p1);
                }
                lhsType = symbol$$11.getType();
                identifier$$1.sym = symbol$$11;
              } else {
                var v5215 = this.errorReporter;
                JAM.call(v5215.simpleError, v5215, [lhs, "Expected type"], JAM.policy.p1);
              }
            }
          }
        }
        var v5220 = !lhsType;
        if (v5220) {
          lhsType = this.anyType;
        }
        var v14576 = this.anyType;
        var v5227 = lhsType != v14576;
        if (v5227) {
          var rhsIdentifier = rhs;
          var v5221 = rhsIdentifier.text;
          var resultSymbol = JAM.call(this.lookupMemberTypeSymbol, this, [lhsType, v5221], JAM.policy.p1);
          var v5226 = resultSymbol == null;
          if (v5226) {
            resultType = this.anyType;
            var v5222 = this.errorReporter;
            JAM.call(v5222.simpleError, v5222, [dotNode$$2, "Expected type"], JAM.policy.p1);
          } else {
            resultType = resultSymbol.getType();
            var v14577 = JAM.call(resultSymbol.visible, resultSymbol, [scope$$24, this], JAM.policy.p1);
            var v5225 = !v14577;
            if (v5225) {
              var v5223 = this.errorReporter;
              var v20051 = rhs.actualText;
              var v14578 = "The symbol '" + v20051;
              var v5224 = v14578 + "' is not visible at this point";
              JAM.call(v5223.simpleError, v5223, [lhs, v5224], JAM.policy.p1);
            }
          }
          rhsIdentifier.sym = resultType.symbol;
        }
      }
      var v5229 = resultType.isClass();
      if (v5229) {
        resultType = resultType.instanceType;
      }
      return resultType;
    }
    function v934(idText$$2, currentFileName, search) {
      var originalIdText = idText$$2;
      var symbol$$10 = JAM.call(search, null, [idText$$2]);
      var v5250 = symbol$$10 == null;
      if (v5250) {
        var v5230 = !symbol$$10;
        if (v5230) {
          idText$$2 = JAM.call(TypeScript$$23.swapQuotes, TypeScript$$23, [originalIdText]);
          symbol$$10 = JAM.call(search, null, [idText$$2]);
        }
        var v5232 = !symbol$$10;
        if (v5232) {
          var v5231 = JAM.call(TypeScript$$23.stripQuotes, TypeScript$$23, [originalIdText]);
          idText$$2 = v5231 + ".ts";
          symbol$$10 = JAM.call(search, null, [idText$$2]);
        }
        var v5234 = !symbol$$10;
        if (v5234) {
          var v5233 = JAM.call(TypeScript$$23.stripQuotes, TypeScript$$23, [originalIdText]);
          idText$$2 = v5233 + ".str";
          symbol$$10 = JAM.call(search, null, [idText$$2]);
        }
        var v5236 = !symbol$$10;
        if (v5236) {
          var v5235 = JAM.call(TypeScript$$23.stripQuotes, TypeScript$$23, [originalIdText]);
          idText$$2 = v5235 + ".d.ts";
          symbol$$10 = JAM.call(search, null, [idText$$2]);
        }
        var v5238 = !symbol$$10;
        if (v5238) {
          var v5237 = JAM.call(TypeScript$$23.stripQuotes, TypeScript$$23, [originalIdText]);
          idText$$2 = v5237 + ".d.str";
          symbol$$10 = JAM.call(search, null, [idText$$2]);
        }
        var v14579 = !symbol$$10;
        if (v14579) {
          var v20052 = JAM.call(TypeScript$$23.isRelative, TypeScript$$23, [originalIdText]);
          v14579 = !v20052;
        }
        var v5249 = v14579;
        if (v5249) {
          idText$$2 = originalIdText;
          var strippedIdText = JAM.call(TypeScript$$23.stripQuotes, TypeScript$$23, [idText$$2]);
          var v5239 = JAM.call(TypeScript$$23.switchToForwardSlashes, TypeScript$$23, [currentFileName]);
          var path$$7 = JAM.call(TypeScript$$23.getRootFilePath, TypeScript$$23, [v5239]);
          var v14580 = symbol$$10 == null;
          if (v14580) {
            v14580 = path$$7 != "";
          }
          var v5248 = v14580;
          for (;v5248;) {
            var v14581 = path$$7 + strippedIdText;
            var v5240 = v14581 + ".ts";
            idText$$2 = JAM.call(TypeScript$$23.normalizePath, TypeScript$$23, [v5240]);
            symbol$$10 = JAM.call(search, null, [idText$$2]);
            var v5241 = symbol$$10 == null;
            if (v5241) {
              idText$$2 = JAM.call(TypeScript$$23.changePathToSTR, TypeScript$$23, [idText$$2]);
              symbol$$10 = JAM.call(search, null, [idText$$2]);
            }
            var v5242 = symbol$$10 == null;
            if (v5242) {
              idText$$2 = JAM.call(TypeScript$$23.changePathToDTS, TypeScript$$23, [idText$$2]);
              symbol$$10 = JAM.call(search, null, [idText$$2]);
            }
            var v5243 = symbol$$10 == null;
            if (v5243) {
              idText$$2 = JAM.call(TypeScript$$23.changePathToDSTR, TypeScript$$23, [idText$$2]);
              symbol$$10 = JAM.call(search, null, [idText$$2]);
            }
            var v5247 = symbol$$10 == null;
            if (v5247) {
              var v5246 = path$$7 === "/";
              if (v5246) {
                path$$7 = "";
              } else {
                var v5244 = path$$7 + "..";
                path$$7 = JAM.call(TypeScript$$23.normalizePath, TypeScript$$23, [v5244]);
                var v5245;
                var v20053 = path$$7;
                if (v20053) {
                  v20053 = path$$7 != "/";
                }
                var v14582 = v20053;
                if (v14582) {
                  v5245 = path$$7 + "/";
                } else {
                  v5245 = path$$7;
                }
                path$$7 = v5245;
              }
            }
            var v14583 = symbol$$10 == null;
            if (v14583) {
              v14583 = path$$7 != "";
            }
            v5248 = v14583;
          }
        }
      }
      return symbol$$10;
    }
    function v933(containingType, name$$81) {
      var symbol$$9 = null;
      var v5256 = containingType.containedScope;
      if (v5256) {
        var v5251 = containingType.containedScope;
        symbol$$9 = JAM.call(v5251.find, v5251, [name$$81, false, true], JAM.policy.p1);
      } else {
        var v5255 = containingType.members;
        if (v5255) {
          var v14584 = containingType.members;
          var v5252 = v14584.allMembers;
          symbol$$9 = JAM.call(v5252.lookup, v5252, [name$$81]);
          var v14585 = symbol$$9 == null;
          if (v14585) {
            v14585 = containingType.ambientMembers;
          }
          var v5254 = v14585;
          if (v5254) {
            var v14586 = containingType.ambientMembers;
            var v5253 = v14586.allMembers;
            symbol$$9 = JAM.call(v5253.lookup, v5253, [name$$81]);
          }
        }
      }
      var v5260 = symbol$$9 == null;
      if (v5260) {
        var typeMembers$$1 = containingType.getAllEnclosedTypes();
        var ambientTypeMembers$$1 = containingType.getAllAmbientEnclosedTypes();
        if (typeMembers$$1) {
          var v5257 = typeMembers$$1.allMembers;
          symbol$$9 = JAM.call(v5257.lookup, v5257, [name$$81]);
          var v14587 = symbol$$9 == null;
          if (v14587) {
            v14587 = ambientTypeMembers$$1;
          }
          var v5259 = v14587;
          if (v5259) {
            var v5258 = ambientTypeMembers$$1.allMembers;
            symbol$$9 = JAM.call(v5258.lookup, v5258, [name$$81]);
          }
        }
      }
      var v14588 = symbol$$9;
      if (v14588) {
        v14588 = symbol$$9.isType();
      }
      var v5261 = v14588;
      if (v5261) {
        return symbol$$9;
      } else {
        return null;
      }
      return;
    }
    function v932(type$$42) {
      var v5262 = TypeScript$$23.SymbolAggregateScope;
      var v5263 = type$$42.symbol;
      var resultScope$$1 = JAM.new(v5262, [v5263]);
      var v14589;
      var v23498 = type$$42.symbol;
      if (v23498) {
        var v25147 = type$$42.symbol;
        v23498 = v25147.name;
      }
      var v20055 = v23498;
      if (v20055) {
        var v20054 = type$$42.symbol;
        v14589 = v20054.name;
      } else {
        v14589 = "{}";
      }
      var v5264 = v14589;
      var v5265 = type$$42.typeID;
      var baseContext$$1 = {base:v5264, baseId:v5265};
      JAM.call(this.addBases, this, [resultScope$$1, type$$42, baseContext$$1], JAM.policy.p1);
      return resultScope$$1;
    }
    function v931(resultScope, type$$41, baseContext) {
      var v14590 = TypeScript$$23.SymbolTableScope;
      var v14591 = type$$41.members;
      var v14592 = type$$41.ambientMembers;
      var v14593 = type$$41.getAllEnclosedTypes();
      var v14594 = type$$41.getAllAmbientEnclosedTypes();
      var v14595 = type$$41.symbol;
      var v5266 = JAM.new(v14590, [v14591, v14592, v14593, v14594, v14595]);
      JAM.call(resultScope.addParentScope, resultScope, [v5266]);
      var i$$76 = 0;
      var parent$$52;
      var v5275 = type$$41.extendsList;
      if (v5275) {
        var v5267 = type$$41.extendsList;
        var len$$26 = v5267.length;
        var v5274 = i$$76 < len$$26;
        for (;v5274;) {
          var v5268 = type$$41.extendsList;
          parent$$52 = v5268[i$$76];
          var v14596 = baseContext.baseId;
          var v14597 = parent$$52.typeID;
          var v5273 = v14596 == v14597;
          if (v5273) {
            var v5269 = this.errorReporter;
            var v5270 = parent$$52.symbol;
            var v20056 = baseContext.base;
            var v14598 = "Type '" + v20056;
            var v5271 = v14598 + "' is recursively referenced as a base class of itself";
            JAM.call(v5269.reportErrorFromSym, v5269, [v5270, v5271], JAM.policy.p1);
            var v5272 = parent$$52.symbol;
            var v20057 = v5272.flags;
            var v23499 = TypeScript$$23.SymbolFlags;
            var v20058 = v23499.RecursivelyReferenced;
            v5272.flags = v20057 | v20058;
            break;
          }
          JAM.call(this.addBases, this, [resultScope, parent$$52, baseContext], JAM.policy.p1);
          i$$76++;
          v5274 = i$$76 < len$$26;
        }
      }
      return;
    }
    function v930(funcDecl$$18, fgSym$$1, enclosingClass, addToMembers, isClassProperty, scope$$23, container$$13) {
      var accessorSym = null;
      var sig = funcDecl$$18.signature;
      var v5276 = funcDecl$$18.name;
      var nameText$$2 = v5276.text;
      var v5277 = funcDecl$$18.fncFlags;
      var v14599 = TypeScript$$23.FncFlags;
      var v5278 = v14599.Static;
      var isStatic$$7 = JAM.call(TypeScript$$23.hasFlag, TypeScript$$23, [v5277, v5278], JAM.policy.p1);
      var v5279 = funcDecl$$18.fncFlags;
      var v14600 = TypeScript$$23.FncFlags;
      var v5280 = v14600.Private;
      var isPrivate$$1 = JAM.call(TypeScript$$23.hasFlag, TypeScript$$23, [v5279, v5280], JAM.policy.p1);
      var v5307 = fgSym$$1 == null;
      if (v5307) {
        var v5281 = TypeScript$$23.ValueLocation;
        var field$$1 = new v5281;
        var v5282 = TypeScript$$23.FieldSymbol;
        var v5283 = funcDecl$$18.minChar;
        var v14601 = this.locationInfo;
        var v5284 = v14601.unitIndex;
        accessorSym = JAM.new(v5282, [nameText$$2, v5283, v5284, false, field$$1]);
        field$$1.symbol = accessorSym;
        accessorSym.declAST = funcDecl$$18;
        var v14602 = funcDecl$$18.fncFlags;
        var v20059 = TypeScript$$23.FncFlags;
        var v14603 = v20059.GetAccessor;
        var v5291 = JAM.call(TypeScript$$23.hasFlag, TypeScript$$23, [v14602, v14603], JAM.policy.p1);
        if (v5291) {
          var v5286 = accessorSym.getter;
          if (v5286) {
            var v5285 = this.errorReporter;
            JAM.call(v5285.simpleError, v5285, [funcDecl$$18, "Redeclaration of property getter"], JAM.policy.p1);
          }
          var v14604 = sig.declAST;
          var v5287 = v14604.type;
          accessorSym.getter = v5287.symbol;
        } else {
          var v5289 = accessorSym.setter;
          if (v5289) {
            var v5288 = this.errorReporter;
            JAM.call(v5288.simpleError, v5288, [funcDecl$$18, "Redeclaration of property setter"], JAM.policy.p1);
          }
          var v14605 = sig.declAST;
          var v5290 = v14605.type;
          accessorSym.setter = v5290.symbol;
        }
        var v26614 = JAM.call(TypeScript$$23.getTypeLink, TypeScript$$23, [null, this, false], JAM.policy.p1);
        field$$1.typeLink = v26614;
        if (addToMembers) {
          if (enclosingClass) {
            var v23500 = enclosingClass.members;
            var v20060 = v23500.publicMembers;
            var v14606 = JAM.call(v20060.add, v20060, [nameText$$2, accessorSym], JAM.policy.p1);
            var v5294 = !v14606;
            if (v5294) {
              var v5292 = this.errorReporter;
              var v5293 = accessorSym.name;
              JAM.call(v5292.duplicateIdentifier, v5292, [funcDecl$$18, v5293], JAM.policy.p1);
            }
            accessorSym.container = enclosingClass.symbol;
          } else {
            var v5295 = this.errorReporter;
            JAM.call(v5295.simpleError, v5295, [funcDecl$$18, "Accessor property may not be added in this context"], JAM.policy.p1);
          }
        } else {
          var v5296 = this.errorReporter;
          var v14607 = !isPrivate$$1;
          var v20061 = !v14607;
          if (v20061) {
            v14607 = isStatic$$7;
          }
          var v5297 = v14607;
          JAM.call(scope$$23.enter, scope$$23, [container$$13, funcDecl$$18, accessorSym, v5296, v5297, false, false], JAM.policy.p1);
        }
        if (isClassProperty) {
          var v14608 = accessorSym.flags;
          var v20062 = TypeScript$$23.SymbolFlags;
          var v14609 = v20062.Property;
          accessorSym.flags = v14608 | v14609;
        }
        if (isStatic$$7) {
          var v14610 = accessorSym.flags;
          var v20063 = TypeScript$$23.SymbolFlags;
          var v14611 = v20063.Static;
          accessorSym.flags = v14610 | v14611;
        }
        if (isPrivate$$1) {
          var v14612 = accessorSym.flags;
          var v20064 = TypeScript$$23.SymbolFlags;
          var v14613 = v20064.Private;
          accessorSym.flags = v14612 | v14613;
        } else {
          var v14614 = accessorSym.flags;
          var v20065 = TypeScript$$23.SymbolFlags;
          var v14615 = v20065.Public;
          accessorSym.flags = v14614 | v14615;
        }
      } else {
        accessorSym = fgSym$$1;
        var v20066 = accessorSym.flags;
        var v23501 = TypeScript$$23.SymbolFlags;
        var v20067 = v23501.Private;
        var v14616 = JAM.call(TypeScript$$23.hasFlag, TypeScript$$23, [v20066, v20067], JAM.policy.p1);
        var v5299 = isPrivate$$1 != v14616;
        if (v5299) {
          var v5298 = this.errorReporter;
          JAM.call(v5298.simpleError, v5298, [funcDecl$$18, "Getter and setter accessors do not agree in visibility"], JAM.policy.p1);
        }
        var v14617 = funcDecl$$18.fncFlags;
        var v20068 = TypeScript$$23.FncFlags;
        var v14618 = v20068.GetAccessor;
        var v5306 = JAM.call(TypeScript$$23.hasFlag, TypeScript$$23, [v14617, v14618], JAM.policy.p1);
        if (v5306) {
          var v5301 = accessorSym.getter;
          if (v5301) {
            var v5300 = this.errorReporter;
            JAM.call(v5300.simpleError, v5300, [funcDecl$$18, "Redeclaration of property getter"], JAM.policy.p1);
          }
          var v5302 = funcDecl$$18.type;
          accessorSym.getter = v5302.symbol;
        } else {
          var v5304 = accessorSym.setter;
          if (v5304) {
            var v5303 = this.errorReporter;
            JAM.call(v5303.simpleError, v5303, [funcDecl$$18, "Redeclaration of property setter"], JAM.policy.p1);
          }
          var v5305 = funcDecl$$18.type;
          accessorSym.setter = v5305.symbol;
        }
      }
      return accessorSym;
    }
    function v929(funcDecl$$17, container$$12, scope$$22, overloadGroupSym, addToScope) {
      var v14619 = funcDecl$$17.fncFlags;
      var v23502 = TypeScript$$23.FncFlags;
      var v20069 = v23502.Exported;
      var v23503 = TypeScript$$23.FncFlags;
      var v20070 = v23503.ClassPropertyMethodExported;
      var v14620 = v20069 | v20070;
      var v5308 = JAM.call(TypeScript$$23.hasFlag, TypeScript$$23, [v14619, v14620], JAM.policy.p1);
      var v14622 = !v5308;
      if (v14622) {
        var v14621 = this.gloMod;
        v5308 = container$$12 == v14621;
      }
      var isExported$$1 = v5308;
      var v5309 = funcDecl$$17.fncFlags;
      var v14623 = TypeScript$$23.FncFlags;
      var v5310 = v14623.Static;
      var isStatic$$6 = JAM.call(TypeScript$$23.hasFlag, TypeScript$$23, [v5309, v5310], JAM.policy.p1);
      var v5311 = funcDecl$$17.fncFlags;
      var v14624 = TypeScript$$23.FncFlags;
      var v5312 = v14624.Private;
      var isPrivate = JAM.call(TypeScript$$23.hasFlag, TypeScript$$23, [v5311, v5312], JAM.policy.p1);
      var v5313 = funcDecl$$17.fncFlags;
      var v14625 = TypeScript$$23.FncFlags;
      var v5314 = v14625.Definition;
      var isDefinition = JAM.call(TypeScript$$23.hasFlag, TypeScript$$23, [v5313, v5314], JAM.policy.p1);
      var v5315 = funcDecl$$17.fncFlags;
      var v14626 = TypeScript$$23.FncFlags;
      var v5316 = v14626.Ambient;
      var isAmbient$$4 = JAM.call(TypeScript$$23.hasFlag, TypeScript$$23, [v5315, v5316], JAM.policy.p1);
      var v5317 = funcDecl$$17.isConstructMember();
      var v14627 = !v5317;
      if (v14627) {
        v5317 = funcDecl$$17.isConstructor;
      }
      var isConstructor$$2 = v5317;
      var v5318 = this.gloMod;
      var isGlobal = container$$12 == v5318;
      var v5319 = TypeScript$$23.Signature;
      var signature$$3 = new v5319;
      var v5320 = funcDecl$$17.fncFlags;
      var v14628 = TypeScript$$23.FncFlags;
      var v5321 = v14628.IsFunctionExpression;
      var isLambda$$2 = v5320 & v5321;
      var v14629 = funcDecl$$17.returnTypeAnnotation;
      var v20071 = !v14629;
      if (v20071) {
        v14629 = isDefinition;
      }
      var v5325 = v14629;
      if (v5325) {
        var v5322 = funcDecl$$17.returnTypeAnnotation;
        var v26615 = JAM.call(TypeScript$$23.getTypeLink, TypeScript$$23, [v5322, this, false], JAM.policy.p1);
        signature$$3.returnType = v26615;
      } else {
        var v5323 = TypeScript$$23.TypeLink;
        var v26616 = new v5323;
        signature$$3.returnType = v26616;
        var v5324 = signature$$3.returnType;
        v5324.type = this.anyType;
      }
      signature$$3.hasVariableArgList = funcDecl$$17.variableArgList;
      var sigData = JAM.call(this.getParameterList, this, [funcDecl$$17, container$$12], JAM.policy.p1);
      signature$$3.parameters = sigData.parameters;
      signature$$3.nonOptionalParameterCount = sigData.nonOptionalParameterCount;
      funcDecl$$17.signature = signature$$3;
      signature$$3.declAST = funcDecl$$17;
      var v20072 = overloadGroupSym;
      if (v20072) {
        v20072 = overloadGroupSym.getType();
      }
      var v14630 = v20072;
      if (v14630) {
        var v20073 = overloadGroupSym.isAccessor();
        v14630 = !v20073;
      }
      var v5326 = v14630;
      if (v5326) {
        var v14631 = funcDecl$$17.isSignature();
        var v20075 = !v14631;
        if (v20075) {
          var v23504 = overloadGroupSym.flags;
          var v25148 = TypeScript$$23.SymbolFlags;
          var v23505 = v25148.Ambient;
          var v20074 = JAM.call(TypeScript$$23.hasFlag, TypeScript$$23, [v23504, v23505], JAM.policy.p1);
          v14631 = isAmbient$$4 == v20074;
        }
        v5326 = v14631;
      }
      var useOverloadGroupSym = v5326;
      var v14632 = useOverloadGroupSym;
      if (v14632) {
        var v23506 = overloadGroupSym.flags;
        var v25149 = TypeScript$$23.SymbolFlags;
        var v23507 = v25149.Private;
        var v20076 = JAM.call(TypeScript$$23.hasFlag, TypeScript$$23, [v23506, v23507], JAM.policy.p1);
        v14632 = isPrivate != v20076;
      }
      var v5328 = v14632;
      if (v5328) {
        var v5327 = this.errorReporter;
        JAM.call(v5327.simpleError, v5327, [funcDecl$$17, "Public/Private visibility of overloads does not agree"], JAM.policy.p1);
      }
      var v5329;
      if (useOverloadGroupSym) {
        v5329 = overloadGroupSym.getType();
      } else {
        var v14633 = TypeScript$$23.Type;
        v5329 = new v14633;
      }
      var groupType = v5329;
      if (isConstructor$$2) {
        var v14634 = groupType.construct;
        var v5331 = v14634 == null;
        if (v5331) {
          var v5330 = TypeScript$$23.SignatureGroup;
          var v26617 = new v5330;
          groupType.construct = v26617;
        }
        var v5332 = groupType.construct;
        JAM.call(v5332.addSignature, v5332, [signature$$3]);
        var v5333 = groupType.construct;
        var v14635 = funcDecl$$17.isSignature();
        v5333.hasImplementation = !v14635;
        var v14636 = groupType.construct;
        var v5334 = v14636.hasImplementation;
        if (v5334) {
          groupType.setHasImplementation();
        }
      } else {
        var v5346 = funcDecl$$17.isIndexerMember();
        if (v5346) {
          var v14637 = groupType.index;
          var v5337 = v14637 == null;
          if (v5337) {
            var v5335 = TypeScript$$23.SignatureGroup;
            var v26618 = new v5335;
            groupType.index = v26618;
            var v5336 = groupType.index;
            var v20077 = v5336.flags;
            var v23508 = TypeScript$$23.SignatureFlags;
            var v20078 = v23508.IsIndexer;
            v5336.flags = v20077 | v20078;
          }
          var v5338 = groupType.index;
          JAM.call(v5338.addSignature, v5338, [signature$$3]);
          var v5339 = groupType.index;
          var v14638 = funcDecl$$17.isSignature();
          v5339.hasImplementation = !v14638;
          var v14639 = groupType.index;
          var v5340 = v14639.hasImplementation;
          if (v5340) {
            groupType.setHasImplementation();
          }
        } else {
          var v14640 = groupType.call;
          var v5342 = v14640 == null;
          if (v5342) {
            var v5341 = TypeScript$$23.SignatureGroup;
            var v26619 = new v5341;
            groupType.call = v26619;
          }
          var v5343 = groupType.call;
          JAM.call(v5343.addSignature, v5343, [signature$$3]);
          var v5344 = groupType.call;
          var v14641 = funcDecl$$17.isSignature();
          v5344.hasImplementation = !v14641;
          var v14642 = groupType.call;
          var v5345 = v14642.hasImplementation;
          if (v5345) {
            groupType.setHasImplementation();
          }
        }
      }
      var instanceType$$3 = groupType.instanceType;
      var funcName$$1 = null;
      var usedHint = false;
      var v14643 = funcDecl$$17.name;
      if (v14643) {
        var v23509 = funcDecl$$17.name;
        var v20079 = v23509.isMissing();
        v14643 = !v20079;
      }
      var v5349 = v14643;
      if (v5349) {
        var v5347 = funcDecl$$17.name;
        funcName$$1 = v5347.text;
      } else {
        var v5348 = funcDecl$$17.hint;
        if (v5348) {
          funcName$$1 = funcDecl$$17.hint;
          usedHint = true;
        }
      }
      var v14644 = groupType.symbol;
      var v5357 = v14644 == null;
      if (v5357) {
        var v5350 = TypeScript$$23.TypeSymbol;
        var v14645;
        if (funcName$$1) {
          v14645 = funcName$$1;
        } else {
          v14645 = this.anon;
        }
        var v5351 = v14645;
        var v5352 = funcDecl$$17.minChar;
        var v14646 = funcDecl$$17.limChar;
        var v14647 = funcDecl$$17.minChar;
        var v5353 = v14646 - v14647;
        var v14648 = this.locationInfo;
        var v5354 = v14648.unitIndex;
        var v26620 = JAM.new(v5350, [v5351, v5352, v5353, v5354, groupType]);
        groupType.symbol = v26620;
        var v5356 = !useOverloadGroupSym;
        if (v5356) {
          var v5355 = groupType.symbol;
          v5355.declAST = funcDecl$$17;
        }
      }
      if (isStatic$$6) {
        var v5358 = groupType.symbol;
        var v20080 = v5358.flags;
        var v23510 = TypeScript$$23.SymbolFlags;
        var v20081 = v23510.Static;
        v5358.flags = v20080 | v20081;
      }
      if (isAmbient$$4) {
        var v5359 = groupType.symbol;
        var v20082 = v5359.flags;
        var v23511 = TypeScript$$23.SymbolFlags;
        var v20083 = v23511.Ambient;
        v5359.flags = v20082 | v20083;
      }
      if (isPrivate) {
        var v5360 = groupType.symbol;
        var v20084 = v5360.flags;
        var v23512 = TypeScript$$23.SymbolFlags;
        var v20085 = v23512.Private;
        v5360.flags = v20084 | v20085;
      }
      var v5361 = groupType.symbol;
      var v26621 = funcDecl$$17.isMethod();
      v5361.isMethod = v26621;
      var v14649 = groupType.symbol;
      var v5363 = v14649.isMethod;
      if (v5363) {
        var v5362 = groupType.symbol;
        var v20086 = v5362.flags;
        var v23513 = TypeScript$$23.SymbolFlags;
        var v20087 = v23513.Property;
        v5362.flags = v20086 | v20087;
      }
      funcDecl$$17.type = groupType;
      var v5377 = !isConstructor$$2;
      if (v5377) {
        var v23514 = funcName$$1;
        if (v23514) {
          v23514 = !isLambda$$2;
        }
        var v20088 = v23514;
        if (v20088) {
          var v23515 = funcDecl$$17.isAccessor();
          v20088 = !v23515;
        }
        var v14650 = v20088;
        if (v14650) {
          v14650 = !usedHint;
        }
        var v5376 = v14650;
        if (v5376) {
          if (addToScope) {
            var v14651 = funcDecl$$17.isMethod();
            if (v14651) {
              v14651 = isStatic$$6;
            }
            var v5371 = v14651;
            if (v5371) {
              var v25150 = container$$12.type;
              var v23516 = v25150.members;
              var v20089 = v23516.publicMembers;
              var v20090 = groupType.symbol;
              var v14652 = JAM.call(v20089.add, v20089, [funcName$$1, v20090], JAM.policy.p1);
              var v5365 = !v14652;
              if (v5365) {
                var v5364 = this.errorReporter;
                JAM.call(v5364.duplicateIdentifier, v5364, [funcDecl$$17, funcName$$1], JAM.policy.p1);
              }
              var v5366 = groupType.symbol;
              v5366.container = container$$12;
            } else {
              var v14653 = overloadGroupSym == null;
              var v20092 = !v14653;
              if (v20092) {
                var v23517 = overloadGroupSym.declAST;
                if (v23517) {
                  var v25837 = overloadGroupSym.declAST;
                  var v25151 = v25837.isOverload;
                  v23517 = !v25151;
                }
                var v20091 = v23517;
                if (v20091) {
                  v20091 = container$$12.isType();
                }
                v14653 = v20091;
              }
              var v5370 = v14653;
              if (v5370) {
                var v5367 = groupType.symbol;
                var v5368 = this.errorReporter;
                var v14654 = !isPrivate;
                if (v14654) {
                  var v20093 = isExported$$1 || isStatic$$6;
                  var v23518 = !v20093;
                  if (v23518) {
                    v20093 = isGlobal;
                  }
                  v14654 = v20093;
                }
                var v5369 = v14654;
                JAM.call(scope$$22.enter, scope$$22, [container$$12, funcDecl$$17, v5367, v5368, v5369, false, isAmbient$$4], JAM.policy.p1);
              }
            }
          } else {
            var v14655 = funcDecl$$17.isSpecialFn();
            var v5373 = !v14655;
            if (v5373) {
              var v5372 = groupType.symbol;
              v5372.container = container$$12;
            }
          }
        } else {
          var v14656 = funcDecl$$17.isSpecialFn();
          var v5375 = !v14656;
          if (v5375) {
            var v5374 = groupType.symbol;
            v5374.container = container$$12;
          }
        }
      }
      if (useOverloadGroupSym) {
        var v5378;
        if (overloadGroupSym) {
          v5378 = overloadGroupSym.getType();
        } else {
          v5378 = null;
        }
        var overloadGroupType = v5378;
        var classType$$3 = groupType;
        var v5399 = classType$$3 != overloadGroupType;
        if (v5399) {
          var v14657 = classType$$3.construct;
          var v5384 = v14657 == null;
          if (v5384) {
            var v14658 = overloadGroupType;
            if (v14658) {
              v14658 = overloadGroupType.construct;
            }
            var v5380 = v14658;
            if (v5380) {
              classType$$3.construct = overloadGroupType.construct;
            } else {
              var v5379 = TypeScript$$23.SignatureGroup;
              var v26622 = new v5379;
              classType$$3.construct = v26622;
            }
          } else {
            if (overloadGroupType) {
              var v5383 = overloadGroupType.construct;
              if (v5383) {
                var v14659 = classType$$3.construct;
                var v5381 = v14659.signatures;
                var v14660 = overloadGroupType.construct;
                var v5382 = v14660.signatures;
                v5381.concat(v5382);
              }
            }
          }
          if (overloadGroupType) {
            var v14661 = classType$$3.call;
            var v5388 = v14661 == null;
            if (v5388) {
              classType$$3.call = overloadGroupType.call;
            } else {
              var v5387 = overloadGroupType.call;
              if (v5387) {
                var v14662 = classType$$3.call;
                var v5385 = v14662.signatures;
                var v14663 = overloadGroupType.call;
                var v5386 = v14663.signatures;
                v5385.concat(v5386);
              }
            }
            var v5394 = !isStatic$$6;
            if (v5394) {
              var v14664 = classType$$3.instanceType;
              var v5389 = v14664 == null;
              if (v5389) {
                classType$$3.instanceType = overloadGroupType.instanceType;
              }
              instanceType$$3 = classType$$3.instanceType;
              if (instanceType$$3) {
                var v14665 = instanceType$$3.call;
                var v5393 = v14665 == null;
                if (v5393) {
                  instanceType$$3.call = overloadGroupType.call;
                } else {
                  var v5392 = overloadGroupType.call;
                  if (v5392) {
                    var v14666 = instanceType$$3.call;
                    var v5390 = v14666.signatures;
                    var v14667 = overloadGroupType.call;
                    var v5391 = v14667.signatures;
                    v5390.concat(v5391);
                  }
                }
              }
            }
            var v14668 = classType$$3.index;
            var v5398 = v14668 == null;
            if (v5398) {
              classType$$3.index = overloadGroupType.index;
            } else {
              var v5397 = overloadGroupType.index;
              if (v5397) {
                var v14669 = classType$$3.index;
                var v5395 = v14669.signatures;
                var v14670 = overloadGroupType.index;
                var v5396 = v14670.signatures;
                v5395.concat(v5396);
              }
            }
          }
        }
      }
      return signature$$3;
    }
    function v928(funcDecl$$16, container$$11) {
      var args$$11 = funcDecl$$16.arguments;
      var parameterTable = null;
      var parameterBuilder = null;
      var v5400 = args$$11.members;
      var len$$25 = v5400.length;
      var nonOptionalParams = 0;
      var result$$27 = [];
      var v5416 = len$$25 > 0;
      if (v5416) {
        var v5401 = TypeScript$$23.ScopedMembers;
        var v14671 = TypeScript$$23.DualStringHashTable;
        var v20094 = TypeScript$$23.StringHashTable;
        var v14672 = new v20094;
        var v20095 = TypeScript$$23.StringHashTable;
        var v14673 = new v20095;
        var v5402 = JAM.new(v14671, [v14672, v14673]);
        parameterTable = JAM.new(v5401, [v5402]);
        var v5403 = TypeScript$$23.SymbolScopeBuilder;
        parameterBuilder = JAM.new(v5403, [parameterTable, null, null, null, null, container$$11]);
        var i$$75 = 0;
        var v5415 = i$$75 < len$$25;
        for (;v5415;) {
          var v5404 = args$$11.members;
          var parameter$$1 = v5404[i$$75];
          var v5405 = TypeScript$$23.ValueLocation;
          var paramDef$$2 = new v5405;
          var v5406 = TypeScript$$23.ParameterSymbol;
          var v14674 = parameter$$1.id;
          var v5407 = v14674.text;
          var v5408 = parameter$$1.minChar;
          var v14675 = this.locationInfo;
          var v5409 = v14675.unitIndex;
          var parameterSymbol = JAM.new(v5406, [v5407, v5408, v5409, paramDef$$2]);
          parameterSymbol.declAST = parameter$$1;
          parameterSymbol.funcDecl = funcDecl$$16;
          var v5410 = parameter$$1.id;
          v5410.sym = parameterSymbol;
          parameter$$1.sym = parameterSymbol;
          paramDef$$2.symbol = parameterSymbol;
          var v5411 = parameter$$1.typeExpr;
          var v26623 = JAM.call(TypeScript$$23.getTypeLink, TypeScript$$23, [v5411, this, false], JAM.policy.p1);
          paramDef$$2.typeLink = v26623;
          var v5412 = this.errorReporter;
          JAM.call(parameterBuilder.enter, parameterBuilder, [null, parameter$$1, parameterSymbol, v5412, true, false, false], JAM.policy.p1);
          var v5413 = result$$27.length;
          result$$27[v5413] = parameterSymbol;
          var v14676 = parameter$$1.isOptionalArg();
          var v5414 = !v14676;
          if (v5414) {
            nonOptionalParams++;
          }
          i$$75++;
          v5415 = i$$75 < len$$25;
        }
      }
      return {parameters:result$$27, nonOptionalParameterCount:nonOptionalParams};
    }
    function v927(type$$40) {
      var v14677 = type$$40.arrayCache;
      var v5420 = v14677 == null;
      if (v5420) {
        var v26624 = new ArrayCache;
        type$$40.arrayCache = v26624;
        var v5417 = type$$40.arrayCache;
        var v14678 = TypeScript$$23.Type;
        var v26625 = new v14678;
        v5417.arrayType = v26625;
        var v14679 = type$$40.arrayCache;
        var v5418 = v14679.arrayType;
        v5418.elementType = type$$40;
        var v14680 = type$$40.arrayCache;
        var v5419 = v14680.arrayType;
        v5419.symbol = type$$40.symbol;
      }
      var v5421 = type$$40.arrayCache;
      return v5421.arrayType;
    }
    function v926(ast$$63) {
      var v14681 = ast$$63.nodeType;
      var v20096 = TypeScript$$23.NodeType;
      var v14682 = v20096.Script;
      var v5422 = v14681 == v14682;
      if (v5422) {
        var script$$14 = ast$$63;
        this.locationInfo = script$$14.locationInfo;
      }
      var v5423 = TypeScript$$23.ScopeChain;
      var v5424 = this.gloMod;
      var v5425 = this.globalScope;
      var globalChain = JAM.new(v5423, [v5424, null, v5425]);
      var v5426 = TypeScript$$23.TypeCollectionContext;
      var context$$49 = JAM.new(v5426, [globalChain, this]);
      var v5427 = TypeScript$$23.getAstWalkerFactory();
      var v5428 = TypeScript$$23.preCollectTypes;
      var v5429 = TypeScript$$23.postCollectTypes;
      JAM.call(v5427.walk, v5427, [ast$$63, v5428, v5429, null, context$$49], JAM.policy.p1);
      return;
    }
    function v925() {
      var i$$74 = 0;
      var v20097 = this.provisionalStartedTypecheckObjects;
      var v14683 = v20097.length;
      var v5432 = i$$74 < v14683;
      for (;v5432;) {
        var v23519 = this.provisionalStartedTypecheckObjects;
        var v20098 = v23519[i$$74];
        var v14684 = v20098.typeCheckStatus;
        var v20099 = this.typingContextStack;
        var v14685 = v20099.getContextID();
        var v5431 = v14684 >= v14685;
        if (v5431) {
          var v14686 = this.provisionalStartedTypecheckObjects;
          var v5430 = v14686[i$$74];
          var v14687 = TypeScript$$23.TypeCheckStatus;
          v5430.typeCheckStatus = v14687.NotStarted;
        }
        i$$74++;
        var v20100 = this.provisionalStartedTypecheckObjects;
        var v14688 = v20100.length;
        v5432 = i$$74 < v14688;
      }
      this.provisionalStartedTypecheckObjects = [];
      return;
    }
    function v924(pto) {
      var v5435 = this.inProvisionalTypecheckMode();
      if (v5435) {
        var v5433 = this.provisionalStartedTypecheckObjects;
        var v14689 = this.provisionalStartedTypecheckObjects;
        var v5434 = v14689.length;
        JAM.set(v5433, v5434, pto);
      }
      return;
    }
    function v923(status) {
      var v20101 = TypeScript$$23.TypeCheckStatus;
      var v14690 = v20101.Finished;
      var v5436 = status == v14690;
      var v14692 = !v5436;
      if (v14692) {
        var v14691 = this.inProvisionalTypecheckMode();
        if (v14691) {
          var v23520 = this.typingContextStack;
          var v20102 = v23520.getContextID();
          v14691 = status == v20102;
        }
        v5436 = v14691;
      }
      return v5436;
    }
    function v922() {
      var v5438 = this.inProvisionalTypecheckMode();
      if (v5438) {
        var v5437 = this.typingContextStack;
        return v5437.getContextID();
      }
      var v5439 = TypeScript$$23.TypeCheckStatus;
      return v5439.Finished;
    }
    function v921() {
      var v5440 = this.typingContextStack;
      return v5440.isProvisional();
    }
    function v920() {
      return this.currentContextualTypeContext;
    }
    function v919() {
      var v5441 = this.currentContextualTypeContext;
      if (v5441) {
        var v14693 = this.currentContextualTypeContext;
        v5441 = v14693.contextualType;
      }
      return v5441;
    }
    function v918() {
      this.currentContextualTypeContext = null;
      var v5442 = this.errorReporter;
      v5442.pushToErrorSink = false;
      return;
    }
    function v917() {
      var v5443 = this.typingContextStack;
      var v26626 = v5443.getContextualType();
      this.currentContextualTypeContext = v26626;
      return;
    }
    function v916(contextType, provisional$$3, condition, ast$$62) {
      if (condition) {
        var v20103 = this.typingContextStack;
        var v14694 = v20103.isProvisional();
        var v20104 = !v14694;
        if (v20104) {
          v14694 = provisional$$3;
        }
        var v5444 = v14694;
        JAM.call(this.setContextualType, this, [contextType, v5444], JAM.policy.p1);
      }
      var v5445 = this.typeFlow;
      JAM.call(v5445.typeCheck, v5445, [ast$$62]);
      if (condition) {
        this.unsetContextualType();
      }
      return;
    }
    function v915() {
      var v20105 = this.typingContextStack;
      var v14695 = v20105.getContextualType();
      var v5447 = !v14695;
      if (v5447) {
        var v5446 = this.typingContextStack;
        v5446.hadProvisionalErrors = false;
      }
      return;
    }
    function v914() {
      var v5448 = this.typingContextStack;
      return v5448.hadProvisionalErrors;
    }
    function v913() {
      var v5449 = this.typingContextStack;
      var lastTC = v5449.popContextualType();
      var v5450 = this.typingContextStack;
      var v26627 = v5450.getContextualType();
      this.currentContextualTypeContext = v26627;
      return;
    }
    function v912(type$$39, provisional$$2) {
      var v5451 = this.typingContextStack;
      JAM.call(v5451.pushContextualType, v5451, [type$$39, provisional$$2], JAM.policy.p1);
      var v5452 = this.typingContextStack;
      var v26628 = v5452.getContextualType();
      this.currentContextualTypeContext = v26628;
      return;
    }
    function v911(style) {
      this.styleSettings = style;
      return;
    }
    function TypeChecker$$1(persistentState) {
      this.persistentState = persistentState;
      this.errorReporter = null;
      this.checkControlFlow = false;
      this.printControlFlowGraph = false;
      this.checkControlFlowUseDef = false;
      this.styleSettings = null;
      this.units = null;
      this.anon = "_anonymous";
      this.locationInfo = null;
      this.typeFlow = null;
      this.currentCompareA = null;
      this.currentCompareB = null;
      this.currentModDecl = null;
      this.inBind = false;
      this.inWith = false;
      this.errorsOnWith = true;
      this.currentContextualTypeContext = null;
      this.resolvingBases = false;
      this.canCallDefinitionSignature = false;
      this.assignableCache = {};
      this.subtypeCache = {};
      this.identicalCache = {};
      this.provisionalStartedTypecheckObjects = [];
      this.mustCaptureGlobalThis = false;
      var v5453 = this.persistentState;
      this.voidType = v5453.voidType;
      var v5454 = this.persistentState;
      this.booleanType = v5454.booleanType;
      var v5455 = this.persistentState;
      this.numberType = v5455.doubleType;
      var v5456 = this.persistentState;
      this.stringType = v5456.stringType;
      var v5457 = this.persistentState;
      this.anyType = v5457.anyType;
      var v5458 = this.persistentState;
      this.nullType = v5458.nullType;
      var v5459 = this.persistentState;
      this.undefinedType = v5459.undefinedType;
      var v5460 = this.persistentState;
      this.globals = v5460.dualGlobalValues;
      var v5461 = this.persistentState;
      this.globalTypes = v5461.dualGlobalTypes;
      var v5462 = this.persistentState;
      this.ambientGlobals = v5462.dualAmbientGlobalValues;
      var v5463 = this.persistentState;
      this.ambientGlobalTypes = v5463.dualAmbientGlobalTypes;
      var v5464 = this.persistentState;
      this.gloModType = v5464.mod;
      var v5465 = this.persistentState;
      this.gloMod = v5465.gloMod;
      var v5466 = this.persistentState;
      this.wildElm = v5466.wildElm;
      var v5467 = this.persistentState;
      this.globalScope = v5467.globalScope;
      var v26629 = JAM.new(ContextualTypingContextStack, [this]);
      this.typingContextStack = v26629;
      return;
    }
    var v5468 = TypeChecker$$1.prototype;
    v5468.setStyleOptions = v911;
    var v5469 = TypeChecker$$1.prototype;
    v5469.setContextualType = v912;
    var v5470 = TypeChecker$$1.prototype;
    v5470.unsetContextualType = v913;
    var v5471 = TypeChecker$$1.prototype;
    v5471.hadProvisionalErrors = v914;
    var v5472 = TypeChecker$$1.prototype;
    v5472.resetProvisionalErrors = v915;
    var v5473 = TypeChecker$$1.prototype;
    v5473.typeCheckWithContextualType = v916;
    var v5474 = TypeChecker$$1.prototype;
    v5474.resetTargetType = v917;
    var v5475 = TypeChecker$$1.prototype;
    v5475.killCurrentContextualType = v918;
    var v5476 = TypeChecker$$1.prototype;
    v5476.hasTargetType = v919;
    var v5477 = TypeChecker$$1.prototype;
    v5477.getTargetTypeContext = v920;
    var v5478 = TypeChecker$$1.prototype;
    v5478.inProvisionalTypecheckMode = v921;
    var v5479 = TypeChecker$$1.prototype;
    v5479.getTypeCheckFinishedStatus = v922;
    var v5480 = TypeChecker$$1.prototype;
    v5480.typeStatusIsFinished = v923;
    var v5481 = TypeChecker$$1.prototype;
    v5481.addStartedPTO = v924;
    var v5482 = TypeChecker$$1.prototype;
    v5482.cleanStartedPTO = v925;
    var v5483 = TypeChecker$$1.prototype;
    v5483.collectTypes = v926;
    var v5484 = TypeChecker$$1.prototype;
    v5484.makeArrayType = v927;
    var v5485 = TypeChecker$$1.prototype;
    v5485.getParameterList = v928;
    var v5486 = TypeChecker$$1.prototype;
    v5486.createFunctionSignature = v929;
    var v5487 = TypeChecker$$1.prototype;
    v5487.createAccessorSymbol = v930;
    var v5488 = TypeChecker$$1.prototype;
    v5488.addBases = v931;
    var v5489 = TypeChecker$$1.prototype;
    v5489.scopeOf = v932;
    var v5490 = TypeChecker$$1.prototype;
    v5490.lookupMemberTypeSymbol = v933;
    var v5491 = TypeChecker$$1.prototype;
    v5491.findSymbolForDynamicModule = v934;
    var v5492 = TypeChecker$$1.prototype;
    v5492.resolveTypeMember = v936;
    var v5493 = TypeChecker$$1.prototype;
    v5493.resolveFuncDecl = v937;
    var v5494 = TypeChecker$$1.prototype;
    v5494.resolveVarDecl = v938;
    var v5495 = TypeChecker$$1.prototype;
    v5495.resolveTypeLink = v939;
    var v5496 = TypeChecker$$1.prototype;
    v5496.resolveBaseTypeLink = v940;
    var v5497 = TypeChecker$$1.prototype;
    v5497.findMostApplicableSignature = v944;
    var v5498 = TypeChecker$$1.prototype;
    v5498.getApplicableSignatures = v945;
    var v5499 = TypeChecker$$1.prototype;
    v5499.canContextuallyTypeFunction = v946;
    var v5500 = TypeChecker$$1.prototype;
    v5500.canContextuallyTypeObjectLiteral = v947;
    var v5501 = TypeChecker$$1.prototype;
    v5501.widenType = v948;
    var v5502 = TypeChecker$$1.prototype;
    v5502.isNullOrUndefinedType = v949;
    var v5503 = TypeChecker$$1.prototype;
    v5503.findBestCommonType = v950;
    var v5504 = TypeChecker$$1.prototype;
    v5504.typesAreIdentical = v951;
    var v5505 = TypeChecker$$1.prototype;
    v5505.signatureGroupsAreIdentical = v952;
    var v5506 = TypeChecker$$1.prototype;
    v5506.signaturesAreIdentical = v953;
    var v5507 = TypeChecker$$1.prototype;
    v5507.sourceIsSubtypeOfTarget = v954;
    var v5508 = TypeChecker$$1.prototype;
    v5508.signatureGroupIsSubtypeOfTarget = v955;
    var v5509 = TypeChecker$$1.prototype;
    v5509.signatureIsSubtypeOfTarget = v956;
    var v5510 = TypeChecker$$1.prototype;
    v5510.sourceIsAssignableToTarget = v957;
    var v5511 = TypeChecker$$1.prototype;
    v5511.signatureGroupIsAssignableToTarget = v958;
    var v5512 = TypeChecker$$1.prototype;
    v5512.signatureIsAssignableToTarget = v959;
    var v5513 = TypeChecker$$1.prototype;
    v5513.sourceIsRelatableToTarget = v960;
    var v5514 = TypeChecker$$1.prototype;
    v5514.signatureGroupIsRelatableToTarget = v961;
    var v5515 = TypeChecker$$1.prototype;
    v5515.signatureIsRelatableToTarget = v962;
    return TypeChecker$$1;
  }
  function v910() {
    function v909() {
      var v5516;
      var v23521 = this.contextStack;
      var v20106 = v23521.length;
      var v14697 = !v20106;
      if (v14697) {
        v5516 = false;
      } else {
        var v20107 = this.contextStack;
        var v25152 = this.contextStack;
        var v23522 = v25152.length;
        var v20108 = v23522 - 1;
        var v14696 = v20107[v20108];
        v5516 = v14696.provisional;
      }
      return v5516;
    }
    function v908() {
      var v5517;
      var v23523 = this.contextStack;
      var v20109 = v23523.length;
      var v14700 = !v20109;
      if (v14700) {
        var v14698 = TypeScript$$23.TypeCheckStatus;
        v5517 = v14698.Finished;
      } else {
        var v20110 = this.contextStack;
        var v25153 = this.contextStack;
        var v23524 = v25153.length;
        var v20111 = v23524 - 1;
        var v14699 = v20110[v20111];
        v5517 = v14699.contextID;
      }
      return v5517;
    }
    function v907() {
      var v5518;
      var v23525 = this.contextStack;
      var v20112 = v23525.length;
      var v14703 = !v20112;
      if (v14703) {
        v5518 = null;
      } else {
        var v14701 = this.contextStack;
        var v23526 = this.contextStack;
        var v20113 = v23526.length;
        var v14702 = v20113 - 1;
        v5518 = v14701[v14702];
      }
      return v5518;
    }
    function v906() {
      var v5519 = this.contextStack;
      var tc$$2 = v5519.pop();
      var v14704 = this.checker;
      var v5520 = v14704.errorReporter;
      var v26630 = this.isProvisional();
      v5520.pushToErrorSink = v26630;
      var v5521 = this.hadProvisionalErrors;
      var v14706 = !v5521;
      if (v14706) {
        var v14705 = tc$$2.provisional;
        if (v14705) {
          var v25154 = this.checker;
          var v23527 = v25154.errorReporter;
          var v20114 = v23527.errorSink;
          v14705 = v20114.length;
        }
        v5521 = v14705;
      }
      this.hadProvisionalErrors = v5521;
      var v14707 = this.checker;
      var v5522 = v14707.errorReporter;
      v5522.freeCapturedErrors();
      return tc$$2;
    }
    function v905(type$$38, provisional$$1) {
      var v5523 = this.contextStack;
      var v14708 = ContextualTypingContextStack$$1.contextID;
      var v23528 = ContextualTypingContextStack$$1.contextID;
      ContextualTypingContextStack$$1.contextID = v23528 + 1;
      var v5524 = JAM.new(ContextualTypeContext, [type$$38, provisional$$1, v14708]);
      JAM.call(v5523.push, v5523, [v5524]);
      var v14709 = this.checker;
      var v5525 = v14709.errorReporter;
      v5525.pushToErrorSink = provisional$$1;
      return;
    }
    function ContextualTypingContextStack$$1(checker$$16) {
      this.checker = checker$$16;
      this.contextStack = [];
      this.hadProvisionalErrors = false;
      return;
    }
    var v14710 = TypeScript$$23.TypeCheckStatus;
    var v5526 = v14710.Finished;
    ContextualTypingContextStack$$1.contextID = v5526 + 1;
    var v5527 = ContextualTypingContextStack$$1.prototype;
    v5527.pushContextualType = v905;
    var v5528 = ContextualTypingContextStack$$1.prototype;
    v5528.popContextualType = v906;
    var v5529 = ContextualTypingContextStack$$1.prototype;
    v5529.getContextualType = v907;
    var v5530 = ContextualTypingContextStack$$1.prototype;
    v5530.getContextID = v908;
    var v5531 = ContextualTypingContextStack$$1.prototype;
    v5531.isProvisional = v909;
    return ContextualTypingContextStack$$1;
  }
  function v904() {
    function ContextualTypeContext$$1(contextualType, provisional, contextID) {
      this.contextualType = contextualType;
      this.provisional = provisional;
      this.contextID = contextID;
      this.targetSig = null;
      this.targetThis = null;
      this.targetAccessorType = null;
      return;
    }
    return ContextualTypeContext$$1;
  }
  function v903() {
    function v902(type$$37) {
      var name$$80 = "undefined";
      var v5532 = TypeScript$$23.ValueLocation;
      var valueLocation = new v5532;
      var v5533 = TypeScript$$23.TypeLink;
      var v26631 = new v5533;
      valueLocation.typeLink = v26631;
      var v5534 = TypeScript$$23.VariableSymbol;
      var sym$$28 = JAM.new(v5534, [name$$80, 0, -1, valueLocation]);
      JAM.call(sym$$28.setType, sym$$28, [type$$37]);
      var v5535 = TypeScript$$23.TypeCheckStatus;
      sym$$28.typeCheckStatus = v5535.Finished;
      sym$$28.container = this.gloMod;
      var v5536 = this.importedGlobalsTable;
      JAM.call(v5536.addPublicMember, v5536, [name$$80, sym$$28], JAM.policy.p1);
      return;
    }
    function v901() {
      var v5537 = TypeScript$$23.StringHashTable;
      var v26632 = new v5537;
      this.globals = v26632;
      var v5538 = TypeScript$$23.StringHashTable;
      var v26633 = new v5538;
      this.globalTypes = v26633;
      var v5539 = TypeScript$$23.StringHashTable;
      var v26634 = new v5539;
      this.ambientGlobals = v26634;
      var v5540 = TypeScript$$23.StringHashTable;
      var v26635 = new v5540;
      this.ambientGlobalTypes = v26635;
      var v5541 = this.globalTypes;
      var v20115 = this.voidType;
      var v14711 = v20115.symbol;
      var v5542 = v14711.name;
      var v14712 = this.voidType;
      var v5543 = v14712.symbol;
      JAM.call(v5541.add, v5541, [v5542, v5543], JAM.policy.p1);
      var v5544 = this.globalTypes;
      var v20116 = this.booleanType;
      var v14713 = v20116.symbol;
      var v5545 = v14713.name;
      var v14714 = this.booleanType;
      var v5546 = v14714.symbol;
      JAM.call(v5544.add, v5544, [v5545, v5546], JAM.policy.p1);
      var v5547 = this.globalTypes;
      var v20117 = this.doubleType;
      var v14715 = v20117.symbol;
      var v5548 = v14715.name;
      var v14716 = this.doubleType;
      var v5549 = v14716.symbol;
      JAM.call(v5547.add, v5547, [v5548, v5549], JAM.policy.p1);
      var v5550 = this.globalTypes;
      var v14717 = this.doubleType;
      var v5551 = v14717.symbol;
      JAM.call(v5550.add, v5550, ["number", v5551], JAM.policy.p1);
      var v5552 = this.globalTypes;
      var v20118 = this.stringType;
      var v14718 = v20118.symbol;
      var v5553 = v14718.name;
      var v14719 = this.stringType;
      var v5554 = v14719.symbol;
      JAM.call(v5552.add, v5552, [v5553, v5554], JAM.policy.p1);
      var v5555 = this.globalTypes;
      var v20119 = this.anyType;
      var v14720 = v20119.symbol;
      var v5556 = v14720.name;
      var v14721 = this.anyType;
      var v5557 = v14721.symbol;
      JAM.call(v5555.add, v5555, [v5556, v5557], JAM.policy.p1);
      var v5558 = this.globalTypes;
      var v20120 = this.nullType;
      var v14722 = v20120.symbol;
      var v5559 = v14722.name;
      var v14723 = this.nullType;
      var v5560 = v14723.symbol;
      JAM.call(v5558.add, v5558, [v5559, v5560], JAM.policy.p1);
      var v5561 = this.globalTypes;
      var v20121 = this.undefinedType;
      var v14724 = v20121.symbol;
      var v5562 = v14724.name;
      var v14725 = this.undefinedType;
      var v5563 = v14725.symbol;
      JAM.call(v5561.add, v5561, [v5562, v5563], JAM.policy.p1);
      var v5564 = this.dualGlobalValues;
      v5564.secondaryTable = this.globals;
      var v5565 = this.dualGlobalTypes;
      v5565.secondaryTable = this.globalTypes;
      var v5566 = this.dualAmbientGlobalValues;
      v5566.secondaryTable = this.ambientGlobals;
      var v5567 = this.dualAmbientGlobalTypes;
      v5567.secondaryTable = this.ambientGlobalTypes;
      return;
    }
    function v900(mode$$7) {
      var v5568 = this.dualGlobalValues;
      var v14726 = this.dualGlobalTypes;
      var v20122 = this.dualAmbientGlobalValues;
      var v23529 = this.dualAmbientGlobalTypes;
      var v25155 = TypeCheckCollectionMode.Resident;
      this.residentTypeCheck = v5568.insertPrimary = v14726.insertPrimary = v20122.insertPrimary = v23529.insertPrimary = mode$$7 == v25155;
      return;
    }
    function v899(flags$$3, name$$79) {
      var v5569 = TypeScript$$23.Type;
      var primitive = new v5569;
      primitive.primitiveTypeClass = flags$$3;
      var v5570 = TypeScript$$23.TypeSymbol;
      var v5571 = name$$79.length;
      var symbol$$8 = JAM.new(v5570, [name$$79, -1, v5571, -1, primitive]);
      var v5572 = TypeScript$$23.TypeCheckStatus;
      symbol$$8.typeCheckStatus = v5572.Finished;
      primitive.symbol = symbol$$8;
      var v5573 = this.importedGlobals;
      var v5574 = this.errorReporter;
      JAM.call(v5573.enter, v5573, [null, null, symbol$$8, v5574, true, true, true], JAM.policy.p1);
      return primitive;
    }
    function PersistentGlobalTypeState$$1(errorReporter$$4) {
      this.errorReporter = errorReporter$$4;
      var v5575 = TypeScript$$23.ScopedMembers;
      var v14727 = TypeScript$$23.DualStringHashTable;
      var v20123 = TypeScript$$23.StringHashTable;
      var v14728 = new v20123;
      var v20124 = TypeScript$$23.StringHashTable;
      var v14729 = new v20124;
      var v5576 = JAM.new(v14727, [v14728, v14729]);
      var v26636 = JAM.new(v5575, [v5576]);
      this.importedGlobalsTable = v26636;
      var v5577 = TypeScript$$23.ScopedMembers;
      var v14730 = TypeScript$$23.DualStringHashTable;
      var v20125 = TypeScript$$23.StringHashTable;
      var v14731 = new v20125;
      var v20126 = TypeScript$$23.StringHashTable;
      var v14732 = new v20126;
      var v5578 = JAM.new(v14730, [v14731, v14732]);
      var v26637 = JAM.new(v5577, [v5578]);
      this.importedGlobalsTypeTable = v26637;
      this.globals = null;
      this.globalTypes = null;
      this.ambientGlobals = null;
      this.ambientGlobalTypes = null;
      var v5579 = TypeScript$$23.StringHashTable;
      var v26638 = new v5579;
      this.residentGlobalValues = v26638;
      var v5580 = TypeScript$$23.StringHashTable;
      var v26639 = new v5580;
      this.residentGlobalTypes = v26639;
      var v5581 = TypeScript$$23.StringHashTable;
      var v26640 = new v5581;
      this.residentGlobalAmbientValues = v26640;
      var v5582 = TypeScript$$23.StringHashTable;
      var v26641 = new v5582;
      this.residentGlobalAmbientTypes = v26641;
      this.residentTypeCheck = true;
      this.mod = null;
      this.gloMod = null;
      this.wildElm = null;
      var v5583 = TypeScript$$23.SymbolScopeBuilder;
      var v5584 = this.importedGlobalsTable;
      var v5585 = this.importedGlobalsTypeTable;
      var v26642 = JAM.new(v5583, [null, v5584, null, v5585, null, null]);
      this.importedGlobals = v26642;
      var v5586 = TypeScript$$23.DualStringHashTable;
      var v5587 = this.residentGlobalValues;
      var v14733 = TypeScript$$23.StringHashTable;
      var v5588 = new v14733;
      var v26643 = JAM.new(v5586, [v5587, v5588]);
      this.dualGlobalValues = v26643;
      var v5589 = TypeScript$$23.DualStringHashTable;
      var v5590 = this.residentGlobalTypes;
      var v14734 = TypeScript$$23.StringHashTable;
      var v5591 = new v14734;
      var v26644 = JAM.new(v5589, [v5590, v5591]);
      this.dualGlobalTypes = v26644;
      var v5592 = TypeScript$$23.DualStringHashTable;
      var v5593 = this.residentGlobalAmbientValues;
      var v14735 = TypeScript$$23.StringHashTable;
      var v5594 = new v14735;
      var v26645 = JAM.new(v5592, [v5593, v5594]);
      this.dualAmbientGlobalValues = v26645;
      var v5595 = TypeScript$$23.DualStringHashTable;
      var v5596 = this.residentGlobalAmbientTypes;
      var v14736 = TypeScript$$23.StringHashTable;
      var v5597 = new v14736;
      var v26646 = JAM.new(v5595, [v5596, v5597]);
      this.dualAmbientGlobalTypes = v26646;
      var v5598 = TypeScript$$23.ScopedMembers;
      var v14737 = TypeScript$$23.DualStringHashTable;
      var v14738 = this.dualGlobalValues;
      var v20127 = TypeScript$$23.StringHashTable;
      var v14739 = new v20127;
      var v5599 = JAM.new(v14737, [v14738, v14739]);
      var dualGlobalScopedMembers = JAM.new(v5598, [v5599]);
      var v5600 = TypeScript$$23.ScopedMembers;
      var v14740 = TypeScript$$23.DualStringHashTable;
      var v14741 = this.dualAmbientGlobalValues;
      var v20128 = TypeScript$$23.StringHashTable;
      var v14742 = new v20128;
      var v5601 = JAM.new(v14740, [v14741, v14742]);
      var dualGlobalScopedAmbientMembers = JAM.new(v5600, [v5601]);
      var v5602 = TypeScript$$23.ScopedMembers;
      var v14743 = TypeScript$$23.DualStringHashTable;
      var v14744 = this.dualGlobalTypes;
      var v20129 = TypeScript$$23.StringHashTable;
      var v14745 = new v20129;
      var v5603 = JAM.new(v14743, [v14744, v14745]);
      var dualGlobalScopedEnclosedTypes = JAM.new(v5602, [v5603]);
      var v5604 = TypeScript$$23.ScopedMembers;
      var v14746 = TypeScript$$23.DualStringHashTable;
      var v14747 = this.dualAmbientGlobalTypes;
      var v20130 = TypeScript$$23.StringHashTable;
      var v14748 = new v20130;
      var v5605 = JAM.new(v14746, [v14747, v14748]);
      var dualGlobalScopedAmbientEnclosedTypes = JAM.new(v5604, [v5605]);
      var v5606 = TypeScript$$23.SymbolScopeBuilder;
      var v5607 = this.importedGlobals;
      var v26647 = JAM.new(v5606, [dualGlobalScopedMembers, dualGlobalScopedAmbientMembers, dualGlobalScopedEnclosedTypes, dualGlobalScopedAmbientEnclosedTypes, v5607, null]);
      this.globalScope = v26647;
      var v14749 = TypeScript$$23.Primitive;
      var v5608 = v14749.Void;
      var v26648 = JAM.call(this.enterPrimitive, this, [v5608, "void"], JAM.policy.p1);
      this.voidType = v26648;
      var v14750 = TypeScript$$23.Primitive;
      var v5609 = v14750.Boolean;
      var v26649 = JAM.call(this.enterPrimitive, this, [v5609, "bool"], JAM.policy.p1);
      this.booleanType = v26649;
      var v14751 = TypeScript$$23.Primitive;
      var v5610 = v14751.Double;
      var v26650 = JAM.call(this.enterPrimitive, this, [v5610, "number"], JAM.policy.p1);
      this.doubleType = v26650;
      var v14752 = this.importedGlobals;
      var v5611 = v14752.ambientEnclosedTypes;
      var v14753 = this.doubleType;
      var v5612 = v14753.symbol;
      JAM.call(v5611.addPublicMember, v5611, ["number", v5612], JAM.policy.p1);
      var v14754 = TypeScript$$23.Primitive;
      var v5613 = v14754.String;
      var v26651 = JAM.call(this.enterPrimitive, this, [v5613, "string"], JAM.policy.p1);
      this.stringType = v26651;
      var v14755 = TypeScript$$23.Primitive;
      var v5614 = v14755.Any;
      var v26652 = JAM.call(this.enterPrimitive, this, [v5614, "any"], JAM.policy.p1);
      this.anyType = v26652;
      var v14756 = TypeScript$$23.Primitive;
      var v5615 = v14756.Null;
      var v26653 = JAM.call(this.enterPrimitive, this, [v5615, "null"], JAM.policy.p1);
      this.nullType = v26653;
      var v14757 = TypeScript$$23.Primitive;
      var v5616 = v14757.Undefined;
      var v26654 = JAM.call(this.enterPrimitive, this, [v5616, "undefined"], JAM.policy.p1);
      this.undefinedType = v26654;
      var v5617 = TypeCheckCollectionMode.Resident;
      JAM.call(this.setCollectionMode, this, [v5617]);
      var v5618 = TypeScript$$23.TypeSymbol;
      var v14758 = TypeScript$$23.Type;
      var v5619 = new v14758;
      var v26655 = JAM.new(v5618, ["_element", -1, 0, -1, v5619]);
      this.wildElm = v26655;
      var v5620 = this.importedGlobalsTypeTable;
      var v14759 = this.wildElm;
      var v5621 = v14759.name;
      var v5622 = this.wildElm;
      JAM.call(v5620.addPublicMember, v5620, [v5621, v5622], JAM.policy.p1);
      var v5623 = TypeScript$$23.ModuleType;
      var v26656 = JAM.new(v5623, [dualGlobalScopedEnclosedTypes, dualGlobalScopedAmbientEnclosedTypes]);
      this.mod = v26656;
      var v5624 = this.mod;
      v5624.members = dualGlobalScopedMembers;
      var v5625 = this.mod;
      v5625.ambientMembers = dualGlobalScopedAmbientMembers;
      var v5626 = this.mod;
      v5626.containedScope = this.globalScope;
      var v5627 = TypeScript$$23.TypeSymbol;
      var v5628 = TypeScript$$23.globalId;
      var v5629 = this.mod;
      var v26657 = JAM.new(v5627, [v5628, -1, 0, -1, v5629]);
      this.gloMod = v26657;
      var v14760 = this.mod;
      var v5630 = v14760.members;
      var v14761 = this.gloMod;
      var v5631 = v14761.name;
      var v5632 = this.gloMod;
      JAM.call(v5630.addPublicMember, v5630, [v5631, v5632], JAM.policy.p1);
      var v5633 = this.undefinedType;
      JAM.call(this.defineGlobalValue, this, [v5633]);
      return;
    }
    var v5634 = PersistentGlobalTypeState$$1.prototype;
    v5634.enterPrimitive = v899;
    var v5635 = PersistentGlobalTypeState$$1.prototype;
    v5635.setCollectionMode = v900;
    var v5636 = PersistentGlobalTypeState$$1.prototype;
    v5636.refreshPersistentState = v901;
    var v5637 = PersistentGlobalTypeState$$1.prototype;
    v5637.defineGlobalValue = v902;
    return PersistentGlobalTypeState$$1;
  }
  function v898(TypeCheckCollectionMode$$1) {
    TypeCheckCollectionMode$$1._map = [];
    var v5638 = TypeCheckCollectionMode$$1._map;
    v5638[0] = "Resident";
    TypeCheckCollectionMode$$1.Resident = 0;
    var v5639 = TypeCheckCollectionMode$$1._map;
    v5639[1] = "Transient";
    TypeCheckCollectionMode$$1.Transient = 1;
    return;
  }
  function v897() {
    function v896(message$$18) {
      this.message = message$$18;
      return;
    }
    function v895(message$$17) {
      var v14762 = this.onlyCaptureFirstError;
      var v5641 = !v14762;
      if (v5641) {
        var v5640;
        var v14765 = this.message;
        if (v14765) {
          var v14763 = message$$17 + ":\n\t";
          var v14764 = this.message;
          v5640 = v14763 + v14764;
        } else {
          v5640 = message$$17;
        }
        this.message = v5640;
      } else {
        JAM.call(this.setMessage, this, [message$$17]);
      }
      return;
    }
    function TypeComparisonInfo$$1() {
      this.onlyCaptureFirstError = false;
      var v5642 = TypeScript$$23.TypeRelationshipFlags;
      this.flags = v5642.SuccessfulComparison;
      this.message = "";
      return;
    }
    var v5643 = TypeComparisonInfo$$1.prototype;
    v5643.addMessageToFront = v895;
    var v5644 = TypeComparisonInfo$$1.prototype;
    v5644.setMessage = v896;
    return TypeComparisonInfo$$1;
  }
  function v894() {
    function v893(arrInstType, checker$$15) {
      var v14766 = this.arrayBase;
      var v5647 = v14766 == null;
      if (v5647) {
        var v14767 = checker$$15.wildElm;
        var v5645 = v14767.type;
        var v14768 = this.arrayType;
        var v5646 = v14768.elementType;
        var v26658 = JAM.call(arrInstType.specializeType, arrInstType, [v5645, v5646, checker$$15, true], JAM.policy.p1);
        this.arrayBase = v26658;
      }
      return this.arrayBase;
    }
    function ArrayCache$$1() {
      this.arrayBase = null;
      return;
    }
    var v5648 = ArrayCache$$1.prototype;
    v5648.specialize = v893;
    return ArrayCache$$1;
  }
  var ArrayCache = v894();
  TypeScript$$23.ArrayCache = ArrayCache;
  var TypeComparisonInfo = v897();
  TypeScript$$23.TypeComparisonInfo = TypeComparisonInfo;
  var v14769 = TypeScript$$23.TypeCheckCollectionMode;
  var v20131 = !v14769;
  if (v20131) {
    v14769 = TypeScript$$23.TypeCheckCollectionMode = {};
  }
  var v5649 = v14769;
  v898(v5649);
  var TypeCheckCollectionMode = TypeScript$$23.TypeCheckCollectionMode;
  var PersistentGlobalTypeState = v903();
  TypeScript$$23.PersistentGlobalTypeState = PersistentGlobalTypeState;
  var ContextualTypeContext = v904();
  TypeScript$$23.ContextualTypeContext = ContextualTypeContext;
  var ContextualTypingContextStack = v910();
  TypeScript$$23.ContextualTypingContextStack = ContextualTypingContextStack;
  var TypeChecker = v963();
  TypeScript$$23.TypeChecker = TypeChecker;
  return;
}
function v892(TypeScript$$22) {
  function v891(_super$$64) {
    function v890() {
      return TokenClass.RegExpLiteral;
    }
    function v889() {
      var v5650 = this.regex;
      return v5650.toString();
    }
    function RegularExpressionLiteralToken$$1(regex$$3) {
      var v5651 = TokenID.RegularExpressionLiteral;
      JAM.call(_super$$64.call, _super$$64, [this, v5651], JAM.policy.p1);
      this.regex = regex$$3;
      return;
    }
    JAM.call(__extends, null, [RegularExpressionLiteralToken$$1, _super$$64], JAM.policy.p1);
    var v5652 = RegularExpressionLiteralToken$$1.prototype;
    v5652.getText = v889;
    var v5653 = RegularExpressionLiteralToken$$1.prototype;
    v5653.classification = v890;
    return RegularExpressionLiteralToken$$1;
  }
  function v888(_super$$63) {
    function v887() {
      return TokenClass.Comment;
    }
    function v886() {
      return this.value;
    }
    function CommentToken$$1(tokenID, value$$39, isBlock, startPos$$2, line$$11, endsLine$$2) {
      JAM.call(_super$$63.call, _super$$63, [this, tokenID], JAM.policy.p1);
      this.value = value$$39;
      this.isBlock = isBlock;
      this.startPos = startPos$$2;
      this.line = line$$11;
      this.endsLine = endsLine$$2;
      return;
    }
    JAM.call(__extends, null, [CommentToken$$1, _super$$63], JAM.policy.p1);
    var v5654 = CommentToken$$1.prototype;
    v5654.getText = v886;
    var v5655 = CommentToken$$1.prototype;
    v5655.classification = v887;
    return CommentToken$$1;
  }
  function v885(_super$$62) {
    function v884() {
      return TokenClass.Whitespace;
    }
    function v883() {
      return this.value;
    }
    function WhitespaceToken$$1(tokenId$$48, value$$38) {
      JAM.call(_super$$62.call, _super$$62, [this, tokenId$$48], JAM.policy.p1);
      this.value = value$$38;
      return;
    }
    JAM.call(__extends, null, [WhitespaceToken$$1, _super$$62], JAM.policy.p1);
    var v5656 = WhitespaceToken$$1.prototype;
    v5656.getText = v883;
    var v5657 = WhitespaceToken$$1.prototype;
    v5657.classification = v884;
    return WhitespaceToken$$1;
  }
  function v882(_super$$61) {
    function v881() {
      return TokenClass.Identifier;
    }
    function v880() {
      return this.value;
    }
    function IdentifierToken$$1(value$$37, hasEscapeSequence$$3) {
      var v5658 = TokenID.Identifier;
      JAM.call(_super$$61.call, _super$$61, [this, v5658], JAM.policy.p1);
      this.value = value$$37;
      this.hasEscapeSequence = hasEscapeSequence$$3;
      return;
    }
    JAM.call(__extends, null, [IdentifierToken$$1, _super$$61], JAM.policy.p1);
    var v5659 = IdentifierToken$$1.prototype;
    v5659.getText = v880;
    var v5660 = IdentifierToken$$1.prototype;
    v5660.classification = v881;
    return IdentifierToken$$1;
  }
  function v879(_super$$60) {
    function v878() {
      return TokenClass.StringLiteral;
    }
    function v877() {
      return this.value;
    }
    function StringLiteralToken$$1(value$$36) {
      var v5661 = TokenID.StringLiteral;
      JAM.call(_super$$60.call, _super$$60, [this, v5661], JAM.policy.p1);
      this.value = value$$36;
      return;
    }
    JAM.call(__extends, null, [StringLiteralToken$$1, _super$$60], JAM.policy.p1);
    var v5662 = StringLiteralToken$$1.prototype;
    v5662.getText = v877;
    var v5663 = StringLiteralToken$$1.prototype;
    v5663.classification = v878;
    return StringLiteralToken$$1;
  }
  function v876(_super$$59) {
    function v875() {
      return TokenClass.NumberLiteral;
    }
    function v874() {
      var v5664;
      var v14772 = this.hasEmptyFraction;
      if (v14772) {
        var v20132 = this.value;
        var v14770 = v20132.toString();
        v5664 = v14770 + ".0";
      } else {
        var v14771 = this.value;
        v5664 = v14771.toString();
      }
      return v5664;
    }
    function NumberLiteralToken$$1(value$$35, hasEmptyFraction$$1) {
      var v5665 = TokenID.NumberLiteral;
      JAM.call(_super$$59.call, _super$$59, [this, v5665], JAM.policy.p1);
      this.value = value$$35;
      this.hasEmptyFraction = hasEmptyFraction$$1;
      return;
    }
    JAM.call(__extends, null, [NumberLiteralToken$$1, _super$$59], JAM.policy.p1);
    var v5666 = NumberLiteralToken$$1.prototype;
    v5666.getText = v874;
    var v5667 = NumberLiteralToken$$1.prototype;
    v5667.classification = v875;
    return NumberLiteralToken$$1;
  }
  function v873() {
    function v872() {
      var v14773 = this.tokenId;
      var v14774 = TokenID.LimKeyword;
      var v5671 = v14773 <= v14774;
      if (v5671) {
        return TokenClass.Keyword;
      } else {
        var v5668 = this.tokenId;
        var tokenInfo$$2 = lookupToken(v5668);
        var v5670 = tokenInfo$$2 != undefined;
        if (v5670) {
          var v20133 = tokenInfo$$2.unopNodeType;
          var v23530 = TypeScript$$22.NodeType;
          var v20134 = v23530.None;
          var v14775 = v20133 != v20134;
          var v20137 = !v14775;
          if (v20137) {
            var v20135 = tokenInfo$$2.binopNodeType;
            var v23531 = TypeScript$$22.NodeType;
            var v20136 = v23531.None;
            v14775 = v20135 != v20136;
          }
          var v5669 = v14775;
          if (v5669) {
            return TokenClass.Operator;
          }
        }
      }
      return TokenClass.Punctuation;
    }
    function v871() {
      var v14776 = TypeScript$$22.tokenTable;
      var v14777 = this.tokenId;
      var v5672 = v14776[v14777];
      return v5672.text;
    }
    function v870(line$$10, outfile$$11) {
      var v20138 = this.toString();
      var v14778 = v20138 + ",on line";
      var v5673 = v14778 + line$$10;
      JAM.call(outfile$$11.WriteLine, outfile$$11, [v5673]);
      return;
    }
    function v869() {
      var v25838 = this.tokenId;
      var v25156 = "token: " + v25838;
      var v23532 = v25156 + " ";
      var v23533 = this.getText();
      var v20139 = v23532 + v23533;
      var v14779 = v20139 + " (";
      var v20140 = TokenID._map;
      var v20141 = this.tokenId;
      var v14780 = v20140[v20141];
      var v5674 = v14779 + v14780;
      return v5674 + ")";
    }
    function Token$$1(tokenId$$47) {
      this.tokenId = tokenId$$47;
      return;
    }
    var v5675 = Token$$1.prototype;
    v5675.toString = v869;
    var v5676 = Token$$1.prototype;
    v5676.print = v870;
    var v5677 = Token$$1.prototype;
    v5677.getText = v871;
    var v5678 = Token$$1.prototype;
    v5678.classification = v872;
    return Token$$1;
  }
  function v868() {
    function SavedToken$$1(tok$$4, minChar$$32, limChar$$11) {
      this.tok = tok$$4;
      this.minChar = minChar$$32;
      this.limChar = limChar$$11;
      return;
    }
    return SavedToken$$1;
  }
  function v867(TokenClass$$1) {
    TokenClass$$1._map = [];
    var v5679 = TokenClass$$1._map;
    v5679[0] = "Punctuation";
    TokenClass$$1.Punctuation = 0;
    var v5680 = TokenClass$$1._map;
    v5680[1] = "Keyword";
    TokenClass$$1.Keyword = 1;
    var v5681 = TokenClass$$1._map;
    v5681[2] = "Operator";
    TokenClass$$1.Operator = 2;
    var v5682 = TokenClass$$1._map;
    v5682[3] = "Comment";
    TokenClass$$1.Comment = 3;
    var v5683 = TokenClass$$1._map;
    v5683[4] = "Whitespace";
    TokenClass$$1.Whitespace = 4;
    var v5684 = TokenClass$$1._map;
    v5684[5] = "Identifier";
    TokenClass$$1.Identifier = 5;
    var v5685 = TokenClass$$1._map;
    v5685[6] = "NumberLiteral";
    TokenClass$$1.NumberLiteral = 6;
    var v5686 = TokenClass$$1._map;
    v5686[7] = "StringLiteral";
    TokenClass$$1.StringLiteral = 7;
    var v5687 = TokenClass$$1._map;
    v5687[8] = "RegExpLiteral";
    TokenClass$$1.RegExpLiteral = 8;
    return;
  }
  function v866() {
    function TokenInfo$$1(tokenId$$46, reservation$$1, binopPrecedence$$1, binopNodeType$$1, unopPrecedence$$1, unopNodeType$$1, text$$22, ers$$2) {
      this.tokenId = tokenId$$46;
      this.reservation = reservation$$1;
      this.binopPrecedence = binopPrecedence$$1;
      this.binopNodeType = binopNodeType$$1;
      this.unopPrecedence = unopPrecedence$$1;
      this.unopNodeType = unopNodeType$$1;
      this.text = text$$22;
      this.ers = ers$$2;
      return;
    }
    return TokenInfo$$1;
  }
  function v865(Reservation$$1) {
    Reservation$$1._map = [];
    Reservation$$1.None = 0;
    Reservation$$1.Javascript = 1;
    Reservation$$1.JavascriptFuture = 2;
    Reservation$$1.TypeScript = 4;
    Reservation$$1.JavascriptFutureStrict = 8;
    var v5688 = Reservation$$1.Javascript;
    var v5689 = Reservation$$1.TypeScript;
    Reservation$$1.TypeScriptAndJS = v5688 | v5689;
    var v5690 = Reservation$$1.JavascriptFuture;
    var v5691 = Reservation$$1.TypeScript;
    Reservation$$1.TypeScriptAndJSFuture = v5690 | v5691;
    var v5692 = Reservation$$1.JavascriptFutureStrict;
    var v5693 = Reservation$$1.TypeScript;
    Reservation$$1.TypeScriptAndJSFutureStrict = v5692 | v5693;
    return;
  }
  function v864(OperatorPrecedence$$1) {
    OperatorPrecedence$$1._map = [];
    var v5694 = OperatorPrecedence$$1._map;
    v5694[0] = "None";
    OperatorPrecedence$$1.None = 0;
    var v5695 = OperatorPrecedence$$1._map;
    v5695[1] = "Comma";
    OperatorPrecedence$$1.Comma = 1;
    var v5696 = OperatorPrecedence$$1._map;
    v5696[2] = "Assignment";
    OperatorPrecedence$$1.Assignment = 2;
    var v5697 = OperatorPrecedence$$1._map;
    v5697[3] = "Conditional";
    OperatorPrecedence$$1.Conditional = 3;
    var v5698 = OperatorPrecedence$$1._map;
    v5698[4] = "LogicalOr";
    OperatorPrecedence$$1.LogicalOr = 4;
    var v5699 = OperatorPrecedence$$1._map;
    v5699[5] = "LogicalAnd";
    OperatorPrecedence$$1.LogicalAnd = 5;
    var v5700 = OperatorPrecedence$$1._map;
    v5700[6] = "BitwiseOr";
    OperatorPrecedence$$1.BitwiseOr = 6;
    var v5701 = OperatorPrecedence$$1._map;
    v5701[7] = "BitwiseExclusiveOr";
    OperatorPrecedence$$1.BitwiseExclusiveOr = 7;
    var v5702 = OperatorPrecedence$$1._map;
    v5702[8] = "BitwiseAnd";
    OperatorPrecedence$$1.BitwiseAnd = 8;
    var v5703 = OperatorPrecedence$$1._map;
    v5703[9] = "Equality";
    OperatorPrecedence$$1.Equality = 9;
    var v5704 = OperatorPrecedence$$1._map;
    v5704[10] = "Relational";
    OperatorPrecedence$$1.Relational = 10;
    var v5705 = OperatorPrecedence$$1._map;
    v5705[11] = "Shift";
    OperatorPrecedence$$1.Shift = 11;
    var v5706 = OperatorPrecedence$$1._map;
    v5706[12] = "Additive";
    OperatorPrecedence$$1.Additive = 12;
    var v5707 = OperatorPrecedence$$1._map;
    v5707[13] = "Multiplicative";
    OperatorPrecedence$$1.Multiplicative = 13;
    var v5708 = OperatorPrecedence$$1._map;
    v5708[14] = "Unary";
    OperatorPrecedence$$1.Unary = 14;
    var v5709 = OperatorPrecedence$$1._map;
    v5709[15] = "Lim";
    OperatorPrecedence$$1.Lim = 15;
    return;
  }
  function v863(TokenID$$1) {
    TokenID$$1._map = [];
    var v5710 = TokenID$$1._map;
    v5710[0] = "Any";
    TokenID$$1.Any = 0;
    var v5711 = TokenID$$1._map;
    v5711[1] = "Bool";
    TokenID$$1.Bool = 1;
    var v5712 = TokenID$$1._map;
    v5712[2] = "Break";
    TokenID$$1.Break = 2;
    var v5713 = TokenID$$1._map;
    v5713[3] = "Case";
    TokenID$$1.Case = 3;
    var v5714 = TokenID$$1._map;
    v5714[4] = "Catch";
    TokenID$$1.Catch = 4;
    var v5715 = TokenID$$1._map;
    v5715[5] = "Class";
    TokenID$$1.Class = 5;
    var v5716 = TokenID$$1._map;
    v5716[6] = "Const";
    TokenID$$1.Const = 6;
    var v5717 = TokenID$$1._map;
    v5717[7] = "Continue";
    TokenID$$1.Continue = 7;
    var v5718 = TokenID$$1._map;
    v5718[8] = "Debugger";
    TokenID$$1.Debugger = 8;
    var v5719 = TokenID$$1._map;
    v5719[9] = "Default";
    TokenID$$1.Default = 9;
    var v5720 = TokenID$$1._map;
    v5720[10] = "Delete";
    TokenID$$1.Delete = 10;
    var v5721 = TokenID$$1._map;
    v5721[11] = "Do";
    TokenID$$1.Do = 11;
    var v5722 = TokenID$$1._map;
    v5722[12] = "Else";
    TokenID$$1.Else = 12;
    var v5723 = TokenID$$1._map;
    v5723[13] = "Enum";
    TokenID$$1.Enum = 13;
    var v5724 = TokenID$$1._map;
    v5724[14] = "Export";
    TokenID$$1.Export = 14;
    var v5725 = TokenID$$1._map;
    v5725[15] = "Extends";
    TokenID$$1.Extends = 15;
    var v5726 = TokenID$$1._map;
    v5726[16] = "Declare";
    TokenID$$1.Declare = 16;
    var v5727 = TokenID$$1._map;
    v5727[17] = "False";
    TokenID$$1.False = 17;
    var v5728 = TokenID$$1._map;
    v5728[18] = "Finally";
    TokenID$$1.Finally = 18;
    var v5729 = TokenID$$1._map;
    v5729[19] = "For";
    TokenID$$1.For = 19;
    var v5730 = TokenID$$1._map;
    v5730[20] = "Function";
    TokenID$$1.Function = 20;
    var v5731 = TokenID$$1._map;
    v5731[21] = "Constructor";
    TokenID$$1.Constructor = 21;
    var v5732 = TokenID$$1._map;
    v5732[22] = "Get";
    TokenID$$1.Get = 22;
    var v5733 = TokenID$$1._map;
    v5733[23] = "If";
    TokenID$$1.If = 23;
    var v5734 = TokenID$$1._map;
    v5734[24] = "Implements";
    TokenID$$1.Implements = 24;
    var v5735 = TokenID$$1._map;
    v5735[25] = "Import";
    TokenID$$1.Import = 25;
    var v5736 = TokenID$$1._map;
    v5736[26] = "In";
    TokenID$$1.In = 26;
    var v5737 = TokenID$$1._map;
    v5737[27] = "InstanceOf";
    TokenID$$1.InstanceOf = 27;
    var v5738 = TokenID$$1._map;
    v5738[28] = "Interface";
    TokenID$$1.Interface = 28;
    var v5739 = TokenID$$1._map;
    v5739[29] = "Let";
    TokenID$$1.Let = 29;
    var v5740 = TokenID$$1._map;
    v5740[30] = "Module";
    TokenID$$1.Module = 30;
    var v5741 = TokenID$$1._map;
    v5741[31] = "New";
    TokenID$$1.New = 31;
    var v5742 = TokenID$$1._map;
    v5742[32] = "Number";
    TokenID$$1.Number = 32;
    var v5743 = TokenID$$1._map;
    v5743[33] = "Null";
    TokenID$$1.Null = 33;
    var v5744 = TokenID$$1._map;
    v5744[34] = "Package";
    TokenID$$1.Package = 34;
    var v5745 = TokenID$$1._map;
    v5745[35] = "Private";
    TokenID$$1.Private = 35;
    var v5746 = TokenID$$1._map;
    v5746[36] = "Protected";
    TokenID$$1.Protected = 36;
    var v5747 = TokenID$$1._map;
    v5747[37] = "Public";
    TokenID$$1.Public = 37;
    var v5748 = TokenID$$1._map;
    v5748[38] = "Return";
    TokenID$$1.Return = 38;
    var v5749 = TokenID$$1._map;
    v5749[39] = "Set";
    TokenID$$1.Set = 39;
    var v5750 = TokenID$$1._map;
    v5750[40] = "Static";
    TokenID$$1.Static = 40;
    var v5751 = TokenID$$1._map;
    v5751[41] = "String";
    TokenID$$1.String = 41;
    var v5752 = TokenID$$1._map;
    v5752[42] = "Super";
    TokenID$$1.Super = 42;
    var v5753 = TokenID$$1._map;
    v5753[43] = "Switch";
    TokenID$$1.Switch = 43;
    var v5754 = TokenID$$1._map;
    v5754[44] = "This";
    TokenID$$1.This = 44;
    var v5755 = TokenID$$1._map;
    v5755[45] = "Throw";
    TokenID$$1.Throw = 45;
    var v5756 = TokenID$$1._map;
    v5756[46] = "True";
    TokenID$$1.True = 46;
    var v5757 = TokenID$$1._map;
    v5757[47] = "Try";
    TokenID$$1.Try = 47;
    var v5758 = TokenID$$1._map;
    v5758[48] = "TypeOf";
    TokenID$$1.TypeOf = 48;
    var v5759 = TokenID$$1._map;
    v5759[49] = "Var";
    TokenID$$1.Var = 49;
    var v5760 = TokenID$$1._map;
    v5760[50] = "Void";
    TokenID$$1.Void = 50;
    var v5761 = TokenID$$1._map;
    v5761[51] = "With";
    TokenID$$1.With = 51;
    var v5762 = TokenID$$1._map;
    v5762[52] = "While";
    TokenID$$1.While = 52;
    var v5763 = TokenID$$1._map;
    v5763[53] = "Yield";
    TokenID$$1.Yield = 53;
    var v5764 = TokenID$$1._map;
    v5764[54] = "Semicolon";
    TokenID$$1.Semicolon = 54;
    var v5765 = TokenID$$1._map;
    v5765[55] = "OpenParen";
    TokenID$$1.OpenParen = 55;
    var v5766 = TokenID$$1._map;
    v5766[56] = "CloseParen";
    TokenID$$1.CloseParen = 56;
    var v5767 = TokenID$$1._map;
    v5767[57] = "OpenBracket";
    TokenID$$1.OpenBracket = 57;
    var v5768 = TokenID$$1._map;
    v5768[58] = "CloseBracket";
    TokenID$$1.CloseBracket = 58;
    var v5769 = TokenID$$1._map;
    v5769[59] = "OpenBrace";
    TokenID$$1.OpenBrace = 59;
    var v5770 = TokenID$$1._map;
    v5770[60] = "CloseBrace";
    TokenID$$1.CloseBrace = 60;
    var v5771 = TokenID$$1._map;
    v5771[61] = "Comma";
    TokenID$$1.Comma = 61;
    var v5772 = TokenID$$1._map;
    v5772[62] = "Equals";
    TokenID$$1.Equals = 62;
    var v5773 = TokenID$$1._map;
    v5773[63] = "PlusEquals";
    TokenID$$1.PlusEquals = 63;
    var v5774 = TokenID$$1._map;
    v5774[64] = "MinusEquals";
    TokenID$$1.MinusEquals = 64;
    var v5775 = TokenID$$1._map;
    v5775[65] = "AsteriskEquals";
    TokenID$$1.AsteriskEquals = 65;
    var v5776 = TokenID$$1._map;
    v5776[66] = "SlashEquals";
    TokenID$$1.SlashEquals = 66;
    var v5777 = TokenID$$1._map;
    v5777[67] = "PercentEquals";
    TokenID$$1.PercentEquals = 67;
    var v5778 = TokenID$$1._map;
    v5778[68] = "AmpersandEquals";
    TokenID$$1.AmpersandEquals = 68;
    var v5779 = TokenID$$1._map;
    v5779[69] = "CaretEquals";
    TokenID$$1.CaretEquals = 69;
    var v5780 = TokenID$$1._map;
    v5780[70] = "BarEquals";
    TokenID$$1.BarEquals = 70;
    var v5781 = TokenID$$1._map;
    v5781[71] = "LessThanLessThanEquals";
    TokenID$$1.LessThanLessThanEquals = 71;
    var v5782 = TokenID$$1._map;
    v5782[72] = "GreaterThanGreaterThanEquals";
    TokenID$$1.GreaterThanGreaterThanEquals = 72;
    var v5783 = TokenID$$1._map;
    v5783[73] = "GreaterThanGreaterThanGreaterThanEquals";
    TokenID$$1.GreaterThanGreaterThanGreaterThanEquals = 73;
    var v5784 = TokenID$$1._map;
    v5784[74] = "Question";
    TokenID$$1.Question = 74;
    var v5785 = TokenID$$1._map;
    v5785[75] = "Colon";
    TokenID$$1.Colon = 75;
    var v5786 = TokenID$$1._map;
    v5786[76] = "BarBar";
    TokenID$$1.BarBar = 76;
    var v5787 = TokenID$$1._map;
    v5787[77] = "AmpersandAmpersand";
    TokenID$$1.AmpersandAmpersand = 77;
    var v5788 = TokenID$$1._map;
    v5788[78] = "Bar";
    TokenID$$1.Bar = 78;
    var v5789 = TokenID$$1._map;
    v5789[79] = "Caret";
    TokenID$$1.Caret = 79;
    var v5790 = TokenID$$1._map;
    v5790[80] = "And";
    TokenID$$1.And = 80;
    var v5791 = TokenID$$1._map;
    v5791[81] = "EqualsEquals";
    TokenID$$1.EqualsEquals = 81;
    var v5792 = TokenID$$1._map;
    v5792[82] = "ExclamationEquals";
    TokenID$$1.ExclamationEquals = 82;
    var v5793 = TokenID$$1._map;
    v5793[83] = "EqualsEqualsEquals";
    TokenID$$1.EqualsEqualsEquals = 83;
    var v5794 = TokenID$$1._map;
    v5794[84] = "ExclamationEqualsEquals";
    TokenID$$1.ExclamationEqualsEquals = 84;
    var v5795 = TokenID$$1._map;
    v5795[85] = "LessThan";
    TokenID$$1.LessThan = 85;
    var v5796 = TokenID$$1._map;
    v5796[86] = "LessThanEquals";
    TokenID$$1.LessThanEquals = 86;
    var v5797 = TokenID$$1._map;
    v5797[87] = "GreaterThan";
    TokenID$$1.GreaterThan = 87;
    var v5798 = TokenID$$1._map;
    v5798[88] = "GreaterThanEquals";
    TokenID$$1.GreaterThanEquals = 88;
    var v5799 = TokenID$$1._map;
    v5799[89] = "LessThanLessThan";
    TokenID$$1.LessThanLessThan = 89;
    var v5800 = TokenID$$1._map;
    v5800[90] = "GreaterThanGreaterThan";
    TokenID$$1.GreaterThanGreaterThan = 90;
    var v5801 = TokenID$$1._map;
    v5801[91] = "GreaterThanGreaterThanGreaterThan";
    TokenID$$1.GreaterThanGreaterThanGreaterThan = 91;
    var v5802 = TokenID$$1._map;
    v5802[92] = "Plus";
    TokenID$$1.Plus = 92;
    var v5803 = TokenID$$1._map;
    v5803[93] = "Minus";
    TokenID$$1.Minus = 93;
    var v5804 = TokenID$$1._map;
    v5804[94] = "Asterisk";
    TokenID$$1.Asterisk = 94;
    var v5805 = TokenID$$1._map;
    v5805[95] = "Slash";
    TokenID$$1.Slash = 95;
    var v5806 = TokenID$$1._map;
    v5806[96] = "Percent";
    TokenID$$1.Percent = 96;
    var v5807 = TokenID$$1._map;
    v5807[97] = "Tilde";
    TokenID$$1.Tilde = 97;
    var v5808 = TokenID$$1._map;
    v5808[98] = "Exclamation";
    TokenID$$1.Exclamation = 98;
    var v5809 = TokenID$$1._map;
    v5809[99] = "PlusPlus";
    TokenID$$1.PlusPlus = 99;
    var v5810 = TokenID$$1._map;
    v5810[100] = "MinusMinus";
    TokenID$$1.MinusMinus = 100;
    var v5811 = TokenID$$1._map;
    v5811[101] = "Dot";
    TokenID$$1.Dot = 101;
    var v5812 = TokenID$$1._map;
    v5812[102] = "DotDotDot";
    TokenID$$1.DotDotDot = 102;
    var v5813 = TokenID$$1._map;
    v5813[103] = "Error";
    TokenID$$1.Error = 103;
    var v5814 = TokenID$$1._map;
    v5814[104] = "EndOfFile";
    TokenID$$1.EndOfFile = 104;
    var v5815 = TokenID$$1._map;
    v5815[105] = "EqualsGreaterThan";
    TokenID$$1.EqualsGreaterThan = 105;
    var v5816 = TokenID$$1._map;
    v5816[106] = "Identifier";
    TokenID$$1.Identifier = 106;
    var v5817 = TokenID$$1._map;
    v5817[107] = "StringLiteral";
    TokenID$$1.StringLiteral = 107;
    var v5818 = TokenID$$1._map;
    v5818[108] = "RegularExpressionLiteral";
    TokenID$$1.RegularExpressionLiteral = 108;
    var v5819 = TokenID$$1._map;
    v5819[109] = "NumberLiteral";
    TokenID$$1.NumberLiteral = 109;
    var v5820 = TokenID$$1._map;
    v5820[110] = "Whitespace";
    TokenID$$1.Whitespace = 110;
    var v5821 = TokenID$$1._map;
    v5821[111] = "Comment";
    TokenID$$1.Comment = 111;
    var v5822 = TokenID$$1._map;
    v5822[112] = "Lim";
    TokenID$$1.Lim = 112;
    TokenID$$1.LimFixed = TokenID$$1.EqualsGreaterThan;
    TokenID$$1.LimKeyword = TokenID$$1.Yield;
    return;
  }
  function setTokenInfo(tokenId$$44, reservation, binopPrecedence, binopNodeType, unopPrecedence, unopNodeType, text$$21, ers$$1) {
    var v5829 = tokenId$$44 !== undefined;
    if (v5829) {
      var v5823 = TypeScript$$22.tokenTable;
      var v26659 = JAM.new(TokenInfo, [tokenId$$44, reservation, binopPrecedence, binopNodeType, unopPrecedence, unopNodeType, text$$21, ers$$1]);
      JAM.set(v5823, tokenId$$44, v26659);
      var v20142 = TypeScript$$22.NodeType;
      var v14781 = v20142.None;
      var v5826 = binopNodeType != v14781;
      if (v5826) {
        var v5824 = TypeScript$$22.nodeTypeTable;
        JAM.set(v5824, binopNodeType, text$$21);
        var v5825 = TypeScript$$22.nodeTypeToTokTable;
        JAM.set(v5825, binopNodeType, tokenId$$44);
      }
      var v20143 = TypeScript$$22.NodeType;
      var v14782 = v20143.None;
      var v5828 = unopNodeType != v14782;
      if (v5828) {
        var v5827 = TypeScript$$22.nodeTypeTable;
        JAM.set(v5827, unopNodeType, text$$21);
      }
    }
    return;
  }
  function lookupToken(tokenId$$45) {
    var v5830 = TypeScript$$22.tokenTable;
    return v5830[tokenId$$45];
  }
  function initializeStaticTokens() {
    var i$$73 = 0;
    var v14783 = TokenID.LimFixed;
    var v5832 = i$$73 <= v14783;
    for (;v5832;) {
      var v5831 = TypeScript$$22.staticTokens;
      var v26660 = JAM.new(Token, [i$$73]);
      v5831[i$$73] = v26660;
      i$$73++;
      var v14784 = TokenID.LimFixed;
      v5832 = i$$73 <= v14784;
    }
    return;
  }
  var v14785 = TypeScript$$22.TokenID;
  var v20144 = !v14785;
  if (v20144) {
    v14785 = TypeScript$$22.TokenID = {};
  }
  var v5833 = v14785;
  v863(v5833);
  var TokenID = TypeScript$$22.TokenID;
  var v5834 = TypeScript$$22;
  var v26661 = new Array;
  v5834.tokenTable = v26661;
  var v5835 = TypeScript$$22;
  var v26662 = new Array;
  v5835.nodeTypeTable = v26662;
  var v5836 = TypeScript$$22;
  var v26663 = new Array;
  v5836.nodeTypeToTokTable = v26663;
  var v5837 = TypeScript$$22;
  var v26664 = new Array;
  v5837.noRegexTable = v26664;
  var v5838 = TypeScript$$22.noRegexTable;
  var v5839 = TokenID.Identifier;
  v5838[v5839] = true;
  var v5840 = TypeScript$$22.noRegexTable;
  var v5841 = TokenID.StringLiteral;
  v5840[v5841] = true;
  var v5842 = TypeScript$$22.noRegexTable;
  var v5843 = TokenID.NumberLiteral;
  v5842[v5843] = true;
  var v5844 = TypeScript$$22.noRegexTable;
  var v5845 = TokenID.RegularExpressionLiteral;
  v5844[v5845] = true;
  var v5846 = TypeScript$$22.noRegexTable;
  var v5847 = TokenID.This;
  v5846[v5847] = true;
  var v5848 = TypeScript$$22.noRegexTable;
  var v5849 = TokenID.PlusPlus;
  v5848[v5849] = true;
  var v5850 = TypeScript$$22.noRegexTable;
  var v5851 = TokenID.MinusMinus;
  v5850[v5851] = true;
  var v5852 = TypeScript$$22.noRegexTable;
  var v5853 = TokenID.CloseParen;
  v5852[v5853] = true;
  var v5854 = TypeScript$$22.noRegexTable;
  var v5855 = TokenID.CloseBracket;
  v5854[v5855] = true;
  var v5856 = TypeScript$$22.noRegexTable;
  var v5857 = TokenID.CloseBrace;
  v5856[v5857] = true;
  var v5858 = TypeScript$$22.noRegexTable;
  var v5859 = TokenID.True;
  v5858[v5859] = true;
  var v5860 = TypeScript$$22.noRegexTable;
  var v5861 = TokenID.False;
  v5860[v5861] = true;
  var v14786 = TypeScript$$22.OperatorPrecedence;
  var v20145 = !v14786;
  if (v20145) {
    v14786 = TypeScript$$22.OperatorPrecedence = {};
  }
  var v5862 = v14786;
  v864(v5862);
  var OperatorPrecedence = TypeScript$$22.OperatorPrecedence;
  var v14787 = TypeScript$$22.Reservation;
  var v20146 = !v14787;
  if (v20146) {
    v14787 = TypeScript$$22.Reservation = {};
  }
  var v5863 = v14787;
  v865(v5863);
  var Reservation = TypeScript$$22.Reservation;
  var TokenInfo = v866();
  TypeScript$$22.TokenInfo = TokenInfo;
  var v5864 = TokenID.Any;
  var v5865 = Reservation.TypeScript;
  var v5866 = OperatorPrecedence.None;
  var v14788 = TypeScript$$22.NodeType;
  var v5867 = v14788.None;
  var v5868 = OperatorPrecedence.None;
  var v14789 = TypeScript$$22.NodeType;
  var v5869 = v14789.None;
  var v14790 = TypeScript$$22.ErrorRecoverySet;
  var v5870 = v14790.PrimType;
  setTokenInfo(v5864, v5865, v5866, v5867, v5868, v5869, "any", v5870);
  var v5871 = TokenID.Bool;
  var v5872 = Reservation.TypeScript;
  var v5873 = OperatorPrecedence.None;
  var v14791 = TypeScript$$22.NodeType;
  var v5874 = v14791.None;
  var v5875 = OperatorPrecedence.None;
  var v14792 = TypeScript$$22.NodeType;
  var v5876 = v14792.None;
  var v14793 = TypeScript$$22.ErrorRecoverySet;
  var v5877 = v14793.PrimType;
  setTokenInfo(v5871, v5872, v5873, v5874, v5875, v5876, "bool", v5877);
  var v5878 = TokenID.Break;
  var v5879 = Reservation.TypeScriptAndJS;
  var v5880 = OperatorPrecedence.None;
  var v14794 = TypeScript$$22.NodeType;
  var v5881 = v14794.None;
  var v5882 = OperatorPrecedence.None;
  var v14795 = TypeScript$$22.NodeType;
  var v5883 = v14795.None;
  var v14796 = TypeScript$$22.ErrorRecoverySet;
  var v5884 = v14796.Stmt;
  setTokenInfo(v5878, v5879, v5880, v5881, v5882, v5883, "break", v5884);
  var v5885 = TokenID.Case;
  var v5886 = Reservation.TypeScriptAndJS;
  var v5887 = OperatorPrecedence.None;
  var v14797 = TypeScript$$22.NodeType;
  var v5888 = v14797.None;
  var v5889 = OperatorPrecedence.None;
  var v14798 = TypeScript$$22.NodeType;
  var v5890 = v14798.None;
  var v14799 = TypeScript$$22.ErrorRecoverySet;
  var v5891 = v14799.SCase;
  setTokenInfo(v5885, v5886, v5887, v5888, v5889, v5890, "case", v5891);
  var v5892 = TokenID.Catch;
  var v5893 = Reservation.TypeScriptAndJS;
  var v5894 = OperatorPrecedence.None;
  var v14800 = TypeScript$$22.NodeType;
  var v5895 = v14800.None;
  var v5896 = OperatorPrecedence.None;
  var v14801 = TypeScript$$22.NodeType;
  var v5897 = v14801.None;
  var v14802 = TypeScript$$22.ErrorRecoverySet;
  var v5898 = v14802.Catch;
  setTokenInfo(v5892, v5893, v5894, v5895, v5896, v5897, "catch", v5898);
  var v5899 = TokenID.Class;
  var v5900 = Reservation.TypeScriptAndJSFuture;
  var v5901 = OperatorPrecedence.None;
  var v14803 = TypeScript$$22.NodeType;
  var v5902 = v14803.None;
  var v5903 = OperatorPrecedence.None;
  var v14804 = TypeScript$$22.NodeType;
  var v5904 = v14804.None;
  var v14805 = TypeScript$$22.ErrorRecoverySet;
  var v5905 = v14805.TypeScriptS;
  setTokenInfo(v5899, v5900, v5901, v5902, v5903, v5904, "class", v5905);
  var v5906 = TokenID.Const;
  var v5907 = Reservation.TypeScriptAndJSFuture;
  var v5908 = OperatorPrecedence.None;
  var v14806 = TypeScript$$22.NodeType;
  var v5909 = v14806.None;
  var v5910 = OperatorPrecedence.None;
  var v14807 = TypeScript$$22.NodeType;
  var v5911 = v14807.None;
  var v14808 = TypeScript$$22.ErrorRecoverySet;
  var v5912 = v14808.Var;
  setTokenInfo(v5906, v5907, v5908, v5909, v5910, v5911, "const", v5912);
  var v5913 = TokenID.Continue;
  var v5914 = Reservation.TypeScriptAndJS;
  var v5915 = OperatorPrecedence.None;
  var v14809 = TypeScript$$22.NodeType;
  var v5916 = v14809.None;
  var v5917 = OperatorPrecedence.None;
  var v14810 = TypeScript$$22.NodeType;
  var v5918 = v14810.None;
  var v14811 = TypeScript$$22.ErrorRecoverySet;
  var v5919 = v14811.Stmt;
  setTokenInfo(v5913, v5914, v5915, v5916, v5917, v5918, "continue", v5919);
  var v5920 = TokenID.Debugger;
  var v5921 = Reservation.TypeScriptAndJS;
  var v5922 = OperatorPrecedence.None;
  var v14812 = TypeScript$$22.NodeType;
  var v5923 = v14812.None;
  var v5924 = OperatorPrecedence.None;
  var v14813 = TypeScript$$22.NodeType;
  var v5925 = v14813.Debugger;
  var v14814 = TypeScript$$22.ErrorRecoverySet;
  var v5926 = v14814.Stmt;
  setTokenInfo(v5920, v5921, v5922, v5923, v5924, v5925, "debugger", v5926);
  var v5927 = TokenID.Default;
  var v5928 = Reservation.TypeScriptAndJS;
  var v5929 = OperatorPrecedence.None;
  var v14815 = TypeScript$$22.NodeType;
  var v5930 = v14815.None;
  var v5931 = OperatorPrecedence.None;
  var v14816 = TypeScript$$22.NodeType;
  var v5932 = v14816.None;
  var v14817 = TypeScript$$22.ErrorRecoverySet;
  var v5933 = v14817.SCase;
  setTokenInfo(v5927, v5928, v5929, v5930, v5931, v5932, "default", v5933);
  var v5934 = TokenID.Delete;
  var v5935 = Reservation.TypeScriptAndJS;
  var v5936 = OperatorPrecedence.None;
  var v14818 = TypeScript$$22.NodeType;
  var v5937 = v14818.None;
  var v5938 = OperatorPrecedence.Unary;
  var v14819 = TypeScript$$22.NodeType;
  var v5939 = v14819.Delete;
  var v14820 = TypeScript$$22.ErrorRecoverySet;
  var v5940 = v14820.Prefix;
  setTokenInfo(v5934, v5935, v5936, v5937, v5938, v5939, "delete", v5940);
  var v5941 = TokenID.Do;
  var v5942 = Reservation.TypeScriptAndJS;
  var v5943 = OperatorPrecedence.None;
  var v14821 = TypeScript$$22.NodeType;
  var v5944 = v14821.None;
  var v5945 = OperatorPrecedence.None;
  var v14822 = TypeScript$$22.NodeType;
  var v5946 = v14822.None;
  var v14823 = TypeScript$$22.ErrorRecoverySet;
  var v5947 = v14823.Stmt;
  setTokenInfo(v5941, v5942, v5943, v5944, v5945, v5946, "do", v5947);
  var v5948 = TokenID.Else;
  var v5949 = Reservation.TypeScriptAndJS;
  var v5950 = OperatorPrecedence.None;
  var v14824 = TypeScript$$22.NodeType;
  var v5951 = v14824.None;
  var v5952 = OperatorPrecedence.None;
  var v14825 = TypeScript$$22.NodeType;
  var v5953 = v14825.None;
  var v14826 = TypeScript$$22.ErrorRecoverySet;
  var v5954 = v14826.Else;
  setTokenInfo(v5948, v5949, v5950, v5951, v5952, v5953, "else", v5954);
  var v5955 = TokenID.Enum;
  var v5956 = Reservation.TypeScriptAndJSFuture;
  var v5957 = OperatorPrecedence.None;
  var v14827 = TypeScript$$22.NodeType;
  var v5958 = v14827.None;
  var v5959 = OperatorPrecedence.None;
  var v14828 = TypeScript$$22.NodeType;
  var v5960 = v14828.None;
  var v14829 = TypeScript$$22.ErrorRecoverySet;
  var v5961 = v14829.TypeScriptS;
  setTokenInfo(v5955, v5956, v5957, v5958, v5959, v5960, "enum", v5961);
  var v5962 = TokenID.Export;
  var v5963 = Reservation.TypeScriptAndJSFuture;
  var v5964 = OperatorPrecedence.None;
  var v14830 = TypeScript$$22.NodeType;
  var v5965 = v14830.None;
  var v5966 = OperatorPrecedence.None;
  var v14831 = TypeScript$$22.NodeType;
  var v5967 = v14831.None;
  var v14832 = TypeScript$$22.ErrorRecoverySet;
  var v5968 = v14832.TypeScriptS;
  setTokenInfo(v5962, v5963, v5964, v5965, v5966, v5967, "export", v5968);
  var v5969 = TokenID.Extends;
  var v5970 = Reservation.TypeScriptAndJSFuture;
  var v5971 = OperatorPrecedence.None;
  var v14833 = TypeScript$$22.NodeType;
  var v5972 = v14833.None;
  var v5973 = OperatorPrecedence.None;
  var v14834 = TypeScript$$22.NodeType;
  var v5974 = v14834.None;
  var v14835 = TypeScript$$22.ErrorRecoverySet;
  var v5975 = v14835.None;
  setTokenInfo(v5969, v5970, v5971, v5972, v5973, v5974, "extends", v5975);
  var v5976 = TokenID.Declare;
  var v5977 = Reservation.TypeScript;
  var v5978 = OperatorPrecedence.None;
  var v14836 = TypeScript$$22.NodeType;
  var v5979 = v14836.None;
  var v5980 = OperatorPrecedence.None;
  var v14837 = TypeScript$$22.NodeType;
  var v5981 = v14837.None;
  var v14838 = TypeScript$$22.ErrorRecoverySet;
  var v5982 = v14838.Stmt;
  setTokenInfo(v5976, v5977, v5978, v5979, v5980, v5981, "declare", v5982);
  var v5983 = TokenID.False;
  var v5984 = Reservation.TypeScriptAndJS;
  var v5985 = OperatorPrecedence.None;
  var v14839 = TypeScript$$22.NodeType;
  var v5986 = v14839.None;
  var v5987 = OperatorPrecedence.None;
  var v14840 = TypeScript$$22.NodeType;
  var v5988 = v14840.None;
  var v14841 = TypeScript$$22.ErrorRecoverySet;
  var v5989 = v14841.RLit;
  setTokenInfo(v5983, v5984, v5985, v5986, v5987, v5988, "false", v5989);
  var v5990 = TokenID.Finally;
  var v5991 = Reservation.TypeScriptAndJS;
  var v5992 = OperatorPrecedence.None;
  var v14842 = TypeScript$$22.NodeType;
  var v5993 = v14842.None;
  var v5994 = OperatorPrecedence.None;
  var v14843 = TypeScript$$22.NodeType;
  var v5995 = v14843.None;
  var v14844 = TypeScript$$22.ErrorRecoverySet;
  var v5996 = v14844.Catch;
  setTokenInfo(v5990, v5991, v5992, v5993, v5994, v5995, "finally", v5996);
  var v5997 = TokenID.For;
  var v5998 = Reservation.TypeScriptAndJS;
  var v5999 = OperatorPrecedence.None;
  var v14845 = TypeScript$$22.NodeType;
  var v6000 = v14845.None;
  var v6001 = OperatorPrecedence.None;
  var v14846 = TypeScript$$22.NodeType;
  var v6002 = v14846.None;
  var v14847 = TypeScript$$22.ErrorRecoverySet;
  var v6003 = v14847.Stmt;
  setTokenInfo(v5997, v5998, v5999, v6000, v6001, v6002, "for", v6003);
  var v6004 = TokenID.Function;
  var v6005 = Reservation.TypeScriptAndJS;
  var v6006 = OperatorPrecedence.None;
  var v14848 = TypeScript$$22.NodeType;
  var v6007 = v14848.None;
  var v6008 = OperatorPrecedence.None;
  var v14849 = TypeScript$$22.NodeType;
  var v6009 = v14849.None;
  var v14850 = TypeScript$$22.ErrorRecoverySet;
  var v6010 = v14850.Func;
  setTokenInfo(v6004, v6005, v6006, v6007, v6008, v6009, "function", v6010);
  var v6011 = TokenID.Constructor;
  var v6012 = Reservation.TypeScriptAndJSFutureStrict;
  var v6013 = OperatorPrecedence.None;
  var v14851 = TypeScript$$22.NodeType;
  var v6014 = v14851.None;
  var v6015 = OperatorPrecedence.None;
  var v14852 = TypeScript$$22.NodeType;
  var v6016 = v14852.None;
  var v14853 = TypeScript$$22.ErrorRecoverySet;
  var v6017 = v14853.Func;
  setTokenInfo(v6011, v6012, v6013, v6014, v6015, v6016, "constructor", v6017);
  var v6018 = TokenID.Get;
  var v6019 = Reservation.TypeScript;
  var v6020 = OperatorPrecedence.None;
  var v14854 = TypeScript$$22.NodeType;
  var v6021 = v14854.None;
  var v6022 = OperatorPrecedence.None;
  var v14855 = TypeScript$$22.NodeType;
  var v6023 = v14855.None;
  var v14856 = TypeScript$$22.ErrorRecoverySet;
  var v6024 = v14856.Func;
  setTokenInfo(v6018, v6019, v6020, v6021, v6022, v6023, "get", v6024);
  var v6025 = TokenID.Set;
  var v6026 = Reservation.TypeScript;
  var v6027 = OperatorPrecedence.None;
  var v14857 = TypeScript$$22.NodeType;
  var v6028 = v14857.None;
  var v6029 = OperatorPrecedence.None;
  var v14858 = TypeScript$$22.NodeType;
  var v6030 = v14858.None;
  var v14859 = TypeScript$$22.ErrorRecoverySet;
  var v6031 = v14859.Func;
  setTokenInfo(v6025, v6026, v6027, v6028, v6029, v6030, "set", v6031);
  var v6032 = TokenID.If;
  var v6033 = Reservation.TypeScriptAndJS;
  var v6034 = OperatorPrecedence.None;
  var v14860 = TypeScript$$22.NodeType;
  var v6035 = v14860.None;
  var v6036 = OperatorPrecedence.None;
  var v14861 = TypeScript$$22.NodeType;
  var v6037 = v14861.None;
  var v14862 = TypeScript$$22.ErrorRecoverySet;
  var v6038 = v14862.Stmt;
  setTokenInfo(v6032, v6033, v6034, v6035, v6036, v6037, "if", v6038);
  var v6039 = TokenID.Implements;
  var v6040 = Reservation.TypeScriptAndJSFutureStrict;
  var v6041 = OperatorPrecedence.None;
  var v14863 = TypeScript$$22.NodeType;
  var v6042 = v14863.None;
  var v6043 = OperatorPrecedence.None;
  var v14864 = TypeScript$$22.NodeType;
  var v6044 = v14864.None;
  var v14865 = TypeScript$$22.ErrorRecoverySet;
  var v6045 = v14865.None;
  setTokenInfo(v6039, v6040, v6041, v6042, v6043, v6044, "implements", v6045);
  var v6046 = TokenID.Import;
  var v6047 = Reservation.TypeScriptAndJSFuture;
  var v6048 = OperatorPrecedence.None;
  var v14866 = TypeScript$$22.NodeType;
  var v6049 = v14866.None;
  var v6050 = OperatorPrecedence.None;
  var v14867 = TypeScript$$22.NodeType;
  var v6051 = v14867.None;
  var v14868 = TypeScript$$22.ErrorRecoverySet;
  var v6052 = v14868.TypeScriptS;
  setTokenInfo(v6046, v6047, v6048, v6049, v6050, v6051, "import", v6052);
  var v6053 = TokenID.In;
  var v6054 = Reservation.TypeScriptAndJS;
  var v6055 = OperatorPrecedence.Relational;
  var v14869 = TypeScript$$22.NodeType;
  var v6056 = v14869.In;
  var v6057 = OperatorPrecedence.None;
  var v14870 = TypeScript$$22.NodeType;
  var v6058 = v14870.None;
  var v14871 = TypeScript$$22.ErrorRecoverySet;
  var v6059 = v14871.None;
  setTokenInfo(v6053, v6054, v6055, v6056, v6057, v6058, "in", v6059);
  var v6060 = TokenID.InstanceOf;
  var v6061 = Reservation.TypeScriptAndJS;
  var v6062 = OperatorPrecedence.Relational;
  var v14872 = TypeScript$$22.NodeType;
  var v6063 = v14872.InstOf;
  var v6064 = OperatorPrecedence.None;
  var v14873 = TypeScript$$22.NodeType;
  var v6065 = v14873.None;
  var v14874 = TypeScript$$22.ErrorRecoverySet;
  var v6066 = v14874.BinOp;
  setTokenInfo(v6060, v6061, v6062, v6063, v6064, v6065, "instanceof", v6066);
  var v6067 = TokenID.Interface;
  var v6068 = Reservation.TypeScriptAndJSFutureStrict;
  var v6069 = OperatorPrecedence.None;
  var v14875 = TypeScript$$22.NodeType;
  var v6070 = v14875.None;
  var v6071 = OperatorPrecedence.None;
  var v14876 = TypeScript$$22.NodeType;
  var v6072 = v14876.None;
  var v14877 = TypeScript$$22.ErrorRecoverySet;
  var v6073 = v14877.TypeScriptS;
  setTokenInfo(v6067, v6068, v6069, v6070, v6071, v6072, "interface", v6073);
  var v6074 = TokenID.Let;
  var v6075 = Reservation.JavascriptFutureStrict;
  var v6076 = OperatorPrecedence.None;
  var v14878 = TypeScript$$22.NodeType;
  var v6077 = v14878.None;
  var v6078 = OperatorPrecedence.None;
  var v14879 = TypeScript$$22.NodeType;
  var v6079 = v14879.None;
  var v14880 = TypeScript$$22.ErrorRecoverySet;
  var v6080 = v14880.None;
  setTokenInfo(v6074, v6075, v6076, v6077, v6078, v6079, "let", v6080);
  var v6081 = TokenID.Module;
  var v6082 = Reservation.TypeScript;
  var v6083 = OperatorPrecedence.None;
  var v14881 = TypeScript$$22.NodeType;
  var v6084 = v14881.None;
  var v6085 = OperatorPrecedence.None;
  var v14882 = TypeScript$$22.NodeType;
  var v6086 = v14882.None;
  var v14883 = TypeScript$$22.ErrorRecoverySet;
  var v6087 = v14883.TypeScriptS;
  setTokenInfo(v6081, v6082, v6083, v6084, v6085, v6086, "module", v6087);
  var v6088 = TokenID.New;
  var v6089 = Reservation.TypeScriptAndJS;
  var v6090 = OperatorPrecedence.None;
  var v14884 = TypeScript$$22.NodeType;
  var v6091 = v14884.None;
  var v6092 = OperatorPrecedence.None;
  var v14885 = TypeScript$$22.NodeType;
  var v6093 = v14885.None;
  var v14886 = TypeScript$$22.ErrorRecoverySet;
  var v6094 = v14886.PreOp;
  setTokenInfo(v6088, v6089, v6090, v6091, v6092, v6093, "new", v6094);
  var v6095 = TokenID.Number;
  var v6096 = Reservation.TypeScript;
  var v6097 = OperatorPrecedence.None;
  var v14887 = TypeScript$$22.NodeType;
  var v6098 = v14887.None;
  var v6099 = OperatorPrecedence.None;
  var v14888 = TypeScript$$22.NodeType;
  var v6100 = v14888.None;
  var v14889 = TypeScript$$22.ErrorRecoverySet;
  var v6101 = v14889.PrimType;
  setTokenInfo(v6095, v6096, v6097, v6098, v6099, v6100, "number", v6101);
  var v6102 = TokenID.Null;
  var v6103 = Reservation.TypeScriptAndJS;
  var v6104 = OperatorPrecedence.None;
  var v14890 = TypeScript$$22.NodeType;
  var v6105 = v14890.None;
  var v6106 = OperatorPrecedence.None;
  var v14891 = TypeScript$$22.NodeType;
  var v6107 = v14891.None;
  var v14892 = TypeScript$$22.ErrorRecoverySet;
  var v6108 = v14892.RLit;
  setTokenInfo(v6102, v6103, v6104, v6105, v6106, v6107, "null", v6108);
  var v6109 = TokenID.Package;
  var v6110 = Reservation.JavascriptFutureStrict;
  var v6111 = OperatorPrecedence.None;
  var v14893 = TypeScript$$22.NodeType;
  var v6112 = v14893.None;
  var v6113 = OperatorPrecedence.None;
  var v14894 = TypeScript$$22.NodeType;
  var v6114 = v14894.None;
  var v14895 = TypeScript$$22.ErrorRecoverySet;
  var v6115 = v14895.None;
  setTokenInfo(v6109, v6110, v6111, v6112, v6113, v6114, "package", v6115);
  var v6116 = TokenID.Private;
  var v6117 = Reservation.TypeScriptAndJSFutureStrict;
  var v6118 = OperatorPrecedence.None;
  var v14896 = TypeScript$$22.NodeType;
  var v6119 = v14896.None;
  var v6120 = OperatorPrecedence.None;
  var v14897 = TypeScript$$22.NodeType;
  var v6121 = v14897.None;
  var v14898 = TypeScript$$22.ErrorRecoverySet;
  var v6122 = v14898.TypeScriptS;
  setTokenInfo(v6116, v6117, v6118, v6119, v6120, v6121, "private", v6122);
  var v6123 = TokenID.Protected;
  var v6124 = Reservation.JavascriptFutureStrict;
  var v6125 = OperatorPrecedence.None;
  var v14899 = TypeScript$$22.NodeType;
  var v6126 = v14899.None;
  var v6127 = OperatorPrecedence.None;
  var v14900 = TypeScript$$22.NodeType;
  var v6128 = v14900.None;
  var v14901 = TypeScript$$22.ErrorRecoverySet;
  var v6129 = v14901.None;
  setTokenInfo(v6123, v6124, v6125, v6126, v6127, v6128, "protected", v6129);
  var v6130 = TokenID.Public;
  var v6131 = Reservation.TypeScriptAndJSFutureStrict;
  var v6132 = OperatorPrecedence.None;
  var v14902 = TypeScript$$22.NodeType;
  var v6133 = v14902.None;
  var v6134 = OperatorPrecedence.None;
  var v14903 = TypeScript$$22.NodeType;
  var v6135 = v14903.None;
  var v14904 = TypeScript$$22.ErrorRecoverySet;
  var v6136 = v14904.TypeScriptS;
  setTokenInfo(v6130, v6131, v6132, v6133, v6134, v6135, "public", v6136);
  var v6137 = TokenID.Return;
  var v6138 = Reservation.TypeScriptAndJS;
  var v6139 = OperatorPrecedence.None;
  var v14905 = TypeScript$$22.NodeType;
  var v6140 = v14905.None;
  var v6141 = OperatorPrecedence.None;
  var v14906 = TypeScript$$22.NodeType;
  var v6142 = v14906.None;
  var v14907 = TypeScript$$22.ErrorRecoverySet;
  var v6143 = v14907.Stmt;
  setTokenInfo(v6137, v6138, v6139, v6140, v6141, v6142, "return", v6143);
  var v6144 = TokenID.Static;
  var v6145 = Reservation.TypeScriptAndJSFutureStrict;
  var v6146 = OperatorPrecedence.None;
  var v14908 = TypeScript$$22.NodeType;
  var v6147 = v14908.None;
  var v6148 = OperatorPrecedence.None;
  var v14909 = TypeScript$$22.NodeType;
  var v6149 = v14909.None;
  var v14910 = TypeScript$$22.ErrorRecoverySet;
  var v6150 = v14910.None;
  setTokenInfo(v6144, v6145, v6146, v6147, v6148, v6149, "static", v6150);
  var v6151 = TokenID.String;
  var v6152 = Reservation.TypeScript;
  var v6153 = OperatorPrecedence.None;
  var v14911 = TypeScript$$22.NodeType;
  var v6154 = v14911.None;
  var v6155 = OperatorPrecedence.None;
  var v14912 = TypeScript$$22.NodeType;
  var v6156 = v14912.None;
  var v14913 = TypeScript$$22.ErrorRecoverySet;
  var v6157 = v14913.PrimType;
  setTokenInfo(v6151, v6152, v6153, v6154, v6155, v6156, "string", v6157);
  var v6158 = TokenID.Super;
  var v6159 = Reservation.TypeScriptAndJSFuture;
  var v6160 = OperatorPrecedence.None;
  var v14914 = TypeScript$$22.NodeType;
  var v6161 = v14914.None;
  var v6162 = OperatorPrecedence.None;
  var v14915 = TypeScript$$22.NodeType;
  var v6163 = v14915.None;
  var v14916 = TypeScript$$22.ErrorRecoverySet;
  var v6164 = v14916.RLit;
  setTokenInfo(v6158, v6159, v6160, v6161, v6162, v6163, "super", v6164);
  var v6165 = TokenID.Switch;
  var v6166 = Reservation.TypeScriptAndJS;
  var v6167 = OperatorPrecedence.None;
  var v14917 = TypeScript$$22.NodeType;
  var v6168 = v14917.None;
  var v6169 = OperatorPrecedence.None;
  var v14918 = TypeScript$$22.NodeType;
  var v6170 = v14918.None;
  var v14919 = TypeScript$$22.ErrorRecoverySet;
  var v6171 = v14919.Stmt;
  setTokenInfo(v6165, v6166, v6167, v6168, v6169, v6170, "switch", v6171);
  var v6172 = TokenID.This;
  var v6173 = Reservation.TypeScriptAndJS;
  var v6174 = OperatorPrecedence.None;
  var v14920 = TypeScript$$22.NodeType;
  var v6175 = v14920.None;
  var v6176 = OperatorPrecedence.None;
  var v14921 = TypeScript$$22.NodeType;
  var v6177 = v14921.None;
  var v14922 = TypeScript$$22.ErrorRecoverySet;
  var v6178 = v14922.RLit;
  setTokenInfo(v6172, v6173, v6174, v6175, v6176, v6177, "this", v6178);
  var v6179 = TokenID.Throw;
  var v6180 = Reservation.TypeScriptAndJS;
  var v6181 = OperatorPrecedence.None;
  var v14923 = TypeScript$$22.NodeType;
  var v6182 = v14923.None;
  var v6183 = OperatorPrecedence.None;
  var v14924 = TypeScript$$22.NodeType;
  var v6184 = v14924.None;
  var v14925 = TypeScript$$22.ErrorRecoverySet;
  var v6185 = v14925.Stmt;
  setTokenInfo(v6179, v6180, v6181, v6182, v6183, v6184, "throw", v6185);
  var v6186 = TokenID.True;
  var v6187 = Reservation.TypeScriptAndJS;
  var v6188 = OperatorPrecedence.None;
  var v14926 = TypeScript$$22.NodeType;
  var v6189 = v14926.None;
  var v6190 = OperatorPrecedence.None;
  var v14927 = TypeScript$$22.NodeType;
  var v6191 = v14927.None;
  var v14928 = TypeScript$$22.ErrorRecoverySet;
  var v6192 = v14928.RLit;
  setTokenInfo(v6186, v6187, v6188, v6189, v6190, v6191, "true", v6192);
  var v6193 = TokenID.Try;
  var v6194 = Reservation.TypeScriptAndJS;
  var v6195 = OperatorPrecedence.None;
  var v14929 = TypeScript$$22.NodeType;
  var v6196 = v14929.None;
  var v6197 = OperatorPrecedence.None;
  var v14930 = TypeScript$$22.NodeType;
  var v6198 = v14930.None;
  var v14931 = TypeScript$$22.ErrorRecoverySet;
  var v6199 = v14931.Stmt;
  setTokenInfo(v6193, v6194, v6195, v6196, v6197, v6198, "try", v6199);
  var v6200 = TokenID.TypeOf;
  var v6201 = Reservation.TypeScriptAndJS;
  var v6202 = OperatorPrecedence.None;
  var v14932 = TypeScript$$22.NodeType;
  var v6203 = v14932.None;
  var v6204 = OperatorPrecedence.Unary;
  var v14933 = TypeScript$$22.NodeType;
  var v6205 = v14933.Typeof;
  var v14934 = TypeScript$$22.ErrorRecoverySet;
  var v6206 = v14934.Prefix;
  setTokenInfo(v6200, v6201, v6202, v6203, v6204, v6205, "typeof", v6206);
  var v6207 = TokenID.Var;
  var v6208 = Reservation.TypeScriptAndJS;
  var v6209 = OperatorPrecedence.None;
  var v14935 = TypeScript$$22.NodeType;
  var v6210 = v14935.None;
  var v6211 = OperatorPrecedence.None;
  var v14936 = TypeScript$$22.NodeType;
  var v6212 = v14936.None;
  var v14937 = TypeScript$$22.ErrorRecoverySet;
  var v6213 = v14937.Var;
  setTokenInfo(v6207, v6208, v6209, v6210, v6211, v6212, "var", v6213);
  var v6214 = TokenID.Void;
  var v6215 = Reservation.TypeScriptAndJS;
  var v6216 = OperatorPrecedence.None;
  var v14938 = TypeScript$$22.NodeType;
  var v6217 = v14938.None;
  var v6218 = OperatorPrecedence.Unary;
  var v14939 = TypeScript$$22.NodeType;
  var v6219 = v14939.Void;
  var v14940 = TypeScript$$22.ErrorRecoverySet;
  var v6220 = v14940.Prefix;
  setTokenInfo(v6214, v6215, v6216, v6217, v6218, v6219, "void", v6220);
  var v6221 = TokenID.With;
  var v6222 = Reservation.TypeScriptAndJS;
  var v6223 = OperatorPrecedence.None;
  var v14941 = TypeScript$$22.NodeType;
  var v6224 = v14941.None;
  var v6225 = OperatorPrecedence.None;
  var v14942 = TypeScript$$22.NodeType;
  var v6226 = v14942.With;
  var v14943 = TypeScript$$22.ErrorRecoverySet;
  var v6227 = v14943.Stmt;
  setTokenInfo(v6221, v6222, v6223, v6224, v6225, v6226, "with", v6227);
  var v6228 = TokenID.While;
  var v6229 = Reservation.TypeScriptAndJS;
  var v6230 = OperatorPrecedence.None;
  var v14944 = TypeScript$$22.NodeType;
  var v6231 = v14944.None;
  var v6232 = OperatorPrecedence.None;
  var v14945 = TypeScript$$22.NodeType;
  var v6233 = v14945.None;
  var v14946 = TypeScript$$22.ErrorRecoverySet;
  var v6234 = v14946.While;
  setTokenInfo(v6228, v6229, v6230, v6231, v6232, v6233, "while", v6234);
  var v6235 = TokenID.Yield;
  var v6236 = Reservation.JavascriptFutureStrict;
  var v6237 = OperatorPrecedence.None;
  var v14947 = TypeScript$$22.NodeType;
  var v6238 = v14947.None;
  var v6239 = OperatorPrecedence.None;
  var v14948 = TypeScript$$22.NodeType;
  var v6240 = v14948.None;
  var v14949 = TypeScript$$22.ErrorRecoverySet;
  var v6241 = v14949.None;
  setTokenInfo(v6235, v6236, v6237, v6238, v6239, v6240, "yield", v6241);
  var v6242 = TokenID.Identifier;
  var v6243 = Reservation.None;
  var v6244 = OperatorPrecedence.None;
  var v14950 = TypeScript$$22.NodeType;
  var v6245 = v14950.None;
  var v6246 = OperatorPrecedence.None;
  var v14951 = TypeScript$$22.NodeType;
  var v6247 = v14951.None;
  var v14952 = TypeScript$$22.ErrorRecoverySet;
  var v6248 = v14952.ID;
  setTokenInfo(v6242, v6243, v6244, v6245, v6246, v6247, "identifier", v6248);
  var v6249 = TokenID.NumberLiteral;
  var v6250 = Reservation.None;
  var v6251 = OperatorPrecedence.None;
  var v14953 = TypeScript$$22.NodeType;
  var v6252 = v14953.None;
  var v6253 = OperatorPrecedence.None;
  var v14954 = TypeScript$$22.NodeType;
  var v6254 = v14954.None;
  var v14955 = TypeScript$$22.ErrorRecoverySet;
  var v6255 = v14955.Literal;
  setTokenInfo(v6249, v6250, v6251, v6252, v6253, v6254, "numberLiteral", v6255);
  var v6256 = TokenID.RegularExpressionLiteral;
  var v6257 = Reservation.None;
  var v6258 = OperatorPrecedence.None;
  var v14956 = TypeScript$$22.NodeType;
  var v6259 = v14956.None;
  var v6260 = OperatorPrecedence.None;
  var v14957 = TypeScript$$22.NodeType;
  var v6261 = v14957.None;
  var v14958 = TypeScript$$22.ErrorRecoverySet;
  var v6262 = v14958.RegExp;
  setTokenInfo(v6256, v6257, v6258, v6259, v6260, v6261, "regex", v6262);
  var v6263 = TokenID.StringLiteral;
  var v6264 = Reservation.None;
  var v6265 = OperatorPrecedence.None;
  var v14959 = TypeScript$$22.NodeType;
  var v6266 = v14959.None;
  var v6267 = OperatorPrecedence.None;
  var v14960 = TypeScript$$22.NodeType;
  var v6268 = v14960.None;
  var v14961 = TypeScript$$22.ErrorRecoverySet;
  var v6269 = v14961.Literal;
  setTokenInfo(v6263, v6264, v6265, v6266, v6267, v6268, "qstring", v6269);
  var v6270 = TokenID.Semicolon;
  var v6271 = Reservation.None;
  var v6272 = OperatorPrecedence.None;
  var v14962 = TypeScript$$22.NodeType;
  var v6273 = v14962.None;
  var v6274 = OperatorPrecedence.None;
  var v14963 = TypeScript$$22.NodeType;
  var v6275 = v14963.None;
  var v14964 = TypeScript$$22.ErrorRecoverySet;
  var v6276 = v14964.SColon;
  setTokenInfo(v6270, v6271, v6272, v6273, v6274, v6275, ";", v6276);
  var v6277 = TokenID.CloseParen;
  var v6278 = Reservation.None;
  var v6279 = OperatorPrecedence.None;
  var v14965 = TypeScript$$22.NodeType;
  var v6280 = v14965.None;
  var v6281 = OperatorPrecedence.None;
  var v14966 = TypeScript$$22.NodeType;
  var v6282 = v14966.None;
  var v14967 = TypeScript$$22.ErrorRecoverySet;
  var v6283 = v14967.RParen;
  setTokenInfo(v6277, v6278, v6279, v6280, v6281, v6282, ")", v6283);
  var v6284 = TokenID.CloseBracket;
  var v6285 = Reservation.None;
  var v6286 = OperatorPrecedence.None;
  var v14968 = TypeScript$$22.NodeType;
  var v6287 = v14968.None;
  var v6288 = OperatorPrecedence.None;
  var v14969 = TypeScript$$22.NodeType;
  var v6289 = v14969.None;
  var v14970 = TypeScript$$22.ErrorRecoverySet;
  var v6290 = v14970.RBrack;
  setTokenInfo(v6284, v6285, v6286, v6287, v6288, v6289, "]", v6290);
  var v6291 = TokenID.OpenBrace;
  var v6292 = Reservation.None;
  var v6293 = OperatorPrecedence.None;
  var v14971 = TypeScript$$22.NodeType;
  var v6294 = v14971.None;
  var v6295 = OperatorPrecedence.None;
  var v14972 = TypeScript$$22.NodeType;
  var v6296 = v14972.None;
  var v14973 = TypeScript$$22.ErrorRecoverySet;
  var v6297 = v14973.LCurly;
  setTokenInfo(v6291, v6292, v6293, v6294, v6295, v6296, "{", v6297);
  var v6298 = TokenID.CloseBrace;
  var v6299 = Reservation.None;
  var v6300 = OperatorPrecedence.None;
  var v14974 = TypeScript$$22.NodeType;
  var v6301 = v14974.None;
  var v6302 = OperatorPrecedence.None;
  var v14975 = TypeScript$$22.NodeType;
  var v6303 = v14975.None;
  var v14976 = TypeScript$$22.ErrorRecoverySet;
  var v6304 = v14976.RCurly;
  setTokenInfo(v6298, v6299, v6300, v6301, v6302, v6303, "}", v6304);
  var v6305 = TokenID.DotDotDot;
  var v6306 = Reservation.None;
  var v6307 = OperatorPrecedence.None;
  var v14977 = TypeScript$$22.NodeType;
  var v6308 = v14977.None;
  var v6309 = OperatorPrecedence.None;
  var v14978 = TypeScript$$22.NodeType;
  var v6310 = v14978.None;
  var v14979 = TypeScript$$22.ErrorRecoverySet;
  var v6311 = v14979.None;
  setTokenInfo(v6305, v6306, v6307, v6308, v6309, v6310, "...", v6311);
  var v6312 = TokenID.Comma;
  var v6313 = Reservation.None;
  var v6314 = OperatorPrecedence.Comma;
  var v14980 = TypeScript$$22.NodeType;
  var v6315 = v14980.Comma;
  var v6316 = OperatorPrecedence.None;
  var v14981 = TypeScript$$22.NodeType;
  var v6317 = v14981.None;
  var v14982 = TypeScript$$22.ErrorRecoverySet;
  var v6318 = v14982.Comma;
  setTokenInfo(v6312, v6313, v6314, v6315, v6316, v6317, ",", v6318);
  var v6319 = TokenID.Equals;
  var v6320 = Reservation.None;
  var v6321 = OperatorPrecedence.Assignment;
  var v14983 = TypeScript$$22.NodeType;
  var v6322 = v14983.Asg;
  var v6323 = OperatorPrecedence.None;
  var v14984 = TypeScript$$22.NodeType;
  var v6324 = v14984.None;
  var v14985 = TypeScript$$22.ErrorRecoverySet;
  var v6325 = v14985.Asg;
  setTokenInfo(v6319, v6320, v6321, v6322, v6323, v6324, "=", v6325);
  var v6326 = TokenID.PlusEquals;
  var v6327 = Reservation.None;
  var v6328 = OperatorPrecedence.Assignment;
  var v14986 = TypeScript$$22.NodeType;
  var v6329 = v14986.AsgAdd;
  var v6330 = OperatorPrecedence.None;
  var v14987 = TypeScript$$22.NodeType;
  var v6331 = v14987.None;
  var v14988 = TypeScript$$22.ErrorRecoverySet;
  var v6332 = v14988.BinOp;
  setTokenInfo(v6326, v6327, v6328, v6329, v6330, v6331, "+=", v6332);
  var v6333 = TokenID.MinusEquals;
  var v6334 = Reservation.None;
  var v6335 = OperatorPrecedence.Assignment;
  var v14989 = TypeScript$$22.NodeType;
  var v6336 = v14989.AsgSub;
  var v6337 = OperatorPrecedence.None;
  var v14990 = TypeScript$$22.NodeType;
  var v6338 = v14990.None;
  var v14991 = TypeScript$$22.ErrorRecoverySet;
  var v6339 = v14991.BinOp;
  setTokenInfo(v6333, v6334, v6335, v6336, v6337, v6338, "-=", v6339);
  var v6340 = TokenID.AsteriskEquals;
  var v6341 = Reservation.None;
  var v6342 = OperatorPrecedence.Assignment;
  var v14992 = TypeScript$$22.NodeType;
  var v6343 = v14992.AsgMul;
  var v6344 = OperatorPrecedence.None;
  var v14993 = TypeScript$$22.NodeType;
  var v6345 = v14993.None;
  var v14994 = TypeScript$$22.ErrorRecoverySet;
  var v6346 = v14994.BinOp;
  setTokenInfo(v6340, v6341, v6342, v6343, v6344, v6345, "*=", v6346);
  var v6347 = TokenID.SlashEquals;
  var v6348 = Reservation.None;
  var v6349 = OperatorPrecedence.Assignment;
  var v14995 = TypeScript$$22.NodeType;
  var v6350 = v14995.AsgDiv;
  var v6351 = OperatorPrecedence.None;
  var v14996 = TypeScript$$22.NodeType;
  var v6352 = v14996.None;
  var v14997 = TypeScript$$22.ErrorRecoverySet;
  var v6353 = v14997.BinOp;
  setTokenInfo(v6347, v6348, v6349, v6350, v6351, v6352, "/=", v6353);
  var v6354 = TokenID.PercentEquals;
  var v6355 = Reservation.None;
  var v6356 = OperatorPrecedence.Assignment;
  var v14998 = TypeScript$$22.NodeType;
  var v6357 = v14998.AsgMod;
  var v6358 = OperatorPrecedence.None;
  var v14999 = TypeScript$$22.NodeType;
  var v6359 = v14999.None;
  var v15000 = TypeScript$$22.ErrorRecoverySet;
  var v6360 = v15000.BinOp;
  setTokenInfo(v6354, v6355, v6356, v6357, v6358, v6359, "%=", v6360);
  var v6361 = TokenID.AmpersandEquals;
  var v6362 = Reservation.None;
  var v6363 = OperatorPrecedence.Assignment;
  var v15001 = TypeScript$$22.NodeType;
  var v6364 = v15001.AsgAnd;
  var v6365 = OperatorPrecedence.None;
  var v15002 = TypeScript$$22.NodeType;
  var v6366 = v15002.None;
  var v15003 = TypeScript$$22.ErrorRecoverySet;
  var v6367 = v15003.BinOp;
  setTokenInfo(v6361, v6362, v6363, v6364, v6365, v6366, "&=", v6367);
  var v6368 = TokenID.CaretEquals;
  var v6369 = Reservation.None;
  var v6370 = OperatorPrecedence.Assignment;
  var v15004 = TypeScript$$22.NodeType;
  var v6371 = v15004.AsgXor;
  var v6372 = OperatorPrecedence.None;
  var v15005 = TypeScript$$22.NodeType;
  var v6373 = v15005.None;
  var v15006 = TypeScript$$22.ErrorRecoverySet;
  var v6374 = v15006.BinOp;
  setTokenInfo(v6368, v6369, v6370, v6371, v6372, v6373, "^=", v6374);
  var v6375 = TokenID.BarEquals;
  var v6376 = Reservation.None;
  var v6377 = OperatorPrecedence.Assignment;
  var v15007 = TypeScript$$22.NodeType;
  var v6378 = v15007.AsgOr;
  var v6379 = OperatorPrecedence.None;
  var v15008 = TypeScript$$22.NodeType;
  var v6380 = v15008.None;
  var v15009 = TypeScript$$22.ErrorRecoverySet;
  var v6381 = v15009.BinOp;
  setTokenInfo(v6375, v6376, v6377, v6378, v6379, v6380, "|=", v6381);
  var v6382 = TokenID.LessThanLessThanEquals;
  var v6383 = Reservation.None;
  var v6384 = OperatorPrecedence.Assignment;
  var v15010 = TypeScript$$22.NodeType;
  var v6385 = v15010.AsgLsh;
  var v6386 = OperatorPrecedence.None;
  var v15011 = TypeScript$$22.NodeType;
  var v6387 = v15011.None;
  var v15012 = TypeScript$$22.ErrorRecoverySet;
  var v6388 = v15012.BinOp;
  setTokenInfo(v6382, v6383, v6384, v6385, v6386, v6387, "<<=", v6388);
  var v6389 = TokenID.GreaterThanGreaterThanEquals;
  var v6390 = Reservation.None;
  var v6391 = OperatorPrecedence.Assignment;
  var v15013 = TypeScript$$22.NodeType;
  var v6392 = v15013.AsgRsh;
  var v6393 = OperatorPrecedence.None;
  var v15014 = TypeScript$$22.NodeType;
  var v6394 = v15014.None;
  var v15015 = TypeScript$$22.ErrorRecoverySet;
  var v6395 = v15015.BinOp;
  setTokenInfo(v6389, v6390, v6391, v6392, v6393, v6394, ">>=", v6395);
  var v6396 = TokenID.GreaterThanGreaterThanGreaterThanEquals;
  var v6397 = Reservation.None;
  var v6398 = OperatorPrecedence.Assignment;
  var v15016 = TypeScript$$22.NodeType;
  var v6399 = v15016.AsgRs2;
  var v6400 = OperatorPrecedence.None;
  var v15017 = TypeScript$$22.NodeType;
  var v6401 = v15017.None;
  var v15018 = TypeScript$$22.ErrorRecoverySet;
  var v6402 = v15018.BinOp;
  setTokenInfo(v6396, v6397, v6398, v6399, v6400, v6401, ">>>=", v6402);
  var v6403 = TokenID.Question;
  var v6404 = Reservation.None;
  var v6405 = OperatorPrecedence.Conditional;
  var v15019 = TypeScript$$22.NodeType;
  var v6406 = v15019.ConditionalExpression;
  var v6407 = OperatorPrecedence.None;
  var v15020 = TypeScript$$22.NodeType;
  var v6408 = v15020.None;
  var v15021 = TypeScript$$22.ErrorRecoverySet;
  var v6409 = v15021.BinOp;
  setTokenInfo(v6403, v6404, v6405, v6406, v6407, v6408, "?", v6409);
  var v6410 = TokenID.Colon;
  var v6411 = Reservation.None;
  var v6412 = OperatorPrecedence.None;
  var v15022 = TypeScript$$22.NodeType;
  var v6413 = v15022.None;
  var v6414 = OperatorPrecedence.None;
  var v15023 = TypeScript$$22.NodeType;
  var v6415 = v15023.None;
  var v15024 = TypeScript$$22.ErrorRecoverySet;
  var v6416 = v15024.Colon;
  setTokenInfo(v6410, v6411, v6412, v6413, v6414, v6415, ":", v6416);
  var v6417 = TokenID.BarBar;
  var v6418 = Reservation.None;
  var v6419 = OperatorPrecedence.LogicalOr;
  var v15025 = TypeScript$$22.NodeType;
  var v6420 = v15025.LogOr;
  var v6421 = OperatorPrecedence.None;
  var v15026 = TypeScript$$22.NodeType;
  var v6422 = v15026.None;
  var v15027 = TypeScript$$22.ErrorRecoverySet;
  var v6423 = v15027.BinOp;
  setTokenInfo(v6417, v6418, v6419, v6420, v6421, v6422, "||", v6423);
  var v6424 = TokenID.AmpersandAmpersand;
  var v6425 = Reservation.None;
  var v6426 = OperatorPrecedence.LogicalAnd;
  var v15028 = TypeScript$$22.NodeType;
  var v6427 = v15028.LogAnd;
  var v6428 = OperatorPrecedence.None;
  var v15029 = TypeScript$$22.NodeType;
  var v6429 = v15029.None;
  var v15030 = TypeScript$$22.ErrorRecoverySet;
  var v6430 = v15030.BinOp;
  setTokenInfo(v6424, v6425, v6426, v6427, v6428, v6429, "&&", v6430);
  var v6431 = TokenID.Bar;
  var v6432 = Reservation.None;
  var v6433 = OperatorPrecedence.BitwiseOr;
  var v15031 = TypeScript$$22.NodeType;
  var v6434 = v15031.Or;
  var v6435 = OperatorPrecedence.None;
  var v15032 = TypeScript$$22.NodeType;
  var v6436 = v15032.None;
  var v15033 = TypeScript$$22.ErrorRecoverySet;
  var v6437 = v15033.BinOp;
  setTokenInfo(v6431, v6432, v6433, v6434, v6435, v6436, "|", v6437);
  var v6438 = TokenID.Caret;
  var v6439 = Reservation.None;
  var v6440 = OperatorPrecedence.BitwiseExclusiveOr;
  var v15034 = TypeScript$$22.NodeType;
  var v6441 = v15034.Xor;
  var v6442 = OperatorPrecedence.None;
  var v15035 = TypeScript$$22.NodeType;
  var v6443 = v15035.None;
  var v15036 = TypeScript$$22.ErrorRecoverySet;
  var v6444 = v15036.BinOp;
  setTokenInfo(v6438, v6439, v6440, v6441, v6442, v6443, "^", v6444);
  var v6445 = TokenID.And;
  var v6446 = Reservation.None;
  var v6447 = OperatorPrecedence.BitwiseAnd;
  var v15037 = TypeScript$$22.NodeType;
  var v6448 = v15037.And;
  var v6449 = OperatorPrecedence.None;
  var v15038 = TypeScript$$22.NodeType;
  var v6450 = v15038.None;
  var v15039 = TypeScript$$22.ErrorRecoverySet;
  var v6451 = v15039.BinOp;
  setTokenInfo(v6445, v6446, v6447, v6448, v6449, v6450, "&", v6451);
  var v6452 = TokenID.EqualsEquals;
  var v6453 = Reservation.None;
  var v6454 = OperatorPrecedence.Equality;
  var v15040 = TypeScript$$22.NodeType;
  var v6455 = v15040.Eq;
  var v6456 = OperatorPrecedence.None;
  var v15041 = TypeScript$$22.NodeType;
  var v6457 = v15041.None;
  var v15042 = TypeScript$$22.ErrorRecoverySet;
  var v6458 = v15042.BinOp;
  setTokenInfo(v6452, v6453, v6454, v6455, v6456, v6457, "==", v6458);
  var v6459 = TokenID.ExclamationEquals;
  var v6460 = Reservation.None;
  var v6461 = OperatorPrecedence.Equality;
  var v15043 = TypeScript$$22.NodeType;
  var v6462 = v15043.Ne;
  var v6463 = OperatorPrecedence.None;
  var v15044 = TypeScript$$22.NodeType;
  var v6464 = v15044.None;
  var v15045 = TypeScript$$22.ErrorRecoverySet;
  var v6465 = v15045.BinOp;
  setTokenInfo(v6459, v6460, v6461, v6462, v6463, v6464, "!=", v6465);
  var v6466 = TokenID.EqualsEqualsEquals;
  var v6467 = Reservation.None;
  var v6468 = OperatorPrecedence.Equality;
  var v15046 = TypeScript$$22.NodeType;
  var v6469 = v15046.Eqv;
  var v6470 = OperatorPrecedence.None;
  var v15047 = TypeScript$$22.NodeType;
  var v6471 = v15047.None;
  var v15048 = TypeScript$$22.ErrorRecoverySet;
  var v6472 = v15048.BinOp;
  setTokenInfo(v6466, v6467, v6468, v6469, v6470, v6471, "===", v6472);
  var v6473 = TokenID.ExclamationEqualsEquals;
  var v6474 = Reservation.None;
  var v6475 = OperatorPrecedence.Equality;
  var v15049 = TypeScript$$22.NodeType;
  var v6476 = v15049.NEqv;
  var v6477 = OperatorPrecedence.None;
  var v15050 = TypeScript$$22.NodeType;
  var v6478 = v15050.None;
  var v15051 = TypeScript$$22.ErrorRecoverySet;
  var v6479 = v15051.BinOp;
  setTokenInfo(v6473, v6474, v6475, v6476, v6477, v6478, "!==", v6479);
  var v6480 = TokenID.LessThan;
  var v6481 = Reservation.None;
  var v6482 = OperatorPrecedence.Relational;
  var v15052 = TypeScript$$22.NodeType;
  var v6483 = v15052.Lt;
  var v6484 = OperatorPrecedence.None;
  var v15053 = TypeScript$$22.NodeType;
  var v6485 = v15053.None;
  var v15054 = TypeScript$$22.ErrorRecoverySet;
  var v6486 = v15054.BinOp;
  setTokenInfo(v6480, v6481, v6482, v6483, v6484, v6485, "<", v6486);
  var v6487 = TokenID.LessThanEquals;
  var v6488 = Reservation.None;
  var v6489 = OperatorPrecedence.Relational;
  var v15055 = TypeScript$$22.NodeType;
  var v6490 = v15055.Le;
  var v6491 = OperatorPrecedence.None;
  var v15056 = TypeScript$$22.NodeType;
  var v6492 = v15056.None;
  var v15057 = TypeScript$$22.ErrorRecoverySet;
  var v6493 = v15057.BinOp;
  setTokenInfo(v6487, v6488, v6489, v6490, v6491, v6492, "<=", v6493);
  var v6494 = TokenID.GreaterThan;
  var v6495 = Reservation.None;
  var v6496 = OperatorPrecedence.Relational;
  var v15058 = TypeScript$$22.NodeType;
  var v6497 = v15058.Gt;
  var v6498 = OperatorPrecedence.None;
  var v15059 = TypeScript$$22.NodeType;
  var v6499 = v15059.None;
  var v15060 = TypeScript$$22.ErrorRecoverySet;
  var v6500 = v15060.BinOp;
  setTokenInfo(v6494, v6495, v6496, v6497, v6498, v6499, ">", v6500);
  var v6501 = TokenID.GreaterThanEquals;
  var v6502 = Reservation.None;
  var v6503 = OperatorPrecedence.Relational;
  var v15061 = TypeScript$$22.NodeType;
  var v6504 = v15061.Ge;
  var v6505 = OperatorPrecedence.None;
  var v15062 = TypeScript$$22.NodeType;
  var v6506 = v15062.None;
  var v15063 = TypeScript$$22.ErrorRecoverySet;
  var v6507 = v15063.BinOp;
  setTokenInfo(v6501, v6502, v6503, v6504, v6505, v6506, ">=", v6507);
  var v6508 = TokenID.LessThanLessThan;
  var v6509 = Reservation.None;
  var v6510 = OperatorPrecedence.Shift;
  var v15064 = TypeScript$$22.NodeType;
  var v6511 = v15064.Lsh;
  var v6512 = OperatorPrecedence.None;
  var v15065 = TypeScript$$22.NodeType;
  var v6513 = v15065.None;
  var v15066 = TypeScript$$22.ErrorRecoverySet;
  var v6514 = v15066.BinOp;
  setTokenInfo(v6508, v6509, v6510, v6511, v6512, v6513, "<<", v6514);
  var v6515 = TokenID.GreaterThanGreaterThan;
  var v6516 = Reservation.None;
  var v6517 = OperatorPrecedence.Shift;
  var v15067 = TypeScript$$22.NodeType;
  var v6518 = v15067.Rsh;
  var v6519 = OperatorPrecedence.None;
  var v15068 = TypeScript$$22.NodeType;
  var v6520 = v15068.None;
  var v15069 = TypeScript$$22.ErrorRecoverySet;
  var v6521 = v15069.BinOp;
  setTokenInfo(v6515, v6516, v6517, v6518, v6519, v6520, ">>", v6521);
  var v6522 = TokenID.GreaterThanGreaterThanGreaterThan;
  var v6523 = Reservation.None;
  var v6524 = OperatorPrecedence.Shift;
  var v15070 = TypeScript$$22.NodeType;
  var v6525 = v15070.Rs2;
  var v6526 = OperatorPrecedence.None;
  var v15071 = TypeScript$$22.NodeType;
  var v6527 = v15071.None;
  var v15072 = TypeScript$$22.ErrorRecoverySet;
  var v6528 = v15072.BinOp;
  setTokenInfo(v6522, v6523, v6524, v6525, v6526, v6527, ">>>", v6528);
  var v6529 = TokenID.Plus;
  var v6530 = Reservation.None;
  var v6531 = OperatorPrecedence.Additive;
  var v15073 = TypeScript$$22.NodeType;
  var v6532 = v15073.Add;
  var v6533 = OperatorPrecedence.Unary;
  var v15074 = TypeScript$$22.NodeType;
  var v6534 = v15074.Pos;
  var v15075 = TypeScript$$22.ErrorRecoverySet;
  var v6535 = v15075.AddOp;
  setTokenInfo(v6529, v6530, v6531, v6532, v6533, v6534, "+", v6535);
  var v6536 = TokenID.Minus;
  var v6537 = Reservation.None;
  var v6538 = OperatorPrecedence.Additive;
  var v15076 = TypeScript$$22.NodeType;
  var v6539 = v15076.Sub;
  var v6540 = OperatorPrecedence.Unary;
  var v15077 = TypeScript$$22.NodeType;
  var v6541 = v15077.Neg;
  var v15078 = TypeScript$$22.ErrorRecoverySet;
  var v6542 = v15078.AddOp;
  setTokenInfo(v6536, v6537, v6538, v6539, v6540, v6541, "-", v6542);
  var v6543 = TokenID.Asterisk;
  var v6544 = Reservation.None;
  var v6545 = OperatorPrecedence.Multiplicative;
  var v15079 = TypeScript$$22.NodeType;
  var v6546 = v15079.Mul;
  var v6547 = OperatorPrecedence.None;
  var v15080 = TypeScript$$22.NodeType;
  var v6548 = v15080.None;
  var v15081 = TypeScript$$22.ErrorRecoverySet;
  var v6549 = v15081.BinOp;
  setTokenInfo(v6543, v6544, v6545, v6546, v6547, v6548, "*", v6549);
  var v6550 = TokenID.Slash;
  var v6551 = Reservation.None;
  var v6552 = OperatorPrecedence.Multiplicative;
  var v15082 = TypeScript$$22.NodeType;
  var v6553 = v15082.Div;
  var v6554 = OperatorPrecedence.None;
  var v15083 = TypeScript$$22.NodeType;
  var v6555 = v15083.None;
  var v15084 = TypeScript$$22.ErrorRecoverySet;
  var v6556 = v15084.BinOp;
  setTokenInfo(v6550, v6551, v6552, v6553, v6554, v6555, "/", v6556);
  var v6557 = TokenID.Percent;
  var v6558 = Reservation.None;
  var v6559 = OperatorPrecedence.Multiplicative;
  var v15085 = TypeScript$$22.NodeType;
  var v6560 = v15085.Mod;
  var v6561 = OperatorPrecedence.None;
  var v15086 = TypeScript$$22.NodeType;
  var v6562 = v15086.None;
  var v15087 = TypeScript$$22.ErrorRecoverySet;
  var v6563 = v15087.BinOp;
  setTokenInfo(v6557, v6558, v6559, v6560, v6561, v6562, "%", v6563);
  var v6564 = TokenID.Tilde;
  var v6565 = Reservation.None;
  var v6566 = OperatorPrecedence.None;
  var v15088 = TypeScript$$22.NodeType;
  var v6567 = v15088.None;
  var v6568 = OperatorPrecedence.Unary;
  var v15089 = TypeScript$$22.NodeType;
  var v6569 = v15089.Not;
  var v15090 = TypeScript$$22.ErrorRecoverySet;
  var v6570 = v15090.PreOp;
  setTokenInfo(v6564, v6565, v6566, v6567, v6568, v6569, "~", v6570);
  var v6571 = TokenID.Exclamation;
  var v6572 = Reservation.None;
  var v6573 = OperatorPrecedence.None;
  var v15091 = TypeScript$$22.NodeType;
  var v6574 = v15091.None;
  var v6575 = OperatorPrecedence.Unary;
  var v15092 = TypeScript$$22.NodeType;
  var v6576 = v15092.LogNot;
  var v15093 = TypeScript$$22.ErrorRecoverySet;
  var v6577 = v15093.PreOp;
  setTokenInfo(v6571, v6572, v6573, v6574, v6575, v6576, "!", v6577);
  var v6578 = TokenID.PlusPlus;
  var v6579 = Reservation.None;
  var v6580 = OperatorPrecedence.None;
  var v15094 = TypeScript$$22.NodeType;
  var v6581 = v15094.None;
  var v6582 = OperatorPrecedence.Unary;
  var v15095 = TypeScript$$22.NodeType;
  var v6583 = v15095.IncPre;
  var v15096 = TypeScript$$22.ErrorRecoverySet;
  var v6584 = v15096.PreOp;
  setTokenInfo(v6578, v6579, v6580, v6581, v6582, v6583, "++", v6584);
  var v6585 = TokenID.MinusMinus;
  var v6586 = Reservation.None;
  var v6587 = OperatorPrecedence.None;
  var v15097 = TypeScript$$22.NodeType;
  var v6588 = v15097.None;
  var v6589 = OperatorPrecedence.Unary;
  var v15098 = TypeScript$$22.NodeType;
  var v6590 = v15098.DecPre;
  var v15099 = TypeScript$$22.ErrorRecoverySet;
  var v6591 = v15099.PreOp;
  setTokenInfo(v6585, v6586, v6587, v6588, v6589, v6590, "--", v6591);
  var v6592 = TokenID.OpenParen;
  var v6593 = Reservation.None;
  var v6594 = OperatorPrecedence.None;
  var v15100 = TypeScript$$22.NodeType;
  var v6595 = v15100.None;
  var v6596 = OperatorPrecedence.None;
  var v15101 = TypeScript$$22.NodeType;
  var v6597 = v15101.None;
  var v15102 = TypeScript$$22.ErrorRecoverySet;
  var v6598 = v15102.LParen;
  setTokenInfo(v6592, v6593, v6594, v6595, v6596, v6597, "(", v6598);
  var v6599 = TokenID.OpenBracket;
  var v6600 = Reservation.None;
  var v6601 = OperatorPrecedence.None;
  var v15103 = TypeScript$$22.NodeType;
  var v6602 = v15103.None;
  var v6603 = OperatorPrecedence.None;
  var v15104 = TypeScript$$22.NodeType;
  var v6604 = v15104.None;
  var v15105 = TypeScript$$22.ErrorRecoverySet;
  var v6605 = v15105.LBrack;
  setTokenInfo(v6599, v6600, v6601, v6602, v6603, v6604, "[", v6605);
  var v6606 = TokenID.Dot;
  var v6607 = Reservation.None;
  var v6608 = OperatorPrecedence.Unary;
  var v15106 = TypeScript$$22.NodeType;
  var v6609 = v15106.None;
  var v6610 = OperatorPrecedence.None;
  var v15107 = TypeScript$$22.NodeType;
  var v6611 = v15107.None;
  var v15108 = TypeScript$$22.ErrorRecoverySet;
  var v6612 = v15108.Dot;
  setTokenInfo(v6606, v6607, v6608, v6609, v6610, v6611, ".", v6612);
  var v6613 = TokenID.EndOfFile;
  var v6614 = Reservation.None;
  var v6615 = OperatorPrecedence.None;
  var v15109 = TypeScript$$22.NodeType;
  var v6616 = v15109.None;
  var v6617 = OperatorPrecedence.None;
  var v15110 = TypeScript$$22.NodeType;
  var v6618 = v15110.None;
  var v15111 = TypeScript$$22.ErrorRecoverySet;
  var v6619 = v15111.EOF;
  setTokenInfo(v6613, v6614, v6615, v6616, v6617, v6618, "<EOF>", v6619);
  var v6620 = TokenID.EqualsGreaterThan;
  var v6621 = Reservation.None;
  var v6622 = OperatorPrecedence.None;
  var v15112 = TypeScript$$22.NodeType;
  var v6623 = v15112.None;
  var v6624 = OperatorPrecedence.None;
  var v15113 = TypeScript$$22.NodeType;
  var v6625 = v15113.None;
  var v15114 = TypeScript$$22.ErrorRecoverySet;
  var v6626 = v15114.None;
  setTokenInfo(v6620, v6621, v6622, v6623, v6624, v6625, "=>", v6626);
  TypeScript$$22.lookupToken = lookupToken;
  var v15115 = TypeScript$$22.TokenClass;
  var v20147 = !v15115;
  if (v20147) {
    v15115 = TypeScript$$22.TokenClass = {};
  }
  var v6627 = v15115;
  v867(v6627);
  var TokenClass = TypeScript$$22.TokenClass;
  var SavedToken = v868();
  TypeScript$$22.SavedToken = SavedToken;
  var Token = v873();
  TypeScript$$22.Token = Token;
  var NumberLiteralToken = v876(Token);
  TypeScript$$22.NumberLiteralToken = NumberLiteralToken;
  var StringLiteralToken = v879(Token);
  TypeScript$$22.StringLiteralToken = StringLiteralToken;
  var IdentifierToken = v882(Token);
  TypeScript$$22.IdentifierToken = IdentifierToken;
  var WhitespaceToken = v885(Token);
  TypeScript$$22.WhitespaceToken = WhitespaceToken;
  var CommentToken = v888(Token);
  TypeScript$$22.CommentToken = CommentToken;
  var RegularExpressionLiteralToken = v891(Token);
  TypeScript$$22.RegularExpressionLiteralToken = RegularExpressionLiteralToken;
  var v6628 = TypeScript$$22;
  var v26665 = new Array;
  v6628.staticTokens = v26665;
  TypeScript$$22.initializeStaticTokens = initializeStaticTokens;
  return;
}
function v862(TypeScript$$21) {
  function v861(_super$$58) {
    function v860(name$$78, publicOnly$$23, typespace$$23) {
      var v15116 = _super$$58.prototype;
      var v6629 = v15116.findLocal;
      var sym$$27 = JAM.call(v6629.call, v6629, [this, name$$78, publicOnly$$23, typespace$$23], JAM.policy.p1);
      if (sym$$27) {
        var v15117 = JAM.call(this.filter, this, [sym$$27]);
        var v6630 = !v15117;
        if (v6630) {
          return null;
        }
      }
      var v15118 = _super$$58.prototype;
      var v6631 = v15118.find;
      return JAM.call(v6631.call, v6631, [this, name$$78, publicOnly$$23, typespace$$23], JAM.policy.p1);
    }
    function v859(filter$$6, name$$77, publicOnly$$22, typespace$$22) {
      throw new Error("please implement");
    }
    function v858(name$$76, publicOnly$$21, typespace$$21) {
      var v15119 = _super$$58.prototype;
      var v6632 = v15119.findLocal;
      var sym$$26 = JAM.call(v6632.call, v6632, [this, name$$76, publicOnly$$21, typespace$$21], JAM.policy.p1);
      if (sym$$26) {
        var v15120 = JAM.call(this.filter, this, [sym$$26]);
        var v6633 = !v15120;
        if (v6633) {
          return null;
        }
      }
      return sym$$26;
    }
    function FilteredSymbolScopeBuilder$$1(valueMembers$$3, parent$$51, container$$10, filter$$5) {
      JAM.call(_super$$58.call, _super$$58, [this, valueMembers$$3, null, null, null, parent$$51, container$$10], JAM.policy.p1);
      this.filter = filter$$5;
      return;
    }
    JAM.call(__extends, null, [FilteredSymbolScopeBuilder$$1, _super$$58], JAM.policy.p1);
    var v6634 = FilteredSymbolScopeBuilder$$1.prototype;
    v6634.findLocal = v858;
    var v6635 = FilteredSymbolScopeBuilder$$1.prototype;
    v6635.search = v859;
    var v6636 = FilteredSymbolScopeBuilder$$1.prototype;
    v6636.find = v860;
    return FilteredSymbolScopeBuilder$$1;
  }
  function v857(_super$$57) {
    function v856(name$$75, publicOnly$$20, typespace$$20) {
      var v6637 = this.scope;
      return JAM.call(v6637.findLocal, v6637, [name$$75, publicOnly$$20, typespace$$20], JAM.policy.p1);
    }
    function v855(name$$74, publicOnly$$19, typespace$$19) {
      var v6638 = this.filter;
      v6638.reset();
      var v6639 = this.scope;
      var v6640 = this.filter;
      return JAM.call(v6639.search, v6639, [v6640, name$$74, publicOnly$$19, typespace$$19], JAM.policy.p1);
    }
    function v854(outfile$$10) {
      var v6641 = this.scope;
      JAM.call(v6641.print, v6641, [outfile$$10]);
      return;
    }
    function FilteredSymbolScope$$1(scope$$21, container$$9, filter$$4) {
      JAM.call(_super$$57.call, _super$$57, [this, container$$9], JAM.policy.p1);
      this.scope = scope$$21;
      this.filter = filter$$4;
      return;
    }
    JAM.call(__extends, null, [FilteredSymbolScope$$1, _super$$57], JAM.policy.p1);
    var v6642 = FilteredSymbolScope$$1.prototype;
    v6642.print = v854;
    var v6643 = FilteredSymbolScope$$1.prototype;
    v6643.find = v855;
    var v6644 = FilteredSymbolScope$$1.prototype;
    v6644.findLocal = v856;
    return FilteredSymbolScope$$1;
  }
  function v853(_super$$56) {
    function v852() {
      var v6645 = this.valueMembers;
      return v6645.allMembers;
    }
    function v851(container$$8, ast$$61, symbol$$7, errorReporter$$3, insertAsPublic, typespace$$18, ambient$$1) {
      var table$$6 = null;
      if (ambient$$1) {
        if (typespace$$18) {
          var v6646;
          var v20148 = this.ambientEnclosedTypes;
          var v15122 = v20148 == null;
          if (v15122) {
            v6646 = null;
          } else {
            var v15121;
            if (insertAsPublic) {
              var v20149 = this.ambientEnclosedTypes;
              v15121 = v20149.publicMembers;
            } else {
              var v20150 = this.ambientEnclosedTypes;
              v15121 = v20150.privateMembers;
            }
            v6646 = v15121;
          }
          table$$6 = v6646;
        } else {
          var v6647;
          var v20151 = this.ambientValueMembers;
          var v15124 = v20151 == null;
          if (v15124) {
            v6647 = null;
          } else {
            var v15123;
            if (insertAsPublic) {
              var v20152 = this.ambientValueMembers;
              v15123 = v20152.publicMembers;
            } else {
              var v20153 = this.ambientValueMembers;
              v15123 = v20153.privateMembers;
            }
            v6647 = v15123;
          }
          table$$6 = v6647;
        }
      } else {
        if (typespace$$18) {
          var v6648;
          var v20154 = this.enclosedTypes;
          var v15126 = v20154 == null;
          if (v15126) {
            v6648 = null;
          } else {
            var v15125;
            if (insertAsPublic) {
              var v20155 = this.enclosedTypes;
              v15125 = v20155.publicMembers;
            } else {
              var v20156 = this.enclosedTypes;
              v15125 = v20156.privateMembers;
            }
            v6648 = v15125;
          }
          table$$6 = v6648;
        } else {
          var v6649;
          var v20157 = this.valueMembers;
          var v15128 = v20157 == null;
          if (v15128) {
            v6649 = null;
          } else {
            var v15127;
            if (insertAsPublic) {
              var v20158 = this.valueMembers;
              v15127 = v20158.publicMembers;
            } else {
              var v20159 = this.valueMembers;
              v15127 = v20159.privateMembers;
            }
            v6649 = v15127;
          }
          table$$6 = v6649;
        }
      }
      if (table$$6) {
        var v20160 = symbol$$7.name;
        var v15129 = JAM.call(table$$6.add, table$$6, [v20160, symbol$$7], JAM.policy.p1);
        var v6651 = !v15129;
        if (v6651) {
          var v6650 = symbol$$7.name;
          JAM.call(errorReporter$$3.duplicateIdentifier, errorReporter$$3, [ast$$61, v6650], JAM.policy.p1);
        }
      } else {
        var v6652 = TypeScript$$21.CompilerDiagnostics;
        JAM.call(v6652.Alert, v6652, ["YYYYY"]);
      }
      symbol$$7.container = container$$8;
      return;
    }
    function v850(name$$73, publicOnly$$18, typespace$$17) {
      var sym$$25 = null;
      var v6653;
      var v20161 = this.valueMembers;
      var v15131 = v20161 == null;
      if (v15131) {
        v6653 = null;
      } else {
        var v15130;
        if (publicOnly$$18) {
          var v20162 = this.valueMembers;
          v15130 = v20162.publicMembers;
        } else {
          var v20163 = this.valueMembers;
          v15130 = v20163.allMembers;
        }
        v6653 = v15130;
      }
      var table$$5 = v6653;
      var v6654;
      var v20164 = this.ambientValueMembers;
      var v15133 = v20164 == null;
      if (v15133) {
        v6654 = null;
      } else {
        var v15132;
        if (publicOnly$$18) {
          var v20165 = this.ambientValueMembers;
          v15132 = v20165.publicMembers;
        } else {
          var v20166 = this.ambientValueMembers;
          v15132 = v20166.allMembers;
        }
        v6654 = v15132;
      }
      var ambientTable$$5 = v6654;
      if (typespace$$17) {
        var v6655;
        var v20167 = this.enclosedTypes;
        var v15135 = v20167 == null;
        if (v15135) {
          v6655 = null;
        } else {
          var v15134;
          if (publicOnly$$18) {
            var v20168 = this.enclosedTypes;
            v15134 = v20168.publicMembers;
          } else {
            var v20169 = this.enclosedTypes;
            v15134 = v20169.allMembers;
          }
          v6655 = v15134;
        }
        table$$5 = v6655;
        var v6656;
        var v20170 = this.ambientEnclosedTypes;
        var v15137 = v20170 == null;
        if (v15137) {
          v6656 = null;
        } else {
          var v15136;
          if (publicOnly$$18) {
            var v20171 = this.ambientEnclosedTypes;
            v15136 = v20171.publicMembers;
          } else {
            var v20172 = this.ambientEnclosedTypes;
            v15136 = v20172.allMembers;
          }
          v6656 = v15136;
        }
        ambientTable$$5 = v6656;
      }
      if (table$$5) {
        var v15138 = sym$$25 = JAM.call(table$$5.lookup, table$$5, [name$$73]);
        var v6657 = v15138 != null;
        if (v6657) {
          if (sym$$25) {
            return sym$$25;
          }
        }
      }
      if (ambientTable$$5) {
        var v15139 = sym$$25 = JAM.call(ambientTable$$5.lookup, ambientTable$$5, [name$$73]);
        var v6658 = v15139 != null;
        if (v6658) {
          if (sym$$25) {
            return sym$$25;
          }
        }
      }
      return null;
    }
    function v849(name$$72, publicOnly$$17, typespace$$16) {
      var sym$$24 = null;
      var v6659;
      var v20173 = this.ambientValueMembers;
      var v15141 = v20173 == null;
      if (v15141) {
        v6659 = null;
      } else {
        var v15140;
        if (publicOnly$$17) {
          var v20174 = this.ambientValueMembers;
          v15140 = v20174.publicMembers;
        } else {
          var v20175 = this.ambientValueMembers;
          v15140 = v20175.allMembers;
        }
        v6659 = v15140;
      }
      var ambientTable$$4 = v6659;
      if (typespace$$16) {
        var v6660;
        var v20176 = this.ambientEnclosedTypes;
        var v15143 = v20176 == null;
        if (v15143) {
          v6660 = null;
        } else {
          var v15142;
          if (publicOnly$$17) {
            var v20177 = this.ambientEnclosedTypes;
            v15142 = v20177.publicMembers;
          } else {
            var v20178 = this.ambientEnclosedTypes;
            v15142 = v20178.allMembers;
          }
          v6660 = v15142;
        }
        ambientTable$$4 = v6660;
      }
      var v15144 = ambientTable$$4;
      if (v15144) {
        var v20179 = sym$$24 = JAM.call(ambientTable$$4.lookup, ambientTable$$4, [name$$72]);
        v15144 = v20179 != null;
      }
      var v6661 = v15144;
      if (v6661) {
        return sym$$24;
      }
      var v6663 = this.parent;
      if (v6663) {
        var v6662 = this.parent;
        return JAM.call(v6662.findAmbient, v6662, [name$$72, publicOnly$$17, typespace$$16], JAM.policy.p1);
      }
      return null;
    }
    function v848(name$$71, publicOnly$$16, typespace$$15) {
      var sym$$23 = null;
      var v6664;
      var v20180 = this.valueMembers;
      var v15146 = v20180 == null;
      if (v15146) {
        v6664 = null;
      } else {
        var v15145;
        if (publicOnly$$16) {
          var v20181 = this.valueMembers;
          v15145 = v20181.publicMembers;
        } else {
          var v20182 = this.valueMembers;
          v15145 = v20182.allMembers;
        }
        v6664 = v15145;
      }
      var table$$4 = v6664;
      var v6665;
      var v20183 = this.ambientValueMembers;
      var v15148 = v20183 == null;
      if (v15148) {
        v6665 = null;
      } else {
        var v15147;
        if (publicOnly$$16) {
          var v20184 = this.ambientValueMembers;
          v15147 = v20184.publicMembers;
        } else {
          var v20185 = this.ambientValueMembers;
          v15147 = v20185.allMembers;
        }
        v6665 = v15147;
      }
      var ambientTable$$3 = v6665;
      if (typespace$$15) {
        var v6666;
        var v20186 = this.enclosedTypes;
        var v15150 = v20186 == null;
        if (v15150) {
          v6666 = null;
        } else {
          var v15149;
          if (publicOnly$$16) {
            var v20187 = this.enclosedTypes;
            v15149 = v20187.publicMembers;
          } else {
            var v20188 = this.enclosedTypes;
            v15149 = v20188.allMembers;
          }
          v6666 = v15149;
        }
        table$$4 = v6666;
        var v6667;
        var v20189 = this.ambientEnclosedTypes;
        var v15152 = v20189 == null;
        if (v15152) {
          v6667 = null;
        } else {
          var v15151;
          if (publicOnly$$16) {
            var v20190 = this.ambientEnclosedTypes;
            v15151 = v20190.publicMembers;
          } else {
            var v20191 = this.ambientEnclosedTypes;
            v15151 = v20191.allMembers;
          }
          v6667 = v15151;
        }
        ambientTable$$3 = v6667;
      }
      var v15153 = ambientTable$$3;
      if (v15153) {
        var v20192 = sym$$23 = JAM.call(ambientTable$$3.lookup, ambientTable$$3, [name$$71]);
        v15153 = v20192 != null;
      }
      var v6668 = v15153;
      if (v6668) {
        return sym$$23;
      }
      var v15154 = table$$4;
      if (v15154) {
        var v20193 = sym$$23 = JAM.call(table$$4.lookup, table$$4, [name$$71]);
        v15154 = v20193 != null;
      }
      var v6669 = v15154;
      if (v6669) {
        return sym$$23;
      }
      var v6671 = this.parent;
      if (v6671) {
        var v6670 = this.parent;
        return JAM.call(v6670.find, v6670, [name$$71, publicOnly$$16, typespace$$15], JAM.policy.p1);
      }
      return null;
    }
    function v847(outfile$$9) {
      function v846(key$$42, s$$23, context$$48) {
        var sym$$22 = s$$23;
        var v6672 = "  " + key$$42;
        JAM.call(outfile$$9.WriteLine, outfile$$9, [v6672]);
        return;
      }
      function v845(key$$41, s$$22, context$$47) {
        var sym$$21 = s$$22;
        var v6673 = "  " + key$$41;
        JAM.call(outfile$$9.WriteLine, outfile$$9, [v6673]);
        return;
      }
      function v844(key$$40, s$$21, context$$46) {
        var sym$$20 = s$$21;
        var v6674 = "  " + key$$40;
        JAM.call(outfile$$9.WriteLine, outfile$$9, [v6674]);
        return;
      }
      function v843(key$$39, s$$20, context$$45) {
        var sym$$19 = s$$20;
        var v6675 = "  " + key$$39;
        JAM.call(outfile$$9.WriteLine, outfile$$9, [v6675]);
        return;
      }
      var v15155 = _super$$56.prototype;
      var v6676 = v15155.print;
      JAM.call(v6676.call, v6676, [this, outfile$$9], JAM.policy.p1);
      var v6678 = this.ambientValueMembers;
      if (v6678) {
        var v15156 = this.ambientValueMembers;
        var v6677 = v15156.allMembers;
        JAM.call(v6677.map, v6677, [v843, null], JAM.policy.p1);
      }
      var v6680 = this.valueMembers;
      if (v6680) {
        var v15157 = this.valueMembers;
        var v6679 = v15157.allMembers;
        JAM.call(v6679.map, v6679, [v844, null], JAM.policy.p1);
      }
      var v6682 = this.ambientEnclosedTypes;
      if (v6682) {
        var v15158 = this.ambientEnclosedTypes;
        var v6681 = v15158.allMembers;
        JAM.call(v6681.map, v6681, [v845, null], JAM.policy.p1);
      }
      var v6684 = this.enclosedTypes;
      if (v6684) {
        var v15159 = this.enclosedTypes;
        var v6683 = v15159.allMembers;
        JAM.call(v6683.map, v6683, [v846, null], JAM.policy.p1);
      }
      var v6686 = this.parent;
      if (v6686) {
        var v6685 = this.parent;
        JAM.call(v6685.print, v6685, [outfile$$9]);
      }
      return;
    }
    function v842(filter$$3, name$$70, publicOnly$$15, typespace$$14) {
      var sym$$18 = null;
      var v6687;
      var v20194 = this.valueMembers;
      var v15161 = v20194 == null;
      if (v15161) {
        v6687 = null;
      } else {
        var v15160;
        if (publicOnly$$15) {
          var v20195 = this.valueMembers;
          v15160 = v20195.publicMembers;
        } else {
          var v20196 = this.valueMembers;
          v15160 = v20196.allMembers;
        }
        v6687 = v15160;
      }
      var table$$3 = v6687;
      var v6688;
      var v20197 = this.ambientValueMembers;
      var v15163 = v20197 == null;
      if (v15163) {
        v6688 = null;
      } else {
        var v15162;
        if (publicOnly$$15) {
          var v20198 = this.ambientValueMembers;
          v15162 = v20198.publicMembers;
        } else {
          var v20199 = this.ambientValueMembers;
          v15162 = v20199.allMembers;
        }
        v6688 = v15162;
      }
      var ambientTable$$2 = v6688;
      if (typespace$$14) {
        var v6689;
        var v20200 = this.enclosedTypes;
        var v15165 = v20200 == null;
        if (v15165) {
          v6689 = null;
        } else {
          var v15164;
          if (publicOnly$$15) {
            var v20201 = this.enclosedTypes;
            v15164 = v20201.publicMembers;
          } else {
            var v20202 = this.enclosedTypes;
            v15164 = v20202.allMembers;
          }
          v6689 = v15164;
        }
        table$$3 = v6689;
        var v6690;
        var v20203 = this.ambientEnclosedTypes;
        var v15167 = v20203 == null;
        if (v15167) {
          v6690 = null;
        } else {
          var v15166;
          if (publicOnly$$15) {
            var v20204 = this.ambientEnclosedTypes;
            v15166 = v20204.publicMembers;
          } else {
            var v20205 = this.ambientEnclosedTypes;
            v15166 = v20205.allMembers;
          }
          v6690 = v15166;
        }
        ambientTable$$2 = v6690;
      }
      if (ambientTable$$2) {
        var v15168 = sym$$18 = JAM.call(ambientTable$$2.lookup, ambientTable$$2, [name$$70]);
        var v6692 = v15168 != null;
        if (v6692) {
          var v6691 = JAM.call(filter$$3.update, filter$$3, [sym$$18]);
          if (v6691) {
            return sym$$18;
          }
        }
      }
      if (table$$3) {
        var v15169 = sym$$18 = JAM.call(table$$3.lookup, table$$3, [name$$70]);
        var v6694 = v15169 != null;
        if (v6694) {
          var v6693 = JAM.call(filter$$3.update, filter$$3, [sym$$18]);
          if (v6693) {
            return sym$$18;
          }
        }
      }
      var v6697 = this.parent;
      if (v6697) {
        var v6695 = this.parent;
        sym$$18 = JAM.call(v6695.search, v6695, [filter$$3, name$$70, publicOnly$$15, typespace$$14], JAM.policy.p1);
        if (sym$$18) {
          var v6696 = JAM.call(filter$$3.update, filter$$3, [sym$$18]);
          if (v6696) {
            return sym$$18;
          }
        }
      }
      return filter$$3.result;
    }
    function v841(members$$24) {
      var result$$26 = [];
      var v6699 = this.ambientValueMembers;
      if (v6699) {
        var v20206 = this.ambientValueMembers;
        var v15170 = v20206.allMembers;
        var v6698 = v15170.getAllKeys();
        result$$26 = result$$26.concat(v6698);
      }
      var v6701 = this.valueMembers;
      if (v6701) {
        var v20207 = this.valueMembers;
        var v15171 = v20207.allMembers;
        var v6700 = v15171.getAllKeys();
        result$$26 = result$$26.concat(v6700);
      }
      var v15172 = !members$$24;
      if (v15172) {
        v15172 = this.parent;
      }
      var v6703 = v15172;
      if (v6703) {
        var v6702 = this.parent;
        var parentResult$$4 = JAM.call(v6702.getAllValueSymbolNames, v6702, [members$$24]);
        if (parentResult$$4) {
          result$$26 = result$$26.concat(parentResult$$4);
        }
      }
      return result$$26;
    }
    function v840(members$$23) {
      var result$$25 = [];
      var v6705 = this.ambientEnclosedTypes;
      if (v6705) {
        var v20208 = this.ambientEnclosedTypes;
        var v15173 = v20208.allMembers;
        var v6704 = v15173.getAllKeys();
        result$$25 = result$$25.concat(v6704);
      }
      var v6707 = this.enclosedTypes;
      if (v6707) {
        var v20209 = this.enclosedTypes;
        var v15174 = v20209.allMembers;
        var v6706 = v15174.getAllKeys();
        result$$25 = result$$25.concat(v6706);
      }
      var v15175 = !members$$23;
      if (v15175) {
        v15175 = this.parent;
      }
      var v6709 = v15175;
      if (v6709) {
        var v6708 = this.parent;
        var parentResult$$3 = JAM.call(v6708.getAllTypeSymbolNames, v6708, [members$$23]);
        if (parentResult$$3) {
          result$$25 = result$$25.concat(parentResult$$3);
        }
      }
      return result$$25;
    }
    function v839(members$$22) {
      var result$$24 = JAM.call(this.getAllTypeSymbolNames, this, [members$$22]);
      var v6710 = JAM.call(this.getAllValueSymbolNames, this, [members$$22]);
      return result$$24.concat(v6710);
    }
    function v838() {
      return "builder";
    }
    function SymbolScopeBuilder$$1(valueMembers$$2, ambientValueMembers$$2, enclosedTypes$$2, ambientEnclosedTypes$$2, parent$$50, container$$7) {
      JAM.call(_super$$56.call, _super$$56, [this, container$$7], JAM.policy.p1);
      this.valueMembers = valueMembers$$2;
      this.ambientValueMembers = ambientValueMembers$$2;
      this.enclosedTypes = enclosedTypes$$2;
      this.ambientEnclosedTypes = ambientEnclosedTypes$$2;
      this.parent = parent$$50;
      this.container = container$$7;
      return;
    }
    JAM.call(__extends, null, [SymbolScopeBuilder$$1, _super$$56], JAM.policy.p1);
    var v6711 = SymbolScopeBuilder$$1.prototype;
    v6711.printLabel = v838;
    var v6712 = SymbolScopeBuilder$$1.prototype;
    v6712.getAllSymbolNames = v839;
    var v6713 = SymbolScopeBuilder$$1.prototype;
    v6713.getAllTypeSymbolNames = v840;
    var v6714 = SymbolScopeBuilder$$1.prototype;
    v6714.getAllValueSymbolNames = v841;
    var v6715 = SymbolScopeBuilder$$1.prototype;
    v6715.search = v842;
    var v6716 = SymbolScopeBuilder$$1.prototype;
    v6716.print = v847;
    var v6717 = SymbolScopeBuilder$$1.prototype;
    v6717.find = v848;
    var v6718 = SymbolScopeBuilder$$1.prototype;
    v6718.findAmbient = v849;
    var v6719 = SymbolScopeBuilder$$1.prototype;
    v6719.findLocal = v850;
    var v6720 = SymbolScopeBuilder$$1.prototype;
    v6720.enter = v851;
    var v6721 = SymbolScopeBuilder$$1.prototype;
    v6721.getTable = v852;
    return SymbolScopeBuilder$$1;
  }
  function v837(_super$$55) {
    function v836() {
      var v6722 = this.valueMembers;
      return v6722.publicMembers;
    }
    function v835(name$$69, publicOnly$$14, typespace$$13) {
      var sym$$17 = JAM.call(this.find, this, [name$$69, publicOnly$$14, typespace$$13], JAM.policy.p1);
      if (sym$$17) {
        var v15176 = sym$$17.kind();
        var v15177 = SymbolKind.Type;
        var v6727 = v15176 == v15177;
        if (v6727) {
          var typeSym$$1 = sym$$17;
          var v20210 = typeSym$$1.type;
          var v15178 = v20210.hasImplementation();
          var v6723 = !v15178;
          if (v6723) {
            sym$$17 = null;
          }
        } else {
          var v6726 = sym$$17.container;
          if (v6726) {
            var v20211 = sym$$17.container;
            var v15179 = v20211.kind();
            var v15180 = SymbolKind.Type;
            var v6725 = v15179 == v15180;
            if (v6725) {
              var ctypeSym = sym$$17.container;
              var v20212 = ctypeSym.type;
              var v15181 = v20212.hasImplementation();
              var v6724 = !v15181;
              if (v6724) {
                sym$$17 = null;
              }
            }
          }
        }
      }
      return sym$$17;
    }
    function v834(outfile$$8) {
      function v833(key$$38, sym$$16, context$$44) {
        var v6728 = "  " + key$$38;
        JAM.call(outfile$$8.WriteLine, outfile$$8, [v6728]);
        return;
      }
      function v832(key$$37, sym$$15, context$$43) {
        var v6729 = "  " + key$$37;
        JAM.call(outfile$$8.WriteLine, outfile$$8, [v6729]);
        return;
      }
      function v831(key$$36, sym$$14, context$$42) {
        var v6730 = "  " + key$$36;
        JAM.call(outfile$$8.WriteLine, outfile$$8, [v6730]);
        return;
      }
      function v830(key$$35, sym$$13, context$$41) {
        var v6731 = "  " + key$$35;
        JAM.call(outfile$$8.WriteLine, outfile$$8, [v6731]);
        return;
      }
      var v15182 = _super$$55.prototype;
      var v6732 = v15182.print;
      JAM.call(v6732.call, v6732, [this, outfile$$8], JAM.policy.p1);
      var v6734 = this.ambientValueMembers;
      if (v6734) {
        var v15183 = this.ambientValueMembers;
        var v6733 = v15183.allMembers;
        JAM.call(v6733.map, v6733, [v830, null], JAM.policy.p1);
      }
      var v6736 = this.valueMembers;
      if (v6736) {
        var v15184 = this.valueMembers;
        var v6735 = v15184.allMembers;
        JAM.call(v6735.map, v6735, [v831, null], JAM.policy.p1);
      }
      var v6738 = this.ambientEnclosedTypes;
      if (v6738) {
        var v15185 = this.ambientEnclosedTypes;
        var v6737 = v15185.allMembers;
        JAM.call(v6737.map, v6737, [v832, null], JAM.policy.p1);
      }
      var v6740 = this.enclosedTypes;
      if (v6740) {
        var v15186 = this.enclosedTypes;
        var v6739 = v15186.allMembers;
        JAM.call(v6739.map, v6739, [v833, null], JAM.policy.p1);
      }
      return;
    }
    function v829(name$$68, publicOnly$$13, typespace$$12) {
      var v6741;
      var v20213 = this.ambientValueMembers;
      var v15188 = v20213 == null;
      if (v15188) {
        v6741 = null;
      } else {
        var v15187;
        if (publicOnly$$13) {
          var v20214 = this.ambientValueMembers;
          v15187 = v20214.publicMembers;
        } else {
          var v20215 = this.ambientValueMembers;
          v15187 = v20215.allMembers;
        }
        v6741 = v15187;
      }
      var ambientTable$$1 = v6741;
      if (typespace$$12) {
        var v6742;
        var v20216 = this.ambientEnclosedTypes;
        var v15190 = v20216 == null;
        if (v15190) {
          v6742 = null;
        } else {
          var v15189;
          if (publicOnly$$13) {
            var v20217 = this.ambientEnclosedTypes;
            v15189 = v20217.publicMembers;
          } else {
            var v20218 = this.ambientEnclosedTypes;
            v15189 = v20218.allMembers;
          }
          v6742 = v15189;
        }
        ambientTable$$1 = v6742;
      }
      if (ambientTable$$1) {
        var s$$19 = JAM.call(ambientTable$$1.lookup, ambientTable$$1, [name$$68]);
        if (s$$19) {
          return s$$19;
        }
      }
      return null;
    }
    function v828(name$$67, publicOnly$$12, typespace$$11) {
      var table$$2 = null;
      var ambientTable = null;
      if (typespace$$11) {
        var v6743;
        var v20219 = this.enclosedTypes;
        var v15192 = v20219 == null;
        if (v15192) {
          v6743 = null;
        } else {
          var v15191;
          if (publicOnly$$12) {
            var v20220 = this.enclosedTypes;
            v15191 = v20220.publicMembers;
          } else {
            var v20221 = this.enclosedTypes;
            v15191 = v20221.allMembers;
          }
          v6743 = v15191;
        }
        table$$2 = v6743;
        var v6744;
        var v20222 = this.ambientEnclosedTypes;
        var v15194 = v20222 == null;
        if (v15194) {
          v6744 = null;
        } else {
          var v15193;
          if (publicOnly$$12) {
            var v20223 = this.ambientEnclosedTypes;
            v15193 = v20223.publicMembers;
          } else {
            var v20224 = this.ambientEnclosedTypes;
            v15193 = v20224.allMembers;
          }
          v6744 = v15193;
        }
        ambientTable = v6744;
      } else {
        var v6745;
        var v20225 = this.valueMembers;
        var v15196 = v20225 == null;
        if (v15196) {
          v6745 = null;
        } else {
          var v15195;
          if (publicOnly$$12) {
            var v20226 = this.valueMembers;
            v15195 = v20226.publicMembers;
          } else {
            var v20227 = this.valueMembers;
            v15195 = v20227.allMembers;
          }
          v6745 = v15195;
        }
        table$$2 = v6745;
        var v6746;
        var v20228 = this.ambientValueMembers;
        var v15198 = v20228 == null;
        if (v15198) {
          v6746 = null;
        } else {
          var v15197;
          if (publicOnly$$12) {
            var v20229 = this.ambientValueMembers;
            v15197 = v20229.publicMembers;
          } else {
            var v20230 = this.ambientValueMembers;
            v15197 = v20230.allMembers;
          }
          v6746 = v15197;
        }
        ambientTable = v6746;
      }
      if (ambientTable) {
        var s$$18 = JAM.call(ambientTable.lookup, ambientTable, [name$$67]);
        if (s$$18) {
          return s$$18;
        }
      }
      if (table$$2) {
        s$$18 = JAM.call(table$$2.lookup, table$$2, [name$$67]);
        if (s$$18) {
          return s$$18;
        }
      }
      return null;
    }
    function v827(filter$$2, name$$66, publicOnly$$11, typespace$$10) {
      var sym$$12 = JAM.call(this.find, this, [name$$66, publicOnly$$11, typespace$$10], JAM.policy.p1);
      JAM.call(filter$$2.update, filter$$2, [sym$$12]);
      return filter$$2.result;
    }
    function v826(members$$21) {
      var result$$23 = [];
      var v6748 = this.ambientValueMembers;
      if (v6748) {
        var v20231 = this.ambientValueMembers;
        var v15199 = v20231.allMembers;
        var v6747 = v15199.getAllKeys();
        result$$23 = result$$23.concat(v6747);
      }
      var v6750 = this.valueMembers;
      if (v6750) {
        var v20232 = this.valueMembers;
        var v15200 = v20232.allMembers;
        var v6749 = v15200.getAllKeys();
        result$$23 = result$$23.concat(v6749);
      }
      return result$$23;
    }
    function v825(members$$20) {
      var result$$22 = [];
      var v6752 = this.ambientEnclosedTypes;
      if (v6752) {
        var v20233 = this.ambientEnclosedTypes;
        var v15201 = v20233.allMembers;
        var v6751 = v15201.getAllKeys();
        result$$22 = result$$22.concat(v6751);
      }
      var v6754 = this.enclosedTypes;
      if (v6754) {
        var v20234 = this.enclosedTypes;
        var v15202 = v20234.allMembers;
        var v6753 = v15202.getAllKeys();
        result$$22 = result$$22.concat(v6753);
      }
      return result$$22;
    }
    function v824(members$$19) {
      var result$$21 = JAM.call(this.getAllTypeSymbolNames, this, [members$$19]);
      var v6755 = JAM.call(this.getAllValueSymbolNames, this, [members$$19]);
      return result$$21.concat(v6755);
    }
    function v823() {
      return "table";
    }
    function SymbolTableScope$$1(valueMembers$$1, ambientValueMembers$$1, enclosedTypes$$1, ambientEnclosedTypes$$1, container$$6) {
      JAM.call(_super$$55.call, _super$$55, [this, container$$6], JAM.policy.p1);
      this.valueMembers = valueMembers$$1;
      this.ambientValueMembers = ambientValueMembers$$1;
      this.enclosedTypes = enclosedTypes$$1;
      this.ambientEnclosedTypes = ambientEnclosedTypes$$1;
      this.container = container$$6;
      return;
    }
    JAM.call(__extends, null, [SymbolTableScope$$1, _super$$55], JAM.policy.p1);
    var v6756 = SymbolTableScope$$1.prototype;
    v6756.printLabel = v823;
    var v6757 = SymbolTableScope$$1.prototype;
    v6757.getAllSymbolNames = v824;
    var v6758 = SymbolTableScope$$1.prototype;
    v6758.getAllTypeSymbolNames = v825;
    var v6759 = SymbolTableScope$$1.prototype;
    v6759.getAllValueSymbolNames = v826;
    var v6760 = SymbolTableScope$$1.prototype;
    v6760.search = v827;
    var v6761 = SymbolTableScope$$1.prototype;
    v6761.find = v828;
    var v6762 = SymbolTableScope$$1.prototype;
    v6762.findAmbient = v829;
    var v6763 = SymbolTableScope$$1.prototype;
    v6763.print = v834;
    var v6764 = SymbolTableScope$$1.prototype;
    v6764.findImplementation = v835;
    var v6765 = SymbolTableScope$$1.prototype;
    v6765.getTable = v836;
    return SymbolTableScope$$1;
  }
  function v822(_super$$54) {
    function v821(parent$$49) {
      var v15203 = this.parents;
      var v6766 = v15203 == null;
      if (v6766) {
        var v26666 = new Array;
        this.parents = v26666;
      }
      var v6767 = this.parents;
      var v15204 = this.parents;
      var v6768 = v15204.length;
      JAM.set(v6767, v6768, parent$$49);
      return;
    }
    function v820(name$$65, publicOnly$$10, typespace$$9) {
      var sym$$11 = null;
      var i$$72 = 0;
      var cache$$1 = this.valueAmbientCache;
      if (typespace$$9) {
        cache$$1 = this.typeAmbientCache;
      }
      var v15205 = cache$$1;
      if (v15205) {
        var v20235 = sym$$11 = JAM.call(cache$$1.lookup, cache$$1, [name$$65]);
        v15205 = v20235 != null;
      }
      var v6769 = v15205;
      if (v6769) {
        return sym$$11;
      }
      var v6772 = this.parents;
      if (v6772) {
        i$$72 = 0;
        var v20236 = this.parents;
        var v15206 = v20236.length;
        var v6771 = i$$72 < v15206;
        for (;v6771;) {
          var v15207 = this.parents;
          var v6770 = v15207[i$$72];
          sym$$11 = JAM.call(v6770.findAmbient, v6770, [name$$65, publicOnly$$10, typespace$$9], JAM.policy.p1);
          if (sym$$11) {
            break;
          }
          i$$72++;
          var v20237 = this.parents;
          var v15208 = v20237.length;
          v6771 = i$$72 < v15208;
        }
      }
      var v6775 = cache$$1 == null;
      if (v6775) {
        if (typespace$$9) {
          var v6773 = TypeScript$$21.StringHashTable;
          var v26667 = new v6773;
          this.typeAmbientCache = v26667;
          cache$$1 = this.typeAmbientCache;
        } else {
          var v6774 = TypeScript$$21.StringHashTable;
          var v26668 = new v6774;
          this.valueAmbientCache = v26668;
          cache$$1 = this.valueAmbientCache;
        }
      }
      JAM.call(cache$$1.add, cache$$1, [name$$65, sym$$11], JAM.policy.p1);
      return sym$$11;
    }
    function v819(name$$64, publicOnly$$9, typespace$$8) {
      var sym$$10 = null;
      var i$$71 = 0;
      var cache = this.valueCache;
      if (typespace$$8) {
        cache = this.typeCache;
      }
      var v20238 = cache;
      if (v20238) {
        var v23534 = sym$$10 = JAM.call(cache.lookup, cache, [name$$64]);
        v20238 = v23534 != null;
      }
      var v15209 = v20238;
      if (v15209) {
        var v20239;
        if (publicOnly$$9) {
          var v25839 = sym$$10.flags;
          var v26139 = TypeScript$$21.SymbolFlags;
          var v25840 = v26139.Private;
          var v25157 = JAM.call(TypeScript$$21.hasFlag, TypeScript$$21, [v25839, v25840], JAM.policy.p1);
          var v25842 = !v25157;
          if (v25842) {
            var v26140 = sym$$10.declAST;
            if (v26140) {
              var v26362 = sym$$10.declAST;
              var v26284 = v26362.nodeType;
              var v26363 = TypeScript$$21.NodeType;
              var v26285 = v26363.FuncDecl;
              v26140 = v26284 == v26285;
            }
            var v25841 = v26140;
            if (v25841) {
              var v26286 = sym$$10.declAST;
              var v26141 = v26286.fncFlags;
              var v26287 = TypeScript$$21.FncFlags;
              var v26142 = v26287.Private;
              v25841 = JAM.call(TypeScript$$21.hasFlag, TypeScript$$21, [v26141, v26142], JAM.policy.p1);
            }
            v25157 = v25841;
          }
          var v23535 = v25157;
          v20239 = !v23535;
        } else {
          v20239 = true;
        }
        v15209 = v20239;
      }
      var v6776 = v15209;
      if (v6776) {
        return sym$$10;
      }
      var v6779 = this.parents;
      if (v6779) {
        i$$71 = 0;
        var v20240 = this.parents;
        var v15210 = v20240.length;
        var v6778 = i$$71 < v15210;
        for (;v6778;) {
          var v15211 = this.parents;
          var v6777 = v15211[i$$71];
          sym$$10 = JAM.call(v6777.find, v6777, [name$$64, publicOnly$$9, typespace$$8], JAM.policy.p1);
          if (sym$$10) {
            break;
          }
          i$$71++;
          var v20241 = this.parents;
          var v15212 = v20241.length;
          v6778 = i$$71 < v15212;
        }
      }
      var v6782 = cache == null;
      if (v6782) {
        if (typespace$$8) {
          var v6780 = TypeScript$$21.StringHashTable;
          var v26669 = new v6780;
          this.typeCache = v26669;
          cache = this.typeCache;
        } else {
          var v6781 = TypeScript$$21.StringHashTable;
          var v26670 = new v6781;
          this.valueCache = v26670;
          cache = this.valueCache;
        }
      }
      JAM.call(cache.add, cache, [name$$64, sym$$10], JAM.policy.p1);
      return sym$$10;
    }
    function v818(name$$63, publicOnly$$8, typespace$$7) {
      var sym$$9 = null;
      var i$$70 = 0;
      var implCache = this.valueImplCache;
      if (typespace$$7) {
        implCache = this.typeImplCache;
      }
      var v20242 = implCache;
      if (v20242) {
        var v23536 = sym$$9 = JAM.call(implCache.lookup, implCache, [name$$63]);
        v20242 = v23536 != null;
      }
      var v15213 = v20242;
      if (v15213) {
        var v20243;
        if (publicOnly$$8) {
          var v25843 = sym$$9.flags;
          var v26143 = TypeScript$$21.SymbolFlags;
          var v25844 = v26143.Private;
          var v25158 = JAM.call(TypeScript$$21.hasFlag, TypeScript$$21, [v25843, v25844], JAM.policy.p1);
          var v25846 = !v25158;
          if (v25846) {
            var v26144 = sym$$9.declAST;
            if (v26144) {
              var v26364 = sym$$9.declAST;
              var v26288 = v26364.nodeType;
              var v26365 = TypeScript$$21.NodeType;
              var v26289 = v26365.FuncDecl;
              v26144 = v26288 == v26289;
            }
            var v25845 = v26144;
            if (v25845) {
              var v26290 = sym$$9.declAST;
              var v26145 = v26290.fncFlags;
              var v26291 = TypeScript$$21.FncFlags;
              var v26146 = v26291.Private;
              v25845 = JAM.call(TypeScript$$21.hasFlag, TypeScript$$21, [v26145, v26146], JAM.policy.p1);
            }
            v25158 = v25845;
          }
          var v23537 = v25158;
          v20243 = !v23537;
        } else {
          v20243 = true;
        }
        v15213 = v20243;
      }
      var v6783 = v15213;
      if (v6783) {
        return sym$$9;
      }
      var v6786 = this.parents;
      if (v6786) {
        i$$70 = 0;
        var v20244 = this.parents;
        var v15214 = v20244.length;
        var v6785 = i$$70 < v15214;
        for (;v6785;) {
          var v15215 = this.parents;
          var v6784 = v15215[i$$70];
          sym$$9 = JAM.call(v6784.findImplementation, v6784, [name$$63, publicOnly$$8, typespace$$7], JAM.policy.p1);
          if (sym$$9) {
            break;
          }
          i$$70++;
          var v20245 = this.parents;
          var v15216 = v20245.length;
          v6785 = i$$70 < v15216;
        }
      }
      if (implCache) {
        if (typespace$$7) {
          var v6787 = TypeScript$$21.StringHashTable;
          var v26671 = new v6787;
          this.typeImplCache = v26671;
          implCache = this.typeImplCache;
        } else {
          var v6788 = TypeScript$$21.StringHashTable;
          var v26672 = new v6788;
          this.valueImplCache = v26672;
          implCache = this.valueImplCache;
        }
      }
      JAM.call(implCache.add, implCache, [name$$63, sym$$9], JAM.policy.p1);
      return sym$$9;
    }
    function v817(outfile$$7) {
      var v15217 = _super$$54.prototype;
      var v6789 = v15217.print;
      JAM.call(v6789.call, v6789, [this, outfile$$7], JAM.policy.p1);
      var v6792 = this.parents;
      if (v6792) {
        var i$$69 = 0;
        var v20246 = this.parents;
        var v15218 = v20246.length;
        var v6791 = i$$69 < v15218;
        for (;v6791;) {
          var v15219 = this.parents;
          var v6790 = v15219[i$$69];
          JAM.call(v6790.print, v6790, [outfile$$7]);
          i$$69++;
          var v20247 = this.parents;
          var v15220 = v20247.length;
          v6791 = i$$69 < v15220;
        }
      }
      return;
    }
    function v816(members$$18) {
      var result$$20 = [];
      var v6795 = this.parents;
      if (v6795) {
        var i$$68 = 0;
        var v20248 = this.parents;
        var v15221 = v20248.length;
        var v6794 = i$$68 < v15221;
        for (;v6794;) {
          var v15222 = this.parents;
          var v6793 = v15222[i$$68];
          var parentResult$$2 = JAM.call(v6793.getAllValueSymbolNames, v6793, [members$$18]);
          if (parentResult$$2) {
            result$$20 = result$$20.concat(parentResult$$2);
          }
          i$$68++;
          var v20249 = this.parents;
          var v15223 = v20249.length;
          v6794 = i$$68 < v15223;
        }
      }
      return result$$20;
    }
    function v815(members$$17) {
      var result$$19 = [];
      var v6798 = this.parents;
      if (v6798) {
        var i$$67 = 0;
        var v20250 = this.parents;
        var v15224 = v20250.length;
        var v6797 = i$$67 < v15224;
        for (;v6797;) {
          var v15225 = this.parents;
          var v6796 = v15225[i$$67];
          var parentResult$$1 = JAM.call(v6796.getAllTypeSymbolNames, v6796, [members$$17]);
          if (parentResult$$1) {
            result$$19 = result$$19.concat(parentResult$$1);
          }
          i$$67++;
          var v20251 = this.parents;
          var v15226 = v20251.length;
          v6797 = i$$67 < v15226;
        }
      }
      return result$$19;
    }
    function v814(members$$16) {
      var result$$18 = [];
      var v6801 = this.parents;
      if (v6801) {
        var i$$66 = 0;
        var v20252 = this.parents;
        var v15227 = v20252.length;
        var v6800 = i$$66 < v15227;
        for (;v6800;) {
          var v15228 = this.parents;
          var v6799 = v15228[i$$66];
          var parentResult = JAM.call(v6799.getAllSymbolNames, v6799, [members$$16]);
          if (parentResult) {
            result$$18 = result$$18.concat(parentResult);
          }
          i$$66++;
          var v20253 = this.parents;
          var v15229 = v20253.length;
          v6800 = i$$66 < v15229;
        }
      }
      return result$$18;
    }
    function v813(filter$$1, name$$62, publicOnly$$7, typespace$$6) {
      var v6805 = this.parents;
      if (v6805) {
        var i$$65 = 0;
        var v20254 = this.parents;
        var v15230 = v20254.length;
        var v6804 = i$$65 < v15230;
        for (;v6804;) {
          var v15231 = this.parents;
          var v6802 = v15231[i$$65];
          var sym$$8 = JAM.call(v6802.search, v6802, [filter$$1, name$$62, publicOnly$$7, typespace$$6], JAM.policy.p1);
          if (sym$$8) {
            var v6803 = JAM.call(filter$$1.update, filter$$1, [sym$$8]);
            if (v6803) {
              return sym$$8;
            }
          }
          i$$65++;
          var v20255 = this.parents;
          var v15232 = v20255.length;
          v6804 = i$$65 < v15232;
        }
      }
      return filter$$1.result;
    }
    function v812() {
      return "agg";
    }
    function SymbolAggregateScope$$1(container$$5) {
      JAM.call(_super$$54.call, _super$$54, [this, container$$5], JAM.policy.p1);
      this.valueCache = null;
      this.valueImplCache = null;
      this.valueAmbientCache = null;
      this.typeCache = null;
      this.typeImplCache = null;
      this.typeAmbientCache = null;
      this.parents = null;
      this.container = container$$5;
      return;
    }
    JAM.call(__extends, null, [SymbolAggregateScope$$1, _super$$54], JAM.policy.p1);
    var v6806 = SymbolAggregateScope$$1.prototype;
    v6806.printLabel = v812;
    var v6807 = SymbolAggregateScope$$1.prototype;
    v6807.search = v813;
    var v6808 = SymbolAggregateScope$$1.prototype;
    v6808.getAllSymbolNames = v814;
    var v6809 = SymbolAggregateScope$$1.prototype;
    v6809.getAllTypeSymbolNames = v815;
    var v6810 = SymbolAggregateScope$$1.prototype;
    v6810.getAllValueSymbolNames = v816;
    var v6811 = SymbolAggregateScope$$1.prototype;
    v6811.print = v817;
    var v6812 = SymbolAggregateScope$$1.prototype;
    v6812.findImplementation = v818;
    var v6813 = SymbolAggregateScope$$1.prototype;
    v6813.find = v819;
    var v6814 = SymbolAggregateScope$$1.prototype;
    v6814.findAmbient = v820;
    var v6815 = SymbolAggregateScope$$1.prototype;
    v6815.addParentScope = v821;
    return SymbolAggregateScope$$1;
  }
  function v811() {
    function v810() {
      throw new Error("please implement in derived class");
    }
    function v809(container$$4, ast$$60, symbol$$6, errorReporter$$2, publicOnly$$6, typespace$$5, ambient) {
      throw new Error("please implement in derived class");
    }
    function v808(outfile$$6) {
      var v6818 = this.container;
      if (v6818) {
        var v23538 = this.printLabel();
        var v20256 = v23538 + " scope with container: ";
        var v23539 = this.container;
        var v20257 = v23539.name;
        var v15233 = v20256 + v20257;
        var v6816 = v15233 + "...";
        JAM.call(outfile$$6.WriteLine, outfile$$6, [v6816]);
      } else {
        var v15234 = this.printLabel();
        var v6817 = v15234 + " scope...";
        JAM.call(outfile$$6.WriteLine, outfile$$6, [v6817]);
      }
      return;
    }
    function v807(name$$61, publicOnly$$5, typespace$$4) {
      return null;
    }
    function v806(name$$60, publicOnly$$4, typespace$$3) {
      return null;
    }
    function v805(name$$59, publicOnly$$3, typespace$$2) {
      return null;
    }
    function v804(name$$58, publicOnly$$2, typespace$$1) {
      return null;
    }
    function v803(filter, name$$57, publicOnly$$1, typespace) {
      return null;
    }
    function v802(members$$15) {
      return ["please", "implement", "in", "derived", "classes"];
    }
    function v801(members$$14) {
      return ["please", "implement", "in", "derived", "classes"];
    }
    function v800(members$$13) {
      return ["please", "implement", "in", "derived", "classes"];
    }
    function v799() {
      return "base";
    }
    function SymbolScope$$1(container$$3) {
      this.container = container$$3;
      return;
    }
    var v6819 = SymbolScope$$1.prototype;
    v6819.printLabel = v799;
    var v6820 = SymbolScope$$1.prototype;
    v6820.getAllSymbolNames = v800;
    var v6821 = SymbolScope$$1.prototype;
    v6821.getAllTypeSymbolNames = v801;
    var v6822 = SymbolScope$$1.prototype;
    v6822.getAllValueSymbolNames = v802;
    var v6823 = SymbolScope$$1.prototype;
    v6823.search = v803;
    var v6824 = SymbolScope$$1.prototype;
    v6824.findLocal = v804;
    var v6825 = SymbolScope$$1.prototype;
    v6825.find = v805;
    var v6826 = SymbolScope$$1.prototype;
    v6826.findImplementation = v806;
    var v6827 = SymbolScope$$1.prototype;
    v6827.findAmbient = v807;
    var v6828 = SymbolScope$$1.prototype;
    v6828.print = v808;
    var v6829 = SymbolScope$$1.prototype;
    v6829.enter = v809;
    var v6830 = SymbolScope$$1.prototype;
    v6830.getTable = v810;
    return SymbolScope$$1;
  }
  function v798(SymbolKind$$1) {
    SymbolKind$$1._map = [];
    var v6831 = SymbolKind$$1._map;
    v6831[0] = "None";
    SymbolKind$$1.None = 0;
    var v6832 = SymbolKind$$1._map;
    v6832[1] = "Type";
    SymbolKind$$1.Type = 1;
    var v6833 = SymbolKind$$1._map;
    v6833[2] = "Field";
    SymbolKind$$1.Field = 2;
    var v6834 = SymbolKind$$1._map;
    v6834[3] = "Parameter";
    SymbolKind$$1.Parameter = 3;
    var v6835 = SymbolKind$$1._map;
    v6835[4] = "Variable";
    SymbolKind$$1.Variable = 4;
    return;
  }
  function v797() {
    function v796(key$$34, data$$34) {
      var v15235 = this.dualMembers;
      var v6836 = v15235.secondaryTable;
      JAM.call(v6836.add, v6836, [key$$34, data$$34], JAM.policy.p1);
      return;
    }
    function v795(key$$33, data$$33) {
      var v15236 = this.dualMembers;
      var v6837 = v15236.primaryTable;
      JAM.call(v6837.add, v6837, [key$$33, data$$33], JAM.policy.p1);
      return;
    }
    function ScopedMembers$$1(dualMembers) {
      this.dualMembers = dualMembers;
      this.allMembers = this.dualMembers;
      var v6838 = this.dualMembers;
      this.publicMembers = v6838.primaryTable;
      var v6839 = this.dualMembers;
      this.privateMembers = v6839.secondaryTable;
      return;
    }
    var v6840 = ScopedMembers$$1.prototype;
    v6840.addPublicMember = v795;
    var v6841 = ScopedMembers$$1.prototype;
    v6841.addPrivateMember = v796;
    return ScopedMembers$$1;
  }
  var ScopedMembers = v797();
  TypeScript$$21.ScopedMembers = ScopedMembers;
  var v15237 = TypeScript$$21.SymbolKind;
  var v20258 = !v15237;
  if (v20258) {
    v15237 = TypeScript$$21.SymbolKind = {};
  }
  var v6842 = v15237;
  v798(v6842);
  var SymbolKind = TypeScript$$21.SymbolKind;
  var SymbolScope = v811();
  TypeScript$$21.SymbolScope = SymbolScope;
  var SymbolAggregateScope = v822(SymbolScope);
  TypeScript$$21.SymbolAggregateScope = SymbolAggregateScope;
  var SymbolTableScope = v837(SymbolScope);
  TypeScript$$21.SymbolTableScope = SymbolTableScope;
  var SymbolScopeBuilder = v853(SymbolScope);
  TypeScript$$21.SymbolScopeBuilder = SymbolScopeBuilder;
  var FilteredSymbolScope = v857(SymbolScope);
  TypeScript$$21.FilteredSymbolScope = FilteredSymbolScope;
  var FilteredSymbolScopeBuilder = v861(SymbolScopeBuilder);
  TypeScript$$21.FilteredSymbolScopeBuilder = FilteredSymbolScopeBuilder;
  return;
}
function v794(TypeScript$$20) {
  function v793(_super$$53) {
    function v792() {
      return true;
    }
    function v791(type$$36) {
      var v15238 = this.variable;
      var v6843 = v15238.typeLink;
      v6843.type = type$$36;
      return;
    }
    function v790(scope$$20) {
      var v6844 = TypeScript$$20.MemberName;
      var v15239 = this.getType();
      var v6845 = JAM.call(v15239.getScopedTypeNameEx, v15239, [scope$$20]);
      var v15240 = this.name;
      var v6846 = v15240 + ": ";
      return JAM.call(v6844.create, v6844, [v6845, v6846, ""], JAM.policy.p1);
    }
    function v789() {
      var v15241 = this.variable;
      var v6847 = v15241.typeLink;
      return v6847.type;
    }
    function v788() {
      return true;
    }
    function v787() {
      var v6848 = TypeScript$$20.SymbolKind;
      return v6848.Variable;
    }
    function VariableSymbol$$1(name$$56, location$$27, unitIndex$$9, variable) {
      var v6849 = name$$56.length;
      JAM.call(_super$$53.call, _super$$53, [this, name$$56, location$$27, v6849, unitIndex$$9], JAM.policy.p1);
      this.variable = variable;
      return;
    }
    JAM.call(__extends, null, [VariableSymbol$$1, _super$$53], JAM.policy.p1);
    var v6850 = VariableSymbol$$1.prototype;
    v6850.kind = v787;
    var v6851 = VariableSymbol$$1.prototype;
    v6851.writeable = v788;
    var v6852 = VariableSymbol$$1.prototype;
    v6852.getType = v789;
    var v6853 = VariableSymbol$$1.prototype;
    v6853.getTypeNameEx = v790;
    var v6854 = VariableSymbol$$1.prototype;
    v6854.setType = v791;
    var v6855 = VariableSymbol$$1.prototype;
    v6855.isVariable = v792;
    return VariableSymbol$$1;
  }
  function v786(_super$$52) {
    function v785() {
      var v15242 = this.paramDocComment;
      var v6864 = !v15242;
      if (v6864) {
        var parameterComments = [];
        var v6860 = this.funcDecl;
        if (v6860) {
          var v6856 = this.funcDecl;
          var fncDocComments$$1 = v6856.getDocComments();
          var v6857 = TypeScript$$20.Comment;
          var v6858 = this.name;
          var paramComment = JAM.call(v6857.getParameterDocCommentText, v6857, [v6858, fncDocComments$$1], JAM.policy.p1);
          var v6859 = paramComment != "";
          if (v6859) {
            JAM.call(parameterComments.push, parameterComments, [paramComment]);
          }
        }
        var v6861 = TypeScript$$20.Comment;
        var v6862 = this.getDocComments();
        var docComments$$1 = JAM.call(v6861.getDocCommentText, v6861, [v6862]);
        var v6863 = docComments$$1 != "";
        if (v6863) {
          JAM.call(parameterComments.push, parameterComments, [docComments$$1]);
        }
        var v26673 = parameterComments.join("\n");
        this.paramDocComment = v26673;
      }
      return this.paramDocComment;
    }
    function v784(pattern$$7, replacement$$5, checker$$14) {
      var v20259 = this.parameter;
      var v15243 = v20259.typeLink;
      var v6865 = v15243.type;
      var rType$$1 = JAM.call(v6865.specializeType, v6865, [pattern$$7, replacement$$5, checker$$14, false], JAM.policy.p1);
      var v23540 = this.parameter;
      var v20260 = v23540.typeLink;
      var v15244 = v20260.type;
      var v6868 = v15244 != rType$$1;
      if (v6868) {
        var paramDef$$1 = new ValueLocation;
        var v6866 = this.name;
        var v15245 = checker$$14.locationInfo;
        var v6867 = v15245.unitIndex;
        var result$$17 = new ParameterSymbol$$1(v6866, 0, v6867, paramDef$$1);
        paramDef$$1.symbol = result$$17;
        JAM.call(result$$17.setType, result$$17, [rType$$1]);
        return result$$17;
      } else {
        return this;
      }
      return;
    }
    function v783() {
      var v6869 = JAM.call(this.getTypeNameEx, this, [null]);
      return v6869.toString();
    }
    function v782(scope$$19) {
      var v6870 = TypeScript$$20.MemberName;
      var v15246 = this.getType();
      var v6871 = JAM.call(v15246.getScopedTypeNameEx, v15246, [scope$$19]);
      var v20261 = this.name;
      var v23541;
      var v25159 = this.isOptional();
      if (v25159) {
        v23541 = "?";
      } else {
        v23541 = "";
      }
      var v20262 = v23541;
      var v15247 = v20261 + v20262;
      var v6872 = v15247 + ": ";
      return JAM.call(v6870.create, v6870, [v6871, v6872, ""], JAM.policy.p1);
    }
    function v781() {
      var v20263 = this.parameter;
      if (v20263) {
        var v23542 = this.parameter;
        v20263 = v23542.symbol;
      }
      var v15248 = v20263;
      if (v15248) {
        var v23543 = this.parameter;
        var v20264 = v23543.symbol;
        v15248 = v20264.declAST;
      }
      var v6874 = v15248;
      if (v6874) {
        var v20265 = this.parameter;
        var v15249 = v20265.symbol;
        var v6873 = v15249.declAST;
        return v6873.isOptional;
      } else {
        return false;
      }
      return;
    }
    function v780() {
      return true;
    }
    function v779(type$$35) {
      var v15250 = this.parameter;
      var v6875 = v15250.typeLink;
      v6875.type = type$$35;
      return;
    }
    function v778() {
      var v15251 = this.parameter;
      var v6876 = v15251.typeLink;
      return v6876.type;
    }
    function v777() {
      return true;
    }
    function v776() {
      var v6877 = TypeScript$$20.SymbolKind;
      return v6877.Parameter;
    }
    function ParameterSymbol$$1(name$$55, location$$26, unitIndex$$8, parameter) {
      var v6878 = name$$55.length;
      JAM.call(_super$$52.call, _super$$52, [this, name$$55, location$$26, v6878, unitIndex$$8], JAM.policy.p1);
      this.parameter = parameter;
      this.paramDocComment = null;
      this.funcDecl = null;
      this.argsOffset = -1;
      this.name = name$$55;
      this.location = location$$26;
      return;
    }
    JAM.call(__extends, null, [ParameterSymbol$$1, _super$$52], JAM.policy.p1);
    var v6879 = ParameterSymbol$$1.prototype;
    v6879.kind = v776;
    var v6880 = ParameterSymbol$$1.prototype;
    v6880.writeable = v777;
    var v6881 = ParameterSymbol$$1.prototype;
    v6881.getType = v778;
    var v6882 = ParameterSymbol$$1.prototype;
    v6882.setType = v779;
    var v6883 = ParameterSymbol$$1.prototype;
    v6883.isVariable = v780;
    var v6884 = ParameterSymbol$$1.prototype;
    v6884.isOptional = v781;
    var v6885 = ParameterSymbol$$1.prototype;
    v6885.getTypeNameEx = v782;
    var v6886 = ParameterSymbol$$1.prototype;
    v6886.toString = v783;
    var v6887 = ParameterSymbol$$1.prototype;
    v6887.specializeType = v784;
    var v6888 = ParameterSymbol$$1.prototype;
    v6888.getParameterDocComments = v785;
    return ParameterSymbol$$1;
  }
  function v775(_super$$51) {
    function v774() {
      var v20266 = this.getter;
      var v15252 = v20266 != null;
      var v20268 = !v15252;
      if (v20268) {
        var v20267 = this.setter;
        v15252 = v20267 != null;
      }
      var v6895 = v15252;
      if (v6895) {
        var comments$$11 = [];
        var v15253 = this.getter;
        var v6890 = v15253 != null;
        if (v6890) {
          var v15254 = this.getter;
          var v6889 = v15254.getDocComments();
          comments$$11 = comments$$11.concat(v6889);
        }
        var v15255 = this.setter;
        var v6892 = v15255 != null;
        if (v6892) {
          var v15256 = this.setter;
          var v6891 = v15256.getDocComments();
          comments$$11 = comments$$11.concat(v6891);
        }
        return comments$$11;
      } else {
        var v15257 = this.declAST;
        var v6894 = v15257 != null;
        if (v6894) {
          var v6893 = this.declAST;
          return v6893.getDocComments();
        }
      }
      return [];
    }
    function v773(pattern$$6, replacement$$4, checker$$13) {
      var v20269 = this.field;
      var v15258 = v20269.typeLink;
      var v6896 = v15258.type;
      var rType = JAM.call(v6896.specializeType, v6896, [pattern$$6, replacement$$4, checker$$13, false], JAM.policy.p1);
      var v23544 = this.field;
      var v20270 = v23544.typeLink;
      var v15259 = v20270.type;
      var v6901 = rType != v15259;
      if (v6901) {
        var fieldDef = new ValueLocation;
        var v6897 = this.name;
        var v15260 = checker$$13.locationInfo;
        var v6898 = v15260.unitIndex;
        var v6899 = this.canWrite;
        var result$$16 = new FieldSymbol$$1(v6897, 0, v6898, v6899, fieldDef);
        result$$16.flags = this.flags;
        fieldDef.symbol = result$$16;
        var v6900 = TypeScript$$20.TypeLink;
        var v26674 = new v6900;
        fieldDef.typeLink = v26674;
        JAM.call(result$$16.setType, result$$16, [rType]);
        result$$16.typeCheckStatus = TypeCheckStatus.Finished;
        return result$$16;
      } else {
        return this;
      }
      return;
    }
    function v772() {
      var v6902 = JAM.call(this.getTypeNameEx, this, [null]);
      return v6902.toString();
    }
    function v771() {
      return true;
    }
    function v770() {
      var v15261 = this.getter;
      var v6903 = v15261 != null;
      var v15263 = !v6903;
      if (v15263) {
        var v15262 = this.setter;
        v6903 = v15262 != null;
      }
      return v6903;
    }
    function v769(type$$34) {
      var v15264 = this.field;
      var v6904 = v15264.typeLink;
      v6904.type = type$$34;
      return;
    }
    function v768() {
      return true;
    }
    function v767(scope$$18) {
      var v6905 = TypeScript$$20.MemberName;
      var v23545 = this.field;
      var v20271 = v23545.typeLink;
      var v15265 = v20271.type;
      var v6906 = JAM.call(v15265.getScopedTypeNameEx, v15265, [scope$$18]);
      var v20272 = this.name;
      var v20273 = this.getOptionalNameString();
      var v15266 = v20272 + v20273;
      var v6907 = v15266 + ": ";
      return JAM.call(v6905.create, v6905, [v6906, v6907, ""], JAM.policy.p1);
    }
    function v766() {
      var v15267 = this.field;
      var v6908 = v15267.typeLink;
      return v6908.type;
    }
    function v765() {
      var v6909;
      var v15269 = this.isAccessor();
      if (v15269) {
        var v15268 = this.setter;
        v6909 = v15268 != null;
      } else {
        v6909 = this.canWrite;
      }
      return v6909;
    }
    function v764() {
      var v6910 = TypeScript$$20.SymbolKind;
      return v6910.Field;
    }
    function FieldSymbol$$1(name$$54, location$$25, unitIndex$$7, canWrite, field) {
      var v6911 = name$$54.length;
      JAM.call(_super$$51.call, _super$$51, [this, name$$54, location$$25, v6911, unitIndex$$7], JAM.policy.p1);
      this.canWrite = canWrite;
      this.field = field;
      this.getter = null;
      this.setter = null;
      this.hasBeenEmitted = false;
      this.name = name$$54;
      this.location = location$$25;
      return;
    }
    JAM.call(__extends, null, [FieldSymbol$$1, _super$$51], JAM.policy.p1);
    var v6912 = FieldSymbol$$1.prototype;
    v6912.kind = v764;
    var v6913 = FieldSymbol$$1.prototype;
    v6913.writeable = v765;
    var v6914 = FieldSymbol$$1.prototype;
    v6914.getType = v766;
    var v6915 = FieldSymbol$$1.prototype;
    v6915.getTypeNameEx = v767;
    var v6916 = FieldSymbol$$1.prototype;
    v6916.isMember = v768;
    var v6917 = FieldSymbol$$1.prototype;
    v6917.setType = v769;
    var v6918 = FieldSymbol$$1.prototype;
    v6918.isAccessor = v770;
    var v6919 = FieldSymbol$$1.prototype;
    v6919.isVariable = v771;
    var v6920 = FieldSymbol$$1.prototype;
    v6920.toString = v772;
    var v6921 = FieldSymbol$$1.prototype;
    v6921.specializeType = v773;
    var v6922 = FieldSymbol$$1.prototype;
    v6922.getDocComments = v774;
    return FieldSymbol$$1;
  }
  function v763(_super$$50) {
    function v762() {
      return true;
    }
    function WithSymbol$$1(location$$24, unitIndex$$6, withType$$1) {
      JAM.call(_super$$50.call, _super$$50, [this, "with", location$$24, 4, unitIndex$$6, withType$$1], JAM.policy.p1);
      return;
    }
    JAM.call(__extends, null, [WithSymbol$$1, _super$$50], JAM.policy.p1);
    var v6923 = WithSymbol$$1.prototype;
    v6923.isWith = v762;
    return WithSymbol$$1;
  }
  function v761(_super$$49) {
    function v760() {
      var comments$$10 = [];
      var v15270 = this.declAST;
      var v6925 = v15270 != null;
      if (v6925) {
        var v15271 = this.declAST;
        var v6924 = v15271.getDocComments();
        comments$$10 = comments$$10.concat(v6924);
      }
      var i$$64 = 0;
      var v20274 = this.expansionsDeclAST;
      var v15272 = v20274.length;
      var v6927 = i$$64 < v15272;
      for (;v6927;) {
        var v20275 = this.expansionsDeclAST;
        var v15273 = v20275[i$$64];
        var v6926 = v15273.getDocComments();
        comments$$10 = comments$$10.concat(v6926);
        i$$64++;
        var v20276 = this.expansionsDeclAST;
        var v15274 = v20276.length;
        v6927 = i$$64 < v15274;
      }
      return comments$$10;
    }
    function v759(scopeSymbolPath) {
      var scopeSymbolPathLength = scopeSymbolPath.length;
      var externalSymbol = null;
      var v23546 = scopeSymbolPath.length;
      var v20277 = v23546 > 0;
      if (v20277) {
        var v25847 = scopeSymbolPathLength - 1;
        var v25160 = scopeSymbolPath[v25847];
        var v23547 = v25160.getType();
        v20277 = v23547.isModuleType();
      }
      var v15275 = v20277;
      if (v15275) {
        var v23548 = scopeSymbolPathLength - 1;
        var v20278 = scopeSymbolPath[v23548];
        v15275 = v20278.isDynamic;
      }
      var v6934 = v15275;
      if (v6934) {
        var v20279 = scopeSymbolPathLength > 1;
        if (v20279) {
          var v25848 = scopeSymbolPathLength - 2;
          var v25161 = scopeSymbolPath[v25848];
          var v23549 = v25161.getType();
          v20279 = v23549.isModuleType();
        }
        var v15276 = v20279;
        if (v15276) {
          var v23550 = scopeSymbolPathLength - 2;
          var v20280 = scopeSymbolPath[v23550];
          v15276 = v20280.isDynamic;
        }
        var v6930 = v15276;
        if (v6930) {
          var v15277 = scopeSymbolPathLength - 2;
          var v6928 = scopeSymbolPath[v15277];
          var moduleType = v6928.getType();
          var v6929 = this.type;
          externalSymbol = JAM.call(moduleType.findDynamicModuleName, moduleType, [v6929]);
        }
        var v6933 = externalSymbol == null;
        if (v6933) {
          var v15278 = scopeSymbolPathLength - 1;
          var v6931 = scopeSymbolPath[v15278];
          moduleType = v6931.getType();
          var v6932 = this.type;
          externalSymbol = JAM.call(moduleType.findDynamicModuleName, moduleType, [v6932]);
        }
      }
      return externalSymbol;
    }
    function v758(scopeSymbol$$1) {
      var v23551 = !scopeSymbol$$1;
      var v20281 = !v23551;
      if (v20281) {
        var v23552 = this.prettyName;
        v20281 = JAM.call(TypeScript$$20.isQuoted, TypeScript$$20, [v23552]);
      }
      var v15279 = v20281;
      if (v15279) {
        var v20282 = this.type;
        v15279 = v20282.isModuleType();
      }
      var v6936 = v15279;
      if (v6936) {
        var symbolPath = scopeSymbol$$1.pathToRoot();
        var prettyName$$1 = JAM.call(this.getPrettyNameOfDynamicModule, this, [symbolPath]);
        var v6935 = prettyName$$1 != null;
        if (v6935) {
          return prettyName$$1.name;
        }
      }
      return this.prettyName;
    }
    function v757(pattern$$5, replacement$$3, checker$$12) {
      var v15280 = this.type;
      var v6940 = v15280 == pattern$$5;
      if (v6940) {
        return replacement$$3.symbol;
      } else {
        var v6937 = this.type;
        var replType = JAM.call(v6937.specializeType, v6937, [pattern$$5, replacement$$3, checker$$12, false], JAM.policy.p1);
        var v15281 = this.type;
        var v6939 = replType != v15281;
        if (v6939) {
          var v6938 = this.name;
          var result$$15 = new TypeSymbol$$1(v6938, -1, 0, -1, replType);
          return result$$15;
        } else {
          return this;
        }
      }
      return;
    }
    function v756() {
      var v15282 = this.declAST;
      var v6941 = v15282 != null;
      if (v6941) {
        var v20283 = this.declAST;
        var v15283 = v20283.nodeType;
        var v20284 = TypeScript$$20.NodeType;
        var v15284 = v20284.FuncDecl;
        v6941 = v15283 == v15284;
      }
      return v6941;
    }
    function v755() {
      var v6942 = this.instanceType;
      return v6942 != null;
    }
    function v754() {
      var v6943 = this.type;
      var result$$14 = v6943.getTypeName();
      var v6945 = this.name;
      if (v6945) {
        var v15285 = this.name;
        var v6944 = v15285 + ":";
        result$$14 = v6944 + result$$14;
      }
      return result$$14;
    }
    function v753() {
      var v25162 = this.type;
      var v23553 = v25162.typeFlags;
      var v25163 = TypeScript$$20.TypeFlags;
      var v23554 = v25163.IsClass;
      var v20285 = v23553 & v23554;
      var v15286 = !v20285;
      if (v15286) {
        var v20286 = this.type;
        v15286 = v20286.isClass();
      }
      var v6948 = v15286;
      if (v6948) {
        var v15287 = this.type;
        var v6946 = v15287.instanceType;
        return v6946.constructorScope;
      } else {
        var v6947 = this.type;
        return v6947.containedScope;
      }
      return;
    }
    function v752(scope$$17) {
      var v6949 = this.type;
      var v15288;
      var v20289 = this.name;
      if (v20289) {
        var v20287 = this.name;
        var v20288 = this.getOptionalNameString();
        v15288 = v20287 + v20288;
      } else {
        v15288 = "";
      }
      var v6950 = v15288;
      return JAM.call(v6949.getMemberTypeNameEx, v6949, [v6950, false, false, scope$$17], JAM.policy.p1);
    }
    function v751() {
      return this.type;
    }
    function v750() {
      return true;
    }
    function v749() {
      var v6951 = TypeScript$$20.SymbolKind;
      return v6951.Type;
    }
    function v748(loc) {
      var v15289 = this.additionalLocations;
      var v6952 = v15289 == null;
      if (v6952) {
        this.additionalLocations = [];
      }
      var v6953 = this.additionalLocations;
      var v15290 = this.additionalLocations;
      var v6954 = v15290.length;
      JAM.set(v6953, v6954, loc);
      return;
    }
    function TypeSymbol$$1(locName, location$$23, length$$17, unitIndex$$5, type$$33) {
      JAM.call(_super$$49.call, _super$$49, [this, locName, location$$23, length$$17, unitIndex$$5], JAM.policy.p1);
      this.type = type$$33;
      this.expansions = [];
      this.expansionsDeclAST = [];
      this.isDynamic = false;
      this.isMethod = false;
      this.aliasLink = null;
      this.onlyReferencedAsTypeRef = TypeScript$$20.optimizeModuleCodeGen;
      this.prettyName = this.name;
      return;
    }
    JAM.call(__extends, null, [TypeSymbol$$1, _super$$49], JAM.policy.p1);
    var v6955 = TypeSymbol$$1.prototype;
    v6955.addLocation = v748;
    var v6956 = TypeSymbol$$1.prototype;
    v6956.kind = v749;
    var v6957 = TypeSymbol$$1.prototype;
    v6957.isType = v750;
    var v6958 = TypeSymbol$$1.prototype;
    v6958.getType = v751;
    var v6959 = TypeSymbol$$1.prototype;
    v6959.getTypeNameEx = v752;
    var v6960 = TypeSymbol$$1.prototype;
    v6960.instanceScope = v753;
    var v6961 = TypeSymbol$$1.prototype;
    v6961.toString = v754;
    var v6962 = TypeSymbol$$1.prototype;
    v6962.isClass = v755;
    var v6963 = TypeSymbol$$1.prototype;
    v6963.isFunction = v756;
    var v6964 = TypeSymbol$$1.prototype;
    v6964.specializeType = v757;
    var v6965 = TypeSymbol$$1.prototype;
    v6965.getPrettyName = v758;
    var v6966 = TypeSymbol$$1.prototype;
    v6966.getPrettyNameOfDynamicModule = v759;
    var v6967 = TypeSymbol$$1.prototype;
    v6967.getDocComments = v760;
    return TypeSymbol$$1;
  }
  function v747(_super$$48) {
    function v746(varFlags) {
      var v20290 = TypeScript$$20.VarFlags;
      var v15291 = v20290.Ambient;
      var v6968 = JAM.call(TypeScript$$20.hasFlag, TypeScript$$20, [varFlags, v15291], JAM.policy.p1);
      if (v6968) {
        var v15292 = this.flags;
        var v20291 = TypeScript$$20.SymbolFlags;
        var v15293 = v20291.Ambient;
        this.flags = v15292 | v15293;
      }
      var v20292 = TypeScript$$20.VarFlags;
      var v15294 = v20292.Constant;
      var v6969 = JAM.call(TypeScript$$20.hasFlag, TypeScript$$20, [varFlags, v15294], JAM.policy.p1);
      if (v6969) {
        var v15295 = this.flags;
        var v20293 = TypeScript$$20.SymbolFlags;
        var v15296 = v20293.Constant;
        this.flags = v15295 | v15296;
      }
      var v20294 = TypeScript$$20.VarFlags;
      var v15297 = v20294.Static;
      var v6970 = JAM.call(TypeScript$$20.hasFlag, TypeScript$$20, [varFlags, v15297], JAM.policy.p1);
      if (v6970) {
        var v15298 = this.flags;
        var v20295 = TypeScript$$20.SymbolFlags;
        var v15299 = v20295.Static;
        this.flags = v15298 | v15299;
      }
      var v20296 = TypeScript$$20.VarFlags;
      var v15300 = v20296.Property;
      var v6971 = JAM.call(TypeScript$$20.hasFlag, TypeScript$$20, [varFlags, v15300], JAM.policy.p1);
      if (v6971) {
        var v15301 = this.flags;
        var v20297 = TypeScript$$20.SymbolFlags;
        var v15302 = v20297.Property;
        this.flags = v15301 | v15302;
      }
      var v20298 = TypeScript$$20.VarFlags;
      var v15303 = v20298.Private;
      var v6972 = JAM.call(TypeScript$$20.hasFlag, TypeScript$$20, [varFlags, v15303], JAM.policy.p1);
      if (v6972) {
        var v15304 = this.flags;
        var v20299 = TypeScript$$20.SymbolFlags;
        var v15305 = v20299.Private;
        this.flags = v15304 | v15305;
      }
      var v20300 = TypeScript$$20.VarFlags;
      var v15306 = v20300.Public;
      var v6973 = JAM.call(TypeScript$$20.hasFlag, TypeScript$$20, [varFlags, v15306], JAM.policy.p1);
      if (v6973) {
        var v15307 = this.flags;
        var v20301 = TypeScript$$20.SymbolFlags;
        var v15308 = v20301.Public;
        this.flags = v15307 | v15308;
      }
      var v20302 = TypeScript$$20.VarFlags;
      var v15309 = v20302.Readonly;
      var v6974 = JAM.call(TypeScript$$20.hasFlag, TypeScript$$20, [varFlags, v15309], JAM.policy.p1);
      if (v6974) {
        var v15310 = this.flags;
        var v20303 = TypeScript$$20.SymbolFlags;
        var v15311 = v20303.Readonly;
        this.flags = v15310 | v15311;
      }
      var v20304 = TypeScript$$20.VarFlags;
      var v15312 = v20304.Exported;
      var v6975 = JAM.call(TypeScript$$20.hasFlag, TypeScript$$20, [varFlags, v15312], JAM.policy.p1);
      if (v6975) {
        var v15313 = this.flags;
        var v20305 = TypeScript$$20.SymbolFlags;
        var v15314 = v20305.Exported;
        this.flags = v15313 | v15314;
      }
      return;
    }
    function v745() {
      return true;
    }
    function InferenceSymbol$$1(name$$53, location$$22, length$$16, unitIndex$$4) {
      JAM.call(_super$$48.call, _super$$48, [this, name$$53, location$$22, length$$16, unitIndex$$4], JAM.policy.p1);
      this.typeCheckStatus = TypeCheckStatus.NotStarted;
      return;
    }
    JAM.call(__extends, null, [InferenceSymbol$$1, _super$$48], JAM.policy.p1);
    var v6976 = InferenceSymbol$$1.prototype;
    v6976.isInferenceSymbol = v745;
    var v6977 = InferenceSymbol$$1.prototype;
    v6977.transferVarFlags = v746;
    return InferenceSymbol$$1;
  }
  function v744() {
    function ValueLocation$$1() {
      return;
    }
    return ValueLocation$$1;
  }
  function v743() {
    function v742() {
      var v6978 = this.flags;
      var v15315 = TypeScript$$20.SymbolFlags;
      var v6979 = v15315.Static;
      return JAM.call(TypeScript$$20.hasFlag, TypeScript$$20, [v6978, v6979], JAM.policy.p1);
    }
    function v741() {
      var v15316 = this.declAST;
      var v6981 = v15316 != null;
      if (v6981) {
        var v6980 = this.declAST;
        return v6980.getDocComments();
      }
      return [];
    }
    function v740() {
      var v20306 = this.declAST;
      var v15317 = v20306 != null;
      if (v15317) {
        var v23555 = this.declAST;
        var v20307 = v23555.nodeType;
        var v23556 = TypeScript$$20.NodeType;
        var v20308 = v23556.VarDecl;
        v15317 = v20307 == v20308;
      }
      var v6982 = v15317;
      if (v6982) {
        return this.declAST;
      }
      return null;
    }
    function v739(checker$$11) {
      var v15318 = this.declAST;
      var v6986 = v15318 != null;
      if (v6986) {
        var v20309 = this.declAST;
        var v15319 = v20309.nodeType;
        var v20310 = TypeScript$$20.NodeType;
        var v15320 = v20310.InterfaceDeclaration;
        var v6985 = v15319 == v15320;
        if (v6985) {
          return this.declAST;
        } else {
          var v23557 = this.container;
          var v20311 = v23557 != null;
          if (v20311) {
            var v23558 = this.container;
            var v23559 = checker$$11.gloMod;
            v20311 = v23558 != v23559;
          }
          var v15321 = v20311;
          if (v15321) {
            var v25164 = this.container;
            var v23560 = v25164.declAST;
            var v20312 = v23560.nodeType;
            var v23561 = TypeScript$$20.NodeType;
            var v20313 = v23561.InterfaceDeclaration;
            v15321 = v20312 == v20313;
          }
          var v6984 = v15321;
          if (v6984) {
            var v6983 = this.container;
            return v6983.declAST;
          }
        }
      }
      return null;
    }
    function v738() {
      throw new Error("please implement in derived class");
    }
    function v737(type$$32) {
      throw new Error("please implement in derived class");
    }
    function v736(pattern$$4, replacement$$2, checker$$10) {
      throw new Error("please implement in derived class");
    }
    function v735(outfile$$5) {
      var v6987 = this.toString();
      JAM.call(outfile$$5.Write, outfile$$5, [v6987]);
      return;
    }
    function v734() {
      var v6988 = this.name;
      if (v6988) {
        return this.name;
      } else {
        return "_anonymous";
      }
      return;
    }
    function v733(identifier) {
      var v15322 = this.refs;
      var v6989 = !v15322;
      if (v6989) {
        this.refs = [];
      }
      var v6990 = this.refs;
      var v15323 = this.refs;
      var v6991 = v15323.length;
      JAM.set(v6990, v6991, identifier);
      return;
    }
    function v732(scope$$16, checker$$9) {
      var v15324 = checker$$9 == null;
      var v20316 = !v15324;
      if (v20316) {
        var v20314 = this.container;
        var v20315 = checker$$9.gloMod;
        v15324 = v20314 == v20315;
      }
      var v6992 = v15324;
      if (v6992) {
        return true;
      }
      var v15325 = this.flags;
      var v20317 = TypeScript$$20.SymbolFlags;
      var v15326 = v20317.ModuleMember;
      var v7008 = JAM.call(TypeScript$$20.hasFlag, TypeScript$$20, [v15325, v15326], JAM.policy.p1);
      if (v7008) {
        var v15327 = this.flags;
        var v20318 = TypeScript$$20.SymbolFlags;
        var v15328 = v20318.Exported;
        var v6996 = JAM.call(TypeScript$$20.hasFlag, TypeScript$$20, [v15327, v15328], JAM.policy.p1);
        if (v6996) {
          var v20319 = this.flags;
          var v23562 = TypeScript$$20.SymbolFlags;
          var v20320 = v23562.Private;
          var v15329 = JAM.call(TypeScript$$20.hasFlag, TypeScript$$20, [v20319, v20320], JAM.policy.p1);
          var v6994 = !v15329;
          if (v6994) {
            return true;
          } else {
            var v6993 = scope$$16.container;
            return aEnclosesB(this, v6993);
          }
        } else {
          var v15330 = checker$$9;
          if (v15330) {
            var v20321 = checker$$9.currentModDecl;
            var v20322 = this.declModule;
            v15330 = v20321 == v20322;
          }
          var v6995 = v15330;
          var v15332 = !v6995;
          if (v15332) {
            var v26147 = checker$$9.currentModDecl;
            if (v26147) {
              var v26292 = checker$$9.currentModDecl;
              v26147 = v26292.mod;
            }
            var v25849 = v26147;
            if (v25849) {
              var v26293 = checker$$9.currentModDecl;
              var v26148 = v26293.mod;
              v25849 = v26148.symbol;
            }
            var v25165 = v25849;
            if (v25165) {
              v25165 = this.declModule;
            }
            var v23563 = v25165;
            if (v23563) {
              var v25166 = this.declModule;
              v23563 = v25166.mod;
            }
            var v20323 = v23563;
            if (v20323) {
              var v25167 = this.declModule;
              var v23564 = v25167.mod;
              v20323 = v23564.symbol;
            }
            var v15331 = v20323;
            if (v15331) {
              var v25168 = checker$$9.currentModDecl;
              var v23565 = v25168.mod;
              var v20324 = v23565.symbol;
              var v25169 = this.declModule;
              var v23566 = v25169.mod;
              var v20325 = v23566.symbol;
              v15331 = aEnclosesB(v20324, v20325);
            }
            v6995 = v15331;
          }
          return v6995;
        }
      } else {
        var v6997 = this.declAST;
        if (v6997) {
          var v20326 = this.declAST;
          var v15333 = v20326.nodeType;
          var v20327 = TypeScript$$20.NodeType;
          var v15334 = v20327.FuncDecl;
          v6997 = v15333 == v15334;
        }
        var isFunction = v6997;
        var v6998 = isFunction;
        if (v6998) {
          var v15335 = this.declAST;
          v6998 = v15335.isMethod();
        }
        var isMethod$$2 = v6998;
        var v6999 = isFunction;
        if (v6999) {
          var v20328 = this.declAST;
          var v15336 = v20328.fncFlags;
          var v20329 = TypeScript$$20.FncFlags;
          var v15337 = v20329.Static;
          v6999 = JAM.call(TypeScript$$20.hasFlag, TypeScript$$20, [v15336, v15337], JAM.policy.p1);
        }
        var isStaticFunction = v6999;
        var v7000 = isMethod$$2;
        if (v7000) {
          var v20330 = this.declAST;
          var v15338 = v20330.fncFlags;
          var v20331 = TypeScript$$20.FncFlags;
          var v15339 = v20331.Private;
          v7000 = JAM.call(TypeScript$$20.hasFlag, TypeScript$$20, [v15338, v15339], JAM.policy.p1);
        }
        var isPrivateMethod = v7000;
        var v7001 = this.isType();
        if (v7001) {
          v7001 = this.aliasLink;
        }
        var isAlias = v7001;
        var v23567 = this.isMember();
        var v25170 = !v23567;
        if (v25170) {
          v23567 = isMethod$$2;
        }
        var v20332 = v23567;
        var v23568 = !v20332;
        if (v23568) {
          v20332 = isStaticFunction;
        }
        var v15340 = v20332;
        var v20333 = !v15340;
        if (v20333) {
          v15340 = isAlias;
        }
        var v7007 = v15340;
        if (v7007) {
          var v20334 = this.flags;
          var v23569 = TypeScript$$20.SymbolFlags;
          var v20335 = v23569.Private;
          var v15341 = JAM.call(TypeScript$$20.hasFlag, TypeScript$$20, [v20334, v20335], JAM.policy.p1);
          var v20336 = !v15341;
          if (v20336) {
            v15341 = isPrivateMethod;
          }
          var v7004 = v15341;
          if (v7004) {
            var v20337 = scope$$16.container;
            var v15342 = v20337 == null;
            if (v15342) {
              var v20338 = this.container;
              var v20339 = scope$$16.container;
              v15342 = v20338 != v20339;
            }
            var v7003 = v15342;
            if (v7003) {
              return false;
            } else {
              var v7002;
              var v20340 = this.container;
              var v15345 = v20340 == null;
              if (v15345) {
                v7002 = true;
              } else {
                var v15343 = scope$$16.container;
                var v15344 = this.container;
                v7002 = aEnclosesB(v15343, v15344);
              }
              return v7002;
            }
          } else {
            return true;
          }
        } else {
          var v7006 = this.container;
          if (v7006) {
            var v7005 = scope$$16.container;
            return aEnclosesB(this, v7005);
          } else {
            return true;
          }
        }
      }
      return;
    }
    function v731(checker$$8) {
      var v15346 = checker$$8.gloMod;
      var v7009 = this == v15346;
      if (v7009) {
        return true;
      }
      var v15347 = this.flags;
      var v20341 = TypeScript$$20.SymbolFlags;
      var v15348 = v20341.Private;
      var v7010 = JAM.call(TypeScript$$20.hasFlag, TypeScript$$20, [v15347, v15348], JAM.policy.p1);
      if (v7010) {
        return false;
      }
      var v20342 = this.flags;
      var v23570 = TypeScript$$20.SymbolFlags;
      var v20343 = v23570.Exported;
      var v15349 = JAM.call(TypeScript$$20.hasFlag, TypeScript$$20, [v20342, v20343], JAM.policy.p1);
      var v7013 = !v15349;
      if (v7013) {
        var v7011 = this.container;
        var v7012 = checker$$8.gloMod;
        return v7011 == v7012;
      }
      var v7014 = this.container;
      return JAM.call(v7014.isExternallyVisible, v7014, [checker$$8]);
    }
    function v730() {
      var builder$$4 = this.name;
      var ancestor = this.container;
      var v15350 = ancestor;
      if (v15350) {
        var v20344 = ancestor.name;
        var v20345 = TypeScript$$20.globalId;
        v15350 = v20344 != v20345;
      }
      var v7016 = v15350;
      for (;v7016;) {
        var v15351 = ancestor.name;
        var v7015 = v15351 + ".";
        builder$$4 = v7015 + builder$$4;
        ancestor = ancestor.container;
        var v15352 = ancestor;
        if (v15352) {
          var v20346 = ancestor.name;
          var v20347 = TypeScript$$20.globalId;
          v15352 = v20346 != v20347;
        }
        v7016 = v15352;
      }
      return builder$$4;
    }
    function v729(scope$$15) {
      var v7019 = scope$$15 == null;
      if (v7019) {
        var v7017 = JAM.call(this.getPrettyName, this, [null]);
        var v7018 = this.getOptionalNameString();
        return v7017 + v7018;
      }
      var v7020 = scope$$15.container;
      var lca = JAM.call(this.findCommonAncestorPath, this, [v7020]);
      var builder$$3 = "";
      var i$$63 = 0;
      var len$$24 = lca.length;
      var v7024 = i$$63 < len$$24;
      for (;v7024;) {
        var v7021 = lca[i$$63];
        var v15353;
        var v23571 = len$$24 - 1;
        var v20349 = i$$63 == v23571;
        if (v20349) {
          v15353 = scope$$15.container;
        } else {
          var v20348 = i$$63 + 1;
          v15353 = lca[v20348];
        }
        var v7022 = v15353;
        var prettyName = JAM.call(v7021.getPrettyName, v7021, [v7022]);
        var v7023 = prettyName + ".";
        builder$$3 = v7023 + builder$$3;
        i$$63++;
        v7024 = i$$63 < len$$24;
      }
      var v25171;
      var v25850 = len$$24 == 0;
      if (v25850) {
        v25171 = scope$$15.container;
      } else {
        v25171 = lca[0];
      }
      var v23572 = v25171;
      var v20350 = JAM.call(this.getPrettyName, this, [v23572]);
      var v20351 = this.getOptionalNameString();
      var v15354 = v20350 + v20351;
      builder$$3 = builder$$3 + v15354;
      return builder$$3;
    }
    function v728(scopeSymbol) {
      return this.name;
    }
    function v727(b$$9) {
      var v15355 = this.container;
      var v7025 = v15355 == null;
      if (v7025) {
        return new Array;
      }
      var v7026 = this.container;
      var aPath = v7026.pathToRoot();
      var bPath;
      if (b$$9) {
        bPath = b$$9.pathToRoot();
      } else {
        bPath = new Array;
      }
      var commonNodeIndex = -1;
      var i$$62 = 0;
      var aLen = aPath.length;
      var v7030 = i$$62 < aLen;
      for (;v7030;) {
        var aNode = aPath[i$$62];
        var j$$8 = 0;
        var bLen = bPath.length;
        var v7028 = j$$8 < bLen;
        for (;v7028;) {
          var bNode = bPath[j$$8];
          var v7027 = aNode == bNode;
          if (v7027) {
            commonNodeIndex = i$$62;
            break;
          }
          j$$8++;
          v7028 = j$$8 < bLen;
        }
        var v7029 = commonNodeIndex >= 0;
        if (v7029) {
          break;
        }
        i$$62++;
        v7030 = i$$62 < aLen;
      }
      var v7031 = commonNodeIndex >= 0;
      if (v7031) {
        return JAM.call(aPath.slice, aPath, [0, commonNodeIndex], JAM.policy.p1);
      } else {
        return aPath;
      }
      return;
    }
    function v726() {
      var path$$6 = new Array;
      var node$$2 = this;
      var v15356 = node$$2;
      if (v15356) {
        var v20352 = node$$2.name;
        var v20353 = TypeScript$$20.globalId;
        v15356 = v20352 != v20353;
      }
      var v7033 = v15356;
      for (;v7033;) {
        var v7032 = path$$6.length;
        path$$6[v7032] = node$$2;
        node$$2 = node$$2.container;
        var v15357 = node$$2;
        if (v15357) {
          var v20354 = node$$2.name;
          var v20355 = TypeScript$$20.globalId;
          v15357 = v20354 != v20355;
        }
        v7033 = v15357;
      }
      return path$$6;
    }
    function v725() {
      var v7034;
      var v20356 = this.flags;
      var v23573 = TypeScript$$20.SymbolFlags;
      var v20357 = v23573.Optional;
      var v15358 = JAM.call(TypeScript$$20.hasFlag, TypeScript$$20, [v20356, v20357], JAM.policy.p1);
      if (v15358) {
        v7034 = "?";
      } else {
        v7034 = "";
      }
      return v7034;
    }
    function v724(scope$$14) {
      var v7035 = TypeScript$$20.MemberName;
      var v7036 = this.toString();
      return JAM.call(v7035.create, v7035, [v7036]);
    }
    function v723(scope$$13) {
      var v7037 = JAM.call(this.getTypeNameEx, this, [scope$$13]);
      return v7037.toString();
    }
    function v722() {
      var v15359 = this.flags;
      var v20358 = TypeScript$$20.SymbolFlags;
      var v15360 = v20358.Property;
      var v7038 = JAM.call(TypeScript$$20.hasFlag, TypeScript$$20, [v15359, v15360], JAM.policy.p1);
      if (v7038) {
        var v20359 = this.flags;
        var v23574 = TypeScript$$20.SymbolFlags;
        var v20360 = v23574.ModuleMember;
        var v15361 = JAM.call(TypeScript$$20.hasFlag, TypeScript$$20, [v20359, v20360], JAM.policy.p1);
        v7038 = !v15361;
      }
      return v7038;
    }
    function v721() {
      return false;
    }
    function v720() {
      return null;
    }
    function v719() {
      return false;
    }
    function v718() {
      return false;
    }
    function v717() {
      return false;
    }
    function v716() {
      return false;
    }
    function v715() {
      return false;
    }
    function v714() {
      return false;
    }
    function v713() {
      return null;
    }
    function Symbol$$1(name$$52, location$$21, length$$15, unitIndex$$3) {
      this.name = name$$52;
      this.location = location$$21;
      this.length = length$$15;
      this.unitIndex = unitIndex$$3;
      this.bound = false;
      var v7039 = TypeScript$$20.SymbolFlags;
      this.flags = v7039.None;
      this.isObjectLitField = false;
      this.declAST = null;
      this.declModule = null;
      var v7040 = TypeScript$$20.CompilerDiagnostics;
      this.passSymbolCreated = v7040.analysisPass;
      return;
    }
    var v7041 = Symbol$$1.prototype;
    v7041.instanceScope = v713;
    var v7042 = Symbol$$1.prototype;
    v7042.isVariable = v714;
    var v7043 = Symbol$$1.prototype;
    v7043.isMember = v715;
    var v7044 = Symbol$$1.prototype;
    v7044.isInferenceSymbol = v716;
    var v7045 = Symbol$$1.prototype;
    v7045.isWith = v717;
    var v7046 = Symbol$$1.prototype;
    v7046.writeable = v718;
    var v7047 = Symbol$$1.prototype;
    v7047.isType = v719;
    var v7048 = Symbol$$1.prototype;
    v7048.getType = v720;
    var v7049 = Symbol$$1.prototype;
    v7049.isAccessor = v721;
    var v7050 = Symbol$$1.prototype;
    v7050.isInstanceProperty = v722;
    var v7051 = Symbol$$1.prototype;
    v7051.getTypeName = v723;
    var v7052 = Symbol$$1.prototype;
    v7052.getTypeNameEx = v724;
    var v7053 = Symbol$$1.prototype;
    v7053.getOptionalNameString = v725;
    var v7054 = Symbol$$1.prototype;
    v7054.pathToRoot = v726;
    var v7055 = Symbol$$1.prototype;
    v7055.findCommonAncestorPath = v727;
    var v7056 = Symbol$$1.prototype;
    v7056.getPrettyName = v728;
    var v7057 = Symbol$$1.prototype;
    v7057.scopeRelativeName = v729;
    var v7058 = Symbol$$1.prototype;
    v7058.fullName = v730;
    var v7059 = Symbol$$1.prototype;
    v7059.isExternallyVisible = v731;
    var v7060 = Symbol$$1.prototype;
    v7060.visible = v732;
    var v7061 = Symbol$$1.prototype;
    v7061.addRef = v733;
    var v7062 = Symbol$$1.prototype;
    v7062.toString = v734;
    var v7063 = Symbol$$1.prototype;
    v7063.print = v735;
    var v7064 = Symbol$$1.prototype;
    v7064.specializeType = v736;
    var v7065 = Symbol$$1.prototype;
    v7065.setType = v737;
    var v7066 = Symbol$$1.prototype;
    v7066.kind = v738;
    var v7067 = Symbol$$1.prototype;
    v7067.getInterfaceDeclFromSymbol = v739;
    var v7068 = Symbol$$1.prototype;
    v7068.getVarDeclFromSymbol = v740;
    var v7069 = Symbol$$1.prototype;
    v7069.getDocComments = v741;
    var v7070 = Symbol$$1.prototype;
    v7070.isStatic = v742;
    return Symbol$$1;
  }
  function v712(TypeCheckStatus$$1) {
    TypeCheckStatus$$1._map = [];
    var v7071 = TypeCheckStatus$$1._map;
    v7071[0] = "NotStarted";
    TypeCheckStatus$$1.NotStarted = 0;
    var v7072 = TypeCheckStatus$$1._map;
    v7072[1] = "Started";
    TypeCheckStatus$$1.Started = 1;
    var v7073 = TypeCheckStatus$$1._map;
    v7073[2] = "Finished";
    TypeCheckStatus$$1.Finished = 2;
    return;
  }
  function aLexicallyEnclosesB(a$$7, b$$7) {
    var v23575 = a$$7.declAST;
    if (v23575) {
      v23575 = b$$7;
    }
    var v20361 = v23575;
    if (v20361) {
      v20361 = b$$7.declAST;
    }
    var v15362 = v20361;
    if (v15362) {
      var v23576 = a$$7.declAST;
      var v20362 = v23576.nodeType;
      var v23577 = TypeScript$$20.NodeType;
      var v20363 = v23577.FuncDecl;
      v15362 = v20362 == v20363;
    }
    var v7075 = v15362;
    if (v7075) {
      var v20364 = a$$7.declAST;
      var v15363 = v20364.minChar;
      var v20365 = b$$7.declAST;
      var v15364 = v20365.minChar;
      var v7074 = v15363 <= v15364;
      if (v7074) {
        var v20366 = a$$7.declAST;
        var v15365 = v20366.limChar;
        var v20367 = b$$7.declAST;
        var v15366 = v20367.limChar;
        v7074 = v15365 >= v15366;
      }
      return v7074;
    } else {
      return false;
    }
    return;
  }
  function aEnclosesB(a$$8, b$$8) {
    var v7077 = a$$8.container;
    for (;v7077;) {
      var v15367 = a$$8 == b$$8;
      var v20369 = !v15367;
      if (v20369) {
        var v20368 = a$$8.container;
        v15367 = aLexicallyEnclosesB(v20368, b$$8);
      }
      var v7076 = v15367;
      if (v7076) {
        return true;
      }
      a$$8 = a$$8.container;
      v7077 = a$$8.container;
    }
    return false;
  }
  var v15368 = TypeScript$$20.TypeCheckStatus;
  var v20370 = !v15368;
  if (v20370) {
    v15368 = TypeScript$$20.TypeCheckStatus = {};
  }
  var v7078 = v15368;
  v712(v7078);
  var TypeCheckStatus = TypeScript$$20.TypeCheckStatus;
  TypeScript$$20.aLexicallyEnclosesB = aLexicallyEnclosesB;
  TypeScript$$20.aEnclosesB = aEnclosesB;
  var Symbol = v743();
  TypeScript$$20.Symbol = Symbol;
  var ValueLocation = v744();
  TypeScript$$20.ValueLocation = ValueLocation;
  var InferenceSymbol = v747(Symbol);
  TypeScript$$20.InferenceSymbol = InferenceSymbol;
  var TypeSymbol = v761(InferenceSymbol);
  TypeScript$$20.TypeSymbol = TypeSymbol;
  var WithSymbol = v763(TypeSymbol);
  TypeScript$$20.WithSymbol = WithSymbol;
  var FieldSymbol = v775(InferenceSymbol);
  TypeScript$$20.FieldSymbol = FieldSymbol;
  var ParameterSymbol = v786(InferenceSymbol);
  TypeScript$$20.ParameterSymbol = ParameterSymbol;
  var VariableSymbol = v793(InferenceSymbol);
  TypeScript$$20.VariableSymbol = VariableSymbol;
  return;
}
function v711(TypeScript$$19) {
  function v710() {
    function v709(checker$$7, ast$$59, hasConstruct) {
      var v7079 = this.hasBeenTypechecked;
      if (v7079) {
        return;
      }
      this.hasBeenTypechecked = true;
      var len$$23 = 0;
      var v15369 = this.signatures;
      if (v15369) {
        var v23578 = this.signatures;
        var v20371 = len$$23 = v23578.length;
        v15369 = v20371 > 0;
      }
      var v7089 = v15369;
      if (v7089) {
        var i$$61 = 0;
        var v7088 = i$$61 < len$$23;
        for (;v7088;) {
          var v25172 = !hasConstruct;
          if (v25172) {
            var v25851 = this.definitionSignature;
            v25172 = !v25851;
          }
          var v23579 = v25172;
          if (v23579) {
            var v25852 = this.signatures;
            var v25173 = v25852[i$$61];
            v23579 = v25173.declAST;
          }
          var v20372 = v23579;
          if (v20372) {
            var v25853 = this.signatures;
            var v25174 = v25853[i$$61];
            var v23580 = v25174.declAST;
            v20372 = v23580.isOverload;
          }
          var v15370 = v20372;
          if (v15370) {
            var v26149 = this.signatures;
            var v25854 = v26149[i$$61];
            var v25175 = v25854.declAST;
            var v23581 = v25175.fncFlags;
            var v25176 = TypeScript$$19.FncFlags;
            var v23582 = v25176.Ambient;
            var v20373 = JAM.call(TypeScript$$19.hasFlag, TypeScript$$19, [v23581, v23582], JAM.policy.p1);
            v15370 = !v20373;
          }
          var v7082 = v15370;
          if (v7082) {
            var v7080 = checker$$7.errorReporter;
            var v20374 = this.signatures;
            var v15371 = v20374[i$$61];
            var v7081 = v15371.declAST;
            JAM.call(v7080.simpleError, v7080, [v7081, "Overload declaration lacks definition"], JAM.policy.p1);
          }
          var v25855 = this.signatures;
          var v25177 = v25855[i$$61];
          var v23583 = v25177.declAST;
          if (v23583) {
            var v26150 = this.signatures;
            var v25856 = v26150[i$$61];
            var v25178 = v25856.declAST;
            v23583 = v25178.isConstructor;
          }
          var v20375 = v23583;
          if (v20375) {
            var v25857 = this.signatures;
            var v25179 = v25857[i$$61];
            var v23584 = v25179.declAST;
            v20375 = v23584.classDecl;
          }
          var v15372 = v20375;
          if (v15372) {
            var v26366 = this.signatures;
            var v26294 = v26366[i$$61];
            var v26151 = v26294.declAST;
            var v25858 = v26151.classDecl;
            var v25180 = v25858.type;
            var v23585 = v25180.symbol;
            var v20376 = v23585.typeCheckStatus;
            var v23586 = TypeScript$$19.TypeCheckStatus;
            var v20377 = v23586.NotStarted;
            v15372 = v20376 == v20377;
          }
          var v7085 = v15372;
          if (v7085) {
            var v7083 = checker$$7.typeFlow;
            var v23587 = this.signatures;
            var v20378 = v23587[i$$61];
            var v15373 = v20378.declAST;
            var v7084 = v15373.classDecl;
            JAM.call(v7083.typeCheck, v7083, [v7084]);
          }
          var v7086 = checker$$7.typeFlow;
          var v20379 = this.signatures;
          var v15374 = v20379[i$$61];
          var v7087 = v15374.declAST;
          JAM.call(v7086.typeCheck, v7086, [v7087]);
          i$$61++;
          v7088 = i$$61 < len$$23;
        }
        JAM.call(this.verifySignatures, this, [checker$$7]);
      }
      return;
    }
    function v708(checker$$6) {
      var len$$22 = 0;
      var v15375 = this.signatures;
      if (v15375) {
        var v23588 = this.signatures;
        var v20380 = len$$22 = v23588.length;
        v15375 = v20380 > 0;
      }
      var v7100 = v15375;
      if (v7100) {
        var i$$60 = 0;
        var v7099 = i$$60 < len$$22;
        for (;v7099;) {
          var j$$7 = i$$60 + 1;
          var v7094 = j$$7 < len$$22;
          for (;v7094;) {
            var v25859 = this.signatures;
            var v25181 = v25859[i$$60];
            var v23589 = v25181.declAST;
            if (v23589) {
              var v25860 = this.signatures;
              var v25182 = v25860[j$$7];
              v23589 = v25182.declAST;
            }
            var v20381 = v23589;
            if (v20381) {
              var v26367 = this.signatures;
              var v26295 = v26367[i$$60];
              var v26152 = v26295.declAST;
              var v25861 = v26152.fncFlags;
              var v26153 = TypeScript$$19.FncFlags;
              var v25862 = v26153.Definition;
              var v25183 = JAM.call(TypeScript$$19.hasFlag, TypeScript$$19, [v25861, v25862], JAM.policy.p1);
              var v23590 = !v25183;
              if (v23590) {
                var v26368 = this.signatures;
                var v26296 = v26368[j$$7];
                var v26154 = v26296.declAST;
                var v25863 = v26154.fncFlags;
                var v26155 = TypeScript$$19.FncFlags;
                var v25864 = v26155.Definition;
                var v25184 = JAM.call(TypeScript$$19.hasFlag, TypeScript$$19, [v25863, v25864], JAM.policy.p1);
                v23590 = !v25184;
              }
              v20381 = v23590;
            }
            var v15376 = v20381;
            if (v15376) {
              var v23591 = this.signatures;
              var v20382 = v23591[i$$60];
              var v23592 = this.signatures;
              var v20383 = v23592[j$$7];
              v15376 = JAM.call(checker$$6.signaturesAreIdentical, checker$$6, [v20382, v20383], JAM.policy.p1);
            }
            var v7093 = v15376;
            if (v7093) {
              var v7090 = checker$$6.errorReporter;
              var v20384 = this.signatures;
              var v15377 = v20384[i$$60];
              var v7091 = v15377.declAST;
              var v15378;
              var v25865 = this.signatures;
              var v25185 = v25865[i$$60];
              var v23593 = v25185.declAST;
              if (v23593) {
                var v26156 = this.signatures;
                var v25866 = v26156[i$$60];
                var v25186 = v25866.declAST;
                v23593 = v25186.name;
              }
              var v20386 = v23593;
              if (v20386) {
                var v26297 = this.signatures;
                var v26157 = v26297[i$$60];
                var v25867 = v26157.declAST;
                var v25187 = v25867.name;
                var v23594 = v25187.actualText;
                var v20385 = "Signature for '" + v23594;
                v15378 = v20385 + "' is duplicated";
              } else {
                v15378 = "Signature is duplicated";
              }
              var v7092 = v15378;
              JAM.call(v7090.simpleError, v7090, [v7091, v7092], JAM.policy.p1);
            }
            j$$7++;
            v7094 = j$$7 < len$$22;
          }
          var v7098 = this.definitionSignature;
          if (v7098) {
            var v20387 = this.definitionSignature;
            var v23595 = this.signatures;
            var v20388 = v23595[i$$60];
            var v15379 = JAM.call(checker$$6.signatureIsAssignableToTarget, checker$$6, [v20387, v20388], JAM.policy.p1);
            var v7097 = !v15379;
            if (v7097) {
              var v7095 = checker$$6.errorReporter;
              var v20389 = this.signatures;
              var v15380 = v20389[i$$60];
              var v7096 = v15380.declAST;
              JAM.call(v7095.simpleError, v7095, [v7096, "Overload signature is not compatible with function definition"], JAM.policy.p1);
            }
          }
          i$$60++;
          v7099 = i$$60 < len$$22;
        }
      }
      return;
    }
    function v707(pattern$$3, replacement$$1, checker$$5) {
      var result$$13 = new SignatureGroup$$1;
      var v7104 = this.signatures;
      if (v7104) {
        var i$$59 = 0;
        var v7101 = this.signatures;
        var len$$21 = v7101.length;
        var v7103 = i$$59 < len$$21;
        for (;v7103;) {
          var v20390 = this.signatures;
          var v15381 = v20390[i$$59];
          var v7102 = JAM.call(v15381.specializeType, v15381, [pattern$$3, replacement$$1, checker$$5], JAM.policy.p1);
          JAM.call(result$$13.addSignature, result$$13, [v7102]);
          i$$59++;
          v7103 = i$$59 < len$$21;
        }
      }
      return result$$13;
    }
    function v706(prefix$$3, shortform$$2, scope$$12) {
      var result$$12 = [];
      var v7105 = this.signatures;
      var len$$20 = v7105.length;
      var v7106 = len$$20 > 1;
      if (v7106) {
        shortform$$2 = false;
      }
      var i$$58 = 0;
      var v7111 = i$$58 < len$$20;
      for (;v7111;) {
        var v15382 = len$$20 > 1;
        if (v15382) {
          var v23596 = this.signatures;
          var v20391 = v23596[i$$58];
          var v20392 = this.definitionSignature;
          v15382 = v20391 == v20392;
        }
        var v7107 = v15382;
        if (v7107) {
          i$$58++;
          v7111 = i$$58 < len$$20;
          continue;
        }
        var v15383 = this.flags;
        var v20393 = TypeScript$$19.SignatureFlags;
        var v15384 = v20393.IsIndexer;
        var v7110 = v15383 & v15384;
        if (v7110) {
          var v20394 = this.signatures;
          var v15385 = v20394[i$$58];
          var v7108 = JAM.call(v15385.toStringHelperEx, v15385, [shortform$$2, true, scope$$12], JAM.policy.p1);
          JAM.call(result$$12.push, result$$12, [v7108]);
        } else {
          var v20395 = this.signatures;
          var v15386 = v20395[i$$58];
          var v7109 = JAM.call(v15386.toStringHelperEx, v15386, [shortform$$2, false, scope$$12, prefix$$3], JAM.policy.p1);
          JAM.call(result$$12.push, result$$12, [v7109]);
        }
        i$$58++;
        v7111 = i$$58 < len$$20;
      }
      return result$$12;
    }
    function v705() {
      var v7112 = this.signatures;
      return v7112.toString();
    }
    function v704(signature$$2) {
      var v15387 = this.signatures;
      var v7113 = v15387 == null;
      if (v7113) {
        var v26675 = new Array;
        this.signatures = v26675;
      }
      var v7114 = this.signatures;
      var v15388 = this.signatures;
      var v7115 = v15388.length;
      JAM.set(v7114, v7115, signature$$2);
      var v25188 = signature$$2.declAST;
      if (v25188) {
        var v26158 = signature$$2.declAST;
        var v25868 = v26158.isOverload;
        v25188 = !v25868;
      }
      var v23597 = v25188;
      if (v23597) {
        var v25869 = signature$$2.declAST;
        var v25189 = v25869.isSignature();
        v23597 = !v25189;
      }
      var v20396 = v23597;
      if (v20396) {
        var v25870 = signature$$2.declAST;
        var v25190 = v25870.fncFlags;
        var v25871 = TypeScript$$19.FncFlags;
        var v25191 = v25871.Ambient;
        var v23598 = JAM.call(TypeScript$$19.hasFlag, TypeScript$$19, [v25190, v25191], JAM.policy.p1);
        v20396 = !v23598;
      }
      var v15389 = v20396;
      if (v15389) {
        var v23599 = signature$$2.declAST;
        var v20397 = v23599.fncFlags;
        var v23600 = TypeScript$$19.FncFlags;
        var v20398 = v23600.Definition;
        v15389 = JAM.call(TypeScript$$19.hasFlag, TypeScript$$19, [v20397, v20398], JAM.policy.p1);
      }
      var v7116 = v15389;
      if (v7116) {
        this.definitionSignature = signature$$2;
      }
      return;
    }
    function SignatureGroup$$1() {
      this.signatures = [];
      this.hasImplementation = true;
      this.definitionSignature = null;
      this.hasBeenTypechecked = false;
      var v7117 = TypeScript$$19.SignatureFlags;
      this.flags = v7117.None;
      return;
    }
    var v7118 = SignatureGroup$$1.prototype;
    v7118.addSignature = v704;
    var v7119 = SignatureGroup$$1.prototype;
    v7119.toString = v705;
    var v7120 = SignatureGroup$$1.prototype;
    v7120.toStrings = v706;
    var v7121 = SignatureGroup$$1.prototype;
    v7121.specializeType = v707;
    var v7122 = SignatureGroup$$1.prototype;
    v7122.verifySignatures = v708;
    var v7123 = SignatureGroup$$1.prototype;
    v7123.typeCheck = v709;
    return SignatureGroup$$1;
  }
  function v703() {
    function v702(shortform$$1, brackets$$1, scope$$11, prefix$$2) {
      var v15390 = typeof prefix$$2;
      var v7124 = v15390 === "undefined";
      if (v7124) {
        prefix$$2 = "";
      }
      var v7125 = TypeScript$$19.MemberNameArray;
      var builder$$2 = new v7125;
      if (brackets$$1) {
        builder$$2.prefix = prefix$$2 + "[";
      } else {
        builder$$2.prefix = prefix$$2 + "(";
      }
      var v7126 = this.parameters;
      var paramLen$$1 = v7126.length;
      var v7127;
      var v15391 = this.hasVariableArgList;
      if (v15391) {
        v7127 = paramLen$$1 - 1;
      } else {
        v7127 = paramLen$$1;
      }
      var len$$19 = v7127;
      var i$$57 = 0;
      var v7132 = i$$57 < len$$19;
      for (;v7132;) {
        var v15392 = TypeScript$$19.MemberName;
        var v25872 = this.parameters;
        var v25192 = v25872[i$$57];
        var v23601 = v25192.name;
        var v25193;
        var v26298 = this.parameters;
        var v26159 = v26298[i$$57];
        var v25873 = v26159.isOptional();
        if (v25873) {
          v25193 = "?";
        } else {
          v25193 = "";
        }
        var v23602 = v25193;
        var v20399 = v23601 + v23602;
        var v15393 = v20399 + ": ";
        var v7128 = JAM.call(v15392.create, v15392, [v15393]);
        JAM.call(builder$$2.add, builder$$2, [v7128]);
        var v23603 = this.parameters;
        var v20400 = v23603[i$$57];
        var v15394 = v20400.getType();
        var v7129 = JAM.call(v15394.getScopedTypeNameEx, v15394, [scope$$11]);
        JAM.call(builder$$2.add, builder$$2, [v7129]);
        var v15395 = paramLen$$1 - 1;
        var v7131 = i$$57 < v15395;
        if (v7131) {
          var v15396 = TypeScript$$19.MemberName;
          var v7130 = JAM.call(v15396.create, v15396, [", "]);
          JAM.call(builder$$2.add, builder$$2, [v7130]);
        }
        i$$57++;
        v7132 = i$$57 < len$$19;
      }
      var v7135 = this.hasVariableArgList;
      if (v7135) {
        var v15397 = TypeScript$$19.MemberName;
        var v25874 = this.parameters;
        var v25194 = v25874[i$$57];
        var v23604 = v25194.name;
        var v20401 = "..." + v23604;
        var v15398 = v20401 + ": ";
        var v7133 = JAM.call(v15397.create, v15397, [v15398]);
        JAM.call(builder$$2.add, builder$$2, [v7133]);
        var v23605 = this.parameters;
        var v20402 = v23605[i$$57];
        var v15399 = v20402.getType();
        var v7134 = JAM.call(v15399.getScopedTypeNameEx, v15399, [scope$$11]);
        JAM.call(builder$$2.add, builder$$2, [v7134]);
      }
      if (shortform$$1) {
        if (brackets$$1) {
          var v15400 = TypeScript$$19.MemberName;
          var v7136 = JAM.call(v15400.create, v15400, ["] => "]);
          JAM.call(builder$$2.add, builder$$2, [v7136]);
        } else {
          var v15401 = TypeScript$$19.MemberName;
          var v7137 = JAM.call(v15401.create, v15401, [") => "]);
          JAM.call(builder$$2.add, builder$$2, [v7137]);
        }
      } else {
        if (brackets$$1) {
          var v15402 = TypeScript$$19.MemberName;
          var v7138 = JAM.call(v15402.create, v15402, ["]: "]);
          JAM.call(builder$$2.add, builder$$2, [v7138]);
        } else {
          var v15403 = TypeScript$$19.MemberName;
          var v7139 = JAM.call(v15403.create, v15403, ["): "]);
          JAM.call(builder$$2.add, builder$$2, [v7139]);
        }
      }
      var v15404 = this.returnType;
      var v7142 = v15404.type;
      if (v7142) {
        var v20403 = this.returnType;
        var v15405 = v20403.type;
        var v7140 = JAM.call(v15405.getScopedTypeNameEx, v15405, [scope$$11]);
        JAM.call(builder$$2.add, builder$$2, [v7140]);
      } else {
        var v15406 = TypeScript$$19.MemberName;
        var v7141 = JAM.call(v15406.create, v15406, ["any"]);
        JAM.call(builder$$2.add, builder$$2, [v7141]);
      }
      return builder$$2;
    }
    function v701() {
      var shortform = false;
      var brackets = false;
      var scope$$10 = null;
      var v7143 = JAM.call(this.toStringHelperEx, this, [shortform, brackets, scope$$10], JAM.policy.p1);
      return v7143.toString();
    }
    function v700() {
      return this.toStringHelper();
    }
    function v699(pattern$$2, replacement, checker$$4) {
      var result$$11 = new Signature$$1;
      var v7144 = this.hasVariableArgList;
      if (v7144) {
        result$$11.hasVariableArgList = true;
      }
      var v7145 = TypeScript$$19.TypeLink;
      var v26676 = new v7145;
      result$$11.returnType = v26676;
      var v15407 = this.returnType;
      var v7148 = v15407.type;
      if (v7148) {
        var v7146 = result$$11.returnType;
        var v20404 = this.returnType;
        var v15408 = v20404.type;
        var v26677 = JAM.call(v15408.specializeType, v15408, [pattern$$2, replacement, checker$$4, false], JAM.policy.p1);
        v7146.type = v26677;
      } else {
        var v7147 = result$$11.returnType;
        v7147.type = checker$$4.anyType;
      }
      var v7162 = this.parameters;
      if (v7162) {
        result$$11.parameters = [];
        var i$$56 = 0;
        var v7149 = this.parameters;
        var len$$18 = v7149.length;
        var v7161 = i$$56 < len$$18;
        for (;v7161;) {
          var v7150 = this.parameters;
          var oldSym = v7150[i$$56];
          var v7151 = TypeScript$$19.ValueLocation;
          var paramDef = new v7151;
          var v7152 = TypeScript$$19.ParameterSymbol;
          var v7153 = oldSym.name;
          var v7154 = oldSym.location;
          var v15409 = checker$$4.locationInfo;
          var v7155 = v15409.unitIndex;
          var paramSym$$1 = JAM.new(v7152, [v7153, v7154, v7155, paramDef]);
          paramSym$$1.declAST = this.declAST;
          paramDef.symbol = paramSym$$1;
          var v7156 = TypeScript$$19.TypeLink;
          var v26678 = new v7156;
          paramDef.typeLink = v26678;
          var v7157 = result$$11.parameters;
          v7157[i$$56] = paramSym$$1;
          var oldType = oldSym.getType();
          if (oldType) {
            var v7158 = paramDef.typeLink;
            var v26679 = JAM.call(oldType.specializeType, oldType, [pattern$$2, replacement, checker$$4, false], JAM.policy.p1);
            v7158.type = v26679;
            var v7159 = paramSym$$1.declAST;
            var v15410 = paramDef.typeLink;
            v7159.type = v15410.type;
          } else {
            var v7160 = paramDef.typeLink;
            v7160.type = checker$$4.anyType;
          }
          i$$56++;
          v7161 = i$$56 < len$$18;
        }
      }
      result$$11.nonOptionalParameterCount = this.nonOptionalParameterCount;
      result$$11.declAST = this.declAST;
      return result$$11;
    }
    function Signature$$1() {
      this.hasVariableArgList = false;
      this.parameters = null;
      this.declAST = null;
      var v7163 = TypeScript$$19.TypeCheckStatus;
      this.typeCheckStatus = v7163.NotStarted;
      this.nonOptionalParameterCount = 0;
      return;
    }
    var v7164 = Signature$$1.prototype;
    v7164.specializeType = v699;
    var v7165 = Signature$$1.prototype;
    v7165.toString = v700;
    var v7166 = Signature$$1.prototype;
    v7166.toStringHelper = v701;
    var v7167 = Signature$$1.prototype;
    v7167.toStringHelperEx = v702;
    return Signature$$1;
  }
  var Signature = v703();
  TypeScript$$19.Signature = Signature;
  var SignatureGroup = v710();
  TypeScript$$19.SignatureGroup = SignatureGroup;
  return;
}
function v698(TypeScript$$18) {
  function v697() {
    function v696() {
      var v15411 = this.scriptFragment;
      var v7170 = v15411 == null;
      if (v7170) {
        var ast$$58 = this.scopeStartAST;
        var minChar$$31 = ast$$58.minChar;
        var v7168;
        var v15413 = this.isMemberCompletion;
        if (v15413) {
          v7168 = this.pos;
        } else {
          var v15412 = this.pos;
          v7168 = v15412 + 1;
        }
        var limChar$$10 = v7168;
        var v15414 = this.logger;
        var v15415 = this.text;
        var v7169 = JAM.call(TypeScript$$18.quickParse, TypeScript$$18, [v15414, ast$$58, v15415, minChar$$31, limChar$$10, null], JAM.policy.p1);
        this.scriptFragment = v7169.Script;
      }
      return this.scriptFragment;
    }
    function v695() {
      var v7171 = this.scopeStartAST;
      return v7171.minChar;
    }
    function v694() {
      return this.scopeStartAST;
    }
    function v693() {
      var v7172 = this.scopeStartAST;
      return v7172.minChar;
    }
    function v692() {
      return this.scopeStartAST;
    }
    function v691() {
      return this.objectLiteralScopeGetter();
    }
    function v690() {
      return this.scopeGetter();
    }
    function EnclosingScopeContext$$1(logger$$3, script$$13, text$$20, pos$$5, isMemberCompletion$$1) {
      this.logger = logger$$3;
      this.script = script$$13;
      this.text = text$$20;
      this.pos = pos$$5;
      this.isMemberCompletion = isMemberCompletion$$1;
      this.scopeGetter = null;
      this.objectLiteralScopeGetter = null;
      this.scopeStartAST = null;
      this.skipNextFuncDeclForClass = false;
      this.deepestModuleDecl = null;
      this.enclosingClassDecl = null;
      this.enclosingObjectLit = null;
      this.publicsOnly = true;
      this.useFullAst = false;
      return;
    }
    var v7173 = EnclosingScopeContext$$1.prototype;
    v7173.getScope = v690;
    var v7174 = EnclosingScopeContext$$1.prototype;
    v7174.getObjectLiteralScope = v691;
    var v7175 = EnclosingScopeContext$$1.prototype;
    v7175.getScopeAST = v692;
    var v7176 = EnclosingScopeContext$$1.prototype;
    v7176.getScopePosition = v693;
    var v7177 = EnclosingScopeContext$$1.prototype;
    v7177.getScriptFragmentStartAST = v694;
    var v7178 = EnclosingScopeContext$$1.prototype;
    v7178.getScriptFragmentPosition = v695;
    var v7179 = EnclosingScopeContext$$1.prototype;
    v7179.getScriptFragment = v696;
    return EnclosingScopeContext$$1;
  }
  function v689() {
    function MemberScopeContext$$1(flow, pos$$4, matchFlag) {
      this.flow = flow;
      this.pos = pos$$4;
      this.matchFlag = matchFlag;
      this.type = null;
      this.ast = null;
      var v7180 = TypeScript$$18.AstWalkOptions;
      var v26680 = new v7180;
      this.options = v26680;
      return;
    }
    return MemberScopeContext$$1;
  }
  function v688() {
    function TypeCollectionContext$$1(scopeChain$$1, checker$$3) {
      this.scopeChain = scopeChain$$1;
      this.checker = checker$$3;
      this.script = null;
      return;
    }
    return TypeCollectionContext$$1;
  }
  function preFindMemberScope(ast$$56, parent$$47, walker$$44) {
    var memScope = walker$$44.state;
    var v20405 = ast$$56.flags;
    var v20406 = memScope.matchFlag;
    var v15416 = JAM.call(TypeScript$$18.hasFlag, TypeScript$$18, [v20405, v20406], JAM.policy.p1);
    if (v15416) {
      var v23606 = memScope.pos;
      var v20407 = v23606 < 0;
      var v23609 = !v20407;
      if (v23609) {
        var v23607 = memScope.pos;
        var v23608 = ast$$56.limChar;
        v20407 = v23607 == v23608;
      }
      v15416 = v20407;
    }
    var v7185 = v15416;
    if (v7185) {
      memScope.ast = ast$$56;
      var v20408 = ast$$56.type;
      var v15417 = v20408 == null;
      if (v15417) {
        var v20409 = memScope.pos;
        v15417 = v20409 >= 0;
      }
      var v7183 = v15417;
      if (v7183) {
        var v7181 = memScope.flow;
        var v7182 = memScope.scope;
        JAM.call(v7181.inScopeTypeCheck, v7181, [ast$$56, v7182], JAM.policy.p1);
      }
      memScope.type = ast$$56.type;
      var v7184 = memScope.options;
      v7184.stopWalk();
    }
    return ast$$56;
  }
  function pushTypeCollectionScope(container$$2, valueMembers, ambientValueMembers, enclosedTypes, ambientEnclosedTypes, context$$37, thisType$$1, classType$$2, moduleDecl$$5) {
    var v7186 = TypeScript$$18.SymbolScopeBuilder;
    var builder$$1 = JAM.new(v7186, [valueMembers, ambientValueMembers, enclosedTypes, ambientEnclosedTypes, null, container$$2]);
    var v7187 = TypeScript$$18.ScopeChain;
    var v7188 = context$$37.scopeChain;
    var chain$$1 = JAM.new(v7187, [container$$2, v7188, builder$$1]);
    chain$$1.thisType = thisType$$1;
    chain$$1.classType = classType$$2;
    chain$$1.moduleDecl = moduleDecl$$5;
    context$$37.scopeChain = chain$$1;
    return;
  }
  function popTypeCollectionScope(context$$38) {
    var v7189 = context$$38.scopeChain;
    context$$38.scopeChain = v7189.previous;
    return;
  }
  function preFindEnclosingScope(ast$$57, parent$$48, walker$$45) {
    function v687() {
      var v15418 = funcDecl$$15.isConstructor;
      if (v15418) {
        var v20410 = funcDecl$$15.fncFlags;
        var v23610 = TypeScript$$18.FncFlags;
        var v20411 = v23610.ClassMethod;
        v15418 = JAM.call(TypeScript$$18.hasFlag, TypeScript$$18, [v20410, v20411], JAM.policy.p1);
      }
      var v7192 = v15418;
      if (v7192) {
        var v15419 = ast$$57.type;
        if (v15419) {
          var v20412 = ast$$57.type;
          v15419 = v20412.enclosingType;
        }
        var v7191 = v15419;
        if (v7191) {
          var v15420 = ast$$57.type;
          var v7190 = v15420.enclosingType;
          return v7190.constructorScope;
        }
      }
      var v7194 = funcDecl$$15.scopeType;
      if (v7194) {
        var v7193 = funcDecl$$15.scopeType;
        return v7193.containedScope;
      }
      var v7196 = funcDecl$$15.type;
      if (v7196) {
        var v7195 = funcDecl$$15.type;
        return v7195.containedScope;
      }
      return null;
    }
    function v686() {
      var v7197;
      var v20413 = ast$$57.type;
      var v15422 = v20413 === null;
      if (v15422) {
        v7197 = null;
      } else {
        var v15421 = ast$$57.type;
        v7197 = v15421.containedScope;
      }
      return v7197;
    }
    function v685() {
      var v7198;
      var v20414 = ast$$57.type;
      var v15424 = v20414 === null;
      if (v15424) {
        v7198 = null;
      } else {
        var v15423 = ast$$57.type;
        v7198 = v15423.containedScope;
      }
      return v7198;
    }
    function v684() {
      var v7199 = objectLit.targetType;
      return v7199.memberScope;
    }
    function v683() {
      var v7200 = objectLit.targetType;
      return v7200.containedScope;
    }
    function v682() {
      var v7201;
      var v23611 = ast$$57.type;
      var v20415 = v23611 === null;
      var v23613 = !v20415;
      if (v23613) {
        var v25875 = ast$$57.type;
        var v25195 = v25875.instanceType;
        var v23612 = v25195.containedScope;
        v20415 = v23612 === null;
      }
      var v15426 = v20415;
      if (v15426) {
        v7201 = null;
      } else {
        var v20416 = ast$$57.type;
        var v15425 = v20416.instanceType;
        v7201 = v15425.containedScope;
      }
      return v7201;
    }
    function v681() {
      var v7202;
      var v20417 = script$$11.bod;
      var v15428 = v20417 === null;
      if (v15428) {
        v7202 = null;
      } else {
        var v15427 = script$$11.bod;
        v7202 = v15427.enclosingScope;
      }
      return v7202;
    }
    var context$$39 = walker$$45.state;
    var minChar$$30 = ast$$57.minChar;
    var limChar$$9 = ast$$57.limChar;
    var v20418 = ast$$57.nodeType;
    var v23614 = TypeScript$$18.NodeType;
    var v20419 = v23614.Script;
    var v15429 = v20418 == v20419;
    if (v15429) {
      var v20420 = context$$39.pos;
      v15429 = v20420 > limChar$$9;
    }
    var v7203 = v15429;
    if (v7203) {
      limChar$$9 = context$$39.pos;
    }
    var v20421 = context$$39.pos;
    var v15430 = minChar$$30 <= v20421;
    if (v15430) {
      var v20422 = context$$39.pos;
      v15430 = limChar$$9 >= v20422;
    }
    var v7209 = v15430;
    if (v7209) {
      var v7206 = ast$$57.nodeType;
      switch(v7206) {
        case TypeScript$$18.NodeType.Script:
          var script$$11 = ast$$57;
          context$$39.scopeGetter = v681;
          context$$39.scopeStartAST = script$$11;
          break;
        case TypeScript$$18.NodeType.ClassDeclaration:
          context$$39.scopeGetter = v682;
          context$$39.scopeStartAST = ast$$57;
          context$$39.enclosingClassDecl = ast$$57;
          break;
        case TypeScript$$18.NodeType.ObjectLit:
          var objectLit = ast$$57;
          var v7204 = objectLit.targetType;
          if (v7204) {
            context$$39.scopeGetter = v683;
            context$$39.objectLiteralScopeGetter = v684;
            context$$39.enclosingObjectLit = objectLit;
          }
          break;
        case TypeScript$$18.NodeType.ModuleDeclaration:
          context$$39.deepestModuleDecl = ast$$57;
          context$$39.scopeGetter = v685;
          context$$39.scopeStartAST = ast$$57;
          break;
        case TypeScript$$18.NodeType.InterfaceDeclaration:
          context$$39.scopeGetter = v686;
          context$$39.scopeStartAST = ast$$57;
          break;
        case TypeScript$$18.NodeType.FuncDecl:
          var funcDecl$$15 = ast$$57;
          var v7205 = context$$39.skipNextFuncDeclForClass;
          if (v7205) {
            context$$39.skipNextFuncDeclForClass = false;
          } else {
            context$$39.scopeGetter = v687;
            context$$39.scopeStartAST = ast$$57;
          }
        ;
      }
      var v7207 = walker$$45.options;
      v7207.goChildren = true;
    } else {
      var v7208 = walker$$45.options;
      v7208.goChildren = false;
    }
    return ast$$57;
  }
  function findEnclosingScopeAt(logger$$2, script$$12, text$$19, pos$$3, isMemberCompletion) {
    var context$$40 = JAM.new(EnclosingScopeContext, [logger$$2, script$$12, text$$19, pos$$3, isMemberCompletion]);
    var v7210 = TypeScript$$18.getAstWalkerFactory();
    JAM.call(v7210.walk, v7210, [script$$12, preFindEnclosingScope, null, null, context$$40], JAM.policy.p1);
    var v15431 = context$$40.scopeStartAST;
    var v7211 = v15431 === null;
    if (v7211) {
      return null;
    }
    return context$$40;
  }
  var TypeCollectionContext = v688();
  TypeScript$$18.TypeCollectionContext = TypeCollectionContext;
  var MemberScopeContext = v689();
  TypeScript$$18.MemberScopeContext = MemberScopeContext;
  var EnclosingScopeContext = v697();
  TypeScript$$18.EnclosingScopeContext = EnclosingScopeContext;
  TypeScript$$18.preFindMemberScope = preFindMemberScope;
  TypeScript$$18.pushTypeCollectionScope = pushTypeCollectionScope;
  TypeScript$$18.popTypeCollectionScope = popTypeCollectionScope;
  TypeScript$$18.preFindEnclosingScope = preFindEnclosingScope;
  TypeScript$$18.findEnclosingScopeAt = findEnclosingScopeAt;
  return;
}
function v680(TypeScript$$17) {
  function v679() {
    function v678(b$$6) {
      var v7212 = this.result;
      var v26681 = JAM.call(this.select, this, [v7212, b$$6], JAM.policy.p1);
      this.result = v26681;
      var v7214 = this.result;
      if (v7214) {
        var v7213 = this.result;
        return JAM.call(this.stop, this, [v7213]);
      } else {
        return false;
      }
      return;
    }
    function v677() {
      this.result = null;
      return;
    }
    function ScopeSearchFilter$$1(select, stop$$1) {
      this.select = select;
      this.stop = stop$$1;
      this.result = null;
      return;
    }
    var v7215 = ScopeSearchFilter$$1.prototype;
    v7215.reset = v677;
    var v7216 = ScopeSearchFilter$$1.prototype;
    v7216.update = v678;
    return ScopeSearchFilter$$1;
  }
  function v676() {
    function AssignScopeContext$$1(scopeChain, typeFlow$$36, modDeclChain) {
      this.scopeChain = scopeChain;
      this.typeFlow = typeFlow$$36;
      this.modDeclChain = modDeclChain;
      return;
    }
    return AssignScopeContext$$1;
  }
  function pushAssignScope(scope$$9, context$$27, type$$31, classType, fnc) {
    var v7217 = TypeScript$$17.ScopeChain;
    var v7218 = context$$27.scopeChain;
    var chain = JAM.new(v7217, [null, v7218, scope$$9]);
    chain.thisType = type$$31;
    chain.classType = classType;
    chain.fnc = fnc;
    context$$27.scopeChain = chain;
    return;
  }
  function popAssignScope(context$$28) {
    var v7219 = context$$28.scopeChain;
    context$$28.scopeChain = v7219.previous;
    return;
  }
  function instanceCompare(a$$6, b$$5) {
    var v15432 = a$$6 == null;
    var v20424 = !v15432;
    if (v20424) {
      var v20423 = a$$6.isInstanceProperty();
      v15432 = !v20423;
    }
    var v7220 = v15432;
    if (v7220) {
      return b$$5;
    } else {
      return a$$6;
    }
    return;
  }
  function instanceFilterStop(s$$17) {
    return s$$17.isInstanceProperty();
  }
  function preAssignModuleScopes(ast$$48, context$$29) {
    var moduleDecl$$4 = ast$$48;
    var memberScope$$1 = null;
    var aggScope = null;
    var v15433 = moduleDecl$$4.name;
    if (v15433) {
      v15433 = moduleDecl$$4.mod;
    }
    var v7222 = v15433;
    if (v7222) {
      var v7221 = moduleDecl$$4.name;
      var v15434 = moduleDecl$$4.mod;
      v7221.sym = v15434.symbol;
    }
    var mod$$1 = moduleDecl$$4.mod;
    var v7223 = !mod$$1;
    if (v7223) {
      return;
    }
    var v7224 = TypeScript$$17.SymbolTableScope;
    var v7225 = mod$$1.members;
    var v7226 = mod$$1.ambientMembers;
    var v7227 = mod$$1.enclosedTypes;
    var v7228 = mod$$1.ambientEnclosedTypes;
    var v7229 = mod$$1.symbol;
    memberScope$$1 = JAM.new(v7224, [v7225, v7226, v7227, v7228, v7229]);
    mod$$1.memberScope = memberScope$$1;
    var v7230 = context$$29.modDeclChain;
    JAM.call(v7230.push, v7230, [moduleDecl$$4]);
    var v15435 = context$$29.typeFlow;
    var v7231 = v15435.checker;
    v7231.currentModDecl = moduleDecl$$4;
    var v7232 = TypeScript$$17.SymbolAggregateScope;
    var v7233 = mod$$1.symbol;
    aggScope = JAM.new(v7232, [v7233]);
    JAM.call(aggScope.addParentScope, aggScope, [memberScope$$1]);
    var v15436 = context$$29.scopeChain;
    var v7234 = v15436.scope;
    JAM.call(aggScope.addParentScope, aggScope, [v7234]);
    pushAssignScope(aggScope, context$$29, null, null, null);
    mod$$1.containedScope = aggScope;
    var v7240 = mod$$1.symbol;
    if (v7240) {
      var v7235 = context$$29.typeFlow;
      var v7236 = mod$$1.containedScope;
      var v7237 = mod$$1.symbol;
      var v7238 = moduleDecl$$4.vars;
      var v15437 = mod$$1.members;
      var v7239 = v15437.privateMembers;
      JAM.call(v7235.addLocalsFromScope, v7235, [v7236, v7237, v7238, v7239, true], JAM.policy.p1);
    }
    return;
  }
  function preAssignClassScopes(ast$$49, context$$30) {
    var classDecl$$6 = ast$$49;
    var memberScope$$2 = null;
    var aggScope$$1 = null;
    var v15438 = classDecl$$6.name;
    if (v15438) {
      v15438 = classDecl$$6.type;
    }
    var v7242 = v15438;
    if (v7242) {
      var v7241 = classDecl$$6.name;
      var v15439 = classDecl$$6.type;
      v7241.sym = v15439.symbol;
    }
    var classType$$1 = ast$$49.type;
    if (classType$$1) {
      var classSym = classType$$1.symbol;
      var v15440 = context$$30.typeFlow;
      var v7243 = v15440.checker;
      memberScope$$2 = JAM.call(v7243.scopeOf, v7243, [classType$$1]);
      var v7244 = TypeScript$$17.SymbolAggregateScope;
      var v7245 = classType$$1.symbol;
      aggScope$$1 = JAM.new(v7244, [v7245]);
      JAM.call(aggScope$$1.addParentScope, aggScope$$1, [memberScope$$2]);
      var v15441 = context$$30.scopeChain;
      var v7246 = v15441.scope;
      JAM.call(aggScope$$1.addParentScope, aggScope$$1, [v7246]);
      classType$$1.containedScope = aggScope$$1;
      classType$$1.memberScope = memberScope$$2;
      var instanceType$$2 = classType$$1.instanceType;
      var v15442 = context$$30.typeFlow;
      var v7247 = v15442.checker;
      memberScope$$2 = JAM.call(v7247.scopeOf, v7247, [instanceType$$2]);
      instanceType$$2.memberScope = memberScope$$2;
      var v7248 = TypeScript$$17.SymbolAggregateScope;
      var v7249 = instanceType$$2.symbol;
      aggScope$$1 = JAM.new(v7248, [v7249]);
      var v15443 = context$$30.scopeChain;
      var v7250 = v15443.scope;
      JAM.call(aggScope$$1.addParentScope, aggScope$$1, [v7250]);
      pushAssignScope(aggScope$$1, context$$30, instanceType$$2, classType$$1, null);
      instanceType$$2.containedScope = aggScope$$1;
    } else {
      var v7251 = context$$30.typeFlow;
      ast$$49.type = v7251.anyType;
    }
    return;
  }
  function preAssignInterfaceScopes(ast$$50, context$$31) {
    var interfaceDecl$$2 = ast$$50;
    var memberScope$$3 = null;
    var aggScope$$2 = null;
    var v15444 = interfaceDecl$$2.name;
    if (v15444) {
      v15444 = interfaceDecl$$2.type;
    }
    var v7253 = v15444;
    if (v7253) {
      var v7252 = interfaceDecl$$2.name;
      var v15445 = interfaceDecl$$2.type;
      v7252.sym = v15445.symbol;
    }
    var interfaceType = ast$$50.type;
    var v15446 = context$$31.typeFlow;
    var v7254 = v15446.checker;
    memberScope$$3 = JAM.call(v7254.scopeOf, v7254, [interfaceType]);
    interfaceType.memberScope = memberScope$$3;
    var v7255 = TypeScript$$17.SymbolAggregateScope;
    var v7256 = interfaceType.symbol;
    aggScope$$2 = JAM.new(v7255, [v7256]);
    JAM.call(aggScope$$2.addParentScope, aggScope$$2, [memberScope$$3]);
    var v15447 = context$$31.scopeChain;
    var v7257 = v15447.scope;
    JAM.call(aggScope$$2.addParentScope, aggScope$$2, [v7257]);
    pushAssignScope(aggScope$$2, context$$31, null, null, null);
    interfaceType.containedScope = aggScope$$2;
    return;
  }
  function preAssignWithScopes(ast$$51, context$$32) {
    var withStmt$$1 = ast$$51;
    var withType = withStmt$$1.type;
    var v7258 = TypeScript$$17.ScopedMembers;
    var v15448 = TypeScript$$17.DualStringHashTable;
    var v20425 = TypeScript$$17.StringHashTable;
    var v15449 = new v20425;
    var v20426 = TypeScript$$17.StringHashTable;
    var v15450 = new v20426;
    var v7259 = JAM.new(v15448, [v15449, v15450]);
    var members$$12 = JAM.new(v7258, [v7259]);
    var v7260 = TypeScript$$17.ScopedMembers;
    var v15451 = TypeScript$$17.DualStringHashTable;
    var v20427 = TypeScript$$17.StringHashTable;
    var v15452 = new v20427;
    var v20428 = TypeScript$$17.StringHashTable;
    var v15453 = new v20428;
    var v7261 = JAM.new(v15451, [v15452, v15453]);
    var ambientMembers$$1 = JAM.new(v7260, [v7261]);
    var v7262 = TypeScript$$17.Type;
    withType = new v7262;
    var v7263 = TypeScript$$17.WithSymbol;
    var v7264 = withStmt$$1.minChar;
    var v23615 = context$$32.typeFlow;
    var v20429 = v23615.checker;
    var v15454 = v20429.locationInfo;
    var v7265 = v15454.unitIndex;
    var withSymbol = JAM.new(v7263, [v7264, v7265, withType]);
    withType.members = members$$12;
    withType.ambientMembers = ambientMembers$$1;
    withType.symbol = withSymbol;
    withType.setHasImplementation();
    withStmt$$1.type = withType;
    var v7266 = TypeScript$$17.SymbolScopeBuilder;
    var v7267 = withType.members;
    var v7268 = withType.ambientMembers;
    var v15455 = context$$32.scopeChain;
    var v7269 = v15455.scope;
    var v7270 = withType.symbol;
    var withScope = JAM.new(v7266, [v7267, v7268, null, null, v7269, v7270]);
    pushAssignScope(withScope, context$$32, null, null, null);
    withType.containedScope = withScope;
    return;
  }
  function preAssignFuncDeclScopes(ast$$52, context$$33) {
    var funcDecl$$13 = ast$$52;
    var container$$1 = null;
    var localContainer = null;
    var v7272 = funcDecl$$13.type;
    if (v7272) {
      var v7271 = ast$$52.type;
      localContainer = v7271.symbol;
    }
    var v7273 = funcDecl$$13.fncFlags;
    var v15456 = TypeScript$$17.FncFlags;
    var v7274 = v15456.Static;
    var isStatic$$5 = JAM.call(TypeScript$$17.hasFlag, TypeScript$$17, [v7273, v7274], JAM.policy.p1);
    var v7275 = isStatic$$5;
    if (v7275) {
      var v20430 = context$$33.scopeChain;
      var v15457 = v20430.fnc;
      v7275 = v15457 != null;
    }
    var isInnerStatic = v7275;
    var v7276;
    if (isInnerStatic) {
      var v23616 = context$$33.scopeChain;
      var v20431 = v23616.fnc;
      var v15458 = v20431.type;
      v7276 = v15458.memberScope;
    } else {
      var v15459 = context$$33.scopeChain;
      v7276 = v15459.scope;
    }
    var parentScope = v7276;
    var v20432 = context$$33.scopeChain;
    var v15460 = v20432.thisType;
    if (v15460) {
      var v23617 = funcDecl$$13.isConstructor;
      var v20433 = !v23617;
      var v23620 = !v20433;
      if (v23620) {
        var v23618 = funcDecl$$13.fncFlags;
        var v25196 = TypeScript$$17.FncFlags;
        var v23619 = v25196.ClassMethod;
        v20433 = JAM.call(TypeScript$$17.hasFlag, TypeScript$$17, [v23618, v23619], JAM.policy.p1);
      }
      v15460 = v20433;
    }
    var v7285 = v15460;
    if (v7285) {
      var v7277 = context$$33.scopeChain;
      var instType = v7277.thisType;
      var v23621 = instType.typeFlags;
      var v25197 = TypeScript$$17.TypeFlags;
      var v23622 = v25197.IsClass;
      var v20434 = v23621 & v23622;
      var v15461 = !v20434;
      if (v15461) {
        var v23623 = funcDecl$$13.fncFlags;
        var v25198 = TypeScript$$17.FncFlags;
        var v23624 = v25198.ClassMethod;
        var v20435 = JAM.call(TypeScript$$17.hasFlag, TypeScript$$17, [v23623, v23624], JAM.policy.p1);
        v15461 = !v20435;
      }
      var v7282 = v15461;
      if (v7282) {
        var v20436 = funcDecl$$13.isMethod();
        var v15462 = !v20436;
        var v20437 = !v15462;
        if (v20437) {
          v15462 = isStatic$$5;
        }
        var v7278 = v15462;
        if (v7278) {
          parentScope = instType.constructorScope;
        } else {
          parentScope = instType.containedScope;
        }
      } else {
        var v26160 = context$$33.scopeChain;
        var v25876 = v26160.previous;
        var v25199 = v25876.scope;
        var v23625 = v25199.container;
        if (v23625) {
          var v26299 = context$$33.scopeChain;
          var v26161 = v26299.previous;
          var v25877 = v26161.scope;
          var v25200 = v25877.container;
          v23625 = v25200.declAST;
        }
        var v20438 = v23625;
        if (v20438) {
          var v26369 = context$$33.scopeChain;
          var v26300 = v26369.previous;
          var v26162 = v26300.scope;
          var v25878 = v26162.container;
          var v25201 = v25878.declAST;
          var v23626 = v25201.nodeType;
          var v25202 = TypeScript$$17.NodeType;
          var v23627 = v25202.FuncDecl;
          v20438 = v23626 == v23627;
        }
        var v15463 = v20438;
        if (v15463) {
          var v26163 = context$$33.scopeChain;
          var v25879 = v26163.previous;
          var v25203 = v25879.scope;
          var v23628 = v25203.container;
          var v20439 = v23628.declAST;
          v15463 = v20439.isConstructor;
        }
        var v7281 = v15463;
        if (v7281) {
          parentScope = instType.constructorScope;
        } else {
          var v15464 = isStatic$$5;
          if (v15464) {
            var v20440 = context$$33.scopeChain;
            v15464 = v20440.classType;
          }
          var v7280 = v15464;
          if (v7280) {
            var v15465 = context$$33.scopeChain;
            var v7279 = v15465.classType;
            parentScope = v7279.containedScope;
          } else {
            parentScope = instType.containedScope;
          }
        }
      }
      container$$1 = instType.symbol;
    } else {
      var v15466 = funcDecl$$13.isConstructor;
      if (v15466) {
        var v20441 = context$$33.scopeChain;
        v15466 = v20441.thisType;
      }
      var v7284 = v15466;
      if (v7284) {
        var v15467 = context$$33.scopeChain;
        var v7283 = v15467.thisType;
        container$$1 = v7283.symbol;
      }
    }
    var v20442 = funcDecl$$13.type;
    var v15468 = v20442 == null;
    var v20445 = !v15468;
    if (v20445) {
      var v25204 = funcDecl$$13.type;
      var v23629 = v25204.symbol;
      var v20443 = v23629.flags;
      var v23630 = TypeScript$$17.SymbolFlags;
      var v20444 = v23630.TypeSetDuringScopeAssignment;
      v15468 = JAM.call(TypeScript$$17.hasFlag, TypeScript$$17, [v20443, v20444], JAM.policy.p1);
    }
    var v7304 = v15468;
    if (v7304) {
      var v20446 = context$$33.scopeChain;
      var v15469 = v20446.fnc;
      if (v15469) {
        var v23631 = context$$33.scopeChain;
        var v20447 = v23631.fnc;
        v15469 = v20447.type;
      }
      var v7287 = v15469;
      if (v7287) {
        var v20448 = context$$33.scopeChain;
        var v15470 = v20448.fnc;
        var v7286 = v15470.type;
        container$$1 = v7286.symbol;
      }
      var funcScope = null;
      var v7288 = context$$33.scopeChain;
      var outerFnc$$1 = v7288.fnc;
      var v7289;
      var v15472 = funcDecl$$13.name;
      if (v15472) {
        var v15471 = funcDecl$$13.name;
        v7289 = v15471.actualText;
      } else {
        v7289 = null;
      }
      var nameText$$1 = v7289;
      var fgSym = null;
      if (isStatic$$5) {
        var v23632 = outerFnc$$1.type;
        var v20449 = v23632.members;
        var v15473 = v20449 == null;
        if (v15473) {
          var v20450 = container$$1.getType();
          v15473 = v20450.memberScope;
        }
        var v7291 = v15473;
        if (v7291) {
          var v7290 = outerFnc$$1.type;
          var v20451 = container$$1.type;
          var v15474 = v20451.memberScope;
          v7290.members = v15474.valueMembers;
        }
        var v20452 = context$$33.scopeChain;
        var v15475 = v20452.fnc;
        var v7292 = v15475.type;
        funcScope = v7292.memberScope;
        var v7293 = outerFnc$$1.innerStaticFuncs;
        var v15476 = outerFnc$$1.innerStaticFuncs;
        var v7294 = v15476.length;
        JAM.set(v7293, v7294, funcDecl$$13);
      } else {
        var v7295 = context$$33.scopeChain;
        funcScope = v7295.scope;
      }
      var v20453 = nameText$$1;
      if (v20453) {
        v20453 = nameText$$1 != "__missing";
      }
      var v15477 = v20453;
      if (v15477) {
        var v20454 = funcDecl$$13.isAccessor();
        v15477 = !v20454;
      }
      var v7296 = v15477;
      if (v7296) {
        if (isStatic$$5) {
          fgSym = JAM.call(funcScope.findLocal, funcScope, [nameText$$1, false, false], JAM.policy.p1);
        } else {
          fgSym = JAM.call(funcScope.findLocal, funcScope, [nameText$$1, false, false], JAM.policy.p1);
        }
      }
      var v15478 = context$$33.typeFlow;
      var v7297 = v15478.checker;
      var v7298 = fgSym == null;
      JAM.call(v7297.createFunctionSignature, v7297, [funcDecl$$13, container$$1, funcScope, fgSym, v7298], JAM.policy.p1);
      var v25880 = funcDecl$$13.accessorSymbol;
      var v25205 = !v25880;
      if (v25205) {
        var v25881 = funcDecl$$13.fncFlags;
        var v26164 = TypeScript$$17.FncFlags;
        var v25882 = v26164.ClassMethod;
        v25205 = v25881 & v25882;
      }
      var v23633 = v25205;
      if (v23633) {
        v23633 = container$$1;
      }
      var v20455 = v23633;
      if (v20455) {
        var v25206 = !fgSym;
        var v25885 = !v25206;
        if (v25885) {
          var v26165 = fgSym.declAST;
          var v25883 = v26165.nodeType;
          var v26166 = TypeScript$$17.NodeType;
          var v25884 = v26166.FuncDecl;
          v25206 = v25883 != v25884;
        }
        var v23634 = v25206;
        if (v23634) {
          v23634 = funcDecl$$13.isAccessor();
        }
        v20455 = v23634;
      }
      var v15479 = v20455;
      var v20457 = !v15479;
      if (v20457) {
        var v20456 = fgSym;
        if (v20456) {
          v20456 = fgSym.isAccessor();
        }
        v15479 = v20456;
      }
      var v7302 = v15479;
      if (v7302) {
        var v15480 = context$$33.typeFlow;
        var v7299 = v15480.checker;
        var v7300 = container$$1.getType();
        var v15481 = funcDecl$$13.isMethod();
        if (v15481) {
          v15481 = isStatic$$5;
        }
        var v7301 = v15481;
        var v26682 = JAM.call(v7299.createAccessorSymbol, v7299, [funcDecl$$13, fgSym, v7300, v7301, true, funcScope, container$$1], JAM.policy.p1);
        funcDecl$$13.accessorSymbol = v26682;
      }
      var v15482 = funcDecl$$13.type;
      var v7303 = v15482.symbol;
      var v20458 = v7303.flags;
      var v23635 = TypeScript$$17.SymbolFlags;
      var v20459 = v23635.TypeSetDuringScopeAssignment;
      v7303.flags = v20458 | v20459;
    }
    var v15483 = funcDecl$$13.name;
    if (v15483) {
      v15483 = funcDecl$$13.type;
    }
    var v7306 = v15483;
    if (v7306) {
      var v7305 = funcDecl$$13.name;
      var v15484 = funcDecl$$13.type;
      v7305.sym = v15484.symbol;
    }
    funcDecl$$13.scopeType = funcDecl$$13.type;
    var v7307 = funcDecl$$13.isOverload;
    if (v7307) {
      return;
    }
    var v7308 = TypeScript$$17.StringHashTable;
    var funcTable = new v7308;
    var v7309 = TypeScript$$17.ScopedMembers;
    var v15485 = TypeScript$$17.DualStringHashTable;
    var v20460 = TypeScript$$17.StringHashTable;
    var v15486 = new v20460;
    var v7310 = JAM.new(v15485, [funcTable, v15486]);
    var funcMembers = JAM.new(v7309, [v7310]);
    var v7311 = TypeScript$$17.StringHashTable;
    var ambientFuncTable = new v7311;
    var v7312 = TypeScript$$17.ScopedMembers;
    var v15487 = TypeScript$$17.DualStringHashTable;
    var v20461 = TypeScript$$17.StringHashTable;
    var v15488 = new v20461;
    var v7313 = JAM.new(v15487, [ambientFuncTable, v15488]);
    var ambientFuncMembers = JAM.new(v7312, [v7313]);
    var v7314 = TypeScript$$17.StringHashTable;
    var funcStaticTable = new v7314;
    var v7315 = TypeScript$$17.ScopedMembers;
    var v15489 = TypeScript$$17.DualStringHashTable;
    var v20462 = TypeScript$$17.StringHashTable;
    var v15490 = new v20462;
    var v7316 = JAM.new(v15489, [funcStaticTable, v15490]);
    var funcStaticMembers = JAM.new(v7315, [v7316]);
    var v7317 = TypeScript$$17.StringHashTable;
    var ambientFuncStaticTable = new v7317;
    var v7318 = TypeScript$$17.ScopedMembers;
    var v15491 = TypeScript$$17.DualStringHashTable;
    var v20463 = TypeScript$$17.StringHashTable;
    var v15492 = new v20463;
    var v7319 = JAM.new(v15491, [ambientFuncStaticTable, v15492]);
    var ambientFuncStaticMembers = JAM.new(v7318, [v7319]);
    var v20464 = context$$33.typeFlow;
    var v15493 = v20464.checker;
    var v7320 = v15493.locationInfo;
    funcDecl$$13.unitIndex = v7320.unitIndex;
    var v7321 = TypeScript$$17.SymbolScopeBuilder;
    var locals = JAM.new(v7321, [funcMembers, ambientFuncMembers, null, null, parentScope, localContainer]);
    var v7322 = TypeScript$$17.SymbolScopeBuilder;
    var statics$$1 = JAM.new(v7322, [funcStaticMembers, ambientFuncStaticMembers, null, null, parentScope, null]);
    var v15494 = funcDecl$$13.isConstructor;
    if (v15494) {
      var v20465 = context$$33.scopeChain;
      v15494 = v20465.thisType;
    }
    var v7324 = v15494;
    if (v7324) {
      var v15495 = context$$33.scopeChain;
      var v7323 = v15495.thisType;
      v7323.constructorScope = locals;
    }
    funcDecl$$13.symbols = funcTable;
    var v15496 = funcDecl$$13.isSpecialFn();
    var v7343 = !v15496;
    if (v7343) {
      var group = funcDecl$$13.type;
      var signature$$1 = funcDecl$$13.signature;
      var v15497 = funcDecl$$13.isConstructor;
      var v7325 = !v15497;
      if (v7325) {
        group.containedScope = locals;
        locals.container = group.symbol;
        group.memberScope = statics$$1;
        statics$$1.container = group.symbol;
      }
      var v7326 = context$$33.scopeChain;
      funcDecl$$13.enclosingFnc = v7326.fnc;
      var v7327;
      if (isStatic$$5) {
        var v15498 = context$$33.scopeChain;
        v7327 = v15498.classType;
      } else {
        var v15499 = context$$33.scopeChain;
        v7327 = v15499.thisType;
      }
      group.enclosingType = v7327;
      var v7328 = ast$$52.type;
      fgSym = v7328.symbol;
      var v23636 = funcDecl$$13.fncFlags;
      var v25207 = TypeScript$$17.FncFlags;
      var v23637 = v25207.Signature;
      var v20466 = v23636 & v23637;
      var v23638 = TypeScript$$17.FncFlags;
      var v20467 = v23638.None;
      var v15500 = v20466 == v20467;
      if (v15500) {
        v15500 = funcDecl$$13.vars;
      }
      var v7333 = v15500;
      if (v7333) {
        var v7329 = context$$33.typeFlow;
        var v7330 = funcDecl$$13.vars;
        JAM.call(v7329.addLocalsFromScope, v7329, [locals, fgSym, v7330, funcTable, false], JAM.policy.p1);
        var v7331 = context$$33.typeFlow;
        var v7332 = funcDecl$$13.statics;
        JAM.call(v7331.addLocalsFromScope, v7331, [statics$$1, fgSym, v7332, funcStaticTable, false], JAM.policy.p1);
      }
      var v7339 = signature$$1.parameters;
      if (v7339) {
        var v7334 = signature$$1.parameters;
        var len$$17 = v7334.length;
        var i$$55 = 0;
        var v7338 = i$$55 < len$$17;
        for (;v7338;) {
          var v7335 = signature$$1.parameters;
          var paramSym = v7335[i$$55];
          var v15501 = context$$33.typeFlow;
          var v7336 = v15501.checker;
          var v15502 = paramSym.parameter;
          var v7337 = v15502.typeLink;
          JAM.call(v7336.resolveTypeLink, v7336, [locals, v7337, true], JAM.policy.p1);
          i$$55++;
          v7338 = i$$55 < len$$17;
        }
      }
      var v15503 = context$$33.typeFlow;
      var v7340 = v15503.checker;
      var v7341 = signature$$1.returnType;
      var v7342 = funcDecl$$13.isSignature();
      JAM.call(v7340.resolveTypeLink, v7340, [locals, v7341, v7342], JAM.policy.p1);
    }
    var v20468 = funcDecl$$13.isConstructor;
    var v15504 = !v20468;
    var v20471 = !v15504;
    if (v20471) {
      var v20469 = funcDecl$$13.fncFlags;
      var v23639 = TypeScript$$17.FncFlags;
      var v20470 = v23639.ClassMethod;
      v15504 = JAM.call(TypeScript$$17.hasFlag, TypeScript$$17, [v20469, v20470], JAM.policy.p1);
    }
    var v7345 = v15504;
    if (v7345) {
      var v7344;
      var v20472 = funcDecl$$13.isConstructor;
      if (v20472) {
        var v23640 = funcDecl$$13.fncFlags;
        var v25208 = TypeScript$$17.FncFlags;
        var v23641 = v25208.ClassMethod;
        v20472 = JAM.call(TypeScript$$17.hasFlag, TypeScript$$17, [v23640, v23641], JAM.policy.p1);
      }
      var v15506 = v20472;
      if (v15506) {
        var v15505 = context$$33.scopeChain;
        v7344 = v15505.thisType;
      } else {
        v7344 = null;
      }
      var thisType = v7344;
      pushAssignScope(locals, context$$33, thisType, null, funcDecl$$13);
    }
    var v15507 = funcDecl$$13.name;
    if (v15507) {
      var v20473 = funcDecl$$13.fncFlags;
      var v23642 = TypeScript$$17.FncFlags;
      var v20474 = v23642.IsFunctionExpression;
      v15507 = JAM.call(TypeScript$$17.hasFlag, TypeScript$$17, [v20473, v20474], JAM.policy.p1);
    }
    var v7349 = v15507;
    if (v7349) {
      var v15508 = funcDecl$$13.name;
      var v7348 = v15508.sym;
      if (v7348) {
        var v15509 = funcDecl$$13.name;
        var v7346 = v15509.actualText;
        var v15510 = funcDecl$$13.name;
        var v7347 = v15510.sym;
        JAM.call(funcTable.add, funcTable, [v7346, v7347], JAM.policy.p1);
      }
    }
    return;
  }
  function preAssignCatchScopes(ast$$53, context$$34) {
    var catchBlock = ast$$53;
    var v7358 = catchBlock.param;
    if (v7358) {
      var v7350 = TypeScript$$17.ScopedMembers;
      var v15511 = TypeScript$$17.DualStringHashTable;
      var v20475 = TypeScript$$17.StringHashTable;
      var v15512 = new v20475;
      var v20476 = TypeScript$$17.StringHashTable;
      var v15513 = new v20476;
      var v7351 = JAM.new(v15511, [v15512, v15513]);
      var catchTable = JAM.new(v7350, [v7351]);
      var v7352 = TypeScript$$17.SymbolScopeBuilder;
      var v15514 = context$$34.scopeChain;
      var v7353 = v15514.scope;
      var v20477 = context$$34.scopeChain;
      var v15515 = v20477.scope;
      var v7354 = v15515.container;
      var catchLocals = JAM.new(v7352, [catchTable, null, null, null, v7353, v7354]);
      catchBlock.containedScope = catchLocals;
      var v15516 = context$$34.scopeChain;
      var v7355 = v15516.thisType;
      var v15517 = context$$34.scopeChain;
      var v7356 = v15517.classType;
      var v15518 = context$$34.scopeChain;
      var v7357 = v15518.fnc;
      pushAssignScope(catchLocals, context$$34, v7355, v7356, v7357);
    }
    return;
  }
  function preAssignScopes(ast$$54, parent$$45, walker$$42) {
    var context$$35 = walker$$42.state;
    var go = true;
    if (ast$$54) {
      var v15519 = ast$$54.nodeType;
      var v20478 = TypeScript$$17.NodeType;
      var v15520 = v20478.List;
      var v7367 = v15519 == v15520;
      if (v7367) {
        var list$$2 = ast$$54;
        var v7359 = context$$35.scopeChain;
        list$$2.enclosingScope = v7359.scope;
      } else {
        var v15521 = ast$$54.nodeType;
        var v20479 = TypeScript$$17.NodeType;
        var v15522 = v20479.ModuleDeclaration;
        var v7366 = v15521 == v15522;
        if (v7366) {
          preAssignModuleScopes(ast$$54, context$$35);
        } else {
          var v15523 = ast$$54.nodeType;
          var v20480 = TypeScript$$17.NodeType;
          var v15524 = v20480.ClassDeclaration;
          var v7365 = v15523 == v15524;
          if (v7365) {
            preAssignClassScopes(ast$$54, context$$35);
          } else {
            var v15525 = ast$$54.nodeType;
            var v20481 = TypeScript$$17.NodeType;
            var v15526 = v20481.InterfaceDeclaration;
            var v7364 = v15525 == v15526;
            if (v7364) {
              preAssignInterfaceScopes(ast$$54, context$$35);
            } else {
              var v15527 = ast$$54.nodeType;
              var v20482 = TypeScript$$17.NodeType;
              var v15528 = v20482.With;
              var v7363 = v15527 == v15528;
              if (v7363) {
                preAssignWithScopes(ast$$54, context$$35);
              } else {
                var v15529 = ast$$54.nodeType;
                var v20483 = TypeScript$$17.NodeType;
                var v15530 = v20483.FuncDecl;
                var v7362 = v15529 == v15530;
                if (v7362) {
                  preAssignFuncDeclScopes(ast$$54, context$$35);
                } else {
                  var v15531 = ast$$54.nodeType;
                  var v20484 = TypeScript$$17.NodeType;
                  var v15532 = v20484.Catch;
                  var v7361 = v15531 == v15532;
                  if (v7361) {
                    preAssignCatchScopes(ast$$54, context$$35);
                  } else {
                    var v15533 = ast$$54.nodeType;
                    var v20485 = TypeScript$$17.NodeType;
                    var v15534 = v20485.TypeRef;
                    var v7360 = v15533 == v15534;
                    if (v7360) {
                      go = false;
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    var v7368 = walker$$42.options;
    v7368.goChildren = go;
    return ast$$54;
  }
  function postAssignScopes(ast$$55, parent$$46, walker$$43) {
    var context$$36 = walker$$43.state;
    var go$$1 = true;
    if (ast$$55) {
      var v15535 = ast$$55.nodeType;
      var v20486 = TypeScript$$17.NodeType;
      var v15536 = v20486.ModuleDeclaration;
      var v7379 = v15535 == v15536;
      if (v7379) {
        var prevModDecl = ast$$55;
        popAssignScope(context$$36);
        var v7369 = context$$36.modDeclChain;
        v7369.pop();
        var v20487 = context$$36.modDeclChain;
        var v15537 = v20487.length;
        var v7371 = v15537 >= 1;
        if (v7371) {
          var v15538 = context$$36.typeFlow;
          var v7370 = v15538.checker;
          var v15539 = context$$36.modDeclChain;
          var v23643 = context$$36.modDeclChain;
          var v20488 = v23643.length;
          var v15540 = v20488 - 1;
          v7370.currentModDecl = v15539[v15540];
        }
      } else {
        var v15541 = ast$$55.nodeType;
        var v20489 = TypeScript$$17.NodeType;
        var v15542 = v20489.ClassDeclaration;
        var v7378 = v15541 == v15542;
        if (v7378) {
          popAssignScope(context$$36);
        } else {
          var v15543 = ast$$55.nodeType;
          var v20490 = TypeScript$$17.NodeType;
          var v15544 = v20490.InterfaceDeclaration;
          var v7377 = v15543 == v15544;
          if (v7377) {
            popAssignScope(context$$36);
          } else {
            var v15545 = ast$$55.nodeType;
            var v20491 = TypeScript$$17.NodeType;
            var v15546 = v20491.With;
            var v7376 = v15545 == v15546;
            if (v7376) {
              popAssignScope(context$$36);
            } else {
              var v15547 = ast$$55.nodeType;
              var v20492 = TypeScript$$17.NodeType;
              var v15548 = v20492.FuncDecl;
              var v7375 = v15547 == v15548;
              if (v7375) {
                var funcDecl$$14 = ast$$55;
                var v23644 = funcDecl$$14.isConstructor;
                var v20493 = !v23644;
                var v23647 = !v20493;
                if (v23647) {
                  var v23645 = funcDecl$$14.fncFlags;
                  var v25209 = TypeScript$$17.FncFlags;
                  var v23646 = v25209.ClassMethod;
                  v20493 = JAM.call(TypeScript$$17.hasFlag, TypeScript$$17, [v23645, v23646], JAM.policy.p1);
                }
                var v15549 = v20493;
                if (v15549) {
                  var v20494 = funcDecl$$14.isOverload;
                  v15549 = !v20494;
                }
                var v7372 = v15549;
                if (v7372) {
                  popAssignScope(context$$36);
                }
              } else {
                var v15550 = ast$$55.nodeType;
                var v20495 = TypeScript$$17.NodeType;
                var v15551 = v20495.Catch;
                var v7374 = v15550 == v15551;
                if (v7374) {
                  var catchBlock$$1 = ast$$55;
                  var v7373 = catchBlock$$1.param;
                  if (v7373) {
                    popAssignScope(context$$36);
                  }
                } else {
                  go$$1 = false;
                }
              }
            }
          }
        }
      }
    }
    var v7380 = walker$$43.options;
    v7380.goChildren = go$$1;
    return ast$$55;
  }
  var AssignScopeContext = v676();
  TypeScript$$17.AssignScopeContext = AssignScopeContext;
  TypeScript$$17.pushAssignScope = pushAssignScope;
  TypeScript$$17.popAssignScope = popAssignScope;
  TypeScript$$17.instanceCompare = instanceCompare;
  TypeScript$$17.instanceFilterStop = instanceFilterStop;
  var ScopeSearchFilter = v679();
  TypeScript$$17.ScopeSearchFilter = ScopeSearchFilter;
  var v7381 = TypeScript$$17;
  var v26683 = JAM.new(ScopeSearchFilter, [instanceCompare, instanceFilterStop]);
  v7381.instanceFilter = v26683;
  TypeScript$$17.preAssignModuleScopes = preAssignModuleScopes;
  TypeScript$$17.preAssignClassScopes = preAssignClassScopes;
  TypeScript$$17.preAssignInterfaceScopes = preAssignInterfaceScopes;
  TypeScript$$17.preAssignWithScopes = preAssignWithScopes;
  TypeScript$$17.preAssignFuncDeclScopes = preAssignFuncDeclScopes;
  TypeScript$$17.preAssignCatchScopes = preAssignCatchScopes;
  TypeScript$$17.preAssignScopes = preAssignScopes;
  TypeScript$$17.postAssignScopes = postAssignScopes;
  return;
}
function v675(TypeScript$$16) {
  function v674() {
    function v673(message$$16) {
      var v7382 = this.reportError;
      if (v7382) {
        JAM.call(this.reportError, this, [message$$16]);
      }
      return;
    }
    function v672() {
      var rtok$$1;
      this.tokenStart();
      var v26684 = this.peekChar();
      this.ch = v26684;
      var v15552 = this.pos;
      var v15553 = this.len;
      var v7545 = v15552 < v15553;
      start: for (;v7545;) {
        var v23648 = this.ch;
        var v20496 = lexIdStartTable[v23648];
        var v23651 = !v20496;
        if (v23651) {
          var v23649 = this.ch;
          var v23650 = TypeScript$$16.LexCodeBSL;
          v20496 = v23649 == v23650;
        }
        var v15554 = v20496;
        var v20498 = !v15554;
        if (v20498) {
          var v23652 = this.ch;
          var v23653 = TypeScript$$16.LexCodeASCIIChars;
          var v20497 = v23652 >= v23653;
          if (v20497) {
            var v23654 = this.ch;
            v20497 = LexIsUnicodeIdStart(v23654);
          }
          v15554 = v20497;
        }
        var v7544 = v15554;
        if (v7544) {
          return this.scanIdentifier();
        } else {
          var v15555 = this.ch;
          var v15556 = TypeScript$$16.LexCodeSpace;
          var v7543 = v15555 == v15556;
          if (v7543) {
            var v15557 = this.interveningWhitespace;
            var v7383 = !v15557;
            if (v7383) {
              this.interveningWhitespacePos = this.pos;
            }
            var v15558 = this.ch;
            var v15559 = TypeScript$$16.LexCodeSpace;
            var v7384 = v15558 == v15559;
            do {
              this.nextChar();
              var v15560 = this.ch;
              var v15561 = TypeScript$$16.LexCodeSpace;
              v7384 = v15560 == v15561;
            } while (v7384);
            var v15562 = this.mode;
            var v15563 = LexMode.Line;
            var v7390 = v15562 == v15563;
            if (v7390) {
              var v7385 = this.src;
              var v7386 = this.startPos;
              var v7387 = this.pos;
              var whitespaceText = JAM.call(v7385.substring, v7385, [v7386, v7387], JAM.policy.p1);
              var v7388 = TypeScript$$16.WhitespaceToken;
              var v15564 = TypeScript$$16.TokenID;
              var v7389 = v15564.Whitespace;
              return JAM.new(v7388, [v7389, whitespaceText]);
            } else {
              this.tokenStart();
              this.interveningWhitespace = true;
            }
          } else {
            var v15565 = this.ch;
            var v15566 = TypeScript$$16.LexCodeSLH;
            var v7542 = v15565 == v15566;
            if (v7542) {
              this.nextChar();
              var commentText$$2;
              var v15567 = this.ch;
              var v15568 = TypeScript$$16.LexCodeSLH;
              var v7414 = v15567 == v15568;
              if (v7414) {
                var v15569 = this.interveningWhitespace;
                var v7392 = !v15569;
                if (v7392) {
                  var v7391 = this.pos;
                  this.interveningWhitespacePos = v7391 - 1;
                }
                var v7393 = this.pos;
                var commentStartPos = v7393 - 1;
                var commentStartLine = this.line;
                this.finishSinglelineComment();
                var v7394 = this.src;
                var v7395 = this.pos;
                commentText$$2 = JAM.call(v7394.substring, v7394, [commentStartPos, v7395], JAM.policy.p1);
                var v7396 = TypeScript$$16.CommentToken;
                var v15570 = TypeScript$$16.TokenID;
                var v7397 = v15570.Comment;
                var commentToken = JAM.new(v7396, [v7397, commentText$$2, false, commentStartPos, commentStartLine, false]);
                var v7398 = this.scanComments;
                if (v7398) {
                  this.startPos = commentStartPos;
                  return commentToken;
                } else {
                  JAM.call(this.pushComment, this, [commentToken]);
                }
                this.interveningWhitespace = true;
              } else {
                var v15571 = this.ch;
                var v15572 = TypeScript$$16.LexCodeMUL;
                var v7413 = v15571 == v15572;
                if (v7413) {
                  var v15573 = this.interveningWhitespace;
                  var v7400 = !v15573;
                  if (v7400) {
                    var v7399 = this.pos;
                    this.interveningWhitespacePos = v7399 - 1;
                  }
                  var v7401 = this.pos;
                  commentStartPos = v7401 - 1;
                  commentStartLine = this.line;
                  this.nextChar();
                  this.finishMultilineComment();
                  var v7402 = this.src;
                  var v7403 = this.pos;
                  commentText$$2 = JAM.call(v7402.substring, v7402, [commentStartPos, v7403], JAM.policy.p1);
                  var v7404 = this.peekChar();
                  var endsLine$$1 = JAM.call(this.endsLine, this, [v7404]);
                  var v7405 = TypeScript$$16.CommentToken;
                  var v15574 = TypeScript$$16.TokenID;
                  var v7406 = v15574.Comment;
                  commentToken = JAM.new(v7405, [v7406, commentText$$2, true, commentStartPos, commentStartLine, endsLine$$1]);
                  var v7407 = this.scanComments;
                  if (v7407) {
                    this.startPos = commentStartPos;
                    return commentToken;
                  } else {
                    JAM.call(this.pushComment, this, [commentToken]);
                  }
                  this.interveningWhitespace = true;
                } else {
                  var regexTok = this.speculateRegex();
                  if (regexTok) {
                    return regexTok;
                  } else {
                    var v20499 = this.pos;
                    var v15575 = JAM.call(this.peekCharAt, this, [v20499]);
                    var v15576 = TypeScript$$16.LexCodeEQ;
                    var v7412 = v15575 == v15576;
                    if (v7412) {
                      this.nextChar();
                      var v7408 = TypeScript$$16.staticTokens;
                      var v15577 = TypeScript$$16.TokenID;
                      var v7409 = v15577.SlashEquals;
                      return v7408[v7409];
                    } else {
                      var v7410 = TypeScript$$16.staticTokens;
                      var v15578 = TypeScript$$16.TokenID;
                      var v7411 = v15578.Slash;
                      return v7410[v7411];
                    }
                  }
                }
              }
            } else {
              var v15579 = this.ch;
              var v15580 = TypeScript$$16.LexCodeSMC;
              var v7541 = v15579 == v15580;
              if (v7541) {
                this.nextChar();
                var v7415 = TypeScript$$16.staticTokens;
                var v15581 = TypeScript$$16.TokenID;
                var v7416 = v15581.Semicolon;
                return v7415[v7416];
              } else {
                var v20500 = this.ch;
                var v20501 = TypeScript$$16.LexCodeAPO;
                var v15582 = v20500 == v20501;
                var v20504 = !v15582;
                if (v20504) {
                  var v20502 = this.ch;
                  var v20503 = TypeScript$$16.LexCodeQUO;
                  v15582 = v20502 == v20503;
                }
                var v7540 = v15582;
                if (v7540) {
                  return this.scanStringConstant();
                } else {
                  var v15583 = this.ch;
                  var v7539 = autoToken[v15583];
                  if (v7539) {
                    var v7417 = this.ch;
                    var atok = autoToken[v7417];
                    var v15584 = atok.tokenId;
                    var v20505 = TypeScript$$16.TokenID;
                    var v15585 = v20505.OpenBrace;
                    var v7419 = v15584 == v15585;
                    if (v7419) {
                      this.leftCurlyCount++;
                    } else {
                      var v15586 = atok.tokenId;
                      var v20506 = TypeScript$$16.TokenID;
                      var v15587 = v20506.CloseBrace;
                      var v7418 = v15586 == v15587;
                      if (v7418) {
                        this.rightCurlyCount++;
                      }
                    }
                    this.nextChar();
                    return atok;
                  } else {
                    var v20507 = this.ch;
                    var v20508 = TypeScript$$16.LexCode_0;
                    var v15588 = v20507 >= v20508;
                    if (v15588) {
                      var v20509 = this.ch;
                      var v20510 = TypeScript$$16.LexCode_9;
                      v15588 = v20509 <= v20510;
                    }
                    var v7538 = v15588;
                    if (v7538) {
                      rtok$$1 = this.scanNumber();
                      if (rtok$$1) {
                        return rtok$$1;
                      } else {
                        this.nextChar();
                        var v7420 = TypeScript$$16.staticTokens;
                        var v15589 = TypeScript$$16.TokenID;
                        var v7421 = v15589.Error;
                        return v7420[v7421];
                      }
                    } else {
                      var v7537 = this.ch;
                      switch(v7537) {
                        case TypeScript$$16.LexCodeTAB:
                        ;
                        case TypeScript$$16.LexCodeVTAB:
                          var v15590 = this.interveningWhitespace;
                          var v7422 = !v15590;
                          if (v7422) {
                            this.interveningWhitespacePos = this.pos;
                          }
                          var v15591 = this.mode;
                          var v15592 = LexMode.Line;
                          var v7429 = v15591 == v15592;
                          if (v7429) {
                            var v20511 = this.ch;
                            var v20512 = TypeScript$$16.LexCodeSpace;
                            var v15593 = v20511 == v20512;
                            var v20514 = !v15593;
                            if (v20514) {
                              var v20513 = this.ch;
                              v15593 = v20513 == 9;
                            }
                            var v7423 = v15593;
                            do {
                              this.nextChar();
                              var v20515 = this.ch;
                              var v20516 = TypeScript$$16.LexCodeSpace;
                              var v15594 = v20515 == v20516;
                              var v20518 = !v15594;
                              if (v20518) {
                                var v20517 = this.ch;
                                v15594 = v20517 == 9;
                              }
                              v7423 = v15594;
                            } while (v7423);
                            var v7424 = this.src;
                            var v7425 = this.startPos;
                            var v7426 = this.pos;
                            var wsText = JAM.call(v7424.substring, v7424, [v7425, v7426], JAM.policy.p1);
                            var v7427 = TypeScript$$16.WhitespaceToken;
                            var v15595 = TypeScript$$16.TokenID;
                            var v7428 = v15595.Whitespace;
                            return JAM.new(v7427, [v7428, wsText]);
                          } else {
                            this.interveningWhitespace = true;
                          }
                        ;
                        case 255:
                        ;
                        case 254:
                        ;
                        case 239:
                        ;
                        case 187:
                        ;
                        case 191:
                        ;
                        case TypeScript$$16.LexCodeLS:
                        ;
                        case TypeScript$$16.LexCodePS:
                        ;
                        case TypeScript$$16.LexCodeNWL:
                        ;
                        case TypeScript$$16.LexCodeRET:
                          var v15596 = this.ch;
                          var v15597 = TypeScript$$16.LexCodeNWL;
                          var v7433 = v15596 == v15597;
                          if (v7433) {
                            this.newLine();
                            var v15598 = this.mode;
                            var v15599 = LexMode.Line;
                            var v7432 = v15598 == v15599;
                            if (v7432) {
                              var v7430 = TypeScript$$16.staticTokens;
                              var v15600 = TypeScript$$16.TokenID;
                              var v7431 = v15600.EndOfFile;
                              return v7430[v7431];
                            }
                          }
                          var v15601 = this.interveningWhitespace;
                          var v7434 = !v15601;
                          if (v7434) {
                            this.interveningWhitespacePos = this.pos;
                          }
                          this.nextChar();
                          this.tokenStart();
                          this.interveningWhitespace = true;
                          break;
                        case TypeScript$$16.LexCodeDOT:
                          var v23655 = this.pos;
                          var v20519 = v23655 + 1;
                          var v15602 = JAM.call(this.peekCharAt, this, [v20519]);
                          var v15603 = TypeScript$$16.LexCodeDOT;
                          var v7442 = v15602 == v15603;
                          if (v7442) {
                            var v23656 = this.pos;
                            var v20520 = v23656 + 2;
                            var v15604 = JAM.call(this.peekCharAt, this, [v20520]);
                            var v15605 = TypeScript$$16.LexCodeDOT;
                            var v7439 = v15604 == v15605;
                            if (v7439) {
                              JAM.call(this.advanceChar, this, [3]);
                              var v7435 = TypeScript$$16.staticTokens;
                              var v15606 = TypeScript$$16.TokenID;
                              var v7436 = v15606.DotDotDot;
                              return v7435[v7436];
                            } else {
                              this.nextChar();
                              var v7437 = TypeScript$$16.staticTokens;
                              var v15607 = TypeScript$$16.TokenID;
                              var v7438 = v15607.Dot;
                              return v7437[v7438];
                            }
                          } else {
                            this.nextChar();
                            rtok$$1 = this.scanFraction();
                            if (rtok$$1) {
                              return rtok$$1;
                            } else {
                              var v7440 = TypeScript$$16.staticTokens;
                              var v15608 = TypeScript$$16.TokenID;
                              var v7441 = v15608.Dot;
                              return v7440[v7441];
                            }
                          }
                        ;
                        case TypeScript$$16.LexCodeEQ:
                          var v23657 = this.pos;
                          var v20521 = v23657 + 1;
                          var v15609 = JAM.call(this.peekCharAt, this, [v20521]);
                          var v15610 = TypeScript$$16.LexCodeEQ;
                          var v7453 = v15609 == v15610;
                          if (v7453) {
                            var v23658 = this.pos;
                            var v20522 = v23658 + 2;
                            var v15611 = JAM.call(this.peekCharAt, this, [v20522]);
                            var v15612 = TypeScript$$16.LexCodeEQ;
                            var v7447 = v15611 == v15612;
                            if (v7447) {
                              JAM.call(this.advanceChar, this, [3]);
                              var v7443 = TypeScript$$16.staticTokens;
                              var v15613 = TypeScript$$16.TokenID;
                              var v7444 = v15613.EqualsEqualsEquals;
                              return v7443[v7444];
                            } else {
                              JAM.call(this.advanceChar, this, [2]);
                              var v7445 = TypeScript$$16.staticTokens;
                              var v15614 = TypeScript$$16.TokenID;
                              var v7446 = v15614.EqualsEquals;
                              return v7445[v7446];
                            }
                          } else {
                            var v23659 = this.pos;
                            var v20523 = v23659 + 1;
                            var v15615 = JAM.call(this.peekCharAt, this, [v20523]);
                            var v15616 = TypeScript$$16.LexCodeGT;
                            var v7452 = v15615 == v15616;
                            if (v7452) {
                              JAM.call(this.advanceChar, this, [2]);
                              var v7448 = TypeScript$$16.staticTokens;
                              var v15617 = TypeScript$$16.TokenID;
                              var v7449 = v15617.EqualsGreaterThan;
                              return v7448[v7449];
                            } else {
                              this.nextChar();
                              var v7450 = TypeScript$$16.staticTokens;
                              var v15618 = TypeScript$$16.TokenID;
                              var v7451 = v15618.Equals;
                              return v7450[v7451];
                            }
                          }
                        ;
                        case TypeScript$$16.LexCodeBNG:
                          var v23660 = this.pos;
                          var v20524 = v23660 + 1;
                          var v15619 = JAM.call(this.peekCharAt, this, [v20524]);
                          var v15620 = TypeScript$$16.LexCodeEQ;
                          var v7461 = v15619 == v15620;
                          if (v7461) {
                            var v23661 = this.pos;
                            var v20525 = v23661 + 2;
                            var v15621 = JAM.call(this.peekCharAt, this, [v20525]);
                            var v15622 = TypeScript$$16.LexCodeEQ;
                            var v7458 = v15621 == v15622;
                            if (v7458) {
                              JAM.call(this.advanceChar, this, [3]);
                              var v7454 = TypeScript$$16.staticTokens;
                              var v15623 = TypeScript$$16.TokenID;
                              var v7455 = v15623.ExclamationEqualsEquals;
                              return v7454[v7455];
                            } else {
                              JAM.call(this.advanceChar, this, [2]);
                              var v7456 = TypeScript$$16.staticTokens;
                              var v15624 = TypeScript$$16.TokenID;
                              var v7457 = v15624.ExclamationEquals;
                              return v7456[v7457];
                            }
                          } else {
                            this.nextChar();
                            var v7459 = TypeScript$$16.staticTokens;
                            var v15625 = TypeScript$$16.TokenID;
                            var v7460 = v15625.Exclamation;
                            return v7459[v7460];
                          }
                        ;
                        case TypeScript$$16.LexCodePLS:
                          var v23662 = this.pos;
                          var v20526 = v23662 + 1;
                          var v15626 = JAM.call(this.peekCharAt, this, [v20526]);
                          var v15627 = TypeScript$$16.LexCodeEQ;
                          var v7469 = v15626 == v15627;
                          if (v7469) {
                            JAM.call(this.advanceChar, this, [2]);
                            var v7462 = TypeScript$$16.staticTokens;
                            var v15628 = TypeScript$$16.TokenID;
                            var v7463 = v15628.PlusEquals;
                            return v7462[v7463];
                          } else {
                            var v23663 = this.pos;
                            var v20527 = v23663 + 1;
                            var v15629 = JAM.call(this.peekCharAt, this, [v20527]);
                            var v15630 = TypeScript$$16.LexCodePLS;
                            var v7468 = v15629 == v15630;
                            if (v7468) {
                              JAM.call(this.advanceChar, this, [2]);
                              var v7464 = TypeScript$$16.staticTokens;
                              var v15631 = TypeScript$$16.TokenID;
                              var v7465 = v15631.PlusPlus;
                              return v7464[v7465];
                            } else {
                              this.nextChar();
                              var v7466 = TypeScript$$16.staticTokens;
                              var v15632 = TypeScript$$16.TokenID;
                              var v7467 = v15632.Plus;
                              return v7466[v7467];
                            }
                          }
                        ;
                        case TypeScript$$16.LexCodeMIN:
                          var v23664 = this.pos;
                          var v20528 = v23664 + 1;
                          var v15633 = JAM.call(this.peekCharAt, this, [v20528]);
                          var v15634 = TypeScript$$16.LexCodeEQ;
                          var v7477 = v15633 == v15634;
                          if (v7477) {
                            JAM.call(this.advanceChar, this, [2]);
                            var v7470 = TypeScript$$16.staticTokens;
                            var v15635 = TypeScript$$16.TokenID;
                            var v7471 = v15635.MinusEquals;
                            return v7470[v7471];
                          } else {
                            var v23665 = this.pos;
                            var v20529 = v23665 + 1;
                            var v15636 = JAM.call(this.peekCharAt, this, [v20529]);
                            var v15637 = TypeScript$$16.LexCodeMIN;
                            var v7476 = v15636 == v15637;
                            if (v7476) {
                              JAM.call(this.advanceChar, this, [2]);
                              var v7472 = TypeScript$$16.staticTokens;
                              var v15638 = TypeScript$$16.TokenID;
                              var v7473 = v15638.MinusMinus;
                              return v7472[v7473];
                            } else {
                              this.nextChar();
                              var v7474 = TypeScript$$16.staticTokens;
                              var v15639 = TypeScript$$16.TokenID;
                              var v7475 = v15639.Minus;
                              return v7474[v7475];
                            }
                          }
                        ;
                        case TypeScript$$16.LexCodeMUL:
                          var v23666 = this.pos;
                          var v20530 = v23666 + 1;
                          var v15640 = JAM.call(this.peekCharAt, this, [v20530]);
                          var v15641 = TypeScript$$16.LexCodeEQ;
                          var v7482 = v15640 == v15641;
                          if (v7482) {
                            JAM.call(this.advanceChar, this, [2]);
                            var v7478 = TypeScript$$16.staticTokens;
                            var v15642 = TypeScript$$16.TokenID;
                            var v7479 = v15642.AsteriskEquals;
                            return v7478[v7479];
                          } else {
                            this.nextChar();
                            var v7480 = TypeScript$$16.staticTokens;
                            var v15643 = TypeScript$$16.TokenID;
                            var v7481 = v15643.Asterisk;
                            return v7480[v7481];
                          }
                        ;
                        case TypeScript$$16.LexCodePCT:
                          var v23667 = this.pos;
                          var v20531 = v23667 + 1;
                          var v15644 = JAM.call(this.peekCharAt, this, [v20531]);
                          var v15645 = TypeScript$$16.LexCodeEQ;
                          var v7487 = v15644 == v15645;
                          if (v7487) {
                            JAM.call(this.advanceChar, this, [2]);
                            var v7483 = TypeScript$$16.staticTokens;
                            var v15646 = TypeScript$$16.TokenID;
                            var v7484 = v15646.PercentEquals;
                            return v7483[v7484];
                          } else {
                            this.nextChar();
                            var v7485 = TypeScript$$16.staticTokens;
                            var v15647 = TypeScript$$16.TokenID;
                            var v7486 = v15647.Percent;
                            return v7485[v7486];
                          }
                        ;
                        case TypeScript$$16.LexCodeLT:
                          var v23668 = this.pos;
                          var v20532 = v23668 + 1;
                          var v15648 = JAM.call(this.peekCharAt, this, [v20532]);
                          var v15649 = TypeScript$$16.LexCodeLT;
                          var v7498 = v15648 == v15649;
                          if (v7498) {
                            var v23669 = this.pos;
                            var v20533 = v23669 + 2;
                            var v15650 = JAM.call(this.peekCharAt, this, [v20533]);
                            var v15651 = TypeScript$$16.LexCodeEQ;
                            var v7492 = v15650 == v15651;
                            if (v7492) {
                              JAM.call(this.advanceChar, this, [3]);
                              var v7488 = TypeScript$$16.staticTokens;
                              var v15652 = TypeScript$$16.TokenID;
                              var v7489 = v15652.LessThanLessThanEquals;
                              return v7488[v7489];
                            } else {
                              JAM.call(this.advanceChar, this, [2]);
                              var v7490 = TypeScript$$16.staticTokens;
                              var v15653 = TypeScript$$16.TokenID;
                              var v7491 = v15653.LessThanLessThan;
                              return v7490[v7491];
                            }
                          } else {
                            var v23670 = this.pos;
                            var v20534 = v23670 + 1;
                            var v15654 = JAM.call(this.peekCharAt, this, [v20534]);
                            var v15655 = TypeScript$$16.LexCodeEQ;
                            var v7497 = v15654 == v15655;
                            if (v7497) {
                              JAM.call(this.advanceChar, this, [2]);
                              var v7493 = TypeScript$$16.staticTokens;
                              var v15656 = TypeScript$$16.TokenID;
                              var v7494 = v15656.LessThanEquals;
                              return v7493[v7494];
                            } else {
                              this.nextChar();
                              var v7495 = TypeScript$$16.staticTokens;
                              var v15657 = TypeScript$$16.TokenID;
                              var v7496 = v15657.LessThan;
                              return v7495[v7496];
                            }
                          }
                        ;
                        case TypeScript$$16.LexCodeGT:
                          var v23671 = this.pos;
                          var v20535 = v23671 + 1;
                          var v15658 = JAM.call(this.peekCharAt, this, [v20535]);
                          var v15659 = TypeScript$$16.LexCodeGT;
                          var v7515 = v15658 == v15659;
                          if (v7515) {
                            var v23672 = this.pos;
                            var v20536 = v23672 + 2;
                            var v15660 = JAM.call(this.peekCharAt, this, [v20536]);
                            var v15661 = TypeScript$$16.LexCodeEQ;
                            var v7509 = v15660 == v15661;
                            if (v7509) {
                              JAM.call(this.advanceChar, this, [3]);
                              var v7499 = TypeScript$$16.staticTokens;
                              var v15662 = TypeScript$$16.TokenID;
                              var v7500 = v15662.GreaterThanGreaterThanEquals;
                              return v7499[v7500];
                            } else {
                              var v23673 = this.pos;
                              var v20537 = v23673 + 2;
                              var v15663 = JAM.call(this.peekCharAt, this, [v20537]);
                              var v15664 = TypeScript$$16.LexCodeGT;
                              var v7508 = v15663 == v15664;
                              if (v7508) {
                                var v23674 = this.pos;
                                var v20538 = v23674 + 3;
                                var v15665 = JAM.call(this.peekCharAt, this, [v20538]);
                                var v15666 = TypeScript$$16.LexCodeEQ;
                                var v7505 = v15665 == v15666;
                                if (v7505) {
                                  JAM.call(this.advanceChar, this, [4]);
                                  var v7501 = TypeScript$$16.staticTokens;
                                  var v15667 = TypeScript$$16.TokenID;
                                  var v7502 = v15667.GreaterThanGreaterThanGreaterThanEquals;
                                  return v7501[v7502];
                                } else {
                                  JAM.call(this.advanceChar, this, [3]);
                                  var v7503 = TypeScript$$16.staticTokens;
                                  var v15668 = TypeScript$$16.TokenID;
                                  var v7504 = v15668.GreaterThanGreaterThanGreaterThan;
                                  return v7503[v7504];
                                }
                              } else {
                                JAM.call(this.advanceChar, this, [2]);
                                var v7506 = TypeScript$$16.staticTokens;
                                var v15669 = TypeScript$$16.TokenID;
                                var v7507 = v15669.GreaterThanGreaterThan;
                                return v7506[v7507];
                              }
                            }
                          } else {
                            var v23675 = this.pos;
                            var v20539 = v23675 + 1;
                            var v15670 = JAM.call(this.peekCharAt, this, [v20539]);
                            var v15671 = TypeScript$$16.LexCodeEQ;
                            var v7514 = v15670 == v15671;
                            if (v7514) {
                              JAM.call(this.advanceChar, this, [2]);
                              var v7510 = TypeScript$$16.staticTokens;
                              var v15672 = TypeScript$$16.TokenID;
                              var v7511 = v15672.GreaterThanEquals;
                              return v7510[v7511];
                            } else {
                              this.nextChar();
                              var v7512 = TypeScript$$16.staticTokens;
                              var v15673 = TypeScript$$16.TokenID;
                              var v7513 = v15673.GreaterThan;
                              return v7512[v7513];
                            }
                          }
                        ;
                        case TypeScript$$16.LexCodeXOR:
                          var v23676 = this.pos;
                          var v20540 = v23676 + 1;
                          var v15674 = JAM.call(this.peekCharAt, this, [v20540]);
                          var v15675 = TypeScript$$16.LexCodeEQ;
                          var v7520 = v15674 == v15675;
                          if (v7520) {
                            JAM.call(this.advanceChar, this, [2]);
                            var v7516 = TypeScript$$16.staticTokens;
                            var v15676 = TypeScript$$16.TokenID;
                            var v7517 = v15676.CaretEquals;
                            return v7516[v7517];
                          } else {
                            this.nextChar();
                            var v7518 = TypeScript$$16.staticTokens;
                            var v15677 = TypeScript$$16.TokenID;
                            var v7519 = v15677.Caret;
                            return v7518[v7519];
                          }
                        ;
                        case TypeScript$$16.LexCodeBAR:
                          var v23677 = this.pos;
                          var v20541 = v23677 + 1;
                          var v15678 = JAM.call(this.peekCharAt, this, [v20541]);
                          var v15679 = TypeScript$$16.LexCodeEQ;
                          var v7528 = v15678 == v15679;
                          if (v7528) {
                            JAM.call(this.advanceChar, this, [2]);
                            var v7521 = TypeScript$$16.staticTokens;
                            var v15680 = TypeScript$$16.TokenID;
                            var v7522 = v15680.BarEquals;
                            return v7521[v7522];
                          } else {
                            var v23678 = this.pos;
                            var v20542 = v23678 + 1;
                            var v15681 = JAM.call(this.peekCharAt, this, [v20542]);
                            var v15682 = TypeScript$$16.LexCodeBAR;
                            var v7527 = v15681 == v15682;
                            if (v7527) {
                              JAM.call(this.advanceChar, this, [2]);
                              var v7523 = TypeScript$$16.staticTokens;
                              var v15683 = TypeScript$$16.TokenID;
                              var v7524 = v15683.BarBar;
                              return v7523[v7524];
                            } else {
                              this.nextChar();
                              var v7525 = TypeScript$$16.staticTokens;
                              var v15684 = TypeScript$$16.TokenID;
                              var v7526 = v15684.Bar;
                              return v7525[v7526];
                            }
                          }
                        ;
                        case TypeScript$$16.LexCodeAMP:
                          var v23679 = this.pos;
                          var v20543 = v23679 + 1;
                          var v15685 = JAM.call(this.peekCharAt, this, [v20543]);
                          var v15686 = TypeScript$$16.LexCodeEQ;
                          var v7536 = v15685 == v15686;
                          if (v7536) {
                            JAM.call(this.advanceChar, this, [2]);
                            var v7529 = TypeScript$$16.staticTokens;
                            var v15687 = TypeScript$$16.TokenID;
                            var v7530 = v15687.AmpersandEquals;
                            return v7529[v7530];
                          } else {
                            var v23680 = this.pos;
                            var v20544 = v23680 + 1;
                            var v15688 = JAM.call(this.peekCharAt, this, [v20544]);
                            var v15689 = TypeScript$$16.LexCodeAMP;
                            var v7535 = v15688 == v15689;
                            if (v7535) {
                              JAM.call(this.advanceChar, this, [2]);
                              var v7531 = TypeScript$$16.staticTokens;
                              var v15690 = TypeScript$$16.TokenID;
                              var v7532 = v15690.AmpersandAmpersand;
                              return v7531[v7532];
                            } else {
                              this.nextChar();
                              var v7533 = TypeScript$$16.staticTokens;
                              var v15691 = TypeScript$$16.TokenID;
                              var v7534 = v15691.And;
                              return v7533[v7534];
                            }
                          }
                        ;
                        default:
                          JAM.call(this.reportScannerError, this, ["Invalid character"]);
                          this.nextChar();
                      }
                    }
                  }
                }
              }
            }
          }
        }
        var v15692 = this.pos;
        var v15693 = this.len;
        v7545 = v15692 < v15693;
      }
      var v7546 = TypeScript$$16.staticTokens;
      var v15694 = TypeScript$$16.TokenID;
      var v7547 = v15694.EndOfFile;
      return v7546[v7547];
    }
    function v671() {
      var hasEscape = false;
      var v7548 = this.ch;
      var v7549 = TypeScript$$16.LexCodeBSL;
      var isFirstChar = v7548 == v7549;
      var hasUnicode = false;
      for (;;) {
        var v23681 = this.ch;
        var v20545 = lexIdStartTable[v23681];
        var v23683 = !v20545;
        if (v23683) {
          var v23682 = this.ch;
          v20545 = LexIsDigit(v23682);
        }
        var v15695 = v20545;
        var v20547 = !v15695;
        if (v20547) {
          var v23684 = this.ch;
          var v23685 = TypeScript$$16.LexCodeASCIIChars;
          var v20546 = v23684 >= v23685;
          if (v20546) {
            v20546 = this.isValidUnicodeIdentifierChar();
          }
          v15695 = v20546;
        }
        var v7550 = v15695;
        for (;v7550;) {
          this.nextChar();
          var v23686 = this.ch;
          var v20548 = lexIdStartTable[v23686];
          var v23688 = !v20548;
          if (v23688) {
            var v23687 = this.ch;
            v20548 = LexIsDigit(v23687);
          }
          var v15696 = v20548;
          var v20550 = !v15696;
          if (v20550) {
            var v23689 = this.ch;
            var v23690 = TypeScript$$16.LexCodeASCIIChars;
            var v20549 = v23689 >= v23690;
            if (v20549) {
              v20549 = this.isValidUnicodeIdentifierChar();
            }
            v15696 = v20549;
          }
          v7550 = v15696;
        }
        var v15697 = this.ch;
        var v15698 = TypeScript$$16.LexCodeBSL;
        var v7562 = v15697 == v15698;
        if (v7562) {
          this.nextChar();
          var v15699 = this.ch;
          var v15700 = TypeScript$$16.LexCode_u;
          var v7559 = v15699 == v15700;
          if (v7559) {
            this.nextChar();
            var h$$4 = 0;
            var v7554 = h$$4 < 4;
            for (;v7554;) {
              var v15701 = this.ch;
              var v7553 = JAM.call(this.IsHexDigit, this, [v15701]);
              if (v7553) {
                this.nextChar();
              } else {
                JAM.call(this.reportScannerError, this, ["Invalid Unicode escape sequence"]);
                var v7551 = TypeScript$$16.staticTokens;
                var v15702 = TypeScript$$16.TokenID;
                var v7552 = v15702.Error;
                return v7551[v7552];
              }
              h$$4++;
              v7554 = h$$4 < 4;
            }
            var v15703 = this.src;
            var v20551 = this.pos;
            var v15704 = v20551 - 4;
            var v15705 = this.pos;
            var v7555 = JAM.call(v15703.substring, v15703, [v15704, v15705], JAM.policy.p1);
            var hexChar = parseInt(v7555, 16);
            var v20552 = lexIdStartTable[hexChar];
            var v23692 = !v20552;
            if (v23692) {
              var v23691 = !isFirstChar;
              if (v23691) {
                v23691 = LexIsDigit(hexChar);
              }
              v20552 = v23691;
            }
            var v15706 = v20552;
            var v20554 = !v15706;
            if (v20554) {
              var v23693 = TypeScript$$16.LexCodeASCIIChars;
              var v20553 = hexChar >= v23693;
              if (v20553) {
                var v23694 = LexIsUnicodeIdStart(hexChar);
                var v25211 = !v23694;
                if (v25211) {
                  var v25210 = !isFirstChar;
                  if (v25210) {
                    v25210 = LexIsUnicodeDigit(hexChar);
                  }
                  v23694 = v25210;
                }
                v20553 = v23694;
              }
              v15706 = v20553;
            }
            var v7558 = v15706;
            if (v7558) {
            } else {
              JAM.call(this.reportScannerError, this, ["Invalid identifier character"]);
              var v7556 = TypeScript$$16.staticTokens;
              var v15707 = TypeScript$$16.TokenID;
              var v7557 = v15707.Error;
              return v7556[v7557];
            }
            hasEscape = true;
            isFirstChar = false;
            continue;
          }
          JAM.call(this.reportScannerError, this, ["Invalid Unicode escape sequence"]);
          var v7560 = TypeScript$$16.staticTokens;
          var v15708 = TypeScript$$16.TokenID;
          var v7561 = v15708.Error;
          return v7560[v7561];
        }
        break;
      }
      var id$$16;
      var v7563 = this.src;
      var v7564 = this.startPos;
      var v7565 = this.pos;
      var text$$18 = JAM.call(v7563.substring, v7563, [v7564, v7565], JAM.policy.p1);
      var v15709 = !hasEscape;
      if (v15709) {
        var v23695 = TypeScript$$16.LexKeywordTable;
        var v20555 = id$$16 = JAM.call(v23695.lookup, v23695, [text$$18]);
        v15709 = v20555 != null;
      }
      var v7568 = v15709;
      if (v7568) {
        var v7566 = TypeScript$$16.staticTokens;
        return v7566[id$$16];
      } else {
        var v7567 = TypeScript$$16.IdentifierToken;
        return JAM.new(v7567, [text$$18, hasEscape]);
      }
      return;
    }
    function v670() {
      var endCode = this.ch;
      this.nextChar();
      scanStringConstantLoop: for (;;) {
        var v7577 = this.ch;
        switch(v7577) {
          case TypeScript$$16.LexEOF:
            JAM.call(this.reportScannerError, this, ["Unterminated string constant"]);
            break scanStringConstantLoop;
          case TypeScript$$16.LexCodeLS:
          ;
          case TypeScript$$16.LexCodePS:
            this.seenUnicodeChar = true;
          case TypeScript$$16.LexCodeRET:
          ;
          case TypeScript$$16.LexCodeNWL:
            JAM.call(this.reportScannerError, this, ["Unterminated string constant"]);
            break scanStringConstantLoop;
          case TypeScript$$16.LexCodeAPO:
          ;
          case TypeScript$$16.LexCodeQUO:
            var v15710 = this.ch;
            var v7569 = v15710 == endCode;
            if (v7569) {
              this.nextChar();
              break scanStringConstantLoop;
            }
            break;
          case TypeScript$$16.LexCodeBSL:
            this.nextChar();
            var v7576 = this.ch;
            switch(v7576) {
              case TypeScript$$16.LexCodeAPO:
              ;
              case TypeScript$$16.LexCodeQUO:
              ;
              case TypeScript$$16.LexCodeBSL:
                this.nextChar();
                continue scanStringConstantLoop;
              case TypeScript$$16.LexCodeLS:
              ;
              case TypeScript$$16.LexCodePS:
                this.seenUnicodeChar = true;
              case TypeScript$$16.LexCodeRET:
              ;
              case TypeScript$$16.LexCodeNWL:
                var v20556 = this.ch;
                var v20557 = TypeScript$$16.LexCodeRET;
                var v15711 = v20556 == v20557;
                if (v15711) {
                  var v25212 = this.pos;
                  var v23696 = v25212 + 1;
                  var v20558 = JAM.call(this.peekCharAt, this, [v23696]);
                  var v20559 = TypeScript$$16.LexCodeNWL;
                  v15711 = v20558 == v20559;
                }
                var v7570 = v15711;
                if (v7570) {
                  this.nextChar();
                }
                this.nextChar();
                this.newLine();
                var v15712 = this.mode;
                var v15713 = LexMode.Line;
                var v7572 = v15712 == v15713;
                if (v7572) {
                  var v7571;
                  var v20560 = TypeScript$$16.LexCodeAPO;
                  var v15714 = endCode == v20560;
                  if (v15714) {
                    v7571 = LexState.InMultilineSingleQuoteString;
                  } else {
                    v7571 = LexState.InMultilineDoubleQuoteString;
                  }
                  this.lexState = v7571;
                  break scanStringConstantLoop;
                }
                break;
              case TypeScript$$16.LexCode_x:
              ;
              case TypeScript$$16.LexCode_u:
                var v7573;
                var v20561 = this.ch;
                var v20562 = TypeScript$$16.LexCode_x;
                var v15715 = v20561 == v20562;
                if (v15715) {
                  v7573 = 2;
                } else {
                  v7573 = 4;
                }
                var expectedHexDigits = v7573;
                this.nextChar();
                var i$$54 = 0;
                var v7575 = i$$54 < expectedHexDigits;
                for (;v7575;) {
                  var v15716 = this.ch;
                  var v7574 = JAM.call(this.IsHexDigit, this, [v15716]);
                  if (v7574) {
                    this.nextChar();
                  } else {
                    JAM.call(this.reportScannerError, this, ["Invalid Unicode escape sequence"]);
                    break;
                  }
                  i$$54++;
                  v7575 = i$$54 < expectedHexDigits;
                }
                continue scanStringConstantLoop;
            }
          ;
        }
        var v15717 = this.ch;
        var v15718 = TypeScript$$16.LexCodeASCIIChars;
        var v7578 = v15717 >= v15718;
        if (v7578) {
          this.seenUnicodeChar = true;
        }
        this.nextChar();
      }
      var v7579 = TypeScript$$16.StringLiteralToken;
      var v15719 = this.src;
      var v15720 = this.startPos;
      var v15721 = this.pos;
      var v7580 = JAM.call(v15719.substring, v15719, [v15720, v15721], JAM.policy.p1);
      return JAM.new(v7579, [v7580]);
    }
    function v669() {
      var v15722 = this.ch;
      var v7581 = LexIsUnicodeIdStart(v15722);
      var v15724 = !v7581;
      if (v15724) {
        var v15723 = this.ch;
        v7581 = LexIsUnicodeDigit(v15723);
      }
      var valid = v7581;
      var v7582 = this.seenUnicodeChar;
      var v15725 = !v7582;
      if (v15725) {
        v7582 = valid;
      }
      this.seenUnicodeChar = v7582;
      return valid;
    }
    function v668() {
      this.prevLine = this.line;
      var v26685 = this.innerScan();
      this.prevTok = v26685;
      var v7585 = this.saveScan;
      if (v7585) {
        var v7583 = this.saveScan;
        var v7584 = this.prevTok;
        JAM.call(v7583.addToken, v7583, [v7584, this], JAM.policy.p1);
      }
      return this.prevTok;
    }
    function v667() {
      var v20563 = this.lexState;
      var v20564 = LexState.InMultilineComment;
      var v15726 = v20563 == v20564;
      if (v15726) {
        v15726 = this.scanComments;
      }
      var v7597 = v15726;
      if (v7597) {
        var v26686 = this.peekChar();
        this.ch = v26686;
        var commentLine = this.line;
        this.finishMultilineComment();
        var v15727 = this.startPos;
        var v15728 = this.pos;
        var v7594 = v15727 < v15728;
        if (v7594) {
          var v7586 = this.src;
          var v7587 = this.startPos;
          var v7588 = this.pos;
          var commentText$$1 = JAM.call(v7586.substring, v7586, [v7587, v7588], JAM.policy.p1);
          this.tokenStart();
          var v7589 = TypeScript$$16.CommentToken;
          var v15729 = TypeScript$$16.TokenID;
          var v7590 = v15729.Comment;
          var v7591 = this.startPos;
          return JAM.new(v7589, [v7590, commentText$$1, true, v7591, commentLine, true]);
        } else {
          var v7592 = TypeScript$$16.staticTokens;
          var v15730 = TypeScript$$16.TokenID;
          var v7593 = v15730.EndOfFile;
          return v7592[v7593];
        }
      } else {
        var v20565 = this.lexState;
        var v20566 = LexState.InMultilineSingleQuoteString;
        var v15731 = v20565 == v20566;
        if (v15731) {
          var v20567 = this.pos;
          var v20568 = this.len;
          v15731 = v20567 < v20568;
        }
        var v7596 = v15731;
        if (v7596) {
          this.ch = TypeScript$$16.LexCodeAPO;
          this.lexState = LexState.Start;
          return this.scanStringConstant();
        } else {
          var v20569 = this.lexState;
          var v20570 = LexState.InMultilineDoubleQuoteString;
          var v15732 = v20569 == v20570;
          if (v15732) {
            var v20571 = this.pos;
            var v20572 = this.len;
            v15732 = v20571 < v20572;
          }
          var v7595 = v15732;
          if (v7595) {
            this.ch = TypeScript$$16.LexCodeQUO;
            this.lexState = LexState.Start;
            return this.scanStringConstant();
          }
        }
      }
      this.prevLine = this.line;
      var prevTok$$1 = this.innerScan();
      var v15733 = prevTok$$1.tokenId;
      var v20573 = TypeScript$$16.TokenID;
      var v15734 = v20573.Whitespace;
      var v7598 = v15733 != v15734;
      if (v7598) {
        this.prevTok = prevTok$$1;
      }
      return prevTok$$1;
    }
    function v666() {
      var prevLine$$1 = this.prevLine;
      var line$$9 = this.line;
      var col = this.col;
      var pos$$2 = this.pos;
      var startPos$$1 = this.startPos;
      var startCol = this.startCol;
      var startLine$$41 = this.startLine;
      var ch = this.ch;
      var prevTok = this.prevTok;
      var lexState = this.lexState;
      var interveningWhitespace = this.interveningWhitespace;
      var interveningWhitespacePos = this.interveningWhitespacePos;
      var leftCurlyCount$$6 = this.leftCurlyCount;
      var rightCurlyCount$$6 = this.rightCurlyCount;
      var seenUnicodeChar = this.seenUnicodeChar;
      var seenUnicodeCharInComment = this.seenUnicodeCharInComment;
      var v7599 = this.commentStack;
      var commentStackLength = v7599.length;
      var lookAheadToken = this.scan();
      this.prevLine = prevLine$$1;
      this.line = line$$9;
      this.col = col;
      this.pos = pos$$2;
      this.startPos = startPos$$1;
      this.startCol = startCol;
      this.startLine = startLine$$41;
      this.ch = ch;
      this.prevTok = prevTok;
      this.lexState = lexState;
      this.interveningWhitespace = interveningWhitespace;
      this.interveningWhitespacePos = interveningWhitespacePos;
      this.leftCurlyCount = leftCurlyCount$$6;
      this.rightCurlyCount = rightCurlyCount$$6;
      this.seenUnicodeChar = seenUnicodeChar;
      this.seenUnicodeCharInComment = seenUnicodeCharInComment;
      var v7600 = this.commentStack;
      v7600.length = commentStackLength;
      return lookAheadToken;
    }
    function v665() {
      this.pos++;
      this.col++;
      var v26687 = this.peekChar();
      this.ch = v26687;
      return;
    }
    function v664(amt) {
      var v15735 = this.pos;
      this.pos = v15735 + amt;
      var v15736 = this.col;
      this.col = v15736 + amt;
      var v26688 = this.peekChar();
      this.ch = v26688;
      return;
    }
    function v663() {
      var v7601;
      var v15737 = this.interveningWhitespace;
      if (v15737) {
        v7601 = this.interveningWhitespacePos;
      } else {
        v7601 = this.startPos;
      }
      return v7601;
    }
    function v662() {
      var v7602 = this.prevLine;
      var v7603 = this.startLine;
      return v7602 != v7603;
    }
    function v661() {
      var v20574 = TypeScript$$16.noRegexTable;
      var v23697 = this.prevTok;
      var v20575 = v23697.tokenId;
      var v15738 = v20574[v20575];
      var v7604 = v15738 != undefined;
      if (v7604) {
        return null;
      }
      var svPos$$2 = this.pos;
      var svCol$$1 = this.col;
      var index$$49 = this.findClosingSLH();
      var v7612 = index$$49 > 0;
      if (v7612) {
        var v7605 = this.src;
        var pattern$$1 = JAM.call(v7605.substring, v7605, [svPos$$2, index$$49], JAM.policy.p1);
        var flags$$2 = "";
        this.pos = index$$49 + 1;
        var v26689 = this.peekChar();
        this.ch = v26689;
        var flagsStart = this.pos;
        var v23698 = this.ch;
        var v23699 = TypeScript$$16.LexCode_i;
        var v20576 = v23698 == v23699;
        var v23702 = !v20576;
        if (v23702) {
          var v23700 = this.ch;
          var v23701 = TypeScript$$16.LexCode_g;
          v20576 = v23700 == v23701;
        }
        var v15739 = v20576;
        var v20579 = !v15739;
        if (v20579) {
          var v20577 = this.ch;
          var v20578 = TypeScript$$16.LexCode_m;
          v15739 = v20577 == v20578;
        }
        var v7606 = v15739;
        for (;v7606;) {
          this.nextChar();
          var v23703 = this.ch;
          var v23704 = TypeScript$$16.LexCode_i;
          var v20580 = v23703 == v23704;
          var v23707 = !v20580;
          if (v23707) {
            var v23705 = this.ch;
            var v23706 = TypeScript$$16.LexCode_g;
            v20580 = v23705 == v23706;
          }
          var v15740 = v20580;
          var v20583 = !v15740;
          if (v20583) {
            var v20581 = this.ch;
            var v20582 = TypeScript$$16.LexCode_m;
            v15740 = v20581 == v20582;
          }
          v7606 = v15740;
        }
        var v20584 = this.pos;
        var v15741 = v20584 - flagsStart;
        var v7609 = v15741 > 3;
        if (v7609) {
          return null;
        } else {
          var v7607 = this.src;
          var v7608 = this.pos;
          flags$$2 = JAM.call(v7607.substring, v7607, [flagsStart, v7608], JAM.policy.p1);
        }
        var regex$$2 = undefined;
        try {
          regex$$2 = new RegExp(pattern$$1, flags$$2);
        } catch (regexException) {
        }
        if (regex$$2) {
          var v15742 = this.pos;
          var v15743 = this.startPos;
          var v7610 = v15742 - v15743;
          this.col = svCol$$1 + v7610;
          var v7611 = TypeScript$$16.RegularExpressionLiteralToken;
          return JAM.new(v7611, [regex$$2]);
        }
      }
      this.pos = svPos$$2;
      this.col = svCol$$1;
      return null;
    }
    function v660() {
      var index$$48 = this.pos;
      var v7613 = this.src;
      var ch2$$1 = JAM.call(v7613.charCodeAt, v7613, [index$$48]);
      var prevCh = 0;
      var liveEsc = false;
      var v20585 = JAM.call(this.endsLine, this, [ch2$$1]);
      var v15744 = !v20585;
      if (v15744) {
        var v20586 = this.len;
        v15744 = index$$48 < v20586;
      }
      var v7617 = v15744;
      for (;v7617;) {
        var v20587 = TypeScript$$16.LexCodeSLH;
        var v15745 = ch2$$1 == v20587;
        if (v15745) {
          v15745 = !liveEsc;
        }
        var v7614 = v15745;
        if (v7614) {
          return index$$48;
        }
        prevCh = ch2$$1;
        index$$48++;
        if (liveEsc) {
          liveEsc = false;
        } else {
          var v7615 = TypeScript$$16.LexCodeBSL;
          liveEsc = prevCh == v7615;
        }
        var v7616 = this.src;
        ch2$$1 = JAM.call(v7616.charCodeAt, v7616, [index$$48]);
        var v20588 = JAM.call(this.endsLine, this, [ch2$$1]);
        var v15746 = !v20588;
        if (v15746) {
          var v20589 = this.len;
          v15746 = index$$48 < v20589;
        }
        v7617 = v15746;
      }
      return -1;
    }
    function v659() {
      var v7618 = this.src;
      var v7619 = this.startPos;
      var v7620 = this.pos;
      return JAM.call(v7618.substring, v7618, [v7619, v7620], JAM.policy.p1);
    }
    function v658() {
      var v15747 = this.pos;
      var v15748 = this.len;
      var v7623 = v15747 < v15748;
      for (;v7623;) {
        var v15749 = this.ch;
        var v7621 = JAM.call(this.endsLine, this, [v15749]);
        if (v7621) {
          break;
        }
        var v15750 = this.ch;
        var v15751 = TypeScript$$16.LexCodeASCIIChars;
        var v7622 = v15750 >= v15751;
        if (v7622) {
          this.seenUnicodeCharInComment = true;
        }
        this.nextChar();
        var v15752 = this.pos;
        var v15753 = this.len;
        v7623 = v15752 < v15753;
      }
      var v15754 = this.mode;
      var v15755 = LexMode.File;
      var v7624 = v15754 == v15755;
      if (v7624) {
        this.tokenStart();
      }
      return;
    }
    function v657(c$$10) {
      var v23708 = TypeScript$$16.LexCodeNWL;
      var v20590 = c$$10 == v23708;
      var v23710 = !v20590;
      if (v23710) {
        var v23709 = TypeScript$$16.LexCodeRET;
        v20590 = c$$10 == v23709;
      }
      var v15756 = v20590;
      var v20592 = !v15756;
      if (v20592) {
        var v20591 = TypeScript$$16.LexCodeLS;
        v15756 = c$$10 == v20591;
      }
      var v7625 = v15756;
      var v15758 = !v7625;
      if (v15758) {
        var v15757 = TypeScript$$16.LexCodePS;
        v7625 = c$$10 == v15757;
      }
      return v7625;
    }
    function v656() {
      this.commentStack = [];
      return;
    }
    function v655(line$$8) {
      var comments$$9 = null;
      var v23711 = this.commentStack;
      var v20593 = v23711.length;
      var v15759 = v20593 > 0;
      if (v15759) {
        var v25213 = this.commentStack;
        var v23712 = v25213[0];
        var v20594 = v23712.line;
        v15759 = v20594 == line$$8;
      }
      var v7629 = v15759;
      for (;v7629;) {
        var v7628 = comments$$9 == null;
        if (v7628) {
          var v15760 = this.commentStack;
          var v7626 = v15760.shift();
          comments$$9 = [v7626];
        } else {
          var v20595 = this.commentStack;
          var v15761 = v20595.shift();
          var v7627 = [v15761];
          comments$$9 = comments$$9.concat(v7627);
        }
        var v23713 = this.commentStack;
        var v20596 = v23713.length;
        var v15762 = v20596 > 0;
        if (v15762) {
          var v25214 = this.commentStack;
          var v23714 = v25214[0];
          var v20597 = v23714.line;
          v15762 = v20597 == line$$8;
        }
        v7629 = v15762;
      }
      return comments$$9;
    }
    function v654() {
      var stack$$2 = this.commentStack;
      this.commentStack = [];
      return stack$$2;
    }
    function v653(comment$$4) {
      var v7630 = this.commentStack;
      JAM.call(v7630.push, v7630, [comment$$4]);
      return;
    }
    function v652() {
      var ch2;
      this.lexState = LexState.InMultilineComment;
      var v15763 = this.pos;
      var v15764 = this.len;
      var v7638 = v15763 < v15764;
      for (;v7638;) {
        var v15765 = this.ch;
        var v15766 = TypeScript$$16.LexCodeMUL;
        var v7637 = v15765 == v15766;
        if (v7637) {
          var v15767 = this.pos;
          var v7631 = v15767 + 1;
          ch2 = JAM.call(this.peekCharAt, this, [v7631]);
          var v15768 = TypeScript$$16.LexCodeSLH;
          var v7633 = ch2 == v15768;
          if (v7633) {
            JAM.call(this.advanceChar, this, [2]);
            var v15769 = this.mode;
            var v15770 = LexMode.File;
            var v7632 = v15769 == v15770;
            if (v7632) {
              this.tokenStart();
            }
            this.lexState = LexState.Start;
            return;
          }
        } else {
          var v15771 = this.ch;
          var v15772 = TypeScript$$16.LexCodeNWL;
          var v7636 = v15771 == v15772;
          if (v7636) {
            this.newLine();
            var v15773 = this.mode;
            var v15774 = LexMode.Line;
            var v7634 = v15773 == v15774;
            if (v7634) {
              this.nextChar();
              return;
            }
          } else {
            var v15775 = this.ch;
            var v15776 = TypeScript$$16.LexCodeASCIIChars;
            var v7635 = v15775 >= v15776;
            if (v7635) {
              this.seenUnicodeCharInComment = true;
            }
          }
        }
        this.nextChar();
        var v15777 = this.pos;
        var v15778 = this.len;
        v7638 = v15777 < v15778;
      }
      return;
    }
    function v651() {
      this.col = 0;
      var v15779 = this.mode;
      var v15780 = LexMode.File;
      var v7641 = v15779 == v15780;
      if (v7641) {
        this.line++;
        var v7639 = this.lineMap;
        var v7640 = this.line;
        var v15781 = this.pos;
        JAM.set(v7639, v7640, v15781 + 1);
      }
      return;
    }
    function v650() {
      var v7642 = NumberScanState.InFraction;
      return JAM.call(this.scanDecimalNumber, this, [v7642]);
    }
    function v649() {
      var v15782 = this.peekChar();
      var v15783 = TypeScript$$16.LexCode_0;
      var v7646 = v15782 == v15783;
      if (v7646) {
        var v20598 = this.pos;
        var v15784 = v20598 + 1;
        var v7644 = JAM.call(this.peekCharAt, this, [v15784]);
        switch(v7644) {
          case TypeScript$$16.LexCode_x:
          ;
          case TypeScript$$16.LexCode_X:
            JAM.call(this.advanceChar, this, [2]);
            return this.scanHexDigits();
          case TypeScript$$16.LexCode_8:
          ;
          case TypeScript$$16.LexCode_9:
          ;
          case TypeScript$$16.LexCodeDOT:
            var v7643 = NumberScanState.Start;
            return JAM.call(this.scanDecimalNumber, this, [v7643]);
          default:
            return this.scanOctalDigits();
        }
      } else {
        var v7645 = NumberScanState.Start;
        return JAM.call(this.scanDecimalNumber, this, [v7645]);
      }
      return;
    }
    function v648(state$$4) {
      var atLeastOneDigit$$2 = false;
      var svPos$$1 = this.pos;
      var svCol = this.col;
      for (;;) {
        var v15785 = this.ch;
        var v7672 = LexIsDigit(v15785);
        if (v7672) {
          atLeastOneDigit$$2 = true;
          var v20599 = this.ch;
          var v20600 = TypeScript$$16.LexCode_0;
          var v15786 = v20599 != v20600;
          if (v15786) {
            var v20601 = NumberScanState.InEmptyFraction;
            v15786 = state$$4 == v20601;
          }
          var v7647 = v15786;
          if (v7647) {
            state$$4 = NumberScanState.InFraction;
          }
          this.nextChar();
        } else {
          var v15787 = this.ch;
          var v15788 = TypeScript$$16.LexCodeDOT;
          var v7671 = v15787 == v15788;
          if (v7671) {
            var v15789 = NumberScanState.Start;
            var v7651 = state$$4 == v15789;
            if (v7651) {
              this.nextChar();
              state$$4 = NumberScanState.InEmptyFraction;
            } else {
              if (atLeastOneDigit$$2) {
                var v7648 = TypeScript$$16.NumberLiteralToken;
                var v20602 = this.src;
                var v20603 = this.startPos;
                var v20604 = this.pos;
                var v15790 = JAM.call(v20602.substring, v20602, [v20603, v20604], JAM.policy.p1);
                var v7649 = parseFloat(v15790);
                var v15791 = NumberScanState.InEmptyFraction;
                var v7650 = state$$4 == v15791;
                return JAM.new(v7648, [v7649, v7650]);
              } else {
                this.pos = svPos$$1;
                this.col = svCol;
                return null;
              }
            }
          } else {
            var v20605 = this.ch;
            var v20606 = TypeScript$$16.LexCode_e;
            var v15792 = v20605 == v20606;
            var v20609 = !v15792;
            if (v20609) {
              var v20607 = this.ch;
              var v20608 = TypeScript$$16.LexCode_E;
              v15792 = v20607 == v20608;
            }
            var v7670 = v15792;
            if (v7670) {
              var v15793 = NumberScanState.Start;
              var v7655 = state$$4 == v15793;
              if (v7655) {
                if (atLeastOneDigit$$2) {
                  atLeastOneDigit$$2 = false;
                  this.nextChar();
                  state$$4 = NumberScanState.InExponent;
                } else {
                  this.pos = svPos$$1;
                  this.col = svCol;
                  return null;
                }
              } else {
                var v20610 = NumberScanState.InFraction;
                var v15794 = state$$4 == v20610;
                var v20612 = !v15794;
                if (v20612) {
                  var v20611 = NumberScanState.InEmptyFraction;
                  v15794 = state$$4 == v20611;
                }
                var v7654 = v15794;
                if (v7654) {
                  this.nextChar();
                  state$$4 = NumberScanState.InExponent;
                  atLeastOneDigit$$2 = false;
                } else {
                  if (atLeastOneDigit$$2) {
                    var v7652 = TypeScript$$16.NumberLiteralToken;
                    var v20613 = this.src;
                    var v20614 = this.startPos;
                    var v20615 = this.pos;
                    var v15795 = JAM.call(v20613.substring, v20613, [v20614, v20615], JAM.policy.p1);
                    var v7653 = parseFloat(v15795);
                    return JAM.new(v7652, [v7653]);
                  } else {
                    this.pos = svPos$$1;
                    this.col = svCol;
                    return null;
                  }
                }
              }
            } else {
              var v20616 = this.ch;
              var v20617 = TypeScript$$16.LexCodePLS;
              var v15796 = v20616 == v20617;
              var v20620 = !v15796;
              if (v20620) {
                var v20618 = this.ch;
                var v20619 = TypeScript$$16.LexCodeMIN;
                v15796 = v20618 == v20619;
              }
              var v7669 = v15796;
              if (v7669) {
                var v15797 = NumberScanState.InExponent;
                var v7664 = state$$4 == v15797;
                if (v7664) {
                  var v7656 = !atLeastOneDigit$$2;
                  if (v7656) {
                    this.nextChar();
                  } else {
                    this.pos = svPos$$1;
                    this.col = svCol;
                    return null;
                  }
                } else {
                  var v20621 = NumberScanState.InEmptyFraction;
                  var v15798 = state$$4 == v20621;
                  var v20623 = !v15798;
                  if (v20623) {
                    var v20622 = NumberScanState.InFraction;
                    v15798 = state$$4 == v20622;
                  }
                  var v7663 = v15798;
                  if (v7663) {
                    var v7657 = TypeScript$$16.NumberLiteralToken;
                    var v20624 = this.src;
                    var v20625 = this.startPos;
                    var v20626 = this.pos;
                    var v15799 = JAM.call(v20624.substring, v20624, [v20625, v20626], JAM.policy.p1);
                    var v7658 = parseFloat(v15799);
                    var v15800 = NumberScanState.InEmptyFraction;
                    var v7659 = state$$4 == v15800;
                    return JAM.new(v7657, [v7658, v7659]);
                  } else {
                    var v7662 = !atLeastOneDigit$$2;
                    if (v7662) {
                      this.pos = svPos$$1;
                      this.col = svCol;
                      return null;
                    } else {
                      var v7660 = TypeScript$$16.NumberLiteralToken;
                      var v20627 = this.src;
                      var v20628 = this.startPos;
                      var v20629 = this.pos;
                      var v15801 = JAM.call(v20627.substring, v20627, [v20628, v20629], JAM.policy.p1);
                      var v7661 = parseFloat(v15801);
                      return JAM.new(v7660, [v7661]);
                    }
                  }
                }
              } else {
                var v7668 = !atLeastOneDigit$$2;
                if (v7668) {
                  this.pos = svPos$$1;
                  this.col = svCol;
                  return null;
                } else {
                  var v7665 = TypeScript$$16.NumberLiteralToken;
                  var v20630 = this.src;
                  var v20631 = this.startPos;
                  var v20632 = this.pos;
                  var v15802 = JAM.call(v20630.substring, v20630, [v20631, v20632], JAM.policy.p1);
                  var v7666 = parseFloat(v15802);
                  var v15803 = NumberScanState.InEmptyFraction;
                  var v7667 = state$$4 == v15803;
                  return JAM.new(v7665, [v7666, v7667]);
                }
              }
            }
          }
        }
      }
      return;
    }
    function v647() {
      var atLeastOneDigit$$1 = false;
      for (;;) {
        var v15804 = this.ch;
        var v7675 = JAM.call(this.IsOctalDigit, this, [v15804]);
        if (v7675) {
          this.nextChar();
          atLeastOneDigit$$1 = true;
        } else {
          if (atLeastOneDigit$$1) {
            var v7673 = TypeScript$$16.NumberLiteralToken;
            var v20633 = this.src;
            var v20634 = this.startPos;
            var v20635 = this.pos;
            var v15805 = JAM.call(v20633.substring, v20633, [v20634, v20635], JAM.policy.p1);
            var v7674 = parseInt(v15805);
            return JAM.new(v7673, [v7674]);
          } else {
            return null;
          }
        }
      }
      return;
    }
    function v646() {
      var atLeastOneDigit = false;
      for (;;) {
        var v15806 = this.ch;
        var v7678 = JAM.call(this.IsHexDigit, this, [v15806]);
        if (v7678) {
          this.nextChar();
          atLeastOneDigit = true;
        } else {
          if (atLeastOneDigit) {
            var v7676 = TypeScript$$16.NumberLiteralToken;
            var v20636 = this.src;
            var v20637 = this.startPos;
            var v20638 = this.pos;
            var v15807 = JAM.call(v20636.substring, v20636, [v20637, v20638], JAM.policy.p1);
            var v7677 = parseInt(v15807);
            return JAM.new(v7676, [v7677]);
          } else {
            return null;
          }
        }
      }
      return;
    }
    function v645(c$$9) {
      var v20639 = TypeScript$$16.LexCode_0;
      var v15808 = c$$9 >= v20639;
      if (v15808) {
        var v20640 = TypeScript$$16.LexCode_7;
        v15808 = c$$9 <= v20640;
      }
      var v7679 = v15808;
      var v15810 = !v7679;
      if (v15810) {
        var v20641 = TypeScript$$16.LexCode_a;
        var v15809 = c$$9 >= v20641;
        if (v15809) {
          var v20642 = TypeScript$$16.LexCode_f;
          v15809 = c$$9 <= v20642;
        }
        v7679 = v15809;
      }
      return v7679;
    }
    function v644(c$$8) {
      var v23715 = TypeScript$$16.LexCode_0;
      var v20643 = c$$8 >= v23715;
      if (v20643) {
        var v23716 = TypeScript$$16.LexCode_9;
        v20643 = c$$8 <= v23716;
      }
      var v15811 = v20643;
      var v20645 = !v15811;
      if (v20645) {
        var v23717 = TypeScript$$16.LexCode_A;
        var v20644 = c$$8 >= v23717;
        if (v20644) {
          var v23718 = TypeScript$$16.LexCode_F;
          v20644 = c$$8 <= v23718;
        }
        v15811 = v20644;
      }
      var v7680 = v15811;
      var v15813 = !v7680;
      if (v15813) {
        var v20646 = TypeScript$$16.LexCode_a;
        var v15812 = c$$8 >= v20646;
        if (v15812) {
          var v20647 = TypeScript$$16.LexCode_f;
          v15812 = c$$8 <= v20647;
        }
        v7680 = v15812;
      }
      return v7680;
    }
    function v643(index$$47) {
      var v15814 = this.len;
      var v7682 = index$$47 < v15814;
      if (v7682) {
        var v7681 = this.src;
        return JAM.call(v7681.charCodeAt, v7681, [index$$47]);
      } else {
        return TypeScript$$16.LexEOF;
      }
      return;
    }
    function v642() {
      var v15815 = this.pos;
      var v15816 = this.len;
      var v7685 = v15815 < v15816;
      if (v7685) {
        var v7683 = this.src;
        var v7684 = this.pos;
        return JAM.call(v7683.charCodeAt, v7683, [v7684]);
      } else {
        return TypeScript$$16.LexEOF;
      }
      return;
    }
    function v641() {
      this.startPos = this.pos;
      this.startLine = this.line;
      this.startCol = this.col;
      this.interveningWhitespace = false;
      return;
    }
    function v640() {
      return this.lexState;
    }
    function v639(value$$34) {
      this.scanComments = value$$34;
      return;
    }
    function v638(newSrc$$2, textMode$$2) {
      var v7686 = JAM.new(StringSourceText, [newSrc$$2]);
      JAM.call(this.setSourceText, this, [v7686, textMode$$2], JAM.policy.p1);
      return;
    }
    function v637(savedTokens) {
      this.saveScan = savedTokens;
      return;
    }
    function v636(reportError$$1) {
      this.reportError = reportError$$1;
      return;
    }
    function v635(newSrc$$1, textMode$$1) {
      this.mode = textMode$$1;
      var v7687 = this.mode;
      var v7688 = LexMode.Line;
      this.scanComments = v7687 === v7688;
      this.pos = 0;
      this.interveningWhitespacePos = 0;
      this.startPos = 0;
      this.line = 1;
      this.col = 0;
      this.startCol = this.col;
      this.startLine = this.line;
      this.len = 0;
      var v7689 = newSrc$$1.getLength();
      var v26690 = JAM.call(newSrc$$1.getText, newSrc$$1, [0, v7689], JAM.policy.p1);
      this.src = v26690;
      var v7690 = this.src;
      this.len = v7690.length;
      this.lineMap = [];
      var v7691 = this.lineMap;
      v7691[1] = 0;
      this.commentStack = [];
      this.leftCurlyCount = 0;
      this.rightCurlyCount = 0;
      this.seenUnicodeChar = false;
      this.seenUnicodeCharInComment = false;
      return;
    }
    function v634() {
      return this.prevTok;
    }
    function Scanner$$1() {
      this.prevLine = 1;
      this.line = 1;
      this.col = 0;
      this.pos = 0;
      this.startPos = 0;
      this.len = 0;
      this.lineMap = [];
      this.ch = TypeScript$$16.LexEOF;
      this.lexState = LexState.Start;
      this.mode = LexMode.File;
      this.scanComments = true;
      this.interveningWhitespace = false;
      this.interveningWhitespacePos = 0;
      this.leftCurlyCount = 0;
      this.rightCurlyCount = 0;
      var v26691 = new Array;
      this.commentStack = v26691;
      this.saveScan = null;
      this.seenUnicodeChar = false;
      this.seenUnicodeCharInComment = false;
      var v7692 = TypeScript$$16.staticTokens;
      var v15817 = TypeScript$$16.TokenID;
      var v7693 = v15817.EndOfFile;
      this.prevTok = v7692[v7693];
      this.startCol = this.col;
      this.startLine = this.line;
      var v7694 = this.lineMap;
      v7694[1] = 0;
      var v15818 = TypeScript$$16.LexKeywordTable;
      var v7695 = !v15818;
      if (v7695) {
        LexInitialize();
      }
      return;
    }
    var v7696 = Scanner$$1.prototype;
    v7696.previousToken = v634;
    var v7697 = Scanner$$1.prototype;
    v7697.setSourceText = v635;
    var v7698 = Scanner$$1.prototype;
    v7698.setErrorHandler = v636;
    var v7699 = Scanner$$1.prototype;
    v7699.setSaveScan = v637;
    var v7700 = Scanner$$1.prototype;
    v7700.setText = v638;
    var v7701 = Scanner$$1.prototype;
    v7701.setScanComments = v639;
    var v7702 = Scanner$$1.prototype;
    v7702.getLexState = v640;
    var v7703 = Scanner$$1.prototype;
    v7703.tokenStart = v641;
    var v7704 = Scanner$$1.prototype;
    v7704.peekChar = v642;
    var v7705 = Scanner$$1.prototype;
    v7705.peekCharAt = v643;
    var v7706 = Scanner$$1.prototype;
    v7706.IsHexDigit = v644;
    var v7707 = Scanner$$1.prototype;
    v7707.IsOctalDigit = v645;
    var v7708 = Scanner$$1.prototype;
    v7708.scanHexDigits = v646;
    var v7709 = Scanner$$1.prototype;
    v7709.scanOctalDigits = v647;
    var v7710 = Scanner$$1.prototype;
    v7710.scanDecimalNumber = v648;
    var v7711 = Scanner$$1.prototype;
    v7711.scanNumber = v649;
    var v7712 = Scanner$$1.prototype;
    v7712.scanFraction = v650;
    var v7713 = Scanner$$1.prototype;
    v7713.newLine = v651;
    var v7714 = Scanner$$1.prototype;
    v7714.finishMultilineComment = v652;
    var v7715 = Scanner$$1.prototype;
    v7715.pushComment = v653;
    var v7716 = Scanner$$1.prototype;
    v7716.getComments = v654;
    var v7717 = Scanner$$1.prototype;
    v7717.getCommentsForLine = v655;
    var v7718 = Scanner$$1.prototype;
    v7718.resetComments = v656;
    var v7719 = Scanner$$1.prototype;
    v7719.endsLine = v657;
    var v7720 = Scanner$$1.prototype;
    v7720.finishSinglelineComment = v658;
    var v7721 = Scanner$$1.prototype;
    v7721.tokenText = v659;
    var v7722 = Scanner$$1.prototype;
    v7722.findClosingSLH = v660;
    var v7723 = Scanner$$1.prototype;
    v7723.speculateRegex = v661;
    var v7724 = Scanner$$1.prototype;
    v7724.lastTokenHadNewline = v662;
    var v7725 = Scanner$$1.prototype;
    v7725.lastTokenLimChar = v663;
    var v7726 = Scanner$$1.prototype;
    v7726.advanceChar = v664;
    var v7727 = Scanner$$1.prototype;
    v7727.nextChar = v665;
    var v7728 = Scanner$$1.prototype;
    v7728.getLookAheadToken = v666;
    var v7729 = Scanner$$1.prototype;
    v7729.scanInLine = v667;
    var v7730 = Scanner$$1.prototype;
    v7730.scan = v668;
    var v7731 = Scanner$$1.prototype;
    v7731.isValidUnicodeIdentifierChar = v669;
    var v7732 = Scanner$$1.prototype;
    v7732.scanStringConstant = v670;
    var v7733 = Scanner$$1.prototype;
    v7733.scanIdentifier = v671;
    var v7734 = Scanner$$1.prototype;
    v7734.innerScan = v672;
    var v7735 = Scanner$$1.prototype;
    v7735.reportScannerError = v673;
    return Scanner$$1;
  }
  function v633() {
    function v632() {
      throw new Error("Invalid operation.");
    }
    function v631(reportError) {
      return;
    }
    function v630(newSrc, textMode) {
      return;
    }
    function v629() {
      this.commentStack = [];
      return;
    }
    function v628(line$$7) {
      var comments$$8 = null;
      var v23719 = this.commentStack;
      var v20648 = v23719.length;
      var v15819 = v20648 > 0;
      if (v15819) {
        var v25215 = this.commentStack;
        var v23720 = v25215[0];
        var v20649 = v23720.line;
        v15819 = v20649 == line$$7;
      }
      var v7739 = v15819;
      for (;v7739;) {
        var v7738 = comments$$8 == null;
        if (v7738) {
          var v15820 = this.commentStack;
          var v7736 = v15820.shift();
          comments$$8 = [v7736];
        } else {
          var v20650 = this.commentStack;
          var v15821 = v20650.shift();
          var v7737 = [v15821];
          comments$$8 = comments$$8.concat(v7737);
        }
        var v23721 = this.commentStack;
        var v20651 = v23721.length;
        var v15822 = v20651 > 0;
        if (v15822) {
          var v25216 = this.commentStack;
          var v23722 = v25216[0];
          var v20652 = v23722.line;
          v15822 = v20652 == line$$7;
        }
        v7739 = v15822;
      }
      return comments$$8;
    }
    function v627() {
      var stack$$1 = this.commentStack;
      this.commentStack = [];
      return stack$$1;
    }
    function v626(comment$$3) {
      var v7740 = this.commentStack;
      JAM.call(v7740.push, v7740, [comment$$3]);
      return;
    }
    function v625() {
      var v7741 = this.prevLine;
      var v7742 = this.startLine;
      return v7741 != v7742;
    }
    function v624() {
      var v15823 = this.prevSavedToken;
      var v7744 = v15823 !== null;
      if (v7744) {
        var v7743 = this.prevSavedToken;
        return v7743.limChar;
      } else {
        return 0;
      }
      return;
    }
    function v623(offset$$8) {
      var v7745 = this.lineMap;
      var v26692 = getLineNumberFromPosition(v7745, offset$$8);
      this.line = v26692;
      this.currentTokenIndex = 0;
      var v15824 = this.lineMap;
      var v15825 = this.line;
      var v7746 = v15824[v15825];
      var tmpCol = offset$$8 - v7746;
      var v23723 = this.lexStateByLine;
      var v23724 = this.line;
      var v20653 = v23723[v23724];
      var v20654 = LexState.InMultilineComment;
      var v15826 = v20653 == v20654;
      if (v15826) {
        var v20655 = this.line;
        v15826 = v20655 > 0;
      }
      var v7747 = v15826;
      for (;v7747;) {
        this.line--;
        tmpCol = 0;
        var v23725 = this.lexStateByLine;
        var v23726 = this.line;
        var v20656 = v23725[v23726];
        var v20657 = LexState.InMultilineComment;
        var v15827 = v20656 == v20657;
        if (v15827) {
          var v20658 = this.line;
          v15827 = v20658 > 0;
        }
        v7747 = v15827;
      }
      var v15828 = this.lineMap;
      var v7748 = v15828.length;
      var lenMin1 = v7748 - 1;
      var v7749 = this.tokensByLine;
      var v7750 = this.line;
      this.currentTokens = v7749[v7750];
      var v23727 = this.currentTokens;
      var v20659 = v23727.length;
      var v15829 = v20659 == 0;
      if (v15829) {
        var v20660 = this.line;
        v15829 = v20660 < lenMin1;
      }
      var v7753 = v15829;
      for (;v7753;) {
        this.line++;
        var v7751 = this.tokensByLine;
        var v7752 = this.line;
        this.currentTokens = v7751[v7752];
        tmpCol = 0;
        var v23728 = this.currentTokens;
        var v20661 = v23728.length;
        var v15830 = v20661 == 0;
        if (v15830) {
          var v20662 = this.line;
          v15830 = v20662 < lenMin1;
        }
        v7753 = v15830;
      }
      var v15831 = this.line;
      var v7759 = v15831 <= lenMin1;
      if (v7759) {
        var v20663 = this.currentTokenIndex;
        var v23729 = this.currentTokens;
        var v20664 = v23729.length;
        var v15832 = v20663 < v20664;
        if (v15832) {
          var v25217 = this.currentTokens;
          var v25218 = this.currentTokenIndex;
          var v23730 = v25217[v25218];
          var v20665 = v23730.limChar;
          v15832 = tmpCol > v20665;
        }
        var v7754 = v15832;
        for (;v7754;) {
          this.currentTokenIndex++;
          var v20666 = this.currentTokenIndex;
          var v23731 = this.currentTokens;
          var v20667 = v23731.length;
          var v15833 = v20666 < v20667;
          if (v15833) {
            var v25219 = this.currentTokens;
            var v25220 = this.currentTokenIndex;
            var v23732 = v25219[v25220];
            var v20668 = v23732.limChar;
            v15833 = tmpCol > v20668;
          }
          v7754 = v15833;
        }
        var v15834 = this.currentTokenIndex;
        var v20669 = this.currentTokens;
        var v15835 = v20669.length;
        var v7758 = v15834 < v15835;
        if (v7758) {
          var v15836 = this.currentTokens;
          var v15837 = this.currentTokenIndex;
          var v7755 = v15836[v15837];
          this.col = v7755.minChar;
          var v7756 = this.col;
          var v15838 = this.lineMap;
          var v15839 = this.line;
          var v7757 = v15838[v15839];
          return v7756 + v7757;
        }
      }
      return -1;
    }
    function v622() {
      this.startLine = this.line;
      this.startPos = this.col;
      var v15840 = this.currentTokenIndex;
      var v20670 = this.currentTokens;
      var v15841 = v20670.length;
      var v7765 = v15840 == v15841;
      if (v7765) {
        var v15842 = this.line;
        var v20671 = this.lineMap;
        var v15843 = v20671.length;
        var v7764 = v15842 < v15843;
        if (v7764) {
          this.line++;
          this.col = 0;
          this.currentTokenIndex = 0;
          var v7760 = this.tokensByLine;
          var v7761 = this.line;
          this.currentTokens = v7760[v7761];
        } else {
          var v7762 = TypeScript$$16.staticTokens;
          var v15844 = TypeScript$$16.TokenID;
          var v7763 = v15844.EndOfFile;
          return v7762[v7763];
        }
      }
      var v15845 = this.currentTokenIndex;
      var v20672 = this.currentTokens;
      var v15846 = v20672.length;
      var v7774 = v15845 < v15846;
      if (v7774) {
        var v7766 = this.curSavedToken;
        this.prevToken = v7766.tok;
        this.prevSavedToken = this.curSavedToken;
        var v7767 = this.currentTokens;
        var v7768 = this.currentTokenIndex;
        var v20673 = this.currentTokenIndex;
        this.currentTokenIndex = v20673 + 1;
        this.curSavedToken = v7767[v7768];
        var v7769 = this.curSavedToken;
        var curToken = v7769.tok;
        var v7770 = this.curSavedToken;
        this.pos = v7770.limChar;
        var v15847 = this.col;
        var v23733 = this.curSavedToken;
        var v20674 = v23733.limChar;
        var v23734 = this.curSavedToken;
        var v20675 = v23734.minChar;
        var v15848 = v20674 - v20675;
        this.col = v15847 + v15848;
        var v7771 = this.curSavedToken;
        this.startPos = v7771.minChar;
        this.prevLine = this.line;
        return curToken;
      } else {
        var v7772 = TypeScript$$16.staticTokens;
        var v15849 = TypeScript$$16.TokenID;
        var v7773 = v15849.EndOfFile;
        return v7772[v7773];
      }
      return;
    }
    function v621(tok$$3, scanner) {
      var v7775 = this.tokens;
      var v7776 = this.currentToken;
      var v20676 = this.currentToken;
      this.currentToken = v20676 + 1;
      var v15850 = TypeScript$$16.SavedToken;
      var v15851 = scanner.startPos;
      var v15852 = scanner.pos;
      var v26693 = JAM.new(v15850, [tok$$3, v15851, v15852]);
      JAM.set(v7775, v7776, v26693);
      return;
    }
    function v620() {
      this.currentToken = 0;
      return;
    }
    function v619() {
      return this.prevToken;
    }
    function SavedTokens$$1() {
      this.prevToken = null;
      this.curSavedToken = null;
      this.prevSavedToken = null;
      this.prevToken = null;
      this.currentToken = 0;
      var v26694 = new Array;
      this.tokens = v26694;
      this.seenUnicodeChar = false;
      this.seenUnicodeCharInComment = false;
      this.prevLine = 1;
      this.line = 1;
      this.col = 0;
      this.lexState = LexState.Start;
      var v26695 = new Array;
      this.commentStack = v26695;
      this.lineMap = [];
      return;
    }
    var v7777 = SavedTokens$$1.prototype;
    v7777.previousToken = v619;
    var v7778 = SavedTokens$$1.prototype;
    v7778.close = v620;
    var v7779 = SavedTokens$$1.prototype;
    v7779.addToken = v621;
    var v7780 = SavedTokens$$1.prototype;
    v7780.scan = v622;
    var v7781 = SavedTokens$$1.prototype;
    v7781.syncToTok = v623;
    var v7782 = SavedTokens$$1.prototype;
    v7782.lastTokenLimChar = v624;
    var v7783 = SavedTokens$$1.prototype;
    v7783.lastTokenHadNewline = v625;
    var v7784 = SavedTokens$$1.prototype;
    v7784.pushComment = v626;
    var v7785 = SavedTokens$$1.prototype;
    v7785.getComments = v627;
    var v7786 = SavedTokens$$1.prototype;
    v7786.getCommentsForLine = v628;
    var v7787 = SavedTokens$$1.prototype;
    v7787.resetComments = v629;
    var v7788 = SavedTokens$$1.prototype;
    v7788.setSourceText = v630;
    var v7789 = SavedTokens$$1.prototype;
    v7789.setErrorHandler = v631;
    var v7790 = SavedTokens$$1.prototype;
    v7790.getLookAheadToken = v632;
    return SavedTokens$$1;
  }
  function v618() {
    function v617(start$$11, end$$5) {
      var v7791 = JAM.call(this.fetchSegment, this, [start$$11, end$$5], JAM.policy.p1);
      return JAM.call(v7791.substring, v7791, [start$$11, end$$5], JAM.policy.p1);
    }
    function v616(index$$46) {
      var v15853 = index$$46 + 1;
      var v7792 = JAM.call(this.fetchSegment, this, [index$$46, v15853], JAM.policy.p1);
      return JAM.call(v7792.charCodeAt, v7792, [index$$46]);
    }
    function v615(start$$10, end$$4) {
      var v25221 = this.agg;
      var v23735 = v25221.seg1;
      var v20677 = v23735.segmentStart;
      var v15854 = v20677 <= start$$10;
      if (v15854) {
        var v25222 = this.agg;
        var v23736 = v25222.seg1;
        var v20678 = v23736.segmentEnd;
        v15854 = end$$4 <= v20678;
      }
      var v7794 = v15854;
      if (v7794) {
        var v7793 = this.agg;
        return v7793.seg1;
      }
      var v25223 = this.agg;
      var v23737 = v25223.seg2;
      var v20679 = v23737.segmentStart;
      var v15855 = v20679 <= start$$10;
      if (v15855) {
        var v25224 = this.agg;
        var v23738 = v25224.seg1;
        var v20680 = v23738.segmentEnd;
        v15855 = end$$4 <= v20680;
      }
      var v7795 = v15855;
      if (v7795) {
        return this.agg;
      }
      var v7796 = this.agg;
      var prev = v7796.seg1;
      var s$$16 = prev.segmentEnd;
      var v7797 = s$$16 + 512;
      var e$$9 = JAM.call(TypeScript$$16.max, TypeScript$$16, [v7797, end$$4], JAM.policy.p1);
      var v7798 = this.len;
      e$$9 = JAM.call(TypeScript$$16.min, TypeScript$$16, [e$$9, v7798], JAM.policy.p1);
      var v7799 = this.sourceText;
      var src$$1 = JAM.call(v7799.getText, v7799, [s$$16, e$$9], JAM.policy.p1);
      var newSeg = JAM.new(SourceTextSegment, [s$$16, e$$9, src$$1]);
      var v7800 = this.agg;
      v7800.seg2 = prev;
      var v7801 = this.agg;
      v7801.seg1 = newSeg;
      return this.agg;
    }
    function v614(a$$5, b$$4) {
      var v7802;
      var v15856 = a$$5 <= b$$4;
      if (v15856) {
        v7802 = a$$5;
      } else {
        v7802 = b$$4;
      }
      return v7802;
    }
    function v613(a$$4, b$$3) {
      var v7803;
      var v15857 = a$$4 >= b$$3;
      if (v15857) {
        v7803 = a$$4;
      } else {
        v7803 = b$$3;
      }
      return v7803;
    }
    function ScannerTextStream$$1(sourceText$$3) {
      this.sourceText = sourceText$$3;
      var v7804 = ScannerTextStream$$1.emptySegment;
      var v7805 = ScannerTextStream$$1.emptySegment;
      var v26696 = JAM.new(AggerateSourceTextSegment, [v7804, v7805]);
      this.agg = v26696;
      var v7806 = this.sourceText;
      var v26697 = v7806.getLength();
      this.len = v26697;
      return;
    }
    var v7807 = ScannerTextStream$$1;
    var v26698 = JAM.new(SourceTextSegment, [0, 0, ""]);
    v7807.emptySegment = v26698;
    var v7808 = ScannerTextStream$$1.prototype;
    v7808.max = v613;
    var v7809 = ScannerTextStream$$1.prototype;
    v7809.min = v614;
    var v7810 = ScannerTextStream$$1.prototype;
    v7810.fetchSegment = v615;
    var v7811 = ScannerTextStream$$1.prototype;
    v7811.charCodeAt = v616;
    var v7812 = ScannerTextStream$$1.prototype;
    v7812.substring = v617;
    return ScannerTextStream$$1;
  }
  function v612() {
    function v611(start$$9, end$$3) {
      var v23739 = this.seg1;
      var v20681 = v23739.segmentStart;
      var v15858 = v20681 <= start$$9;
      if (v15858) {
        var v23740 = this.seg1;
        var v20682 = v23740.segmentEnd;
        v15858 = end$$3 <= v20682;
      }
      var v7816 = v15858;
      if (v7816) {
        var v15859 = this.seg1;
        var v7813 = v15859.segment;
        var v20683 = this.seg1;
        var v15860 = v20683.segmentStart;
        var v7814 = start$$9 - v15860;
        var v20684 = this.seg1;
        var v15861 = v20684.segmentStart;
        var v7815 = end$$3 - v15861;
        return JAM.call(v7813.substring, v7813, [v7814, v7815], JAM.policy.p1);
      }
      var v20685 = this.seg2;
      var v15862 = v20685.segment;
      var v23741 = this.seg2;
      var v20686 = v23741.segmentStart;
      var v15863 = start$$9 - v20686;
      var v7817 = JAM.call(v15862.substring, v15862, [v15863]);
      var v20687 = this.seg1;
      var v15864 = v20687.segment;
      var v23742 = this.seg1;
      var v20688 = v23742.segmentStart;
      var v15865 = end$$3 - v20688;
      var v7818 = JAM.call(v15864.substring, v15864, [0, v15865], JAM.policy.p1);
      return v7817 + v7818;
    }
    function v610(index$$45) {
      var v23743 = this.seg1;
      var v20689 = v23743.segmentStart;
      var v15866 = v20689 <= index$$45;
      if (v15866) {
        var v23744 = this.seg1;
        var v20690 = v23744.segmentEnd;
        v15866 = index$$45 < v20690;
      }
      var v7821 = v15866;
      if (v7821) {
        var v15867 = this.seg1;
        var v7819 = v15867.segment;
        var v20691 = this.seg1;
        var v15868 = v20691.segmentStart;
        var v7820 = index$$45 - v15868;
        return JAM.call(v7819.charCodeAt, v7819, [v7820]);
      }
      var v15869 = this.seg2;
      var v7822 = v15869.segment;
      var v20692 = this.seg2;
      var v15870 = v20692.segmentStart;
      var v7823 = index$$45 - v15870;
      return JAM.call(v7822.charCodeAt, v7822, [v7823]);
    }
    function AggerateSourceTextSegment$$1(seg1, seg2) {
      this.seg1 = seg1;
      this.seg2 = seg2;
      return;
    }
    var v7824 = AggerateSourceTextSegment$$1.prototype;
    v7824.charCodeAt = v610;
    var v7825 = AggerateSourceTextSegment$$1.prototype;
    v7825.substring = v611;
    return AggerateSourceTextSegment$$1;
  }
  function v609() {
    function v608(start$$8, end$$2) {
      var v7826 = this.segment;
      var v15871 = this.segmentStart;
      var v7827 = start$$8 - v15871;
      var v15872 = this.segmentStart;
      var v7828 = end$$2 - v15872;
      return JAM.call(v7826.substring, v7826, [v7827, v7828], JAM.policy.p1);
    }
    function v607(index$$44) {
      var v7829 = this.segment;
      var v15873 = this.segmentStart;
      var v7830 = index$$44 - v15873;
      return JAM.call(v7829.charCodeAt, v7829, [v7830]);
    }
    function SourceTextSegment$$1(segmentStart, segmentEnd, segment) {
      this.segmentStart = segmentStart;
      this.segmentEnd = segmentEnd;
      this.segment = segment;
      return;
    }
    var v7831 = SourceTextSegment$$1.prototype;
    v7831.charCodeAt = v607;
    var v7832 = SourceTextSegment$$1.prototype;
    v7832.substring = v608;
    return SourceTextSegment$$1;
  }
  function v606() {
    function v605() {
      var v7833 = this.text;
      return v7833.length;
    }
    function v604(start$$7, end$$1) {
      var v7834 = this.text;
      return JAM.call(v7834.substring, v7834, [start$$7, end$$1], JAM.policy.p1);
    }
    function StringSourceText$$1(text$$17) {
      this.text = text$$17;
      return;
    }
    var v7835 = StringSourceText$$1.prototype;
    v7835.getText = v604;
    var v7836 = StringSourceText$$1.prototype;
    v7836.getLength = v605;
    return StringSourceText$$1;
  }
  function v603(CommentStyle$$1) {
    CommentStyle$$1._map = [];
    var v7837 = CommentStyle$$1._map;
    v7837[0] = "Line";
    CommentStyle$$1.Line = 0;
    var v7838 = CommentStyle$$1._map;
    v7838[1] = "Block";
    CommentStyle$$1.Block = 1;
    return;
  }
  function v602(LexMode$$1) {
    LexMode$$1._map = [];
    var v7839 = LexMode$$1._map;
    v7839[0] = "Line";
    LexMode$$1.Line = 0;
    var v7840 = LexMode$$1._map;
    v7840[1] = "File";
    LexMode$$1.File = 1;
    return;
  }
  function v601(LexState$$1) {
    LexState$$1._map = [];
    var v7841 = LexState$$1._map;
    v7841[0] = "Start";
    LexState$$1.Start = 0;
    var v7842 = LexState$$1._map;
    v7842[1] = "InMultilineComment";
    LexState$$1.InMultilineComment = 1;
    var v7843 = LexState$$1._map;
    v7843[2] = "InMultilineSingleQuoteString";
    LexState$$1.InMultilineSingleQuoteString = 2;
    var v7844 = LexState$$1._map;
    v7844[3] = "InMultilineDoubleQuoteString";
    LexState$$1.InMultilineDoubleQuoteString = 3;
    return;
  }
  function v600(NumberScanState$$1) {
    NumberScanState$$1._map = [];
    var v7845 = NumberScanState$$1._map;
    v7845[0] = "Start";
    NumberScanState$$1.Start = 0;
    var v7846 = NumberScanState$$1._map;
    v7846[1] = "InFraction";
    NumberScanState$$1.InFraction = 1;
    var v7847 = NumberScanState$$1._map;
    v7847[2] = "InEmptyFraction";
    NumberScanState$$1.InEmptyFraction = 2;
    var v7848 = NumberScanState$$1._map;
    v7848[3] = "InExponent";
    NumberScanState$$1.InExponent = 3;
    return;
  }
  function LexLookUpUnicodeMap(code$$2, map$$1) {
    var lo = 0;
    var hi = map$$1.length;
    var mid;
    var v15874 = lo + 1;
    var v7852 = v15874 < hi;
    for (;v7852;) {
      var v15875 = hi - lo;
      var v7849 = v15875 / 2;
      mid = lo + v7849;
      var v15876 = mid % 2;
      mid = mid - v15876;
      var v20693 = map$$1[mid];
      var v15877 = v20693 <= code$$2;
      if (v15877) {
        var v23745 = mid + 1;
        var v20694 = map$$1[v23745];
        v15877 = code$$2 <= v20694;
      }
      var v7850 = v15877;
      if (v7850) {
        return true;
      }
      var v15878 = map$$1[mid];
      var v7851 = code$$2 < v15878;
      if (v7851) {
        hi = mid;
      } else {
        lo = mid + 2;
      }
      var v15879 = lo + 1;
      v7852 = v15879 < hi;
    }
    return false;
  }
  function LexIsUnicodeDigit(code$$3) {
    var v15880 = TypeScript$$16.codeGenTarget;
    var v20695 = TypeScript$$16.CodeGenTarget;
    var v15881 = v20695.ES3;
    var v7853 = v15880 == v15881;
    if (v7853) {
      return LexLookUpUnicodeMap(code$$3, unicodeES3IdCont);
    } else {
      return LexLookUpUnicodeMap(code$$3, unicodeES5IdCont);
    }
    return;
  }
  function LexIsUnicodeIdStart(code$$4) {
    var v15882 = TypeScript$$16.codeGenTarget;
    var v20696 = TypeScript$$16.CodeGenTarget;
    var v15883 = v20696.ES3;
    var v7854 = v15882 == v15883;
    if (v7854) {
      return LexLookUpUnicodeMap(code$$4, unicodeES3IdStart);
    } else {
      return LexLookUpUnicodeMap(code$$4, unicodeES5IdStart);
    }
    return;
  }
  function LexInitialize() {
    TypeScript$$16.initializeStaticTokens();
    var v7855 = TypeScript$$16.LexCodeLPR;
    var v15884 = TypeScript$$16.staticTokens;
    var v20697 = TypeScript$$16.TokenID;
    var v15885 = v20697.OpenParen;
    JAM.set(autoToken, v7855, v15884[v15885]);
    var v7856 = TypeScript$$16.LexCodeRPR;
    var v15886 = TypeScript$$16.staticTokens;
    var v20698 = TypeScript$$16.TokenID;
    var v15887 = v20698.CloseParen;
    JAM.set(autoToken, v7856, v15886[v15887]);
    var v7857 = TypeScript$$16.LexCodeCMA;
    var v15888 = TypeScript$$16.staticTokens;
    var v20699 = TypeScript$$16.TokenID;
    var v15889 = v20699.Comma;
    JAM.set(autoToken, v7857, v15888[v15889]);
    var v7858 = TypeScript$$16.LexCodeSMC;
    var v15890 = TypeScript$$16.staticTokens;
    var v20700 = TypeScript$$16.TokenID;
    var v15891 = v20700.Semicolon;
    JAM.set(autoToken, v7858, v15890[v15891]);
    var v7859 = TypeScript$$16.LexCodeLBR;
    var v15892 = TypeScript$$16.staticTokens;
    var v20701 = TypeScript$$16.TokenID;
    var v15893 = v20701.OpenBracket;
    JAM.set(autoToken, v7859, v15892[v15893]);
    var v7860 = TypeScript$$16.LexCodeRBR;
    var v15894 = TypeScript$$16.staticTokens;
    var v20702 = TypeScript$$16.TokenID;
    var v15895 = v20702.CloseBracket;
    JAM.set(autoToken, v7860, v15894[v15895]);
    var v7861 = TypeScript$$16.LexCodeTIL;
    var v15896 = TypeScript$$16.staticTokens;
    var v20703 = TypeScript$$16.TokenID;
    var v15897 = v20703.Tilde;
    JAM.set(autoToken, v7861, v15896[v15897]);
    var v7862 = TypeScript$$16.LexCodeQUE;
    var v15898 = TypeScript$$16.staticTokens;
    var v20704 = TypeScript$$16.TokenID;
    var v15899 = v20704.Question;
    JAM.set(autoToken, v7862, v15898[v15899]);
    var v7863 = TypeScript$$16.LexCodeLC;
    var v15900 = TypeScript$$16.staticTokens;
    var v20705 = TypeScript$$16.TokenID;
    var v15901 = v20705.OpenBrace;
    JAM.set(autoToken, v7863, v15900[v15901]);
    var v7864 = TypeScript$$16.LexCodeRC;
    var v15902 = TypeScript$$16.staticTokens;
    var v20706 = TypeScript$$16.TokenID;
    var v15903 = v20706.CloseBrace;
    JAM.set(autoToken, v7864, v15902[v15903]);
    var v7865 = TypeScript$$16.LexCodeCOL;
    var v15904 = TypeScript$$16.staticTokens;
    var v20707 = TypeScript$$16.TokenID;
    var v15905 = v20707.Colon;
    JAM.set(autoToken, v7865, v15904[v15905]);
    var v7866 = TypeScript$$16;
    var v15906 = TypeScript$$16.StringHashTable;
    var v26699 = new v15906;
    v7866.LexKeywordTable = v26699;
    var i$$53;
    var v15907 = TypeScript$$16.TokenID;
    var v7870 = v15907._map;
    for (i$$53 in v7870) {
      var v20708 = TypeScript$$16.TokenID;
      var v15908 = v20708.LimKeyword;
      var v7869 = i$$53 <= v15908;
      if (v7869) {
        var v7867 = TypeScript$$16.LexKeywordTable;
        var v23746 = TypeScript$$16.TokenID;
        var v20709 = v23746._map;
        var v15909 = v20709[i$$53];
        var v7868 = v15909.toLowerCase();
        JAM.call(v7867.add, v7867, [v7868, i$$53], JAM.policy.p1);
      }
    }
    var j$$6 = 0;
    var v15910 = TypeScript$$16.LexCodeASCIIChars;
    var v7872 = j$$6 < v15910;
    for (;v7872;) {
      var v7871 = LexIsIdentifierStartChar(j$$6);
      if (v7871) {
        lexIdStartTable[j$$6] = true;
      } else {
        lexIdStartTable[j$$6] = false;
      }
      j$$6++;
      var v15911 = TypeScript$$16.LexCodeASCIIChars;
      v7872 = j$$6 < v15911;
    }
    return;
  }
  function LexAdjustIndent(code$$5, indentAmt) {
    var v23747 = TypeScript$$16.LexCodeLBR;
    var v20710 = code$$5 == v23747;
    var v23749 = !v20710;
    if (v23749) {
      var v23748 = TypeScript$$16.LexCodeLC;
      v20710 = code$$5 == v23748;
    }
    var v15912 = v20710;
    var v20712 = !v15912;
    if (v20712) {
      var v20711 = TypeScript$$16.LexCodeLPR;
      v15912 = code$$5 == v20711;
    }
    var v7874 = v15912;
    if (v7874) {
      return indentAmt + 1;
    } else {
      var v23750 = TypeScript$$16.LexCodeRBR;
      var v20713 = code$$5 == v23750;
      var v23752 = !v20713;
      if (v23752) {
        var v23751 = TypeScript$$16.LexCodeRC;
        v20713 = code$$5 == v23751;
      }
      var v15913 = v20713;
      var v20715 = !v15913;
      if (v20715) {
        var v20714 = TypeScript$$16.LexCodeRPR;
        v15913 = code$$5 == v20714;
      }
      var v7873 = v15913;
      if (v7873) {
        return indentAmt - 1;
      } else {
        return indentAmt;
      }
    }
    return;
  }
  function LexIsIdentifierStartChar(code$$6) {
    var v23753 = code$$6 >= 97;
    if (v23753) {
      v23753 = code$$6 <= 122;
    }
    var v20716 = v23753;
    var v23755 = !v20716;
    if (v23755) {
      var v23754 = code$$6 >= 65;
      if (v23754) {
        v23754 = code$$6 <= 90;
      }
      v20716 = v23754;
    }
    var v15914 = v20716;
    var v20718 = !v15914;
    if (v20718) {
      var v20717 = TypeScript$$16.LexCodeDollar;
      v15914 = code$$6 == v20717;
    }
    var v7875 = v15914;
    var v15916 = !v7875;
    if (v15916) {
      var v15915 = TypeScript$$16.LexCodeUnderscore;
      v7875 = code$$6 == v15915;
    }
    return v7875;
  }
  function LexIsDigit(code$$7) {
    var v7876 = code$$7 >= 48;
    if (v7876) {
      v7876 = code$$7 <= 57;
    }
    return v7876;
  }
  function LexIsIdentifierChar(code$$8) {
    var v7877 = lexIdStartTable[code$$8];
    var v15917 = !v7877;
    if (v15917) {
      v7877 = LexIsDigit(code$$8);
    }
    return v7877;
  }
  function LexMatchingOpen(code$$9) {
    var v15918 = TypeScript$$16.LexCodeRBR;
    var v7880 = code$$9 == v15918;
    if (v7880) {
      return TypeScript$$16.LexCodeLBR;
    } else {
      var v15919 = TypeScript$$16.LexCodeRC;
      var v7879 = code$$9 == v15919;
      if (v7879) {
        return TypeScript$$16.LexCodeLC;
      } else {
        var v15920 = TypeScript$$16.LexCodeRPR;
        var v7878 = code$$9 == v15920;
        if (v7878) {
          return TypeScript$$16.LexCodeLPR;
        } else {
          return 0;
        }
      }
    }
    return;
  }
  function convertTokToIDName(tok) {
    return convertTokToIDBase(tok, true, false);
  }
  function convertTokToID(tok$$1, strictMode) {
    return convertTokToIDBase(tok$$1, false, strictMode);
  }
  function convertTokToIDBase(tok$$2, identifierName, strictMode$$1) {
    var v15921 = tok$$2.tokenId;
    var v20719 = TypeScript$$16.TokenID;
    var v15922 = v20719.LimKeyword;
    var v7886 = v15921 <= v15922;
    if (v7886) {
      var v7881 = tok$$2.tokenId;
      var tokInfo = JAM.call(TypeScript$$16.lookupToken, TypeScript$$16, [v7881]);
      var v7885 = tokInfo != undefined;
      if (v7885) {
        var v15923 = TypeScript$$16.Reservation;
        var v7882 = v15923.Javascript;
        var v15924 = TypeScript$$16.Reservation;
        var v7883 = v15924.JavascriptFuture;
        var resFlags = v7882 | v7883;
        if (strictMode$$1) {
          var v20720 = TypeScript$$16.Reservation;
          var v15925 = v20720.JavascriptFutureStrict;
          resFlags = resFlags | v15925;
        }
        var v15926 = identifierName;
        var v20722 = !v15926;
        if (v20722) {
          var v23756 = tokInfo.reservation;
          var v20721 = JAM.call(TypeScript$$16.hasFlag, TypeScript$$16, [v23756, resFlags], JAM.policy.p1);
          v15926 = !v20721;
        }
        var v7884 = v15926;
        if (v7884) {
          return true;
        }
      } else {
        return false;
      }
    } else {
      return false;
    }
    return;
  }
  function getLineNumberFromPosition(lineMap$$1, position$$2) {
    var v7887 = position$$2 === -1;
    if (v7887) {
      return 0;
    }
    var min$$2 = 0;
    var v7888 = lineMap$$1.length;
    var max$$1 = v7888 - 1;
    var v7892 = min$$2 < max$$1;
    for (;v7892;) {
      var v7889 = min$$2 + max$$1;
      var med = v7889 >> 1;
      var v15927 = lineMap$$1[med];
      var v7891 = position$$2 < v15927;
      if (v7891) {
        max$$1 = med - 1;
      } else {
        var v20723 = med + 1;
        var v15928 = lineMap$$1[v20723];
        var v7890 = position$$2 < v15928;
        if (v7890) {
          min$$2 = max$$1 = med;
        } else {
          min$$2 = med + 1;
        }
      }
      v7892 = min$$2 < max$$1;
    }
    return min$$2;
  }
  function getSourceLineColFromMap(lineCol$$5, minChar$$29, lineMap$$2) {
    var line$$5 = getLineNumberFromPosition(lineMap$$2, minChar$$29);
    var v7894 = line$$5 > 0;
    if (v7894) {
      lineCol$$5.line = line$$5;
      var v7893 = lineMap$$2[line$$5];
      lineCol$$5.col = minChar$$29 - v7893;
    }
    return;
  }
  function getLineColumnFromPosition(script$$9, position$$3) {
    var result$$10 = {line:-1, col:-1};
    var v15929 = script$$9.locationInfo;
    var v7895 = v15929.lineMap;
    getSourceLineColFromMap(result$$10, position$$3, v7895);
    var v15930 = result$$10.col;
    var v7896 = v15930 >= 0;
    if (v7896) {
      result$$10.col++;
    }
    return result$$10;
  }
  function getPositionFromLineColumn(script$$10, line$$6, column) {
    var v20724 = script$$10.locationInfo;
    var v15931 = v20724.lineMap;
    var v7897 = v15931[line$$6];
    var v7898 = column - 1;
    return v7897 + v7898;
  }
  function isPrimitiveTypeToken(token$$5) {
    var v7899 = token$$5.tokenId;
    switch(v7899) {
      case TypeScript$$16.TokenID.Any:
      ;
      case TypeScript$$16.TokenID.Bool:
      ;
      case TypeScript$$16.TokenID.Number:
      ;
      case TypeScript$$16.TokenID.String:
        return true;
    }
    return false;
  }
  function isModifier(token$$6) {
    var v7900 = token$$6.tokenId;
    switch(v7900) {
      case TypeScript$$16.TokenID.Public:
      ;
      case TypeScript$$16.TokenID.Private:
      ;
      case TypeScript$$16.TokenID.Static:
        return true;
    }
    return false;
  }
  TypeScript$$16.LexEOF = -1;
  TypeScript$$16.LexCodeNWL = 10;
  TypeScript$$16.LexCodeRET = 13;
  TypeScript$$16.LexCodeLS = 8232;
  TypeScript$$16.LexCodePS = 8233;
  TypeScript$$16.LexCodeTAB = 9;
  TypeScript$$16.LexCodeVTAB = 11;
  var v7901 = TypeScript$$16;
  var v26700 = JAM.call("e".charCodeAt, "e", [0]);
  v7901.LexCode_e = v26700;
  var v7902 = TypeScript$$16;
  var v26701 = JAM.call("E".charCodeAt, "E", [0]);
  v7902.LexCode_E = v26701;
  var v7903 = TypeScript$$16;
  var v26702 = JAM.call("x".charCodeAt, "x", [0]);
  v7903.LexCode_x = v26702;
  var v7904 = TypeScript$$16;
  var v26703 = JAM.call("X".charCodeAt, "X", [0]);
  v7904.LexCode_X = v26703;
  var v7905 = TypeScript$$16;
  var v26704 = JAM.call("a".charCodeAt, "a", [0]);
  v7905.LexCode_a = v26704;
  var v7906 = TypeScript$$16;
  var v26705 = JAM.call("A".charCodeAt, "A", [0]);
  v7906.LexCode_A = v26705;
  var v7907 = TypeScript$$16;
  var v26706 = JAM.call("f".charCodeAt, "f", [0]);
  v7907.LexCode_f = v26706;
  var v7908 = TypeScript$$16;
  var v26707 = JAM.call("F".charCodeAt, "F", [0]);
  v7908.LexCode_F = v26707;
  var v7909 = TypeScript$$16;
  var v26708 = JAM.call("g".charCodeAt, "g", [0]);
  v7909.LexCode_g = v26708;
  var v7910 = TypeScript$$16;
  var v26709 = JAM.call("m".charCodeAt, "m", [0]);
  v7910.LexCode_m = v26709;
  var v7911 = TypeScript$$16;
  var v26710 = JAM.call("i".charCodeAt, "i", [0]);
  v7911.LexCode_i = v26710;
  var v7912 = TypeScript$$16;
  var v26711 = JAM.call("u".charCodeAt, "u", [0]);
  v7912.LexCode_u = v26711;
  var v7913 = TypeScript$$16;
  var v26712 = JAM.call("0".charCodeAt, "0", [0]);
  v7913.LexCode_0 = v26712;
  var v7914 = TypeScript$$16;
  var v26713 = JAM.call("9".charCodeAt, "9", [0]);
  v7914.LexCode_9 = v26713;
  var v7915 = TypeScript$$16;
  var v26714 = JAM.call("8".charCodeAt, "8", [0]);
  v7915.LexCode_8 = v26714;
  var v7916 = TypeScript$$16;
  var v26715 = JAM.call("7".charCodeAt, "7", [0]);
  v7916.LexCode_7 = v26715;
  var v7917 = TypeScript$$16;
  var v26716 = JAM.call("\\".charCodeAt, "\\", [0]);
  v7917.LexCodeBSL = v26716;
  var v7918 = TypeScript$$16;
  var v26717 = JAM.call("#".charCodeAt, "#", [0]);
  v7918.LexCodeSHP = v26717;
  var v7919 = TypeScript$$16;
  var v26718 = JAM.call("!".charCodeAt, "!", [0]);
  v7919.LexCodeBNG = v26718;
  var v7920 = TypeScript$$16;
  var v26719 = JAM.call('"'.charCodeAt, '"', [0]);
  v7920.LexCodeQUO = v26719;
  var v7921 = TypeScript$$16;
  var v26720 = JAM.call("'".charCodeAt, "'", [0]);
  v7921.LexCodeAPO = v26720;
  var v7922 = TypeScript$$16;
  var v26721 = JAM.call("%".charCodeAt, "%", [0]);
  v7922.LexCodePCT = v26721;
  var v7923 = TypeScript$$16;
  var v26722 = JAM.call("&".charCodeAt, "&", [0]);
  v7923.LexCodeAMP = v26722;
  var v7924 = TypeScript$$16;
  var v26723 = JAM.call("(".charCodeAt, "(", [0]);
  v7924.LexCodeLPR = v26723;
  var v7925 = TypeScript$$16;
  var v26724 = JAM.call(")".charCodeAt, ")", [0]);
  v7925.LexCodeRPR = v26724;
  var v7926 = TypeScript$$16;
  var v26725 = JAM.call("+".charCodeAt, "+", [0]);
  v7926.LexCodePLS = v26725;
  var v7927 = TypeScript$$16;
  var v26726 = JAM.call("-".charCodeAt, "-", [0]);
  v7927.LexCodeMIN = v26726;
  var v7928 = TypeScript$$16;
  var v26727 = JAM.call("*".charCodeAt, "*", [0]);
  v7928.LexCodeMUL = v26727;
  var v7929 = TypeScript$$16;
  var v26728 = JAM.call("/".charCodeAt, "/", [0]);
  v7929.LexCodeSLH = v26728;
  var v7930 = TypeScript$$16;
  var v26729 = JAM.call("^".charCodeAt, "^", [0]);
  v7930.LexCodeXOR = v26729;
  var v7931 = TypeScript$$16;
  var v26730 = JAM.call(",".charCodeAt, ",", [0]);
  v7931.LexCodeCMA = v26730;
  var v7932 = TypeScript$$16;
  var v26731 = JAM.call(".".charCodeAt, ".", [0]);
  v7932.LexCodeDOT = v26731;
  var v7933 = TypeScript$$16;
  var v26732 = JAM.call("<".charCodeAt, "<", [0]);
  v7933.LexCodeLT = v26732;
  var v7934 = TypeScript$$16;
  var v26733 = JAM.call("=".charCodeAt, "=", [0]);
  v7934.LexCodeEQ = v26733;
  var v7935 = TypeScript$$16;
  var v26734 = JAM.call(">".charCodeAt, ">", [0]);
  v7935.LexCodeGT = v26734;
  var v7936 = TypeScript$$16;
  var v26735 = JAM.call("?".charCodeAt, "?", [0]);
  v7936.LexCodeQUE = v26735;
  var v7937 = TypeScript$$16;
  var v26736 = JAM.call("[".charCodeAt, "[", [0]);
  v7937.LexCodeLBR = v26736;
  var v7938 = TypeScript$$16;
  var v26737 = JAM.call("]".charCodeAt, "]", [0]);
  v7938.LexCodeRBR = v26737;
  var v7939 = TypeScript$$16;
  var v26738 = JAM.call("_".charCodeAt, "_", [0]);
  v7939.LexCodeUSC = v26738;
  var v7940 = TypeScript$$16;
  var v26739 = JAM.call("{".charCodeAt, "{", [0]);
  v7940.LexCodeLC = v26739;
  var v7941 = TypeScript$$16;
  var v26740 = JAM.call("}".charCodeAt, "}", [0]);
  v7941.LexCodeRC = v26740;
  var v7942 = TypeScript$$16;
  var v26741 = JAM.call("|".charCodeAt, "|", [0]);
  v7942.LexCodeBAR = v26741;
  var v7943 = TypeScript$$16;
  var v26742 = JAM.call("~".charCodeAt, "~", [0]);
  v7943.LexCodeTIL = v26742;
  var v7944 = TypeScript$$16;
  var v26743 = JAM.call(":".charCodeAt, ":", [0]);
  v7944.LexCodeCOL = v26743;
  var v7945 = TypeScript$$16;
  var v26744 = JAM.call(";".charCodeAt, ";", [0]);
  v7945.LexCodeSMC = v26744;
  var v7946 = TypeScript$$16;
  var v26745 = JAM.call("_".charCodeAt, "_", [0]);
  v7946.LexCodeUnderscore = v26745;
  var v7947 = TypeScript$$16;
  var v26746 = JAM.call("$".charCodeAt, "$", [0]);
  v7947.LexCodeDollar = v26746;
  TypeScript$$16.LexCodeSpace = 32;
  var v7948 = TypeScript$$16;
  var v26747 = JAM.call("@".charCodeAt, "@", [0]);
  v7948.LexCodeAtSign = v26747;
  TypeScript$$16.LexCodeASCIIChars = 128;
  TypeScript$$16.LexKeywordTable = undefined;
  var v7949 = TypeScript$$16.LexCodeASCIIChars;
  var autoToken = new Array(v7949);
  var v7950 = TypeScript$$16.LexCodeASCIIChars;
  var lexIdStartTable = new Array(v7950);
  var v27111 = [170, 170, 181, 181, 186, 186, 192, 214, 216, 246, 248, 543, 546, 563, 592, 685, 688, 696, 699, 705, 720, 721, 736, 740, 750, 750, 890, 890, 902, 902, 904, 906, 908, 908, 910, 929, 931, 974, 976, 983, 986, 1011, 1024, 1153, 1164, 1220, 1223, 1224, 1227, 1228, 1232, 1269, 1272, 1273, 1329, 1366, 1369, 1369, 1377, 1415, 1488, 1514, 1520, 1522, 1569, 1594, 1600, 1610, 1649, 1747, 1749, 1749, 1765, 1766, 1786, 1788, 1808, 1808, 1810, 1836, 1920, 1957, 2309, 2361, 2365, 2365, 2384, 2384, 
  2392, 2401, 2437, 2444, 2447, 2448, 2451, 2472, 2474, 2480, 2482, 2482, 2486, 2489, 2524, 2525, 2527, 2529, 2544, 2545, 2565, 2570, 2575, 2576, 2579, 2600, 2602, 2608, 2610, 2611, 2613, 2614, 2616, 2617, 2649, 2652, 2654, 2654, 2674, 2676, 2693, 2699, 2701, 2701, 2703, 2705, 2707, 2728, 2730, 2736, 2738, 2739, 2741, 2745, 2749, 2749, 2768, 2768, 2784, 2784, 2821, 2828, 2831, 2832, 2835, 2856, 2858, 2864, 2866, 2867, 2870, 2873, 2877, 2877, 2908, 2909, 2911, 2913, 2949, 2954, 2958, 2960, 2962, 2965, 
  2969, 2970, 2972, 2972, 2974, 2975, 2979, 2980, 2984, 2986, 2990, 2997, 2999, 3001, 3077, 3084, 3086, 3088, 3090, 3112, 3114, 3123, 3125, 3129, 3168, 3169, 3205, 3212, 3214, 3216, 3218, 3240, 3242, 3251, 3253, 3257, 3294, 3294, 3296, 3297, 3333, 3340, 3342, 3344, 3346, 3368, 3370, 3385, 3424, 3425, 3461, 3478, 3482, 3505, 3507, 3515, 3517, 3517, 3520, 3526, 3585, 3632, 3634, 3635, 3648, 3654, 3713, 3714, 3716, 3716, 3719, 3720, 3722, 3722, 3725, 3725, 3732, 3735, 3737, 3743, 3745, 3747, 3749, 3749, 
  3751, 3751, 3754, 3755, 3757, 3760, 3762, 3763, 3773, 3773, 3776, 3780, 3782, 3782, 3804, 3805, 3840, 3840, 3904, 3911, 3913, 3946, 3976, 3979, 4096, 4129, 4131, 4135, 4137, 4138, 4176, 4181, 4256, 4293, 4304, 4342, 4352, 4441, 4447, 4514, 4520, 4601, 4608, 4614, 4616, 4678, 4680, 4680, 4682, 4685, 4688, 4694, 4696, 4696, 4698, 4701, 4704, 4742, 4744, 4744, 4746, 4749, 4752, 4782, 4784, 4784, 4786, 4789, 4792, 4798, 4800, 4800, 4802, 4805, 4808, 4814, 4816, 4822, 4824, 4846, 4848, 4878, 4880, 4880, 
  4882, 4885, 4888, 4894, 4896, 4934, 4936, 4954, 5024, 5108, 5121, 5740, 5743, 5750, 5761, 5786, 5792, 5866, 6016, 6067, 6176, 6263, 6272, 6312, 7680, 7835, 7840, 7929, 7936, 7957, 7960, 7965, 7968, 8005, 8008, 8013, 8016, 8023, 8025, 8025, 8027, 8027, 8029, 8029, 8031, 8061, 8064, 8116, 8118, 8124, 8126, 8126, 8130, 8132, 8134, 8140, 8144, 8147, 8150, 8155, 8160, 8172, 8178, 8180, 8182, 8188, 8319, 8319, 8450, 8450, 8455, 8455, 8458, 8467, 8469, 8469, 8473, 8477, 8484, 8484, 8486, 8486, 8488, 8488, 
  8490, 8493, 8495, 8497, 8499, 8505, 8544, 8579, 12293, 12295, 12321, 12329, 12337, 12341, 12344, 12346, 12353, 12436, 12445, 12446, 12449, 12538, 12540, 12542, 12549, 12588, 12593, 12686, 12704, 12727, 13312, 13312, 19893, 19893, 19968, 19968, 40869, 40869, 40960, 42124, 44032, 44032, 55203, 55203, 63744, 64045, 64256, 64262, 64275, 64279, 64285, 64285, 64287, 64296, 64298, 64310, 64312, 64316, 64318, 64318, 64320, 64321, 64323, 64324, 64326, 64433, 64467, 64829, 64848, 64911, 64914, 64967, 65008, 
  65019, 65136, 65138];
  var v27112 = [65140, 65140, 65142, 65276, 65313, 65338, 65345, 65370, 65382, 65470, 65474, 65479, 65482, 65487, 65490, 65495, 65498, 65500];
  var unicodeES3IdStart = v27111.concat(v27112);
  var unicodeES3IdCont = [768, 846, 864, 866, 1155, 1158, 1425, 1441, 1443, 1465, 1467, 1469, 1471, 1471, 1473, 1474, 1476, 1476, 1611, 1621, 1632, 1641, 1648, 1648, 1750, 1756, 1759, 1764, 1767, 1768, 1770, 1773, 1776, 1785, 1809, 1809, 1840, 1866, 1958, 1968, 2305, 2307, 2364, 2364, 2366, 2381, 2385, 2388, 2402, 2403, 2406, 2415, 2433, 2435, 2492, 2492, 2494, 2500, 2503, 2504, 2507, 2509, 2519, 2519, 2530, 2531, 2534, 2543, 2562, 2562, 2620, 2620, 2622, 2626, 2631, 2632, 2635, 2637, 2662, 2673, 
  2689, 2691, 2748, 2748, 2750, 2757, 2759, 2761, 2763, 2765, 2790, 2799, 2817, 2819, 2876, 2876, 2878, 2883, 2887, 2888, 2891, 2893, 2902, 2903, 2918, 2927, 2946, 2947, 3006, 3010, 3014, 3016, 3018, 3021, 3031, 3031, 3047, 3055, 3073, 3075, 3134, 3140, 3142, 3144, 3146, 3149, 3157, 3158, 3174, 3183, 3202, 3203, 3262, 3268, 3270, 3272, 3274, 3277, 3285, 3286, 3302, 3311, 3330, 3331, 3390, 3395, 3398, 3400, 3402, 3405, 3415, 3415, 3430, 3439, 3458, 3459, 3530, 3530, 3535, 3540, 3542, 3542, 3544, 3551, 
  3570, 3571, 3633, 3633, 3636, 3642, 3655, 3662, 3664, 3673, 3761, 3761, 3764, 3769, 3771, 3772, 3784, 3789, 3792, 3801, 3864, 3865, 3872, 3881, 3893, 3893, 3895, 3895, 3897, 3897, 3902, 3903, 3953, 3972, 3974, 3975, 3984, 3991, 3993, 4028, 4038, 4038, 4140, 4146, 4150, 4153, 4160, 4169, 4182, 4185, 4969, 4977, 6068, 6099, 6112, 6121, 6160, 6169, 6313, 6313, 8255, 8256, 8400, 8412, 8417, 8417, 12330, 12335, 12441, 12442, 12539, 12539, 64286, 64286, 65056, 65059, 65075, 65076, 65101, 65103, 65296, 
  65305, 65343, 65343, 65381, 65381];
  var v27113 = [170, 170, 181, 181, 186, 186, 192, 214, 216, 246, 248, 705, 710, 721, 736, 740, 748, 748, 750, 750, 880, 884, 886, 887, 890, 893, 902, 902, 904, 906, 908, 908, 910, 929, 931, 1013, 1015, 1153, 1162, 1319, 1329, 1366, 1369, 1369, 1377, 1415, 1488, 1514, 1520, 1522, 1568, 1610, 1646, 1647, 1649, 1747, 1749, 1749, 1765, 1766, 1774, 1775, 1786, 1788, 1791, 1791, 1808, 1808, 1810, 1839, 1869, 1957, 1969, 1969, 1994, 2026, 2036, 2037, 2042, 2042, 2048, 2069, 2074, 2074, 2084, 2084, 2088, 
  2088, 2112, 2136, 2208, 2208, 2210, 2220, 2308, 2361, 2365, 2365, 2384, 2384, 2392, 2401, 2417, 2423, 2425, 2431, 2437, 2444, 2447, 2448, 2451, 2472, 2474, 2480, 2482, 2482, 2486, 2489, 2493, 2493, 2510, 2510, 2524, 2525, 2527, 2529, 2544, 2545, 2565, 2570, 2575, 2576, 2579, 2600, 2602, 2608, 2610, 2611, 2613, 2614, 2616, 2617, 2649, 2652, 2654, 2654, 2674, 2676, 2693, 2701, 2703, 2705, 2707, 2728, 2730, 2736, 2738, 2739, 2741, 2745, 2749, 2749, 2768, 2768, 2784, 2785, 2821, 2828, 2831, 2832, 2835, 
  2856, 2858, 2864, 2866, 2867, 2869, 2873, 2877, 2877, 2908, 2909, 2911, 2913, 2929, 2929, 2947, 2947, 2949, 2954, 2958, 2960, 2962, 2965, 2969, 2970, 2972, 2972, 2974, 2975, 2979, 2980, 2984, 2986, 2990, 3001, 3024, 3024, 3077, 3084, 3086, 3088, 3090, 3112, 3114, 3123, 3125, 3129, 3133, 3133, 3160, 3161, 3168, 3169, 3205, 3212, 3214, 3216, 3218, 3240, 3242, 3251, 3253, 3257, 3261, 3261, 3294, 3294, 3296, 3297, 3313, 3314, 3333, 3340, 3342, 3344, 3346, 3386, 3389, 3389, 3406, 3406, 3424, 3425, 3450, 
  3455, 3461, 3478, 3482, 3505, 3507, 3515, 3517, 3517, 3520, 3526, 3585, 3632, 3634, 3635, 3648, 3654, 3713, 3714, 3716, 3716, 3719, 3720, 3722, 3722, 3725, 3725, 3732, 3735, 3737, 3743, 3745, 3747, 3749, 3749, 3751, 3751, 3754, 3755, 3757, 3760, 3762, 3763, 3773, 3773, 3776, 3780, 3782, 3782, 3804, 3807, 3840, 3840, 3904, 3911, 3913, 3948, 3976, 3980, 4096, 4138, 4159, 4159, 4176, 4181, 4186, 4189, 4193, 4193, 4197, 4198, 4206, 4208, 4213, 4225, 4238, 4238, 4256, 4293, 4295, 4295, 4301, 4301, 4304, 
  4346, 4348, 4680, 4682, 4685, 4688, 4694, 4696, 4696, 4698, 4701, 4704, 4744, 4746, 4749, 4752, 4784, 4786, 4789, 4792, 4798, 4800, 4800, 4802, 4805, 4808, 4822, 4824, 4880, 4882, 4885, 4888, 4954, 4992, 5007, 5024, 5108, 5121, 5740, 5743, 5759, 5761, 5786, 5792, 5866, 5870, 5872, 5888, 5900, 5902, 5905, 5920, 5937, 5952, 5969, 5984, 5996, 5998, 6E3, 6016, 6067, 6103, 6103, 6108, 6108, 6176, 6263, 6272, 6312, 6314, 6314, 6320, 6389, 6400, 6428, 6480, 6509, 6512, 6516, 6528, 6571, 6593, 6599, 6656, 
  6678, 6688, 6740, 6823, 6823, 6917, 6963, 6981, 6987, 7043, 7072, 7086, 7087, 7098, 7141, 7168, 7203, 7245, 7247, 7258, 7293, 7401, 7404, 7406, 7409, 7413, 7414, 7424, 7615, 7680, 7957, 7960, 7965, 7968, 8005, 8008, 8013, 8016, 8023, 8025, 8025, 8027, 8027, 8029, 8029, 8031, 8061, 8064, 8116, 8118, 8124, 8126, 8126, 8130, 8132, 8134, 8140, 8144, 8147, 8150, 8155, 8160, 8172, 8178, 8180, 8182, 8188, 8305, 8305, 8319, 8319, 8336, 8348, 8450, 8450, 8455, 8455];
  var v27114 = [8458, 8467, 8469, 8469, 8473, 8477, 8484, 8484, 8486, 8486, 8488, 8488, 8490, 8493, 8495, 8505, 8508, 8511, 8517, 8521, 8526, 8526, 8544, 8584, 11264, 11310, 11312, 11358, 11360, 11492, 11499, 11502, 11506, 11507, 11520, 11557, 11559, 11559, 11565, 11565, 11568, 11623, 11631, 11631, 11648, 11670, 11680, 11686, 11688, 11694, 11696, 11702, 11704, 11710, 11712, 11718, 11720, 11726, 11728, 11734, 11736, 11742, 11823, 11823, 12293, 12295, 12321, 12329, 12337, 12341, 12344, 12348, 12353, 
  12438, 12445, 12447, 12449, 12538, 12540, 12543, 12549, 12589, 12593, 12686, 12704, 12730, 12784, 12799, 13312, 13312, 19893, 19893, 19968, 19968, 40908, 40908, 40960, 42124, 42192, 42237, 42240, 42508, 42512, 42527, 42538, 42539, 42560, 42606, 42623, 42647, 42656, 42735, 42775, 42783, 42786, 42888, 42891, 42894, 42896, 42899, 42912, 42922, 43E3, 43009, 43011, 43013, 43015, 43018, 43020, 43042, 43072, 43123, 43138, 43187, 43250, 43255, 43259, 43259, 43274, 43301, 43312, 43334, 43360, 43388, 43396, 
  43442, 43471, 43471, 43520, 43560, 43584, 43586, 43588, 43595, 43616, 43638, 43642, 43642, 43648, 43695, 43697, 43697, 43701, 43702, 43705, 43709, 43712, 43712, 43714, 43714, 43739, 43741, 43744, 43754, 43762, 43764, 43777, 43782, 43785, 43790, 43793, 43798, 43808, 43814, 43816, 43822, 43968, 44002, 44032, 44032, 55203, 55203, 55216, 55238, 55243, 55291, 63744, 64109, 64112, 64217, 64256, 64262, 64275, 64279, 64285, 64285, 64287, 64296, 64298, 64310, 64312, 64316, 64318, 64318, 64320, 64321, 64323, 
  64324, 64326, 64433, 64467, 64829, 64848, 64911, 64914, 64967, 65008, 65019, 65136, 65140, 65142, 65276, 65313, 65338, 65345, 65370, 65382, 65470, 65474, 65479, 65482, 65487, 65490, 65495, 65498, 65500];
  var unicodeES5IdStart = v27113.concat(v27114);
  var unicodeES5IdCont = [768, 879, 1155, 1159, 1425, 1469, 1471, 1471, 1473, 1474, 1476, 1477, 1479, 1479, 1552, 1562, 1611, 1641, 1648, 1648, 1750, 1756, 1759, 1764, 1767, 1768, 1770, 1773, 1776, 1785, 1809, 1809, 1840, 1866, 1958, 1968, 1984, 1993, 2027, 2035, 2070, 2073, 2075, 2083, 2085, 2087, 2089, 2093, 2137, 2139, 2276, 2302, 2304, 2307, 2362, 2364, 2366, 2383, 2385, 2391, 2402, 2403, 2406, 2415, 2433, 2435, 2492, 2492, 2494, 2500, 2503, 2504, 2507, 2509, 2519, 2519, 2530, 2531, 2534, 2543, 
  2561, 2563, 2620, 2620, 2622, 2626, 2631, 2632, 2635, 2637, 2641, 2641, 2662, 2673, 2677, 2677, 2689, 2691, 2748, 2748, 2750, 2757, 2759, 2761, 2763, 2765, 2786, 2787, 2790, 2799, 2817, 2819, 2876, 2876, 2878, 2884, 2887, 2888, 2891, 2893, 2902, 2903, 2914, 2915, 2918, 2927, 2946, 2946, 3006, 3010, 3014, 3016, 3018, 3021, 3031, 3031, 3046, 3055, 3073, 3075, 3134, 3140, 3142, 3144, 3146, 3149, 3157, 3158, 3170, 3171, 3174, 3183, 3202, 3203, 3260, 3260, 3262, 3268, 3270, 3272, 3274, 3277, 3285, 3286, 
  3298, 3299, 3302, 3311, 3330, 3331, 3390, 3396, 3398, 3400, 3402, 3405, 3415, 3415, 3426, 3427, 3430, 3439, 3458, 3459, 3530, 3530, 3535, 3540, 3542, 3542, 3544, 3551, 3570, 3571, 3633, 3633, 3636, 3642, 3655, 3662, 3664, 3673, 3761, 3761, 3764, 3769, 3771, 3772, 3784, 3789, 3792, 3801, 3864, 3865, 3872, 3881, 3893, 3893, 3895, 3895, 3897, 3897, 3902, 3903, 3953, 3972, 3974, 3975, 3981, 3991, 3993, 4028, 4038, 4038, 4139, 4158, 4160, 4169, 4182, 4185, 4190, 4192, 4194, 4196, 4199, 4205, 4209, 4212, 
  4226, 4237, 4239, 4253, 4957, 4959, 5906, 5908, 5938, 5940, 5970, 5971, 6002, 6003, 6068, 6099, 6109, 6109, 6112, 6121, 6155, 6157, 6160, 6169, 6313, 6313, 6432, 6443, 6448, 6459, 6470, 6479, 6576, 6592, 6600, 6601, 6608, 6617, 6679, 6683, 6741, 6750, 6752, 6780, 6783, 6793, 6800, 6809, 6912, 6916, 6964, 6980, 6992, 7001, 7019, 7027, 7040, 7042, 7073, 7085, 7088, 7097, 7142, 7155, 7204, 7223, 7232, 7241, 7248, 7257, 7376, 7378, 7380, 7400, 7405, 7405, 7410, 7412, 7616, 7654, 7676, 7679, 8204, 8205, 
  8255, 8256, 8276, 8276, 8400, 8412, 8417, 8417, 8421, 8432, 11503, 11505, 11647, 11647, 11744, 11775, 12330, 12335, 12441, 12442, 42528, 42537, 42607, 42607, 42612, 42621, 42655, 42655, 42736, 42737, 43010, 43010, 43014, 43014, 43019, 43019, 43043, 43047, 43136, 43137, 43188, 43204, 43216, 43225, 43232, 43249, 43264, 43273, 43302, 43309, 43335, 43347, 43392, 43395, 43443, 43456, 43472, 43481, 43561, 43574, 43587, 43587, 43596, 43597, 43600, 43609, 43643, 43643, 43696, 43696, 43698, 43700, 43703, 
  43704, 43710, 43711, 43713, 43713, 43755, 43759, 43765, 43766, 44003, 44010, 44012, 44013, 44016, 44025, 64286, 64286, 65024, 65039, 65056, 65062, 65075, 65076, 65101, 65103, 65296, 65305, 65343, 65343];
  TypeScript$$16.LexLookUpUnicodeMap = LexLookUpUnicodeMap;
  TypeScript$$16.LexIsUnicodeDigit = LexIsUnicodeDigit;
  TypeScript$$16.LexIsUnicodeIdStart = LexIsUnicodeIdStart;
  TypeScript$$16.LexInitialize = LexInitialize;
  TypeScript$$16.LexAdjustIndent = LexAdjustIndent;
  TypeScript$$16.LexIsIdentifierStartChar = LexIsIdentifierStartChar;
  TypeScript$$16.LexIsDigit = LexIsDigit;
  TypeScript$$16.LexIsIdentifierChar = LexIsIdentifierChar;
  TypeScript$$16.LexMatchingOpen = LexMatchingOpen;
  var v15932 = TypeScript$$16.NumberScanState;
  var v20725 = !v15932;
  if (v20725) {
    v15932 = TypeScript$$16.NumberScanState = {};
  }
  var v7951 = v15932;
  v600(v7951);
  var NumberScanState = TypeScript$$16.NumberScanState;
  var v15933 = TypeScript$$16.LexState;
  var v20726 = !v15933;
  if (v20726) {
    v15933 = TypeScript$$16.LexState = {};
  }
  var v7952 = v15933;
  v601(v7952);
  var LexState = TypeScript$$16.LexState;
  var v15934 = TypeScript$$16.LexMode;
  var v20727 = !v15934;
  if (v20727) {
    v15934 = TypeScript$$16.LexMode = {};
  }
  var v7953 = v15934;
  v602(v7953);
  var LexMode = TypeScript$$16.LexMode;
  var v15935 = TypeScript$$16.CommentStyle;
  var v20728 = !v15935;
  if (v20728) {
    v15935 = TypeScript$$16.CommentStyle = {};
  }
  var v7954 = v15935;
  v603(v7954);
  var CommentStyle = TypeScript$$16.CommentStyle;
  var StringSourceText = v606();
  TypeScript$$16.StringSourceText = StringSourceText;
  var SourceTextSegment = v609();
  TypeScript$$16.SourceTextSegment = SourceTextSegment;
  var AggerateSourceTextSegment = v612();
  TypeScript$$16.AggerateSourceTextSegment = AggerateSourceTextSegment;
  var ScannerTextStream = v618();
  TypeScript$$16.ScannerTextStream = ScannerTextStream;
  var SavedTokens = v633();
  TypeScript$$16.SavedTokens = SavedTokens;
  var Scanner = v674();
  TypeScript$$16.Scanner = Scanner;
  TypeScript$$16.convertTokToIDName = convertTokToIDName;
  TypeScript$$16.convertTokToID = convertTokToID;
  TypeScript$$16.getLineNumberFromPosition = getLineNumberFromPosition;
  TypeScript$$16.getSourceLineColFromMap = getSourceLineColFromMap;
  TypeScript$$16.getLineColumnFromPosition = getLineColumnFromPosition;
  TypeScript$$16.getPositionFromLineColumn = getPositionFromLineColumn;
  TypeScript$$16.isPrimitiveTypeToken = isPrimitiveTypeToken;
  TypeScript$$16.isModifier = isModifier;
  return;
}
function v599(TypeScript$$15) {
  function v598() {
    function v597(s$$15) {
      var v15936 = this.builder;
      this.builder = v15936 + s$$15;
      var v7955 = this.outfile;
      var v7956 = this.builder;
      JAM.call(v7955.WriteLine, v7955, [v7956]);
      this.builder = "";
      return;
    }
    function v596(s$$14) {
      var v15937 = this.builder;
      this.builder = v15937 + s$$14;
      return;
    }
    function v595() {
      var v20729 = this.builder;
      var v15938 = v20729.length;
      var v7959 = v15938 > 0;
      if (v7959) {
        var v7957 = TypeScript$$15.CompilerDiagnostics;
        var v7958 = this.builder;
        JAM.call(v7957.Alert, v7957, [v7958]);
      }
      var v7960 = this.indentStrings;
      var v7961 = this.indentAmt;
      var indentString$$1 = v7960[v7961];
      var v7965 = indentString$$1 === undefined;
      if (v7965) {
        indentString$$1 = "";
        var i$$52 = 0;
        var v15939 = this.indentAmt;
        var v7962 = i$$52 < v15939;
        for (;v7962;) {
          var v15940 = this.indent1;
          indentString$$1 = indentString$$1 + v15940;
          i$$52++;
          var v15941 = this.indentAmt;
          v7962 = i$$52 < v15941;
        }
        var v7963 = this.indentStrings;
        var v7964 = this.indentAmt;
        JAM.set(v7963, v7964, indentString$$1);
      }
      var v15942 = this.builder;
      this.builder = v15942 + indentString$$1;
      return;
    }
    function v594() {
      this.indentAmt--;
      return;
    }
    function v593() {
      this.indentAmt++;
      return;
    }
    function PrintContext$$1(outfile$$4, parser$$1) {
      this.outfile = outfile$$4;
      this.parser = parser$$1;
      this.builder = "";
      this.indent1 = "  ";
      this.indentStrings = [];
      this.indentAmt = 0;
      return;
    }
    var v7966 = PrintContext$$1.prototype;
    v7966.increaseIndent = v593;
    var v7967 = PrintContext$$1.prototype;
    v7967.decreaseIndent = v594;
    var v7968 = PrintContext$$1.prototype;
    v7968.startLine = v595;
    var v7969 = PrintContext$$1.prototype;
    v7969.write = v596;
    var v7970 = PrintContext$$1.prototype;
    v7970.writeLine = v597;
    return PrintContext$$1;
  }
  function prePrintAST(ast$$46, parent$$43, walker$$40) {
    var pc = walker$$40.state;
    JAM.call(ast$$46.print, ast$$46, [pc]);
    pc.increaseIndent();
    return ast$$46;
  }
  function postPrintAST(ast$$47, parent$$44, walker$$41) {
    var pc$$1 = walker$$41.state;
    pc$$1.decreaseIndent();
    return ast$$47;
  }
  var PrintContext = v598();
  TypeScript$$15.PrintContext = PrintContext;
  TypeScript$$15.prePrintAST = prePrintAST;
  TypeScript$$15.postPrintAST = postPrintAST;
  return;
}
function v592(TypeScript$$14) {
  function v591() {
    function v590(sourceText$$2, filename$$2, unitIndex$$2, allowedElements$$4) {
      function v589(message$$15) {
        return JAM.call(_this$$2.reportParseError, _this$$2, [message$$15]);
      }
      var v15943 = typeof allowedElements$$4;
      var v7972 = v15943 === "undefined";
      if (v7972) {
        var v7971 = TypeScript$$14.AllowedElements;
        allowedElements$$4 = v7971.Global;
      }
      var _this$$2 = this;
      this.ambientModule = false;
      this.topLevel = true;
      this.hasTopLevelImportOrExport = false;
      this.requiresExtendsBlock = false;
      this.fname = filename$$2;
      this.currentUnitIndex = unitIndex$$2;
      this.amdDependencies = [];
      var v7973 = this.scanner;
      v7973.resetComments();
      var v7974 = this.scanner;
      JAM.call(v7974.setErrorHandler, v7974, [v589]);
      var v7975 = this.scanner;
      var v15944 = TypeScript$$14.LexMode;
      var v7976 = v15944.File;
      JAM.call(v7975.setSourceText, v7975, [sourceText$$2, v7976], JAM.policy.p1);
      var v7977 = this.scanner;
      var leftCurlyCount$$5 = v7977.leftCurlyCount;
      var v7978 = this.scanner;
      var rightCurlyCount$$5 = v7978.rightCurlyCount;
      var v7979 = this.scanner;
      var minChar$$28 = v7979.pos;
      var v7980 = this.scanner;
      var v26748 = v7980.scan();
      this.currentToken = v26748;
      this.pushDeclLists();
      var v7981 = TypeScript$$14.ASTList;
      var bod$$3 = new v7981;
      bod$$3.minChar = minChar$$28;
      this.state = ParseState.StartScript;
      var v7982 = JAM.call(TypeScript$$14.isDSTRFile, TypeScript$$14, [filename$$2]);
      var v15945 = !v7982;
      if (v15945) {
        v7982 = JAM.call(TypeScript$$14.isDTSFile, TypeScript$$14, [filename$$2]);
      }
      this.parsingDeclareFile = v7982;
      for (;true;) {
        var v20730 = TypeScript$$14.ErrorRecoverySet;
        var v15946 = v20730.EOF;
        var v20731 = TypeScript$$14.ErrorRecoverySet;
        var v15947 = v20731.Func;
        var v7983 = v15946 | v15947;
        var v15948 = TypeScript$$14.Modifiers;
        var v7984 = v15948.None;
        JAM.call(this.parseStatementList, this, [v7983, bod$$3, true, false, allowedElements$$4, v7984], JAM.policy.p1);
        var v20732 = this.currentToken;
        var v15949 = v20732.tokenId;
        var v20733 = TypeScript$$14.TokenID;
        var v15950 = v20733.EndOfFile;
        var v7985 = v15949 === v15950;
        if (v7985) {
          break;
        }
        var v7986 = TypeScript$$14.tokenTable;
        var v15951 = this.currentToken;
        var v7987 = v15951.tokenId;
        var badToken = v7986[v7987];
        var v20734 = badToken.text;
        var v15952 = "Unexpected statement block terminator '" + v20734;
        var v7988 = v15952 + "'";
        JAM.call(this.reportParseError, this, [v7988]);
        var v7989 = this.scanner;
        var v26749 = v7989.scan();
        this.currentToken = v26749;
      }
      this.state = ParseState.EndScript;
      var v7990 = this.scanner;
      bod$$3.limChar = v7990.pos;
      var topLevelMod = null;
      var v20735 = TypeScript$$14.moduleGenTarget;
      var v23757 = TypeScript$$14.ModuleGenTarget;
      var v20736 = v23757.Local;
      var v15953 = v20735 != v20736;
      if (v15953) {
        v15953 = this.hasTopLevelImportOrExport;
      }
      var v8001 = v15953;
      if (v8001) {
        var correctedFileName = JAM.call(TypeScript$$14.switchToForwardSlashes, TypeScript$$14, [filename$$2]);
        var v7991 = TypeScript$$14.Identifier;
        var id$$15 = JAM.new(v7991, [correctedFileName]);
        var v7992 = TypeScript$$14.ModuleDeclaration;
        var v7993 = this.topVarList();
        var v7994 = this.topScopeList();
        topLevelMod = JAM.new(v7992, [id$$15, bod$$3, v7993, v7994, null]);
        var v15954 = topLevelMod.modFlags;
        var v20737 = TypeScript$$14.ModuleFlags;
        var v15955 = v20737.IsDynamic;
        topLevelMod.modFlags = v15954 | v15955;
        var v15956 = topLevelMod.modFlags;
        var v20738 = TypeScript$$14.ModuleFlags;
        var v15957 = v20738.IsWholeFile;
        topLevelMod.modFlags = v15956 | v15957;
        var v15958 = topLevelMod.modFlags;
        var v20739 = TypeScript$$14.ModuleFlags;
        var v15959 = v20739.Exported;
        topLevelMod.modFlags = v15958 | v15959;
        var v7995 = this.parsingDeclareFile;
        if (v7995) {
          var v15960 = topLevelMod.modFlags;
          var v20740 = TypeScript$$14.ModuleFlags;
          var v15961 = v20740.Ambient;
          topLevelMod.modFlags = v15960 | v15961;
        }
        topLevelMod.minChar = minChar$$28;
        var v7996 = this.scanner;
        topLevelMod.limChar = v7996.pos;
        var v7997 = topLevelMod;
        var v26750 = JAM.call(TypeScript$$14.getPrettyName, TypeScript$$14, [correctedFileName]);
        v7997.prettyName = v26750;
        var v7998 = this.scanner;
        topLevelMod.containsUnicodeChar = v7998.seenUnicodeChar;
        var v7999 = this.scanner;
        topLevelMod.containsUnicodeCharInComment = v7999.seenUnicodeCharInComment;
        topLevelMod.amdDependencies = this.amdDependencies;
        var v8000 = TypeScript$$14.ASTList;
        bod$$3 = new v8000;
        bod$$3.minChar = topLevelMod.minChar;
        bod$$3.limChar = topLevelMod.limChar;
        JAM.call(bod$$3.append, bod$$3, [topLevelMod]);
      }
      var v8002 = TypeScript$$14.Script;
      var v8003 = this.topVarList();
      var v8004 = this.topScopeList();
      var script$$8 = JAM.new(v8002, [v8003, v8004]);
      script$$8.bod = bod$$3;
      this.popDeclLists();
      script$$8.minChar = minChar$$28;
      var v8005 = this.scanner;
      script$$8.limChar = v8005.pos;
      var v8006 = script$$8;
      var v15962 = TypeScript$$14.LocationInfo;
      var v20741 = this.scanner;
      var v15963 = v20741.lineMap;
      var v26751 = JAM.new(v15962, [filename$$2, v15963, unitIndex$$2]);
      v8006.locationInfo = v26751;
      var v15964 = this.scanner;
      var v8007 = v15964.leftCurlyCount;
      script$$8.leftCurlyCount = v8007 - leftCurlyCount$$5;
      var v15965 = this.scanner;
      var v8008 = v15965.rightCurlyCount;
      script$$8.rightCurlyCount = v8008 - rightCurlyCount$$5;
      script$$8.isDeclareFile = this.parsingDeclareFile;
      script$$8.topLevelMod = topLevelMod;
      var v8009 = this.scanner;
      script$$8.containsUnicodeChar = v8009.seenUnicodeChar;
      var v8010 = this.scanner;
      script$$8.containsUnicodeCharInComment = v8010.seenUnicodeCharInComment;
      script$$8.requiresExtendsBlock = this.requiresExtendsBlock;
      return script$$8;
    }
    function v588(sourceText$$1, filename$$1, unitIndex$$1) {
      var svGenTarget = TypeScript$$14.moduleGenTarget;
      try {
        var v8011 = TypeScript$$14.ModuleGenTarget;
        TypeScript$$14.moduleGenTarget = v8011.Local;
        var v15966 = TypeScript$$14.AllowedElements;
        var v8012 = v15966.QuickParse;
        var script$$7 = JAM.call(this.parse, this, [sourceText$$1, filename$$1, unitIndex$$1, v8012], JAM.policy.p1);
        var v15967 = this.scanner;
        var v8013 = v15967.lexState;
        return JAM.new(QuickParseResult, [script$$7, v8013]);
      } finally {
        TypeScript$$14.moduleGenTarget = svGenTarget;
      }
      return;
    }
    function v587(errorRecoverySet$$38, statements$$1, sourceElms, noLeadingCase, allowedElements$$3, parentModifiers$$8) {
      var directivePrologue = sourceElms;
      var v8014 = this.scanner;
      statements$$1.minChar = v8014.startPos;
      var v8015 = this.scanner;
      var limChar$$8 = v8015.pos;
      var v20742 = TypeScript$$14.AllowedElements;
      var v15968 = v20742.ModuleDeclarations;
      var v8016 = allowedElements$$3 & v15968;
      var v15969 = TypeScript$$14.AllowedElements;
      var v8017 = v15969.None;
      var innerStmts = v8016 == v8017;
      var v20743 = TypeScript$$14.AllowedElements;
      var v15970 = v20743.ClassDeclarations;
      var v8018 = allowedElements$$3 & v15970;
      var v15971 = TypeScript$$14.AllowedElements;
      var v8019 = v15971.None;
      var classNope = v8018 == v8019;
      var v23758 = TypeScript$$14.ErrorRecoverySet;
      var v20744 = v23758.TypeScriptS;
      var v23759 = TypeScript$$14.ErrorRecoverySet;
      var v20745 = v23759.RCurly;
      var v15972 = v20744 | v20745;
      errorRecoverySet$$38 = errorRecoverySet$$38 | v15972;
      this.state = ParseState.StartStatementList;
      var oldStrictMode = this.strictMode;
      this.nestingLevel++;
      for (;;) {
        var v26167 = this.currentToken;
        var v25886 = v26167.tokenId;
        var v26168 = TypeScript$$14.TokenID;
        var v25887 = v26168.CloseBrace;
        var v25225 = v25886 == v25887;
        var v25889 = !v25225;
        if (v25889) {
          var v25888 = noLeadingCase;
          if (v25888) {
            var v26370 = this.currentToken;
            var v26301 = v26370.tokenId;
            var v26371 = TypeScript$$14.TokenID;
            var v26302 = v26371.Case;
            var v26169 = v26301 == v26302;
            var v26305 = !v26169;
            if (v26305) {
              var v26372 = this.currentToken;
              var v26303 = v26372.tokenId;
              var v26373 = TypeScript$$14.TokenID;
              var v26304 = v26373.Default;
              v26169 = v26303 == v26304;
            }
            v25888 = v26169;
          }
          v25225 = v25888;
        }
        var v23760 = v25225;
        var v25227 = !v23760;
        if (v25227) {
          var v25226 = innerStmts;
          if (v25226) {
            var v26170 = this.currentToken;
            var v25890 = v26170.tokenId;
            var v26171 = TypeScript$$14.TokenID;
            var v25891 = v26171.Export;
            v25226 = v25890 == v25891;
          }
          v23760 = v25226;
        }
        var v20746 = v23760;
        var v23762 = !v20746;
        if (v23762) {
          var v23761 = classNope;
          if (v23761) {
            var v25892 = this.currentToken;
            var v25228 = v25892.tokenId;
            var v25893 = TypeScript$$14.TokenID;
            var v25229 = v25893.Class;
            v23761 = v25228 == v25229;
          }
          v20746 = v23761;
        }
        var v15973 = v20746;
        var v20749 = !v15973;
        if (v20749) {
          var v23763 = this.currentToken;
          var v20747 = v23763.tokenId;
          var v23764 = TypeScript$$14.TokenID;
          var v20748 = v23764.EndOfFile;
          v15973 = v20747 == v20748;
        }
        var v8021 = v15973;
        if (v8021) {
          this.state = ParseState.EndStmtList;
          statements$$1.limChar = limChar$$8;
          var v20750 = statements$$1.members;
          var v15974 = v20750.length;
          var v8020 = v15974 == 0;
          if (v8020) {
            var v26752 = this.parseComments();
            statements$$1.preComments = v26752;
          } else {
            var v26753 = this.parseComments();
            statements$$1.postComments = v26753;
          }
          this.strictMode = oldStrictMode;
          this.nestingLevel--;
          return;
        }
        var v26172 = TypeScript$$14.ErrorRecoverySet;
        var v25894 = v26172.Else;
        var v26173 = TypeScript$$14.ErrorRecoverySet;
        var v25895 = v26173.RParen;
        var v25230 = v25894 | v25895;
        var v25896 = TypeScript$$14.ErrorRecoverySet;
        var v25231 = v25896.Catch;
        var v23765 = v25230 | v25231;
        var v25232 = TypeScript$$14.ErrorRecoverySet;
        var v23766 = v25232.Colon;
        var v20751 = v23765 | v23766;
        var v15975 = ~v20751;
        var v8022 = errorRecoverySet$$38 & v15975;
        var stmt$$4 = JAM.call(this.parseStatement, this, [v8022, allowedElements$$3, parentModifiers$$8], JAM.policy.p1);
        if (stmt$$4) {
          var v8023 = stmt$$4.postComments;
          var v20752 = this.scanner;
          var v15976 = v20752.prevLine;
          var v8024 = JAM.call(this.parseCommentsForLine, this, [v15976]);
          var v26754 = JAM.call(this.combineComments, this, [v8023, v8024], JAM.policy.p1);
          stmt$$4.postComments = v26754;
          JAM.call(statements$$1.append, statements$$1, [stmt$$4]);
          limChar$$8 = stmt$$4.limChar;
          if (directivePrologue) {
            var v15977 = stmt$$4.nodeType;
            var v20753 = TypeScript$$14.NodeType;
            var v15978 = v20753.QString;
            var v8026 = v15977 == v15978;
            if (v8026) {
              var qstring = stmt$$4;
              var v15979 = qstring.text;
              var v8025 = v15979 == '"use strict"';
              if (v8025) {
                var v15980 = statements$$1.flags;
                var v20754 = TypeScript$$14.ASTFlags;
                var v15981 = v20754.StrictMode;
                statements$$1.flags = v15980 | v15981;
                this.strictMode = true;
              } else {
                directivePrologue = false;
              }
            } else {
              directivePrologue = false;
            }
          }
        }
      }
      return;
    }
    function v586(ast$$45) {
      var nt = ast$$45.nodeType;
      var v26374 = TypeScript$$14.NodeType;
      var v26306 = v26374.ClassDeclaration;
      var v26174 = nt == v26306;
      var v26308 = !v26174;
      if (v26308) {
        var v26375 = TypeScript$$14.NodeType;
        var v26307 = v26375.ImportDeclaration;
        v26174 = nt == v26307;
      }
      var v25897 = v26174;
      var v26176 = !v25897;
      if (v26176) {
        var v26309 = TypeScript$$14.NodeType;
        var v26175 = v26309.InterfaceDeclaration;
        v25897 = nt == v26175;
      }
      var v25233 = v25897;
      var v25899 = !v25233;
      if (v25899) {
        var v26177 = TypeScript$$14.NodeType;
        var v25898 = v26177.ModuleDeclaration;
        v25233 = nt == v25898;
      }
      var v23767 = v25233;
      var v25235 = !v23767;
      if (v25235) {
        var v25900 = TypeScript$$14.NodeType;
        var v25234 = v25900.Empty;
        v23767 = nt == v25234;
      }
      var v20755 = v23767;
      var v23769 = !v20755;
      if (v23769) {
        var v25236 = TypeScript$$14.NodeType;
        var v23768 = v25236.VarDecl;
        v20755 = nt == v23768;
      }
      var v15982 = v20755;
      var v20757 = !v15982;
      if (v20757) {
        var v25237 = TypeScript$$14.NodeType;
        var v23770 = v25237.Block;
        var v20756 = nt == v23770;
        if (v20756) {
          var v23771 = ast$$45.isStatementBlock;
          v20756 = !v23771;
        }
        v15982 = v20756;
      }
      var v8027 = v15982;
      var v15984 = !v8027;
      if (v15984) {
        var v23772 = TypeScript$$14.NodeType;
        var v20758 = v23772.FuncDecl;
        var v15983 = nt == v20758;
        if (v15983) {
          v15983 = ast$$45.isMethod();
        }
        v8027 = v15983;
      }
      return v8027;
    }
    function v585(errorRecoverySet$$37, allowedElements$$2, parentModifiers$$7) {
      function isAmbient$$3() {
        var v20759 = TypeScript$$14.Modifiers;
        var v15985 = v20759.Ambient;
        var v8028 = JAM.call(TypeScript$$14.hasFlag, TypeScript$$14, [modifiers$$12, v15985], JAM.policy.p1);
        var v15987 = !v8028;
        if (v15987) {
          var v20760 = TypeScript$$14.Modifiers;
          var v15986 = v20760.Ambient;
          v8028 = JAM.call(TypeScript$$14.hasFlag, TypeScript$$14, [parentModifiers$$7, v15986], JAM.policy.p1);
        }
        return v8028;
      }
      function mayNotBeExported() {
        var v20761 = TypeScript$$14.Modifiers;
        var v15988 = v20761.Exported;
        var v8029 = JAM.call(TypeScript$$14.hasFlag, TypeScript$$14, [modifiers$$12, v15988], JAM.policy.p1);
        if (v8029) {
          JAM.call(this.reportError, this, ["Statement may not be exported"]);
        }
        return;
      }
      var ast$$44 = null;
      var labelList$$1 = null;
      var astList = null;
      var temp$$15;
      var v8030 = TypeScript$$14.Modifiers;
      var modifiers$$12 = v8030.None;
      var v8031 = this.scanner;
      var minChar$$27 = v8031.startPos;
      var forInOk = false;
      var needTerminator = false;
      var fnOrVar = null;
      var preComments$$8 = this.parseComments();
      this.state = ParseState.StartStatement;
      for (;;) {
        var v15989 = this.currentToken;
        var v8347 = v15989.tokenId;
        switch(v8347) {
          case TypeScript$$14.TokenID.EndOfFile:
            var v8032 = TypeScript$$14.AST;
            var v15990 = TypeScript$$14.NodeType;
            var v8033 = v15990.Error;
            ast$$44 = JAM.new(v8032, [v8033]);
            ast$$44.minChar = minChar$$27;
            var v8034 = this.scanner;
            ast$$44.limChar = v8034.pos;
            break;
          case TypeScript$$14.TokenID.Function:
            var v20762 = this.parsingDeclareFile;
            var v23773 = !v20762;
            if (v23773) {
              v20762 = isAmbient$$3();
            }
            var v15991 = v20762;
            var v20763 = !v15991;
            if (v20763) {
              v15991 = this.ambientModule;
            }
            var v8044 = v15991;
            if (v8044) {
              var v8035 = this.scanner;
              var v26755 = v8035.scan();
              this.currentToken = v26755;
              var v20764 = TypeScript$$14.ErrorRecoverySet;
              var v15992 = v20764.SColon;
              var v8036 = errorRecoverySet$$37 | v15992;
              fnOrVar = JAM.call(this.parsePropertyDeclaration, this, [v8036, modifiers$$12, true, false], JAM.policy.p1);
              var v15993 = fnOrVar.nodeType;
              var v20765 = TypeScript$$14.NodeType;
              var v15994 = v20765.VarDecl;
              var v8038 = v15993 == v15994;
              if (v8038) {
                JAM.call(this.reportParseError, this, ["function keyword can only introduce function declaration"]);
              } else {
                var v20766 = fnOrVar.nodeType;
                var v23774 = TypeScript$$14.NodeType;
                var v20767 = v23774.FuncDecl;
                var v15995 = v20766 == v20767;
                if (v15995) {
                  fnOrVar.fncFlags;
                  var v23775 = TypeScript$$14.FncFlags;
                  v15995 = v23775.IsFatArrowFunction;
                }
                var v8037 = v15995;
                if (v8037) {
                  needTerminator = true;
                }
              }
              ast$$44 = fnOrVar;
              var v15996 = this.parsingDeclareFile;
              var v20769 = !v15996;
              if (v20769) {
                var v20768 = this.ambientModule;
                if (v20768) {
                  var v23776 = ast$$44.nodeType;
                  var v25238 = TypeScript$$14.NodeType;
                  var v23777 = v25238.FuncDecl;
                  v20768 = v23776 == v23777;
                }
                v15996 = v20768;
              }
              var v8039 = v15996;
              if (v8039) {
                var v15997 = ast$$44.fncFlags;
                var v20770 = TypeScript$$14.FncFlags;
                var v15998 = v20770.Exported;
                ast$$44.fncFlags = v15997 | v15998;
              }
            } else {
              var v8040 = isAmbient$$3();
              ast$$44 = JAM.call(this.parseFncDecl, this, [errorRecoverySet$$37, true, false, false, null, false, false, v8040, modifiers$$12, null, true], JAM.policy.p1);
              var v15999 = ast$$44.fncFlags;
              var v20771 = TypeScript$$14.FncFlags;
              var v16000 = v20771.IsFatArrowFunction;
              var v8041 = JAM.call(TypeScript$$14.hasFlag, TypeScript$$14, [v15999, v16000], JAM.policy.p1);
              if (v8041) {
                needTerminator = true;
              }
              var v8042 = this.ambientModule;
              if (v8042) {
                JAM.call(this.reportParseError, this, ["function declaration not permitted within ambient module"]);
              }
              var v20772 = TypeScript$$14.Modifiers;
              var v16001 = v20772.Exported;
              var v8043 = JAM.call(TypeScript$$14.hasFlag, TypeScript$$14, [modifiers$$12, v16001], JAM.policy.p1);
              if (v8043) {
                var v16002 = ast$$44.fncFlags;
                var v20773 = TypeScript$$14.FncFlags;
                var v16003 = v20773.Exported;
                ast$$44.fncFlags = v16002 | v16003;
              }
            }
            break;
          case TypeScript$$14.TokenID.Module:
            var v23778 = TypeScript$$14.AllowedElements;
            var v20774 = v23778.ModuleDeclarations;
            var v16004 = allowedElements$$2 & v20774;
            var v20775 = TypeScript$$14.AllowedElements;
            var v16005 = v20775.None;
            var v8049 = v16004 == v16005;
            if (v8049) {
              JAM.call(this.reportParseError, this, ["module not allowed in this context"]);
              var v8045 = this.scanner;
              var v26756 = v8045.scan();
              this.currentToken = v26756;
              var v8046 = TypeScript$$14.AST;
              var v16006 = TypeScript$$14.NodeType;
              var v8047 = v16006.Error;
              ast$$44 = JAM.new(v8046, [v8047]);
              ast$$44.minChar = minChar$$27;
              var v8048 = ast$$44;
              var v16007 = this.scanner;
              var v26757 = v16007.lastTokenLimChar();
              v8048.limChar = v26757;
            } else {
              ast$$44 = JAM.call(this.parseModuleDecl, this, [errorRecoverySet$$37, modifiers$$12, preComments$$8], JAM.policy.p1);
              preComments$$8 = null;
            }
            break;
          case TypeScript$$14.TokenID.Import:
            var v23779 = TypeScript$$14.AllowedElements;
            var v20776 = v23779.ModuleDeclarations;
            var v16008 = allowedElements$$2 & v20776;
            var v20777 = TypeScript$$14.AllowedElements;
            var v16009 = v20777.None;
            var v8055 = v16008 == v16009;
            if (v8055) {
              JAM.call(this.reportParseError, this, ["module not allowed in this context"]);
              var v8050 = this.scanner;
              var v26758 = v8050.scan();
              this.currentToken = v26758;
              var v8051 = TypeScript$$14.AST;
              var v16010 = TypeScript$$14.NodeType;
              var v8052 = v16010.Error;
              ast$$44 = JAM.new(v8051, [v8052]);
              ast$$44.minChar = minChar$$27;
              var v8053 = ast$$44;
              var v16011 = this.scanner;
              var v26759 = v16011.lastTokenLimChar();
              v8053.limChar = v26759;
            } else {
              var v20778 = TypeScript$$14.Modifiers;
              var v16012 = v20778.Exported;
              var v8054 = JAM.call(TypeScript$$14.hasFlag, TypeScript$$14, [modifiers$$12, v16012], JAM.policy.p1);
              if (v8054) {
                JAM.call(this.reportParseError, this, ["export keyword not permitted on import declaration"]);
              }
              ast$$44 = JAM.call(this.parseImportDeclaration, this, [errorRecoverySet$$37, modifiers$$12], JAM.policy.p1);
              needTerminator = true;
            }
            break;
          case TypeScript$$14.TokenID.Export:
            var v23780 = TypeScript$$14.AllowedElements;
            var v20779 = v23780.ModuleDeclarations;
            var v16013 = allowedElements$$2 & v20779;
            var v20780 = TypeScript$$14.AllowedElements;
            var v16014 = v20780.None;
            var v8060 = v16013 == v16014;
            if (v8060) {
              JAM.call(this.reportParseError, this, ["'export' statements are only allowed at the global and module levels"]);
              var v8056 = this.scanner;
              var v26760 = v8056.scan();
              this.currentToken = v26760;
              var v8057 = TypeScript$$14.AST;
              var v16015 = TypeScript$$14.NodeType;
              var v8058 = v16015.Error;
              ast$$44 = JAM.new(v8057, [v8058]);
              ast$$44.minChar = minChar$$27;
              var v8059 = ast$$44;
              var v16016 = this.scanner;
              var v26761 = v16016.lastTokenLimChar();
              v8059.limChar = v26761;
            }
            var v8061 = this.topLevel;
            if (v8061) {
              this.hasTopLevelImportOrExport = true;
            }
            var v20781 = TypeScript$$14.Modifiers;
            var v16017 = v20781.Exported;
            modifiers$$12 = modifiers$$12 | v16017;
            var v8062 = this.scanner;
            var v26762 = v8062.scan();
            this.currentToken = v26762;
            break;
          case TypeScript$$14.TokenID.Private:
            var v20782 = TypeScript$$14.Modifiers;
            var v16018 = v20782.Private;
            modifiers$$12 = modifiers$$12 | v16018;
            var v8063 = this.scanner;
            var v26763 = v8063.scan();
            this.currentToken = v26763;
            var v8090 = this.parsingClassConstructorDefinition;
            if (v8090) {
              var v16019 = this.inferPropertiesFromThisAssignment;
              var v8064 = !v16019;
              if (v8064) {
                JAM.call(this.reportParseError, this, ["Property declarations are not permitted within constructor bodies"]);
              }
              var v8065 = this.scanner;
              minChar$$27 = v8065.pos;
              var v16020 = this.inferPropertiesFromThisAssignment;
              if (v16020) {
                var v25239 = this.currentToken;
                var v23781 = v25239.tokenId;
                var v25240 = TypeScript$$14.TokenID;
                var v23782 = v25240.This;
                var v20783 = v23781 != v23782;
                var v23785 = !v20783;
                if (v23785) {
                  var v25901 = this.scanner;
                  var v26764 = v25901.scan();
                  var v25241 = this.currentToken = v26764;
                  var v23783 = v25241.tokenId;
                  var v25242 = TypeScript$$14.TokenID;
                  var v23784 = v25242.Dot;
                  v20783 = v23783 != v23784;
                }
                v16020 = v20783;
              }
              var v8077 = v16020;
              if (v8077) {
                JAM.call(this.reportParseError, this, ["Expected 'this.' for property declaration"]);
                var v8066 = this.scanner;
                var v26765 = v8066.scan();
                this.currentToken = v26765;
                var v8067 = TypeScript$$14.AST;
                var v16021 = TypeScript$$14.NodeType;
                var v8068 = v16021.Error;
                ast$$44 = JAM.new(v8067, [v8068]);
                ast$$44.minChar = minChar$$27;
                var v8069 = ast$$44;
                var v16022 = this.scanner;
                var v26766 = v16022.lastTokenLimChar();
                v8069.limChar = v26766;
              } else {
                var v8070 = this.scanner;
                var v26767 = v8070.scan();
                this.currentToken = v26767;
                var v8071 = TypeScript$$14.Identifier;
                var v8072 = this.currentToken;
                var id$$14 = JAM.call(v8071.fromToken, v8071, [v8072]);
                var v8073 = this.scanner;
                id$$14.minChar = v8073.startPos;
                var v8074 = this.scanner;
                id$$14.limChar = v8074.pos;
                var v8075 = this.scanner;
                var v26768 = v8075.scan();
                this.currentToken = v26768;
                var v8076 = this.parsingClassConstructorDefinition;
                ast$$44 = JAM.call(this.parseClassMemberVariableDeclaration, this, [id$$14, minChar$$27, v8076, errorRecoverySet$$37, modifiers$$12], JAM.policy.p1);
              }
            } else {
              var v20784 = this.currentToken;
              var v16023 = v20784.tokenId;
              var v20785 = TypeScript$$14.TokenID;
              var v16024 = v20785.Interface;
              var v8089 = v16023 != v16024;
              if (v8089) {
                var v20786 = this.currentToken;
                var v16025 = v20786.tokenId;
                var v20787 = TypeScript$$14.TokenID;
                var v16026 = v20787.Get;
                var v8085 = v16025 == v16026;
                if (v8085) {
                  this.prevIDTok = this.currentToken;
                  var v8078 = this.scanner;
                  var v26769 = v8078.scan();
                  this.currentToken = v26769;
                  var v16027 = TypeScript$$14.codeGenTarget;
                  var v20788 = TypeScript$$14.CodeGenTarget;
                  var v16028 = v20788.ES5;
                  var v8079 = v16027 < v16028;
                  if (v8079) {
                    JAM.call(this.reportParseError, this, ["Property accessors are only available when targeting ES5 or greater"]);
                  }
                  var v23786 = this.currentToken;
                  var v20789 = v23786.tokenId;
                  var v23787 = TypeScript$$14.TokenID;
                  var v20790 = v23787.Identifier;
                  var v16029 = v20789 == v20790;
                  var v20793 = !v16029;
                  if (v20793) {
                    var v20791 = this.currentToken;
                    var v20792 = this.strictMode;
                    v16029 = JAM.call(TypeScript$$14.convertTokToID, TypeScript$$14, [v20791, v20792], JAM.policy.p1);
                  }
                  var v8080 = v16029;
                  if (v8080) {
                    var v20794 = TypeScript$$14.Modifiers;
                    var v16030 = v20794.Getter;
                    modifiers$$12 = modifiers$$12 | v16030;
                    this.prevIDTok = null;
                  }
                } else {
                  var v20795 = this.currentToken;
                  var v16031 = v20795.tokenId;
                  var v20796 = TypeScript$$14.TokenID;
                  var v16032 = v20796.Set;
                  var v8084 = v16031 == v16032;
                  if (v8084) {
                    this.prevIDTok = this.currentToken;
                    var v8081 = this.scanner;
                    var v26770 = v8081.scan();
                    this.currentToken = v26770;
                    var v16033 = TypeScript$$14.codeGenTarget;
                    var v20797 = TypeScript$$14.CodeGenTarget;
                    var v16034 = v20797.ES5;
                    var v8082 = v16033 < v16034;
                    if (v8082) {
                      JAM.call(this.reportParseError, this, ["Property accessors are only available when targeting ES5 or greater"]);
                    }
                    var v23788 = this.currentToken;
                    var v20798 = v23788.tokenId;
                    var v23789 = TypeScript$$14.TokenID;
                    var v20799 = v23789.Identifier;
                    var v16035 = v20798 == v20799;
                    var v20802 = !v16035;
                    if (v20802) {
                      var v20800 = this.currentToken;
                      var v20801 = this.strictMode;
                      v16035 = JAM.call(TypeScript$$14.convertTokToID, TypeScript$$14, [v20800, v20801], JAM.policy.p1);
                    }
                    var v8083 = v16035;
                    if (v8083) {
                      var v20803 = TypeScript$$14.Modifiers;
                      var v16036 = v20803.Setter;
                      modifiers$$12 = modifiers$$12 | v16036;
                      this.prevIDTok = null;
                    }
                  }
                }
                var v20804 = TypeScript$$14.ErrorRecoverySet;
                var v16037 = v20804.SColon;
                var v8086 = errorRecoverySet$$37 | v16037;
                var v8087 = isAmbient$$3();
                fnOrVar = JAM.call(this.parsePropertyDeclaration, this, [v8086, modifiers$$12, v8087, false], JAM.policy.p1);
                var v20805 = fnOrVar.nodeType;
                var v23790 = TypeScript$$14.NodeType;
                var v20806 = v23790.VarDecl;
                var v16038 = v20805 == v20806;
                var v20808 = !v16038;
                if (v20808) {
                  var v23791 = fnOrVar.nodeType;
                  var v25243 = TypeScript$$14.NodeType;
                  var v23792 = v25243.FuncDecl;
                  var v20807 = v23791 == v23792;
                  if (v20807) {
                    var v23793 = fnOrVar.fncFlags;
                    var v25244 = TypeScript$$14.FncFlags;
                    var v23794 = v25244.IsFatArrowFunction;
                    v20807 = JAM.call(TypeScript$$14.hasFlag, TypeScript$$14, [v23793, v23794], JAM.policy.p1);
                  }
                  v16038 = v20807;
                }
                var v8088 = v16038;
                if (v8088) {
                  needTerminator = true;
                }
                ast$$44 = fnOrVar;
              }
            }
            break;
          case TypeScript$$14.TokenID.Public:
            var v8123 = this.parsingClassConstructorDefinition;
            if (v8123) {
              var v16039 = this.inferPropertiesFromThisAssignment;
              var v8091 = !v16039;
              if (v8091) {
                JAM.call(this.reportParseError, this, ["Property declarations are not permitted within constructor bodies"]);
              }
              var v8092 = this.scanner;
              var v26771 = v8092.scan();
              this.currentToken = v26771;
              var v8093 = this.scanner;
              minChar$$27 = v8093.pos;
              var v20809 = TypeScript$$14.Modifiers;
              var v16040 = v20809.Public;
              modifiers$$12 = modifiers$$12 | v16040;
              var v16041 = this.inferPropertiesFromThisAssignment;
              if (v16041) {
                var v25245 = this.currentToken;
                var v23795 = v25245.tokenId;
                var v25246 = TypeScript$$14.TokenID;
                var v23796 = v25246.This;
                var v20810 = v23795 != v23796;
                var v23799 = !v20810;
                if (v23799) {
                  var v25902 = this.scanner;
                  var v26772 = v25902.scan();
                  var v25247 = this.currentToken = v26772;
                  var v23797 = v25247.tokenId;
                  var v25248 = TypeScript$$14.TokenID;
                  var v23798 = v25248.Dot;
                  v20810 = v23797 != v23798;
                }
                v16041 = v20810;
              }
              var v8105 = v16041;
              if (v8105) {
                JAM.call(this.reportParseError, this, ["Expected 'this.' for property declaration"]);
                var v8094 = this.scanner;
                var v26773 = v8094.scan();
                this.currentToken = v26773;
                var v8095 = TypeScript$$14.AST;
                var v16042 = TypeScript$$14.NodeType;
                var v8096 = v16042.Error;
                ast$$44 = JAM.new(v8095, [v8096]);
                ast$$44.minChar = minChar$$27;
                var v8097 = ast$$44;
                var v16043 = this.scanner;
                var v26774 = v16043.lastTokenLimChar();
                v8097.limChar = v26774;
              } else {
                var v8098 = this.scanner;
                var v26775 = v8098.scan();
                this.currentToken = v26775;
                var v8099 = TypeScript$$14.Identifier;
                var v8100 = this.currentToken;
                id$$14 = JAM.call(v8099.fromToken, v8099, [v8100]);
                var v8101 = this.scanner;
                id$$14.minChar = v8101.startPos;
                var v8102 = this.scanner;
                id$$14.limChar = v8102.pos;
                var v8103 = this.scanner;
                var v26776 = v8103.scan();
                this.currentToken = v26776;
                var v8104 = this.parsingClassConstructorDefinition;
                ast$$44 = JAM.call(this.parseClassMemberVariableDeclaration, this, [id$$14, minChar$$27, v8104, errorRecoverySet$$37, modifiers$$12], JAM.policy.p1);
              }
            } else {
              var v23800 = TypeScript$$14.AllowedElements;
              var v20811 = v23800.Properties;
              var v16044 = allowedElements$$2 & v20811;
              var v20812 = TypeScript$$14.AllowedElements;
              var v16045 = v20812.None;
              var v8122 = v16044 == v16045;
              if (v8122) {
                JAM.call(this.reportParseError, this, ["'property' statements are only allowed within classes"]);
                var v8106 = this.scanner;
                var v26777 = v8106.scan();
                this.currentToken = v26777;
                var v8107 = TypeScript$$14.AST;
                var v16046 = TypeScript$$14.NodeType;
                var v8108 = v16046.Error;
                ast$$44 = JAM.new(v8107, [v8108]);
                ast$$44.minChar = minChar$$27;
                var v8109 = ast$$44;
                var v16047 = this.scanner;
                var v26778 = v16047.lastTokenLimChar();
                v8109.limChar = v26778;
              } else {
                var v20813 = TypeScript$$14.Modifiers;
                var v16048 = v20813.Public;
                modifiers$$12 = modifiers$$12 | v16048;
                var v8110 = this.scanner;
                var v26779 = v8110.scan();
                this.currentToken = v26779;
                var v20814 = this.currentToken;
                var v16049 = v20814.tokenId;
                var v20815 = TypeScript$$14.TokenID;
                var v16050 = v20815.Get;
                var v8118 = v16049 == v16050;
                if (v8118) {
                  this.prevIDTok = this.currentToken;
                  var v8111 = this.scanner;
                  var v26780 = v8111.scan();
                  this.currentToken = v26780;
                  var v16051 = TypeScript$$14.codeGenTarget;
                  var v20816 = TypeScript$$14.CodeGenTarget;
                  var v16052 = v20816.ES5;
                  var v8112 = v16051 < v16052;
                  if (v8112) {
                    JAM.call(this.reportParseError, this, ["Property accessors are only available when targeting ES5 or greater"]);
                  }
                  var v23801 = this.currentToken;
                  var v20817 = v23801.tokenId;
                  var v23802 = TypeScript$$14.TokenID;
                  var v20818 = v23802.Identifier;
                  var v16053 = v20817 == v20818;
                  var v20821 = !v16053;
                  if (v20821) {
                    var v20819 = this.currentToken;
                    var v20820 = this.strictMode;
                    v16053 = JAM.call(TypeScript$$14.convertTokToID, TypeScript$$14, [v20819, v20820], JAM.policy.p1);
                  }
                  var v8113 = v16053;
                  if (v8113) {
                    var v20822 = TypeScript$$14.Modifiers;
                    var v16054 = v20822.Getter;
                    modifiers$$12 = modifiers$$12 | v16054;
                    this.prevIDTok = null;
                  }
                } else {
                  var v20823 = this.currentToken;
                  var v16055 = v20823.tokenId;
                  var v20824 = TypeScript$$14.TokenID;
                  var v16056 = v20824.Set;
                  var v8117 = v16055 == v16056;
                  if (v8117) {
                    this.prevIDTok = this.currentToken;
                    var v8114 = this.scanner;
                    var v26781 = v8114.scan();
                    this.currentToken = v26781;
                    var v16057 = TypeScript$$14.codeGenTarget;
                    var v20825 = TypeScript$$14.CodeGenTarget;
                    var v16058 = v20825.ES5;
                    var v8115 = v16057 < v16058;
                    if (v8115) {
                      JAM.call(this.reportParseError, this, ["Property accessors are only available when targeting ES5 or greater"]);
                    }
                    var v23803 = this.currentToken;
                    var v20826 = v23803.tokenId;
                    var v23804 = TypeScript$$14.TokenID;
                    var v20827 = v23804.Identifier;
                    var v16059 = v20826 == v20827;
                    var v20830 = !v16059;
                    if (v20830) {
                      var v20828 = this.currentToken;
                      var v20829 = this.strictMode;
                      v16059 = JAM.call(TypeScript$$14.convertTokToID, TypeScript$$14, [v20828, v20829], JAM.policy.p1);
                    }
                    var v8116 = v16059;
                    if (v8116) {
                      var v20831 = TypeScript$$14.Modifiers;
                      var v16060 = v20831.Setter;
                      modifiers$$12 = modifiers$$12 | v16060;
                      this.prevIDTok = null;
                    }
                  }
                }
                var v20832 = TypeScript$$14.ErrorRecoverySet;
                var v16061 = v20832.SColon;
                var v8119 = errorRecoverySet$$37 | v16061;
                var v8120 = isAmbient$$3();
                fnOrVar = JAM.call(this.parsePropertyDeclaration, this, [v8119, modifiers$$12, v8120, false], JAM.policy.p1);
                var v20833 = fnOrVar.nodeType;
                var v23805 = TypeScript$$14.NodeType;
                var v20834 = v23805.VarDecl;
                var v16062 = v20833 == v20834;
                var v20836 = !v16062;
                if (v20836) {
                  var v23806 = fnOrVar.nodeType;
                  var v25249 = TypeScript$$14.NodeType;
                  var v23807 = v25249.FuncDecl;
                  var v20835 = v23806 == v23807;
                  if (v20835) {
                    var v23808 = fnOrVar.fncFlags;
                    var v25250 = TypeScript$$14.FncFlags;
                    var v23809 = v25250.IsFatArrowFunction;
                    v20835 = JAM.call(TypeScript$$14.hasFlag, TypeScript$$14, [v23808, v23809], JAM.policy.p1);
                  }
                  v16062 = v20835;
                }
                var v8121 = v16062;
                if (v8121) {
                  needTerminator = true;
                }
                ast$$44 = fnOrVar;
              }
            }
            break;
          case TypeScript$$14.TokenID.Declare:
            var v23810 = TypeScript$$14.AllowedElements;
            var v20837 = v23810.AmbientDeclarations;
            var v16063 = allowedElements$$2 & v20837;
            var v8124 = !v16063;
            if (v8124) {
              JAM.call(this.reportParseError, this, ["Ambient declarations are only allowed at the top-level or module scopes"]);
            }
            var v20838 = this.parsingDeclareFile;
            var v16064 = !v20838;
            if (v16064) {
              var v23811 = TypeScript$$14.Modifiers;
              var v20839 = v23811.Ambient;
              v16064 = JAM.call(TypeScript$$14.hasFlag, TypeScript$$14, [parentModifiers$$7, v20839], JAM.policy.p1);
            }
            var v8125 = v16064;
            if (v8125) {
              JAM.call(this.reportParseError, this, ["Duplicate ambient declaration in this context. (Is the enclosing module or class already ambient?)"]);
            }
            var v20840 = TypeScript$$14.Modifiers;
            var v16065 = v20840.Ambient;
            modifiers$$12 = modifiers$$12 | v16065;
            var v8126 = this.scanner;
            var v26782 = v8126.scan();
            this.currentToken = v26782;
            break;
          case TypeScript$$14.TokenID.Class:
            var v23812 = TypeScript$$14.AllowedElements;
            var v20841 = v23812.ClassDeclarations;
            var v16066 = allowedElements$$2 & v20841;
            var v20842 = TypeScript$$14.AllowedElements;
            var v16067 = v20842.None;
            var v8131 = v16066 == v16067;
            if (v8131) {
              JAM.call(this.reportParseError, this, ["class not allowed in this context"]);
              var v8127 = this.scanner;
              var v26783 = v8127.scan();
              this.currentToken = v26783;
              var v8128 = TypeScript$$14.AST;
              var v16068 = TypeScript$$14.NodeType;
              var v8129 = v16068.Error;
              ast$$44 = JAM.new(v8128, [v8129]);
              ast$$44.minChar = minChar$$27;
              var v8130 = ast$$44;
              var v16069 = this.scanner;
              var v26784 = v16069.lastTokenLimChar();
              v8130.limChar = v26784;
            } else {
              ast$$44 = JAM.call(this.parseClassDecl, this, [errorRecoverySet$$37, minChar$$27, modifiers$$12], JAM.policy.p1);
            }
            break;
          case TypeScript$$14.TokenID.Interface:
            var v23813 = TypeScript$$14.AllowedElements;
            var v20843 = v23813.InterfaceDeclarations;
            var v16070 = allowedElements$$2 & v20843;
            var v20844 = TypeScript$$14.AllowedElements;
            var v16071 = v20844.None;
            var v8136 = v16070 == v16071;
            if (v8136) {
              JAM.call(this.reportParseError, this, ["interface not allowed in this context"]);
              var v8132 = this.scanner;
              var v26785 = v8132.scan();
              this.currentToken = v26785;
              var v8133 = TypeScript$$14.AST;
              var v16072 = TypeScript$$14.NodeType;
              var v8134 = v16072.Error;
              ast$$44 = JAM.new(v8133, [v8134]);
              ast$$44.minChar = minChar$$27;
              var v8135 = ast$$44;
              var v16073 = this.scanner;
              var v26786 = v16073.lastTokenLimChar();
              v8135.limChar = v26786;
            } else {
              ast$$44 = JAM.call(this.parseInterfaceDecl, this, [errorRecoverySet$$37, modifiers$$12], JAM.policy.p1);
            }
            break;
          case TypeScript$$14.TokenID.Var:
            var v20845 = TypeScript$$14.ErrorRecoverySet;
            var v16074 = v20845.StmtStart;
            var v8137 = errorRecoverySet$$37 | v16074;
            var declAst = JAM.call(this.parseVariableDeclaration, this, [v8137, modifiers$$12, true], JAM.policy.p1);
            var v16075 = declAst.nodeType;
            var v20846 = TypeScript$$14.NodeType;
            var v16076 = v20846.VarDecl;
            var v8139 = v16075 == v16076;
            if (v8139) {
              ast$$44 = declAst;
            } else {
              var v8138 = TypeScript$$14.Block;
              ast$$44 = JAM.new(v8138, [declAst, false]);
            }
            needTerminator = true;
            break;
          case TypeScript$$14.TokenID.Static:
            var v16077 = this.currentClassDecl;
            var v8140 = v16077 == null;
            if (v8140) {
              JAM.call(this.reportParseError, this, ["Statics may only be class members"]);
            }
            mayNotBeExported();
            var v20847 = TypeScript$$14.Modifiers;
            var v16078 = v20847.Public;
            modifiers$$12 = modifiers$$12 | v16078;
            var v8141 = this.scanner;
            var v26787 = v8141.scan();
            this.currentToken = v26787;
            var v20848 = this.currentToken;
            var v16079 = v20848.tokenId;
            var v20849 = TypeScript$$14.TokenID;
            var v16080 = v20849.Get;
            var v8149 = v16079 == v16080;
            if (v8149) {
              this.prevIDTok = this.currentToken;
              var v8142 = this.scanner;
              var v26788 = v8142.scan();
              this.currentToken = v26788;
              var v16081 = TypeScript$$14.codeGenTarget;
              var v20850 = TypeScript$$14.CodeGenTarget;
              var v16082 = v20850.ES5;
              var v8143 = v16081 < v16082;
              if (v8143) {
                JAM.call(this.reportParseError, this, ["Property accessors are only available when targeting ES5 or greater"]);
              }
              var v23814 = this.currentToken;
              var v20851 = v23814.tokenId;
              var v23815 = TypeScript$$14.TokenID;
              var v20852 = v23815.Identifier;
              var v16083 = v20851 == v20852;
              var v20855 = !v16083;
              if (v20855) {
                var v20853 = this.currentToken;
                var v20854 = this.strictMode;
                v16083 = JAM.call(TypeScript$$14.convertTokToID, TypeScript$$14, [v20853, v20854], JAM.policy.p1);
              }
              var v8144 = v16083;
              if (v8144) {
                var v20856 = TypeScript$$14.Modifiers;
                var v16084 = v20856.Getter;
                modifiers$$12 = modifiers$$12 | v16084;
                this.prevIDTok = null;
              }
            } else {
              var v20857 = this.currentToken;
              var v16085 = v20857.tokenId;
              var v20858 = TypeScript$$14.TokenID;
              var v16086 = v20858.Set;
              var v8148 = v16085 == v16086;
              if (v8148) {
                var v8145 = this.scanner;
                var v26789 = v8145.scan();
                this.currentToken = v26789;
                var v16087 = TypeScript$$14.codeGenTarget;
                var v20859 = TypeScript$$14.CodeGenTarget;
                var v16088 = v20859.ES5;
                var v8146 = v16087 < v16088;
                if (v8146) {
                  JAM.call(this.reportParseError, this, ["Property accessors are only available when targeting ES5 or greater"]);
                }
                var v23816 = this.currentToken;
                var v20860 = v23816.tokenId;
                var v23817 = TypeScript$$14.TokenID;
                var v20861 = v23817.Identifier;
                var v16089 = v20860 == v20861;
                var v20864 = !v16089;
                if (v20864) {
                  var v20862 = this.currentToken;
                  var v20863 = this.strictMode;
                  v16089 = JAM.call(TypeScript$$14.convertTokToID, TypeScript$$14, [v20862, v20863], JAM.policy.p1);
                }
                var v8147 = v16089;
                if (v8147) {
                  var v20865 = TypeScript$$14.Modifiers;
                  var v16090 = v20865.Setter;
                  modifiers$$12 = modifiers$$12 | v16090;
                }
              }
            }
            var v8150 = isAmbient$$3();
            if (v8150) {
              var v20866 = TypeScript$$14.Modifiers;
              var v16091 = v20866.Ambient;
              modifiers$$12 = modifiers$$12 | v16091;
            }
            var v20867 = TypeScript$$14.ErrorRecoverySet;
            var v16092 = v20867.SColon;
            var v8151 = errorRecoverySet$$37 | v16092;
            var v16093 = this.parsingDeclareFile;
            var v20870 = !v16093;
            if (v20870) {
              var v25251 = TypeScript$$14.Modifiers;
              var v23818 = v25251.Ambient;
              var v20868 = modifiers$$12 & v23818;
              var v23819 = TypeScript$$14.Modifiers;
              var v20869 = v23819.None;
              v16093 = v20868 != v20869;
            }
            var v8152 = v16093;
            fnOrVar = JAM.call(this.parsePropertyDeclaration, this, [v8151, modifiers$$12, v8152, true], JAM.policy.p1);
            var staticsList = this.topStaticsList();
            var v16094 = staticsList;
            if (v16094) {
              var v20871 = fnOrVar.nodeType;
              var v23820 = TypeScript$$14.NodeType;
              var v20872 = v23820.VarDecl;
              v16094 = v20871 == v20872;
            }
            var v8153 = v16094;
            if (v8153) {
              JAM.call(staticsList.append, staticsList, [fnOrVar]);
            }
            var v20873 = fnOrVar.nodeType;
            var v23821 = TypeScript$$14.NodeType;
            var v20874 = v23821.VarDecl;
            var v16095 = v20873 == v20874;
            var v20876 = !v16095;
            if (v20876) {
              var v23822 = fnOrVar.nodeType;
              var v25252 = TypeScript$$14.NodeType;
              var v23823 = v25252.FuncDecl;
              var v20875 = v23822 == v23823;
              if (v20875) {
                var v23824 = fnOrVar.fncFlags;
                var v25253 = TypeScript$$14.FncFlags;
                var v23825 = v25253.IsFatArrowFunction;
                v20875 = JAM.call(TypeScript$$14.hasFlag, TypeScript$$14, [v23824, v23825], JAM.policy.p1);
              }
              v16095 = v20875;
            }
            var v8154 = v16095;
            if (v8154) {
              needTerminator = true;
            }
            ast$$44 = fnOrVar;
            break;
          case TypeScript$$14.TokenID.For:
            mayNotBeExported();
            var v20877 = TypeScript$$14.Modifiers;
            var v16096 = v20877.None;
            var v8155 = modifiers$$12 != v16096;
            if (v8155) {
              JAM.call(this.reportParseError, this, ["syntax error: for statement does not take modifiers"]);
            }
            var v8156 = this.scanner;
            minChar$$27 = v8156.startPos;
            var v16097 = TypeScript$$14.TokenID;
            var v8157 = v16097.OpenParen;
            var v23826 = TypeScript$$14.ErrorRecoverySet;
            var v20878 = v23826.ExprStart;
            var v16098 = errorRecoverySet$$37 | v20878;
            var v20879 = TypeScript$$14.ErrorRecoverySet;
            var v16099 = v20879.Var;
            var v8158 = v16098 | v16099;
            JAM.call(this.checkNextToken, this, [v8157, v8158], JAM.policy.p1);
            this.state = ParseState.ForInit;
            forInOk = true;
            var v16100 = this.currentToken;
            var v8164 = v16100.tokenId;
            switch(v8164) {
              case TypeScript$$14.TokenID.Var:
                var v23827 = TypeScript$$14.ErrorRecoverySet;
                var v20880 = v23827.SColon;
                var v16101 = errorRecoverySet$$37 | v20880;
                var v20881 = TypeScript$$14.ErrorRecoverySet;
                var v16102 = v20881.In;
                var v8159 = v16101 | v16102;
                var v16103 = TypeScript$$14.Modifiers;
                var v8160 = v16103.None;
                temp$$15 = JAM.call(this.parseVariableDeclaration, this, [v8159, v8160, false], JAM.policy.p1);
                break;
              case TypeScript$$14.TokenID.Semicolon:
                temp$$15 = null;
                this.state = ParseState.ForCondStart;
                break;
              default:
                var v23828 = TypeScript$$14.ErrorRecoverySet;
                var v20882 = v23828.SColon;
                var v16104 = errorRecoverySet$$37 | v20882;
                var v20883 = TypeScript$$14.ErrorRecoverySet;
                var v16105 = v20883.In;
                var v8161 = v16104 | v16105;
                var v16106 = TypeScript$$14.OperatorPrecedence;
                var v8162 = v16106.None;
                var v8163 = TypeContext.NoTypes;
                temp$$15 = JAM.call(this.parseExpr, this, [v8161, v8162, false, v8163], JAM.policy.p1);
            }
            this.state = ParseState.ForInitAfterVar;
            var v20884 = this.currentToken;
            var v16107 = v20884.tokenId;
            var v20885 = TypeScript$$14.TokenID;
            var v16108 = v20885.In;
            var v8192 = v16107 == v16108;
            if (v8192) {
              var v16109 = temp$$15 == null;
              var v20886 = !v16109;
              if (v20886) {
                v16109 = !forInOk;
              }
              var v8178 = v16109;
              if (v8178) {
                JAM.call(this.reportParseError, this, ["malformed for statement"]);
                var v8168 = this.errorRecovery;
                if (v8168) {
                  var v20887 = TypeScript$$14.ErrorRecoverySet;
                  var v16110 = v20887.StmtStart;
                  var v8165 = errorRecoverySet$$37 | v16110;
                  JAM.call(this.skip, this, [v8165]);
                  var v8166 = TypeScript$$14.AST;
                  var v16111 = TypeScript$$14.NodeType;
                  var v8167 = v16111.Empty;
                  ast$$44 = JAM.new(v8166, [v8167]);
                  var v16112 = ast$$44.flags;
                  var v20888 = TypeScript$$14.ASTFlags;
                  var v16113 = v20888.Error;
                  ast$$44.flags = v16112 | v16113;
                }
              } else {
                var v8169 = this.scanner;
                var v26790 = v8169.scan();
                this.currentToken = v26790;
                var v8170 = TypeScript$$14.ForInStatement;
                var v23829 = TypeScript$$14.ErrorRecoverySet;
                var v20889 = v23829.RParen;
                var v16114 = v20889 | errorRecoverySet$$37;
                var v20890 = TypeScript$$14.OperatorPrecedence;
                var v16115 = v20890.Comma;
                var v16116 = TypeContext.NoTypes;
                var v8171 = JAM.call(this.parseExpr, this, [v16114, v16115, false, v16116], JAM.policy.p1);
                var forInStmt = JAM.new(v8170, [temp$$15, v8171]);
                var v8172 = this.scanner;
                forInStmt.limChar = v8172.pos;
                var v8173 = forInStmt.statement;
                v8173.minChar = minChar$$27;
                var v8174 = forInStmt.statement;
                var v16117 = this.scanner;
                v8174.limChar = v16117.pos;
                var v16118 = TypeScript$$14.TokenID;
                var v8175 = v16118.CloseParen;
                var v20891 = TypeScript$$14.ErrorRecoverySet;
                var v16119 = v20891.StmtStart;
                var v8176 = v16119 | errorRecoverySet$$37;
                JAM.call(this.checkCurrentToken, this, [v8175, v8176], JAM.policy.p1);
                JAM.call(this.pushStmt, this, [forInStmt, labelList$$1], JAM.policy.p1);
                var v8177 = forInStmt;
                var v26791 = JAM.call(this.parseStatement, this, [errorRecoverySet$$37, allowedElements$$2, parentModifiers$$7], JAM.policy.p1);
                v8177.body = v26791;
                this.popStmt();
                forInStmt.minChar = minChar$$27;
                ast$$44 = forInStmt;
              }
            } else {
              var v8179 = TypeScript$$14.ForStatement;
              var forStmt = JAM.new(v8179, [temp$$15]);
              forStmt.minChar = minChar$$27;
              var v16120 = TypeScript$$14.TokenID;
              var v8180 = v16120.Semicolon;
              JAM.call(this.checkCurrentToken, this, [v8180, errorRecoverySet$$37], JAM.policy.p1);
              var v20892 = this.currentToken;
              var v16121 = v20892.tokenId;
              var v20893 = TypeScript$$14.TokenID;
              var v16122 = v20893.Semicolon;
              var v8184 = v16121 == v16122;
              if (v8184) {
                forStmt.cond = null;
              } else {
                var v8181 = forStmt;
                var v25254 = TypeScript$$14.ErrorRecoverySet;
                var v23830 = v25254.SColon;
                var v20894 = errorRecoverySet$$37 | v23830;
                var v23831 = TypeScript$$14.ErrorRecoverySet;
                var v20895 = v23831.RParen;
                var v16123 = v20894 | v20895;
                var v20896 = TypeScript$$14.OperatorPrecedence;
                var v16124 = v20896.None;
                var v16125 = TypeContext.NoTypes;
                var v26792 = JAM.call(this.parseExpr, this, [v16123, v16124, true, v16125], JAM.policy.p1);
                v8181.cond = v26792;
                var v20897 = this.currentToken;
                var v16126 = v20897.tokenId;
                var v20898 = TypeScript$$14.TokenID;
                var v16127 = v20898.Semicolon;
                var v8183 = v16126 != v16127;
                if (v8183) {
                  var v20899 = TypeScript$$14.ErrorRecoverySet;
                  var v16128 = v20899.StmtStart;
                  var v8182 = errorRecoverySet$$37 | v16128;
                  JAM.call(this.skip, this, [v8182]);
                  ast$$44 = forStmt;
                  var v16129 = ast$$44.flags;
                  var v20900 = TypeScript$$14.ASTFlags;
                  var v16130 = v20900.Error;
                  ast$$44.flags = v16129 | v16130;
                }
              }
              var v8185 = this.scanner;
              var v26793 = v8185.scan();
              this.currentToken = v26793;
              var v20901 = this.currentToken;
              var v16131 = v20901.tokenId;
              var v20902 = TypeScript$$14.TokenID;
              var v16132 = v20902.CloseParen;
              var v8187 = v16131 == v16132;
              if (v8187) {
                forStmt.incr = null;
              } else {
                var v8186 = forStmt;
                var v25255 = TypeScript$$14.ErrorRecoverySet;
                var v23832 = v25255.SColon;
                var v20903 = errorRecoverySet$$37 | v23832;
                var v23833 = TypeScript$$14.ErrorRecoverySet;
                var v20904 = v23833.RParen;
                var v16133 = v20903 | v20904;
                var v20905 = TypeScript$$14.OperatorPrecedence;
                var v16134 = v20905.None;
                var v16135 = TypeContext.NoTypes;
                var v26794 = JAM.call(this.parseExpr, this, [v16133, v16134, true, v16135], JAM.policy.p1);
                v8186.incr = v26794;
              }
              var v16136 = TypeScript$$14.TokenID;
              var v8188 = v16136.CloseParen;
              var v20906 = TypeScript$$14.ErrorRecoverySet;
              var v16137 = v20906.LCurly;
              var v8189 = errorRecoverySet$$37 | v16137;
              JAM.call(this.checkCurrentToken, this, [v8188, v8189], JAM.policy.p1);
              JAM.call(this.pushStmt, this, [forStmt, labelList$$1], JAM.policy.p1);
              var v8190 = forStmt;
              var v26795 = JAM.call(this.parseStatement, this, [errorRecoverySet$$37, allowedElements$$2, parentModifiers$$7], JAM.policy.p1);
              v8190.body = v26795;
              this.popStmt();
              var v8191 = forStmt.body;
              forStmt.limChar = v8191.limChar;
              ast$$44 = forStmt;
            }
            break;
          case TypeScript$$14.TokenID.With:
            var v16138 = TypeScript$$14.codeGenTarget;
            var v20907 = TypeScript$$14.CodeGenTarget;
            var v16139 = v20907.ES5;
            var v8193 = v16138 < v16139;
            if (v8193) {
              JAM.call(this.reportParseError, this, ["'with' statements are only available in ES5 codegen mode or better"]);
            }
            var v8194 = this.strictMode;
            if (v8194) {
              JAM.call(this.reportParseError, this, ["'with' statements are not available in strict mode"]);
            }
            mayNotBeExported();
            var v20908 = TypeScript$$14.Modifiers;
            var v16140 = v20908.None;
            var v8195 = modifiers$$12 != v16140;
            if (v8195) {
              JAM.call(this.reportParseError, this, ["'with' statement does not take modifiers"]);
            }
            var v8196 = this.scanner;
            minChar$$27 = v8196.startPos;
            var v16141 = TypeScript$$14.TokenID;
            var v8197 = v16141.OpenParen;
            var v23834 = TypeScript$$14.ErrorRecoverySet;
            var v20909 = v23834.ExprStart;
            var v16142 = errorRecoverySet$$37 | v20909;
            var v20910 = TypeScript$$14.ErrorRecoverySet;
            var v16143 = v20910.Var;
            var v8198 = v16142 | v16143;
            JAM.call(this.checkNextToken, this, [v8197, v8198], JAM.policy.p1);
            var v20911 = TypeScript$$14.ErrorRecoverySet;
            var v16144 = v20911.Colon;
            var v8199 = errorRecoverySet$$37 | v16144;
            var v16145 = TypeScript$$14.OperatorPrecedence;
            var v8200 = v16145.None;
            var v8201 = TypeContext.NoTypes;
            var expr$$5 = JAM.call(this.parseExpr, this, [v8199, v8200, true, v8201], JAM.policy.p1);
            var v16146 = TypeScript$$14.TokenID;
            var v8202 = v16146.CloseParen;
            var v20912 = TypeScript$$14.ErrorRecoverySet;
            var v16147 = v20912.LCurly;
            var v8203 = errorRecoverySet$$37 | v16147;
            JAM.call(this.checkCurrentToken, this, [v8202, v8203], JAM.policy.p1);
            var v8204 = TypeScript$$14.WithStatement;
            var withStmt = JAM.new(v8204, [expr$$5]);
            var v8205 = withStmt;
            var v26796 = JAM.call(this.parseStatement, this, [errorRecoverySet$$37, allowedElements$$2, parentModifiers$$7], JAM.policy.p1);
            v8205.body = v26796;
            withStmt.minChar = minChar$$27;
            var v8206 = withStmt.body;
            withStmt.limChar = v8206.limChar;
            ast$$44 = withStmt;
            break;
          case TypeScript$$14.TokenID.Switch:
            mayNotBeExported();
            var v20913 = TypeScript$$14.Modifiers;
            var v16148 = v20913.None;
            var v8207 = modifiers$$12 != v16148;
            if (v8207) {
              JAM.call(this.reportParseError, this, ["'switch' statement does not take modifiers"]);
            }
            var v16149 = TypeScript$$14.TokenID;
            var v8208 = v16149.OpenParen;
            var v20914 = TypeScript$$14.ErrorRecoverySet;
            var v16150 = v20914.ExprStart;
            var v8209 = errorRecoverySet$$37 | v16150;
            JAM.call(this.checkNextToken, this, [v8208, v8209], JAM.policy.p1);
            var v8210 = TypeScript$$14.SwitchStatement;
            var v23835 = TypeScript$$14.ErrorRecoverySet;
            var v20915 = v23835.RParen;
            var v16151 = errorRecoverySet$$37 | v20915;
            var v20916 = TypeScript$$14.OperatorPrecedence;
            var v16152 = v20916.None;
            var v16153 = TypeContext.NoTypes;
            var v8211 = JAM.call(this.parseExpr, this, [v16151, v16152, true, v16153], JAM.policy.p1);
            var switchStmt = JAM.new(v8210, [v8211]);
            var v8212 = switchStmt.statement;
            v8212.minChar = minChar$$27;
            var v8213 = switchStmt.statement;
            var v16154 = this.scanner;
            v8213.limChar = v16154.pos;
            var v16155 = TypeScript$$14.TokenID;
            var v8214 = v16155.CloseParen;
            var v20917 = TypeScript$$14.ErrorRecoverySet;
            var v16156 = v20917.LCurly;
            var v8215 = errorRecoverySet$$37 | v16156;
            JAM.call(this.checkCurrentToken, this, [v8214, v8215], JAM.policy.p1);
            var v8216 = this.scanner;
            var caseListMinChar = v8216.startPos;
            var v16157 = TypeScript$$14.TokenID;
            var v8217 = v16157.OpenBrace;
            var v20918 = TypeScript$$14.ErrorRecoverySet;
            var v16158 = v20918.SCase;
            var v8218 = errorRecoverySet$$37 | v16158;
            JAM.call(this.checkCurrentToken, this, [v8217, v8218], JAM.policy.p1);
            switchStmt.defaultCase = null;
            var v8219 = switchStmt;
            var v16159 = TypeScript$$14.ASTList;
            var v26797 = new v16159;
            v8219.caseList = v26797;
            var caseStmt = null;
            JAM.call(this.pushStmt, this, [switchStmt, labelList$$1], JAM.policy.p1);
            for (;;) {
              var v23836 = this.currentToken;
              var v20919 = v23836.tokenId;
              var v23837 = TypeScript$$14.TokenID;
              var v20920 = v23837.Case;
              var v16160 = v20919 == v20920;
              var v20923 = !v16160;
              if (v20923) {
                var v23838 = this.currentToken;
                var v20921 = v23838.tokenId;
                var v23839 = TypeScript$$14.TokenID;
                var v20922 = v23839.Default;
                v16160 = v20921 == v20922;
              }
              var v8233 = v16160;
              if (v8233) {
                var v16161 = this.currentToken;
                var v8220 = v16161.tokenId;
                var v16162 = TypeScript$$14.TokenID;
                var v8221 = v16162.Default;
                var isDefault = v8220 == v8221;
                var v8222 = TypeScript$$14.CaseStatement;
                caseStmt = new v8222;
                var v8223 = this.scanner;
                caseStmt.minChar = v8223.startPos;
                var v8224 = this.scanner;
                var v26798 = v8224.scan();
                this.currentToken = v26798;
                if (isDefault) {
                  switchStmt.defaultCase = caseStmt;
                } else {
                  var v8225 = caseStmt;
                  var v23840 = TypeScript$$14.ErrorRecoverySet;
                  var v20924 = v23840.Colon;
                  var v16163 = errorRecoverySet$$37 | v20924;
                  var v20925 = TypeScript$$14.OperatorPrecedence;
                  var v16164 = v20925.None;
                  var v16165 = TypeContext.NoTypes;
                  var v26799 = JAM.call(this.parseExpr, this, [v16163, v16164, true, v16165], JAM.policy.p1);
                  v8225.expr = v26799;
                }
                var v16166 = TypeScript$$14.TokenID;
                var v8226 = v16166.Colon;
                var v20926 = TypeScript$$14.ErrorRecoverySet;
                var v16167 = v20926.StmtStart;
                var v8227 = errorRecoverySet$$37 | v16167;
                JAM.call(this.checkCurrentToken, this, [v8226, v8227], JAM.policy.p1);
                var v8228 = caseStmt;
                var v16168 = TypeScript$$14.ASTList;
                var v26800 = new v16168;
                v8228.body = v26800;
                var v20927 = TypeScript$$14.ErrorRecoverySet;
                var v16169 = v20927.RCurly;
                var v8229 = errorRecoverySet$$37 | v16169;
                var v8230 = caseStmt.body;
                JAM.call(this.parseStatementList, this, [v8229, v8230, false, true, allowedElements$$2, modifiers$$12], JAM.policy.p1);
                var v8231 = caseStmt.body;
                caseStmt.limChar = v8231.limChar;
                var v8232 = switchStmt.caseList;
                JAM.call(v8232.append, v8232, [caseStmt]);
              } else {
                break;
              }
            }
            var v8234 = switchStmt.caseList;
            v8234.minChar = caseListMinChar;
            var v8235 = switchStmt.caseList;
            var v16170 = this.scanner;
            v8235.limChar = v16170.pos;
            var v8236 = switchStmt.caseList;
            switchStmt.limChar = v8236.limChar;
            var v16171 = TypeScript$$14.TokenID;
            var v8237 = v16171.CloseBrace;
            JAM.call(this.checkCurrentToken, this, [v8237, errorRecoverySet$$37], JAM.policy.p1);
            this.popStmt();
            ast$$44 = switchStmt;
            break;
          case TypeScript$$14.TokenID.While:
            mayNotBeExported();
            var v20928 = TypeScript$$14.Modifiers;
            var v16172 = v20928.None;
            var v8238 = modifiers$$12 != v16172;
            if (v8238) {
              JAM.call(this.reportParseError, this, ["'while' statement does not take modifiers"]);
            }
            var v8239 = this.scanner;
            minChar$$27 = v8239.startPos;
            var v16173 = TypeScript$$14.TokenID;
            var v8240 = v16173.OpenParen;
            var v20929 = TypeScript$$14.ErrorRecoverySet;
            var v16174 = v20929.ExprStart;
            var v8241 = v16174 | errorRecoverySet$$37;
            JAM.call(this.checkNextToken, this, [v8240, v8241], JAM.policy.p1);
            var v8242 = TypeScript$$14.WhileStatement;
            var v23841 = TypeScript$$14.ErrorRecoverySet;
            var v20930 = v23841.RParen;
            var v16175 = errorRecoverySet$$37 | v20930;
            var v20931 = TypeScript$$14.OperatorPrecedence;
            var v16176 = v20931.None;
            var v16177 = TypeContext.NoTypes;
            var v8243 = JAM.call(this.parseExpr, this, [v16175, v16176, true, v16177], JAM.policy.p1);
            var whileStmt = JAM.new(v8242, [v8243]);
            whileStmt.minChar = minChar$$27;
            var v16178 = TypeScript$$14.TokenID;
            var v8244 = v16178.CloseParen;
            var v20932 = TypeScript$$14.ErrorRecoverySet;
            var v16179 = v20932.StmtStart;
            var v8245 = errorRecoverySet$$37 | v16179;
            JAM.call(this.checkCurrentToken, this, [v8244, v8245], JAM.policy.p1);
            JAM.call(this.pushStmt, this, [whileStmt, labelList$$1], JAM.policy.p1);
            var v8246 = whileStmt;
            var v26801 = JAM.call(this.parseStatement, this, [errorRecoverySet$$37, allowedElements$$2, parentModifiers$$7], JAM.policy.p1);
            v8246.body = v26801;
            var v8247 = whileStmt.body;
            whileStmt.limChar = v8247.limChar;
            this.popStmt();
            ast$$44 = whileStmt;
            break;
          case TypeScript$$14.TokenID.Do:
            mayNotBeExported();
            var v20933 = TypeScript$$14.Modifiers;
            var v16180 = v20933.None;
            var v8248 = modifiers$$12 != v16180;
            if (v8248) {
              JAM.call(this.reportParseError, this, ["'do' statement does not take modifiers"]);
            }
            var v8249 = this.scanner;
            minChar$$27 = v8249.startPos;
            var v8250 = this.scanner;
            var v26802 = v8250.scan();
            this.currentToken = v26802;
            var v8251 = TypeScript$$14.DoWhileStatement;
            var doStmt = new v8251;
            doStmt.minChar = minChar$$27;
            JAM.call(this.pushStmt, this, [doStmt, labelList$$1], JAM.policy.p1);
            var v8252 = doStmt;
            var v23842 = TypeScript$$14.ErrorRecoverySet;
            var v20934 = v23842.While;
            var v16181 = errorRecoverySet$$37 | v20934;
            var v26803 = JAM.call(this.parseStatement, this, [v16181, allowedElements$$2, parentModifiers$$7], JAM.policy.p1);
            v8252.body = v26803;
            this.popStmt();
            var v8253 = doStmt;
            var v16182 = TypeScript$$14.Identifier;
            var v26804 = JAM.new(v16182, ["while"]);
            v8253.whileAST = v26804;
            var v8254 = doStmt.whileAST;
            var v16183 = this.scanner;
            v8254.minChar = v16183.startPos;
            var v16184 = TypeScript$$14.TokenID;
            var v8255 = v16184.While;
            var v20935 = TypeScript$$14.ErrorRecoverySet;
            var v16185 = v20935.LParen;
            var v8256 = errorRecoverySet$$37 | v16185;
            JAM.call(this.checkCurrentToken, this, [v8255, v8256], JAM.policy.p1);
            var v8257 = doStmt.whileAST;
            var v20936 = doStmt.whileAST;
            var v16186 = v20936.minChar;
            v8257.limChar = v16186 + 5;
            var v16187 = TypeScript$$14.TokenID;
            var v8258 = v16187.OpenParen;
            var v20937 = TypeScript$$14.ErrorRecoverySet;
            var v16188 = v20937.ExprStart;
            var v8259 = errorRecoverySet$$37 | v16188;
            JAM.call(this.checkCurrentToken, this, [v8258, v8259], JAM.policy.p1);
            var v8260 = doStmt;
            var v23843 = TypeScript$$14.ErrorRecoverySet;
            var v20938 = v23843.RParen;
            var v16189 = errorRecoverySet$$37 | v20938;
            var v20939 = TypeScript$$14.OperatorPrecedence;
            var v16190 = v20939.None;
            var v16191 = TypeContext.NoTypes;
            var v26805 = JAM.call(this.parseExpr, this, [v16189, v16190, true, v16191], JAM.policy.p1);
            v8260.cond = v26805;
            var v8261 = this.scanner;
            doStmt.limChar = v8261.pos;
            var v16192 = TypeScript$$14.TokenID;
            var v8262 = v16192.CloseParen;
            JAM.call(this.checkCurrentToken, this, [v8262, errorRecoverySet$$37], JAM.policy.p1);
            ast$$44 = doStmt;
            var v20940 = this.currentToken;
            var v16193 = v20940.tokenId;
            var v20941 = TypeScript$$14.TokenID;
            var v16194 = v20941.Semicolon;
            var v8264 = v16193 == v16194;
            if (v8264) {
              var v8263 = this.scanner;
              var v26806 = v8263.scan();
              this.currentToken = v26806;
            }
            break;
          case TypeScript$$14.TokenID.If:
            mayNotBeExported();
            var v20942 = TypeScript$$14.Modifiers;
            var v16195 = v20942.None;
            var v8265 = modifiers$$12 != v16195;
            if (v8265) {
              JAM.call(this.reportParseError, this, ["if statement does not take modifiers"]);
            }
            var v8266 = this.scanner;
            minChar$$27 = v8266.startPos;
            var v16196 = TypeScript$$14.TokenID;
            var v8267 = v16196.OpenParen;
            var v20943 = TypeScript$$14.ErrorRecoverySet;
            var v16197 = v20943.ExprStart;
            var v8268 = errorRecoverySet$$37 | v16197;
            JAM.call(this.checkNextToken, this, [v8267, v8268], JAM.policy.p1);
            var v8269 = TypeScript$$14.IfStatement;
            var v23844 = TypeScript$$14.ErrorRecoverySet;
            var v20944 = v23844.LParen;
            var v16198 = errorRecoverySet$$37 | v20944;
            var v20945 = TypeScript$$14.OperatorPrecedence;
            var v16199 = v20945.None;
            var v16200 = TypeContext.NoTypes;
            var v8270 = JAM.call(this.parseExpr, this, [v16198, v16199, true, v16200], JAM.policy.p1);
            var ifStmt = JAM.new(v8269, [v8270]);
            ifStmt.minChar = minChar$$27;
            var v8271 = ifStmt.statement;
            v8271.minChar = minChar$$27;
            var v8272 = ifStmt.statement;
            var v16201 = this.scanner;
            v8272.limChar = v16201.pos;
            var v16202 = TypeScript$$14.TokenID;
            var v8273 = v16202.CloseParen;
            var v20946 = TypeScript$$14.ErrorRecoverySet;
            var v16203 = v20946.StmtStart;
            var v8274 = errorRecoverySet$$37 | v16203;
            JAM.call(this.checkCurrentToken, this, [v8273, v8274], JAM.policy.p1);
            JAM.call(this.pushStmt, this, [ifStmt, labelList$$1], JAM.policy.p1);
            var v8275 = ifStmt;
            var v23845 = TypeScript$$14.ErrorRecoverySet;
            var v20947 = v23845.Else;
            var v16204 = v20947 | errorRecoverySet$$37;
            var v26807 = JAM.call(this.parseStatement, this, [v16204, allowedElements$$2, parentModifiers$$7], JAM.policy.p1);
            v8275.thenBod = v26807;
            var v8276 = ifStmt.thenBod;
            ifStmt.limChar = v8276.limChar;
            var v20948 = this.currentToken;
            var v16205 = v20948.tokenId;
            var v20949 = TypeScript$$14.TokenID;
            var v16206 = v20949.Else;
            var v8280 = v16205 == v16206;
            if (v8280) {
              var v8277 = this.scanner;
              var v26808 = v8277.scan();
              this.currentToken = v26808;
              var v8278 = ifStmt;
              var v26809 = JAM.call(this.parseStatement, this, [errorRecoverySet$$37, allowedElements$$2, parentModifiers$$7], JAM.policy.p1);
              v8278.elseBod = v26809;
              var v8279 = ifStmt.elseBod;
              ifStmt.limChar = v8279.limChar;
            }
            this.popStmt();
            ast$$44 = ifStmt;
            break;
          case TypeScript$$14.TokenID.Try:
            mayNotBeExported();
            var v20950 = TypeScript$$14.Modifiers;
            var v16207 = v20950.None;
            var v8281 = modifiers$$12 != v16207;
            if (v8281) {
              JAM.call(this.reportParseError, this, ["try statement does not take modifiers"]);
            }
            var v8282 = this.scanner;
            minChar$$27 = v8282.startPos;
            ast$$44 = JAM.call(this.parseTryCatchFinally, this, [errorRecoverySet$$37, parentModifiers$$7, labelList$$1], JAM.policy.p1);
            break;
          case TypeScript$$14.TokenID.OpenBrace:
            mayNotBeExported();
            var v20951 = TypeScript$$14.Modifiers;
            var v16208 = v20951.None;
            var v8283 = modifiers$$12 != v16208;
            if (v8283) {
              JAM.call(this.reportParseError, this, ["block does not take modifiers"]);
            }
            var v8284 = this.scanner;
            minChar$$27 = v8284.startPos;
            var v8285 = this.scanner;
            var v26810 = v8285.scan();
            this.currentToken = v26810;
            var v8286 = TypeScript$$14.Block;
            var v16209 = TypeScript$$14.ASTList;
            var v8287 = new v16209;
            var block$$1 = JAM.new(v8286, [v8287, true]);
            JAM.call(this.pushStmt, this, [block$$1, labelList$$1], JAM.policy.p1);
            var v20952 = TypeScript$$14.ErrorRecoverySet;
            var v16210 = v20952.RCurly;
            var v8288 = errorRecoverySet$$37 | v16210;
            var v8289 = block$$1.statements;
            var v16211 = TypeScript$$14.AllowedElements;
            var v8290 = v16211.None;
            JAM.call(this.parseStatementList, this, [v8288, v8289, false, false, v8290, modifiers$$12], JAM.policy.p1);
            this.popStmt();
            var v8291 = block$$1.statements;
            v8291.minChar = minChar$$27;
            var v8292 = block$$1.statements;
            var v16212 = this.scanner;
            v8292.limChar = v16212.pos;
            var v8293 = block$$1.statements;
            block$$1.minChar = v8293.minChar;
            var v8294 = block$$1.statements;
            block$$1.limChar = v8294.limChar;
            var v16213 = TypeScript$$14.TokenID;
            var v8295 = v16213.CloseBrace;
            JAM.call(this.checkCurrentToken, this, [v8295, errorRecoverySet$$37], JAM.policy.p1);
            ast$$44 = block$$1;
            break;
          case TypeScript$$14.TokenID.Semicolon:
            mayNotBeExported();
            var v20953 = TypeScript$$14.Modifiers;
            var v16214 = v20953.None;
            var v8296 = modifiers$$12 != v16214;
            if (v8296) {
              JAM.call(this.reportParseError, this, ["modifier can not appear here"]);
            }
            var v8297 = TypeScript$$14.AST;
            var v16215 = TypeScript$$14.NodeType;
            var v8298 = v16215.Empty;
            ast$$44 = JAM.new(v8297, [v8298]);
            var v8299 = this.scanner;
            var v26811 = v8299.scan();
            this.currentToken = v26811;
            break;
          case TypeScript$$14.TokenID.Break:
          ;
          case TypeScript$$14.TokenID.Continue:
            mayNotBeExported();
            var v20954 = TypeScript$$14.Modifiers;
            var v16216 = v20954.None;
            var v8300 = modifiers$$12 != v16216;
            if (v8300) {
              JAM.call(this.reportParseError, this, ["modifiers can not appear before jump statement"]);
            }
            var v8301 = TypeScript$$14.Jump;
            var v16217;
            var v25256 = this.currentToken;
            var v23846 = v25256.tokenId;
            var v25257 = TypeScript$$14.TokenID;
            var v23847 = v25257.Break;
            var v20957 = v23846 == v23847;
            if (v20957) {
              var v20955 = TypeScript$$14.NodeType;
              v16217 = v20955.Break;
            } else {
              var v20956 = TypeScript$$14.NodeType;
              v16217 = v20956.Continue;
            }
            var v8302 = v16217;
            var jump$$1 = JAM.new(v8301, [v8302]);
            var v8303 = this.scanner;
            var v26812 = v8303.scan();
            this.currentToken = v26812;
            var v23848 = this.currentToken;
            var v20958 = v23848.tokenId;
            var v23849 = TypeScript$$14.TokenID;
            var v20959 = v23849.Identifier;
            var v16218 = v20958 == v20959;
            if (v16218) {
              var v23850 = this.scanner;
              var v20960 = v23850.lastTokenHadNewline();
              v16218 = !v20960;
            }
            var v8306 = v16218;
            if (v8306) {
              var v8304 = jump$$1;
              var v16219 = this.currentToken;
              var v26813 = v16219.getText();
              v8304.target = v26813;
              var v8305 = this.scanner;
              var v26814 = v8305.scan();
              this.currentToken = v26814;
            }
            JAM.call(this.resolveJumpTarget, this, [jump$$1]);
            ast$$44 = jump$$1;
            needTerminator = true;
            break;
          case TypeScript$$14.TokenID.Return:
            mayNotBeExported();
            var v20961 = TypeScript$$14.Modifiers;
            var v16220 = v20961.None;
            var v8307 = modifiers$$12 != v16220;
            if (v8307) {
              JAM.call(this.reportParseError, this, ["modifiers can not appear before return statement"]);
            }
            var v16221 = this.inFunction;
            var v8308 = !v16221;
            if (v8308) {
              JAM.call(this.reportParseError, this, ["return statement outside of function body"]);
            }
            var v8309 = this.scanner;
            minChar$$27 = v8309.startPos;
            var v8310 = this.scanner;
            var v26815 = v8310.scan();
            this.currentToken = v26815;
            var v8311 = TypeScript$$14.ReturnStatement;
            var retStmt$$1 = new v8311;
            retStmt$$1.minChar = minChar$$27;
            var v25258 = this.currentToken;
            var v23851 = v25258.tokenId;
            var v25259 = TypeScript$$14.TokenID;
            var v23852 = v25259.Semicolon;
            var v20962 = v23851 != v23852;
            if (v20962) {
              var v25260 = this.currentToken;
              var v23853 = v25260.tokenId;
              var v25261 = TypeScript$$14.TokenID;
              var v23854 = v25261.CloseBrace;
              v20962 = v23853 != v23854;
            }
            var v16222 = v20962;
            if (v16222) {
              var v23855 = this.scanner;
              var v20963 = v23855.lastTokenHadNewline();
              v16222 = !v20963;
            }
            var v8313 = v16222;
            if (v8313) {
              var v8312 = retStmt$$1;
              var v23856 = TypeScript$$14.ErrorRecoverySet;
              var v20964 = v23856.SColon;
              var v16223 = errorRecoverySet$$37 | v20964;
              var v20965 = TypeScript$$14.OperatorPrecedence;
              var v16224 = v20965.None;
              var v16225 = TypeContext.NoTypes;
              var v26816 = JAM.call(this.parseExpr, this, [v16223, v16224, true, v16225], JAM.policy.p1);
              v8312.returnExpression = v26816;
            }
            needTerminator = true;
            var v8314 = retStmt$$1;
            var v16226 = this.scanner;
            var v26817 = v16226.lastTokenLimChar();
            v8314.limChar = v26817;
            ast$$44 = retStmt$$1;
            break;
          case TypeScript$$14.TokenID.Throw:
            mayNotBeExported();
            var v20966 = TypeScript$$14.Modifiers;
            var v16227 = v20966.None;
            var v8315 = modifiers$$12 != v16227;
            if (v8315) {
              JAM.call(this.reportParseError, this, ["modifiers can not appear before a throw statement"]);
            }
            var v8316 = this.scanner;
            minChar$$27 = v8316.startPos;
            var v8317 = this.scanner;
            var v26818 = v8317.scan();
            this.currentToken = v26818;
            var v25262 = this.currentToken;
            var v23857 = v25262.tokenId;
            var v25263 = TypeScript$$14.TokenID;
            var v23858 = v25263.Semicolon;
            var v20967 = v23857 != v23858;
            if (v20967) {
              var v25264 = this.currentToken;
              var v23859 = v25264.tokenId;
              var v25265 = TypeScript$$14.TokenID;
              var v23860 = v25265.CloseBrace;
              v20967 = v23859 != v23860;
            }
            var v16228 = v20967;
            if (v16228) {
              var v23861 = this.scanner;
              var v20968 = v23861.lastTokenHadNewline();
              v16228 = !v20968;
            }
            var v8321 = v16228;
            if (v8321) {
              var v20969 = TypeScript$$14.ErrorRecoverySet;
              var v16229 = v20969.SColon;
              var v8318 = errorRecoverySet$$37 | v16229;
              var v16230 = TypeScript$$14.OperatorPrecedence;
              var v8319 = v16230.None;
              var v8320 = TypeContext.NoTypes;
              temp$$15 = JAM.call(this.parseExpr, this, [v8318, v8319, true, v8320], JAM.policy.p1);
            } else {
              JAM.call(this.reportParseError, this, ["throw with no target"]);
              temp$$15 = null;
            }
            var v8322 = TypeScript$$14.UnaryExpression;
            var v16231 = TypeScript$$14.NodeType;
            var v8323 = v16231.Throw;
            ast$$44 = JAM.new(v8322, [v8323, temp$$15]);
            var v8324 = ast$$44;
            var v16232 = this.scanner;
            var v26819 = v16232.lastTokenLimChar();
            v8324.limChar = v26819;
            needTerminator = true;
            break;
          case TypeScript$$14.TokenID.Enum:
            var v8325 = this.scanner;
            var v26820 = v8325.scan();
            this.currentToken = v26820;
            ast$$44 = JAM.call(this.parseEnumDecl, this, [errorRecoverySet$$37, modifiers$$12], JAM.policy.p1);
            ast$$44.minChar = minChar$$27;
            var v8326 = ast$$44;
            var v16233 = this.scanner;
            var v26821 = v16233.lastTokenLimChar();
            v8326.limChar = v26821;
            var v20970 = this.parsingDeclareFile;
            var v23862 = !v20970;
            if (v23862) {
              v20970 = this.ambientModule;
            }
            var v16234 = v20970;
            var v20972 = !v16234;
            if (v20972) {
              var v23863 = TypeScript$$14.Modifiers;
              var v20971 = v23863.Ambient;
              v16234 = JAM.call(TypeScript$$14.hasFlag, TypeScript$$14, [modifiers$$12, v20971], JAM.policy.p1);
            }
            var v8327 = v16234;
            if (v8327) {
              var v16235 = ast$$44.modFlags;
              var v20973 = TypeScript$$14.ModuleFlags;
              var v16236 = v20973.Ambient;
              ast$$44.modFlags = v16235 | v16236;
            }
            var v20974 = this.parsingDeclareFile;
            var v23864 = !v20974;
            if (v23864) {
              v20974 = this.ambientModule;
            }
            var v16237 = v20974;
            var v20976 = !v16237;
            if (v20976) {
              var v23865 = TypeScript$$14.Modifiers;
              var v20975 = v23865.Exported;
              v16237 = JAM.call(TypeScript$$14.hasFlag, TypeScript$$14, [modifiers$$12, v20975], JAM.policy.p1);
            }
            var v8328 = v16237;
            if (v8328) {
              var v16238 = ast$$44.modFlags;
              var v20977 = TypeScript$$14.ModuleFlags;
              var v16239 = v20977.Exported;
              ast$$44.modFlags = v16238 | v16239;
            }
            break;
          case TypeScript$$14.TokenID.Debugger:
            mayNotBeExported();
            var v20978 = TypeScript$$14.Modifiers;
            var v16240 = v20978.None;
            var v8329 = modifiers$$12 != v16240;
            if (v8329) {
              JAM.call(this.reportParseError, this, ["modifiers can not appear before debugger statement"]);
            }
            var v8330 = this.scanner;
            minChar$$27 = v8330.startPos;
            var v8331 = this.scanner;
            var v26822 = v8331.scan();
            this.currentToken = v26822;
            var v8332 = TypeScript$$14.DebuggerStatement;
            var debuggerStmt = new v8332;
            debuggerStmt.minChar = minChar$$27;
            needTerminator = true;
            var v8333 = debuggerStmt;
            var v16241 = this.scanner;
            var v26823 = v16241.lastTokenLimChar();
            v8333.limChar = v26823;
            ast$$44 = debuggerStmt;
            break;
          default:
            var v20979 = TypeScript$$14.Modifiers;
            var v16242 = v20979.None;
            var v8334 = modifiers$$12 != v16242;
            if (v8334) {
              JAM.call(this.reportParseError, this, ["modifiers can not appear before an expression statement or label"]);
            }
            var v8335 = this.scanner;
            minChar$$27 = v8335.startPos;
            var v8336 = this.scanner;
            var svPos = v8336.pos;
            var v23866 = TypeScript$$14.ErrorRecoverySet;
            var v20980 = v23866.Colon;
            var v23867 = TypeScript$$14.ErrorRecoverySet;
            var v20981 = v23867.StmtStart;
            var v16243 = v20980 | v20981;
            var v8337 = v16243 | errorRecoverySet$$37;
            var v16244 = TypeScript$$14.OperatorPrecedence;
            var v8338 = v16244.None;
            var v8339 = TypeContext.NoTypes;
            temp$$15 = JAM.call(this.parseExpr, this, [v8337, v8338, true, v8339], JAM.policy.p1);
            var v20982 = this.scanner;
            var v16245 = v20982.pos;
            var v8346 = v16245 == svPos;
            if (v8346) {
              var v8340 = this.scanner;
              var v26824 = v8340.scan();
              this.currentToken = v26824;
              ast$$44 = temp$$15;
            } else {
              var v25903 = this.currentToken;
              var v25266 = v25903.tokenId;
              var v25904 = TypeScript$$14.TokenID;
              var v25267 = v25904.Colon;
              var v23868 = v25266 == v25267;
              if (v23868) {
                var v25905 = this.scanner;
                var v25268 = v25905.lastTokenHadNewline();
                v23868 = !v25268;
              }
              var v20983 = v23868;
              if (v20983) {
                v20983 = temp$$15;
              }
              var v16246 = v20983;
              if (v16246) {
                var v20984 = temp$$15.nodeType;
                var v23869 = TypeScript$$14.NodeType;
                var v20985 = v23869.Name;
                v16246 = v20984 == v20985;
              }
              var v8345 = v16246;
              if (v8345) {
                var v8342 = labelList$$1 == null;
                if (v8342) {
                  var v8341 = TypeScript$$14.ASTList;
                  labelList$$1 = new v8341;
                }
                var v16247 = TypeScript$$14.Label;
                var v8343 = JAM.new(v16247, [temp$$15]);
                JAM.call(labelList$$1.append, labelList$$1, [v8343]);
                var v8344 = this.scanner;
                var v26825 = v8344.scan();
                this.currentToken = v26825;
              } else {
                ast$$44 = temp$$15;
                needTerminator = true;
              }
            }
          ;
        }
        if (ast$$44) {
          break;
        }
      }
      if (needTerminator) {
        var v16248 = this.currentToken;
        var v8353 = v16248.tokenId;
        switch(v8353) {
          case TypeScript$$14.TokenID.Semicolon:
            var v8348 = this.scanner;
            var v26826 = v8348.scan();
            this.currentToken = v26826;
            var v16249 = ast$$44.flags;
            var v20986 = TypeScript$$14.ASTFlags;
            var v16250 = v20986.ExplicitSemicolon;
            ast$$44.flags = v16249 | v16250;
            break;
          case TypeScript$$14.TokenID.EndOfFile:
            var v8349 = this.scanner;
            ast$$44.limChar = v8349.pos;
          case TypeScript$$14.TokenID.CloseBrace:
            var v16251 = ast$$44.flags;
            var v20987 = TypeScript$$14.ASTFlags;
            var v16252 = v20987.AutomaticSemicolon;
            ast$$44.flags = v16251 | v16252;
            var v8350 = this.style_requireSemi;
            if (v8350) {
              JAM.call(this.reportParseStyleError, this, ["no automatic semicolon"]);
            }
            break;
          default:
            var v20988 = this.scanner;
            var v16253 = v20988.lastTokenHadNewline();
            var v8352 = !v16253;
            if (v8352) {
              JAM.call(this.reportParseError, this, ["Expected ';'"]);
            } else {
              var v16254 = ast$$44.flags;
              var v20989 = TypeScript$$14.ASTFlags;
              var v16255 = v20989.AutomaticSemicolon;
              ast$$44.flags = v16254 | v16255;
              var v8351 = this.style_requireSemi;
              if (v8351) {
                JAM.call(this.reportParseStyleError, this, ["no automatic semicolon"]);
              }
            }
          ;
        }
      }
      if (labelList$$1) {
        var v8354 = TypeScript$$14.LabeledStatement;
        ast$$44 = JAM.new(v8354, [labelList$$1, ast$$44]);
      }
      ast$$44.minChar = minChar$$27;
      var v8355 = ast$$44;
      var v16256 = ast$$44.limChar;
      var v20990 = this.scanner;
      var v16257 = v20990.lastTokenLimChar();
      var v26827 = JAM.call(TypeScript$$14.max, TypeScript$$14, [v16256, v16257], JAM.policy.p1);
      v8355.limChar = v26827;
      if (preComments$$8) {
        ast$$44.preComments = preComments$$8;
      }
      var v16258 = this.ambientModule;
      if (v16258) {
        var v20991 = JAM.call(this.okAmbientModuleMember, this, [ast$$44]);
        v16258 = !v20991;
      }
      var v8356 = v16258;
      if (v8356) {
        JAM.call(this.reportParseError, this, ["statement not permitted within ambient module"]);
      }
      var v16259 = ast$$44.flags;
      var v20992 = TypeScript$$14.ASTFlags;
      var v16260 = v20992.IsStatement;
      ast$$44.flags = v16259 | v16260;
      return ast$$44;
    }
    function v584(errorRecoverySet$$36, parentModifiers$$6, labelList) {
      var v8357 = TypeScript$$14.Try;
      var tryPart = JAM.new(v8357, [null]);
      var v8358 = this.scanner;
      var tryMinChar = v8358.startPos;
      JAM.call(this.pushStmt, this, [tryPart, labelList], JAM.policy.p1);
      var v20993 = TypeScript$$14.ErrorRecoverySet;
      var v16261 = v20993.Catch;
      var v8359 = errorRecoverySet$$36 | v16261;
      JAM.call(this.parseTry, this, [tryPart, v8359, parentModifiers$$6], JAM.policy.p1);
      this.popStmt();
      var tc$$1 = null;
      var tf = null;
      var v20994 = this.currentToken;
      var v16262 = v20994.tokenId;
      var v20995 = TypeScript$$14.TokenID;
      var v16263 = v20995.Catch;
      var v8362 = v16262 == v16263;
      if (v8362) {
        var v20996 = TypeScript$$14.ErrorRecoverySet;
        var v16264 = v20996.Catch;
        var v8360 = errorRecoverySet$$36 | v16264;
        var catchPart = JAM.call(this.parseCatch, this, [v8360, parentModifiers$$6], JAM.policy.p1);
        var v8361 = TypeScript$$14.TryCatch;
        tc$$1 = JAM.new(v8361, [tryPart, catchPart]);
        tc$$1.minChar = tryPart.minChar;
        tc$$1.limChar = catchPart.limChar;
      }
      var v20997 = this.currentToken;
      var v16265 = v20997.tokenId;
      var v20998 = TypeScript$$14.TokenID;
      var v16266 = v20998.Finally;
      var v8372 = v16265 != v16266;
      if (v8372) {
        var v8370 = tc$$1 == null;
        if (v8370) {
          JAM.call(this.reportParseError, this, ["try with neither catch nor finally"]);
          var v8367 = this.errorRecovery;
          if (v8367) {
            var v8363 = TypeScript$$14.TryFinally;
            var v16267 = TypeScript$$14.Finally;
            var v20999 = TypeScript$$14.AST;
            var v23870 = TypeScript$$14.NodeType;
            var v21000 = v23870.Empty;
            var v16268 = JAM.new(v20999, [v21000]);
            var v8364 = JAM.new(v16267, [v16268]);
            var etf = JAM.new(v8363, [tryPart, v8364]);
            var v16269 = etf.flags;
            var v21001 = TypeScript$$14.ASTFlags;
            var v16270 = v21001.Error;
            etf.flags = v16269 | v16270;
            var v8365 = this.scanner;
            etf.minChar = v8365.startPos;
            var v8366 = this.scanner;
            etf.limChar = v8366.pos;
            return etf;
          }
          var v8368 = TypeScript$$14.TryFinally;
          var v16271 = TypeScript$$14.Finally;
          var v21002 = TypeScript$$14.AST;
          var v23871 = TypeScript$$14.NodeType;
          var v21003 = v23871.Empty;
          var v16272 = JAM.new(v21002, [v21003]);
          var v8369 = JAM.new(v16271, [v16272]);
          return JAM.new(v8368, [tryPart, v8369]);
        } else {
          return tc$$1;
        }
      } else {
        if (tc$$1) {
          tryPart = tc$$1;
        }
        var finallyPart = JAM.call(this.parseFinally, this, [errorRecoverySet$$36, parentModifiers$$6], JAM.policy.p1);
        var v8371 = TypeScript$$14.TryFinally;
        tf = JAM.new(v8371, [tryPart, finallyPart]);
        tf.minChar = tryMinChar;
        tf.limChar = finallyPart.limChar;
        return tf;
      }
      return;
    }
    function v583(errorRecoverySet$$35, parentModifiers$$5) {
      var v8373 = this.scanner;
      var finMinChar = v8373.startPos;
      var preComments$$7 = this.parseComments();
      var v8374 = this.scanner;
      var v26828 = v8374.scan();
      this.currentToken = v26828;
      var v21004 = this.currentToken;
      var v16273 = v21004.tokenId;
      var v21005 = TypeScript$$14.TokenID;
      var v16274 = v21005.OpenBrace;
      var v8380 = v16273 != v16274;
      if (v8380) {
        JAM.call(this.reportParseError, this, ["Expected '{' to start body of finally statement"]);
        var v8379 = this.errorRecovery;
        if (v8379) {
          JAM.call(this.skip, this, [errorRecoverySet$$35]);
          var v8375 = TypeScript$$14.Finally;
          var v16275 = TypeScript$$14.Statement;
          var v21006 = TypeScript$$14.NodeType;
          var v16276 = v21006.Empty;
          var v8376 = JAM.new(v16275, [v16276]);
          var efin = JAM.new(v8375, [v8376]);
          var v16277 = efin.flags;
          var v21007 = TypeScript$$14.ASTFlags;
          var v16278 = v21007.Error;
          efin.flags = v16277 | v16278;
          var v8377 = this.scanner;
          efin.minChar = v8377.startPos;
          var v8378 = this.scanner;
          efin.limChar = v8378.pos;
          return efin;
        }
      }
      var v16279 = TypeScript$$14.AllowedElements;
      var v8381 = v16279.None;
      var finBody = JAM.call(this.parseStatement, this, [errorRecoverySet$$35, v8381, parentModifiers$$5], JAM.policy.p1);
      var v8382 = TypeScript$$14.Finally;
      var fin = JAM.new(v8382, [finBody]);
      fin.minChar = finMinChar;
      var v8383 = fin.body;
      fin.limChar = v8383.limChar;
      fin.preComments = preComments$$7;
      var v26829 = this.parseComments();
      fin.postComments = v26829;
      return fin;
    }
    function v582(errorRecoverySet$$34, parentModifiers$$4) {
      var v8384 = this.scanner;
      var catchMinChar = v8384.startPos;
      var preComments$$6 = this.parseComments();
      var v8385 = this.scanner;
      var v26830 = v8385.scan();
      this.currentToken = v26830;
      var v16280 = TypeScript$$14.TokenID;
      var v8386 = v16280.OpenParen;
      var v21008 = TypeScript$$14.ErrorRecoverySet;
      var v16281 = v21008.ExprStart;
      var v8387 = errorRecoverySet$$34 | v16281;
      JAM.call(this.checkCurrentToken, this, [v8386, v8387], JAM.policy.p1);
      var v23872 = this.currentToken;
      var v21009 = v23872.tokenId;
      var v23873 = TypeScript$$14.TokenID;
      var v21010 = v23873.Identifier;
      var v16282 = v21009 != v21010;
      var v21013 = !v16282;
      if (v21013) {
        var v21011 = this.currentToken;
        var v21012 = this.strictMode;
        v16282 = JAM.call(TypeScript$$14.convertTokToID, TypeScript$$14, [v21011, v21012], JAM.policy.p1);
      }
      var v8396 = v16282;
      if (v8396) {
        JAM.call(this.reportParseError, this, ["Expected identifier in catch header"]);
        var v8395 = this.errorRecovery;
        if (v8395) {
          JAM.call(this.skip, this, [errorRecoverySet$$34]);
          var v8388 = TypeScript$$14.Catch;
          var v16283 = TypeScript$$14.VarDecl;
          var v21014 = TypeScript$$14.MissingIdentifier;
          var v16284 = new v21014;
          var v16285 = this.nestingLevel;
          var v8389 = JAM.new(v16283, [v16284, v16285]);
          var v16286 = TypeScript$$14.Statement;
          var v21015 = TypeScript$$14.NodeType;
          var v16287 = v21015.Empty;
          var v8390 = JAM.new(v16286, [v16287]);
          var ecatch = JAM.new(v8388, [v8389, v8390]);
          var v8391 = ecatch.statement;
          v8391.minChar = catchMinChar;
          var v8392 = ecatch.statement;
          var v16288 = this.scanner;
          v8392.limChar = v16288.pos;
          var v8393 = this.scanner;
          ecatch.minChar = v8393.startPos;
          var v8394 = this.scanner;
          ecatch.limChar = v8394.pos;
          var v16289 = ecatch.flags;
          var v21016 = TypeScript$$14.ASTFlags;
          var v16290 = v21016.Error;
          ecatch.flags = v16289 | v16290;
          return ecatch;
        }
      }
      var v8397 = TypeScript$$14.VarDecl;
      var v16291 = TypeScript$$14.Identifier;
      var v16292 = this.currentToken;
      var v8398 = JAM.call(v16291.fromToken, v16291, [v16292]);
      var v8399 = this.nestingLevel;
      var param$$5 = JAM.new(v8397, [v8398, v8399]);
      var v8400 = param$$5.id;
      var v16293 = this.scanner;
      v8400.minChar = v16293.startPos;
      var v8401 = param$$5.id;
      var v16294 = this.scanner;
      v8401.limChar = v16294.pos;
      var v8402 = param$$5.id;
      param$$5.minChar = v8402.minChar;
      var v8403 = param$$5.id;
      param$$5.limChar = v8403.limChar;
      var v8404 = this.scanner;
      var v26831 = v8404.scan();
      this.currentToken = v26831;
      var v8405 = this.scanner;
      var statementPos = v8405.pos;
      var v16295 = TypeScript$$14.TokenID;
      var v8406 = v16295.CloseParen;
      var v21017 = TypeScript$$14.ErrorRecoverySet;
      var v16296 = v21017.StmtStart;
      var v8407 = errorRecoverySet$$34 | v16296;
      JAM.call(this.checkCurrentToken, this, [v8406, v8407], JAM.policy.p1);
      var v21018 = this.currentToken;
      var v16297 = v21018.tokenId;
      var v21019 = TypeScript$$14.TokenID;
      var v16298 = v21019.OpenBrace;
      var v8416 = v16297 != v16298;
      if (v8416) {
        JAM.call(this.reportParseError, this, ["Expected '{' to start catch body"]);
        var v8415 = this.errorRecovery;
        if (v8415) {
          JAM.call(this.skip, this, [errorRecoverySet$$34]);
          var v8408 = TypeScript$$14.Catch;
          var v16299 = TypeScript$$14.VarDecl;
          var v21020 = TypeScript$$14.MissingIdentifier;
          var v16300 = new v21020;
          var v16301 = this.nestingLevel;
          var v8409 = JAM.new(v16299, [v16300, v16301]);
          var v16302 = TypeScript$$14.Statement;
          var v21021 = TypeScript$$14.NodeType;
          var v16303 = v21021.Empty;
          var v8410 = JAM.new(v16302, [v16303]);
          ecatch = JAM.new(v8408, [v8409, v8410]);
          var v8411 = ecatch.statement;
          v8411.minChar = catchMinChar;
          var v8412 = ecatch.statement;
          v8412.limChar = statementPos;
          var v8413 = this.scanner;
          ecatch.minChar = v8413.startPos;
          var v8414 = this.scanner;
          ecatch.limChar = v8414.pos;
          var v16304 = ecatch.flags;
          var v21022 = TypeScript$$14.ASTFlags;
          var v16305 = v21022.Error;
          ecatch.flags = v16304 | v16305;
          return ecatch;
        }
      }
      var v16306 = TypeScript$$14.AllowedElements;
      var v8417 = v16306.None;
      var catchStmt = JAM.call(this.parseStatement, this, [errorRecoverySet$$34, v8417, parentModifiers$$4], JAM.policy.p1);
      var v8418 = TypeScript$$14.Catch;
      var catchNode$$1 = JAM.new(v8418, [param$$5, catchStmt]);
      var v8419 = catchNode$$1.statement;
      v8419.minChar = catchMinChar;
      var v8420 = catchNode$$1.statement;
      v8420.limChar = statementPos;
      catchNode$$1.minChar = catchMinChar;
      catchNode$$1.limChar = catchStmt.limChar;
      catchNode$$1.preComments = preComments$$6;
      var v26832 = this.parseComments();
      catchNode$$1.postComments = v26832;
      return catchNode$$1;
    }
    function v581(tryNode$$2, errorRecoverySet$$33, parentModifiers$$3) {
      var v8421 = this.scanner;
      var minChar$$26 = v8421.startPos;
      var preComments$$5 = this.parseComments();
      var v8422 = this.scanner;
      var v26833 = v8422.scan();
      this.currentToken = v26833;
      var v21023 = this.currentToken;
      var v16307 = v21023.tokenId;
      var v21024 = TypeScript$$14.TokenID;
      var v16308 = v21024.OpenBrace;
      var v8425 = v16307 != v16308;
      if (v8425) {
        JAM.call(this.reportParseError, this, ["Expected '{'"]);
        var v8424 = this.errorRecovery;
        if (v8424) {
          var etryNode = tryNode$$2;
          etryNode.minChar = minChar$$26;
          var v8423 = this.scanner;
          var v26834 = v8423.lastTokenLimChar();
          etryNode.limChar = v26834;
          var v16309 = etryNode.flags;
          var v21025 = TypeScript$$14.ASTFlags;
          var v16310 = v21025.Error;
          etryNode.flags = v16309 | v16310;
          return;
        }
      }
      var v16311 = TypeScript$$14.AllowedElements;
      var v8426 = v16311.None;
      var v26835 = JAM.call(this.parseStatement, this, [errorRecoverySet$$33, v8426, parentModifiers$$3], JAM.policy.p1);
      tryNode$$2.body = v26835;
      tryNode$$2.minChar = minChar$$26;
      var v8427 = tryNode$$2.body;
      tryNode$$2.limChar = v8427.limChar;
      tryNode$$2.preComments = preComments$$5;
      var v26836 = this.parseComments();
      tryNode$$2.postComments = v26836;
      return;
    }
    function v580(errorRecoverySet$$32, ast$$43, allowCall$$1, inNew$$1, typeContext$$2, lhsMinChar, lhsLimChar) {
      var count$$4 = 0;
      var v8430 = !ast$$43;
      if (v8430) {
        var v8428 = TypeScript$$14.AST;
        var v16312 = TypeScript$$14.NodeType;
        var v8429 = v16312.EmptyExpr;
        ast$$43 = JAM.new(v8428, [v8429]);
        ast$$43.isParenthesized = true;
      }
      ast$$43.minChar = lhsMinChar;
      ast$$43.limChar = lhsLimChar;
      for (;;) {
        var v16313 = this.currentToken;
        var v8468 = v16313.tokenId;
        switch(v8468) {
          case TypeScript$$14.TokenID.OpenParen:
            if (inNew$$1) {
              var callExpr = ast$$43;
              var v26837 = JAM.call(this.parseArgList, this, [errorRecoverySet$$32]);
              callExpr.arguments = v26837;
              inNew$$1 = false;
            } else {
              var v8431 = !allowCall$$1;
              if (v8431) {
                return ast$$43;
              }
              var v8432 = TypeScript$$14.CallExpression;
              var v16314 = TypeScript$$14.NodeType;
              var v8433 = v16314.Call;
              var v8434 = JAM.call(this.parseArgList, this, [errorRecoverySet$$32]);
              ast$$43 = JAM.new(v8432, [v8433, ast$$43, v8434]);
              ast$$43.minChar = lhsMinChar;
            }
            var v8435 = this.scanner;
            ast$$43.limChar = v8435.pos;
            var v16315 = TypeScript$$14.TokenID;
            var v8436 = v16315.CloseParen;
            JAM.call(this.checkCurrentToken, this, [v8436, errorRecoverySet$$32], JAM.policy.p1);
            break;
          case TypeScript$$14.TokenID.OpenBracket:
            var v8437 = this.scanner;
            var v26838 = v8437.scan();
            this.currentToken = v26838;
            var v21026 = this.currentToken;
            var v16316 = v21026.tokenId;
            var v21027 = TypeScript$$14.TokenID;
            var v16317 = v21027.CloseBracket;
            var v8444 = v16316 == v16317;
            if (v8444) {
              var v16318 = TypeContext.ArraySuffix;
              var v8443 = JAM.call(TypeScript$$14.hasFlag, TypeScript$$14, [typeContext$$2, v16318], JAM.policy.p1);
              if (v8443) {
                var v8438 = this.scanner;
                var v26839 = v8438.scan();
                this.currentToken = v26839;
                var v16319 = ast$$43.nodeType;
                var v21028 = TypeScript$$14.NodeType;
                var v16320 = v21028.TypeRef;
                var v8441 = v16319 == v16320;
                if (v8441) {
                  var typeRef$$1 = ast$$43;
                  typeRef$$1.arrayCount++;
                } else {
                  var v8439 = TypeScript$$14.BinaryExpression;
                  var v16321 = TypeScript$$14.NodeType;
                  var v8440 = v16321.Index;
                  ast$$43 = JAM.new(v8439, [v8440, ast$$43, null]);
                }
                var v8442 = this.scanner;
                ast$$43.limChar = v8442.pos;
                break;
              }
            }
            var v8445 = TypeScript$$14.BinaryExpression;
            var v16322 = TypeScript$$14.NodeType;
            var v8446 = v16322.Index;
            var v23874 = TypeScript$$14.ErrorRecoverySet;
            var v21029 = v23874.RBrack;
            var v16323 = errorRecoverySet$$32 | v21029;
            var v21030 = TypeScript$$14.OperatorPrecedence;
            var v16324 = v21030.None;
            var v16325 = TypeContext.NoTypes;
            var v8447 = JAM.call(this.parseExpr, this, [v16323, v16324, true, v16325], JAM.policy.p1);
            ast$$43 = JAM.new(v8445, [v8446, ast$$43, v8447]);
            ast$$43.minChar = lhsMinChar;
            var v8448 = this.scanner;
            ast$$43.limChar = v8448.pos;
            var v16326 = TypeScript$$14.TokenID;
            var v8449 = v16326.CloseBracket;
            JAM.call(this.checkCurrentToken, this, [v8449, errorRecoverySet$$32], JAM.policy.p1);
            break;
          case TypeScript$$14.TokenID.Dot:
            var name$$51 = null;
            var v8450 = this.scanner;
            var curpos$$2 = v8450.pos;
            var v8451 = this.scanner;
            var v26840 = v8451.scan();
            this.currentToken = v26840;
            var v16327 = this.currentToken;
            var v8453 = v16327 === undefined;
            if (v8453) {
              var v8452 = this.scanner;
              var v26841 = v8452.scan();
              this.currentToken = v26841;
              continue;
            }
            var v23875 = this.currentToken;
            var v21031 = v23875.tokenId;
            var v23876 = TypeScript$$14.TokenID;
            var v21032 = v23876.Identifier;
            var v16328 = v21031 == v21032;
            var v21034 = !v16328;
            if (v21034) {
              var v25269 = this.errorRecovery;
              var v23877 = !v25269;
              var v25271 = !v23877;
              if (v25271) {
                var v25906 = this.scanner;
                var v25270 = v25906.lastTokenHadNewline();
                v23877 = !v25270;
              }
              var v21033 = v23877;
              if (v21033) {
                var v23878 = this.currentToken;
                v21033 = JAM.call(TypeScript$$14.convertTokToIDName, TypeScript$$14, [v23878]);
              }
              v16328 = v21033;
            }
            var v8461 = v16328;
            if (v8461) {
              var v16329 = ast$$43.flags;
              var v21035 = TypeScript$$14.ASTFlags;
              var v16330 = v21035.DotLHS;
              ast$$43.flags = v16329 | v16330;
              var v16331 = this.currentToken;
              var v8454 = v16331.getText();
              var v16332 = this.currentToken;
              var v8455 = v16332.hasEscapeSequence;
              var v16333 = this.scanner;
              var v8456 = v16333.startPos;
              name$$51 = JAM.call(this.createRef, this, [v8454, v8455, v8456], JAM.policy.p1);
              var v8457 = this.scanner;
              name$$51.limChar = v8457.pos;
              var v8458 = this.scanner;
              var v26842 = v8458.scan();
              this.currentToken = v26842;
            } else {
              JAM.call(this.reportParseError, this, ["Expected identifier following dot"]);
              var v8460 = this.errorRecovery;
              if (v8460) {
                JAM.call(this.skip, this, [errorRecoverySet$$32]);
                var v16334 = ast$$43.flags;
                var v23879 = TypeScript$$14.ASTFlags;
                var v21036 = v23879.Error;
                var v23880 = TypeScript$$14.ASTFlags;
                var v21037 = v23880.DotLHS;
                var v16335 = v21036 | v21037;
                ast$$43.flags = v16334 | v16335;
                return ast$$43;
              } else {
                var v8459 = TypeScript$$14.MissingIdentifier;
                name$$51 = new v8459;
              }
            }
            var v8462 = TypeScript$$14.BinaryExpression;
            var v16336 = TypeScript$$14.NodeType;
            var v8463 = v16336.Dot;
            ast$$43 = JAM.new(v8462, [v8463, ast$$43, name$$51]);
            ast$$43.minChar = lhsMinChar;
            var v8464 = this.scanner;
            var v26843 = v8464.lastTokenLimChar();
            ast$$43.limChar = v26843;
            break;
          case TypeScript$$14.TokenID.EqualsGreaterThan:
            var v16337 = TypeScript$$14.Modifiers;
            var v8465 = v16337.None;
            var v8466 = {preProcessedLambdaArgs:ast$$43};
            ast$$43 = JAM.call(this.parseFncDecl, this, [errorRecoverySet$$32, false, false, false, null, false, false, false, v8465, v8466, false], JAM.policy.p1);
            var v16338 = ast$$43.fncFlags;
            var v21038 = TypeScript$$14.FncFlags;
            var v16339 = v21038.IsFunctionExpression;
            ast$$43.fncFlags = v16338 | v16339;
            ast$$43.minChar = lhsMinChar;
            var v8467 = this.scanner;
            var v26844 = v8467.lastTokenLimChar();
            ast$$43.limChar = v26844;
            break;
          default:
            return ast$$43;
        }
      }
      return;
    }
    function v579(errorRecoverySet$$31, minPrecedence, allowIn$$1, typeContext$$1, possiblyInLambda) {
      var v16340 = typeof possiblyInLambda;
      var v8469 = v16340 === "undefined";
      if (v8469) {
        possiblyInLambda = false;
      }
      var ast$$42 = null;
      var v16341 = this.currentToken;
      var v8470 = v16341.tokenId;
      var tokenInfo$$1 = JAM.call(TypeScript$$14.lookupToken, TypeScript$$14, [v8470]);
      var canAssign = true;
      var idHint$$1 = null;
      var v8471 = this.scanner;
      var minChar$$25 = v8471.startPos;
      var preComments$$4 = this.parseComments();
      var exprIsAnonLambda = false;
      var v16342 = tokenInfo$$1 != undefined;
      if (v16342) {
        var v21039 = tokenInfo$$1.unopNodeType;
        var v23881 = TypeScript$$14.NodeType;
        var v21040 = v23881.None;
        v16342 = v21039 != v21040;
      }
      var v8498 = v16342;
      if (v8498) {
        canAssign = false;
        var v8472 = this.scanner;
        var v26845 = v8472.scan();
        this.currentToken = v26845;
        var v21041 = TypeScript$$14.ErrorRecoverySet;
        var v16343 = v21041.BinOp;
        var v8473 = v16343 | errorRecoverySet$$31;
        var v8474 = tokenInfo$$1.unopPrecedence;
        var v8475 = TypeContext.NoTypes;
        var tempExpr = JAM.call(this.parseExpr, this, [v8473, v8474, allowIn$$1, v8475], JAM.policy.p1);
        var v21042 = tokenInfo$$1.unopNodeType;
        var v23882 = TypeScript$$14.NodeType;
        var v21043 = v23882.Pos;
        var v16344 = v21042 == v21043;
        if (v16344) {
          var v21044 = tempExpr.nodeType;
          var v23883 = TypeScript$$14.NodeType;
          var v21045 = v23883.NumberLit;
          v16344 = v21044 == v21045;
        }
        var v8481 = v16344;
        if (v8481) {
          ast$$42 = tempExpr;
        } else {
          var v21046 = tokenInfo$$1.unopNodeType;
          var v23884 = TypeScript$$14.NodeType;
          var v21047 = v23884.Neg;
          var v16345 = v21046 == v21047;
          if (v16345) {
            var v21048 = tempExpr.nodeType;
            var v23885 = TypeScript$$14.NodeType;
            var v21049 = v23885.NumberLit;
            v16345 = v21048 == v21049;
          }
          var v8480 = v16345;
          if (v8480) {
            var numLit$$1 = tempExpr;
            var v8476 = numLit$$1.value;
            numLit$$1.value = -v8476;
            var v16346 = numLit$$1.value;
            var v8477 = v16346 == 0;
            if (v8477) {
              numLit$$1.isNegativeZero = true;
            }
            ast$$42 = tempExpr;
          } else {
            var v8478 = TypeScript$$14.UnaryExpression;
            var v8479 = tokenInfo$$1.unopNodeType;
            ast$$42 = JAM.new(v8478, [v8479, tempExpr]);
            ast$$42.limChar = tempExpr.limChar;
          }
        }
        ast$$42.minChar = minChar$$25;
      } else {
        var v23886 = TypeScript$$14.ErrorRecoverySet;
        var v21050 = v23886.BinOp;
        var v23887 = TypeScript$$14.ErrorRecoverySet;
        var v21051 = v23887.AddOp;
        var v16347 = v21050 | v21051;
        var v8482 = v16347 | errorRecoverySet$$31;
        ast$$42 = JAM.call(this.parseTerm, this, [v8482, true, typeContext$$1, false], JAM.policy.p1);
        var id$$13;
        var temp$$14;
        var v16348 = ast$$42.nodeType;
        var v21052 = TypeScript$$14.NodeType;
        var v16349 = v21052.Name;
        var v8492 = v16348 == v16349;
        if (v8492) {
          id$$13 = ast$$42;
          idHint$$1 = id$$13.actualText;
        } else {
          var v16350 = ast$$42.nodeType;
          var v21053 = TypeScript$$14.NodeType;
          var v16351 = v21053.Dot;
          var v8491 = v16350 == v16351;
          if (v8491) {
            var subsumedExpr = false;
            var v25272 = this.inferPropertiesFromThisAssignment;
            if (v25272) {
              var v26310 = this.currentToken;
              var v26178 = v26310.tokenId;
              var v26311 = TypeScript$$14.TokenID;
              var v26179 = v26311.Colon;
              var v25907 = v26178 == v26179;
              var v26182 = !v25907;
              if (v26182) {
                var v26312 = this.currentToken;
                var v26180 = v26312.tokenId;
                var v26313 = TypeScript$$14.TokenID;
                var v26181 = v26313.Equals;
                v25907 = v26180 == v26181;
              }
              v25272 = v25907;
            }
            var v23888 = v25272;
            if (v23888) {
              v23888 = this.parsingClassConstructorDefinition;
            }
            var v21054 = v23888;
            if (v21054) {
              var v23889 = this.nestingLevel;
              var v25273 = this.currentClassDefinition;
              var v23890 = v25273.constructorNestingLevel;
              v21054 = v23889 == v23890;
            }
            var v16352 = v21054;
            if (v16352) {
              var v23891 = ast$$42.operand1;
              var v21055 = v23891.nodeType;
              var v23892 = TypeScript$$14.NodeType;
              var v21056 = v23892.This;
              v16352 = v21055 == v21056;
            }
            var v8487 = v16352;
            if (v8487) {
              var v21057 = ast$$42.operand2;
              var v16353 = v21057.nodeType;
              var v21058 = TypeScript$$14.NodeType;
              var v16354 = v21058.Name;
              var v8486 = v16353 == v16354;
              if (v8486) {
                var op2ID = ast$$42.operand2;
                var v23893 = this.currentClassDefinition;
                var v21059 = v23893.knownMemberNames;
                var v21060 = op2ID.actualText;
                var v16355 = v21059[v21060];
                var v8485 = !v16355;
                if (v8485) {
                  var v8483 = ast$$42.minChar;
                  var v16356 = TypeScript$$14.Modifiers;
                  var v8484 = v16356.Public;
                  ast$$42 = JAM.call(this.parseClassMemberVariableDeclaration, this, [op2ID, v8483, true, errorRecoverySet$$31, v8484], JAM.policy.p1);
                  subsumedExpr = true;
                }
              }
            }
            var v8490 = !subsumedExpr;
            if (v8490) {
              temp$$14 = ast$$42;
              var v16357 = temp$$14.nodeType;
              var v21061 = TypeScript$$14.NodeType;
              var v16358 = v21061.Dot;
              var v8488 = v16357 == v16358;
              for (;v8488;) {
                var binExpr$$1 = temp$$14;
                temp$$14 = binExpr$$1.operand2;
                var v16359 = temp$$14.nodeType;
                var v21062 = TypeScript$$14.NodeType;
                var v16360 = v21062.Dot;
                v8488 = v16359 == v16360;
              }
              var v16361 = temp$$14.nodeType;
              var v21063 = TypeScript$$14.NodeType;
              var v16362 = v21063.Name;
              var v8489 = v16361 == v16362;
              if (v8489) {
                id$$13 = temp$$14;
                idHint$$1 = id$$13.actualText;
              }
            }
          }
        }
        var v23894 = this.scanner;
        var v21064 = v23894.lastTokenHadNewline();
        var v16363 = !v21064;
        if (v16363) {
          var v25274 = this.currentToken;
          var v23895 = v25274.tokenId;
          var v25275 = TypeScript$$14.TokenID;
          var v23896 = v25275.PlusPlus;
          var v21065 = v23895 == v23896;
          var v23899 = !v21065;
          if (v23899) {
            var v25276 = this.currentToken;
            var v23897 = v25276.tokenId;
            var v25277 = TypeScript$$14.TokenID;
            var v23898 = v25277.MinusMinus;
            v21065 = v23897 == v23898;
          }
          v16363 = v21065;
        }
        var v8497 = v16363;
        if (v8497) {
          canAssign = false;
          var operand$$2 = ast$$42;
          var v8493 = TypeScript$$14.UnaryExpression;
          var v16364;
          var v25278 = this.currentToken;
          var v23900 = v25278.tokenId;
          var v25279 = TypeScript$$14.TokenID;
          var v23901 = v25279.PlusPlus;
          var v21068 = v23900 == v23901;
          if (v21068) {
            var v21066 = TypeScript$$14.NodeType;
            v16364 = v21066.IncPost;
          } else {
            var v21067 = TypeScript$$14.NodeType;
            v16364 = v21067.DecPost;
          }
          var v8494 = v16364;
          ast$$42 = JAM.new(v8493, [v8494, operand$$2]);
          var v8495 = this.scanner;
          ast$$42.limChar = v8495.pos;
          ast$$42.minChar = operand$$2.minChar;
          var v8496 = this.scanner;
          var v26846 = v8496.scan();
          this.currentToken = v26846;
        }
      }
      for (;;) {
        var v16365 = this.currentToken;
        var v8499 = v16365.tokenId;
        tokenInfo$$1 = JAM.call(TypeScript$$14.lookupToken, TypeScript$$14, [v8499]);
        var v16366 = tokenInfo$$1 == undefined;
        var v21071 = !v16366;
        if (v21071) {
          var v21069 = tokenInfo$$1.binopNodeType;
          var v23902 = TypeScript$$14.NodeType;
          var v21070 = v23902.None;
          v16366 = v21069 == v21070;
        }
        var v8500 = v16366;
        if (v8500) {
          break;
        }
        var v16367 = !allowIn$$1;
        if (v16367) {
          var v21072 = tokenInfo$$1.binopNodeType;
          var v23903 = TypeScript$$14.NodeType;
          var v21073 = v23903.In;
          v16367 = v21072 == v21073;
        }
        var v8501 = v16367;
        if (v8501) {
          break;
        }
        var v16368 = tokenInfo$$1.binopPrecedence;
        var v21074 = TypeScript$$14.OperatorPrecedence;
        var v16369 = v21074.Assignment;
        var v8505 = v16368 == v16369;
        if (v8505) {
          var v16370 = tokenInfo$$1.binopPrecedence;
          var v8502 = v16370 < minPrecedence;
          if (v8502) {
            break;
          }
          var v8503 = !canAssign;
          if (v8503) {
            JAM.call(this.reportParseError, this, ["illegal assignment"]);
          }
        } else {
          var v16371 = tokenInfo$$1.binopPrecedence;
          var v8504 = v16371 <= minPrecedence;
          if (v8504) {
            break;
          }
        }
        var v21075 = possiblyInLambda;
        if (v21075) {
          var v25280 = this.currentToken;
          var v23904 = v25280.tokenId;
          var v25281 = TypeScript$$14.TokenID;
          var v23905 = v25281.Comma;
          v21075 = v23904 == v23905;
        }
        var v16372 = v21075;
        if (v16372) {
          var v25282 = this.scanner;
          var v23906 = v25282.getLookAheadToken();
          var v21076 = v23906.tokenId;
          var v23907 = TypeScript$$14.TokenID;
          var v21077 = v23907.DotDotDot;
          v16372 = v21076 == v21077;
        }
        var v8506 = v16372;
        if (v8506) {
          exprIsAnonLambda = true;
          canAssign = false;
          ast$$42 = JAM.call(this.parseLambdaExpr, this, [errorRecoverySet$$31, ast$$42, false, true], JAM.policy.p1);
          break;
        }
        var v8507 = this.scanner;
        var v26847 = v8507.scan();
        this.currentToken = v26847;
        canAssign = false;
        var v16373 = tokenInfo$$1.binopNodeType;
        var v21078 = TypeScript$$14.NodeType;
        var v16374 = v21078.ConditionalExpression;
        var v8523 = v16373 == v16374;
        if (v8523) {
          var v16375 = possiblyInLambda;
          if (v16375) {
            var v26183 = this.currentToken;
            var v25908 = v26183.tokenId;
            var v26184 = TypeScript$$14.TokenID;
            var v25909 = v26184.Equals;
            var v25283 = v25908 == v25909;
            var v25912 = !v25283;
            if (v25912) {
              var v26185 = this.currentToken;
              var v25910 = v26185.tokenId;
              var v26186 = TypeScript$$14.TokenID;
              var v25911 = v26186.Colon;
              v25283 = v25910 == v25911;
            }
            var v23908 = v25283;
            var v25286 = !v23908;
            if (v25286) {
              var v25913 = this.currentToken;
              var v25284 = v25913.tokenId;
              var v25914 = TypeScript$$14.TokenID;
              var v25285 = v25914.CloseParen;
              v23908 = v25284 == v25285;
            }
            var v21079 = v23908;
            var v23911 = !v21079;
            if (v23911) {
              var v25287 = this.currentToken;
              var v23909 = v25287.tokenId;
              var v25288 = TypeScript$$14.TokenID;
              var v23910 = v25288.Comma;
              v21079 = v23909 == v23910;
            }
            v16375 = v21079;
          }
          var v8517 = v16375;
          if (v8517) {
            exprIsAnonLambda = true;
            canAssign = true;
          } else {
            this.prevExpr = ast$$42;
            var v21080 = TypeScript$$14.ErrorRecoverySet;
            var v16376 = v21080.Colon;
            var v8508 = errorRecoverySet$$31 | v16376;
            var v16377 = TypeScript$$14.OperatorPrecedence;
            var v8509 = v16377.Assignment;
            var v8510 = TypeContext.NoTypes;
            var whenTrue = JAM.call(this.parseExpr, this, [v8508, v8509, allowIn$$1, v8510], JAM.policy.p1);
            this.prevExpr = null;
            var v16378 = TypeScript$$14.TokenID;
            var v8511 = v16378.Colon;
            var v21081 = TypeScript$$14.ErrorRecoverySet;
            var v16379 = v21081.ExprStart;
            var v8512 = errorRecoverySet$$31 | v16379;
            JAM.call(this.checkCurrentToken, this, [v8511, v8512], JAM.policy.p1);
            var v21082 = TypeScript$$14.ErrorRecoverySet;
            var v16380 = v21082.BinOp;
            var v8513 = errorRecoverySet$$31 | v16380;
            var v16381 = TypeScript$$14.OperatorPrecedence;
            var v8514 = v16381.Assignment;
            var v8515 = TypeContext.NoTypes;
            var whenFalse = JAM.call(this.parseExpr, this, [v8513, v8514, allowIn$$1, v8515], JAM.policy.p1);
            var v8516 = TypeScript$$14.ConditionalExpression;
            ast$$42 = JAM.new(v8516, [ast$$42, whenTrue, whenFalse]);
          }
        } else {
          var tc = TypeContext.NoTypes;
          var binExpr2;
          var v8518 = TypeScript$$14.BinaryExpression;
          var v8519 = tokenInfo$$1.binopNodeType;
          var v23912 = TypeScript$$14.ErrorRecoverySet;
          var v21083 = v23912.BinOp;
          var v16382 = errorRecoverySet$$31 | v21083;
          var v16383 = tokenInfo$$1.binopPrecedence;
          var v16384 = TypeContext.NoTypes;
          var v8520 = JAM.call(this.parseExpr, this, [v16382, v16383, allowIn$$1, v16384, possiblyInLambda], JAM.policy.p1);
          binExpr2 = JAM.new(v8518, [v8519, ast$$42, v8520]);
          var v21084 = binExpr2.operand2;
          var v16385 = v21084.nodeType;
          var v21085 = TypeScript$$14.NodeType;
          var v16386 = v21085.FuncDecl;
          var v8521 = v16385 == v16386;
          if (v8521) {
            var funcDecl$$12 = binExpr2.operand2;
            funcDecl$$12.hint = idHint$$1;
          }
          binExpr2.minChar = ast$$42.minChar;
          var v8522 = this.scanner;
          var v26848 = v8522.lastTokenLimChar();
          binExpr2.limChar = v26848;
          idHint$$1 = null;
          ast$$42 = binExpr2;
        }
      }
      if (canAssign) {
        var v16387 = ast$$42.flags;
        var v21086 = TypeScript$$14.ASTFlags;
        var v16388 = v21086.Writeable;
        ast$$42.flags = v16387 | v16388;
      }
      var v8527 = !exprIsAnonLambda;
      if (v8527) {
        ast$$42.minChar = minChar$$25;
        var v8524 = ast$$42.limChar;
        var v16389 = this.scanner;
        var v8525 = v16389.lastTokenLimChar();
        var v26849 = JAM.call(TypeScript$$14.max, TypeScript$$14, [v8524, v8525], JAM.policy.p1);
        ast$$42.limChar = v26849;
        ast$$42.preComments = preComments$$4;
        var v16390 = this.scanner;
        var v8526 = v16390.line;
        var v26850 = JAM.call(this.parseCommentsForLine, this, [v8526]);
        ast$$42.postComments = v26850;
      }
      return ast$$42;
    }
    function v578(errorRecoverySet$$30, lambdaArgs, skipNextRParen, expectClosingRParen$$2) {
      var v16391 = TypeScript$$14.Modifiers;
      var v8528 = v16391.None;
      var v8529 = {preProcessedLambdaArgs:lambdaArgs};
      var ast$$41 = JAM.call(this.parseFncDecl, this, [errorRecoverySet$$30, false, false, false, null, false, false, false, v8528, v8529, expectClosingRParen$$2], JAM.policy.p1);
      var v16392 = ast$$41.fncFlags;
      var v21087 = TypeScript$$14.FncFlags;
      var v16393 = v21087.IsFunctionExpression;
      ast$$41.fncFlags = v16392 | v16393;
      var v16394 = ast$$41.fncFlags;
      var v21088 = TypeScript$$14.FncFlags;
      var v16395 = v21088.IsFatArrowFunction;
      ast$$41.fncFlags = v16394 | v16395;
      var v8530 = !skipNextRParen;
      if (v8530) {
        var v16396 = ast$$41.flags;
        var v21089 = TypeScript$$14.ASTFlags;
        var v16397 = v21089.SkipNextRParen;
        ast$$41.flags = v16396 | v16397;
      }
      var v8531 = this.scanner;
      var v26851 = v8531.lastTokenLimChar();
      ast$$41.limChar = v26851;
      return ast$$41;
    }
    function v577(errorRecoverySet$$29, allowCall, typeContext, inCast) {
      var ast$$40 = null;
      var sawId = false;
      var inNew = false;
      var v8532 = this.scanner;
      var minChar$$24 = v8532.startPos;
      var v8533 = this.scanner;
      var limChar$$7 = v8533.pos;
      var parseAsLambda = false;
      var expectlambdaRParen = false;
      var v16398 = this.currentToken;
      var v8567 = v16398.tokenId;
      switch(v8567) {
        case TypeScript$$14.TokenID.Number:
        ;
        case TypeScript$$14.TokenID.Bool:
        ;
        case TypeScript$$14.TokenID.Any:
        ;
        case TypeScript$$14.TokenID.String:
          var v8534 = TypeScript$$14.Identifier;
          var v21090 = TypeScript$$14.tokenTable;
          var v23913 = this.currentToken;
          var v21091 = v23913.tokenId;
          var v16399 = v21090[v21091];
          var v8535 = v16399.text;
          var tid = JAM.new(v8534, [v8535]);
          var v16400 = TypeContext.Primitive;
          var v8537 = JAM.call(TypeScript$$14.hasFlag, TypeScript$$14, [typeContext, v16400], JAM.policy.p1);
          if (v8537) {
            var v8536 = TypeScript$$14.TypeReference;
            ast$$40 = JAM.new(v8536, [tid, 0]);
            sawId = true;
          } else {
            ast$$40 = tid;
            sawId = true;
          }
          ast$$40.minChar = minChar$$24;
          var v8538 = this.scanner;
          var v26852 = v8538.scan();
          this.currentToken = v26852;
          var v8539 = this.scanner;
          limChar$$7 = v8539.lastTokenLimChar();
          break;
        case TypeScript$$14.TokenID.This:
          var v8540 = TypeScript$$14.AST;
          var v16401 = TypeScript$$14.NodeType;
          var v8541 = v16401.This;
          ast$$40 = JAM.new(v8540, [v8541]);
          ast$$40.minChar = minChar$$24;
          var v8542 = this.scanner;
          var v26853 = v8542.scan();
          this.currentToken = v26853;
          var v8543 = this.scanner;
          limChar$$7 = v8543.lastTokenLimChar();
          break;
        case TypeScript$$14.TokenID.Super:
          var v8544 = TypeScript$$14.AST;
          var v16402 = TypeScript$$14.NodeType;
          var v8545 = v16402.Super;
          ast$$40 = JAM.new(v8544, [v8545]);
          ast$$40.minChar = minChar$$24;
          var v8546 = this.scanner;
          var v26854 = v8546.scan();
          this.currentToken = v26854;
          var v8547 = this.scanner;
          limChar$$7 = v8547.lastTokenLimChar();
          break;
        case TypeScript$$14.TokenID.True:
          var v8548 = TypeScript$$14.AST;
          var v16403 = TypeScript$$14.NodeType;
          var v8549 = v16403.True;
          ast$$40 = JAM.new(v8548, [v8549]);
          var v8550 = this.scanner;
          var v26855 = v8550.scan();
          this.currentToken = v26855;
          ast$$40.minChar = minChar$$24;
          break;
        case TypeScript$$14.TokenID.False:
          var v8551 = TypeScript$$14.AST;
          var v16404 = TypeScript$$14.NodeType;
          var v8552 = v16404.False;
          ast$$40 = JAM.new(v8551, [v8552]);
          var v8553 = this.scanner;
          var v26856 = v8553.scan();
          this.currentToken = v26856;
          ast$$40.minChar = minChar$$24;
          break;
        case TypeScript$$14.TokenID.Null:
          var v8554 = TypeScript$$14.AST;
          var v16405 = TypeScript$$14.NodeType;
          var v8555 = v16405.Null;
          ast$$40 = JAM.new(v8554, [v8555]);
          var v8556 = this.scanner;
          var v26857 = v8556.scan();
          this.currentToken = v26857;
          ast$$40.minChar = minChar$$24;
          break;
        case TypeScript$$14.TokenID.New:
          var v8557 = this.scanner;
          minChar$$24 = v8557.pos;
          var v8558 = this.scanner;
          var v26858 = v8558.scan();
          this.currentToken = v26858;
          var v8559 = TypeContext.AllSimpleTypes;
          var target$$30 = JAM.call(this.parseTerm, this, [errorRecoverySet$$29, false, v8559, inCast], JAM.policy.p1);
          var v21092 = target$$30.nodeType;
          var v23914 = TypeScript$$14.NodeType;
          var v21093 = v23914.Error;
          var v16406 = v21092 == v21093;
          var v21095 = !v16406;
          if (v21095) {
            var v23915 = target$$30.nodeType;
            var v25289 = TypeScript$$14.NodeType;
            var v23916 = v25289.Index;
            var v21094 = v23915 == v23916;
            if (v21094) {
              var v25290 = target$$30.operand1;
              var v23917 = v25290.nodeType;
              var v25291 = TypeScript$$14.NodeType;
              var v23918 = v25291.TypeRef;
              v21094 = v23917 == v23918;
            }
            v16406 = v21094;
          }
          var v8563 = v16406;
          if (v8563) {
            JAM.call(this.reportParseError, this, ["Cannot invoke 'new' on this expression"]);
          } else {
            var v8560 = TypeScript$$14.CallExpression;
            var v16407 = TypeScript$$14.NodeType;
            var v8561 = v16407.New;
            ast$$40 = JAM.new(v8560, [v8561, target$$30, null]);
            ast$$40.minChar = minChar$$24;
            var v8562 = this.scanner;
            limChar$$7 = v8562.lastTokenLimChar();
            inNew = true;
          }
          break;
        case TypeScript$$14.TokenID.Function:
          var v8564 = this.scanner;
          minChar$$24 = v8564.pos;
          var v16408 = TypeScript$$14.Modifiers;
          var v8565 = v16408.None;
          ast$$40 = JAM.call(this.parseFncDecl, this, [errorRecoverySet$$29, false, false, false, null, false, false, false, v8565, null, true], JAM.policy.p1);
          var v16409 = ast$$40.fncFlags;
          var v21096 = TypeScript$$14.FncFlags;
          var v16410 = v21096.IsFunctionExpression;
          ast$$40.fncFlags = v16409 | v16410;
          ast$$40.minChar = minChar$$24;
          var v8566 = this.scanner;
          limChar$$7 = v8566.lastTokenLimChar();
          ast$$40.limChar = limChar$$7;
      }
      var v8574 = ast$$40 == null;
      if (v8574) {
        var v23919 = this.currentToken;
        var v21097 = v23919.tokenId;
        var v23920 = TypeScript$$14.TokenID;
        var v21098 = v23920.Identifier;
        var v16411 = v21097 == v21098;
        var v21101 = !v16411;
        if (v21101) {
          var v21099 = this.currentToken;
          var v21100 = this.strictMode;
          v16411 = JAM.call(TypeScript$$14.convertTokToID, TypeScript$$14, [v21099, v21100], JAM.policy.p1);
        }
        var v8573 = v16411;
        if (v8573) {
          var v8568 = this.currentToken;
          var idText$$1 = v8568.getText();
          var v16412 = this.currentToken;
          var v8569 = v16412.hasEscapeSequence;
          ast$$40 = JAM.call(this.createRef, this, [idText$$1, v8569, minChar$$24], JAM.policy.p1);
          sawId = true;
          ast$$40.minChar = minChar$$24;
          var v8570 = this.scanner;
          var v26859 = v8570.scan();
          this.currentToken = v26859;
          var v21102 = this.currentToken;
          var v16413 = v21102.tokenId;
          var v21103 = TypeScript$$14.TokenID;
          var v16414 = v21103.Question;
          var v8571 = v16413 == v16414;
          if (v8571) {
            var v16415 = ast$$40.flags;
            var v21104 = TypeScript$$14.ASTFlags;
            var v16416 = v21104.PossibleOptionalParameter;
            ast$$40.flags = v16415 | v16416;
          }
          var v8572 = this.scanner;
          limChar$$7 = v8572.lastTokenLimChar();
        }
      }
      if (inCast) {
        var v16417 = TypeScript$$14.TokenID;
        var v8575 = v16417.GreaterThan;
        JAM.call(this.checkCurrentToken, this, [v8575, errorRecoverySet$$29], JAM.policy.p1);
      }
      var v8636 = ast$$40 == null;
      if (v8636) {
        var v16418 = this.currentToken;
        var v8635 = v16418.tokenId;
        switch(v8635) {
          case TypeScript$$14.TokenID.OpenParen:
            var v8576 = this.scanner;
            minChar$$24 = v8576.pos;
            var v16419 = this.scanner;
            var v8577 = v16419.previousToken();
            var prevTokId = v8577.tokenId;
            var v8578 = this.scanner;
            var v26860 = v8578.scan();
            this.currentToken = v26860;
            var v25292 = TypeScript$$14.TokenID;
            var v23921 = v25292.OpenParen;
            var v21105 = prevTokId == v23921;
            var v23923 = !v21105;
            if (v23923) {
              var v25293 = TypeScript$$14.TokenID;
              var v23922 = v25293.Comma;
              v21105 = prevTokId == v23922;
            }
            var v16420 = v21105;
            var v21107 = !v16420;
            if (v21107) {
              var v23924 = TypeScript$$14.TokenID;
              var v21106 = v23924.EqualsEquals;
              v16420 = prevTokId == v21106;
            }
            var v8579 = v16420;
            var v16422 = !v8579;
            if (v16422) {
              var v21108 = TypeScript$$14.TokenID;
              var v16421 = v21108.Colon;
              v8579 = prevTokId == v16421;
            }
            var couldBeLambda = v8579;
            var v16423 = couldBeLambda;
            if (v16423) {
              var v23925 = this.currentToken;
              var v21109 = v23925.tokenId;
              var v23926 = TypeScript$$14.TokenID;
              var v21110 = v23926.CloseParen;
              v16423 = v21109 == v21110;
            }
            var v8587 = v16423;
            if (v8587) {
              parseAsLambda = true;
              expectlambdaRParen = false;
              var v8580 = this.scanner;
              var v26861 = v8580.scan();
              this.currentToken = v26861;
            } else {
              var v16424 = couldBeLambda;
              if (v16424) {
                var v23927 = this.currentToken;
                var v21111 = v23927.tokenId;
                var v23928 = TypeScript$$14.TokenID;
                var v21112 = v23928.DotDotDot;
                v16424 = v21111 == v21112;
              }
              var v8586 = v16424;
              if (v8586) {
                parseAsLambda = true;
                expectlambdaRParen = true;
              } else {
                var v21113 = TypeScript$$14.ErrorRecoverySet;
                var v16425 = v21113.RParen;
                var v8581 = errorRecoverySet$$29 | v16425;
                var v16426 = TypeScript$$14.OperatorPrecedence;
                var v8582 = v16426.None;
                var v8583 = TypeContext.NoTypes;
                ast$$40 = JAM.call(this.parseExpr, this, [v8581, v8582, true, v8583, couldBeLambda], JAM.policy.p1);
                var v8584 = this.scanner;
                limChar$$7 = v8584.lastTokenLimChar();
                var v16427 = couldBeLambda;
                if (v16427) {
                  var v23929 = ast$$40.nodeType;
                  var v25294 = TypeScript$$14.NodeType;
                  var v23930 = v25294.Name;
                  var v21114 = v23929 == v23930;
                  var v23933 = !v21114;
                  if (v23933) {
                    var v23931 = ast$$40.nodeType;
                    var v25295 = TypeScript$$14.NodeType;
                    var v23932 = v25295.Comma;
                    v21114 = v23931 == v23932;
                  }
                  v16427 = v21114;
                }
                var v8585 = v16427;
                if (v8585) {
                  var v23934 = this.currentToken;
                  var v21115 = v23934.tokenId;
                  var v23935 = TypeScript$$14.TokenID;
                  var v21116 = v23935.Colon;
                  var v16428 = v21115 == v21116;
                  var v21119 = !v16428;
                  if (v21119) {
                    var v23936 = this.currentToken;
                    var v21117 = v23936.tokenId;
                    var v23937 = TypeScript$$14.TokenID;
                    var v21118 = v23937.Question;
                    v16428 = v21117 == v21118;
                  }
                  v8585 = v16428;
                }
                parseAsLambda = v8585;
                expectlambdaRParen = true;
              }
            }
            var v16429 = ast$$40;
            if (v16429) {
              v16429 = !parseAsLambda;
            }
            var v8592 = v16429;
            if (v8592) {
              var v16430 = ast$$40.flags;
              var v21120 = TypeScript$$14.ASTFlags;
              var v16431 = v21120.SkipNextRParen;
              var v8590 = JAM.call(TypeScript$$14.hasFlag, TypeScript$$14, [v16430, v16431], JAM.policy.p1);
              if (v8590) {
                var v8588 = ast$$40.flags;
                var v21121 = TypeScript$$14.ASTFlags;
                var v16432 = v21121.SkipNextRParen;
                var v8589 = ~v16432;
                ast$$40.flags = v8588 & v8589;
                break;
              }
              var v16433 = TypeScript$$14.TokenID;
              var v8591 = v16433.CloseParen;
              JAM.call(this.checkCurrentToken, this, [v8591, errorRecoverySet$$29], JAM.policy.p1);
              ast$$40.isParenthesized = true;
            }
            break;
          case TypeScript$$14.TokenID.NumberLiteral:
            var numTok = this.currentToken;
            var v8593 = this.scanner;
            var v26862 = v8593.scan();
            this.currentToken = v26862;
            var v8594 = TypeScript$$14.NumberLiteral;
            var v8595 = numTok.value;
            var v8596 = numTok.hasEmptyFraction;
            ast$$40 = JAM.new(v8594, [v8595, v8596]);
            ast$$40.minChar = minChar$$24;
            var v8597 = this.scanner;
            limChar$$7 = v8597.lastTokenLimChar();
            break;
          case TypeScript$$14.TokenID.StringLiteral:
            var v8598 = TypeScript$$14.StringLiteral;
            var v16434 = this.currentToken;
            var v8599 = v16434.getText();
            ast$$40 = JAM.new(v8598, [v8599]);
            var v8600 = this.scanner;
            var v26863 = v8600.scan();
            this.currentToken = v26863;
            ast$$40.minChar = minChar$$24;
            var v8601 = this.scanner;
            limChar$$7 = v8601.lastTokenLimChar();
            break;
          case TypeScript$$14.TokenID.RegularExpressionLiteral:
            var rtok = this.currentToken;
            var v8602 = TypeScript$$14.RegexLiteral;
            var v8603 = rtok.regex;
            ast$$40 = JAM.new(v8602, [v8603]);
            var v8604 = this.scanner;
            var v26864 = v8604.scan();
            this.currentToken = v26864;
            ast$$40.minChar = minChar$$24;
            var v8605 = this.scanner;
            limChar$$7 = v8605.lastTokenLimChar();
            break;
          case TypeScript$$14.TokenID.OpenBracket:
            var v8606 = this.scanner;
            minChar$$24 = v8606.startPos;
            var v8607 = this.scanner;
            var v26865 = v8607.scan();
            this.currentToken = v26865;
            var v21122 = TypeScript$$14.ErrorRecoverySet;
            var v16435 = v21122.RBrack;
            var v8608 = v16435 | errorRecoverySet$$29;
            ast$$40 = JAM.call(this.parseArrayLiteral, this, [v8608]);
            ast$$40.minChar = minChar$$24;
            var v8609 = this.scanner;
            limChar$$7 = v8609.pos;
            var v16436 = TypeScript$$14.TokenID;
            var v8610 = v16436.CloseBracket;
            JAM.call(this.checkCurrentToken, this, [v8610, errorRecoverySet$$29], JAM.policy.p1);
            break;
          case TypeScript$$14.TokenID.OpenBrace:
            var v8611 = this.scanner;
            minChar$$24 = v8611.startPos;
            var v8612 = this.scanner;
            var v26866 = v8612.scan();
            this.currentToken = v26866;
            var v21123 = TypeScript$$14.ErrorRecoverySet;
            var v16437 = v21123.RCurly;
            var v8613 = v16437 | errorRecoverySet$$29;
            var members$$11 = JAM.call(this.parseMemberList, this, [v8613]);
            var v16438 = TypeScript$$14.TokenID;
            var v8614 = v16438.CloseBrace;
            JAM.call(this.checkCurrentToken, this, [v8614, errorRecoverySet$$29], JAM.policy.p1);
            var v8615 = TypeScript$$14.UnaryExpression;
            var v16439 = TypeScript$$14.NodeType;
            var v8616 = v16439.ObjectLit;
            ast$$40 = JAM.new(v8615, [v8616, members$$11]);
            ast$$40.minChar = minChar$$24;
            var v8617 = this.scanner;
            limChar$$7 = v8617.lastTokenLimChar();
            members$$11.minChar = minChar$$24;
            members$$11.limChar = limChar$$7;
            break;
          case TypeScript$$14.TokenID.LessThan:
            var v8618 = this.scanner;
            minChar$$24 = v8618.startPos;
            var v8619 = this.scanner;
            var v26867 = v8619.scan();
            this.currentToken = v26867;
            var v16440 = TypeScript$$14.ErrorRecoverySet;
            var v8620 = v16440.BinOp;
            var term$$3 = JAM.call(this.parseTypeReference, this, [v8620, false], JAM.policy.p1);
            var v16441 = TypeScript$$14.TokenID;
            var v8621 = v16441.GreaterThan;
            JAM.call(this.checkCurrentToken, this, [v8621, errorRecoverySet$$29], JAM.policy.p1);
            var v8622 = TypeScript$$14.UnaryExpression;
            var v16442 = TypeScript$$14.NodeType;
            var v8623 = v16442.TypeAssertion;
            var v21124 = TypeScript$$14.OperatorPrecedence;
            var v16443 = v21124.Unary;
            var v16444 = TypeContext.NoTypes;
            var v8624 = JAM.call(this.parseExpr, this, [errorRecoverySet$$29, v16443, false, v16444], JAM.policy.p1);
            ast$$40 = JAM.new(v8622, [v8623, v8624]);
            ast$$40.castTerm = term$$3;
            break;
          default:
            var v16445 = this.prevExpr;
            if (v16445) {
              var v23938 = this.prevExpr;
              var v21125 = v23938.flags;
              var v23939 = TypeScript$$14.ASTFlags;
              var v21126 = v23939.PossibleOptionalParameter;
              v16445 = JAM.call(TypeScript$$14.hasFlag, TypeScript$$14, [v21125, v21126], JAM.policy.p1);
            }
            var v8634 = v16445;
            if (v8634) {
              parseAsLambda = true;
              ast$$40 = this.prevExpr;
            } else {
              JAM.call(this.reportParseError, this, ["Check format of expression term"]);
              var v8633 = this.errorRecovery;
              if (v8633) {
                var v8625 = TypeScript$$14.MissingIdentifier;
                var ident$$1 = new v8625;
                ident$$1.minChar = minChar$$24;
                var v16446 = ident$$1.flags;
                var v21127 = TypeScript$$14.ASTFlags;
                var v16447 = v21127.Error;
                ident$$1.flags = v16446 | v16447;
                var v21128 = TypeScript$$14.ErrorRecoverySet;
                var v16448 = v21128.Postfix;
                var v8626 = errorRecoverySet$$29 | v16448;
                JAM.call(this.skip, this, [v8626]);
                var v23940 = this.currentToken;
                var v21129 = v23940.tokenId;
                var v23941 = TypeScript$$14.TokenID;
                var v21130 = v23941.Identifier;
                var v16449 = v21129 == v21130;
                var v21133 = !v16449;
                if (v21133) {
                  var v21131 = this.currentToken;
                  var v21132 = this.strictMode;
                  v16449 = JAM.call(TypeScript$$14.convertTokToID, TypeScript$$14, [v21131, v21132], JAM.policy.p1);
                }
                var v8632 = v16449;
                if (v8632) {
                  var v16450 = this.currentToken;
                  var v8627 = v16450.getText();
                  var v16451 = this.currentToken;
                  var v8628 = v16451.hasEscapeSequence;
                  JAM.call(ident$$1.setText, ident$$1, [v8627, v8628], JAM.policy.p1);
                  var v8629 = this.scanner;
                  var v26868 = v8629.scan();
                  this.currentToken = v26868;
                  var v8630 = this.scanner;
                  limChar$$7 = v8630.lastTokenLimChar();
                } else {
                  var v8631 = this.scanner;
                  limChar$$7 = v8631.lastTokenLimChar();
                }
                ast$$40 = ident$$1;
              }
            }
          ;
        }
      }
      if (parseAsLambda) {
        var v25915 = this.currentToken;
        var v25296 = v25915.tokenId;
        var v25916 = TypeScript$$14.TokenID;
        var v25297 = v25916.Colon;
        var v23942 = v25296 == v25297;
        var v25300 = !v23942;
        if (v25300) {
          var v25917 = this.currentToken;
          var v25298 = v25917.tokenId;
          var v25918 = TypeScript$$14.TokenID;
          var v25299 = v25918.Comma;
          v23942 = v25298 == v25299;
        }
        var v21134 = v23942;
        var v23945 = !v21134;
        if (v23945) {
          var v25301 = this.currentToken;
          var v23943 = v25301.tokenId;
          var v25302 = TypeScript$$14.TokenID;
          var v23944 = v25302.CloseParen;
          v21134 = v23943 == v23944;
        }
        var v16452 = v21134;
        var v21137 = !v16452;
        if (v21137) {
          var v23946 = this.currentToken;
          var v21135 = v23946.tokenId;
          var v23947 = TypeScript$$14.TokenID;
          var v21136 = v23947.DotDotDot;
          v16452 = v21135 == v21136;
        }
        var v8638 = v16452;
        if (v8638) {
          ast$$40 = JAM.call(this.parseLambdaExpr, this, [errorRecoverySet$$29, ast$$40, true, expectlambdaRParen], JAM.policy.p1);
          ast$$40.minChar = minChar$$24;
          var v8637 = this.scanner;
          limChar$$7 = v8637.lastTokenLimChar();
          ast$$40.limChar = limChar$$7;
        } else {
          if (ast$$40) {
            ast$$40.isParenthesized = true;
          }
        }
      }
      var v16453 = sawId;
      if (v16453) {
        var v21138 = TypeContext.NoTypes;
        v16453 = typeContext != v21138;
      }
      var v8639 = v16453;
      if (v8639) {
        var v16454 = TypeContext.ArraySuffix;
        typeContext = typeContext | v16454;
      }
      var postFix = JAM.call(this.parsePostfixOperators, this, [errorRecoverySet$$29, ast$$40, allowCall, inNew, typeContext, minChar$$24, limChar$$7], JAM.policy.p1);
      if (postFix) {
        var v16455 = sawId;
        if (v16455) {
          var v21139 = postFix.nodeType;
          var v23948 = TypeScript$$14.NodeType;
          var v21140 = v23948.Index;
          v16455 = v21139 == v21140;
        }
        var v8641 = v16455;
        if (v8641) {
          var binExpr = postFix;
          var v16456 = binExpr.operand2;
          var v8640 = v16456 == null;
          if (v8640) {
            postFix = JAM.call(this.convertToTypeReference, this, [postFix]);
          }
        }
        postFix.minChar = minChar$$24;
        var v8642 = postFix.limChar;
        var v16457 = this.scanner;
        var v8643 = v16457.lastTokenLimChar();
        var v26869 = JAM.call(TypeScript$$14.max, TypeScript$$14, [v8642, v8643], JAM.policy.p1);
        postFix.limChar = v26869;
        return postFix;
      } else {
        var v8644 = TypeScript$$14.AST;
        var v16458 = TypeScript$$14.NodeType;
        var v8645 = v16458.Error;
        return JAM.new(v8644, [v8645]);
      }
      return;
    }
    function v576(errorRecoverySet$$28) {
      var arrayLiteral = null;
      var v8646 = TypeScript$$14.UnaryExpression;
      var v16459 = TypeScript$$14.NodeType;
      var v8647 = v16459.ArrayLit;
      var v8648 = JAM.call(this.parseArrayList, this, [errorRecoverySet$$28]);
      arrayLiteral = JAM.new(v8646, [v8647, v8648]);
      return arrayLiteral;
    }
    function v575(errorRecoverySet$$27) {
      var elements$$1 = null;
      var v21141 = this.currentToken;
      var v16460 = v21141.tokenId;
      var v21142 = TypeScript$$14.TokenID;
      var v16461 = v21142.CloseBracket;
      var v8651 = v16460 == v16461;
      if (v8651) {
        return elements$$1;
      } else {
        var v8649 = TypeScript$$14.ASTList;
        elements$$1 = new v8649;
        var v8650 = this.scanner;
        elements$$1.minChar = v8650.startPos;
      }
      var arg$$9;
      for (;;) {
        var v23949 = this.currentToken;
        var v21143 = v23949.tokenId;
        var v23950 = TypeScript$$14.TokenID;
        var v21144 = v23950.Comma;
        var v16462 = v21143 == v21144;
        var v21147 = !v16462;
        if (v21147) {
          var v23951 = this.currentToken;
          var v21145 = v23951.tokenId;
          var v23952 = TypeScript$$14.TokenID;
          var v21146 = v23952.CloseBracket;
          v16462 = v21145 == v21146;
        }
        var v8657 = v16462;
        if (v8657) {
          var v8652 = TypeScript$$14.AST;
          var v16463 = TypeScript$$14.NodeType;
          var v8653 = v16463.EmptyExpr;
          arg$$9 = JAM.new(v8652, [v8653]);
        } else {
          var v21148 = TypeScript$$14.ErrorRecoverySet;
          var v16464 = v21148.Comma;
          var v8654 = v16464 | errorRecoverySet$$27;
          var v16465 = TypeScript$$14.OperatorPrecedence;
          var v8655 = v16465.Comma;
          var v8656 = TypeContext.NoTypes;
          arg$$9 = JAM.call(this.parseExpr, this, [v8654, v8655, true, v8656], JAM.policy.p1);
        }
        JAM.call(elements$$1.append, elements$$1, [arg$$9]);
        var v21149 = this.currentToken;
        var v16466 = v21149.tokenId;
        var v21150 = TypeScript$$14.TokenID;
        var v16467 = v21150.Comma;
        var v8658 = v16466 != v16467;
        if (v8658) {
          break;
        }
        var v8659 = this.scanner;
        var v26870 = v8659.scan();
        this.currentToken = v26870;
      }
      var v8660 = this.scanner;
      var v26871 = v8660.lastTokenLimChar();
      elements$$1.limChar = v26871;
      return elements$$1;
    }
    function v574(errorRecoverySet$$26) {
      var v8661 = TypeScript$$14.ASTList;
      var elements = new v8661;
      var v21151 = this.currentToken;
      var v16468 = v21151.tokenId;
      var v21152 = TypeScript$$14.TokenID;
      var v16469 = v21152.CloseBrace;
      var v8662 = v16468 == v16469;
      if (v8662) {
        return elements;
      }
      var idHint = null;
      var memberName$$1 = null;
      var memberExpr = null;
      var member$$2 = null;
      var v8663 = this.scanner;
      var minChar$$23 = v8663.startPos;
      var isSet = false;
      var skippedTokenForGetSetId = false;
      var getSetTok = null;
      var getSetStartPos = 0;
      var getSetPos = 0;
      for (;;) {
        var accessorPattern = false;
        var v23953 = this.currentToken;
        var v21153 = v23953.tokenId;
        var v23954 = TypeScript$$14.TokenID;
        var v21154 = v23954.Get;
        var v16470 = v21153 == v21154;
        var v21157 = !v16470;
        if (v21157) {
          var v23955 = this.currentToken;
          var v21155 = v23955.tokenId;
          var v23956 = TypeScript$$14.TokenID;
          var v21156 = v23956.Set;
          v16470 = v21155 == v21156;
        }
        var v8699 = v16470;
        if (v8699) {
          var v16471 = this.currentToken;
          var v8664 = v16471.tokenId;
          var v16472 = TypeScript$$14.TokenID;
          var v8665 = v16472.Set;
          isSet = v8664 == v8665;
          getSetTok = this.currentToken;
          var v8666 = this.scanner;
          getSetStartPos = v8666.startPos;
          var v8667 = this.scanner;
          getSetPos = v8667.pos;
          var v8668 = this.scanner;
          var v26872 = v8668.scan();
          this.currentToken = v26872;
          var v23957 = this.currentToken;
          var v21158 = v23957.tokenId;
          var v23958 = TypeScript$$14.TokenID;
          var v21159 = v23958.Identifier;
          var v16473 = v21158 == v21159;
          var v21161 = !v16473;
          if (v21161) {
            var v21160 = this.currentToken;
            v16473 = JAM.call(TypeScript$$14.convertTokToIDName, TypeScript$$14, [v21160]);
          }
          var v8677 = v16473;
          if (v8677) {
            var v8669;
            if (isSet) {
              v8669 = "set";
            } else {
              v8669 = "get";
            }
            idHint = v8669;
            var v16474 = this.currentToken;
            var v8670 = v16474.getText();
            idHint = idHint + v8670;
            var v8671 = TypeScript$$14.Identifier;
            var v8672 = this.currentToken;
            memberName$$1 = JAM.call(v8671.fromToken, v8671, [v8672]);
            var v8673 = this.scanner;
            memberName$$1.minChar = v8673.startPos;
            accessorPattern = true;
            var v16475 = TypeScript$$14.codeGenTarget;
            var v21162 = TypeScript$$14.CodeGenTarget;
            var v16476 = v21162.ES5;
            var v8674 = v16475 < v16476;
            if (v8674) {
              JAM.call(this.reportParseError, this, ["Property accessors are only available when targeting ES5 or greater"]);
            }
          } else {
            var v21163 = this.currentToken;
            var v16477 = v21163.tokenId;
            var v21164 = TypeScript$$14.TokenID;
            var v16478 = v21164.Colon;
            var v8676 = v16477 != v16478;
            if (v8676) {
              JAM.call(this.reportParseError, this, ["Expected identifier, string or number as accessor name"]);
            } else {
              skippedTokenForGetSetId = true;
              var v8675 = TypeScript$$14.Identifier;
              memberName$$1 = JAM.call(v8675.fromToken, v8675, [getSetTok]);
              memberName$$1.minChar = getSetStartPos;
              memberName$$1.limChar = getSetPos;
            }
          }
        } else {
          var v23959 = this.currentToken;
          var v21165 = v23959.tokenId;
          var v23960 = TypeScript$$14.TokenID;
          var v21166 = v23960.Identifier;
          var v16479 = v21165 == v21166;
          var v21168 = !v16479;
          if (v21168) {
            var v21167 = this.currentToken;
            v16479 = JAM.call(TypeScript$$14.convertTokToIDName, TypeScript$$14, [v21167]);
          }
          var v8698 = v16479;
          if (v8698) {
            var v8678 = this.currentToken;
            idHint = v8678.getText();
            var v8679 = TypeScript$$14.Identifier;
            var v8680 = this.currentToken;
            memberName$$1 = JAM.call(v8679.fromToken, v8679, [v8680]);
            var v8681 = this.scanner;
            memberName$$1.minChar = v8681.startPos;
            var v8682 = this.scanner;
            memberName$$1.limChar = v8682.pos;
          } else {
            var v21169 = this.currentToken;
            var v16480 = v21169.tokenId;
            var v21170 = TypeScript$$14.TokenID;
            var v16481 = v21170.StringLiteral;
            var v8697 = v16480 == v16481;
            if (v8697) {
              var v8683 = this.currentToken;
              idHint = v8683.getText();
              var v8684 = TypeScript$$14.StringLiteral;
              memberName$$1 = JAM.new(v8684, [idHint]);
              var v8685 = this.scanner;
              memberName$$1.minChar = v8685.startPos;
              var v8686 = this.scanner;
              memberName$$1.limChar = v8686.pos;
            } else {
              var v21171 = this.currentToken;
              var v16482 = v21171.tokenId;
              var v21172 = TypeScript$$14.TokenID;
              var v16483 = v21172.NumberLiteral;
              var v8696 = v16482 == v16483;
              if (v8696) {
                var ntok = this.currentToken;
                var v8687 = ntok.value;
                idHint = v8687.toString();
                var v8688 = TypeScript$$14.StringLiteral;
                memberName$$1 = JAM.new(v8688, [idHint]);
                var v8689 = this.scanner;
                memberName$$1.minChar = v8689.startPos;
                var v8690 = this.scanner;
                memberName$$1.limChar = v8690.pos;
              } else {
                JAM.call(this.reportParseError, this, ["Expected identifier, string or number as member name"]);
                var v8695 = this.errorRecovery;
                if (v8695) {
                  var v8691 = TypeScript$$14.MissingIdentifier;
                  memberName$$1 = new v8691;
                  var v8692 = this.scanner;
                  memberName$$1.minChar = v8692.startPos;
                  var v16484 = memberName$$1.flags;
                  var v21173 = TypeScript$$14.ASTFlags;
                  var v16485 = v21173.Error;
                  memberName$$1.flags = v16484 | v16485;
                  var v21174 = TypeScript$$14.ErrorRecoverySet;
                  var v16486 = v21174.Comma;
                  var v8693 = errorRecoverySet$$26 | v16486;
                  JAM.call(this.skip, this, [v8693]);
                  var v8694 = this.scanner;
                  var v26873 = v8694.lastTokenLimChar();
                  memberName$$1.limChar = v26873;
                }
              }
            }
          }
        }
        var v8701 = !skippedTokenForGetSetId;
        if (v8701) {
          var v8700 = this.scanner;
          var v26874 = v8700.scan();
          this.currentToken = v26874;
        } else {
          skippedTokenForGetSetId = false;
        }
        var v21175 = this.currentToken;
        var v16487 = v21175.tokenId;
        var v21176 = TypeScript$$14.TokenID;
        var v16488 = v21176.Question;
        var v8703 = v16487 == v16488;
        if (v8703) {
          var v16489 = memberName$$1.flags;
          var v21177 = TypeScript$$14.ASTFlags;
          var v16490 = v21177.OptionalName;
          memberName$$1.flags = v16489 | v16490;
          var v8702 = this.scanner;
          var v26875 = v8702.scan();
          this.currentToken = v26875;
        }
        if (accessorPattern) {
          var v8704 = TypeScript$$14.ASTList;
          var args$$10 = new v8704;
          var v21178 = TypeScript$$14.ErrorRecoverySet;
          var v16491 = v21178.RParen;
          var v8705 = errorRecoverySet$$26 | v16491;
          var v8706 = !isSet;
          JAM.call(this.parseFormalParameterList, this, [v8705, args$$10, false, true, false, v8706, isSet, false, null, true], JAM.policy.p1);
          var v21179 = TypeScript$$14.ErrorRecoverySet;
          var v16492 = v21179.RCurly;
          var v8707 = errorRecoverySet$$26 | v16492;
          var v16493 = TypeScript$$14.AllowedElements;
          var v8708 = v16493.None;
          var v16494 = this.scanner;
          var v8709 = v16494.startPos;
          var v16495 = TypeScript$$14.Modifiers;
          var v8710 = v16495.None;
          var funcDecl$$11 = JAM.call(this.parseFunctionStatements, this, [v8707, memberName$$1, false, true, args$$10, v8708, v8709, false, v8710], JAM.policy.p1);
          var v16496 = isSet;
          if (v16496) {
            v16496 = funcDecl$$11.returnTypeAnnotation;
          }
          var v8711 = v16496;
          if (v8711) {
            JAM.call(this.reportParseError, this, ["Property setters may not declare a return type"]);
          }
          var v16497 = funcDecl$$11.fncFlags;
          var v21180;
          if (isSet) {
            var v23961 = TypeScript$$14.FncFlags;
            v21180 = v23961.SetAccessor;
          } else {
            var v23962 = TypeScript$$14.FncFlags;
            v21180 = v23962.GetAccessor;
          }
          var v16498 = v21180;
          funcDecl$$11.fncFlags = v16497 | v16498;
          var v16499 = funcDecl$$11.fncFlags;
          var v21181 = TypeScript$$14.FncFlags;
          var v16500 = v21181.IsFunctionExpression;
          funcDecl$$11.fncFlags = v16499 | v16500;
          funcDecl$$11.hint = idHint;
          memberExpr = funcDecl$$11;
          var v8712 = TypeScript$$14.BinaryExpression;
          var v16501 = TypeScript$$14.NodeType;
          var v8713 = v16501.Member;
          member$$2 = JAM.new(v8712, [v8713, memberName$$1, memberExpr]);
          member$$2.minChar = memberName$$1.minChar;
          var v16502 = memberExpr.nodeType;
          var v21182 = TypeScript$$14.NodeType;
          var v16503 = v21182.FuncDecl;
          var v8714 = v16502 == v16503;
          if (v8714) {
            funcDecl$$11 = memberExpr;
            funcDecl$$11.hint = idHint;
          }
        } else {
          var v21183 = this.currentToken;
          var v16504 = v21183.tokenId;
          var v21184 = TypeScript$$14.TokenID;
          var v16505 = v21184.Colon;
          var v8725 = v16504 == v16505;
          if (v8725) {
            var v8715 = this.scanner;
            var v26876 = v8715.scan();
            this.currentToken = v26876;
            var v21185 = TypeScript$$14.ErrorRecoverySet;
            var v16506 = v21185.Comma;
            var v8716 = v16506 | errorRecoverySet$$26;
            var v16507 = TypeScript$$14.OperatorPrecedence;
            var v8717 = v16507.Comma;
            var v8718 = TypeContext.NoTypes;
            memberExpr = JAM.call(this.parseExpr, this, [v8716, v8717, true, v8718], JAM.policy.p1);
            var v16508 = memberExpr.nodeType;
            var v21186 = TypeScript$$14.NodeType;
            var v16509 = v21186.TypeRef;
            var v8719 = v16508 == v16509;
            if (v8719) {
              JAM.call(this.reportParseError, this, ["Expected 'new' on array declaration in member definition"]);
            }
            var v8720 = TypeScript$$14.BinaryExpression;
            var v16510 = TypeScript$$14.NodeType;
            var v8721 = v16510.Member;
            member$$2 = JAM.new(v8720, [v8721, memberName$$1, memberExpr]);
            member$$2.minChar = memberName$$1.minChar;
            var v16511 = memberExpr.nodeType;
            var v21187 = TypeScript$$14.NodeType;
            var v16512 = v21187.FuncDecl;
            var v8722 = v16511 == v16512;
            if (v8722) {
              funcDecl$$11 = memberExpr;
              funcDecl$$11.hint = idHint;
            }
          } else {
            JAM.call(this.reportParseError, this, ["Expected ':' in member definition"]);
            var v8724 = this.errorRecovery;
            if (v8724) {
              JAM.call(this.skip, this, [errorRecoverySet$$26]);
              var v16513 = elements.flags;
              var v21188 = TypeScript$$14.ASTFlags;
              var v16514 = v21188.Error;
              elements.flags = v16513 | v16514;
              elements.minChar = minChar$$23;
              var v8723 = this.scanner;
              var v26877 = v8723.lastTokenLimChar();
              elements.limChar = v26877;
              return elements;
            }
          }
        }
        idHint = null;
        JAM.call(elements.append, elements, [member$$2]);
        var v8726 = this.scanner;
        var v26878 = v8726.lastTokenLimChar();
        member$$2.limChar = v26878;
        var v21189 = this.currentToken;
        var v16515 = v21189.tokenId;
        var v21190 = TypeScript$$14.TokenID;
        var v16516 = v21190.Comma;
        var v8728 = v16515 != v16516;
        if (v8728) {
          break;
        } else {
          var v8727 = this.scanner;
          var v26879 = v8727.scan();
          this.currentToken = v26879;
        }
        var v21191 = this.currentToken;
        var v16517 = v21191.tokenId;
        var v21192 = TypeScript$$14.TokenID;
        var v16518 = v21192.CloseBrace;
        var v8729 = v16517 == v16518;
        if (v8729) {
          break;
        }
      }
      if (member$$2) {
        elements.limChar = member$$2.limChar;
      }
      elements.minChar = minChar$$23;
      return elements;
    }
    function v573(errorRecoverySet$$25, modifiers$$11, allowIn) {
      var isStatic$$4 = false;
      var v16519 = TypeScript$$14.Modifiers;
      var v8730 = v16519.Readonly;
      var isConst = JAM.call(TypeScript$$14.hasFlag, TypeScript$$14, [modifiers$$11, v8730], JAM.policy.p1);
      var v8731 = this.scanner;
      var minChar$$22 = v8731.startPos;
      var varDecl$$10 = null;
      var declList = null;
      var multivar = false;
      var v8732 = this.scanner;
      var v26880 = v8732.scan();
      this.currentToken = v26880;
      var varDeclPreComments = this.parseComments();
      for (;true;) {
        var v23963 = this.currentToken;
        var v21193 = v23963.tokenId;
        var v23964 = TypeScript$$14.TokenID;
        var v21194 = v23964.Identifier;
        var v16520 = v21193 != v21194;
        if (v16520) {
          var v23965 = this.currentToken;
          var v23966 = this.strictMode;
          var v21195 = JAM.call(TypeScript$$14.convertTokToID, TypeScript$$14, [v23965, v23966], JAM.policy.p1);
          v16520 = !v21195;
        }
        var v8738 = v16520;
        if (v8738) {
          JAM.call(this.reportParseError, this, ["Expected identifier in variable declaration"]);
          var v8737 = this.errorRecovery;
          if (v8737) {
            var v8733 = TypeScript$$14.VarDecl;
            var v16521 = TypeScript$$14.MissingIdentifier;
            var v8734 = new v16521;
            var v8735 = this.nestingLevel;
            varDecl$$10 = JAM.new(v8733, [v8734, v8735]);
            varDecl$$10.minChar = minChar$$22;
            JAM.call(this.skip, this, [errorRecoverySet$$25]);
            var v16522 = varDecl$$10.flags;
            var v21196 = TypeScript$$14.ASTFlags;
            var v16523 = v21196.Error;
            varDecl$$10.flags = v16522 | v16523;
            var v8736 = this.scanner;
            var v26881 = v8736.lastTokenLimChar();
            varDecl$$10.limChar = v26881;
            return varDecl$$10;
          }
        }
        var v8739 = TypeScript$$14.Identifier;
        var v8740 = this.currentToken;
        var varDeclName = JAM.call(v8739.fromToken, v8739, [v8740]);
        var v16524 = this.strictMode;
        if (v16524) {
          var v21197 = varDeclName.text;
          v16524 = v21197 == "eval";
        }
        var v8741 = v16524;
        if (v8741) {
          JAM.call(this.reportParseError, this, ["'eval' may not name a variable in strict mode"]);
        }
        var v8742 = this.nestingLevel;
        varDecl$$10 = JAM.call(this.makeVarDecl, this, [varDeclName, v8742], JAM.policy.p1);
        var v8743 = varDecl$$10.id;
        var v16525 = this.scanner;
        v8743.minChar = v16525.startPos;
        var v8744 = varDecl$$10.id;
        var v16526 = this.scanner;
        v8744.limChar = v16526.pos;
        varDecl$$10.preComments = varDeclPreComments;
        if (isStatic$$4) {
          var v16527 = varDecl$$10.varFlags;
          var v21198 = TypeScript$$14.VarFlags;
          var v16528 = v21198.Static;
          varDecl$$10.varFlags = v16527 | v16528;
        }
        var v21199 = TypeScript$$14.Modifiers;
        var v16529 = v21199.Readonly;
        var v8745 = JAM.call(TypeScript$$14.hasFlag, TypeScript$$14, [modifiers$$11, v16529], JAM.policy.p1);
        if (v8745) {
          var v16530 = varDecl$$10.varFlags;
          var v21200 = TypeScript$$14.VarFlags;
          var v16531 = v21200.Readonly;
          varDecl$$10.varFlags = v16530 | v16531;
        }
        var v21201 = this.parsingDeclareFile;
        var v23967 = !v21201;
        if (v23967) {
          v21201 = this.ambientModule;
        }
        var v16532 = v21201;
        var v21203 = !v16532;
        if (v21203) {
          var v23968 = TypeScript$$14.Modifiers;
          var v21202 = v23968.Ambient;
          v16532 = JAM.call(TypeScript$$14.hasFlag, TypeScript$$14, [modifiers$$11, v21202], JAM.policy.p1);
        }
        var v8746 = v16532;
        if (v8746) {
          var v16533 = varDecl$$10.varFlags;
          var v21204 = TypeScript$$14.VarFlags;
          var v16534 = v21204.Ambient;
          varDecl$$10.varFlags = v16533 | v16534;
        }
        var v21205 = this.parsingDeclareFile;
        var v23969 = !v21205;
        if (v23969) {
          v21205 = this.ambientModule;
        }
        var v16535 = v21205;
        var v21207 = !v16535;
        if (v21207) {
          var v23970 = TypeScript$$14.Modifiers;
          var v21206 = v23970.Exported;
          v16535 = JAM.call(TypeScript$$14.hasFlag, TypeScript$$14, [modifiers$$11, v21206], JAM.policy.p1);
        }
        var v8747 = v16535;
        if (v8747) {
          var v16536 = varDecl$$10.varFlags;
          var v21208 = TypeScript$$14.VarFlags;
          var v16537 = v21208.Exported;
          varDecl$$10.varFlags = v16536 | v16537;
        }
        varDecl$$10.minChar = minChar$$22;
        if (declList) {
          JAM.call(declList.append, declList, [varDecl$$10]);
        }
        var v8748 = this.scanner;
        var v26882 = v8748.scan();
        this.currentToken = v26882;
        var v21209 = this.currentToken;
        var v16538 = v21209.tokenId;
        var v21210 = TypeScript$$14.TokenID;
        var v16539 = v21210.Colon;
        var v8751 = v16538 == v16539;
        if (v8751) {
          var v8749 = this.scanner;
          var v26883 = v8749.scan();
          this.currentToken = v26883;
          var prevInFncDecl = this.inFncDecl;
          this.inFncDecl = false;
          var v23971 = TypeScript$$14.ErrorRecoverySet;
          var v21211 = v23971.Asg;
          var v16540 = errorRecoverySet$$25 | v21211;
          var v21212 = TypeScript$$14.ErrorRecoverySet;
          var v16541 = v21212.Comma;
          var v8750 = v16540 | v16541;
          var v26884 = JAM.call(this.parseTypeReference, this, [v8750, false], JAM.policy.p1);
          varDecl$$10.typeExpr = v26884;
          this.inFncDecl = prevInFncDecl;
        }
        var v21213 = this.currentToken;
        var v16542 = v21213.tokenId;
        var v21214 = TypeScript$$14.TokenID;
        var v16543 = v21214.Equals;
        var v8761 = v16542 == v16543;
        if (v8761) {
          var v16544 = varDecl$$10.varFlags;
          var v21215 = TypeScript$$14.VarFlags;
          var v16545 = v21215.Ambient;
          var v8752 = JAM.call(TypeScript$$14.hasFlag, TypeScript$$14, [v16544, v16545], JAM.policy.p1);
          if (v8752) {
            JAM.call(this.reportParseError, this, ["Ambient variable can not have an initializer"]);
          }
          var v8753 = this.scanner;
          var v26885 = v8753.scan();
          this.currentToken = v26885;
          var v21216 = TypeScript$$14.ErrorRecoverySet;
          var v16546 = v21216.Comma;
          var v8754 = v16546 | errorRecoverySet$$25;
          var v16547 = TypeScript$$14.OperatorPrecedence;
          var v8755 = v16547.Comma;
          var v8756 = TypeContext.NoTypes;
          var v26886 = JAM.call(this.parseExpr, this, [v8754, v8755, allowIn, v8756], JAM.policy.p1);
          varDecl$$10.init = v26886;
          var v8757 = varDecl$$10.init;
          varDecl$$10.limChar = v8757.limChar;
          var v21217 = varDecl$$10.init;
          var v16548 = v21217.nodeType;
          var v21218 = TypeScript$$14.NodeType;
          var v16549 = v21218.FuncDecl;
          var v8759 = v16548 == v16549;
          if (v8759) {
            var funcDecl$$10 = varDecl$$10.init;
            var v8758 = varDecl$$10.id;
            funcDecl$$10.hint = v8758.actualText;
          }
        } else {
          if (isConst) {
            JAM.call(this.reportParseError, this, ["const declaration requires initializer"]);
          }
          var v8760 = this.scanner;
          varDecl$$10.limChar = v8760.pos;
        }
        var v16550 = this.scanner;
        var v8762 = v16550.line;
        var v26887 = JAM.call(this.parseCommentsForLine, this, [v8762]);
        varDecl$$10.postComments = v26887;
        var v21219 = this.currentToken;
        var v16551 = v21219.tokenId;
        var v21220 = TypeScript$$14.TokenID;
        var v16552 = v21220.Comma;
        var v8763 = v16551 != v16552;
        if (v8763) {
          if (declList) {
            declList.limChar = varDecl$$10.limChar;
            return declList;
          } else {
            return varDecl$$10;
          }
        }
        var v8765 = !multivar;
        if (v8765) {
          var v8764 = TypeScript$$14.ASTList;
          declList = new v8764;
          declList.minChar = varDecl$$10.minChar;
          JAM.call(declList.append, declList, [varDecl$$10]);
          multivar = true;
        }
        var v8766 = this.scanner;
        var v26888 = v8766.scan();
        this.currentToken = v26888;
        var v8767 = this.scanner;
        minChar$$22 = v8767.startPos;
      }
      return;
    }
    function v572(errorRecoverySet$$24, modifiers$$10, requireSignature, isStatic$$3) {
      var text$$16 = null;
      var v8768 = this.scanner;
      var minChar$$21 = v8768.startPos;
      var nameLimChar = minChar$$21;
      var isNew = false;
      var isIndexer$$1 = false;
      var v8769 = this.prevIDTok;
      var wasAccessorID$$1 = v8769 != null;
      var v21221 = TypeScript$$14.Modifiers;
      var v16553 = v21221.Getter;
      var v8770 = JAM.call(TypeScript$$14.hasFlag, TypeScript$$14, [modifiers$$10, v16553], JAM.policy.p1);
      var v16555 = !v8770;
      if (v16555) {
        var v21222 = TypeScript$$14.Modifiers;
        var v16554 = v21222.Setter;
        v8770 = JAM.call(TypeScript$$14.hasFlag, TypeScript$$14, [modifiers$$10, v16554], JAM.policy.p1);
      }
      var isAccessor$$1 = v8770;
      var v21223 = this.parsingDeclareFile;
      var v23972 = !v21223;
      if (v23972) {
        v21223 = this.ambientModule;
      }
      var v16556 = v21223;
      var v21225 = !v16556;
      if (v21225) {
        var v23973 = TypeScript$$14.Modifiers;
        var v21224 = v23973.Ambient;
        v16556 = JAM.call(TypeScript$$14.hasFlag, TypeScript$$14, [modifiers$$10, v21224], JAM.policy.p1);
      }
      var v8771 = v16556;
      if (v8771) {
        requireSignature = true;
      }
      var v23974 = this.currentToken;
      var v21226 = v23974.tokenId;
      var v23975 = TypeScript$$14.TokenID;
      var v21227 = v23975.OpenParen;
      var v16557 = v21226 == v21227;
      if (v16557) {
        v16557 = !wasAccessorID$$1;
      }
      var v8811 = v16557;
      if (v8811) {
        var v16558 = !requireSignature;
        if (v16558) {
          v16558 = !isStatic$$3;
        }
        var v8774 = v16558;
        if (v8774) {
          JAM.call(this.reportParseError, this, ["Expected identifier in property declaration"]);
          var v8773 = this.errorRecovery;
          if (v8773) {
            JAM.call(this.skip, this, [errorRecoverySet$$24]);
            var v8772 = TypeScript$$14.MissingIdentifier;
            text$$16 = new v8772;
          }
        }
      } else {
        var v21228 = this.currentToken;
        var v16559 = v21228.tokenId;
        var v21229 = TypeScript$$14.TokenID;
        var v16560 = v21229.New;
        var v8810 = v16559 == v16560;
        if (v8810) {
          if (requireSignature) {
            var v8775 = this.scanner;
            var v26889 = v8775.scan();
            this.currentToken = v26889;
            var v21230 = this.currentToken;
            var v16561 = v21230.tokenId;
            var v21231 = TypeScript$$14.TokenID;
            var v16562 = v21231.OpenParen;
            var v8776 = v16561 == v16562;
            if (v8776) {
              isNew = true;
            }
          }
          var v8783 = !isNew;
          if (v8783) {
            var v8778 = !requireSignature;
            if (v8778) {
              var v8777 = this.scanner;
              var v26890 = v8777.scan();
              this.currentToken = v26890;
            }
            var v8779 = TypeScript$$14.Identifier;
            text$$16 = JAM.new(v8779, ["new"]);
            var v16563 = this.scanner;
            var v8780 = v16563.pos;
            text$$16.minChar = v8780 - 3;
            var v8781 = this.scanner;
            text$$16.limChar = v8781.pos;
            var v8782 = this.scanner;
            nameLimChar = v8782.pos;
          }
        } else {
          var v23976 = this.currentToken;
          var v21232 = v23976.tokenId;
          var v23977 = TypeScript$$14.TokenID;
          var v21233 = v23977.OpenBracket;
          var v16564 = v21232 == v21233;
          if (v16564) {
            v16564 = requireSignature;
          }
          var v8809 = v16564;
          if (v8809) {
            isIndexer$$1 = true;
            var v8784 = TypeScript$$14.Identifier;
            text$$16 = JAM.new(v8784, ["__item"]);
          } else {
            var v25303 = this.currentToken;
            var v23978 = v25303.tokenId;
            var v25304 = TypeScript$$14.TokenID;
            var v23979 = v25304.Identifier;
            var v21234 = v23978 != v23979;
            if (v21234) {
              var v25305 = this.currentToken;
              var v23980 = JAM.call(TypeScript$$14.convertTokToIDName, TypeScript$$14, [v25305]);
              v21234 = !v23980;
            }
            var v16565 = v21234;
            if (v16565) {
              v16565 = !wasAccessorID$$1;
            }
            var v8808 = v16565;
            if (v8808) {
              JAM.call(this.reportParseError, this, ["Expected identifier in property declaration"]);
              var v8794 = this.errorRecovery;
              if (v8794) {
                var v8785 = this.scanner;
                var eminChar = v8785.startPos;
                var v8786 = this.scanner;
                var curpos$$1 = v8786.pos;
                var v23981 = TypeScript$$14.ErrorRecoverySet;
                var v21235 = v23981.Comma;
                var v16566 = ~v21235;
                var v8787 = errorRecoverySet$$24 & v16566;
                JAM.call(this.skip, this, [v8787]);
                var v21236 = this.scanner;
                var v16567 = v21236.pos;
                var v8789 = v16567 == curpos$$1;
                if (v8789) {
                  var v8788 = this.scanner;
                  var v26891 = v8788.scan();
                  this.currentToken = v26891;
                }
                var v8790 = TypeScript$$14.VarDecl;
                var v16568 = TypeScript$$14.MissingIdentifier;
                var v8791 = new v16568;
                var v8792 = this.nestingLevel;
                var epd = JAM.new(v8790, [v8791, v8792]);
                var v16569 = epd.flags;
                var v21237 = TypeScript$$14.ASTFlags;
                var v16570 = v21237.Error;
                epd.flags = v16569 | v16570;
                epd.minChar = eminChar;
                var v8793 = this.scanner;
                var v26892 = v8793.lastTokenLimChar();
                epd.limChar = v26892;
                return epd;
              }
            } else {
              if (wasAccessorID$$1) {
                var v8795 = TypeScript$$14.Identifier;
                var v8796 = this.prevIDTok;
                text$$16 = JAM.call(v8795.fromToken, v8795, [v8796]);
                var v16571 = this.scanner;
                var v8797 = v16571.lastTokenLimChar();
                text$$16.minChar = v8797 - 3;
                var v8798 = this.scanner;
                var v26893 = v8798.lastTokenLimChar();
                text$$16.limChar = v26893;
                nameLimChar = text$$16.limChar;
                var v16572 = TypeScript$$14.codeGenTarget;
                var v21238 = TypeScript$$14.CodeGenTarget;
                var v16573 = v21238.ES5;
                var v8799 = v16572 < v16573;
                if (v8799) {
                  JAM.call(this.reportParseError, this, ["Property accessors are only available when targeting ES5 or greater"]);
                }
                var v23982 = this.currentToken;
                var v21239 = v23982.getText();
                var v21240 = text$$16.actualText;
                var v16574 = v21239 == v21240;
                if (v16574) {
                  var v21241 = this.currentToken;
                  var v21242 = this.prevIDTok;
                  v16574 = v21241 != v21242;
                }
                var v8801 = v16574;
                if (v8801) {
                  var v8800 = this.scanner;
                  var v26894 = v8800.scan();
                  this.currentToken = v26894;
                }
                this.prevIDTok = null;
              } else {
                var v8802 = TypeScript$$14.Identifier;
                var v8803 = this.currentToken;
                text$$16 = JAM.call(v8802.fromToken, v8802, [v8803]);
                var v8804 = this.scanner;
                text$$16.minChar = v8804.startPos;
                var v8805 = this.scanner;
                text$$16.limChar = v8805.pos;
                var v8806 = this.scanner;
                nameLimChar = v8806.pos;
                var v8807 = this.scanner;
                var v26895 = v8807.scan();
                this.currentToken = v26895;
              }
            }
          }
        }
      }
      var v21243 = this.currentToken;
      var v16575 = v21243.tokenId;
      var v21244 = TypeScript$$14.TokenID;
      var v16576 = v21244.Question;
      var v8814 = v16575 == v16576;
      if (v8814) {
        var v16577 = this.inInterfaceDecl;
        if (v16577) {
          v16577 = text$$16;
        }
        var v8812 = v16577;
        if (v8812) {
          var v16578 = text$$16.flags;
          var v21245 = TypeScript$$14.ASTFlags;
          var v16579 = v21245.OptionalName;
          text$$16.flags = v16578 | v16579;
        } else {
          JAM.call(this.reportParseError, this, ["Optional properties may only be declared on interface or object types"]);
        }
        var v8813 = this.scanner;
        var v26896 = v8813.scan();
        this.currentToken = v26896;
      }
      var v23983 = this.currentToken;
      var v21246 = v23983.tokenId;
      var v23984 = TypeScript$$14.TokenID;
      var v21247 = v23984.OpenParen;
      var v16580 = v21246 == v21247;
      var v21249 = !v16580;
      if (v21249) {
        var v21248 = isIndexer$$1;
        if (v21248) {
          var v25306 = this.currentToken;
          var v23985 = v25306.tokenId;
          var v25307 = TypeScript$$14.TokenID;
          var v23986 = v25307.OpenBracket;
          v21248 = v23985 == v23986;
        }
        v16580 = v21248;
      }
      var v8853 = v16580;
      if (v8853) {
        var v16581 = TypeScript$$14.ErrorRecoverySet;
        var v8815 = v16581.RParen;
        var ers = errorRecoverySet$$24 | v8815;
        if (isIndexer$$1) {
          var v16582 = TypeScript$$14.ErrorRecoverySet;
          var v8816 = v16582.RBrack;
          ers = errorRecoverySet$$24 | v8816;
        }
        var v16583 = this.inFncDecl;
        var v8817 = !v16583;
        var v16584 = this.parsingDeclareFile;
        var v21251 = !v16584;
        if (v21251) {
          var v23987 = TypeScript$$14.Modifiers;
          var v21250 = v23987.Ambient;
          v16584 = JAM.call(TypeScript$$14.hasFlag, TypeScript$$14, [modifiers$$10, v21250], JAM.policy.p1);
        }
        var v8818 = v16584;
        var ast$$39 = JAM.call(this.parseFncDecl, this, [ers, true, requireSignature, v8817, text$$16, isIndexer$$1, isStatic$$3, v8818, modifiers$$10, null, true], JAM.policy.p1);
        var funcDecl$$9;
        var v16585 = ast$$39.nodeType;
        var v21252 = TypeScript$$14.NodeType;
        var v16586 = v21252.Error;
        var v8819 = v16585 == v16586;
        if (v8819) {
          return ast$$39;
        } else {
          funcDecl$$9 = ast$$39;
        }
        var v8822 = funcDecl$$9.name;
        if (v8822) {
          var v8820 = funcDecl$$9.name;
          v8820.minChar = minChar$$21;
          var v8821 = funcDecl$$9.name;
          v8821.limChar = nameLimChar;
        }
        var v23988 = TypeScript$$14.Modifiers;
        var v21253 = v23988.Public;
        var v16587 = modifiers$$10 & v21253;
        var v21254 = TypeScript$$14.Modifiers;
        var v16588 = v21254.None;
        var v8823 = v16587 != v16588;
        if (v8823) {
          var v16589 = funcDecl$$9.fncFlags;
          var v21255 = TypeScript$$14.FncFlags;
          var v16590 = v21255.Public;
          funcDecl$$9.fncFlags = v16589 | v16590;
        }
        var v23989 = TypeScript$$14.Modifiers;
        var v21256 = v23989.Private;
        var v16591 = modifiers$$10 & v21256;
        var v21257 = TypeScript$$14.Modifiers;
        var v16592 = v21257.None;
        var v8824 = v16591 != v16592;
        if (v8824) {
          var v16593 = funcDecl$$9.fncFlags;
          var v21258 = TypeScript$$14.FncFlags;
          var v16594 = v21258.Private;
          funcDecl$$9.fncFlags = v16593 | v16594;
        }
        if (isStatic$$3) {
          var v16595 = funcDecl$$9.fncFlags;
          var v21259 = TypeScript$$14.FncFlags;
          var v16596 = v21259.Static;
          funcDecl$$9.fncFlags = v16595 | v16596;
        }
        var v16597 = this.parsingDeclareFile;
        var v21261 = !v16597;
        if (v21261) {
          var v23990 = TypeScript$$14.Modifiers;
          var v21260 = v23990.Ambient;
          v16597 = JAM.call(TypeScript$$14.hasFlag, TypeScript$$14, [modifiers$$10, v21260], JAM.policy.p1);
        }
        var v8825 = v16597;
        if (v8825) {
          var v16598 = funcDecl$$9.fncFlags;
          var v21262 = TypeScript$$14.FncFlags;
          var v16599 = v21262.Ambient;
          funcDecl$$9.fncFlags = v16598 | v16599;
        }
        if (isAccessor$$1) {
          var v21263 = TypeScript$$14.Modifiers;
          var v16600 = v21263.Getter;
          var v8828 = JAM.call(TypeScript$$14.hasFlag, TypeScript$$14, [modifiers$$10, v16600], JAM.policy.p1);
          if (v8828) {
            var v16601 = funcDecl$$9.fncFlags;
            var v21264 = TypeScript$$14.FncFlags;
            var v16602 = v21264.GetAccessor;
            funcDecl$$9.fncFlags = v16601 | v16602;
            var v16603 = funcDecl$$9.name;
            var v8826 = v16603.actualText;
            funcDecl$$9.hint = "get" + v8826;
          } else {
            var v16604 = funcDecl$$9.fncFlags;
            var v21265 = TypeScript$$14.FncFlags;
            var v16605 = v21265.SetAccessor;
            funcDecl$$9.fncFlags = v16604 | v16605;
            var v16606 = funcDecl$$9.name;
            var v8827 = v16606.actualText;
            funcDecl$$9.hint = "set" + v8827;
          }
          var v16607 = funcDecl$$9.fncFlags;
          var v21266 = TypeScript$$14.FncFlags;
          var v16608 = v21266.IsFunctionExpression;
          funcDecl$$9.fncFlags = v16607 | v16608;
          var v21267 = TypeScript$$14.Modifiers;
          var v16609 = v21267.Ambient;
          var v8829 = modifiers$$10 & v16609;
          if (v8829) {
            JAM.call(this.reportParseError, this, ["Property accessors may not be declared in ambient types"]);
          }
        }
        var v8830 = text$$16 == null;
        if (v8830) {
          if (isNew) {
            var v16610 = funcDecl$$9.fncFlags;
            var v21268 = TypeScript$$14.FncFlags;
            var v16611 = v21268.ConstructMember;
            funcDecl$$9.fncFlags = v16610 | v16611;
            funcDecl$$9.hint = "_construct";
            funcDecl$$9.classDecl = this.currentClassDecl;
          } else {
            funcDecl$$9.hint = "_call";
            var v16612 = funcDecl$$9.fncFlags;
            var v21269 = TypeScript$$14.FncFlags;
            var v16613 = v21269.CallMember;
            funcDecl$$9.fncFlags = v16612 | v16613;
          }
        }
        return funcDecl$$9;
      } else {
        var v8831 = TypeScript$$14.VarDecl;
        var v8832 = this.nestingLevel;
        var varDecl$$9 = JAM.new(v8831, [text$$16, v8832]);
        var v26897 = this.parseComments();
        varDecl$$9.preComments = v26897;
        varDecl$$9.minChar = minChar$$21;
        var v21270 = this.currentToken;
        var v16614 = v21270.tokenId;
        var v21271 = TypeScript$$14.TokenID;
        var v16615 = v21271.Colon;
        var v8838 = v16614 == v16615;
        if (v8838) {
          var v8833 = this.scanner;
          var v26898 = v8833.scan();
          this.currentToken = v26898;
          var v23991 = TypeScript$$14.ErrorRecoverySet;
          var v21272 = v23991.Asg;
          var v16616 = errorRecoverySet$$24 | v21272;
          var v21273 = TypeScript$$14.ErrorRecoverySet;
          var v16617 = v21273.Comma;
          var v8834 = v16616 | v16617;
          var v26899 = JAM.call(this.parseTypeReference, this, [v8834, false], JAM.policy.p1);
          varDecl$$9.typeExpr = v26899;
          var v16618 = varDecl$$9.typeExpr;
          if (v16618) {
            var v23992 = varDecl$$9.typeExpr;
            var v21274 = v23992.nodeType;
            var v23993 = TypeScript$$14.NodeType;
            var v21275 = v23993.TypeRef;
            v16618 = v21274 == v21275;
          }
          var v8837 = v16618;
          if (v8837) {
            var typeExpr$$1 = varDecl$$9.typeExpr;
            var v16619 = typeExpr$$1.term;
            if (v16619) {
              var v23994 = typeExpr$$1.term;
              var v21276 = v23994.nodeType;
              var v23995 = TypeScript$$14.NodeType;
              var v21277 = v23995.FuncDecl;
              v16619 = v21276 == v21277;
            }
            var v8836 = v16619;
            if (v8836) {
              var v8835 = typeExpr$$1.term;
              v8835.preComments = varDecl$$9.preComments;
            }
          }
        }
        var v21278 = this.currentToken;
        var v16620 = v21278.tokenId;
        var v21279 = TypeScript$$14.TokenID;
        var v16621 = v21279.Equals;
        var v8849 = v16620 == v16621;
        if (v8849) {
          if (requireSignature) {
            JAM.call(this.reportParseError, this, ["context does not permit variable initializer"]);
            var v8840 = this.errorRecovery;
            if (v8840) {
              JAM.call(this.skip, this, [errorRecoverySet$$24]);
              var v16622 = varDecl$$9.flags;
              var v21280 = TypeScript$$14.ASTFlags;
              var v16623 = v21280.Error;
              varDecl$$9.flags = v16622 | v16623;
              var v8839 = this.scanner;
              var v26900 = v8839.lastTokenLimChar();
              varDecl$$9.limChar = v26900;
              return varDecl$$9;
            }
          }
          var v8841 = this.scanner;
          var v26901 = v8841.scan();
          this.currentToken = v26901;
          var v21281 = TypeScript$$14.ErrorRecoverySet;
          var v16624 = v21281.Comma;
          var v8842 = v16624 | errorRecoverySet$$24;
          var v16625 = TypeScript$$14.OperatorPrecedence;
          var v8843 = v16625.Comma;
          var v8844 = TypeContext.NoTypes;
          var v26902 = JAM.call(this.parseExpr, this, [v8842, v8843, true, v8844], JAM.policy.p1);
          varDecl$$9.init = v26902;
          var v8845 = varDecl$$9.init;
          varDecl$$9.limChar = v8845.limChar;
          var v21282 = varDecl$$9.init;
          var v16626 = v21282.nodeType;
          var v21283 = TypeScript$$14.NodeType;
          var v16627 = v21283.FuncDecl;
          var v8847 = v16626 == v16627;
          if (v8847) {
            funcDecl$$9 = varDecl$$9.init;
            var v8846 = varDecl$$9.id;
            funcDecl$$9.hint = v8846.text;
            funcDecl$$9.boundToProperty = varDecl$$9;
          } else {
            if (isAccessor$$1) {
              JAM.call(this.reportParseError, this, ["Accessors may only be functions"]);
            }
          }
        } else {
          var v8848 = this.scanner;
          varDecl$$9.limChar = v8848.pos;
        }
        var v23996 = TypeScript$$14.Modifiers;
        var v21284 = v23996.Readonly;
        var v16628 = modifiers$$10 & v21284;
        var v21285 = TypeScript$$14.Modifiers;
        var v16629 = v21285.None;
        var v8850 = v16628 != v16629;
        if (v8850) {
          var v16630 = varDecl$$9.varFlags;
          var v21286 = TypeScript$$14.VarFlags;
          var v16631 = v21286.Readonly;
          varDecl$$9.varFlags = v16630 | v16631;
        }
        if (isStatic$$3) {
          var v16632 = varDecl$$9.varFlags;
          var v21287 = TypeScript$$14.VarFlags;
          var v16633 = v21287.Static;
          varDecl$$9.varFlags = v16632 | v16633;
        }
        var v23997 = TypeScript$$14.Modifiers;
        var v21288 = v23997.Public;
        var v16634 = modifiers$$10 & v21288;
        var v21289 = TypeScript$$14.Modifiers;
        var v16635 = v21289.None;
        var v8851 = v16634 != v16635;
        if (v8851) {
          var v16636 = varDecl$$9.varFlags;
          var v21290 = TypeScript$$14.VarFlags;
          var v16637 = v21290.Public;
          varDecl$$9.varFlags = v16636 | v16637;
        }
        var v23998 = TypeScript$$14.Modifiers;
        var v21291 = v23998.Private;
        var v16638 = modifiers$$10 & v21291;
        var v21292 = TypeScript$$14.Modifiers;
        var v16639 = v21292.None;
        var v8852 = v16638 != v16639;
        if (v8852) {
          var v16640 = varDecl$$9.varFlags;
          var v21293 = TypeScript$$14.VarFlags;
          var v16641 = v21293.Private;
          varDecl$$9.varFlags = v16640 | v16641;
        }
        var v16642 = varDecl$$9.varFlags;
        var v21294 = TypeScript$$14.VarFlags;
        var v16643 = v21294.Property;
        varDecl$$9.varFlags = v16642 | v16643;
        return varDecl$$9;
      }
      return;
    }
    function v571(id$$12, nest$$1) {
      var v8854 = TypeScript$$14.VarDecl;
      var varDecl$$8 = JAM.new(v8854, [id$$12, nest$$1]);
      var currentVarList = this.topVarList();
      if (currentVarList) {
        JAM.call(currentVarList.append, currentVarList, [varDecl$$8]);
      }
      return varDecl$$8;
    }
    function v570(errorRecoverySet$$23, modifiers$$9) {
      var v8855 = this.scanner;
      var leftCurlyCount$$4 = v8855.leftCurlyCount;
      var v8856 = this.scanner;
      var rightCurlyCount$$4 = v8856.rightCurlyCount;
      var v8857 = this.scanner;
      var v26903 = v8857.scan();
      this.currentToken = v26903;
      var v8858 = this.scanner;
      var minChar$$20 = v8858.pos;
      var name$$50 = null;
      var v23999 = this.currentToken;
      var v21295 = v23999.tokenId;
      var v24000 = TypeScript$$14.TokenID;
      var v21296 = v24000.Identifier;
      var v16644 = v21295 == v21296;
      var v21298 = !v16644;
      if (v21298) {
        var v25308 = this.currentToken;
        var v24001 = JAM.call(TypeScript$$14.isPrimitiveTypeToken, TypeScript$$14, [v25308]);
        var v21297 = !v24001;
        if (v21297) {
          var v24002 = this.currentToken;
          var v24003 = this.strictMode;
          v21297 = JAM.call(TypeScript$$14.convertTokToID, TypeScript$$14, [v24002, v24003], JAM.policy.p1);
        }
        v16644 = v21297;
      }
      var v8868 = v16644;
      if (v8868) {
        var v8859 = TypeScript$$14.Identifier;
        var v8860 = this.currentToken;
        name$$50 = JAM.call(v8859.fromToken, v8859, [v8860]);
        var v8861 = this.scanner;
        name$$50.minChar = v8861.startPos;
        var v8862 = this.scanner;
        name$$50.limChar = v8862.pos;
        var v8863 = this.scanner;
        var v26904 = v8863.scan();
        this.currentToken = v26904;
      } else {
        JAM.call(this.reportParseError, this, ["interface missing name"]);
        var v8867 = this.errorRecovery;
        if (v8867) {
          var v8864 = TypeScript$$14.MissingIdentifier;
          name$$50 = new v8864;
          var v8865 = this.scanner;
          name$$50.minChar = v8865.pos;
          var v8866 = this.scanner;
          name$$50.limChar = v8866.pos;
          var v16645 = name$$50.flags;
          var v21299 = TypeScript$$14.ASTFlags;
          var v16646 = v21299.Error;
          name$$50.flags = v16645 | v16646;
        }
      }
      var extendsList$$6 = null;
      var implementsList$$5 = null;
      var v24004 = this.currentToken;
      var v21300 = v24004.tokenId;
      var v24005 = TypeScript$$14.TokenID;
      var v21301 = v24005.Extends;
      var v16647 = v21300 === v21301;
      var v21304 = !v16647;
      if (v21304) {
        var v24006 = this.currentToken;
        var v21302 = v24006.tokenId;
        var v24007 = TypeScript$$14.TokenID;
        var v21303 = v24007.Implements;
        v16647 = v21302 === v21303;
      }
      var v8873 = v16647;
      if (v8873) {
        var v21305 = this.currentToken;
        var v16648 = v21305.tokenId;
        var v21306 = TypeScript$$14.TokenID;
        var v16649 = v21306.Implements;
        var v8869 = v16648 === v16649;
        if (v8869) {
          JAM.call(this.reportParseError, this, ["Expected 'extends'"]);
        }
        var v8870 = TypeScript$$14.ASTList;
        extendsList$$6 = new v8870;
        var v8871 = TypeScript$$14.ASTList;
        implementsList$$5 = new v8871;
        var v8872 = this.scanner;
        extendsList$$6.minChar = v8872.startPos;
        JAM.call(this.parseBaseList, this, [extendsList$$6, implementsList$$5, errorRecoverySet$$23, false], JAM.policy.p1);
      }
      var v8874 = this.scanner;
      var membersMinChar$$2 = v8874.startPos;
      var v16650 = TypeScript$$14.TokenID;
      var v8875 = v16650.OpenBrace;
      var v21307 = TypeScript$$14.ErrorRecoverySet;
      var v16651 = v21307.TypeScriptS;
      var v8876 = errorRecoverySet$$23 | v16651;
      JAM.call(this.checkCurrentToken, this, [v8875, v8876], JAM.policy.p1);
      var v8877 = TypeScript$$14.ASTList;
      var members$$10 = new v8877;
      members$$10.minChar = membersMinChar$$2;
      var prevInInterfaceDecl$$1 = this.inInterfaceDecl;
      this.inInterfaceDecl = true;
      var v21308 = TypeScript$$14.ErrorRecoverySet;
      var v16652 = v21308.RCurly;
      var v8878 = errorRecoverySet$$23 | v16652;
      JAM.call(this.parseTypeMemberList, this, [v8878, members$$10], JAM.policy.p1);
      this.inInterfaceDecl = prevInInterfaceDecl$$1;
      var v16653 = TypeScript$$14.TokenID;
      var v8879 = v16653.CloseBrace;
      JAM.call(this.checkCurrentToken, this, [v8879, errorRecoverySet$$23], JAM.policy.p1);
      var v8880 = TypeScript$$14.InterfaceDeclaration;
      var interfaceDecl$$1 = JAM.new(v8880, [name$$50, members$$10, extendsList$$6, null]);
      var v21309 = TypeScript$$14.Modifiers;
      var v16654 = v21309.Private;
      var v8881 = JAM.call(TypeScript$$14.hasFlag, TypeScript$$14, [modifiers$$9, v16654], JAM.policy.p1);
      if (v8881) {
        var v16655 = interfaceDecl$$1.varFlags;
        var v21310 = TypeScript$$14.VarFlags;
        var v16656 = v21310.Private;
        interfaceDecl$$1.varFlags = v16655 | v16656;
      }
      var v21311 = TypeScript$$14.Modifiers;
      var v16657 = v21311.Public;
      var v8882 = JAM.call(TypeScript$$14.hasFlag, TypeScript$$14, [modifiers$$9, v16657], JAM.policy.p1);
      if (v8882) {
        var v16658 = interfaceDecl$$1.varFlags;
        var v21312 = TypeScript$$14.VarFlags;
        var v16659 = v21312.Public;
        interfaceDecl$$1.varFlags = v16658 | v16659;
      }
      var v21313 = this.parsingDeclareFile;
      var v24008 = !v21313;
      if (v24008) {
        v21313 = this.ambientModule;
      }
      var v16660 = v21313;
      var v21315 = !v16660;
      if (v21315) {
        var v24009 = TypeScript$$14.Modifiers;
        var v21314 = v24009.Exported;
        v16660 = JAM.call(TypeScript$$14.hasFlag, TypeScript$$14, [modifiers$$9, v21314], JAM.policy.p1);
      }
      var v8883 = v16660;
      if (v8883) {
        var v16661 = interfaceDecl$$1.varFlags;
        var v21316 = TypeScript$$14.VarFlags;
        var v16662 = v21316.Exported;
        interfaceDecl$$1.varFlags = v16661 | v16662;
      }
      interfaceDecl$$1.limChar = members$$10.limChar;
      var v16663 = this.scanner;
      var v8884 = v16663.leftCurlyCount;
      interfaceDecl$$1.leftCurlyCount = v8884 - leftCurlyCount$$4;
      var v16664 = this.scanner;
      var v8885 = v16664.rightCurlyCount;
      interfaceDecl$$1.rightCurlyCount = v8885 - rightCurlyCount$$4;
      return interfaceDecl$$1;
    }
    function v569(errorRecoverySet$$22, members$$9) {
      var v21317 = TypeScript$$14.ErrorRecoverySet;
      var v16665 = v21317.TypeScriptS;
      errorRecoverySet$$22 = errorRecoverySet$$22 | v16665;
      for (;true;) {
        var v16666 = this.currentToken;
        var v8887 = v16666.tokenId;
        switch(v8887) {
          case TypeScript$$14.TokenID.CloseBrace:
          ;
          case TypeScript$$14.TokenID.EndOfFile:
            var v8886 = this.scanner;
            members$$9.limChar = v8886.pos;
            return;
        }
        var element$$2 = JAM.call(this.parseTypeMember, this, [errorRecoverySet$$22]);
        if (element$$2) {
          JAM.call(members$$9.append, members$$9, [element$$2]);
        }
      }
      return;
    }
    function v568(errorRecoverySet$$21) {
      var v8888 = this.scanner;
      var minChar$$19 = v8888.startPos;
      var v16667 = TypeScript$$14.Modifiers;
      var v8889 = v16667.Public;
      var propertyDecl = JAM.call(this.parsePropertyDeclaration, this, [errorRecoverySet$$21, v8889, true, false], JAM.policy.p1);
      if (propertyDecl) {
        propertyDecl.minChar = minChar$$19;
        var v16668 = propertyDecl.nodeType;
        var v21318 = TypeScript$$14.NodeType;
        var v16669 = v21318.VarDecl;
        var v8891 = v16668 == v16669;
        if (v8891) {
          var v16670 = TypeScript$$14.TokenID;
          var v8890 = v16670.Semicolon;
          JAM.call(this.checkCurrentToken, this, [v8890, errorRecoverySet$$21], JAM.policy.p1);
        }
      }
      return propertyDecl;
    }
    function v567(methodName$$1, minChar$$18, errorRecoverySet$$20, modifiers$$8) {
      var v8892 = this.prevIDTok;
      var wasAccessorID = v8892 != null;
      var v21319 = TypeScript$$14.Modifiers;
      var v16671 = v21319.Getter;
      var v8893 = JAM.call(TypeScript$$14.hasFlag, TypeScript$$14, [modifiers$$8, v16671], JAM.policy.p1);
      var v16673 = !v8893;
      if (v16673) {
        var v21320 = TypeScript$$14.Modifiers;
        var v16672 = v21320.Setter;
        v8893 = JAM.call(TypeScript$$14.hasFlag, TypeScript$$14, [modifiers$$8, v16672], JAM.policy.p1);
      }
      var isAccessor = v8893;
      var v16674 = TypeScript$$14.Modifiers;
      var v8894 = v16674.Static;
      var isStatic$$2 = JAM.call(TypeScript$$14.hasFlag, TypeScript$$14, [modifiers$$8, v8894], JAM.policy.p1);
      var v8895 = this.ambientModule;
      var v16676 = !v8895;
      if (v16676) {
        var v21321 = TypeScript$$14.Modifiers;
        var v16675 = v21321.Ambient;
        v8895 = JAM.call(TypeScript$$14.hasFlag, TypeScript$$14, [modifiers$$8, v16675], JAM.policy.p1);
      }
      var isAmbient$$2 = v8895;
      var v21322 = TypeScript$$14.ErrorRecoverySet;
      var v16677 = v21322.RParen;
      errorRecoverySet$$20 = errorRecoverySet$$20 | v16677;
      var v16678 = isAccessor;
      if (v16678) {
        var v24010 = TypeScript$$14.Modifiers;
        var v21323 = v24010.Ambient;
        v16678 = modifiers$$8 & v21323;
      }
      var v8896 = v16678;
      if (v8896) {
        JAM.call(this.reportParseError, this, ["Property accessors may not be declared in ambient classes"]);
      }
      var ast$$38 = JAM.call(this.parseFncDecl, this, [errorRecoverySet$$20, true, isAmbient$$2, true, methodName$$1, false, isStatic$$2, isAmbient$$2, modifiers$$8, null, true], JAM.policy.p1);
      var v16679 = ast$$38.nodeType;
      var v21324 = TypeScript$$14.NodeType;
      var v16680 = v21324.Error;
      var v8897 = v16679 == v16680;
      if (v8897) {
        return;
      }
      var funcDecl$$8 = ast$$38;
      funcDecl$$8.minChar = minChar$$18;
      var v16681 = funcDecl$$8.bod;
      var v8899 = v16681 !== null;
      if (v8899) {
        var v8898 = funcDecl$$8.bod;
        funcDecl$$8.limChar = v8898.limChar;
      }
      var v21325 = TypeScript$$14.Modifiers;
      var v16682 = v21325.Private;
      var v8900 = modifiers$$8 & v16682;
      if (v8900) {
        var v16683 = funcDecl$$8.fncFlags;
        var v21326 = TypeScript$$14.FncFlags;
        var v16684 = v21326.Private;
        funcDecl$$8.fncFlags = v16683 | v16684;
      } else {
        var v16685 = funcDecl$$8.fncFlags;
        var v21327 = TypeScript$$14.FncFlags;
        var v16686 = v21327.Public;
        funcDecl$$8.fncFlags = v16685 | v16686;
      }
      if (isStatic$$2) {
        var v16687 = funcDecl$$8.fncFlags;
        var v21328 = TypeScript$$14.FncFlags;
        var v16688 = v21328.Static;
        funcDecl$$8.fncFlags = v16687 | v16688;
      }
      if (isAccessor) {
        var v21329 = TypeScript$$14.Modifiers;
        var v16689 = v21329.Getter;
        var v8903 = JAM.call(TypeScript$$14.hasFlag, TypeScript$$14, [modifiers$$8, v16689], JAM.policy.p1);
        if (v8903) {
          var v16690 = funcDecl$$8.fncFlags;
          var v21330 = TypeScript$$14.FncFlags;
          var v16691 = v21330.GetAccessor;
          funcDecl$$8.fncFlags = v16690 | v16691;
          var v16692 = funcDecl$$8.name;
          var v8901 = v16692.actualText;
          funcDecl$$8.hint = "get" + v8901;
        } else {
          var v16693 = funcDecl$$8.fncFlags;
          var v21331 = TypeScript$$14.FncFlags;
          var v16694 = v21331.SetAccessor;
          funcDecl$$8.fncFlags = v16693 | v16694;
          var v16695 = funcDecl$$8.name;
          var v8902 = v16695.actualText;
          funcDecl$$8.hint = "set" + v8902;
        }
        var v16696 = funcDecl$$8.fncFlags;
        var v21332 = TypeScript$$14.FncFlags;
        var v16697 = v21332.IsFunctionExpression;
        funcDecl$$8.fncFlags = v16696 | v16697;
        var v16698 = TypeScript$$14.codeGenTarget;
        var v21333 = TypeScript$$14.CodeGenTarget;
        var v16699 = v21333.ES5;
        var v8906 = v16698 < v16699;
        if (v8906) {
          var v8904 = funcDecl$$8.minChar;
          var v8905 = funcDecl$$8.limChar;
          JAM.call(this.reportParseError, this, ["Property accessors are only available when targeting ES5 or greater", v8904, v8905], JAM.policy.p1);
        }
      }
      var v16700 = funcDecl$$8.fncFlags;
      var v21334 = TypeScript$$14.FncFlags;
      var v16701 = v21334.ClassMethod;
      funcDecl$$8.fncFlags = v16700 | v16701;
      var v16702 = this.currentClassDefinition;
      var v8907 = v16702.knownMemberNames;
      var v8908 = methodName$$1.actualText;
      v8907[v8908] = true;
      var v21335 = this.currentClassDefinition;
      var v16703 = v21335.members;
      var v8909 = v16703.members;
      var v24011 = this.currentClassDefinition;
      var v21336 = v24011.members;
      var v16704 = v21336.members;
      var v8910 = v16704.length;
      JAM.set(v8909, v8910, funcDecl$$8);
      return;
    }
    function v566(text$$15, minChar$$17, isDeclaredInConstructor, errorRecoverySet$$19, modifiers$$7) {
      var v8911 = TypeScript$$14.VarDecl;
      var v8912 = this.nestingLevel;
      var varDecl$$7 = JAM.new(v8911, [text$$15, v8912]);
      varDecl$$7.minChar = minChar$$17;
      var isStatic$$1 = false;
      var v26905 = this.parseComments();
      varDecl$$7.preComments = v26905;
      var v21337 = this.currentToken;
      var v16705 = v21337.tokenId;
      var v21338 = TypeScript$$14.TokenID;
      var v16706 = v21338.Colon;
      var v8918 = v16705 == v16706;
      if (v8918) {
        var v8913 = this.scanner;
        var v26906 = v8913.scan();
        this.currentToken = v26906;
        var v24012 = TypeScript$$14.ErrorRecoverySet;
        var v21339 = v24012.Asg;
        var v16707 = errorRecoverySet$$19 | v21339;
        var v21340 = TypeScript$$14.ErrorRecoverySet;
        var v16708 = v21340.Comma;
        var v8914 = v16707 | v16708;
        var v26907 = JAM.call(this.parseTypeReference, this, [v8914, false], JAM.policy.p1);
        varDecl$$7.typeExpr = v26907;
        var v16709 = varDecl$$7.typeExpr;
        if (v16709) {
          var v24013 = varDecl$$7.typeExpr;
          var v21341 = v24013.nodeType;
          var v24014 = TypeScript$$14.NodeType;
          var v21342 = v24014.TypeRef;
          v16709 = v21341 == v21342;
        }
        var v8917 = v16709;
        if (v8917) {
          var typeExpr = varDecl$$7.typeExpr;
          var v16710 = typeExpr.term;
          if (v16710) {
            var v24015 = typeExpr.term;
            var v21343 = v24015.nodeType;
            var v24016 = TypeScript$$14.NodeType;
            var v21344 = v24016.FuncDecl;
            v16710 = v21343 == v21344;
          }
          var v8916 = v16710;
          if (v8916) {
            var v8915 = typeExpr.term;
            v8915.preComments = varDecl$$7.preComments;
          }
        }
      }
      var v21345 = this.currentToken;
      var v16711 = v21345.tokenId;
      var v21346 = TypeScript$$14.TokenID;
      var v16712 = v21346.Equals;
      var v8930 = v16711 == v16712;
      if (v8930) {
        var v16713 = this.parsingDeclareFile;
        var v21348 = !v16713;
        if (v21348) {
          var v24017 = TypeScript$$14.Modifiers;
          var v21347 = v24017.Ambient;
          v16713 = JAM.call(TypeScript$$14.hasFlag, TypeScript$$14, [modifiers$$7, v21347], JAM.policy.p1);
        }
        var v8921 = v16713;
        if (v8921) {
          JAM.call(this.reportParseError, this, ["context does not permit variable initializer"]);
          var v8920 = this.errorRecovery;
          if (v8920) {
            JAM.call(this.skip, this, [errorRecoverySet$$19]);
            var v16714 = varDecl$$7.flags;
            var v21349 = TypeScript$$14.ASTFlags;
            var v16715 = v21349.Error;
            varDecl$$7.flags = v16714 | v16715;
            var v8919 = this.scanner;
            var v26908 = v8919.lastTokenLimChar();
            varDecl$$7.limChar = v26908;
            return varDecl$$7;
          }
        }
        var v8922 = this.scanner;
        var v26909 = v8922.scan();
        this.currentToken = v26909;
        var v21350 = TypeScript$$14.ErrorRecoverySet;
        var v16716 = v21350.Comma;
        var v8923 = v16716 | errorRecoverySet$$19;
        var v16717 = TypeScript$$14.OperatorPrecedence;
        var v8924 = v16717.Comma;
        var v8925 = TypeContext.NoTypes;
        var v26910 = JAM.call(this.parseExpr, this, [v8923, v8924, true, v8925], JAM.policy.p1);
        varDecl$$7.init = v26910;
        var v8926 = varDecl$$7.init;
        varDecl$$7.limChar = v8926.limChar;
        var v24018 = TypeScript$$14.Modifiers;
        var v21351 = v24018.Static;
        var v16718 = modifiers$$7 & v21351;
        var v8928 = !v16718;
        if (v8928) {
          var v8927 = this.currentClassDefinition;
          var v21352 = v8927.varFlags;
          var v24019 = TypeScript$$14.VarFlags;
          var v21353 = v24019.ClassSuperMustBeFirstCallInConstructor;
          v8927.varFlags = v21352 | v21353;
        }
      } else {
        var v8929 = this.scanner;
        varDecl$$7.limChar = v8929.pos;
      }
      var v21354 = TypeScript$$14.Modifiers;
      var v16719 = v21354.Static;
      var v8931 = modifiers$$7 & v16719;
      if (v8931) {
        var v16720 = varDecl$$7.varFlags;
        var v21355 = TypeScript$$14.VarFlags;
        var v16721 = v21355.Static;
        varDecl$$7.varFlags = v16720 | v16721;
        isStatic$$1 = true;
      }
      var v24020 = TypeScript$$14.Modifiers;
      var v21356 = v24020.Private;
      var v16722 = modifiers$$7 & v21356;
      var v21357 = TypeScript$$14.Modifiers;
      var v16723 = v21357.None;
      var v8932 = v16722 != v16723;
      if (v8932) {
        var v16724 = varDecl$$7.varFlags;
        var v21358 = TypeScript$$14.VarFlags;
        var v16725 = v21358.Private;
        varDecl$$7.varFlags = v16724 | v16725;
      } else {
        var v16726 = varDecl$$7.varFlags;
        var v21359 = TypeScript$$14.VarFlags;
        var v16727 = v21359.Public;
        varDecl$$7.varFlags = v16726 | v16727;
      }
      var v16728 = varDecl$$7.varFlags;
      var v21360 = TypeScript$$14.VarFlags;
      var v16729 = v21360.Property;
      varDecl$$7.varFlags = v16728 | v16729;
      if (isDeclaredInConstructor) {
        var v16730 = varDecl$$7.varFlags;
        var v21361 = TypeScript$$14.VarFlags;
        var v16731 = v21361.ClassConstructorProperty;
        varDecl$$7.varFlags = v16730 | v16731;
      }
      var v16732 = !isDeclaredInConstructor;
      if (v16732) {
        v16732 = !isStatic$$1;
      }
      var v8933 = v16732;
      if (v8933) {
        var v16733 = varDecl$$7.varFlags;
        var v21362 = TypeScript$$14.VarFlags;
        var v16734 = v21362.ClassBodyProperty;
        varDecl$$7.varFlags = v16733 | v16734;
      }
      var v16735 = this.currentClassDefinition;
      var v8934 = v16735.knownMemberNames;
      var v8935 = text$$15.actualText;
      v8934[v8935] = true;
      var v8938 = !isDeclaredInConstructor;
      if (v8938) {
        var v21363 = this.currentClassDefinition;
        var v16736 = v21363.members;
        var v8936 = v16736.members;
        var v24021 = this.currentClassDefinition;
        var v21364 = v24021.members;
        var v16737 = v21364.members;
        var v8937 = v16737.length;
        JAM.set(v8936, v8937, varDecl$$7);
      }
      var v26911 = this.parseComments();
      varDecl$$7.postComments = v26911;
      return varDecl$$7;
    }
    function v565(minChar$$16, errorRecoverySet$$18, modifiers$$6) {
      this.parsingClassConstructorDefinition = true;
      var v8939 = this.parsingDeclareFile;
      var v16739 = !v8939;
      if (v16739) {
        var v21365 = TypeScript$$14.Modifiers;
        var v16738 = v21365.Ambient;
        v8939 = JAM.call(TypeScript$$14.hasFlag, TypeScript$$14, [modifiers$$6, v16738], JAM.policy.p1);
      }
      var isAmbient$$1 = v8939;
      var v8940 = TypeScript$$14.ASTList;
      var args$$9 = new v8940;
      var variableArgList$$2 = false;
      var preComments$$3 = this.parseComments();
      var v8941 = this.scanner;
      var v26912 = v8941.scan();
      this.currentToken = v26912;
      var v21366 = this.currentToken;
      var v16740 = v21366.tokenId;
      var v21367 = TypeScript$$14.TokenID;
      var v16741 = v21367.OpenParen;
      var v8945 = v16740 == v16741;
      if (v8945) {
        variableArgList$$2 = JAM.call(this.parseFormalParameterList, this, [errorRecoverySet$$18, args$$9, true, isAmbient$$1, false, false, false, false, null, true], JAM.policy.p1);
        var v21368 = args$$9.members;
        var v16742 = v21368.length;
        var v8944 = v16742 > 0;
        if (v8944) {
          var v8942 = args$$9.members;
          var v21369 = args$$9.members;
          var v16743 = v21369.length;
          var v8943 = v16743 - 1;
          var lastArg$$1 = v8942[v8943];
        }
      }
      var v8946 = isAmbient$$1;
      var v16746 = !v8946;
      if (v16746) {
        var v21370 = this.currentToken;
        var v16744 = v21370.tokenId;
        var v21371 = TypeScript$$14.TokenID;
        var v16745 = v21371.Semicolon;
        v8946 = v16744 == v16745;
      }
      var requiresSignature$$3 = v8946;
      if (requiresSignature$$3) {
        var i$$51 = 0;
        var v21372 = args$$9.members;
        var v16747 = v21372.length;
        var v8951 = i$$51 < v16747;
        for (;v8951;) {
          var v8947 = args$$9.members;
          var arg$$8 = v8947[i$$51];
          var v16748 = arg$$8.varFlags;
          var v21373 = TypeScript$$14.VarFlags;
          var v16749 = v21373.Property;
          var v8950 = JAM.call(TypeScript$$14.hasFlag, TypeScript$$14, [v16748, v16749], JAM.policy.p1);
          if (v8950) {
            var v8948 = arg$$8.minChar;
            var v8949 = arg$$8.limChar;
            JAM.call(this.reportParseError, this, ["Overload or ambient signatures may not specify parameter properties", v8948, v8949], JAM.policy.p1);
          }
          i$$51++;
          var v21374 = args$$9.members;
          var v16750 = v21374.length;
          v8951 = i$$51 < v16750;
        }
      }
      var v8953 = !requiresSignature$$3;
      if (v8953) {
        var v8952 = this.currentClassDefinition;
        var v16751 = this.nestingLevel;
        v8952.constructorNestingLevel = v16751 + 1;
      }
      var v21375 = TypeScript$$14.ErrorRecoverySet;
      var v16752 = v21375.RCurly;
      var v8954 = errorRecoverySet$$18 | v16752;
      var v16753 = this.currentClassDefinition;
      var v8955 = v16753.name;
      var v16754 = TypeScript$$14.AllowedElements;
      var v8956 = v16754.Properties;
      var constructorFuncDecl = JAM.call(this.parseFunctionStatements, this, [v8954, v8955, true, false, args$$9, v8956, minChar$$16, requiresSignature$$3, modifiers$$6], JAM.policy.p1);
      constructorFuncDecl.preComments = preComments$$3;
      var v16755 = requiresSignature$$3;
      if (v16755) {
        v16755 = !isAmbient$$1;
      }
      var v8957 = v16755;
      if (v8957) {
        constructorFuncDecl.isOverload = true;
      }
      constructorFuncDecl.variableArgList = variableArgList$$2;
      this.currentClassDecl = null;
      var v16756 = this.currentClassDefinition;
      var v8958 = v16756.name;
      var v26913 = JAM.call(this.convertToTypeReference, this, [v8958]);
      constructorFuncDecl.returnTypeAnnotation = v26913;
      constructorFuncDecl.classDecl = this.currentClassDefinition;
      if (isAmbient$$1) {
        var v16757 = constructorFuncDecl.fncFlags;
        var v21376 = TypeScript$$14.FncFlags;
        var v16758 = v21376.Ambient;
        constructorFuncDecl.fncFlags = v16757 | v16758;
      }
      if (requiresSignature$$3) {
        var v16759 = constructorFuncDecl.fncFlags;
        var v21377 = TypeScript$$14.FncFlags;
        var v16760 = v21377.Signature;
        constructorFuncDecl.fncFlags = v16759 | v16760;
      }
      var v16761 = this.ambientModule;
      var v21379 = !v16761;
      if (v21379) {
        var v24022 = TypeScript$$14.Modifiers;
        var v21378 = v24022.Exported;
        v16761 = JAM.call(TypeScript$$14.hasFlag, TypeScript$$14, [modifiers$$6, v21378], JAM.policy.p1);
      }
      var v8959 = v16761;
      if (v8959) {
        var v16762 = constructorFuncDecl.fncFlags;
        var v21380 = TypeScript$$14.FncFlags;
        var v16763 = v21380.Exported;
        constructorFuncDecl.fncFlags = v16762 | v16763;
      }
      var v16764 = this.currentClassDefinition;
      var v8961 = v16764.constructorDecl;
      if (v8961) {
        var v21381 = !isAmbient$$1;
        if (v21381) {
          var v25919 = this.currentClassDefinition;
          var v25309 = v25919.constructorDecl;
          var v24023 = v25309.isSignature();
          v21381 = !v24023;
        }
        var v16765 = v21381;
        if (v16765) {
          var v21382 = constructorFuncDecl.isSignature();
          v16765 = !v21382;
        }
        var v8960 = v16765;
        if (v8960) {
          JAM.call(this.reportParseError, this, ["Duplicate constructor definition"]);
        }
      }
      var v16766 = isAmbient$$1;
      var v21384 = !v16766;
      if (v21384) {
        var v21383 = constructorFuncDecl.isSignature();
        v16766 = !v21383;
      }
      var v8963 = v16766;
      if (v8963) {
        var v8962 = this.currentClassDefinition;
        v8962.constructorDecl = constructorFuncDecl;
      }
      var v16767 = constructorFuncDecl.fncFlags;
      var v21385 = TypeScript$$14.FncFlags;
      var v16768 = v21385.ClassMethod;
      constructorFuncDecl.fncFlags = v16767 | v16768;
      var v21386 = this.currentClassDefinition;
      var v16769 = v21386.members;
      var v8964 = v16769.members;
      var v24024 = this.currentClassDefinition;
      var v21387 = v24024.members;
      var v16770 = v21387.members;
      var v8965 = v16770.length;
      JAM.set(v8964, v8965, constructorFuncDecl);
      this.parsingClassConstructorDefinition = false;
      return;
    }
    function v564(classDecl$$5, errorRecoverySet$$17, parentModifiers$$2) {
      var modifiers$$5 = parentModifiers$$2;
      var resetModifiers = false;
      var v8966 = this.scanner;
      var membersMinChar$$1 = v8966.startPos;
      var v16771 = TypeScript$$14.TokenID;
      var v8967 = v16771.OpenBrace;
      JAM.call(this.checkCurrentToken, this, [v8967, errorRecoverySet$$17], JAM.policy.p1);
      this.nestingLevel++;
      var v8968 = this.scanner;
      var currentMemberMinChar = v8968.startPos;
      var wasGetOrSetId = false;
      var v25310 = this.currentToken;
      var v24025 = v25310.tokenId;
      var v25311 = TypeScript$$14.TokenID;
      var v24026 = v25311.CloseBrace;
      var v21388 = v24025 == v24026;
      var v24029 = !v21388;
      if (v24029) {
        var v25312 = this.currentToken;
        var v24027 = v25312.tokenId;
        var v25313 = TypeScript$$14.TokenID;
        var v24028 = v25313.EndOfFile;
        v21388 = v24027 == v24028;
      }
      var v16772 = v21388;
      var v9007 = !v16772;
      for (;v9007;) {
        var scanNext = true;
        var v16773 = TypeScript$$14.Modifiers;
        var v8969 = v16773.Public;
        var v16774 = TypeScript$$14.Modifiers;
        var v8970 = v16774.Private;
        var publicOrPrivateFlags = v8969 | v8970;
        var v21389 = this.currentToken;
        var v16775 = v21389.tokenId;
        var v21390 = TypeScript$$14.TokenID;
        var v16776 = v21390.Get;
        var v9002 = v16775 == v16776;
        if (v9002) {
          var v21391 = TypeScript$$14.Modifiers;
          var v16777 = v21391.Getter;
          var v8971 = modifiers$$5 & v16777;
          if (v8971) {
            JAM.call(this.reportParseError, this, ["Duplicate 'get' declaration in class body"]);
          }
          var v21392 = TypeScript$$14.Modifiers;
          var v16778 = v21392.Setter;
          var v8972 = modifiers$$5 & v16778;
          if (v8972) {
            JAM.call(this.reportParseError, this, ["Getter already marked as a setter"]);
          }
          var v21393 = TypeScript$$14.Modifiers;
          var v16779 = v21393.Getter;
          modifiers$$5 = modifiers$$5 | v16779;
        } else {
          var v21394 = this.currentToken;
          var v16780 = v21394.tokenId;
          var v21395 = TypeScript$$14.TokenID;
          var v16781 = v21395.Set;
          var v9001 = v16780 == v16781;
          if (v9001) {
            var v21396 = TypeScript$$14.Modifiers;
            var v16782 = v21396.Setter;
            var v8973 = modifiers$$5 & v16782;
            if (v8973) {
              JAM.call(this.reportParseError, this, ["Duplicate 'set' declaration in class body"]);
            }
            var v21397 = TypeScript$$14.Modifiers;
            var v16783 = v21397.Getter;
            var v8974 = modifiers$$5 & v16783;
            if (v8974) {
              JAM.call(this.reportParseError, this, ["Setter already marked as a getter"]);
            }
            var v21398 = TypeScript$$14.Modifiers;
            var v16784 = v21398.Setter;
            modifiers$$5 = modifiers$$5 | v16784;
          } else {
            var v21399 = this.currentToken;
            var v16785 = v21399.tokenId;
            var v21400 = TypeScript$$14.TokenID;
            var v16786 = v21400.Private;
            var v9000 = v16785 == v16786;
            if (v9000) {
              var v8975 = modifiers$$5 & publicOrPrivateFlags;
              if (v8975) {
                JAM.call(this.reportParseError, this, ["Multiple modifiers may not be applied to class members"]);
              }
              var v21401 = TypeScript$$14.Modifiers;
              var v16787 = v21401.Private;
              modifiers$$5 = modifiers$$5 | v16787;
            } else {
              var v21402 = this.currentToken;
              var v16788 = v21402.tokenId;
              var v21403 = TypeScript$$14.TokenID;
              var v16789 = v21403.Public;
              var v8999 = v16788 == v16789;
              if (v8999) {
                var v8976 = modifiers$$5 & publicOrPrivateFlags;
                if (v8976) {
                  JAM.call(this.reportParseError, this, ["Multiple modifiers may not be applied to class members"]);
                }
                var v21404 = TypeScript$$14.Modifiers;
                var v16790 = v21404.Public;
                modifiers$$5 = modifiers$$5 | v16790;
              } else {
                var v21405 = this.currentToken;
                var v16791 = v21405.tokenId;
                var v21406 = TypeScript$$14.TokenID;
                var v16792 = v21406.Static;
                var v8998 = v16791 == v16792;
                if (v8998) {
                  var v21407 = TypeScript$$14.Modifiers;
                  var v16793 = v21407.Static;
                  var v8977 = modifiers$$5 & v16793;
                  if (v8977) {
                    JAM.call(this.reportParseError, this, ["Multiple modifiers may not be applied to class members"]);
                  }
                  var v21408 = TypeScript$$14.Modifiers;
                  var v16794 = v21408.Static;
                  modifiers$$5 = modifiers$$5 | v16794;
                } else {
                  var v21409 = this.currentToken;
                  var v16795 = v21409.tokenId;
                  var v21410 = TypeScript$$14.TokenID;
                  var v16796 = v21410.Constructor;
                  var v8997 = v16795 == v16796;
                  if (v8997) {
                    var v8978 = modifiers$$5 != parentModifiers$$2;
                    if (v8978) {
                      JAM.call(this.reportParseError, this, ["Constructors may not have modifiers"]);
                    }
                    JAM.call(this.parseClassConstructorDeclaration, this, [currentMemberMinChar, errorRecoverySet$$17, modifiers$$5], JAM.policy.p1);
                    scanNext = false;
                    resetModifiers = true;
                  } else {
                    var v21411 = wasGetOrSetId;
                    var v24032 = !v21411;
                    if (v24032) {
                      var v25314 = this.currentToken;
                      var v24030 = v25314.tokenId;
                      var v25315 = TypeScript$$14.TokenID;
                      var v24031 = v25315.Identifier;
                      v21411 = v24030 == v24031;
                    }
                    var v16797 = v21411;
                    var v21413 = !v16797;
                    if (v21413) {
                      var v21412 = this.currentToken;
                      v16797 = JAM.call(TypeScript$$14.convertTokToIDName, TypeScript$$14, [v21412]);
                    }
                    var v8996 = v16797;
                    if (v8996) {
                      var v8979;
                      if (wasGetOrSetId) {
                        var v16798;
                        var v25316 = TypeScript$$14.Modifiers;
                        var v24033 = v25316.Getter;
                        var v21414 = modifiers$$5 & v24033;
                        if (v21414) {
                          v16798 = "get";
                        } else {
                          v16798 = "set";
                        }
                        v8979 = v16798;
                      } else {
                        var v16799 = this.currentToken;
                        v8979 = v16799.getText();
                      }
                      var idText = v8979;
                      var v8980;
                      if (wasGetOrSetId) {
                        var v16800 = TypeScript$$14.Identifier;
                        v8980 = JAM.new(v16800, [idText]);
                      } else {
                        var v16801 = TypeScript$$14.Identifier;
                        var v16802 = this.currentToken;
                        v8980 = JAM.call(v16801.fromToken, v16801, [v16802]);
                      }
                      var id$$11 = v8980;
                      var v8981 = this.scanner;
                      id$$11.minChar = v8981.startPos;
                      var v8982 = this.scanner;
                      id$$11.limChar = v8982.pos;
                      if (wasGetOrSetId) {
                        var v16803;
                        var v25317 = TypeScript$$14.Modifiers;
                        var v24034 = v25317.Getter;
                        var v21417 = modifiers$$5 & v24034;
                        if (v21417) {
                          var v21415 = TypeScript$$14.Modifiers;
                          v16803 = v21415.Getter;
                        } else {
                          var v21416 = TypeScript$$14.Modifiers;
                          v16803 = v21416.Setter;
                        }
                        var v8983 = v16803;
                        modifiers$$5 = modifiers$$5 ^ v8983;
                        wasGetOrSetId = false;
                      } else {
                        var v8984 = this.scanner;
                        var v26914 = v8984.scan();
                        this.currentToken = v26914;
                      }
                      var v21418 = this.currentToken;
                      var v16804 = v21418.tokenId;
                      var v21419 = TypeScript$$14.TokenID;
                      var v16805 = v21419.OpenParen;
                      var v8991 = v16804 == v16805;
                      if (v8991) {
                        JAM.call(this.parseClassMemberFunctionDeclaration, this, [id$$11, currentMemberMinChar, errorRecoverySet$$17, modifiers$$5], JAM.policy.p1);
                        scanNext = false;
                      } else {
                        var v24035 = TypeScript$$14.Modifiers;
                        var v21420 = v24035.Getter;
                        var v16806 = modifiers$$5 & v21420;
                        var v21422 = !v16806;
                        if (v21422) {
                          var v24036 = TypeScript$$14.Modifiers;
                          var v21421 = v24036.Setter;
                          v16806 = modifiers$$5 & v21421;
                        }
                        var v8985 = v16806;
                        if (v8985) {
                          JAM.call(this.reportParseError, this, ["Property accessors must be functions"]);
                        }
                        var varDecl$$6 = JAM.call(this.parseClassMemberVariableDeclaration, this, [id$$11, currentMemberMinChar, false, errorRecoverySet$$17, modifiers$$5], JAM.policy.p1);
                        var v16807 = varDecl$$6.init;
                        if (v16807) {
                          var v24037 = varDecl$$6.init;
                          var v21423 = v24037.nodeType;
                          var v24038 = TypeScript$$14.NodeType;
                          var v21424 = v24038.FuncDecl;
                          v16807 = v21423 == v21424;
                        }
                        var v8990 = v16807;
                        if (v8990) {
                          var v21425 = this.currentToken;
                          var v16808 = v21425.tokenId;
                          var v21426 = TypeScript$$14.TokenID;
                          var v16809 = v21426.CloseBrace;
                          var v8986 = v16808 == v16809;
                          if (v8986) {
                            scanNext = false;
                          }
                        } else {
                          var v21427 = varDecl$$6.init;
                          if (v21427) {
                            var v25318 = varDecl$$6.init;
                            var v24039 = v25318.nodeType;
                            var v25319 = TypeScript$$14.NodeType;
                            var v24040 = v25319.ObjectLit;
                            v21427 = v24039 == v24040;
                          }
                          var v16810 = v21427;
                          if (v16810) {
                            var v24041 = this.currentToken;
                            var v21428 = v24041.tokenId;
                            var v24042 = TypeScript$$14.TokenID;
                            var v21429 = v24042.Semicolon;
                            v16810 = v21428 != v21429;
                          }
                          var v8989 = v16810;
                          if (v8989) {
                            scanNext = false;
                            var v8987 = varDecl$$6.init;
                            var v21430 = v8987.flags;
                            var v24043 = TypeScript$$14.ASTFlags;
                            var v21431 = v24043.AutomaticSemicolon;
                            v8987.flags = v21430 | v21431;
                          } else {
                            var v21432 = this.currentToken;
                            var v16811 = v21432.tokenId;
                            var v21433 = TypeScript$$14.TokenID;
                            var v16812 = v21433.Semicolon;
                            var v8988 = v16811 != v16812;
                            if (v8988) {
                              JAM.call(this.reportParseError, this, ["Expected ';'"]);
                              scanNext = false;
                            }
                          }
                        }
                      }
                      resetModifiers = true;
                    } else {
                      var v21434 = this.currentToken;
                      var v16813 = v21434.tokenId;
                      var v21435 = TypeScript$$14.TokenID;
                      var v16814 = v21435.Super;
                      var v8995 = v16813 == v16814;
                      if (v8995) {
                        JAM.call(this.reportParseError, this, ["Base class initializers must be the first statement in a class definition"]);
                      } else {
                        var v21436 = !wasGetOrSetId;
                        if (v21436) {
                          var v25920 = TypeScript$$14.Modifiers;
                          var v25320 = v25920.Getter;
                          var v24044 = modifiers$$5 & v25320;
                          var v25322 = !v24044;
                          if (v25322) {
                            var v25921 = TypeScript$$14.Modifiers;
                            var v25321 = v25921.Setter;
                            v24044 = modifiers$$5 & v25321;
                          }
                          v21436 = v24044;
                        }
                        var v16815 = v21436;
                        if (v16815) {
                          var v26187 = this.currentToken;
                          var v25922 = v26187.tokenId;
                          var v26188 = TypeScript$$14.TokenID;
                          var v25923 = v26188.OpenParen;
                          var v25323 = v25922 == v25923;
                          var v25926 = !v25323;
                          if (v25926) {
                            var v26189 = this.currentToken;
                            var v25924 = v26189.tokenId;
                            var v26190 = TypeScript$$14.TokenID;
                            var v25925 = v26190.Equals;
                            v25323 = v25924 == v25925;
                          }
                          var v24045 = v25323;
                          var v25326 = !v24045;
                          if (v25326) {
                            var v25927 = this.currentToken;
                            var v25324 = v25927.tokenId;
                            var v25928 = TypeScript$$14.TokenID;
                            var v25325 = v25928.Colon;
                            v24045 = v25324 == v25325;
                          }
                          var v21437 = v24045;
                          var v24048 = !v21437;
                          if (v24048) {
                            var v25327 = this.currentToken;
                            var v24046 = v25327.tokenId;
                            var v25328 = TypeScript$$14.TokenID;
                            var v24047 = v25328.Semicolon;
                            v21437 = v24046 == v24047;
                          }
                          v16815 = v21437;
                        }
                        var v8994 = v16815;
                        if (v8994) {
                          wasGetOrSetId = true;
                          scanNext = false;
                        } else {
                          var v21438 = this.currentToken;
                          var v16816 = v21438.tokenId;
                          var v21439 = TypeScript$$14.TokenID;
                          var v16817 = v21439.Semicolon;
                          var v8993 = v16816 != v16817;
                          if (v8993) {
                            var v24049 = this.currentToken;
                            var v21440 = v24049.getText();
                            var v16818 = "Unexpected '" + v21440;
                            var v8992 = v16818 + "' in class definition";
                            JAM.call(this.reportParseError, this, [v8992]);
                            resetModifiers = true;
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        if (scanNext) {
          var v9003 = this.scanner;
          var v26915 = v9003.scan();
          this.currentToken = v26915;
          var v16819 = this.currentToken;
          var v9005 = v16819 === undefined;
          if (v9005) {
            var v9004 = this.scanner;
            var v26916 = v9004.scan();
            this.currentToken = v26916;
          }
        }
        if (resetModifiers) {
          modifiers$$5 = parentModifiers$$2;
          var v9006 = this.scanner;
          currentMemberMinChar = v9006.startPos;
          resetModifiers = false;
        }
        var v25329 = this.currentToken;
        var v24050 = v25329.tokenId;
        var v25330 = TypeScript$$14.TokenID;
        var v24051 = v25330.CloseBrace;
        var v21441 = v24050 == v24051;
        var v24054 = !v21441;
        if (v24054) {
          var v25331 = this.currentToken;
          var v24052 = v25331.tokenId;
          var v25332 = TypeScript$$14.TokenID;
          var v24053 = v25332.EndOfFile;
          v21441 = v24052 == v24053;
        }
        var v16820 = v21441;
        v9007 = !v16820;
      }
      var v9008 = this.scanner;
      var membersLimChar = v9008.pos;
      var v21442 = this.currentToken;
      var v16821 = v21442.tokenId;
      var v21443 = TypeScript$$14.TokenID;
      var v16822 = v21443.CloseBrace;
      var v9015 = v16821 == v16822;
      if (v9015) {
        var v9009 = TypeScript$$14.ASTSpan;
        var v26917 = new v9009;
        classDecl$$5.endingToken = v26917;
        var v9010 = classDecl$$5.endingToken;
        var v16823 = this.scanner;
        v9010.minChar = v16823.startPos;
        var v9011 = classDecl$$5.endingToken;
        var v16824 = this.scanner;
        v9011.limChar = v16824.pos;
        var v25333 = this.currentClassDefinition;
        var v24055 = v25333.members;
        var v21444 = v24055.members;
        var v16825 = v21444.length;
        var v9013 = !v16825;
        if (v9013) {
          var v9012 = this.currentClassDefinition;
          var v26918 = this.parseComments();
          v9012.preComments = v26918;
        }
        var v9014 = this.scanner;
        var v26919 = v9014.scan();
        this.currentToken = v26919;
      }
      this.nestingLevel--;
      var v16826 = this.currentClassDefinition;
      var v9016 = v16826.members;
      v9016.minChar = membersMinChar$$1;
      var v16827 = this.currentClassDefinition;
      var v9017 = v16827.members;
      v9017.limChar = membersLimChar;
      var v9018 = this.currentClassDefinition;
      v9018.limChar = membersLimChar;
      this.currentClassDefinition = null;
      return;
    }
    function v563(errorRecoverySet$$16, minChar$$15, modifiers$$4) {
      var v9019 = this.scanner;
      var leftCurlyCount$$3 = v9019.leftCurlyCount;
      var v9020 = this.scanner;
      var rightCurlyCount$$3 = v9020.rightCurlyCount;
      var v24056 = TypeScript$$14.Modifiers;
      var v21445 = v24056.Readonly;
      var v16828 = modifiers$$4 & v21445;
      var v21446 = TypeScript$$14.Modifiers;
      var v16829 = v21446.None;
      var v9021 = v16828 != v16829;
      if (v9021) {
        JAM.call(this.reportParseError, this, ["const modifier is implicit for class"]);
      }
      var v16830 = this.parsingDeclareFile;
      var v21447 = !v16830;
      if (v21447) {
        v16830 = this.ambientModule;
      }
      var v9022 = v16830;
      if (v9022) {
        var v21448 = TypeScript$$14.Modifiers;
        var v16831 = v21448.Ambient;
        modifiers$$4 = modifiers$$4 | v16831;
        var v21449 = TypeScript$$14.Modifiers;
        var v16832 = v21449.Exported;
        modifiers$$4 = modifiers$$4 | v16832;
      }
      var v9023 = this.parsingDeclareFile;
      var v16835 = !v9023;
      if (v16835) {
        var v24057 = TypeScript$$14.Modifiers;
        var v21450 = v24057.Ambient;
        var v16833 = modifiers$$4 & v21450;
        var v21451 = TypeScript$$14.Modifiers;
        var v16834 = v21451.None;
        v9023 = v16833 != v16834;
      }
      var classIsMarkedAsAmbient = v9023;
      var svAmbientClass = this.ambientClass;
      this.ambientClass = classIsMarkedAsAmbient;
      var v9024 = this.scanner;
      var v26920 = v9024.scan();
      this.currentToken = v26920;
      var name$$49 = null;
      var v24058 = this.currentToken;
      var v21452 = v24058.tokenId;
      var v24059 = TypeScript$$14.TokenID;
      var v21453 = v24059.Identifier;
      var v16836 = v21452 == v21453;
      var v21455 = !v16836;
      if (v21455) {
        var v25334 = this.currentToken;
        var v24060 = JAM.call(TypeScript$$14.isPrimitiveTypeToken, TypeScript$$14, [v25334]);
        var v21454 = !v24060;
        if (v21454) {
          var v24061 = this.currentToken;
          var v24062 = this.strictMode;
          v21454 = JAM.call(TypeScript$$14.convertTokToID, TypeScript$$14, [v24061, v24062], JAM.policy.p1);
        }
        v16836 = v21454;
      }
      var v9034 = v16836;
      if (v9034) {
        var v9025 = TypeScript$$14.Identifier;
        var v9026 = this.currentToken;
        name$$49 = JAM.call(v9025.fromToken, v9025, [v9026]);
        var v9027 = this.scanner;
        name$$49.minChar = v9027.startPos;
        var v9028 = this.scanner;
        name$$49.limChar = v9028.pos;
        var v9029 = this.scanner;
        var v26921 = v9029.scan();
        this.currentToken = v26921;
      } else {
        JAM.call(this.reportParseError, this, ["class missing name"]);
        var v9033 = this.errorRecovery;
        if (v9033) {
          var v9030 = TypeScript$$14.MissingIdentifier;
          name$$49 = new v9030;
          var v9031 = this.scanner;
          name$$49.minChar = v9031.pos;
          var v9032 = this.scanner;
          name$$49.limChar = v9032.pos;
          var v16837 = name$$49.flags;
          var v21456 = TypeScript$$14.ASTFlags;
          var v16838 = v21456.Error;
          name$$49.flags = v16837 | v16838;
        }
      }
      var extendsList$$5 = null;
      var implementsList$$4 = null;
      var requiresSignature$$2 = false;
      var v24063 = this.currentToken;
      var v21457 = v24063.tokenId;
      var v24064 = TypeScript$$14.TokenID;
      var v21458 = v24064.Extends;
      var v16839 = v21457 == v21458;
      var v21461 = !v16839;
      if (v21461) {
        var v24065 = this.currentToken;
        var v21459 = v24065.tokenId;
        var v24066 = TypeScript$$14.TokenID;
        var v21460 = v24066.Implements;
        v16839 = v21459 == v21460;
      }
      var v9037 = v16839;
      if (v9037) {
        var v9035 = TypeScript$$14.ASTList;
        extendsList$$5 = new v9035;
        var v9036 = TypeScript$$14.ASTList;
        implementsList$$4 = new v9036;
        JAM.call(this.parseBaseList, this, [extendsList$$5, implementsList$$4, errorRecoverySet$$16, true], JAM.policy.p1);
      }
      var v9038 = TypeScript$$14.ClassDeclaration;
      var v16840 = TypeScript$$14.ASTList;
      var v9039 = new v16840;
      var classDecl$$4 = JAM.new(v9038, [name$$49, v9039, extendsList$$5, implementsList$$4]);
      this.currentClassDefinition = classDecl$$4;
      JAM.call(this.parseClassElements, this, [classDecl$$4, errorRecoverySet$$16, modifiers$$4], JAM.policy.p1);
      var v21462 = this.ambientModule;
      var v24067 = !v21462;
      if (v24067) {
        v21462 = this.parsingDeclareFile;
      }
      var v16841 = v21462;
      var v21464 = !v16841;
      if (v21464) {
        var v24068 = TypeScript$$14.Modifiers;
        var v21463 = v24068.Exported;
        v16841 = JAM.call(TypeScript$$14.hasFlag, TypeScript$$14, [modifiers$$4, v21463], JAM.policy.p1);
      }
      var v9040 = v16841;
      if (v9040) {
        var v16842 = classDecl$$4.varFlags;
        var v21465 = TypeScript$$14.VarFlags;
        var v16843 = v21465.Exported;
        classDecl$$4.varFlags = v16842 | v16843;
      }
      var v16844 = this.ambientModule;
      var v21467 = !v16844;
      if (v21467) {
        var v24069 = TypeScript$$14.Modifiers;
        var v21466 = v24069.Ambient;
        v16844 = JAM.call(TypeScript$$14.hasFlag, TypeScript$$14, [modifiers$$4, v21466], JAM.policy.p1);
      }
      var v9041 = v16844;
      if (v9041) {
        var v16845 = classDecl$$4.varFlags;
        var v21468 = TypeScript$$14.VarFlags;
        var v16846 = v21468.Ambient;
        classDecl$$4.varFlags = v16845 | v16846;
      }
      var v16847 = classDecl$$4.varFlags;
      var v21469 = TypeScript$$14.VarFlags;
      var v16848 = v21469.Class;
      classDecl$$4.varFlags = v16847 | v16848;
      this.ambientClass = svAmbientClass;
      var v16849 = this.scanner;
      var v9042 = v16849.leftCurlyCount;
      classDecl$$4.leftCurlyCount = v9042 - leftCurlyCount$$3;
      var v16850 = this.scanner;
      var v9043 = v16850.rightCurlyCount;
      classDecl$$4.rightCurlyCount = v9043 - rightCurlyCount$$3;
      return classDecl$$4;
    }
    function v562(extendsList$$4, implementsList$$3, errorRecoverySet$$15, isClass) {
      var keyword = true;
      var currentList = extendsList$$4;
      for (;;) {
        if (keyword) {
          var v21470 = this.currentToken;
          var v16851 = v21470.tokenId;
          var v21471 = TypeScript$$14.TokenID;
          var v16852 = v21471.Implements;
          var v9045 = v16851 === v16852;
          if (v9045) {
            currentList = implementsList$$3;
          } else {
            var v24070 = this.currentToken;
            var v21472 = v24070.tokenId;
            var v24071 = TypeScript$$14.TokenID;
            var v21473 = v24071.Extends;
            var v16853 = v21472 == v21473;
            if (v16853) {
              var v21474 = this.requiresExtendsBlock;
              v16853 = !v21474;
            }
            var v9044 = v16853;
            if (v9044) {
              this.requiresExtendsBlock = isClass;
            }
          }
          var v9046 = this.scanner;
          var v26922 = v9046.scan();
          this.currentToken = v26922;
          keyword = false;
        }
        var baseName$$3 = null;
        var v24072 = this.currentToken;
        var v21475 = v24072.tokenId;
        var v24073 = TypeScript$$14.TokenID;
        var v21476 = v24073.Identifier;
        var v16854 = v21475 == v21476;
        var v21479 = !v16854;
        if (v21479) {
          var v21477 = this.currentToken;
          var v21478 = this.strictMode;
          v16854 = JAM.call(TypeScript$$14.convertTokToID, TypeScript$$14, [v21477, v21478], JAM.policy.p1);
        }
        var v9056 = v16854;
        if (v9056) {
          var v9047 = this.scanner;
          var minChar$$14 = v9047.startPos;
          var v9048 = TypeScript$$14.Identifier;
          var v9049 = this.currentToken;
          baseName$$3 = JAM.call(v9048.fromToken, v9048, [v9049]);
          baseName$$3.minChar = minChar$$14;
          var v9050 = this.scanner;
          baseName$$3.limChar = v9050.pos;
          var v21480 = TypeScript$$14.ErrorRecoverySet;
          var v16855 = v21480.LCurly;
          var v9051 = errorRecoverySet$$15 | v16855;
          baseName$$3 = JAM.call(this.parseNamedType, this, [v9051, minChar$$14, baseName$$3, false], JAM.policy.p1);
        } else {
          JAM.call(this.reportParseError, this, ["Expected base name"]);
          var v9055 = this.errorRecovery;
          if (v9055) {
            var v9052 = TypeScript$$14.MissingIdentifier;
            baseName$$3 = new v9052;
            var v9053 = this.scanner;
            baseName$$3.minChar = v9053.pos;
            var v9054 = this.scanner;
            baseName$$3.limChar = v9054.pos;
            var v16856 = baseName$$3.flags;
            var v21481 = TypeScript$$14.ASTFlags;
            var v16857 = v21481.Error;
            baseName$$3.flags = v16856 | v16857;
          }
        }
        var v21482 = this.currentToken;
        var v16858 = v21482.tokenId;
        var v21483 = TypeScript$$14.TokenID;
        var v16859 = v21483.OpenParen;
        var v9057 = v16858 == v16859;
        if (v9057) {
          if (isClass) {
            JAM.call(this.reportParseError, this, ["Base classes may only be initialized via a 'super' call within the constructor body"]);
          } else {
            JAM.call(this.reportParseError, this, ["Interfaces may not be extended with a call expression"]);
          }
        } else {
          JAM.call(currentList.append, currentList, [baseName$$3]);
        }
        var v21484 = isClass;
        if (v21484) {
          v21484 = currentList == extendsList$$4;
        }
        var v16860 = v21484;
        if (v16860) {
          var v24074 = extendsList$$4.members;
          var v21485 = v24074.length;
          v16860 = v21485 > 1;
        }
        var v9058 = v16860;
        if (v9058) {
          JAM.call(this.reportParseError, this, ["A class may only extend one other class"]);
        }
        var v21486 = this.currentToken;
        var v16861 = v21486.tokenId;
        var v21487 = TypeScript$$14.TokenID;
        var v16862 = v21487.Comma;
        var v9062 = v16861 == v16862;
        if (v9062) {
          var v9059 = this.scanner;
          var v26923 = v9059.scan();
          this.currentToken = v26923;
          continue;
        } else {
          var v24075 = this.currentToken;
          var v21488 = v24075.tokenId;
          var v24076 = TypeScript$$14.TokenID;
          var v21489 = v24076.Extends;
          var v16863 = v21488 == v21489;
          var v21492 = !v16863;
          if (v21492) {
            var v24077 = this.currentToken;
            var v21490 = v24077.tokenId;
            var v24078 = TypeScript$$14.TokenID;
            var v21491 = v24078.Implements;
            v16863 = v21490 == v21491;
          }
          var v9061 = v16863;
          if (v9061) {
            var v24079 = this.currentToken;
            var v21493 = v24079.tokenId;
            var v24080 = TypeScript$$14.TokenID;
            var v21494 = v24080.Extends;
            var v16864 = v21493 == v21494;
            if (v16864) {
              var v21495 = this.requiresExtendsBlock;
              v16864 = !v21495;
            }
            var v9060 = v16864;
            if (v9060) {
              this.requiresExtendsBlock = isClass;
            }
            currentList = extendsList$$4;
            keyword = true;
            continue;
          }
        }
        break;
      }
      return;
    }
    function v561(errorRecoverySet$$14) {
      var v9063 = TypeScript$$14.ASTList;
      var args$$8 = new v9063;
      var v9064 = this.scanner;
      args$$8.minChar = v9064.startPos;
      var v9065 = this.scanner;
      var v26924 = v9065.scan();
      this.currentToken = v26924;
      var v21496 = this.currentToken;
      var v16865 = v21496.tokenId;
      var v21497 = TypeScript$$14.TokenID;
      var v16866 = v21497.CloseParen;
      var v9072 = v16865 !== v16866;
      if (v9072) {
        for (;true;) {
          var v21498 = args$$8.members;
          var v16867 = v21498.length;
          var v9066 = v16867 > 65535;
          if (v9066) {
            JAM.call(this.reportParseError, this, ["max number of args exceeded"]);
            break;
          }
          var v21499 = TypeScript$$14.ErrorRecoverySet;
          var v16868 = v21499.Comma;
          var v9067 = v16868 | errorRecoverySet$$14;
          var v16869 = TypeScript$$14.OperatorPrecedence;
          var v9068 = v16869.Comma;
          var v9069 = TypeContext.NoTypes;
          var arg$$7 = JAM.call(this.parseExpr, this, [v9067, v9068, true, v9069], JAM.policy.p1);
          JAM.call(args$$8.append, args$$8, [arg$$7]);
          var v21500 = this.currentToken;
          var v16870 = v21500.tokenId;
          var v21501 = TypeScript$$14.TokenID;
          var v16871 = v21501.Comma;
          var v9070 = v16870 != v16871;
          if (v9070) {
            break;
          }
          var v9071 = this.scanner;
          var v26925 = v9071.scan();
          this.currentToken = v26925;
        }
      }
      var v9073 = this.scanner;
      args$$8.limChar = v9073.pos;
      return args$$8;
    }
    function v560(ast$$37) {
      var result$$9;
      var v9078 = ast$$37.nodeType;
      switch(v9078) {
        case TypeScript$$14.NodeType.TypeRef:
          return ast$$37;
        case TypeScript$$14.NodeType.Name:
          var v9074 = TypeScript$$14.TypeReference;
          result$$9 = JAM.new(v9074, [ast$$37, 0]);
          result$$9.minChar = ast$$37.minChar;
          result$$9.limChar = ast$$37.limChar;
          return result$$9;
        case TypeScript$$14.NodeType.Index:
          var expr$$4 = ast$$37;
          var v9075 = expr$$4.operand1;
          result$$9 = JAM.call(this.convertToTypeReference, this, [v9075]);
          if (result$$9) {
            result$$9.arrayCount++;
            result$$9.minChar = expr$$4.minChar;
            result$$9.limChar = expr$$4.limChar;
            return result$$9;
          } else {
            var v9076 = TypeScript$$14.AST;
            var v16872 = TypeScript$$14.NodeType;
            var v9077 = v16872.Error;
            var etr$$1 = JAM.new(v9076, [v9077]);
            return etr$$1;
          }
        ;
      }
      return null;
    }
    function v559(errorRecoverySet$$13, isDecl, requiresSignature$$1, isMethod$$1, methodName, indexer, isStatic, markedAsAmbient, modifiers$$3, lambdaArgContext, expectClosingRParen$$1) {
      var v9079 = this.scanner;
      var leftCurlyCount$$2 = v9079.leftCurlyCount;
      var v9080 = this.scanner;
      var rightCurlyCount$$2 = v9080.rightCurlyCount;
      var prevInConstr = this.parsingClassConstructorDefinition;
      this.parsingClassConstructorDefinition = false;
      var name$$48 = null;
      var v9081 = this.scanner;
      var fnMin = v9081.startPos;
      var v9082 = this.scanner;
      var minChar$$13 = v9082.pos;
      var prevNestingLevel = this.nestingLevel;
      var preComments$$2 = this.parseComments();
      var v9083 = !lambdaArgContext;
      var isLambda$$1 = !v9083;
      this.nestingLevel = 0;
      var v21502 = this.style_funcInLoop;
      var v16873 = !v21502;
      if (v16873) {
        v16873 = this.inLoop();
      }
      var v9084 = v16873;
      if (v9084) {
        JAM.call(this.reportParseStyleError, this, ["function declaration in loop"]);
      }
      var v24081 = !isMethod$$1;
      if (v24081) {
        v24081 = !isStatic;
      }
      var v21503 = v24081;
      if (v21503) {
        v21503 = !indexer;
      }
      var v16874 = v21503;
      if (v16874) {
        v16874 = !lambdaArgContext;
      }
      var v9094 = v16874;
      if (v9094) {
        var v9085 = this.scanner;
        var v26926 = v9085.scan();
        this.currentToken = v26926;
        this.state = ParseState.StartFncDecl;
        var v24082 = this.currentToken;
        var v21504 = v24082.tokenId;
        var v24083 = TypeScript$$14.TokenID;
        var v21505 = v24083.Identifier;
        var v16875 = v21504 != v21505;
        if (v16875) {
          var v24084 = this.currentToken;
          var v24085 = this.strictMode;
          var v21506 = JAM.call(TypeScript$$14.convertTokToID, TypeScript$$14, [v24084, v24085], JAM.policy.p1);
          v16875 = !v21506;
        }
        var v9093 = v16875;
        if (v9093) {
          if (isDecl) {
            JAM.call(this.reportParseError, this, ["Function declaration must include identifier"]);
            this.nestingLevel = prevNestingLevel;
            var v9086 = TypeScript$$14.IncompleteAST;
            var v16876 = this.scanner;
            var v9087 = v16876.pos;
            return JAM.new(v9086, [fnMin, v9087]);
          }
        } else {
          var v9088 = TypeScript$$14.Identifier;
          var v9089 = this.currentToken;
          name$$48 = JAM.call(v9088.fromToken, v9088, [v9089]);
          var v9090 = this.scanner;
          name$$48.minChar = v9090.startPos;
          var v9091 = this.scanner;
          name$$48.limChar = v9091.pos;
          var v9092 = this.scanner;
          var v26927 = v9092.scan();
          this.currentToken = v26927;
        }
      } else {
        if (methodName) {
          name$$48 = methodName;
        }
      }
      this.state = ParseState.FncDeclName;
      var v9095 = TypeScript$$14.ASTList;
      var args$$7 = new v9095;
      var variableArgList$$1 = false;
      var isOverload = false;
      var v16877 = TypeScript$$14.Modifiers;
      var v9096 = v16877.Getter;
      var isGetter$$1 = JAM.call(TypeScript$$14.hasFlag, TypeScript$$14, [modifiers$$3, v9096], JAM.policy.p1);
      var v16878 = TypeScript$$14.Modifiers;
      var v9097 = v16878.Setter;
      var isSetter$$1 = JAM.call(TypeScript$$14.hasFlag, TypeScript$$14, [modifiers$$3, v9097], JAM.policy.p1);
      var v25335 = this.currentToken;
      var v24086 = v25335.tokenId;
      var v25336 = TypeScript$$14.TokenID;
      var v24087 = v25336.OpenParen;
      var v21507 = v24086 == v24087;
      var v24089 = !v21507;
      if (v24089) {
        var v24088 = indexer;
        if (v24088) {
          var v25929 = this.currentToken;
          var v25337 = v25929.tokenId;
          var v25930 = TypeScript$$14.TokenID;
          var v25338 = v25930.OpenBracket;
          v24088 = v25337 == v25338;
        }
        v21507 = v24088;
      }
      var v16879 = v21507;
      var v21509 = !v16879;
      if (v21509) {
        var v21508 = lambdaArgContext;
        if (v21508) {
          var v24090 = lambdaArgContext.preProcessedLambdaArgs;
          var v25341 = !v24090;
          if (v25341) {
            var v25931 = this.currentToken;
            var v25339 = v25931.tokenId;
            var v25932 = TypeScript$$14.TokenID;
            var v25340 = v25932.DotDotDot;
            v24090 = v25339 == v25340;
          }
          v21508 = v24090;
        }
        v16879 = v21508;
      }
      var v9099 = v16879;
      if (v9099) {
        var v16880;
        if (lambdaArgContext) {
          v16880 = lambdaArgContext.preProcessedLambdaArgs;
        } else {
          v16880 = null;
        }
        var v9098 = v16880;
        variableArgList$$1 = JAM.call(this.parseFormalParameterList, this, [errorRecoverySet$$13, args$$7, false, requiresSignature$$1, indexer, isGetter$$1, isSetter$$1, isLambda$$1, v9098, expectClosingRParen$$1], JAM.policy.p1);
      }
      this.state = ParseState.FncDeclArgs;
      var returnType$$1 = null;
      var v21510 = this.currentToken;
      var v16881 = v21510.tokenId;
      var v21511 = TypeScript$$14.TokenID;
      var v16882 = v21511.Colon;
      var v9102 = v16881 == v16882;
      if (v9102) {
        var v9100 = this.scanner;
        var v26928 = v9100.scan();
        this.currentToken = v26928;
        var v21512 = TypeScript$$14.Modifiers;
        var v16883 = v21512.Setter;
        var v9101 = JAM.call(TypeScript$$14.hasFlag, TypeScript$$14, [modifiers$$3, v16883], JAM.policy.p1);
        if (v9101) {
          JAM.call(this.reportParseError, this, ["Property setters may not declare a return type"]);
        }
        returnType$$1 = JAM.call(this.parseTypeReference, this, [errorRecoverySet$$13, true], JAM.policy.p1);
      }
      var v16884 = indexer;
      if (v16884) {
        var v24091 = args$$7.members;
        var v21513 = v24091.length;
        v16884 = v21513 == 0;
      }
      var v9103 = v16884;
      if (v9103) {
        JAM.call(this.reportParseError, this, ["Index signatures require a parameter type to be specified"]);
      }
      this.state = ParseState.FncDeclReturnType;
      var v16885 = isLambda$$1;
      if (v16885) {
        var v24092 = this.currentToken;
        var v21514 = v24092.tokenId;
        var v24093 = TypeScript$$14.TokenID;
        var v21515 = v24093.EqualsGreaterThan;
        v16885 = v21514 != v21515;
      }
      var v9104 = v16885;
      if (v9104) {
        JAM.call(this.reportParseError, this, ["Expected '=>'"]);
      }
      var v24094 = isDecl;
      if (v24094) {
        var v25933 = this.parsingDeclareFile;
        var v26191 = !v25933;
        if (v26191) {
          v25933 = markedAsAmbient;
        }
        var v25342 = v25933;
        v24094 = !v25342;
      }
      var v21516 = v24094;
      if (v21516) {
        var v24095 = !isMethod$$1;
        var v25344 = !v24095;
        if (v25344) {
          var v26192 = this.ambientModule;
          var v26314 = !v26192;
          if (v26314) {
            v26192 = this.ambientClass;
          }
          var v25934 = v26192;
          var v26193 = !v25934;
          if (v26193) {
            v25934 = this.inInterfaceDecl;
          }
          var v25343 = v25934;
          v24095 = !v25343;
        }
        v21516 = v24095;
      }
      var v16886 = v21516;
      if (v16886) {
        var v24096 = this.currentToken;
        var v21517 = v24096.tokenId;
        var v24097 = TypeScript$$14.TokenID;
        var v21518 = v24097.Semicolon;
        v16886 = v21517 == v21518;
      }
      var v9105 = v16886;
      if (v9105) {
        isOverload = true;
        isDecl = false;
        requiresSignature$$1 = true;
      }
      var svInFncDecl = this.inFncDecl;
      this.inFncDecl = true;
      var v21519 = TypeScript$$14.ErrorRecoverySet;
      var v16887 = v21519.RCurly;
      var v9106 = errorRecoverySet$$13 | v16887;
      var v16888 = TypeScript$$14.AllowedElements;
      var v9107 = v16888.None;
      var v16889 = TypeScript$$14.Modifiers;
      var v9108 = v16889.None;
      var funcDecl$$7 = JAM.call(this.parseFunctionStatements, this, [v9106, name$$48, false, isMethod$$1, args$$7, v9107, minChar$$13, requiresSignature$$1, v9108], JAM.policy.p1);
      this.inFncDecl = svInFncDecl;
      funcDecl$$7.variableArgList = variableArgList$$1;
      funcDecl$$7.isOverload = isOverload;
      var v9109 = !requiresSignature$$1;
      if (v9109) {
        var v16890 = funcDecl$$7.fncFlags;
        var v21520 = TypeScript$$14.FncFlags;
        var v16891 = v21520.Definition;
        funcDecl$$7.fncFlags = v16890 | v16891;
      }
      if (isStatic) {
        var v16892 = funcDecl$$7.fncFlags;
        var v21521 = TypeScript$$14.FncFlags;
        var v16893 = v21521.Static;
        funcDecl$$7.fncFlags = v16892 | v16893;
      }
      if (requiresSignature$$1) {
        var v16894 = funcDecl$$7.fncFlags;
        var v21522 = TypeScript$$14.FncFlags;
        var v16895 = v21522.Signature;
        funcDecl$$7.fncFlags = v16894 | v16895;
      }
      if (indexer) {
        var v16896 = funcDecl$$7.fncFlags;
        var v21523 = TypeScript$$14.FncFlags;
        var v16897 = v21523.IndexerMember;
        funcDecl$$7.fncFlags = v16896 | v16897;
      }
      funcDecl$$7.returnTypeAnnotation = returnType$$1;
      if (isMethod$$1) {
        var v16898 = funcDecl$$7.fncFlags;
        var v21524 = TypeScript$$14.FncFlags;
        var v16899 = v21524.Method;
        funcDecl$$7.fncFlags = v16898 | v16899;
        var v16900 = funcDecl$$7.fncFlags;
        var v21525 = TypeScript$$14.FncFlags;
        var v16901 = v21525.ClassPropertyMethodExported;
        funcDecl$$7.fncFlags = v16900 | v16901;
      }
      var v16902 = this.scanner;
      var v9110 = v16902.leftCurlyCount;
      funcDecl$$7.leftCurlyCount = v9110 - leftCurlyCount$$2;
      var v16903 = this.scanner;
      var v9111 = v16903.rightCurlyCount;
      funcDecl$$7.rightCurlyCount = v9111 - rightCurlyCount$$2;
      this.nestingLevel = prevNestingLevel;
      this.parsingClassConstructorDefinition = prevInConstr;
      funcDecl$$7.preComments = preComments$$2;
      return funcDecl$$7;
    }
    function v558(errorRecoverySet$$12, formals$$2, isClassConstr, isSig, isIndexer, isGetter, isSetter, isLambda, preProcessedLambdaArgs, expectClosingRParen) {
      var v9112 = this.scanner;
      formals$$2.minChar = v9112.startPos;
      if (isIndexer) {
        var v9113 = this.scanner;
        var v26929 = v9113.scan();
        this.currentToken = v26929;
      } else {
        var v9116 = !isLambda;
        if (v9116) {
          var v16904 = TypeScript$$14.TokenID;
          var v9114 = v16904.OpenParen;
          var v21526 = TypeScript$$14.ErrorRecoverySet;
          var v16905 = v21526.RParen;
          var v9115 = errorRecoverySet$$12 | v16905;
          JAM.call(this.checkCurrentToken, this, [v9114, v9115], JAM.policy.p1);
        }
      }
      var sawEllipsis = false;
      var firstArg = true;
      var hasOptional = false;
      var haveFirstArgID = false;
      var v16906 = isLambda && preProcessedLambdaArgs;
      if (v16906) {
        var v21527 = preProcessedLambdaArgs.nodeType;
        var v24098 = TypeScript$$14.NodeType;
        var v21528 = v24098.EmptyExpr;
        v16906 = v21527 != v21528;
      }
      var v9117 = v16906;
      if (v9117) {
        hasOptional = JAM.call(this.transformAnonymousArgsIntoFormals, this, [formals$$2, preProcessedLambdaArgs], JAM.policy.p1);
        haveFirstArgID = true;
      }
      for (;true;) {
        var munchedArg = false;
        var v9118 = TypeScript$$14.VarFlags;
        var argFlags = v9118.None;
        var v9119 = this.scanner;
        var argMinChar = v9119.startPos;
        var v16907 = this.inferPropertiesFromThisAssignment;
        if (v16907) {
          var v24099 = this.currentToken;
          var v21529 = v24099.tokenId;
          var v24100 = TypeScript$$14.TokenID;
          var v21530 = v24100.This;
          v16907 = v21529 == v21530;
        }
        var v9124 = v16907;
        if (v9124) {
          var v9120 = !isClassConstr;
          if (v9120) {
            JAM.call(this.reportParseError, this, ["Instance property declarations using 'this' may only be used in class constructors"]);
          }
          var v9121 = this.scanner;
          var v26930 = v9121.scan();
          this.currentToken = v26930;
          var v24101 = TypeScript$$14.VarFlags;
          var v21531 = v24101.Public;
          var v24102 = TypeScript$$14.VarFlags;
          var v21532 = v24102.Property;
          var v16908 = v21531 | v21532;
          argFlags = argFlags | v16908;
          var v9123 = this.currentClassDefinition;
          if (v9123) {
            var v9122 = this.currentClassDefinition;
            var v21533 = v9122.varFlags;
            var v24103 = TypeScript$$14.VarFlags;
            var v21534 = v24103.ClassSuperMustBeFirstCallInConstructor;
            v9122.varFlags = v21533 | v21534;
          }
        }
        var v21535 = this.currentToken;
        var v16909 = v21535.tokenId;
        var v21536 = TypeScript$$14.TokenID;
        var v16910 = v21536.Public;
        var v9132 = v16909 == v16910;
        if (v9132) {
          var v24104 = TypeScript$$14.VarFlags;
          var v21537 = v24104.Public;
          var v24105 = TypeScript$$14.VarFlags;
          var v21538 = v24105.Property;
          var v16911 = v21537 | v21538;
          argFlags = argFlags | v16911;
          var v9126 = this.currentClassDefinition;
          if (v9126) {
            var v9125 = this.currentClassDefinition;
            var v21539 = v9125.varFlags;
            var v24106 = TypeScript$$14.VarFlags;
            var v21540 = v24106.ClassSuperMustBeFirstCallInConstructor;
            v9125.varFlags = v21539 | v21540;
          }
        } else {
          var v21541 = this.currentToken;
          var v16912 = v21541.tokenId;
          var v21542 = TypeScript$$14.TokenID;
          var v16913 = v21542.Private;
          var v9131 = v16912 == v16913;
          if (v9131) {
            var v24107 = TypeScript$$14.VarFlags;
            var v21543 = v24107.Private;
            var v24108 = TypeScript$$14.VarFlags;
            var v21544 = v24108.Property;
            var v16914 = v21543 | v21544;
            argFlags = argFlags | v16914;
            var v9128 = this.currentClassDefinition;
            if (v9128) {
              var v9127 = this.currentClassDefinition;
              var v21545 = v9127.varFlags;
              var v24109 = TypeScript$$14.VarFlags;
              var v21546 = v24109.ClassSuperMustBeFirstCallInConstructor;
              v9127.varFlags = v21545 | v21546;
            }
          } else {
            var v24110 = this.currentToken;
            var v21547 = v24110.tokenId;
            var v24111 = TypeScript$$14.TokenID;
            var v21548 = v24111.Static;
            var v16915 = v21547 == v21548;
            if (v16915) {
              v16915 = isClassConstr;
            }
            var v9130 = v16915;
            if (v9130) {
              JAM.call(this.reportParseError, this, ["Static properties can not be declared as parameter properties"]);
              var v9129 = this.scanner;
              var v26931 = v9129.scan();
              this.currentToken = v26931;
            }
          }
        }
        var v21549 = TypeScript$$14.VarFlags;
        var v16916 = v21549.None;
        var v9144 = argFlags != v16916;
        if (v9144) {
          var v9133 = !isClassConstr;
          if (v9133) {
            JAM.call(this.reportParseError, this, ["only constructor parameters can be properties"]);
          }
          var v9134 = this.scanner;
          var v26932 = v9134.scan();
          this.currentToken = v26932;
          var v16917 = this.currentToken;
          var v9136 = JAM.call(TypeScript$$14.isModifier, TypeScript$$14, [v16917]);
          if (v9136) {
            JAM.call(this.reportParseError, this, ["Multiple modifiers may not be applied to parameters"]);
            var v9135 = this.scanner;
            var v26933 = v9135.scan();
            this.currentToken = v26933;
          }
          var v16918 = this.inferPropertiesFromThisAssignment;
          if (v16918) {
            var v24112 = this.currentToken;
            var v21550 = v24112.tokenId;
            var v24113 = TypeScript$$14.TokenID;
            var v21551 = v24113.This;
            v16918 = v21550 == v21551;
          }
          var v9140 = v16918;
          if (v9140) {
            var v9137 = !isClassConstr;
            if (v9137) {
              JAM.call(this.reportParseError, this, ["Instance property declarations using 'this' may only be used in class constructors"]);
            }
            var v9138 = this.scanner;
            var v26934 = v9138.scan();
            this.currentToken = v26934;
            var v9139 = this.scanner;
            var v26935 = v9139.scan();
            this.currentToken = v26935;
          }
        } else {
          var v21552 = this.currentToken;
          var v16919 = v21552.tokenId;
          var v21553 = TypeScript$$14.TokenID;
          var v16920 = v21553.DotDotDot;
          var v9143 = v16919 == v16920;
          if (v9143) {
            sawEllipsis = true;
            var v9141 = this.scanner;
            var v26936 = v9141.scan();
            this.currentToken = v26936;
            var v25345 = this.currentToken;
            var v24114 = v25345.tokenId;
            var v25346 = TypeScript$$14.TokenID;
            var v24115 = v25346.Identifier;
            var v21554 = v24114 == v24115;
            var v16921 = !v21554;
            var v21557 = !v16921;
            if (v21557) {
              var v21555 = this.currentToken;
              var v21556 = this.strictMode;
              v16921 = JAM.call(TypeScript$$14.convertTokToID, TypeScript$$14, [v21555, v21556], JAM.policy.p1);
            }
            var v9142 = v16921;
            if (v9142) {
              JAM.call(this.reportParseError, this, ["'...' parameters require both a parameter name and an array type annotation to be specified"]);
              sawEllipsis = false;
            }
          }
        }
        var argId = null;
        var v21558 = !haveFirstArgID;
        if (v21558) {
          var v25347 = this.currentToken;
          var v24116 = v25347.tokenId;
          var v25348 = TypeScript$$14.TokenID;
          var v24117 = v25348.Identifier;
          v21558 = v24116 == v24117;
        }
        var v16922 = v21558;
        var v21561 = !v16922;
        if (v21561) {
          var v21559 = this.currentToken;
          var v21560 = this.strictMode;
          v16922 = JAM.call(TypeScript$$14.convertTokToID, TypeScript$$14, [v21559, v21560], JAM.policy.p1);
        }
        var v9149 = v16922;
        if (v9149) {
          var v9145 = TypeScript$$14.Identifier;
          var v9146 = this.currentToken;
          argId = JAM.call(v9145.fromToken, v9145, [v9146]);
          var v9147 = this.scanner;
          argId.minChar = v9147.startPos;
          var v9148 = this.scanner;
          argId.limChar = v9148.pos;
        }
        var v9171 = haveFirstArgID || argId;
        if (v9171) {
          munchedArg = true;
          var type$$30 = null;
          var arg$$6 = null;
          var v16923 = haveFirstArgID;
          if (v16923) {
            var v21562 = formals$$2.members;
            v16923 = v21562.length;
          }
          var v9156 = v16923;
          if (v9156) {
            var v9150 = formals$$2.members;
            var v21563 = formals$$2.members;
            var v16924 = v21563.length;
            var v9151 = v16924 - 1;
            arg$$6 = v9150[v9151];
            var v9152 = arg$$6.isOptional;
            if (v9152) {
              hasOptional = true;
            }
          } else {
            var v9153 = TypeScript$$14.ArgDecl;
            arg$$6 = JAM.new(v9153, [argId]);
            if (isGetter) {
              JAM.call(this.reportParseError, this, ["Property getters may not take any arguments"]);
            }
            var v16925 = isSetter;
            if (v16925) {
              v16925 = !firstArg;
            }
            var v9154 = v16925;
            if (v9154) {
              JAM.call(this.reportParseError, this, ["Property setters may only take one argument"]);
            }
            arg$$6.minChar = argMinChar;
            var v26937 = this.parseComments();
            arg$$6.preComments = v26937;
            var v9155 = this.scanner;
            var v26938 = v9155.scan();
            this.currentToken = v26938;
          }
          var v21564 = this.currentToken;
          var v16926 = v21564.tokenId;
          var v21565 = TypeScript$$14.TokenID;
          var v16927 = v21565.Question;
          var v9158 = v16926 == v16927;
          if (v9158) {
            arg$$6.isOptional = true;
            hasOptional = true;
            var v9157 = this.scanner;
            var v26939 = v9157.scan();
            this.currentToken = v26939;
          }
          var v21566 = this.currentToken;
          var v16928 = v21566.tokenId;
          var v21567 = TypeScript$$14.TokenID;
          var v16929 = v21567.Colon;
          var v9160 = v16928 == v16929;
          if (v9160) {
            var v9159 = this.scanner;
            var v26940 = v9159.scan();
            this.currentToken = v26940;
            type$$30 = JAM.call(this.parseTypeReference, this, [errorRecoverySet$$12, false], JAM.policy.p1);
          }
          var v21568 = this.currentToken;
          var v16930 = v21568.tokenId;
          var v21569 = TypeScript$$14.TokenID;
          var v16931 = v21569.Equals;
          var v9165 = v16930 == v16931;
          if (v9165) {
            if (isSig) {
              JAM.call(this.reportParseError, this, ["Arguments in signatures may not have default values"]);
            }
            hasOptional = true;
            var v9161 = this.scanner;
            var v26941 = v9161.scan();
            this.currentToken = v26941;
            var v21570 = TypeScript$$14.ErrorRecoverySet;
            var v16932 = v21570.Comma;
            var v9162 = v16932 | errorRecoverySet$$12;
            var v16933 = TypeScript$$14.OperatorPrecedence;
            var v9163 = v16933.Comma;
            var v9164 = TypeContext.NoTypes;
            var v26942 = JAM.call(this.parseExpr, this, [v9162, v9163, false, v9164], JAM.policy.p1);
            arg$$6.init = v26942;
          }
          var v21571 = hasOptional;
          if (v21571) {
            var v24118 = arg$$6.isOptionalArg();
            v21571 = !v24118;
          }
          var v16934 = v21571;
          if (v16934) {
            v16934 = !sawEllipsis;
          }
          var v9166 = v16934;
          if (v9166) {
            JAM.call(this.reportParseError, this, ["Optional parameters may only be followed by other optional parameters"]);
          }
          var v16935 = sawEllipsis;
          if (v16935) {
            v16935 = arg$$6.isOptionalArg();
          }
          var v9167 = v16935;
          if (v9167) {
            JAM.call(this.reportParseError, this, ["Varargs may not be optional or have default parameters"]);
          }
          var v16936 = sawEllipsis;
          if (v16936) {
            v16936 = !type$$30;
          }
          var v9168 = v16936;
          if (v9168) {
            JAM.call(this.reportParseError, this, ["'...' parameters require both a parameter name and an array type annotation to be specified"]);
          }
          var v26943 = this.parseComments();
          arg$$6.postComments = v26943;
          arg$$6.typeExpr = type$$30;
          var v9169 = this.scanner;
          var v26944 = v9169.lastTokenLimChar();
          arg$$6.limChar = v26944;
          var v16937 = arg$$6.varFlags;
          arg$$6.varFlags = v16937 | argFlags;
          var v9170 = !haveFirstArgID;
          if (v9170) {
            JAM.call(formals$$2.append, formals$$2, [arg$$6]);
          } else {
            haveFirstArgID = false;
          }
        }
        firstArg = false;
        var v21572 = this.currentToken;
        var v16938 = v21572.tokenId;
        var v21573 = TypeScript$$14.TokenID;
        var v16939 = v21573.Comma;
        var v9176 = v16938 == v16939;
        if (v9176) {
          var v16940 = munchedArg;
          if (v16940) {
            v16940 = !sawEllipsis;
          }
          var v9175 = v16940;
          if (v9175) {
            var v9172 = this.scanner;
            var v26945 = v9172.scan();
            this.currentToken = v26945;
          } else {
            JAM.call(this.reportParseError, this, ["Unexpected ',' in argument list"]);
            var v9174 = this.errorRecovery;
            if (v9174) {
              var v9173 = this.scanner;
              var v26946 = v9173.scan();
              this.currentToken = v26946;
            }
          }
        } else {
          break;
        }
      }
      if (isIndexer) {
        var v16941 = TypeScript$$14.TokenID;
        var v9177 = v16941.CloseBracket;
        var v24119 = TypeScript$$14.ErrorRecoverySet;
        var v21574 = v24119.LCurly;
        var v16942 = errorRecoverySet$$12 | v21574;
        var v21575 = TypeScript$$14.ErrorRecoverySet;
        var v16943 = v21575.SColon;
        var v9178 = v16942 | v16943;
        JAM.call(this.checkCurrentToken, this, [v9177, v9178], JAM.policy.p1);
      } else {
        if (expectClosingRParen) {
          var v16944 = TypeScript$$14.TokenID;
          var v9179 = v16944.CloseParen;
          var v24120 = TypeScript$$14.ErrorRecoverySet;
          var v21576 = v24120.LCurly;
          var v16945 = errorRecoverySet$$12 | v21576;
          var v21577 = TypeScript$$14.ErrorRecoverySet;
          var v16946 = v21577.SColon;
          var v9180 = v16945 | v16946;
          JAM.call(this.checkCurrentToken, this, [v9179, v9180], JAM.policy.p1);
        }
      }
      var v9181 = this.scanner;
      var v26947 = v9181.lastTokenLimChar();
      formals$$2.limChar = v26947;
      return sawEllipsis;
    }
    function v557(formals$$1, argList) {
      function translateBinExOperand(operand$$1) {
        var v16947 = operand$$1.nodeType;
        var v21578 = TypeScript$$14.NodeType;
        var v16948 = v21578.Comma;
        var v9188 = v16947 == v16948;
        if (v9188) {
          return JAM.call(_this$$1.transformAnonymousArgsIntoFormals, _this$$1, [formals$$1, operand$$1], JAM.policy.p1);
        } else {
          var v21579 = operand$$1.nodeType;
          var v24121 = TypeScript$$14.NodeType;
          var v21580 = v24121.Name;
          var v16949 = v21579 == v21580;
          var v21583 = !v16949;
          if (v21583) {
            var v21581 = operand$$1.nodeType;
            var v24122 = TypeScript$$14.NodeType;
            var v21582 = v24122.Asg;
            v16949 = v21581 == v21582;
          }
          var v9187 = v16949;
          if (v9187) {
            var v9182;
            var v21584 = operand$$1.nodeType;
            var v24123 = TypeScript$$14.NodeType;
            var v21585 = v24123.Asg;
            var v16950 = v21584 == v21585;
            if (v16950) {
              v9182 = operand$$1.operand1;
            } else {
              v9182 = operand$$1;
            }
            var opArg = v9182;
            var v9183 = TypeScript$$14.ArgDecl;
            var arg$$5 = JAM.new(v9183, [opArg]);
            arg$$5.preComments = opArg.preComments;
            arg$$5.postComments = opArg.postComments;
            arg$$5.minChar = operand$$1.minChar;
            arg$$5.limChar = operand$$1.limChar;
            var v16951 = opArg.flags;
            var v21586 = TypeScript$$14.ASTFlags;
            var v16952 = v21586.PossibleOptionalParameter;
            var v9184 = JAM.call(TypeScript$$14.hasFlag, TypeScript$$14, [v16951, v16952], JAM.policy.p1);
            if (v9184) {
              arg$$5.isOptional = true;
            }
            var v16953 = operand$$1.nodeType;
            var v21587 = TypeScript$$14.NodeType;
            var v16954 = v21587.Asg;
            var v9185 = v16953 == v16954;
            if (v9185) {
              arg$$5.init = operand$$1.operand2;
            }
            JAM.call(formals$$1.append, formals$$1, [arg$$5]);
            var v9186 = arg$$5.isOptional;
            var v16955 = !v9186;
            if (v16955) {
              v9186 = arg$$5.init;
            }
            return v9186;
          } else {
            JAM.call(_this$$1.reportParseError, _this$$1, ["Invalid lambda argument"]);
          }
        }
        return false;
      }
      var _this$$1 = this;
      if (argList) {
        var v16956 = argList.nodeType;
        var v21588 = TypeScript$$14.NodeType;
        var v16957 = v21588.Comma;
        var v9197 = v16956 == v16957;
        if (v9197) {
          var commaList = argList;
          var v16958 = commaList.operand1;
          var v9191 = v16958.isParenthesized;
          if (v9191) {
            var v16959 = commaList.operand1;
            var v9189 = v16959.minChar;
            var v16960 = commaList.operand1;
            var v9190 = v16960.limChar;
            JAM.call(this.reportParseError, this, ["Invalid lambda argument", v9189, v9190], JAM.policy.p1);
          }
          var v16961 = commaList.operand2;
          var v9194 = v16961.isParenthesized;
          if (v9194) {
            var v16962 = commaList.operand2;
            var v9192 = v16962.minChar;
            var v16963 = commaList.operand2;
            var v9193 = v16963.limChar;
            JAM.call(this.reportParseError, this, ["Invalid lambda argument", v9192, v9193], JAM.policy.p1);
          }
          var v9195 = commaList.operand1;
          var isOptional = translateBinExOperand(v9195);
          var v16964 = commaList.operand2;
          var v9196 = translateBinExOperand(v16964);
          var v16965 = !v9196;
          if (v16965) {
            v9196 = isOptional;
          }
          isOptional = v9196;
          return isOptional;
        } else {
          return translateBinExOperand(argList);
        }
      }
      return;
    }
    function v556(errorRecoverySet$$11, name$$47, isConstructor$$1, isMethod, args$$6, allowedElements$$1, minChar$$12, requiresSignature, parentModifiers$$1) {
      this.pushDeclLists();
      var svStmtStack = this.statementInfoStack;
      this.resetStmtStack();
      var bod$$2 = null;
      var wasShorthand = false;
      var isAnonLambda = false;
      var limChar$$6;
      if (requiresSignature) {
        var v9198 = this.scanner;
        limChar$$6 = v9198.pos;
        var v21589 = this.currentToken;
        var v16966 = v21589.tokenId;
        var v21590 = TypeScript$$14.TokenID;
        var v16967 = v21590.OpenBrace;
        var v9205 = v16966 === v16967;
        if (v9205) {
          JAM.call(this.reportParseError, this, ["Function declarations are not permitted within interfaces, ambient modules or classes"]);
          var v9199 = TypeScript$$14.ASTList;
          bod$$2 = new v9199;
          var v9200 = this.scanner;
          var bodMinChar$$1 = v9200.startPos;
          JAM.call(this.parseFunctionBlock, this, [errorRecoverySet$$11, allowedElements$$1, parentModifiers$$1, bod$$2, bodMinChar$$1], JAM.policy.p1);
          var v16968 = TypeScript$$14.TokenID;
          var v9201 = v16968.CloseBrace;
          JAM.call(this.checkCurrentToken, this, [v9201, errorRecoverySet$$11], JAM.policy.p1);
          var v21591 = this.currentToken;
          var v16969 = v21591.tokenId;
          var v21592 = TypeScript$$14.TokenID;
          var v16970 = v21592.Semicolon;
          var v9203 = v16969 === v16970;
          if (v9203) {
            var v9202 = this.scanner;
            var v26948 = v9202.scan();
            this.currentToken = v26948;
          }
        } else {
          var v16971 = TypeScript$$14.TokenID;
          var v9204 = v16971.Semicolon;
          JAM.call(this.checkCurrentToken, this, [v9204, errorRecoverySet$$11, "Expected ';'"], JAM.policy.p1);
        }
      } else {
        var v9206 = TypeScript$$14.ASTList;
        bod$$2 = new v9206;
        var v9207 = this.scanner;
        bodMinChar$$1 = v9207.startPos;
        var v21593 = this.currentToken;
        var v16972 = v21593.tokenId;
        var v21594 = TypeScript$$14.TokenID;
        var v16973 = v21594.EqualsGreaterThan;
        var v9209 = v16972 == v16973;
        if (v9209) {
          if (isMethod) {
            JAM.call(this.reportParseError, this, ["'=>' may not be used for class methods"]);
          }
          wasShorthand = true;
          var v9208 = this.scanner;
          var v26949 = v9208.scan();
          this.currentToken = v26949;
        }
        var v16974 = wasShorthand;
        if (v16974) {
          var v24124 = this.currentToken;
          var v21595 = v24124.tokenId;
          var v24125 = TypeScript$$14.TokenID;
          var v21596 = v24125.OpenBrace;
          v16974 = v21595 != v21596;
        }
        var v9214 = v16974;
        if (v9214) {
          var v21597 = TypeScript$$14.ErrorRecoverySet;
          var v16975 = v21597.SColon;
          var v9210 = errorRecoverySet$$11 | v16975;
          var v16976 = TypeScript$$14.OperatorPrecedence;
          var v9211 = v16976.Assignment;
          var v9212 = TypeContext.NoTypes;
          var retExpr = JAM.call(this.parseExpr, this, [v9210, v9211, true, v9212], JAM.policy.p1);
          var v9213 = TypeScript$$14.ReturnStatement;
          var retStmt = new v9213;
          retStmt.returnExpression = retExpr;
          retStmt.minChar = retExpr.minChar;
          retStmt.limChar = retExpr.limChar;
          bod$$2.minChar = bodMinChar$$1;
          JAM.call(bod$$2.append, bod$$2, [retStmt]);
        } else {
          isAnonLambda = wasShorthand;
          JAM.call(this.parseFunctionBlock, this, [errorRecoverySet$$11, allowedElements$$1, parentModifiers$$1, bod$$2, bodMinChar$$1], JAM.policy.p1);
        }
        var v9215 = this.scanner;
        limChar$$6 = v9215.pos;
      }
      var v9216 = TypeScript$$14.FuncDecl;
      var v9217 = this.topVarList();
      var v9218 = this.topScopeList();
      var v9219 = this.topStaticsList();
      var v16977 = TypeScript$$14.NodeType;
      var v9220 = v16977.FuncDecl;
      var funcDecl$$6 = JAM.new(v9216, [name$$47, bod$$2, isConstructor$$1, args$$6, v9217, v9218, v9219, v9220]);
      this.popDeclLists();
      var scopeList = this.topScopeList();
      JAM.call(scopeList.append, scopeList, [funcDecl$$6]);
      var staticFuncDecl = false;
      var v9229 = !requiresSignature;
      if (v9229) {
        var v16978 = !wasShorthand;
        var v21598 = !v16978;
        if (v21598) {
          v16978 = isAnonLambda;
        }
        var v9228 = v16978;
        if (v9228) {
          var v9221 = TypeScript$$14.ASTSpan;
          var v26950 = new v9221;
          funcDecl$$6.endingToken = v26950;
          var v9222 = funcDecl$$6.endingToken;
          var v16979 = this.scanner;
          v9222.minChar = v16979.startPos;
          var v9223 = funcDecl$$6.endingToken;
          var v16980 = this.scanner;
          v9223.limChar = v16980.pos;
          var v16981 = TypeScript$$14.TokenID;
          var v9224 = v16981.CloseBrace;
          JAM.call(this.checkCurrentToken, this, [v9224, errorRecoverySet$$11], JAM.policy.p1);
          if (isAnonLambda) {
            var v16982 = funcDecl$$6.fncFlags;
            var v21599 = TypeScript$$14.FncFlags;
            var v16983 = v21599.IsFatArrowFunction;
            funcDecl$$6.fncFlags = v16982 | v16983;
          }
        } else {
          var v16984 = funcDecl$$6.fncFlags;
          var v21600 = TypeScript$$14.FncFlags;
          var v16985 = v21600.IsFatArrowFunction;
          funcDecl$$6.fncFlags = v16984 | v16985;
          var v9225 = TypeScript$$14.ASTSpan;
          var v26951 = new v9225;
          funcDecl$$6.endingToken = v26951;
          var v9226 = funcDecl$$6.endingToken;
          var v21601 = bod$$2.members;
          var v16986 = v21601[0];
          v9226.minChar = v16986.minChar;
          var v9227 = funcDecl$$6.endingToken;
          var v21602 = bod$$2.members;
          var v16987 = v21602[0];
          v9227.limChar = v16987.limChar;
        }
      }
      funcDecl$$6.minChar = minChar$$12;
      funcDecl$$6.limChar = limChar$$6;
      var v9230 = !requiresSignature;
      if (v9230) {
        var v16988 = funcDecl$$6.fncFlags;
        var v21603 = TypeScript$$14.FncFlags;
        var v16989 = v21603.Definition;
        funcDecl$$6.fncFlags = v16988 | v16989;
      }
      this.statementInfoStack = svStmtStack;
      return funcDecl$$6;
    }
    function v555(errorRecoverySet$$10, allowedElements, parentModifiers, bod$$1, bodMinChar) {
      this.state = ParseState.StartStatementList;
      var v16990 = TypeScript$$14.TokenID;
      var v9231 = v16990.OpenBrace;
      var v21604 = TypeScript$$14.ErrorRecoverySet;
      var v16991 = v21604.StmtStart;
      var v9232 = errorRecoverySet$$10 | v16991;
      JAM.call(this.checkCurrentToken, this, [v9231, v9232], JAM.policy.p1);
      var savedInFunction = this.inFunction;
      this.inFunction = true;
      var v24126 = TypeScript$$14.ErrorRecoverySet;
      var v21605 = v24126.RCurly;
      var v16992 = errorRecoverySet$$10 | v21605;
      var v21606 = TypeScript$$14.ErrorRecoverySet;
      var v16993 = v21606.StmtStart;
      var v9233 = v16992 | v16993;
      JAM.call(this.parseStatementList, this, [v9233, bod$$1, true, false, allowedElements, parentModifiers], JAM.policy.p1);
      bod$$1.minChar = bodMinChar;
      var v9234 = this.scanner;
      bod$$1.limChar = v9234.pos;
      this.inFunction = savedInFunction;
      var v9235 = TypeScript$$14.EndCode;
      var ec = new v9235;
      ec.minChar = bod$$1.limChar;
      ec.limChar = ec.minChar;
      JAM.call(bod$$1.append, bod$$1, [ec]);
      return;
    }
    function v554(minChar$$11, errorRecoverySet$$9) {
      var v9236 = this.scanner;
      var v26952 = v9236.scan();
      this.currentToken = v26952;
      var v9237 = TypeScript$$14.ASTList;
      var members$$8 = new v9237;
      members$$8.minChar = minChar$$11;
      var prevInInterfaceDecl = this.inInterfaceDecl;
      this.inInterfaceDecl = true;
      var v21607 = TypeScript$$14.ErrorRecoverySet;
      var v16994 = v21607.RCurly;
      var v9238 = errorRecoverySet$$9 | v16994;
      JAM.call(this.parseTypeMemberList, this, [v9238, members$$8], JAM.policy.p1);
      this.inInterfaceDecl = prevInInterfaceDecl;
      var v16995 = TypeScript$$14.TokenID;
      var v9239 = v16995.CloseBrace;
      JAM.call(this.checkCurrentToken, this, [v9239, errorRecoverySet$$9], JAM.policy.p1);
      var v9240 = TypeScript$$14.InterfaceDeclaration;
      var v9241 = this.anonId;
      var interfaceDecl = JAM.new(v9240, [v9241, members$$8, null, null]);
      interfaceDecl.minChar = minChar$$11;
      interfaceDecl.limChar = members$$8.limChar;
      return JAM.call(this.parseTypeReferenceTail, this, [errorRecoverySet$$9, minChar$$11, interfaceDecl], JAM.policy.p1);
    }
    function v553(errorRecoverySet$$8, allowVoid) {
      var v9242 = this.scanner;
      var minChar$$10 = v9242.startPos;
      var isConstructorMember = false;
      var v16996 = this.currentToken;
      var v9261 = v16996.tokenId;
      switch(v9261) {
        case TypeScript$$14.TokenID.Void:
          var v9243 = !allowVoid;
          if (v9243) {
            JAM.call(this.reportParseError, this, ["void not a valid type in this context"]);
          }
        ;
        case TypeScript$$14.TokenID.Any:
        ;
        case TypeScript$$14.TokenID.Number:
        ;
        case TypeScript$$14.TokenID.Bool:
        ;
        case TypeScript$$14.TokenID.String:
          var v16997 = TypeScript$$14.tokenTable;
          var v21608 = this.currentToken;
          var v16998 = v21608.tokenId;
          var v9244 = v16997[v16998];
          var text$$14 = v9244.text;
          var v9245 = TypeScript$$14.Identifier;
          var predefinedIdentifier = JAM.new(v9245, [text$$14]);
          predefinedIdentifier.minChar = minChar$$10;
          var v9246 = this.scanner;
          predefinedIdentifier.limChar = v9246.pos;
          var v9247 = this.scanner;
          var v26953 = v9247.scan();
          this.currentToken = v26953;
          return JAM.call(this.parseTypeReferenceTail, this, [errorRecoverySet$$8, minChar$$10, predefinedIdentifier], JAM.policy.p1);
        case TypeScript$$14.TokenID.Identifier:
          var v16999 = this.currentToken;
          var v9248 = v16999.getText();
          var v17000 = this.currentToken;
          var v9249 = v17000.hasEscapeSequence;
          var ident = JAM.call(this.createRef, this, [v9248, v9249, minChar$$10], JAM.policy.p1);
          var v9250 = this.scanner;
          ident.limChar = v9250.pos;
          return JAM.call(this.parseNamedType, this, [errorRecoverySet$$8, minChar$$10, ident, true], JAM.policy.p1);
        case TypeScript$$14.TokenID.OpenBrace:
          return JAM.call(this.parseObjectType, this, [minChar$$10, errorRecoverySet$$8], JAM.policy.p1);
        case TypeScript$$14.TokenID.New:
          var v9251 = this.scanner;
          var v26954 = v9251.scan();
          this.currentToken = v26954;
          var v21609 = this.currentToken;
          var v17001 = v21609.tokenId;
          var v21610 = TypeScript$$14.TokenID;
          var v17002 = v21610.OpenParen;
          var v9252 = v17001 != v17002;
          if (v9252) {
            JAM.call(this.reportParseError, this, ["Expected '('"]);
          } else {
            isConstructorMember = true;
          }
        ;
        case TypeScript$$14.TokenID.OpenParen:
          var v9253 = TypeScript$$14.ASTList;
          var formals = new v9253;
          var v21611 = TypeScript$$14.ErrorRecoverySet;
          var v17003 = v21611.RParen;
          var v9254 = errorRecoverySet$$8 | v17003;
          var variableArgList = JAM.call(this.parseFormalParameterList, this, [v9254, formals, false, true, false, false, false, false, null, true], JAM.policy.p1);
          var v17004 = TypeScript$$14.TokenID;
          var v9255 = v17004.EqualsGreaterThan;
          JAM.call(this.checkCurrentToken, this, [v9255, errorRecoverySet$$8], JAM.policy.p1);
          var returnType = JAM.call(this.parseTypeReference, this, [errorRecoverySet$$8, true], JAM.policy.p1);
          var v9256 = TypeScript$$14.FuncDecl;
          var v17005 = TypeScript$$14.NodeType;
          var v9257 = v17005.FuncDecl;
          var funcDecl$$5 = JAM.new(v9256, [null, null, false, formals, null, null, null, v9257]);
          funcDecl$$5.returnTypeAnnotation = returnType;
          funcDecl$$5.variableArgList = variableArgList;
          var v17006 = funcDecl$$5.fncFlags;
          var v21612 = TypeScript$$14.FncFlags;
          var v17007 = v21612.Signature;
          funcDecl$$5.fncFlags = v17006 | v17007;
          if (isConstructorMember) {
            var v17008 = funcDecl$$5.fncFlags;
            var v21613 = TypeScript$$14.FncFlags;
            var v17009 = v21613.ConstructMember;
            funcDecl$$5.fncFlags = v17008 | v17009;
            funcDecl$$5.hint = "_construct";
            funcDecl$$5.classDecl = null;
          }
          funcDecl$$5.minChar = minChar$$10;
          return JAM.call(this.parseTypeReferenceTail, this, [errorRecoverySet$$8, minChar$$10, funcDecl$$5], JAM.policy.p1);
        default:
          JAM.call(this.reportParseError, this, ["Expected type name"]);
          var v9258 = TypeScript$$14.TypeReference;
          var etr = JAM.new(v9258, [null, 0]);
          var v17010 = etr.flags;
          var v21614 = TypeScript$$14.ASTFlags;
          var v17011 = v21614.Error;
          etr.flags = v17010 | v17011;
          var v9259 = this.scanner;
          etr.minChar = v9259.pos;
          var v9260 = this.scanner;
          etr.limChar = v9260.pos;
          return etr;
      }
      return;
    }
    function v552(errorRecoverySet$$7, minChar$$9, term$$2, tail) {
      var v9262 = this.scanner;
      var v26955 = v9262.scan();
      this.currentToken = v26955;
      var v21615 = this.currentToken;
      var v17012 = v21615.tokenId;
      var v21616 = TypeScript$$14.TokenID;
      var v17013 = v21616.Dot;
      var v9279 = v17012 == v17013;
      if (v9279) {
        var v9263 = this.scanner;
        var curpos = v9263.pos;
        var v9264 = this.scanner;
        var v26956 = v9264.scan();
        this.currentToken = v26956;
        var v24127 = this.currentToken;
        var v21617 = v24127.tokenId;
        var v24128 = TypeScript$$14.TokenID;
        var v21618 = v24128.Identifier;
        var v17014 = v21617 == v21618;
        var v21620 = !v17014;
        if (v21620) {
          var v25349 = this.errorRecovery;
          var v24129 = !v25349;
          var v25351 = !v24129;
          if (v25351) {
            var v25935 = this.scanner;
            var v25350 = v25935.lastTokenHadNewline();
            v24129 = !v25350;
          }
          var v21619 = v24129;
          if (v21619) {
            var v24130 = this.currentToken;
            var v24131 = this.strictMode;
            v21619 = JAM.call(TypeScript$$14.convertTokToID, TypeScript$$14, [v24130, v24131], JAM.policy.p1);
          }
          v17014 = v21619;
        }
        var v9278 = v17014;
        if (v9278) {
          var v9265 = TypeScript$$14.Identifier;
          var v9266 = this.currentToken;
          var op2 = JAM.call(v9265.fromToken, v9265, [v9266]);
          var v9267 = this.scanner;
          op2.minChar = v9267.startPos;
          var v9268 = this.scanner;
          op2.limChar = v9268.pos;
          var v9269 = TypeScript$$14.BinaryExpression;
          var v17015 = TypeScript$$14.NodeType;
          var v9270 = v17015.Dot;
          var dotNode$$1 = JAM.new(v9269, [v9270, term$$2, op2]);
          dotNode$$1.minChar = term$$2.minChar;
          dotNode$$1.limChar = op2.limChar;
          return JAM.call(this.parseNamedType, this, [errorRecoverySet$$7, minChar$$9, dotNode$$1, tail], JAM.policy.p1);
        } else {
          JAM.call(this.reportParseError, this, ["need identifier after '.'"]);
          var v9277 = this.errorRecovery;
          if (v9277) {
            var v17016 = term$$2.flags;
            var v21621 = TypeScript$$14.ASTFlags;
            var v17017 = v21621.DotLHS;
            term$$2.flags = v17016 | v17017;
            var v9271 = this.scanner;
            var v26957 = v9271.lastTokenLimChar();
            term$$2.limChar = v26957;
            return term$$2;
          } else {
            var v9272 = TypeScript$$14.MissingIdentifier;
            var eop2 = new v9272;
            var v9273 = this.scanner;
            eop2.minChar = v9273.pos;
            var v9274 = this.scanner;
            eop2.limChar = v9274.pos;
            var v9275 = TypeScript$$14.BinaryExpression;
            var v17018 = TypeScript$$14.NodeType;
            var v9276 = v17018.Dot;
            var edotNode = JAM.new(v9275, [v9276, term$$2, eop2]);
            var v17019 = edotNode.flags;
            var v21622 = TypeScript$$14.ASTFlags;
            var v17020 = v21622.Error;
            edotNode.flags = v17019 | v17020;
            edotNode.minChar = term$$2.minChar;
            edotNode.limChar = eop2.limChar;
            return JAM.call(this.parseNamedType, this, [errorRecoverySet$$7, minChar$$9, edotNode, tail], JAM.policy.p1);
          }
        }
      } else {
        if (tail) {
          return JAM.call(this.parseTypeReferenceTail, this, [errorRecoverySet$$7, minChar$$9, term$$2], JAM.policy.p1);
        } else {
          return term$$2;
        }
      }
      return;
    }
    function v551(errorRecoverySet$$6, minChar$$8, term$$1) {
      var v9280 = TypeScript$$14.TypeReference;
      var result$$8 = JAM.new(v9280, [term$$1, 0]);
      result$$8.minChar = minChar$$8;
      var v21623 = this.currentToken;
      var v17021 = v21623.tokenId;
      var v21624 = TypeScript$$14.TokenID;
      var v17022 = v21624.OpenBracket;
      var v9284 = v17021 == v17022;
      for (;v9284;) {
        var v9281 = this.scanner;
        var v26958 = v9281.scan();
        this.currentToken = v26958;
        result$$8.arrayCount++;
        var v17023 = TypeScript$$14.TokenID;
        var v9282 = v17023.CloseBracket;
        var v21625 = TypeScript$$14.ErrorRecoverySet;
        var v17024 = v21625.LBrack;
        var v9283 = errorRecoverySet$$6 | v17024;
        JAM.call(this.checkCurrentToken, this, [v9282, v9283], JAM.policy.p1);
        var v21626 = this.currentToken;
        var v17025 = v21626.tokenId;
        var v21627 = TypeScript$$14.TokenID;
        var v17026 = v21627.OpenBracket;
        v9284 = v17025 == v17026;
      }
      var v9285 = this.scanner;
      var v26959 = v9285.lastTokenLimChar();
      result$$8.limChar = v26959;
      return result$$8;
    }
    function v550(errorRecoverySet$$5, modifiers$$2, preComments$$1) {
      var v9286 = this.scanner;
      var leftCurlyCount$$1 = v9286.leftCurlyCount;
      var v9287 = this.scanner;
      var rightCurlyCount$$1 = v9287.rightCurlyCount;
      var svAmbient = this.ambientModule;
      var svTopLevel = this.topLevel;
      this.topLevel = false;
      var v21628 = this.parsingDeclareFile;
      var v24132 = !v21628;
      if (v24132) {
        v21628 = svAmbient;
      }
      var v17027 = v21628;
      var v21630 = !v17027;
      if (v21630) {
        var v24133 = TypeScript$$14.Modifiers;
        var v21629 = v24133.Ambient;
        v17027 = JAM.call(TypeScript$$14.hasFlag, TypeScript$$14, [modifiers$$2, v21629], JAM.policy.p1);
      }
      var v9288 = v17027;
      if (v9288) {
        this.ambientModule = true;
      }
      var v9289 = this.scanner;
      var v26960 = v9289.scan();
      this.currentToken = v26960;
      var name$$46 = null;
      var enclosedList$$1 = null;
      this.pushDeclLists();
      var v9290 = this.scanner;
      var minChar$$7 = v9290.startPos;
      var isDynamicMod$$1 = false;
      var v25352 = this.currentToken;
      var v24134 = v25352.tokenId;
      var v25353 = TypeScript$$14.TokenID;
      var v24135 = v25353.Identifier;
      var v21631 = v24134 == v24135;
      var v24138 = !v21631;
      if (v24138) {
        var v25354 = this.currentToken;
        var v24136 = v25354.tokenId;
        var v25355 = TypeScript$$14.TokenID;
        var v24137 = v25355.StringLiteral;
        v21631 = v24136 == v24137;
      }
      var v17028 = v21631;
      var v21633 = !v17028;
      if (v21633) {
        var v25356 = this.currentToken;
        var v24139 = JAM.call(TypeScript$$14.isPrimitiveTypeToken, TypeScript$$14, [v25356]);
        var v21632 = !v24139;
        if (v21632) {
          var v24140 = this.currentToken;
          var v24141 = this.strictMode;
          v21632 = JAM.call(TypeScript$$14.convertTokToID, TypeScript$$14, [v24140, v24141], JAM.policy.p1);
        }
        v17028 = v21632;
      }
      var v9302 = v17028;
      if (v9302) {
        var v9291 = this.currentToken;
        var nameText = v9291.getText();
        var v21634 = this.currentToken;
        var v17029 = v21634.tokenId;
        var v21635 = TypeScript$$14.TokenID;
        var v17030 = v21635.StringLiteral;
        var v9294 = v17029 == v17030;
        if (v9294) {
          isDynamicMod$$1 = true;
          var v17031 = this.ambientModule;
          var v9292 = !v17031;
          if (v9292) {
            JAM.call(this.reportParseError, this, ["Only ambient dynamic modules may have string literal names"]);
          }
          var v9293 = !svTopLevel;
          if (v9293) {
            JAM.call(this.reportParseError, this, ["Dynamic modules may not be nested within other modules"]);
          }
        }
        var v9295 = TypeScript$$14.Identifier;
        var v9296 = this.currentToken;
        name$$46 = JAM.call(v9295.fromToken, v9295, [v9296]);
        var v9297 = this.scanner;
        name$$46.minChar = v9297.startPos;
        var v9298 = this.scanner;
        name$$46.limChar = v9298.pos;
        var v9299 = this.scanner;
        var v26961 = v9299.scan();
        this.currentToken = v26961;
      } else {
        var v21636 = this.currentToken;
        var v17032 = v21636.tokenId;
        var v21637 = TypeScript$$14.TokenID;
        var v17033 = v21637.OpenBrace;
        var v9301 = v17032 == v17033;
        if (v9301) {
          JAM.call(this.reportParseError, this, ["Module name missing"]);
          var v9300 = TypeScript$$14.Identifier;
          name$$46 = JAM.new(v9300, [""]);
          name$$46.minChar = minChar$$7;
          name$$46.limChar = minChar$$7;
        }
      }
      var v21638 = this.currentToken;
      var v17034 = v21638.tokenId;
      var v21639 = TypeScript$$14.TokenID;
      var v17035 = v21639.Dot;
      var v9303 = v17034 == v17035;
      if (v9303) {
        enclosedList$$1 = new Array;
        JAM.call(this.parseDottedName, this, [enclosedList$$1]);
      }
      var v9305 = name$$46 == null;
      if (v9305) {
        var v9304 = TypeScript$$14.MissingIdentifier;
        name$$46 = new v9304;
      }
      var v9306 = TypeScript$$14.ASTList;
      var moduleBody = new v9306;
      var v9307 = this.scanner;
      var bodyMinChar = v9307.startPos;
      var v17036 = TypeScript$$14.TokenID;
      var v9308 = v17036.OpenBrace;
      var v21640 = TypeScript$$14.ErrorRecoverySet;
      var v17037 = v21640.ID;
      var v9309 = errorRecoverySet$$5 | v17037;
      JAM.call(this.checkCurrentToken, this, [v9308, v9309], JAM.policy.p1);
      var v9310 = svTopLevel && isDynamicMod$$1;
      if (v9310) {
        this.allowImportDeclaration = true;
      } else {
        this.allowImportDeclaration = false;
      }
      var v21641 = TypeScript$$14.ErrorRecoverySet;
      var v17038 = v21641.RCurly;
      var v9311 = errorRecoverySet$$5 | v17038;
      var v17039 = TypeScript$$14.AllowedElements;
      var v9312 = v17039.Global;
      JAM.call(this.parseStatementList, this, [v9311, moduleBody, true, true, v9312, modifiers$$2], JAM.policy.p1);
      moduleBody.minChar = bodyMinChar;
      var v9313 = this.scanner;
      moduleBody.limChar = v9313.pos;
      var v9314 = TypeScript$$14.ASTSpan;
      var endingToken$$2 = new v9314;
      var v9315 = this.scanner;
      endingToken$$2.minChar = v9315.startPos;
      var v9316 = this.scanner;
      endingToken$$2.limChar = v9316.pos;
      var v17040 = TypeScript$$14.TokenID;
      var v9317 = v17040.CloseBrace;
      JAM.call(this.checkCurrentToken, this, [v9317, errorRecoverySet$$5], JAM.policy.p1);
      var v9318 = this.scanner;
      var limChar$$5 = v9318.lastTokenLimChar();
      var moduleDecl$$3;
      this.allowImportDeclaration = svTopLevel;
      var v17041 = enclosedList$$1;
      if (v17041) {
        var v21642 = enclosedList$$1.length;
        v17041 = v21642 > 0;
      }
      var v9337 = v17041;
      if (v9337) {
        var len$$16 = enclosedList$$1.length;
        var v9319 = len$$16 - 1;
        var innerName = enclosedList$$1[v9319];
        var v9320 = TypeScript$$14.ModuleDeclaration;
        var v9321 = this.topVarList();
        var v9322 = this.topScopeList();
        var innerDecl = JAM.new(v9320, [innerName, moduleBody, v9321, v9322, endingToken$$2]);
        innerDecl.preComments = preComments$$1;
        var v17042 = this.parsingDeclareFile;
        var v21644 = !v17042;
        if (v21644) {
          var v24142 = TypeScript$$14.Modifiers;
          var v21643 = v24142.Ambient;
          v17042 = JAM.call(TypeScript$$14.hasFlag, TypeScript$$14, [modifiers$$2, v21643], JAM.policy.p1);
        }
        var v9323 = v17042;
        if (v9323) {
          var v17043 = innerDecl.modFlags;
          var v21645 = TypeScript$$14.ModuleFlags;
          var v17044 = v21645.Ambient;
          innerDecl.modFlags = v17043 | v17044;
        }
        var v17045 = innerDecl.modFlags;
        var v21646 = TypeScript$$14.ModuleFlags;
        var v17046 = v21646.Exported;
        innerDecl.modFlags = v17045 | v17046;
        innerDecl.minChar = minChar$$7;
        innerDecl.limChar = limChar$$5;
        this.popDeclLists();
        var outerModBod;
        var i$$50 = len$$16 - 2;
        var v9329 = i$$50 >= 0;
        for (;v9329;) {
          var v9324 = TypeScript$$14.ASTList;
          outerModBod = new v9324;
          JAM.call(outerModBod.append, outerModBod, [innerDecl]);
          innerName = enclosedList$$1[i$$50];
          var v9325 = TypeScript$$14.ModuleDeclaration;
          var v17047 = TypeScript$$14.ASTList;
          var v9326 = new v17047;
          var v17048 = TypeScript$$14.ASTList;
          var v9327 = new v17048;
          innerDecl = JAM.new(v9325, [innerName, outerModBod, v9326, v9327, endingToken$$2]);
          outerModBod.minChar = innerDecl.minChar = minChar$$7;
          outerModBod.limChar = innerDecl.limChar = limChar$$5;
          var v17049 = this.parsingDeclareFile;
          var v21648 = !v17049;
          if (v21648) {
            var v24143 = TypeScript$$14.Modifiers;
            var v21647 = v24143.Ambient;
            v17049 = JAM.call(TypeScript$$14.hasFlag, TypeScript$$14, [modifiers$$2, v21647], JAM.policy.p1);
          }
          var v9328 = v17049;
          if (v9328) {
            var v17050 = innerDecl.modFlags;
            var v21649 = TypeScript$$14.ModuleFlags;
            var v17051 = v21649.Ambient;
            innerDecl.modFlags = v17050 | v17051;
          }
          var v17052 = innerDecl.modFlags;
          var v21650 = TypeScript$$14.ModuleFlags;
          var v17053 = v21650.Exported;
          innerDecl.modFlags = v17052 | v17053;
          i$$50--;
          v9329 = i$$50 >= 0;
        }
        var v9330 = TypeScript$$14.ASTList;
        outerModBod = new v9330;
        JAM.call(outerModBod.append, outerModBod, [innerDecl]);
        outerModBod.minChar = minChar$$7;
        outerModBod.limChar = limChar$$5;
        var v9331 = TypeScript$$14.ModuleDeclaration;
        var v17054 = TypeScript$$14.ASTList;
        var v9332 = new v17054;
        var v17055 = TypeScript$$14.ASTList;
        var v9333 = new v17055;
        moduleDecl$$3 = JAM.new(v9331, [name$$46, outerModBod, v9332, v9333, endingToken$$2]);
      } else {
        var v9334 = TypeScript$$14.ModuleDeclaration;
        var v9335 = this.topVarList();
        var v9336 = this.topScopeList();
        moduleDecl$$3 = JAM.new(v9334, [name$$46, moduleBody, v9335, v9336, endingToken$$2]);
        moduleDecl$$3.preComments = preComments$$1;
        this.popDeclLists();
      }
      var v21651 = this.parsingDeclareFile;
      var v24144 = !v21651;
      if (v24144) {
        v21651 = svAmbient;
      }
      var v17056 = v21651;
      var v21653 = !v17056;
      if (v21653) {
        var v24145 = TypeScript$$14.Modifiers;
        var v21652 = v24145.Ambient;
        v17056 = JAM.call(TypeScript$$14.hasFlag, TypeScript$$14, [modifiers$$2, v21652], JAM.policy.p1);
      }
      var v9338 = v17056;
      if (v9338) {
        var v17057 = moduleDecl$$3.modFlags;
        var v21654 = TypeScript$$14.ModuleFlags;
        var v17058 = v21654.Ambient;
        moduleDecl$$3.modFlags = v17057 | v17058;
      }
      var v17059 = svAmbient;
      var v21656 = !v17059;
      if (v21656) {
        var v24146 = TypeScript$$14.Modifiers;
        var v21655 = v24146.Exported;
        v17059 = JAM.call(TypeScript$$14.hasFlag, TypeScript$$14, [modifiers$$2, v21655], JAM.policy.p1);
      }
      var v9339 = v17059;
      if (v9339) {
        var v17060 = moduleDecl$$3.modFlags;
        var v21657 = TypeScript$$14.ModuleFlags;
        var v17061 = v21657.Exported;
        moduleDecl$$3.modFlags = v17060 | v17061;
      }
      if (isDynamicMod$$1) {
        var v17062 = moduleDecl$$3.modFlags;
        var v21658 = TypeScript$$14.ModuleFlags;
        var v17063 = v21658.IsDynamic;
        moduleDecl$$3.modFlags = v17062 | v17063;
      }
      this.ambientModule = svAmbient;
      this.topLevel = svTopLevel;
      var v17064 = this.scanner;
      var v9340 = v17064.leftCurlyCount;
      moduleDecl$$3.leftCurlyCount = v9340 - leftCurlyCount$$1;
      var v17065 = this.scanner;
      var v9341 = v17065.rightCurlyCount;
      moduleDecl$$3.rightCurlyCount = v9341 - rightCurlyCount$$1;
      moduleDecl$$3.limChar = moduleBody.limChar;
      return moduleDecl$$3;
    }
    function v549(errorRecoverySet$$4, modifiers$$1) {
      var name$$45 = null;
      var alias$$1 = null;
      var importDecl = null;
      var v9342 = this.scanner;
      var minChar$$6 = v9342.startPos;
      var isDynamicImport = false;
      var v9343 = this.scanner;
      var v26962 = v9343.scan();
      this.currentToken = v26962;
      var v24147 = this.currentToken;
      var v21659 = v24147.tokenId;
      var v24148 = TypeScript$$14.TokenID;
      var v21660 = v24148.Identifier;
      var v17066 = v21659 == v21660;
      var v21663 = !v17066;
      if (v21663) {
        var v21661 = this.currentToken;
        var v21662 = this.strictMode;
        v17066 = JAM.call(TypeScript$$14.convertTokToID, TypeScript$$14, [v21661, v21662], JAM.policy.p1);
      }
      var v9347 = v17066;
      if (v9347) {
        var v9344 = TypeScript$$14.Identifier;
        var v9345 = this.currentToken;
        name$$45 = JAM.call(v9344.fromToken, v9344, [v9345]);
      } else {
        JAM.call(this.reportParseError, this, ["Expected identifer after 'import'"]);
        var v9346 = TypeScript$$14.MissingIdentifier;
        name$$45 = new v9346;
      }
      var v9348 = this.scanner;
      name$$45.minChar = v9348.startPos;
      var v9349 = this.scanner;
      name$$45.limChar = v9349.pos;
      var v9350 = this.scanner;
      var v26963 = v9350.scan();
      this.currentToken = v26963;
      var v17067 = TypeScript$$14.TokenID;
      var v9351 = v17067.Equals;
      var v21664 = TypeScript$$14.ErrorRecoverySet;
      var v17068 = v21664.ID;
      var v9352 = errorRecoverySet$$4 | v17068;
      JAM.call(this.checkCurrentToken, this, [v9351, v9352], JAM.policy.p1);
      var aliasPreComments = this.parseComments();
      var limChar$$4;
      var v24149 = this.currentToken;
      var v21665 = v24149.tokenId;
      var v24150 = TypeScript$$14.TokenID;
      var v21666 = v24150.Identifier;
      var v17069 = v21665 == v21666;
      var v21669 = !v17069;
      if (v21669) {
        var v21667 = this.currentToken;
        var v21668 = this.strictMode;
        v17069 = JAM.call(TypeScript$$14.convertTokToID, TypeScript$$14, [v21667, v21668], JAM.policy.p1);
      }
      var v9385 = v17069;
      if (v9385) {
        var v21670 = this.currentToken;
        var v17070 = v21670.tokenId;
        var v21671 = TypeScript$$14.TokenID;
        var v17071 = v21671.Module;
        var v9378 = v17070 == v17071;
        if (v9378) {
          var v9353 = this.scanner;
          limChar$$4 = v9353.pos;
          var v9354 = this.scanner;
          var v26964 = v9354.scan();
          this.currentToken = v26964;
          var v21672 = this.currentToken;
          var v17072 = v21672.tokenId;
          var v21673 = TypeScript$$14.TokenID;
          var v17073 = v21673.OpenParen;
          var v9373 = v17072 == v17073;
          if (v9373) {
            var v9355 = this.scanner;
            var v26965 = v9355.scan();
            this.currentToken = v26965;
            var v25357 = this.currentToken;
            var v24151 = v25357.tokenId;
            var v25358 = TypeScript$$14.TokenID;
            var v24152 = v25358.StringLiteral;
            var v21674 = v24151 == v24152;
            var v24155 = !v21674;
            if (v24155) {
              var v25359 = this.currentToken;
              var v24153 = v25359.tokenId;
              var v25360 = TypeScript$$14.TokenID;
              var v24154 = v25360.Identifier;
              v21674 = v24153 == v24154;
            }
            var v17074 = v21674;
            var v21677 = !v17074;
            if (v21677) {
              var v21675 = this.currentToken;
              var v21676 = this.strictMode;
              v17074 = JAM.call(TypeScript$$14.convertTokToID, TypeScript$$14, [v21675, v21676], JAM.policy.p1);
            }
            var v9369 = v17074;
            if (v9369) {
              var v21678 = this.currentToken;
              var v17075 = v21678.tokenId;
              var v21679 = TypeScript$$14.TokenID;
              var v17076 = v21679.StringLiteral;
              var v9368 = v17075 == v17076;
              if (v9368) {
                var v9357 = this.topLevel;
                if (v9357) {
                  this.hasTopLevelImportOrExport = true;
                } else {
                  var v17077 = this.allowImportDeclaration;
                  var v9356 = !v17077;
                  if (v9356) {
                    JAM.call(this.reportParseError, this, ["Import declaration of external module is permitted only in global or top level dynamic modules"]);
                  }
                }
                var v9358 = this.currentToken;
                var aliasText = v9358.getText();
                var v9359 = TypeScript$$14.Identifier;
                var v9360 = this.currentToken;
                alias$$1 = JAM.call(v9359.fromToken, v9359, [v9360]);
                var v9361 = this.scanner;
                alias$$1.minChar = v9361.startPos;
                var v9362 = this.scanner;
                alias$$1.limChar = v9362.pos;
                var v21680 = alias$$1.text;
                var v17078 = JAM.call(this.isValidImportPath, this, [v21680]);
                var v9363 = !v17078;
                if (v9363) {
                  JAM.call(this.reportParseError, this, ["Invalid import path"]);
                }
                isDynamicImport = true;
                var v9364 = this.scanner;
                var v26966 = v9364.scan();
                this.currentToken = v26966;
                alias$$1.preComments = aliasPreComments;
              } else {
                var v21681 = TypeScript$$14.ErrorRecoverySet;
                var v17079 = v21681.SColon;
                var v9365 = errorRecoverySet$$4 | v17079;
                var v17080 = TypeScript$$14.OperatorPrecedence;
                var v9366 = v17080.Assignment;
                var v9367 = TypeContext.NoTypes;
                alias$$1 = JAM.call(this.parseExpr, this, [v9365, v9366, true, v9367], JAM.policy.p1);
                alias$$1.preComments = aliasPreComments;
              }
            }
            var v9370 = this.scanner;
            limChar$$4 = v9370.pos;
            var v17081 = TypeScript$$14.TokenID;
            var v9371 = v17081.CloseParen;
            var v21682 = TypeScript$$14.ErrorRecoverySet;
            var v17082 = v21682.ID;
            var v9372 = errorRecoverySet$$4 | v17082;
            JAM.call(this.checkCurrentToken, this, [v9371, v9372], JAM.policy.p1);
            if (alias$$1) {
              var v26967 = this.parseComments();
              alias$$1.postComments = v26967;
            }
          }
        } else {
          var v21683 = TypeScript$$14.ErrorRecoverySet;
          var v17083 = v21683.SColon;
          var v9374 = errorRecoverySet$$4 | v17083;
          var v17084 = TypeScript$$14.OperatorPrecedence;
          var v9375 = v17084.Assignment;
          var v9376 = TypeContext.NoTypes;
          alias$$1 = JAM.call(this.parseExpr, this, [v9374, v9375, true, v9376], JAM.policy.p1);
          var v9377 = this.scanner;
          limChar$$4 = v9377.pos;
        }
      } else {
        JAM.call(this.reportParseError, this, ["Expected module name"]);
        var v9379 = TypeScript$$14.MissingIdentifier;
        alias$$1 = new v9379;
        var v9380 = this.scanner;
        alias$$1.minChar = v9380.startPos;
        var v21684 = this.currentToken;
        var v17085 = v21684.tokenId;
        var v21685 = TypeScript$$14.TokenID;
        var v17086 = v21685.Semicolon;
        var v9384 = v17085 == v17086;
        if (v9384) {
          var v9381 = this.scanner;
          alias$$1.limChar = v9381.startPos;
        } else {
          var v9382 = this.scanner;
          alias$$1.limChar = v9382.pos;
          var v9383 = this.scanner;
          var v26968 = v9383.scan();
          this.currentToken = v26968;
        }
        var v17087 = alias$$1.flags;
        var v21686 = TypeScript$$14.ASTFlags;
        var v17088 = v21686.Error;
        alias$$1.flags = v17087 | v17088;
        limChar$$4 = alias$$1.limChar;
      }
      var v9386 = TypeScript$$14.ImportDeclaration;
      importDecl = JAM.new(v9386, [name$$45, alias$$1]);
      importDecl.isDynamicImport = isDynamicImport;
      importDecl.minChar = minChar$$6;
      importDecl.limChar = limChar$$4;
      return importDecl;
    }
    function v548(importPath) {
      importPath = JAM.call(TypeScript$$14.stripQuotes, TypeScript$$14, [importPath]);
      var v24156 = !importPath;
      var v25362 = !v24156;
      if (v25362) {
        var v25361 = importPath.indexOf(":");
        v24156 = v25361 != -1;
      }
      var v21687 = v24156;
      var v24158 = !v21687;
      if (v24158) {
        var v24157 = importPath.indexOf("\\");
        v21687 = v24157 != -1;
      }
      var v17089 = v21687;
      var v21689 = !v17089;
      if (v21689) {
        var v21688 = importPath.charAt(0);
        v17089 = v21688 == "/";
      }
      var v9387 = v17089;
      if (v9387) {
        return false;
      }
      return true;
    }
    function v547(enclosedList) {
      var v9388 = this.scanner;
      var v26969 = v9388.scan();
      this.currentToken = v26969;
      var v24159 = this.currentToken;
      var v21690 = v24159.tokenId;
      var v24160 = TypeScript$$14.TokenID;
      var v21691 = v24160.Identifier;
      var v17090 = v21690 == v21691;
      var v21694 = !v17090;
      if (v21694) {
        var v21692 = this.currentToken;
        var v21693 = this.strictMode;
        v17090 = JAM.call(TypeScript$$14.convertTokToID, TypeScript$$14, [v21692, v21693], JAM.policy.p1);
      }
      var v9396 = v17090;
      if (v9396) {
        var v9389 = TypeScript$$14.Identifier;
        var v9390 = this.currentToken;
        var id$$10 = JAM.call(v9389.fromToken, v9389, [v9390]);
        var v26970 = this.parseComments();
        id$$10.preComments = v26970;
        var v9391 = enclosedList.length;
        JAM.set(enclosedList, v9391, id$$10);
        var v9392 = this.scanner;
        id$$10.minChar = v9392.startPos;
        var v9393 = this.scanner;
        id$$10.limChar = v9393.pos;
        var v9394 = this.scanner;
        var v26971 = v9394.scan();
        this.currentToken = v26971;
        var v21695 = this.currentToken;
        var v17091 = v21695.tokenId;
        var v21696 = TypeScript$$14.TokenID;
        var v17092 = v21696.Dot;
        var v9395 = v17091 == v17092;
        if (v9395) {
          JAM.call(this.parseDottedName, this, [enclosedList]);
        }
      } else {
        JAM.call(this.reportParseError, this, ["need identifier after '.'"]);
      }
      return;
    }
    function v546(errorRecoverySet$$3, modifiers) {
      var v9397 = this.scanner;
      var leftCurlyCount = v9397.leftCurlyCount;
      var v9398 = this.scanner;
      var rightCurlyCount = v9398.rightCurlyCount;
      var name$$44 = null;
      var v24161 = this.currentToken;
      var v21697 = v24161.tokenId;
      var v24162 = TypeScript$$14.TokenID;
      var v21698 = v24162.Identifier;
      var v17093 = v21697 == v21698;
      var v21701 = !v17093;
      if (v21701) {
        var v21699 = this.currentToken;
        var v21700 = this.strictMode;
        v17093 = JAM.call(TypeScript$$14.convertTokToID, TypeScript$$14, [v21699, v21700], JAM.policy.p1);
      }
      var v9408 = v17093;
      if (v9408) {
        var v9399 = TypeScript$$14.Identifier;
        var v9400 = this.currentToken;
        name$$44 = JAM.call(v9399.fromToken, v9399, [v9400]);
        var v9401 = this.scanner;
        name$$44.minChar = v9401.startPos;
        var v9402 = this.scanner;
        name$$44.limChar = v9402.pos;
        var v9403 = this.scanner;
        var v26972 = v9403.scan();
        this.currentToken = v26972;
      } else {
        JAM.call(this.reportParseError, this, ["Enum declaration requires identifier"]);
        var v9407 = this.errorRecovery;
        if (v9407) {
          var v9404 = TypeScript$$14.MissingIdentifier;
          name$$44 = new v9404;
          var v9405 = this.scanner;
          name$$44.minChar = v9405.startPos;
          var v9406 = this.scanner;
          name$$44.limChar = v9406.startPos;
          var v17094 = name$$44.flags;
          var v21702 = TypeScript$$14.ASTFlags;
          var v17095 = v21702.Error;
          name$$44.flags = v17094 | v17095;
        }
      }
      var v9409 = this.scanner;
      var membersMinChar = v9409.startPos;
      var v17096 = TypeScript$$14.TokenID;
      var v9410 = v17096.OpenBrace;
      var v21703 = TypeScript$$14.ErrorRecoverySet;
      var v17097 = v21703.ID;
      var v9411 = errorRecoverySet$$3 | v17097;
      JAM.call(this.checkCurrentToken, this, [v9410, v9411], JAM.policy.p1);
      this.pushDeclLists();
      var v9412 = TypeScript$$14.ASTList;
      var members$$7 = new v9412;
      members$$7.minChar = membersMinChar;
      var v9413 = TypeScript$$14.VarDecl;
      var v17098 = TypeScript$$14.Identifier;
      var v9414 = JAM.new(v17098, ["_map"]);
      var mapDecl = JAM.new(v9413, [v9414, 0]);
      var v17099 = mapDecl.varFlags;
      var v21704 = TypeScript$$14.VarFlags;
      var v17100 = v21704.Exported;
      mapDecl.varFlags = v17099 | v17100;
      var v17101 = mapDecl.varFlags;
      var v21705 = TypeScript$$14.VarFlags;
      var v17102 = v21705.Private;
      mapDecl.varFlags = v17101 | v17102;
      var v17103 = mapDecl.varFlags;
      var v24163 = TypeScript$$14.VarFlags;
      var v21706 = v24163.Property;
      var v24164 = TypeScript$$14.VarFlags;
      var v21707 = v24164.Public;
      var v17104 = v21706 | v21707;
      mapDecl.varFlags = v17103 | v17104;
      var v9415 = TypeScript$$14.UnaryExpression;
      var v17105 = TypeScript$$14.NodeType;
      var v9416 = v17105.ArrayLit;
      var v26973 = JAM.new(v9415, [v9416, null]);
      mapDecl.init = v26973;
      JAM.call(members$$7.append, members$$7, [mapDecl]);
      var lastValue = null;
      for (;;) {
        var v9417 = this.scanner;
        var minChar$$5 = v9417.startPos;
        var limChar$$3;
        var memberName = null;
        var memberValue = null;
        var preComments = null;
        var postComments = null;
        var v24165 = this.currentToken;
        var v21708 = v24165.tokenId;
        var v24166 = TypeScript$$14.TokenID;
        var v21709 = v24166.Identifier;
        var v17106 = v21708 == v21709;
        var v21711 = !v17106;
        if (v21711) {
          var v21710 = this.currentToken;
          v17106 = JAM.call(TypeScript$$14.convertTokToIDName, TypeScript$$14, [v21710]);
        }
        var v9427 = v17106;
        if (v9427) {
          var v9418 = TypeScript$$14.Identifier;
          var v9419 = this.currentToken;
          memberName = JAM.call(v9418.fromToken, v9418, [v9419]);
          var v9420 = this.scanner;
          memberName.minChar = v9420.startPos;
          var v9421 = this.scanner;
          memberName.limChar = v9421.pos;
        } else {
          var v21712 = this.currentToken;
          var v17107 = v21712.tokenId;
          var v21713 = TypeScript$$14.TokenID;
          var v17108 = v21713.CloseBrace;
          var v9426 = v17107 == v17108;
          if (v9426) {
            break;
          } else {
            JAM.call(this.reportParseError, this, ["Expected identifer of enum member"]);
            var v9425 = this.errorRecovery;
            if (v9425) {
              var v9422 = TypeScript$$14.MissingIdentifier;
              memberName = new v9422;
              var v9423 = this.scanner;
              memberName.minChar = v9423.startPos;
              var v9424 = this.scanner;
              memberName.limChar = v9424.startPos;
              var v17109 = memberName.flags;
              var v21714 = TypeScript$$14.ASTFlags;
              var v17110 = v21714.Error;
              memberName.flags = v17109 | v17110;
            }
          }
        }
        var v9428 = this.scanner;
        limChar$$3 = v9428.pos;
        preComments = this.parseComments();
        var v9429 = this.scanner;
        var v26974 = v9429.scan();
        this.currentToken = v26974;
        postComments = this.parseComments();
        var v21715 = this.currentToken;
        var v17111 = v21715.tokenId;
        var v21716 = TypeScript$$14.TokenID;
        var v17112 = v21716.Equals;
        var v9441 = v17111 == v17112;
        if (v9441) {
          var v9430 = this.scanner;
          var v26975 = v9430.scan();
          this.currentToken = v26975;
          var v17113 = TypeScript$$14.OperatorPrecedence;
          var v9431 = v17113.Comma;
          var v9432 = TypeContext.NoTypes;
          memberValue = JAM.call(this.parseExpr, this, [errorRecoverySet$$3, v9431, true, v9432], JAM.policy.p1);
          lastValue = memberValue;
          limChar$$3 = memberValue.limChar;
        } else {
          var v9436 = lastValue == null;
          if (v9436) {
            var v9433 = TypeScript$$14.NumberLiteral;
            memberValue = JAM.new(v9433, [0]);
            lastValue = memberValue;
          } else {
            var v9434 = TypeScript$$14.NumberLiteral;
            var v17114 = lastValue.value;
            var v9435 = v17114 + 1;
            memberValue = JAM.new(v9434, [v9435]);
            lastValue = memberValue;
          }
          var v9437 = TypeScript$$14.BinaryExpression;
          var v17115 = TypeScript$$14.NodeType;
          var v9438 = v17115.Asg;
          var v17116 = TypeScript$$14.BinaryExpression;
          var v21717 = TypeScript$$14.NodeType;
          var v17117 = v21717.Index;
          var v21718 = TypeScript$$14.Identifier;
          var v17118 = JAM.new(v21718, ["_map"]);
          var v9439 = JAM.new(v17116, [v17117, v17118, memberValue]);
          var v17119 = TypeScript$$14.StringLiteral;
          var v24167 = memberName.actualText;
          var v21719 = '"' + v24167;
          var v17120 = v21719 + '"';
          var v9440 = JAM.new(v17119, [v17120]);
          var map = JAM.new(v9437, [v9438, v9439, v9440]);
          JAM.call(members$$7.append, members$$7, [map]);
        }
        var v9442 = TypeScript$$14.VarDecl;
        var v9443 = this.nestingLevel;
        var member$$1 = JAM.new(v9442, [memberName, v9443]);
        member$$1.minChar = minChar$$5;
        member$$1.limChar = limChar$$3;
        member$$1.init = memberValue;
        var v9444 = TypeScript$$14.TypeReference;
        var v17121 = name$$44.actualText;
        var v17122 = name$$44.hasEscapeSequence;
        var v9445 = JAM.call(this.createRef, this, [v17121, v17122, -1], JAM.policy.p1);
        var v26976 = JAM.new(v9444, [v9445, 0]);
        member$$1.typeExpr = v26976;
        var v17123 = member$$1.varFlags;
        var v24168 = TypeScript$$14.VarFlags;
        var v21720 = v24168.Readonly;
        var v24169 = TypeScript$$14.VarFlags;
        var v21721 = v24169.Property;
        var v17124 = v21720 | v21721;
        member$$1.varFlags = v17123 | v17124;
        var v17125 = memberValue.nodeType;
        var v21722 = TypeScript$$14.NodeType;
        var v17126 = v21722.NumberLit;
        var v9446 = v17125 == v17126;
        if (v9446) {
          var v17127 = member$$1.varFlags;
          var v21723 = TypeScript$$14.VarFlags;
          var v17128 = v21723.Constant;
          member$$1.varFlags = v17127 | v17128;
        }
        member$$1.preComments = preComments;
        JAM.call(members$$7.append, members$$7, [member$$1]);
        member$$1.postComments = postComments;
        var v17129 = member$$1.varFlags;
        var v21724 = TypeScript$$14.VarFlags;
        var v17130 = v21724.Exported;
        member$$1.varFlags = v17129 | v17130;
        var v21725 = this.currentToken;
        var v17131 = v21725.tokenId;
        var v21726 = TypeScript$$14.TokenID;
        var v17132 = v21726.Comma;
        var v9451 = v17131 == v17132;
        if (v9451) {
          var v9447 = this.scanner;
          var v26977 = v9447.scan();
          this.currentToken = v26977;
          var v9448 = member$$1.postComments;
          var v21727 = this.scanner;
          var v17133 = v21727.prevLine;
          var v9449 = JAM.call(this.parseCommentsForLine, this, [v17133]);
          var v26978 = JAM.call(this.combineComments, this, [v9448, v9449], JAM.policy.p1);
          member$$1.postComments = v26978;
          var v24170 = this.currentToken;
          var v21728 = v24170.tokenId;
          var v24171 = TypeScript$$14.TokenID;
          var v21729 = v24171.Identifier;
          var v17134 = v21728 == v21729;
          var v21731 = !v17134;
          if (v21731) {
            var v21730 = this.currentToken;
            v17134 = JAM.call(TypeScript$$14.convertTokToIDName, TypeScript$$14, [v21730]);
          }
          var v9450 = v17134;
          if (v9450) {
            continue;
          }
        }
        break;
      }
      var v9452 = TypeScript$$14.ASTSpan;
      var endingToken$$1 = new v9452;
      var v9453 = this.scanner;
      endingToken$$1.minChar = v9453.startPos;
      var v9454 = this.scanner;
      endingToken$$1.limChar = v9454.pos;
      var v17135 = TypeScript$$14.TokenID;
      var v9455 = v17135.CloseBrace;
      JAM.call(this.checkCurrentToken, this, [v9455, errorRecoverySet$$3], JAM.policy.p1);
      var v9456 = this.scanner;
      var v26979 = v9456.lastTokenLimChar();
      members$$7.limChar = v26979;
      var v9457 = TypeScript$$14.ModuleDeclaration;
      var v9458 = this.topVarList();
      var v9459 = this.topScopeList();
      var modDecl = JAM.new(v9457, [name$$44, members$$7, v9458, v9459, endingToken$$1]);
      var v17136 = modDecl.modFlags;
      var v21732 = TypeScript$$14.ModuleFlags;
      var v17137 = v21732.IsEnum;
      modDecl.modFlags = v17136 | v17137;
      this.popDeclLists();
      var v17138 = this.scanner;
      var v9460 = v17138.leftCurlyCount;
      modDecl.leftCurlyCount = v9460 - leftCurlyCount;
      var v17139 = this.scanner;
      var v9461 = v17139.rightCurlyCount;
      modDecl.rightCurlyCount = v9461 - rightCurlyCount;
      return modDecl;
    }
    function v545(comment1, comment2) {
      var v9463 = comment1 == null;
      if (v9463) {
        return comment2;
      } else {
        var v9462 = comment2 == null;
        if (v9462) {
          return comment1;
        } else {
          return comment1.concat(comment2);
        }
      }
      return;
    }
    function v544(line$$4) {
      var v9464 = this.scanner;
      var comments$$7 = JAM.call(v9464.getCommentsForLine, v9464, [line$$4]);
      return JAM.call(this.parseCommentsInner, this, [comments$$7]);
    }
    function v543() {
      var v9465 = this.scanner;
      var comments$$6 = v9465.getComments();
      return JAM.call(this.parseCommentsInner, this, [comments$$6]);
    }
    function v542(comments$$5) {
      if (comments$$5) {
        var commentASTs = new Array;
        var i$$49 = 0;
        var v17140 = comments$$5.length;
        var v9467 = i$$49 < v17140;
        for (;v9467;) {
          var v17141 = comments$$5[i$$49];
          var v9466 = JAM.call(this.parseComment, this, [v17141]);
          JAM.call(commentASTs.push, commentASTs, [v9466]);
          i$$49++;
          var v17142 = comments$$5.length;
          v9467 = i$$49 < v17142;
        }
        return commentASTs;
      } else {
        return null;
      }
      return;
    }
    function v541(comment$$2) {
      if (comment$$2) {
        var v9468 = TypeScript$$14.Comment;
        var v9469 = comment$$2.value;
        var v9470 = comment$$2.isBlock;
        var v9471 = comment$$2.endsLine;
        var c$$7 = JAM.new(v9468, [v9469, v9470, v9471]);
        c$$7.minChar = comment$$2.startPos;
        var v9472 = comment$$2.startPos;
        var v17143 = comment$$2.value;
        var v9473 = v17143.length;
        c$$7.limChar = v9472 + v9473;
        var lineCol$$4 = {line:-1, col:-1};
        var v9474 = c$$7.minChar;
        JAM.call(this.getSourceLineCol, this, [lineCol$$4, v9474], JAM.policy.p1);
        c$$7.minLine = lineCol$$4.line;
        var v9475 = c$$7.limChar;
        JAM.call(this.getSourceLineCol, this, [lineCol$$4, v9475], JAM.policy.p1);
        c$$7.limLine = lineCol$$4.line;
        var v24172 = comment$$2.isBlock;
        var v21733 = !v24172;
        if (v21733) {
          var v25363 = comment$$2.value;
          var v24173 = v25363.length;
          v21733 = v24173 > 3;
        }
        var v17144 = v21733;
        if (v17144) {
          var v24174 = comment$$2.value;
          var v21734 = JAM.call(v24174.substring, v24174, [0, 3], JAM.policy.p1);
          v17144 = v21734 == "///";
        }
        var v9479 = v17144;
        if (v9479) {
          var v9476 = comment$$2.value;
          var dependencyPath = JAM.call(TypeScript$$14.getAdditionalDependencyPath, TypeScript$$14, [v9476]);
          if (dependencyPath) {
            var v9477 = this.amdDependencies;
            JAM.call(v9477.push, v9477, [dependencyPath]);
          }
          var v17145 = comment$$2.value;
          var v9478 = JAM.call(TypeScript$$14.getImplicitImport, TypeScript$$14, [v17145]);
          if (v9478) {
            this.hasTopLevelImportOrExport = true;
          }
        }
        return c$$7;
      } else {
        return null;
      }
      return;
    }
    function v540() {
      var v9480 = this.staticsLists;
      var v21735 = this.staticsLists;
      var v17146 = v21735.length;
      var v9481 = v17146 - 1;
      return v9480[v9481];
    }
    function v539() {
      var v9482 = this.scopeLists;
      var v21736 = this.scopeLists;
      var v17147 = v21736.length;
      var v9483 = v17147 - 1;
      return v9482[v9483];
    }
    function v538() {
      var v9484 = this.varLists;
      var v21737 = this.varLists;
      var v17148 = v21737.length;
      var v9485 = v17148 - 1;
      return v9484[v9485];
    }
    function v537() {
      var v9486 = this.staticsLists;
      v9486.pop();
      var v9487 = this.varLists;
      v9487.pop();
      var v9488 = this.scopeLists;
      v9488.pop();
      return;
    }
    function v536() {
      var v9489 = this.staticsLists;
      var v17149 = TypeScript$$14.ASTList;
      var v9490 = new v17149;
      JAM.call(v9489.push, v9489, [v9490]);
      var v9491 = this.varLists;
      var v17150 = TypeScript$$14.ASTList;
      var v9492 = new v17150;
      JAM.call(v9491.push, v9491, [v9492]);
      var v9493 = this.scopeLists;
      var v17151 = TypeScript$$14.ASTList;
      var v9494 = new v17151;
      JAM.call(v9493.push, v9493, [v9494]);
      return;
    }
    function v535(tokenId$$43, errorRecoverySet$$2, errorText$$1) {
      var v17152 = typeof errorText$$1;
      var v9495 = v17152 === "undefined";
      if (v9495) {
        errorText$$1 = null;
      }
      var v21738 = this.currentToken;
      var v17153 = v21738.tokenId;
      var v9499 = v17153 != tokenId$$43;
      if (v9499) {
        var v9496;
        var v17155 = errorText$$1 == null;
        if (v17155) {
          var v25364 = TypeScript$$14.tokenTable;
          var v24175 = v25364[tokenId$$43];
          var v21739 = v24175.text;
          var v17154 = "Expected '" + v21739;
          v9496 = v17154 + "'";
        } else {
          v9496 = errorText$$1;
        }
        errorText$$1 = v9496;
        JAM.call(this.reportParseError, this, [errorText$$1]);
        var v9497 = this.errorRecovery;
        if (v9497) {
          JAM.call(this.skip, this, [errorRecoverySet$$2]);
        }
      } else {
        var v9498 = this.scanner;
        var v26980 = v9498.scan();
        this.currentToken = v26980;
      }
      return;
    }
    function v534(errorRecoverySet$$1) {
      var v21740 = TypeScript$$14.ErrorRecoverySet;
      var v17156 = v21740.EOF;
      errorRecoverySet$$1 = errorRecoverySet$$1 | v17156;
      var v9500 = TypeScript$$14.ErrorRecoverySet;
      var ersTok = v9500.None;
      var v17157 = this.currentToken;
      var v9501 = v17157.tokenId;
      var tokenInfo = JAM.call(TypeScript$$14.lookupToken, TypeScript$$14, [v9501]);
      var v9502 = tokenInfo != undefined;
      if (v9502) {
        ersTok = tokenInfo.ers;
      }
      var pendingRightCurlies = 0;
      var v21741 = ersTok & errorRecoverySet$$1;
      var v24176 = TypeScript$$14.ErrorRecoverySet;
      var v21742 = v24176.None;
      var v17158 = v21741 == v21742;
      var v21744 = !v17158;
      if (v21744) {
        var v25365 = this.currentToken;
        var v24177 = v25365.tokenId;
        var v25366 = TypeScript$$14.TokenID;
        var v24178 = v25366.CloseBrace;
        var v21743 = v24177 == v24178;
        if (v21743) {
          v21743 = pendingRightCurlies > 0;
        }
        v17158 = v21743;
      }
      var v9509 = v17158;
      for (;v9509;) {
        var v21745 = this.currentToken;
        var v17159 = v21745.tokenId;
        var v21746 = TypeScript$$14.TokenID;
        var v17160 = v21746.OpenBrace;
        var v9504 = v17159 == v17160;
        if (v9504) {
          pendingRightCurlies++;
        } else {
          var v21747 = this.currentToken;
          var v17161 = v21747.tokenId;
          var v21748 = TypeScript$$14.TokenID;
          var v17162 = v21748.CloseBrace;
          var v9503 = v17161 == v17162;
          if (v9503) {
            pendingRightCurlies--;
          }
        }
        var v9505 = this.scanner;
        var v26981 = v9505.scan();
        this.currentToken = v26981;
        var v9506 = TypeScript$$14.ErrorRecoverySet;
        ersTok = v9506.None;
        var v17163 = this.currentToken;
        var v9507 = v17163.tokenId;
        tokenInfo = JAM.call(TypeScript$$14.lookupToken, TypeScript$$14, [v9507]);
        var v9508 = tokenInfo != undefined;
        if (v9508) {
          ersTok = tokenInfo.ers;
        }
        var v21749 = ersTok & errorRecoverySet$$1;
        var v24179 = TypeScript$$14.ErrorRecoverySet;
        var v21750 = v24179.None;
        var v17164 = v21749 == v21750;
        var v21752 = !v17164;
        if (v21752) {
          var v25367 = this.currentToken;
          var v24180 = v25367.tokenId;
          var v25368 = TypeScript$$14.TokenID;
          var v24181 = v25368.CloseBrace;
          var v21751 = v24180 == v24181;
          if (v21751) {
            v21751 = pendingRightCurlies > 0;
          }
          v17164 = v21751;
        }
        v9509 = v17164;
      }
      return;
    }
    function v533(tokenId$$42, errorRecoverySet) {
      var errorText;
      var v17165 = typeof errorText;
      var v9510 = v17165 === "undefined";
      if (v9510) {
        errorText = null;
      }
      var v9511 = this.scanner;
      var v26982 = v9511.scan();
      this.currentToken = v26982;
      JAM.call(this.checkCurrentToken, this, [tokenId$$42, errorRecoverySet, errorText], JAM.policy.p1);
      return;
    }
    function v532(message$$14, startPos, pos$$1) {
      var v17166 = typeof startPos;
      var v9513 = v17166 === "undefined";
      if (v9513) {
        var v9512 = this.scanner;
        startPos = v9512.startPos;
      }
      var v17167 = typeof pos$$1;
      var v9515 = v17167 === "undefined";
      if (v9515) {
        var v9514 = this.scanner;
        pos$$1 = v9514.pos;
      }
      var v9516 = pos$$1 - startPos;
      var len$$15 = JAM.call(Math.max, Math, [1, v9516], JAM.policy.p1);
      var v9523 = this.errorCallback;
      if (v9523) {
        var v9517 = this.currentUnitIndex;
        JAM.call(this.errorCallback, this, [startPos, len$$15, message$$14, v9517], JAM.policy.p1);
      } else {
        var v9522 = this.errorRecovery;
        if (v9522) {
          var lineCol$$3 = {line:-1, col:-1};
          JAM.call(this.getSourceLineCol, this, [lineCol$$3, startPos], JAM.policy.p1);
          var v9520 = this.outfile;
          if (v9520) {
            var v9518 = this.outfile;
            var v26315 = this.fname;
            var v26194 = "// " + v26315;
            var v25936 = v26194 + " (";
            var v25937 = lineCol$$3.line;
            var v25369 = v25936 + v25937;
            var v24182 = v25369 + ",";
            var v24183 = lineCol$$3.col;
            var v21753 = v24182 + v24183;
            var v17168 = v21753 + "): ";
            var v9519 = v17168 + message$$14;
            JAM.call(v9518.WriteLine, v9518, [v9519]);
          }
        } else {
          var v26195 = this.fname;
          var v25938 = v26195 + " (";
          var v26196 = this.scanner;
          var v25939 = v26196.line;
          var v25370 = v25938 + v25939;
          var v24184 = v25370 + ",";
          var v25371 = this.scanner;
          var v24185 = v25371.col;
          var v21754 = v24184 + v24185;
          var v17169 = v21754 + "): ";
          var v9521 = v17169 + message$$14;
          throw new SyntaxError(v9521);
        }
      }
      return;
    }
    function v531(message$$13) {
      var v9524 = "STYLE: " + message$$13;
      JAM.call(this.reportParseError, this, [v9524]);
      return;
    }
    function v530(text$$13, hasEscapeSequence$$2, minChar$$4) {
      var v9525 = TypeScript$$14.Identifier;
      var id$$9 = JAM.new(v9525, [text$$13, hasEscapeSequence$$2]);
      id$$9.minChar = minChar$$4;
      return id$$9;
    }
    function v529(lineCol$$2, minChar$$3) {
      var v17170 = this.scanner;
      var v9526 = v17170.lineMap;
      JAM.call(TypeScript$$14.getSourceLineColFromMap, TypeScript$$14, [lineCol$$2, minChar$$3, v9526], JAM.policy.p1);
      return;
    }
    function v528(outfile$$3) {
      this.outfile = outfile$$3;
      this.errorRecovery = true;
      return;
    }
    function v527(jump) {
      var v9527 = TypeScript$$14.AST;
      var v9528 = jump.target;
      var resolvedTarget = JAM.call(v9527.getResolvedIdentifierName, v9527, [v9528]);
      var v9529 = this.statementInfoStack;
      var len$$14 = v9529.length;
      var i$$48 = len$$14 - 1;
      var v9542 = i$$48 >= 0;
      for (;v9542;) {
        var v9530 = this.statementInfoStack;
        var info$$1 = v9530[i$$48];
        var v9541 = jump.target;
        if (v9541) {
          var v17171 = info$$1.labels;
          if (v17171) {
            var v25372 = info$$1.labels;
            var v24186 = v25372.members;
            var v21755 = v24186.length;
            v17171 = v21755 > 0;
          }
          var v9536 = v17171;
          if (v9536) {
            var j$$5 = 0;
            var v17172 = info$$1.labels;
            var v9531 = v17172.members;
            var labLen = v9531.length;
            var v9535 = j$$5 < labLen;
            for (;v9535;) {
              var v17173 = info$$1.labels;
              var v9532 = v17173.members;
              var label = v9532[j$$5];
              var v21756 = label.id;
              var v17174 = v21756.text;
              var v9534 = v17174 == resolvedTarget;
              if (v9534) {
                var v9533 = info$$1.stmt;
                JAM.call(jump.setResolvedTarget, jump, [this, v9533], JAM.policy.p1);
                return;
              }
              j$$5++;
              v9535 = j$$5 < labLen;
            }
          }
        } else {
          var v17175 = info$$1.stmt;
          var v9540 = v17175.isLoop();
          if (v9540) {
            var v9537 = info$$1.stmt;
            JAM.call(jump.setResolvedTarget, jump, [this, v9537], JAM.policy.p1);
            return;
          } else {
            var v24187 = info$$1.stmt;
            var v21757 = v24187.nodeType;
            var v24188 = TypeScript$$14.NodeType;
            var v21758 = v24188.Switch;
            var v17176 = v21757 == v21758;
            if (v17176) {
              var v21759 = jump.nodeType;
              var v24189 = TypeScript$$14.NodeType;
              var v21760 = v24189.Break;
              v17176 = v21759 == v21760;
            }
            var v9539 = v17176;
            if (v9539) {
              var v9538 = info$$1.stmt;
              JAM.call(jump.setResolvedTarget, jump, [this, v9538], JAM.policy.p1);
              return;
            }
          }
        }
        i$$48--;
        v9542 = i$$48 >= 0;
      }
      var v9545 = jump.target;
      if (v9545) {
        var v17177 = jump.target;
        var v9543 = "could not find enclosing statement with label " + v17177;
        JAM.call(this.reportParseError, this, [v9543]);
      } else {
        var v17178 = jump.nodeType;
        var v21761 = TypeScript$$14.NodeType;
        var v17179 = v21761.Break;
        var v9544 = v17178 == v17179;
        if (v9544) {
          JAM.call(this.reportParseError, this, ["break statement requires enclosing loop or switch"]);
        } else {
          JAM.call(this.reportParseError, this, ["continue statement requires enclosing loop"]);
        }
      }
      return;
    }
    function v526() {
      var v9546 = this.statementInfoStack;
      v9546.pop();
      return;
    }
    function v525(stmt$$3, labels$$1) {
      var info = {stmt:stmt$$3, labels:labels$$1};
      var v9547 = this.statementInfoStack;
      JAM.call(v9547.push, v9547, [info]);
      return;
    }
    function v524() {
      var v17180 = this.statementInfoStack;
      var v9548 = v17180.length;
      var j$$4 = v9548 - 1;
      var v9550 = j$$4 >= 0;
      for (;v9550;) {
        var v24190 = this.statementInfoStack;
        var v21762 = v24190[j$$4];
        var v17181 = v21762.stmt;
        var v9549 = v17181.isLoop();
        if (v9549) {
          return true;
        }
        j$$4--;
        v9550 = j$$4 >= 0;
      }
      return false;
    }
    function v523() {
      var v26983 = new Array;
      this.statementInfoStack = v26983;
      return;
    }
    function Parser$$1() {
      this.varLists = [];
      this.scopeLists = [];
      this.staticsLists = [];
      var v9551 = TypeScript$$14.Scanner;
      var v26984 = new v9551;
      this.scanner = v26984;
      this.currentToken = null;
      this.needTerminator = false;
      this.inFunction = false;
      this.inInterfaceDecl = false;
      this.currentClassDecl = null;
      this.inFncDecl = false;
      var v9552 = TypeScript$$14.Identifier;
      var v26985 = JAM.new(v9552, ["_anonymous"]);
      this.anonId = v26985;
      this.style_requireSemi = false;
      this.style_funcInLoop = true;
      this.incremental = false;
      this.errorRecovery = false;
      this.outfile = undefined;
      this.errorCallback = null;
      this.state = ParseState.StartStatementList;
      this.ambientModule = false;
      this.ambientClass = false;
      this.topLevel = true;
      this.allowImportDeclaration = true;
      this.currentUnitIndex = -1;
      this.prevIDTok = null;
      var v26986 = new Array;
      this.statementInfoStack = v26986;
      this.hasTopLevelImportOrExport = false;
      this.strictMode = false;
      this.nestingLevel = 0;
      this.prevExpr = null;
      this.currentClassDefinition = null;
      this.parsingClassConstructorDefinition = false;
      this.parsingDeclareFile = false;
      this.amdDependencies = [];
      this.inferPropertiesFromThisAssignment = false;
      this.requiresExtendsBlock = false;
      this.fname = "";
      return;
    }
    var v9553 = Parser$$1.prototype;
    v9553.resetStmtStack = v523;
    var v9554 = Parser$$1.prototype;
    v9554.inLoop = v524;
    var v9555 = Parser$$1.prototype;
    v9555.pushStmt = v525;
    var v9556 = Parser$$1.prototype;
    v9556.popStmt = v526;
    var v9557 = Parser$$1.prototype;
    v9557.resolveJumpTarget = v527;
    var v9558 = Parser$$1.prototype;
    v9558.setErrorRecovery = v528;
    var v9559 = Parser$$1.prototype;
    v9559.getSourceLineCol = v529;
    var v9560 = Parser$$1.prototype;
    v9560.createRef = v530;
    var v9561 = Parser$$1.prototype;
    v9561.reportParseStyleError = v531;
    var v9562 = Parser$$1.prototype;
    v9562.reportParseError = v532;
    var v9563 = Parser$$1.prototype;
    v9563.checkNextToken = v533;
    var v9564 = Parser$$1.prototype;
    v9564.skip = v534;
    var v9565 = Parser$$1.prototype;
    v9565.checkCurrentToken = v535;
    var v9566 = Parser$$1.prototype;
    v9566.pushDeclLists = v536;
    var v9567 = Parser$$1.prototype;
    v9567.popDeclLists = v537;
    var v9568 = Parser$$1.prototype;
    v9568.topVarList = v538;
    var v9569 = Parser$$1.prototype;
    v9569.topScopeList = v539;
    var v9570 = Parser$$1.prototype;
    v9570.topStaticsList = v540;
    var v9571 = Parser$$1.prototype;
    v9571.parseComment = v541;
    var v9572 = Parser$$1.prototype;
    v9572.parseCommentsInner = v542;
    var v9573 = Parser$$1.prototype;
    v9573.parseComments = v543;
    var v9574 = Parser$$1.prototype;
    v9574.parseCommentsForLine = v544;
    var v9575 = Parser$$1.prototype;
    v9575.combineComments = v545;
    var v9576 = Parser$$1.prototype;
    v9576.parseEnumDecl = v546;
    var v9577 = Parser$$1.prototype;
    v9577.parseDottedName = v547;
    var v9578 = Parser$$1.prototype;
    v9578.isValidImportPath = v548;
    var v9579 = Parser$$1.prototype;
    v9579.parseImportDeclaration = v549;
    var v9580 = Parser$$1.prototype;
    v9580.parseModuleDecl = v550;
    var v9581 = Parser$$1.prototype;
    v9581.parseTypeReferenceTail = v551;
    var v9582 = Parser$$1.prototype;
    v9582.parseNamedType = v552;
    var v9583 = Parser$$1.prototype;
    v9583.parseTypeReference = v553;
    var v9584 = Parser$$1.prototype;
    v9584.parseObjectType = v554;
    var v9585 = Parser$$1.prototype;
    v9585.parseFunctionBlock = v555;
    var v9586 = Parser$$1.prototype;
    v9586.parseFunctionStatements = v556;
    var v9587 = Parser$$1.prototype;
    v9587.transformAnonymousArgsIntoFormals = v557;
    var v9588 = Parser$$1.prototype;
    v9588.parseFormalParameterList = v558;
    var v9589 = Parser$$1.prototype;
    v9589.parseFncDecl = v559;
    var v9590 = Parser$$1.prototype;
    v9590.convertToTypeReference = v560;
    var v9591 = Parser$$1.prototype;
    v9591.parseArgList = v561;
    var v9592 = Parser$$1.prototype;
    v9592.parseBaseList = v562;
    var v9593 = Parser$$1.prototype;
    v9593.parseClassDecl = v563;
    var v9594 = Parser$$1.prototype;
    v9594.parseClassElements = v564;
    var v9595 = Parser$$1.prototype;
    v9595.parseClassConstructorDeclaration = v565;
    var v9596 = Parser$$1.prototype;
    v9596.parseClassMemberVariableDeclaration = v566;
    var v9597 = Parser$$1.prototype;
    v9597.parseClassMemberFunctionDeclaration = v567;
    var v9598 = Parser$$1.prototype;
    v9598.parseTypeMember = v568;
    var v9599 = Parser$$1.prototype;
    v9599.parseTypeMemberList = v569;
    var v9600 = Parser$$1.prototype;
    v9600.parseInterfaceDecl = v570;
    var v9601 = Parser$$1.prototype;
    v9601.makeVarDecl = v571;
    var v9602 = Parser$$1.prototype;
    v9602.parsePropertyDeclaration = v572;
    var v9603 = Parser$$1.prototype;
    v9603.parseVariableDeclaration = v573;
    var v9604 = Parser$$1.prototype;
    v9604.parseMemberList = v574;
    var v9605 = Parser$$1.prototype;
    v9605.parseArrayList = v575;
    var v9606 = Parser$$1.prototype;
    v9606.parseArrayLiteral = v576;
    var v9607 = Parser$$1.prototype;
    v9607.parseTerm = v577;
    var v9608 = Parser$$1.prototype;
    v9608.parseLambdaExpr = v578;
    var v9609 = Parser$$1.prototype;
    v9609.parseExpr = v579;
    var v9610 = Parser$$1.prototype;
    v9610.parsePostfixOperators = v580;
    var v9611 = Parser$$1.prototype;
    v9611.parseTry = v581;
    var v9612 = Parser$$1.prototype;
    v9612.parseCatch = v582;
    var v9613 = Parser$$1.prototype;
    v9613.parseFinally = v583;
    var v9614 = Parser$$1.prototype;
    v9614.parseTryCatchFinally = v584;
    var v9615 = Parser$$1.prototype;
    v9615.parseStatement = v585;
    var v9616 = Parser$$1.prototype;
    v9616.okAmbientModuleMember = v586;
    var v9617 = Parser$$1.prototype;
    v9617.parseStatementList = v587;
    var v9618 = Parser$$1.prototype;
    v9618.quickParse = v588;
    var v9619 = Parser$$1.prototype;
    v9619.parse = v590;
    return Parser$$1;
  }
  function v522() {
    function QuickParseResult$$1(Script$$2, endLexState) {
      this.Script = Script$$2;
      this.endLexState = endLexState;
      return;
    }
    return QuickParseResult$$1;
  }
  function v521(ParseState$$1) {
    ParseState$$1._map = [];
    var v9620 = ParseState$$1._map;
    v9620[0] = "None";
    ParseState$$1.None = 0;
    var v9621 = ParseState$$1._map;
    v9621[1] = "StartScript";
    ParseState$$1.StartScript = 1;
    var v9622 = ParseState$$1._map;
    v9622[2] = "StartStatementList";
    ParseState$$1.StartStatementList = 2;
    var v9623 = ParseState$$1._map;
    v9623[3] = "StartStatement";
    ParseState$$1.StartStatement = 3;
    var v9624 = ParseState$$1._map;
    v9624[4] = "StartFncDecl";
    ParseState$$1.StartFncDecl = 4;
    var v9625 = ParseState$$1._map;
    v9625[5] = "FncDeclName";
    ParseState$$1.FncDeclName = 5;
    var v9626 = ParseState$$1._map;
    v9626[6] = "FncDeclArgs";
    ParseState$$1.FncDeclArgs = 6;
    var v9627 = ParseState$$1._map;
    v9627[7] = "FncDeclReturnType";
    ParseState$$1.FncDeclReturnType = 7;
    var v9628 = ParseState$$1._map;
    v9628[8] = "ForInit";
    ParseState$$1.ForInit = 8;
    var v9629 = ParseState$$1._map;
    v9629[9] = "ForInitAfterVar";
    ParseState$$1.ForInitAfterVar = 9;
    var v9630 = ParseState$$1._map;
    v9630[10] = "ForCondStart";
    ParseState$$1.ForCondStart = 10;
    var v9631 = ParseState$$1._map;
    v9631[11] = "EndStmtList";
    ParseState$$1.EndStmtList = 11;
    var v9632 = ParseState$$1._map;
    v9632[12] = "EndScript";
    ParseState$$1.EndScript = 12;
    return;
  }
  function v520(TypeContext$$1) {
    TypeContext$$1._map = [];
    TypeContext$$1.NoTypes = 0;
    TypeContext$$1.ArraySuffix = 1;
    TypeContext$$1.Primitive = 2;
    TypeContext$$1.Named = 4;
    var v9633 = TypeContext$$1.Primitive;
    var v9634 = TypeContext$$1.Named;
    TypeContext$$1.AllSimpleTypes = v9633 | v9634;
    var v17182 = TypeContext$$1.Primitive;
    var v17183 = TypeContext$$1.Named;
    var v9635 = v17182 | v17183;
    var v9636 = TypeContext$$1.ArraySuffix;
    TypeContext$$1.AllTypes = v9635 | v9636;
    return;
  }
  function quickParse(logger$$1, scopeStartAST, sourceText, minChar$$2, limChar$$2, errorCapture) {
    var fragment = JAM.call(sourceText.getText, sourceText, [minChar$$2, limChar$$2], JAM.policy.p1);
    var v25940 = "Quick parse range (" + minChar$$2;
    var v25373 = v25940 + ",";
    var v24191 = v25373 + limChar$$2;
    var v21763 = v24191 + '): "';
    var v21764 = JAM.call(TypeScript$$14.stringToLiteral, TypeScript$$14, [fragment, 100], JAM.policy.p1);
    var v17184 = v21763 + v21764;
    var v9637 = v17184 + '"';
    JAM.call(logger$$1.log, logger$$1, [v9637]);
    var quickParser = new Parser;
    JAM.call(quickParser.setErrorRecovery, quickParser, [null]);
    quickParser.errorCallback = errorCapture;
    var v9638 = TypeScript$$14.ClassDeclaration;
    var quickClassDecl = JAM.new(v9638, [null, null, null, null]);
    quickParser.currentClassDecl = quickClassDecl;
    var v17185 = TypeScript$$14.StringSourceText;
    var v9639 = JAM.new(v17185, [fragment]);
    var result$$7 = JAM.call(quickParser.quickParse, quickParser, [v9639, "", 0], JAM.policy.p1);
    return result$$7;
  }
  var v17186 = TypeScript$$14.TypeContext;
  var v21765 = !v17186;
  if (v21765) {
    v17186 = TypeScript$$14.TypeContext = {};
  }
  var v9640 = v17186;
  v520(v9640);
  var TypeContext = TypeScript$$14.TypeContext;
  var v17187 = TypeScript$$14.ParseState;
  var v21766 = !v17187;
  if (v21766) {
    v17187 = TypeScript$$14.ParseState = {};
  }
  var v9641 = v17187;
  v521(v9641);
  var ParseState = TypeScript$$14.ParseState;
  var QuickParseResult = v522();
  TypeScript$$14.QuickParseResult = QuickParseResult;
  var Parser = v591();
  TypeScript$$14.Parser = Parser;
  TypeScript$$14.quickParse = quickParse;
  return;
}
function v519(TypeScript$$13) {
  function v518() {
    function v517(ast$$36, op$$1, type$$29) {
      var v24192 = "Operator '" + op$$1;
      var v21767 = v24192 + "' cannot be applied to type '";
      var v21768 = type$$29.getTypeName();
      var v17188 = v21767 + v21768;
      var v9642 = v17188 + "'";
      JAM.call(this.reportError, this, [ast$$36, v9642], JAM.policy.p1);
      return;
    }
    function v516(ast$$35) {
      JAM.call(this.simpleError, this, [ast$$35, "Expected var, class, interface, or module"], JAM.policy.p1);
      return;
    }
    function v515(ast$$34, t1, t2, op, scope$$8, comparisonInfo) {
      var v9644 = !t1;
      if (v9644) {
        var v9643 = this.checker;
        t1 = v9643.anyType;
      }
      var v9646 = !t2;
      if (v9646) {
        var v9645 = this.checker;
        t2 = v9645.anyType;
      }
      var v9647;
      if (comparisonInfo) {
        v9647 = comparisonInfo.message;
      } else {
        v9647 = "";
      }
      var reason = v9647;
      if (op) {
        var v26197 = "Operator '" + op;
        var v25941 = v26197 + "' cannot be applied to types '";
        var v25942 = JAM.call(t1.getScopedTypeName, t1, [scope$$8]);
        var v25374 = v25941 + v25942;
        var v24193 = v25374 + "' and '";
        var v24194 = JAM.call(t2.getScopedTypeName, t2, [scope$$8]);
        var v21769 = v24193 + v24194;
        var v17189 = v21769 + "'";
        var v21770;
        if (reason) {
          v21770 = ": " + reason;
        } else {
          v21770 = "";
        }
        var v17190 = v21770;
        var v9648 = v17189 + v17190;
        JAM.call(this.reportError, this, [ast$$34, v9648], JAM.policy.p1);
      } else {
        var v25943 = JAM.call(t1.getScopedTypeName, t1, [scope$$8]);
        var v25375 = "Cannot convert '" + v25943;
        var v24195 = v25375 + "' to '";
        var v24196 = JAM.call(t2.getScopedTypeName, t2, [scope$$8]);
        var v21771 = v24195 + v24196;
        var v17191 = v21771 + "'";
        var v21772;
        if (reason) {
          v21772 = ": " + reason;
        } else {
          v21772 = "";
        }
        var v17192 = v21772;
        var v9649 = v17191 + v17192;
        JAM.call(this.reportError, this, [ast$$34, v9649], JAM.policy.p1);
      }
      return;
    }
    function v514(ast$$33, scope$$7) {
      var v17193 = ast$$33.operand1;
      var v9650 = v17193.type;
      var targetType$$2 = JAM.call(v9650.getScopedTypeName, v9650, [scope$$7]);
      var v17194 = ast$$33.operand2;
      var v9651 = v17194.type;
      var indexType = JAM.call(v9651.getScopedTypeName, v9651, [scope$$7]);
      var v24197 = "Value of type '" + targetType$$2;
      var v21773 = v24197 + "' is not indexable by type '";
      var v17195 = v21773 + indexType;
      var v9652 = v17195 + "'";
      JAM.call(this.simpleError, this, [ast$$33, v9652], JAM.policy.p1);
      return;
    }
    function v513(ast$$32, nodeType$$13, scope$$6) {
      var v9653 = ast$$32.target;
      var targetType$$1 = v9653.type;
      var typeName = JAM.call(targetType$$1.getScopedTypeName, targetType$$1, [scope$$6]);
      var v17196 = targetType$$1.construct;
      if (v17196) {
        var v24198 = TypeScript$$13.NodeType;
        var v21774 = v24198.Call;
        v17196 = nodeType$$13 == v21774;
      }
      var v9657 = v17196;
      if (v9657) {
        var v17197 = "Value of type '" + typeName;
        var v9654 = v17197 + "' is not callable.  Did you mean to include 'new'?";
        JAM.call(this.reportError, this, [ast$$32, v9654], JAM.policy.p1);
      } else {
        var v9655;
        var v24199 = TypeScript$$13.NodeType;
        var v21775 = v24199.Call;
        var v17198 = nodeType$$13 == v21775;
        if (v17198) {
          v9655 = "callable";
        } else {
          v9655 = "newable";
        }
        var catString = v9655;
        var v21776 = "Value of type '" + typeName;
        var v17199 = v21776 + "' is not ";
        var v9656 = v17199 + catString;
        JAM.call(this.reportError, this, [ast$$32, v9656], JAM.policy.p1);
      }
      return;
    }
    function v512(ast$$31) {
      JAM.call(this.simpleError, this, [ast$$31, "The left-hand side of an assignment expression must be a variable, property or indexer"], JAM.policy.p1);
      return;
    }
    function v511(ast$$30) {
      JAM.call(this.simpleError, this, [ast$$30, "Keyword 'super' can only be used inside a class instance method"], JAM.policy.p1);
      return;
    }
    function v510(sym$$6, msg$$3) {
      JAM.call(this.reportErrorFromSym, this, [sym$$6, msg$$3], JAM.policy.p1);
      return;
    }
    function v509(ast$$29, msg$$2) {
      JAM.call(this.reportError, this, [ast$$29, msg$$2], JAM.policy.p1);
      return;
    }
    function v508(ast$$28, msg$$1) {
      var bkThrow = this.pushToErrorSink;
      this.pushToErrorSink = false;
      var v9658 = "STYLE: " + msg$$1;
      JAM.call(this.reportError, this, [ast$$28, v9658], JAM.policy.p1);
      this.pushToErrorSink = bkThrow;
      return;
    }
    function v507(ast$$27, name$$43) {
      var v17200 = "The name '" + name$$43;
      var v9659 = v17200 + "' does not refer to a value";
      JAM.call(this.reportError, this, [ast$$27, v9659], JAM.policy.p1);
      return;
    }
    function v506(ast$$26, name$$42) {
      var v17201 = "The name '" + name$$42;
      var v9660 = v17201 + "' does not exist in the current scope";
      JAM.call(this.reportError, this, [ast$$26, v9660], JAM.policy.p1);
      return;
    }
    function v505(ast$$25, text$$12, symbol$$5) {
      var defLineCol = {line:-1, col:-1};
      var v9661 = this.parser;
      var v9662 = symbol$$5.location;
      JAM.call(v9661.getSourceLineCol, v9661, [defLineCol, v9662], JAM.policy.p1);
      var v25944 = "symbol " + text$$12;
      var v25376 = v25944 + " defined at (";
      var v25377 = defLineCol.line;
      var v24200 = v25376 + v25377;
      var v21777 = v24200 + ",";
      var v21778 = defLineCol.col;
      var v17202 = v21777 + v21778;
      var v9663 = v17202 + ")";
      JAM.call(this.reportError, this, [ast$$25, v9663], JAM.policy.p1);
      return;
    }
    function v504(ast$$24, name$$41) {
      var v17203 = "Duplicate identifier '" + name$$41;
      var v9664 = v17203 + "'";
      JAM.call(this.reportError, this, [ast$$24, v9664], JAM.policy.p1);
      return;
    }
    function v503(message$$12) {
      var ast$$23 = null;
      JAM.call(this.reportError, this, [ast$$23, message$$12], JAM.policy.p1);
      throw Error("EmitError");
    }
    function v502(symbol$$4, message$$11) {
      var v9665 = this.pushToErrorSink;
      if (v9665) {
        JAM.call(this.captureError, this, [message$$11]);
        return;
      }
      this.hasErrors = true;
      var v21779 = this.parser;
      var v17204 = v21779.errorRecovery;
      if (v17204) {
        var v21780 = this.parser;
        v17204 = v21780.errorCallback;
      }
      var v9671 = v17204;
      if (v9671) {
        var v9666 = this.parser;
        var v9667 = symbol$$4.location;
        var v9668 = symbol$$4.length;
        var v21781 = this.checker;
        var v17205 = v21781.locationInfo;
        var v9669 = v17205.unitIndex;
        JAM.call(v9666.errorCallback, v9666, [v9667, v9668, message$$11, v9669], JAM.policy.p1);
      } else {
        JAM.call(this.writePrefixFromSym, this, [symbol$$4]);
        var v9670 = this.outfile;
        JAM.call(v9670.WriteLine, v9670, [message$$11]);
      }
      return;
    }
    function v501(ast$$22, message$$10) {
      var v9672 = this.pushToErrorSink;
      if (v9672) {
        JAM.call(this.captureError, this, [message$$10]);
        return;
      }
      this.hasErrors = true;
      var v21782 = ast$$22;
      if (v21782) {
        var v24201 = this.parser;
        v21782 = v24201.errorRecovery;
      }
      var v17206 = v21782;
      if (v17206) {
        var v21783 = this.parser;
        v17206 = v21783.errorCallback;
      }
      var v9679 = v17206;
      if (v9679) {
        var v9673 = ast$$22.limChar;
        var v9674 = ast$$22.minChar;
        var len$$13 = v9673 - v9674;
        var v9675 = this.parser;
        var v9676 = ast$$22.minChar;
        var v21784 = this.checker;
        var v17207 = v21784.locationInfo;
        var v9677 = v17207.unitIndex;
        JAM.call(v9675.errorCallback, v9675, [v9676, len$$13, message$$10, v9677], JAM.policy.p1);
      } else {
        JAM.call(this.writePrefix, this, [ast$$22]);
        var v9678 = this.outfile;
        JAM.call(v9678.WriteLine, v9678, [message$$10]);
      }
      return;
    }
    function v500(ast$$21) {
      if (ast$$21) {
        var v17208 = ast$$21.flags;
        var v21785 = TypeScript$$13.ASTFlags;
        var v17209 = v21785.Error;
        ast$$21.flags = v17208 | v17209;
        var v21786 = this.checker;
        var v17210 = v21786.locationInfo;
        var v9683 = v17210.lineMap;
        if (v9683) {
          var v9680 = this.lineCol;
          var v9681 = ast$$21.minChar;
          var v21787 = this.checker;
          var v17211 = v21787.locationInfo;
          var v9682 = v17211.lineMap;
          JAM.call(TypeScript$$13.getSourceLineColFromMap, TypeScript$$13, [v9680, v9681, v9682], JAM.policy.p1);
        }
      }
      return;
    }
    function v499(symbol$$3) {
      var v17212 = symbol$$3;
      if (v17212) {
        var v24202 = this.checker;
        var v21788 = v24202.locationInfo;
        v17212 = v21788.lineMap;
      }
      var v9689 = v17212;
      if (v9689) {
        var v9684 = this.lineCol;
        var v9685 = symbol$$3.location;
        var v21789 = this.checker;
        var v17213 = v21789.locationInfo;
        var v9686 = v17213.lineMap;
        JAM.call(TypeScript$$13.getSourceLineColFromMap, TypeScript$$13, [v9684, v9685, v9686], JAM.policy.p1);
      } else {
        var v9687 = this.lineCol;
        v9687.line = -1;
        var v9688 = this.lineCol;
        v9688.col = -1;
      }
      this.emitPrefix();
      return;
    }
    function v498(ast$$20) {
      if (ast$$20) {
        JAM.call(this.setError, this, [ast$$20]);
      } else {
        var v9690 = this.lineCol;
        v9690.line = 0;
        var v9691 = this.lineCol;
        v9691.col = 0;
      }
      this.emitPrefix();
      return;
    }
    function v497() {
      var v9693 = this.emitAsComments;
      if (v9693) {
        var v9692 = this.outfile;
        JAM.call(v9692.Write, v9692, ["// "]);
      }
      var v9694 = this.outfile;
      var v26316 = this.checker;
      var v26198 = v26316.locationInfo;
      var v25945 = v26198.filename;
      var v25378 = v25945 + "(";
      var v25946 = this.lineCol;
      var v25379 = v25946.line;
      var v24203 = v25378 + v25379;
      var v21790 = v24203 + ",";
      var v24204 = this.lineCol;
      var v21791 = v24204.col;
      var v17214 = v21790 + v21791;
      var v9695 = v17214 + "): ";
      JAM.call(v9694.Write, v9694, [v9695]);
      return;
    }
    function v496(outerr$$1) {
      this.outfile = outerr$$1;
      this.emitAsComments = false;
      return;
    }
    function v495(emsg) {
      var v9696 = this.errorSink;
      var v17215 = this.errorSink;
      var v9697 = v17215.length;
      JAM.set(v9696, v9697, emsg);
      return;
    }
    function v494() {
      this.errorSink = [];
      return;
    }
    function v493() {
      return this.errorSink;
    }
    function ErrorReporter$$1(outfile$$2) {
      this.outfile = outfile$$2;
      this.parser = null;
      this.checker = null;
      this.lineCol = {line:0, col:0};
      this.emitAsComments = true;
      this.hasErrors = false;
      this.pushToErrorSink = false;
      this.errorSink = [];
      return;
    }
    var v9698 = ErrorReporter$$1.prototype;
    v9698.getCapturedErrors = v493;
    var v9699 = ErrorReporter$$1.prototype;
    v9699.freeCapturedErrors = v494;
    var v9700 = ErrorReporter$$1.prototype;
    v9700.captureError = v495;
    var v9701 = ErrorReporter$$1.prototype;
    v9701.setErrOut = v496;
    var v9702 = ErrorReporter$$1.prototype;
    v9702.emitPrefix = v497;
    var v9703 = ErrorReporter$$1.prototype;
    v9703.writePrefix = v498;
    var v9704 = ErrorReporter$$1.prototype;
    v9704.writePrefixFromSym = v499;
    var v9705 = ErrorReporter$$1.prototype;
    v9705.setError = v500;
    var v9706 = ErrorReporter$$1.prototype;
    v9706.reportError = v501;
    var v9707 = ErrorReporter$$1.prototype;
    v9707.reportErrorFromSym = v502;
    var v9708 = ErrorReporter$$1.prototype;
    v9708.emitterError = v503;
    var v9709 = ErrorReporter$$1.prototype;
    v9709.duplicateIdentifier = v504;
    var v9710 = ErrorReporter$$1.prototype;
    v9710.showRef = v505;
    var v9711 = ErrorReporter$$1.prototype;
    v9711.unresolvedSymbol = v506;
    var v9712 = ErrorReporter$$1.prototype;
    v9712.symbolDoesNotReferToAValue = v507;
    var v9713 = ErrorReporter$$1.prototype;
    v9713.styleError = v508;
    var v9714 = ErrorReporter$$1.prototype;
    v9714.simpleError = v509;
    var v9715 = ErrorReporter$$1.prototype;
    v9715.simpleErrorFromSym = v510;
    var v9716 = ErrorReporter$$1.prototype;
    v9716.invalidSuperReference = v511;
    var v9717 = ErrorReporter$$1.prototype;
    v9717.valueCannotBeModified = v512;
    var v9718 = ErrorReporter$$1.prototype;
    v9718.invalidCall = v513;
    var v9719 = ErrorReporter$$1.prototype;
    v9719.indexLHS = v514;
    var v9720 = ErrorReporter$$1.prototype;
    v9720.incompatibleTypes = v515;
    var v9721 = ErrorReporter$$1.prototype;
    v9721.expectedClassOrInterface = v516;
    var v9722 = ErrorReporter$$1.prototype;
    v9722.unaryOperatorTypeError = v517;
    return ErrorReporter$$1;
  }
  var ErrorReporter = v518();
  TypeScript$$13.ErrorReporter = ErrorReporter;
  return;
}
function v492(TypeScript$$12) {
  function v491() {
    function v490(fileName$$2, useUTF8) {
      try {
        var v17216 = this.emitOptions;
        var v9723 = v17216.ioHost;
        return JAM.call(v9723.createFile, v9723, [fileName$$2, useUTF8], JAM.policy.p1);
      } catch (ex$$2) {
        var v9724 = this.errorReporter;
        var v9725 = ex$$2.message;
        JAM.call(v9724.emitterError, v9724, [v9725]);
      }
      return;
    }
    function shouldCaptureThis(func$$3) {
      var v9726 = func$$3.hasSelfReference();
      var v17217 = !v9726;
      if (v17217) {
        v9726 = func$$3.hasSuperReferenceInFatArrowFunction();
      }
      return v9726;
    }
    function v489() {
      var v21792 = this.thisFnc;
      if (v21792) {
        var v25380 = this.thisFnc;
        var v24205 = v25380.isMethod();
        v21792 = !v24205;
      }
      var v17218 = v21792;
      if (v17218) {
        var v24206 = this.thisFnc;
        var v21793 = v24206.isConstructor;
        v17218 = !v21793;
      }
      var v9727 = v17218;
      if (v9727) {
        JAM.call(this.writeToOutput, this, ["_this"]);
      } else {
        JAM.call(this.writeToOutput, this, ["this"]);
      }
      return;
    }
    function v488(callEx) {
      var v21794 = callEx.target;
      var v17219 = v21794.nodeType;
      var v21795 = TypeScript$$12.NodeType;
      var v17220 = v21795.Dot;
      var v9733 = v17219 == v17220;
      if (v9733) {
        var dotNode = callEx.target;
        var v21796 = dotNode.operand1;
        var v17221 = v21796.nodeType;
        var v21797 = TypeScript$$12.NodeType;
        var v17222 = v21797.Super;
        var v9732 = v17221 == v17222;
        if (v9732) {
          var v17223 = TypeScript$$12.TokenID;
          var v9728 = v17223.OpenParen;
          JAM.call(this.emitJavascript, this, [dotNode, v9728, false], JAM.policy.p1);
          JAM.call(this.writeToOutput, this, [".call("]);
          this.emitThis();
          var v17224 = callEx.arguments;
          if (v17224) {
            var v25381 = callEx.arguments;
            var v24207 = v25381.members;
            var v21798 = v24207.length;
            v17224 = v21798 > 0;
          }
          var v9731 = v17224;
          if (v9731) {
            JAM.call(this.writeToOutput, this, [", "]);
            var v9729 = callEx.arguments;
            var v17225 = TypeScript$$12.TokenID;
            var v9730 = v17225.Comma;
            JAM.call(this.emitJavascriptList, this, [v9729, ", ", v9730, false, false], JAM.policy.p1);
          }
          JAM.call(this.writeToOutput, this, [")"]);
          return true;
        }
      }
      return false;
    }
    function v487() {
      JAM.call(this.writeToOutput, this, ["_super.prototype"]);
      return;
    }
    function v486(reqInherits) {
      var v17226 = this.prologueEmitted;
      var v9736 = !v17226;
      if (v9736) {
        if (reqInherits) {
          this.prologueEmitted = true;
          JAM.call(this.writeLineToOutput, this, ["var __extends = this.__extends || function (d, b) {"]);
          JAM.call(this.writeLineToOutput, this, ["    function __() { this.constructor = d; }"]);
          JAM.call(this.writeLineToOutput, this, ["    __.prototype = b.prototype;"]);
          JAM.call(this.writeLineToOutput, this, ["    d.prototype = new __();"]);
          JAM.call(this.writeLineToOutput, this, ["};"]);
        }
        var v17227 = this.checker;
        var v9735 = v17227.mustCaptureGlobalThis;
        if (v9735) {
          this.prologueEmitted = true;
          var v9734 = this.captureThisStmtString;
          JAM.call(this.writeLineToOutput, this, [v9734]);
        }
      }
      return;
    }
    function v485(classDecl$$3) {
      var v21799 = classDecl$$3.varFlags;
      var v24208 = TypeScript$$12.VarFlags;
      var v21800 = v24208.Ambient;
      var v17228 = JAM.call(TypeScript$$12.hasFlag, TypeScript$$12, [v21799, v21800], JAM.policy.p1);
      var v9786 = !v17228;
      if (v9786) {
        var svClassNode = this.thisClassNode;
        var i$$47 = 0;
        this.thisClassNode = classDecl$$3;
        var v9737 = classDecl$$3.name;
        var className$$3 = v9737.actualText;
        JAM.call(this.emitParensAndCommentsInPlace, this, [classDecl$$3, true], JAM.policy.p1);
        var v9738 = EmitContainer.Class;
        var temp$$13 = JAM.call(this.setContainer, this, [v9738]);
        JAM.call(this.recordSourceMappingStart, this, [classDecl$$3]);
        var v21801 = classDecl$$3.varFlags;
        var v24209 = TypeScript$$12.VarFlags;
        var v21802 = v24209.Exported;
        var v17229 = JAM.call(TypeScript$$12.hasFlag, TypeScript$$12, [v21801, v21802], JAM.policy.p1);
        if (v17229) {
          var v25382 = classDecl$$3.type;
          var v24210 = v25382.symbol;
          var v21803 = v24210.container;
          var v24211 = this.checker;
          var v21804 = v24211.gloMod;
          v17229 = v21803 == v21804;
        }
        var v9741 = v17229;
        if (v9741) {
          var v9739 = "this." + className$$3;
          JAM.call(this.writeToOutput, this, [v9739]);
        } else {
          var v9740 = "var " + className$$3;
          JAM.call(this.writeToOutput, this, [v9740]);
        }
        var v9742 = classDecl$$3.extendsList;
        if (v9742) {
          var v21805 = classDecl$$3.extendsList;
          var v17230 = v21805.members;
          v9742 = v17230.length;
        }
        var hasBaseClass = v9742;
        var baseNameDecl = null;
        var baseName$$2 = null;
        if (hasBaseClass) {
          JAM.call(this.writeLineToOutput, this, [" = (function (_super) {"]);
        } else {
          JAM.call(this.writeLineToOutput, this, [" = (function () {"]);
        }
        JAM.call(this.recordSourceMappingNameStart, this, [className$$3]);
        var v9743 = this.indenter;
        v9743.increaseIndent();
        if (hasBaseClass) {
          var v17231 = classDecl$$3.extendsList;
          var v9744 = v17231.members;
          baseNameDecl = v9744[0];
          var v9745;
          var v21806 = baseNameDecl.nodeType;
          var v24212 = TypeScript$$12.NodeType;
          var v21807 = v24212.Call;
          var v17232 = v21806 == v21807;
          if (v17232) {
            v9745 = baseNameDecl.target;
          } else {
            v9745 = baseNameDecl;
          }
          baseName$$2 = v9745;
          this.emitIndent();
          var v17233 = "__extends(" + className$$3;
          var v9746 = v17233 + ", _super);";
          JAM.call(this.writeLineToOutput, this, [v9746]);
        }
        this.emitIndent();
        var constrDecl = classDecl$$3.constructorDecl;
        if (constrDecl) {
          var v9747 = classDecl$$3.constructorDecl;
          var v17234 = TypeScript$$12.TokenID;
          var v9748 = v17234.OpenParen;
          JAM.call(this.emitJavascript, this, [v9747, v9748, false], JAM.policy.p1);
        } else {
          var wroteProps = 0;
          JAM.call(this.recordSourceMappingStart, this, [classDecl$$3]);
          var v9749 = this.indenter;
          v9749.increaseIndent();
          var v24213 = classDecl$$3.name;
          var v21808 = v24213.actualText;
          var v17235 = "function " + v21808;
          var v9750 = v17235 + "() {";
          JAM.call(this.writeToOutput, this, [v9750]);
          JAM.call(this.recordSourceMappingNameStart, this, ["constructor"]);
          if (hasBaseClass) {
            JAM.call(this.writeLineToOutput, this, [""]);
            this.emitIndent();
            JAM.call(this.writeLineToOutput, this, ["_super.apply(this, arguments);"]);
            wroteProps++;
          }
          var v17236 = classDecl$$3.varFlags;
          var v21809 = TypeScript$$12.VarFlags;
          var v17237 = v21809.MustCaptureThis;
          var v9751 = v17236 & v17237;
          if (v9751) {
            JAM.call(this.writeCaptureThisStatement, this, [classDecl$$3]);
          }
          var v17238 = this.thisClassNode;
          var v9752 = v17238.members;
          var members$$6 = v9752.members;
          i$$47 = 0;
          var v17239 = members$$6.length;
          var v9756 = i$$47 < v17239;
          for (;v9756;) {
            var v21810 = members$$6[i$$47];
            var v17240 = v21810.nodeType;
            var v21811 = TypeScript$$12.NodeType;
            var v17241 = v21811.VarDecl;
            var v9755 = v17240 == v17241;
            if (v9755) {
              var varDecl$$5 = members$$6[i$$47];
              var v24214 = varDecl$$5.varFlags;
              var v25383 = TypeScript$$12.VarFlags;
              var v24215 = v25383.Static;
              var v21812 = JAM.call(TypeScript$$12.hasFlag, TypeScript$$12, [v24214, v24215], JAM.policy.p1);
              var v17242 = !v21812;
              if (v17242) {
                v17242 = varDecl$$5.init;
              }
              var v9754 = v17242;
              if (v9754) {
                JAM.call(this.writeLineToOutput, this, [""]);
                this.emitIndent();
                var v17243 = TypeScript$$12.TokenID;
                var v9753 = v17243.Tilde;
                JAM.call(this.emitJavascriptVarDecl, this, [varDecl$$5, v9753], JAM.policy.p1);
                wroteProps++;
              }
            }
            i$$47++;
            var v17244 = members$$6.length;
            v9756 = i$$47 < v17244;
          }
          if (wroteProps) {
            JAM.call(this.writeLineToOutput, this, [""]);
            var v9757 = this.indenter;
            v9757.decreaseIndent();
            this.emitIndent();
            JAM.call(this.writeLineToOutput, this, ["}"]);
          } else {
            JAM.call(this.writeLineToOutput, this, [" }"]);
            var v9758 = this.indenter;
            v9758.decreaseIndent();
          }
          this.recordSourceMappingNameEnd();
          JAM.call(this.recordSourceMappingEnd, this, [classDecl$$3]);
        }
        var v17245 = classDecl$$3.members;
        var v9759 = v17245.members;
        var membersLen = v9759.length;
        var j$$3 = 0;
        var v9775 = j$$3 < membersLen;
        for (;v9775;) {
          var v17246 = classDecl$$3.members;
          var v9760 = v17246.members;
          var memberDecl = v9760[j$$3];
          var v17247 = memberDecl.nodeType;
          var v21813 = TypeScript$$12.NodeType;
          var v17248 = v21813.FuncDecl;
          var v9774 = v17247 == v17248;
          if (v9774) {
            var fn$$6 = memberDecl;
            var v21814 = fn$$6.fncFlags;
            var v24216 = TypeScript$$12.FncFlags;
            var v21815 = v24216.Method;
            var v17249 = JAM.call(TypeScript$$12.hasFlag, TypeScript$$12, [v21814, v21815], JAM.policy.p1);
            if (v17249) {
              var v21816 = fn$$6.isSignature();
              v17249 = !v21816;
            }
            var v9767 = v17249;
            if (v9767) {
              var v21817 = fn$$6.fncFlags;
              var v24217 = TypeScript$$12.FncFlags;
              var v21818 = v24217.Static;
              var v17250 = JAM.call(TypeScript$$12.hasFlag, TypeScript$$12, [v21817, v21818], JAM.policy.p1);
              var v9766 = !v17250;
              if (v9766) {
                JAM.call(this.emitPrototypeMember, this, [fn$$6, className$$3], JAM.policy.p1);
              } else {
                var v9765 = fn$$6.isAccessor();
                if (v9765) {
                  var v21819 = this.thisClassNode;
                  var v17251 = v21819.name;
                  var v9761 = v17251.actualText;
                  JAM.call(this.emitPropertyAccessor, this, [fn$$6, v9761, false], JAM.policy.p1);
                } else {
                  this.emitIndent();
                  JAM.call(this.recordSourceMappingStart, this, [fn$$6]);
                  var v25384 = classDecl$$3.name;
                  var v24218 = v25384.actualText;
                  var v21820 = v24218 + ".";
                  var v24219 = fn$$6.name;
                  var v21821 = v24219.actualText;
                  var v17252 = v21820 + v21821;
                  var v9762 = v17252 + " = ";
                  JAM.call(this.writeToOutput, this, [v9762]);
                  var v17253 = fn$$6.name;
                  if (v17253) {
                    var v24220 = fn$$6.name;
                    var v21822 = v24220.isMissing();
                    v17253 = !v21822;
                  }
                  var v9763 = v17253;
                  var v9764 = JAM.call(Emitter$$1.shouldCaptureThis, Emitter$$1, [fn$$6]);
                  JAM.call(this.emitInnerFunction, this, [fn$$6, v9763, true, null, v9764, null], JAM.policy.p1);
                  JAM.call(this.writeLineToOutput, this, [";"]);
                }
              }
            }
          } else {
            var v17254 = memberDecl.nodeType;
            var v21823 = TypeScript$$12.NodeType;
            var v17255 = v21823.VarDecl;
            var v9773 = v17254 == v17255;
            if (v9773) {
              varDecl$$5 = memberDecl;
              var v17256 = varDecl$$5.varFlags;
              var v21824 = TypeScript$$12.VarFlags;
              var v17257 = v21824.Static;
              var v9772 = JAM.call(TypeScript$$12.hasFlag, TypeScript$$12, [v17256, v17257], JAM.policy.p1);
              if (v9772) {
                var v9771 = varDecl$$5.init;
                if (v9771) {
                  this.emitIndent();
                  JAM.call(this.recordSourceMappingStart, this, [varDecl$$5]);
                  var v25385 = classDecl$$3.name;
                  var v24221 = v25385.actualText;
                  var v21825 = v24221 + ".";
                  var v24222 = varDecl$$5.id;
                  var v21826 = v24222.actualText;
                  var v17258 = v21825 + v21826;
                  var v9768 = v17258 + " = ";
                  JAM.call(this.writeToOutput, this, [v9768]);
                  var v9769 = varDecl$$5.init;
                  var v17259 = TypeScript$$12.TokenID;
                  var v9770 = v17259.Equals;
                  JAM.call(this.emitJavascript, this, [v9769, v9770, false], JAM.policy.p1);
                  JAM.call(this.writeLineToOutput, this, [";"]);
                  JAM.call(this.recordSourceMappingEnd, this, [varDecl$$5]);
                }
              }
            } else {
              throw Error("We want to catch this");
            }
          }
          j$$3++;
          v9775 = j$$3 < membersLen;
        }
        this.emitIndent();
        var v9776 = classDecl$$3.endingToken;
        JAM.call(this.recordSourceMappingStart, this, [v9776]);
        var v17260 = "return " + className$$3;
        var v9777 = v17260 + ";";
        JAM.call(this.writeLineToOutput, this, [v9777]);
        var v9778 = classDecl$$3.endingToken;
        JAM.call(this.recordSourceMappingEnd, this, [v9778]);
        var v9779 = this.indenter;
        v9779.decreaseIndent();
        this.emitIndent();
        var v9780 = classDecl$$3.endingToken;
        JAM.call(this.recordSourceMappingStart, this, [v9780]);
        JAM.call(this.writeToOutput, this, ["}"]);
        this.recordSourceMappingNameEnd();
        var v9781 = classDecl$$3.endingToken;
        JAM.call(this.recordSourceMappingEnd, this, [v9781]);
        JAM.call(this.recordSourceMappingStart, this, [classDecl$$3]);
        JAM.call(this.writeToOutput, this, [")("]);
        if (hasBaseClass) {
          var v17261 = TypeScript$$12.TokenID;
          var v9782 = v17261.Tilde;
          JAM.call(this.emitJavascript, this, [baseName$$2, v9782, false], JAM.policy.p1);
        }
        JAM.call(this.writeToOutput, this, [");"]);
        JAM.call(this.recordSourceMappingEnd, this, [classDecl$$3]);
        var v24223 = EmitContainer.Module;
        var v21827 = temp$$13 == v24223;
        var v24225 = !v21827;
        if (v24225) {
          var v24224 = EmitContainer.DynamicModule;
          v21827 = temp$$13 == v24224;
        }
        var v17262 = v21827;
        if (v17262) {
          var v21828 = classDecl$$3.varFlags;
          var v24226 = TypeScript$$12.VarFlags;
          var v21829 = v24226.Exported;
          v17262 = JAM.call(TypeScript$$12.hasFlag, TypeScript$$12, [v21828, v21829], JAM.policy.p1);
        }
        var v9785 = v17262;
        if (v9785) {
          JAM.call(this.writeLineToOutput, this, [""]);
          this.emitIndent();
          var v9783;
          var v21830 = EmitContainer.Module;
          var v17263 = temp$$13 == v21830;
          if (v17263) {
            v9783 = this.moduleName;
          } else {
            v9783 = "exports";
          }
          var modName$$2 = v9783;
          JAM.call(this.recordSourceMappingStart, this, [classDecl$$3]);
          var v25386 = modName$$2 + ".";
          var v24227 = v25386 + className$$3;
          var v21831 = v24227 + " = ";
          var v17264 = v21831 + className$$3;
          var v9784 = v17264 + ";";
          JAM.call(this.writeToOutput, this, [v9784]);
          JAM.call(this.recordSourceMappingEnd, this, [classDecl$$3]);
        }
        this.emitIndent();
        JAM.call(this.recordSourceMappingEnd, this, [classDecl$$3]);
        JAM.call(this.emitParensAndCommentsInPlace, this, [classDecl$$3, false], JAM.policy.p1);
        JAM.call(this.setContainer, this, [temp$$13]);
        this.thisClassNode = svClassNode;
      }
      return;
    }
    function v484(className$$2, base$$1, classDecl$$2) {
      function v483(key$$32, s$$13, c$$6) {
        var sym$$5 = s$$13;
        var v21832 = sym$$5.kind();
        var v24228 = TypeScript$$12.SymbolKind;
        var v21833 = v24228.Type;
        var v17265 = v21832 == v21833;
        if (v17265) {
          var v21834 = sym$$5.type;
          v17265 = v21834.call;
        }
        var v9790 = v17265;
        if (v9790) {
          var v9787 = sym$$5.declAST;
          JAM.call(this.recordSourceMappingStart, this, [v9787]);
          var v26199 = className$$2 + ".prototype.";
          var v26200 = sym$$5.name;
          var v25947 = v26199 + v26200;
          var v25387 = v25947 + " = ";
          var v24229 = v25387 + baseName$$1;
          var v21835 = v24229 + ".prototype.";
          var v21836 = sym$$5.name;
          var v17266 = v21835 + v21836;
          var v9788 = v17266 + ";";
          JAM.call(this.writeLineToOutput, this, [v9788]);
          var v9789 = sym$$5.declAST;
          JAM.call(this.recordSourceMappingEnd, this, [v9789]);
        }
        return;
      }
      var v9793 = base$$1.members;
      if (v9793) {
        var baseSymbol$$1 = base$$1.symbol;
        var baseName$$1 = baseSymbol$$1.name;
        var v17267 = baseSymbol$$1.declModule;
        var v24230 = classDecl$$2.type;
        var v21837 = v24230.symbol;
        var v17268 = v21837.declModule;
        var v9791 = v17267 != v17268;
        if (v9791) {
          baseName$$1 = baseSymbol$$1.fullName();
        }
        var v17269 = base$$1.members;
        var v9792 = v17269.allMembers;
        JAM.call(v9792.map, v9792, [v483, null], JAM.policy.p1);
      }
      var v9797 = base$$1.extendsList;
      if (v9797) {
        var i$$46 = 0;
        var v9794 = base$$1.extendsList;
        var len$$12 = v9794.length;
        var v9796 = i$$46 < len$$12;
        for (;v9796;) {
          var v17270 = base$$1.extendsList;
          var v9795 = v17270[i$$46];
          JAM.call(this.emitAddBaseMethods, this, [className$$2, v9795, classDecl$$2], JAM.policy.p1);
          i$$46++;
          v9796 = i$$46 < len$$12;
        }
      }
      return;
    }
    function v482(member, className$$1) {
      var v17271 = member.nodeType;
      var v21838 = TypeScript$$12.NodeType;
      var v17272 = v21838.FuncDecl;
      var v9808 = v17271 == v17272;
      if (v9808) {
        var funcDecl$$4 = member;
        var v9800 = funcDecl$$4.isAccessor();
        if (v9800) {
          JAM.call(this.emitPropertyAccessor, this, [funcDecl$$4, className$$1, true], JAM.policy.p1);
        } else {
          this.emitIndent();
          JAM.call(this.recordSourceMappingStart, this, [funcDecl$$4]);
          var v21839 = className$$1 + ".prototype.";
          var v21840 = funcDecl$$4.getNameText();
          var v17273 = v21839 + v21840;
          var v9798 = v17273 + " = ";
          JAM.call(this.writeToOutput, this, [v9798]);
          var v9799 = JAM.call(Emitter$$1.shouldCaptureThis, Emitter$$1, [funcDecl$$4]);
          JAM.call(this.emitInnerFunction, this, [funcDecl$$4, false, true, null, v9799, null], JAM.policy.p1);
          JAM.call(this.writeLineToOutput, this, [";"]);
        }
      } else {
        var v17274 = member.nodeType;
        var v21841 = TypeScript$$12.NodeType;
        var v17275 = v21841.VarDecl;
        var v9807 = v17274 == v17275;
        if (v9807) {
          var varDecl$$4 = member;
          var v9806 = varDecl$$4.init;
          if (v9806) {
            this.emitIndent();
            JAM.call(this.recordSourceMappingStart, this, [varDecl$$4]);
            var v9801 = varDecl$$4.id;
            JAM.call(this.recordSourceMappingStart, this, [v9801]);
            var v17276 = className$$1 + ".prototype.";
            var v21842 = varDecl$$4.id;
            var v17277 = v21842.actualText;
            var v9802 = v17276 + v17277;
            JAM.call(this.writeToOutput, this, [v9802]);
            var v9803 = varDecl$$4.id;
            JAM.call(this.recordSourceMappingEnd, this, [v9803]);
            JAM.call(this.writeToOutput, this, [" = "]);
            var v9804 = varDecl$$4.init;
            var v17278 = TypeScript$$12.TokenID;
            var v9805 = v17278.Equals;
            JAM.call(this.emitJavascript, this, [v9804, v9805, false], JAM.policy.p1);
            JAM.call(this.recordSourceMappingEnd, this, [varDecl$$4]);
            JAM.call(this.writeLineToOutput, this, [";"]);
          }
        }
      }
      return;
    }
    function v481(funcDecl$$3, className, isProto) {
      var v21843 = funcDecl$$3.accessorSymbol;
      var v17279 = v21843.hasBeenEmitted;
      var v9818 = !v17279;
      if (v9818) {
        var accessorSymbol = funcDecl$$3.accessorSymbol;
        this.emitIndent();
        JAM.call(this.recordSourceMappingStart, this, [funcDecl$$3]);
        var v25388 = "Object.defineProperty(" + className;
        var v25948;
        if (isProto) {
          v25948 = '.prototype, "';
        } else {
          v25948 = ', "';
        }
        var v25389 = v25948;
        var v24231 = v25388 + v25389;
        var v25390 = funcDecl$$3.name;
        var v24232 = v25390.actualText;
        var v21844 = v24231 + v24232;
        var v17280 = v21844 + '"';
        var v9809 = v17280 + ", {";
        JAM.call(this.writeLineToOutput, this, [v9809]);
        var v9810 = this.indenter;
        v9810.increaseIndent();
        var v9813 = accessorSymbol.getter;
        if (v9813) {
          var v9811 = accessorSymbol.getter;
          var getter = v9811.declAST;
          this.emitIndent();
          JAM.call(this.recordSourceMappingStart, this, [getter]);
          JAM.call(this.writeToOutput, this, ["get: "]);
          var v9812 = JAM.call(Emitter$$1.shouldCaptureThis, Emitter$$1, [getter]);
          JAM.call(this.emitInnerFunction, this, [getter, false, isProto, null, v9812, null], JAM.policy.p1);
          JAM.call(this.writeLineToOutput, this, [","]);
        }
        var v9816 = accessorSymbol.setter;
        if (v9816) {
          var v9814 = accessorSymbol.setter;
          var setter = v9814.declAST;
          this.emitIndent();
          JAM.call(this.recordSourceMappingStart, this, [setter]);
          JAM.call(this.writeToOutput, this, ["set: "]);
          var v9815 = JAM.call(Emitter$$1.shouldCaptureThis, Emitter$$1, [setter]);
          JAM.call(this.emitInnerFunction, this, [setter, false, isProto, null, v9815, null], JAM.policy.p1);
          JAM.call(this.writeLineToOutput, this, [","]);
        }
        this.emitIndent();
        JAM.call(this.writeLineToOutput, this, ["enumerable: true,"]);
        this.emitIndent();
        JAM.call(this.writeLineToOutput, this, ["configurable: true"]);
        var v9817 = this.indenter;
        v9817.decreaseIndent();
        this.emitIndent();
        JAM.call(this.writeLineToOutput, this, ["});"]);
        JAM.call(this.recordSourceMappingEnd, this, [funcDecl$$3]);
        accessorSymbol.hasBeenEmitted = true;
      }
      return;
    }
    function v480(ast$$19, tokenId$$41, startLine$$40) {
      var v9819 = ast$$19 == null;
      if (v9819) {
        return;
      }
      var v24233 = startLine$$40;
      if (v24233) {
        var v25949 = this.indenter;
        var v25391 = v25949.indentAmt;
        v24233 = v25391 > 0;
      }
      var v21845 = v24233;
      if (v21845) {
        var v24234 = ast$$19.nodeType;
        var v25392 = TypeScript$$12.NodeType;
        var v24235 = v25392.List;
        v21845 = v24234 != v24235;
      }
      var v17281 = v21845;
      if (v17281) {
        var v21846 = ast$$19.nodeType;
        var v24236 = TypeScript$$12.NodeType;
        var v21847 = v24236.Block;
        v17281 = v21846 != v21847;
      }
      var v9821 = v17281;
      if (v9821) {
        var v25393 = ast$$19.nodeType;
        var v25950 = TypeScript$$12.NodeType;
        var v25394 = v25950.InterfaceDeclaration;
        var v24237 = v25393 != v25394;
        if (v24237) {
          var v26376 = ast$$19.nodeType;
          var v26402 = TypeScript$$12.NodeType;
          var v26377 = v26402.VarDecl;
          var v26317 = v26376 == v26377;
          if (v26317) {
            var v26403 = ast$$19.varFlags;
            var v26421 = TypeScript$$12.VarFlags;
            var v26404 = v26421.Ambient;
            var v26378 = v26403 & v26404;
            var v26405 = TypeScript$$12.VarFlags;
            var v26379 = v26405.Ambient;
            v26317 = v26378 == v26379;
          }
          var v26201 = v26317;
          if (v26201) {
            var v26318 = ast$$19.init;
            v26201 = v26318 == null;
          }
          var v25951 = v26201;
          var v25395 = !v25951;
          if (v25395) {
            var v25952 = this.varListCount();
            v25395 = v25952 >= 0;
          }
          v24237 = v25395;
        }
        var v21848 = v24237;
        if (v21848) {
          var v24238 = ast$$19.nodeType;
          var v25396 = TypeScript$$12.NodeType;
          var v24239 = v25396.EndCode;
          v21848 = v24238 != v24239;
        }
        var v17282 = v21848;
        if (v17282) {
          var v24240 = ast$$19.nodeType;
          var v25397 = TypeScript$$12.NodeType;
          var v24241 = v25397.FuncDecl;
          var v21849 = v24240 != v24241;
          var v24244 = !v21849;
          if (v24244) {
            var v25398 = this.emitState;
            var v24242 = v25398.container;
            var v24243 = EmitContainer.Constructor;
            v21849 = v24242 != v24243;
          }
          v17282 = v21849;
        }
        var v9820 = v17282;
        if (v9820) {
          this.emitIndent();
        }
      }
      JAM.call(ast$$19.emit, ast$$19, [this, tokenId$$41, startLine$$40], JAM.policy.p1);
      var v24245 = TypeScript$$12.TokenID;
      var v21850 = v24245.Semicolon;
      var v17283 = tokenId$$41 == v21850;
      if (v17283) {
        var v21851 = ast$$19.nodeType;
        var v24246 = TypeScript$$12.NodeType;
        var v21852 = v24246.GeneralNode;
        v17283 = v21851 < v21852;
      }
      var v9822 = v17283;
      if (v9822) {
        JAM.call(this.writeToOutput, this, [";"]);
      }
      return;
    }
    function v479(ast$$18, delimiter, tokenId$$40, startLine$$39, emitClassPropertiesAfterSuperCall$$1, emitPrologue, requiresExtendsBlock) {
      var onlyStatics = false;
      var v17284 = typeof emitClassPropertiesAfterSuperCall$$1;
      var v9823 = v17284 === "undefined";
      if (v9823) {
        emitClassPropertiesAfterSuperCall$$1 = false;
      }
      var v17285 = typeof emitPrologue;
      var v9824 = v17285 === "undefined";
      if (v9824) {
        emitPrologue = false;
      }
      var v9854 = ast$$18 == null;
      if (v9854) {
      } else {
        var v17286 = ast$$18.nodeType;
        var v21853 = TypeScript$$12.NodeType;
        var v17287 = v21853.List;
        var v9853 = v17286 != v17287;
        if (v9853) {
          JAM.call(this.emitPrologue, this, [emitPrologue]);
          JAM.call(this.emitJavascript, this, [ast$$18, tokenId$$40, startLine$$39], JAM.policy.p1);
        } else {
          var list$$1 = ast$$18;
          var v21854 = list$$1.members;
          var v17288 = v21854.length;
          var v9825 = v17288 == 0;
          if (v9825) {
            return;
          }
          JAM.call(this.emitParensAndCommentsInPlace, this, [ast$$18, true], JAM.policy.p1);
          var v9826 = list$$1.members;
          var len$$11 = v9826.length;
          var i$$45 = 0;
          var v9852 = i$$45 < len$$11;
          for (;v9852;) {
            if (emitPrologue) {
              var v17289 = i$$45 == 1;
              var v21856 = !v17289;
              if (v21856) {
                var v24247 = list$$1.flags;
                var v25399 = TypeScript$$12.ASTFlags;
                var v24248 = v25399.StrictMode;
                var v21855 = JAM.call(TypeScript$$12.hasFlag, TypeScript$$12, [v24247, v24248], JAM.policy.p1);
                v17289 = !v21855;
              }
              var v9827 = v17289;
              if (v9827) {
                JAM.call(this.emitPrologue, this, [requiresExtendsBlock]);
                emitPrologue = false;
              }
            }
            var v17290 = i$$45 == 1;
            if (v17290) {
              v17290 = emitClassPropertiesAfterSuperCall$$1;
            }
            var v9846 = v17290;
            if (v9846) {
              var v9828 = this.thisClassNode;
              var constructorDecl = v9828.constructorDecl;
              var v17291 = constructorDecl;
              if (v17291) {
                v17291 = constructorDecl.arguments;
              }
              var v9839 = v17291;
              if (v9839) {
                var v17292 = constructorDecl.arguments;
                var v9829 = v17292.members;
                var argsLen$$1 = v9829.length;
                var iArg = 0;
                var v9838 = iArg < argsLen$$1;
                for (;v9838;) {
                  var v17293 = constructorDecl.arguments;
                  var v9830 = v17293.members;
                  var arg$$4 = v9830[iArg];
                  var v21857 = arg$$4.varFlags;
                  var v24249 = TypeScript$$12.VarFlags;
                  var v21858 = v24249.Property;
                  var v17294 = v21857 & v21858;
                  var v21859 = TypeScript$$12.VarFlags;
                  var v17295 = v21859.None;
                  var v9837 = v17294 != v17295;
                  if (v9837) {
                    this.emitIndent();
                    JAM.call(this.recordSourceMappingStart, this, [arg$$4]);
                    var v9831 = arg$$4.id;
                    JAM.call(this.recordSourceMappingStart, this, [v9831]);
                    var v21860 = arg$$4.id;
                    var v17296 = v21860.actualText;
                    var v9832 = "this." + v17296;
                    JAM.call(this.writeToOutput, this, [v9832]);
                    var v9833 = arg$$4.id;
                    JAM.call(this.recordSourceMappingEnd, this, [v9833]);
                    JAM.call(this.writeToOutput, this, [" = "]);
                    var v9834 = arg$$4.id;
                    JAM.call(this.recordSourceMappingStart, this, [v9834]);
                    var v17297 = arg$$4.id;
                    var v9835 = v17297.actualText;
                    JAM.call(this.writeToOutput, this, [v9835]);
                    var v9836 = arg$$4.id;
                    JAM.call(this.recordSourceMappingEnd, this, [v9836]);
                    JAM.call(this.writeLineToOutput, this, [";"]);
                    JAM.call(this.recordSourceMappingEnd, this, [arg$$4]);
                  }
                  iArg++;
                  v9838 = iArg < argsLen$$1;
                }
              }
              var v21861 = this.thisClassNode;
              var v17298 = v21861.members;
              var v9840 = v17298.members;
              var nProps$$1 = v9840.length;
              var iMember = 0;
              var v9845 = iMember < nProps$$1;
              for (;v9845;) {
                var v25953 = this.thisClassNode;
                var v25400 = v25953.members;
                var v24250 = v25400.members;
                var v21862 = v24250[iMember];
                var v17299 = v21862.nodeType;
                var v21863 = TypeScript$$12.NodeType;
                var v17300 = v21863.VarDecl;
                var v9844 = v17299 == v17300;
                if (v9844) {
                  var v21864 = this.thisClassNode;
                  var v17301 = v21864.members;
                  var v9841 = v17301.members;
                  var varDecl$$3 = v9841[iMember];
                  var v24251 = varDecl$$3.varFlags;
                  var v25401 = TypeScript$$12.VarFlags;
                  var v24252 = v25401.Static;
                  var v21865 = JAM.call(TypeScript$$12.hasFlag, TypeScript$$12, [v24251, v24252], JAM.policy.p1);
                  var v17302 = !v21865;
                  if (v17302) {
                    v17302 = varDecl$$3.init;
                  }
                  var v9843 = v17302;
                  if (v9843) {
                    this.emitIndent();
                    var v17303 = TypeScript$$12.TokenID;
                    var v9842 = v17303.Tilde;
                    JAM.call(this.emitJavascriptVarDecl, this, [varDecl$$3, v9842], JAM.policy.p1);
                    JAM.call(this.writeLineToOutput, this, [""]);
                  }
                }
                iMember++;
                v9845 = iMember < nProps$$1;
              }
            }
            var v9847 = list$$1.members;
            var emitNode = v9847[i$$45];
            var v21866 = emitNode.nodeType;
            var v24253 = TypeScript$$12.NodeType;
            var v21867 = v24253.FuncDecl;
            var v17304 = v21866 == v21867;
            if (v17304) {
              var v21868 = emitNode.fncFlags;
              var v24254 = TypeScript$$12.FncFlags;
              var v21869 = v24254.Static;
              v17304 = JAM.call(TypeScript$$12.hasFlag, TypeScript$$12, [v21868, v21869], JAM.policy.p1);
            }
            var v9848 = v17304;
            var v17306 = !v9848;
            if (v17306) {
              var v21870 = emitNode.nodeType;
              var v24255 = TypeScript$$12.NodeType;
              var v21871 = v24255.VarDecl;
              var v17305 = v21870 == v21871;
              if (v17305) {
                var v21872 = emitNode.varFlags;
                var v24256 = TypeScript$$12.VarFlags;
                var v21873 = v24256.Static;
                v17305 = JAM.call(TypeScript$$12.hasFlag, TypeScript$$12, [v21872, v21873], JAM.policy.p1);
              }
              v9848 = v17305;
            }
            var isStaticDecl = v9848;
            var v17307;
            if (onlyStatics) {
              v17307 = !isStaticDecl;
            } else {
              v17307 = isStaticDecl;
            }
            var v9849 = v17307;
            if (v9849) {
              i$$45++;
              v9852 = i$$45 < len$$11;
              continue;
            }
            JAM.call(this.emitJavascript, this, [emitNode, tokenId$$40, startLine$$39], JAM.policy.p1);
            var v17308 = delimiter;
            if (v17308) {
              var v21874 = len$$11 - 1;
              v17308 = i$$45 < v21874;
            }
            var v9851 = v17308;
            if (v9851) {
              if (startLine$$39) {
                JAM.call(this.writeLineToOutput, this, [delimiter]);
              } else {
                JAM.call(this.writeToOutput, this, [delimiter]);
              }
            } else {
              var v26202 = startLine$$39;
              if (v26202) {
                var v26319 = emitNode.nodeType;
                var v26380 = TypeScript$$12.NodeType;
                var v26320 = v26380.ModuleDeclaration;
                v26202 = v26319 != v26320;
              }
              var v25954 = v26202;
              if (v25954) {
                var v26203 = emitNode.nodeType;
                var v26321 = TypeScript$$12.NodeType;
                var v26204 = v26321.InterfaceDeclaration;
                v25954 = v26203 != v26204;
              }
              var v25402 = v25954;
              if (v25402) {
                var v26406 = emitNode.nodeType;
                var v26422 = TypeScript$$12.NodeType;
                var v26407 = v26422.VarDecl;
                var v26381 = v26406 == v26407;
                if (v26381) {
                  var v26423 = emitNode.varFlags;
                  var v26431 = TypeScript$$12.VarFlags;
                  var v26424 = v26431.Ambient;
                  var v26408 = v26423 & v26424;
                  var v26425 = TypeScript$$12.VarFlags;
                  var v26409 = v26425.Ambient;
                  v26381 = v26408 == v26409;
                }
                var v26322 = v26381;
                if (v26322) {
                  var v26382 = emitNode.init;
                  v26322 = v26382 == null;
                }
                var v26205 = v26322;
                var v25955 = !v26205;
                if (v25955) {
                  var v26206 = this.varListCount();
                  v25955 = v26206 >= 0;
                }
                v25402 = v25955;
              }
              var v24257 = v25402;
              if (v24257) {
                var v25956 = emitNode.nodeType;
                var v26207 = TypeScript$$12.NodeType;
                var v25957 = v26207.Block;
                var v25403 = v25956 != v25957;
                var v25958 = !v25403;
                if (v25958) {
                  v25403 = emitNode.isStatementBlock;
                }
                v24257 = v25403;
              }
              var v21875 = v24257;
              if (v21875) {
                var v24258 = emitNode.nodeType;
                var v25404 = TypeScript$$12.NodeType;
                var v24259 = v25404.EndCode;
                v21875 = v24258 != v24259;
              }
              var v17309 = v21875;
              if (v17309) {
                var v21876 = emitNode.nodeType;
                var v24260 = TypeScript$$12.NodeType;
                var v21877 = v24260.FuncDecl;
                v17309 = v21876 != v21877;
              }
              var v9850 = v17309;
              if (v9850) {
                JAM.call(this.writeLineToOutput, this, [""]);
              }
            }
            i$$45++;
            v9852 = i$$45 < len$$11;
          }
          JAM.call(this.emitParensAndCommentsInPlace, this, [ast$$18, false], JAM.policy.p1);
        }
      }
      return;
    }
    function v478() {
      var v17310 = this.sourceMapper;
      var v9857 = v17310 != null;
      if (v9857) {
        var v9855 = TypeScript$$12.SourceMapper;
        var v9856 = this.allSourceMappers;
        JAM.call(v9855.EmitSourceMapping, v9855, [v9856]);
      }
      try {
        var v9858 = this.outfile;
        v9858.Close();
      } catch (ex$$1) {
        var v9859 = this.errorReporter;
        var v9860 = ex$$1.message;
        JAM.call(v9859.emitterError, v9859, [v9860]);
      }
      return;
    }
    function v477(ast$$17) {
      var v17311 = this.sourceMapper;
      if (v17311) {
        v17311 = JAM.call(TypeScript$$12.isValidAstNode, TypeScript$$12, [ast$$17]);
      }
      var v9867 = v17311;
      if (v9867) {
        var v17312 = this.sourceMapper;
        var v9861 = v17312.currentMappings;
        v9861.pop();
        var v17313 = this.sourceMapper;
        var v9862 = v17313.currentMappings;
        var v24261 = this.sourceMapper;
        var v21878 = v24261.currentMappings;
        var v17314 = v21878.length;
        var v9863 = v17314 - 1;
        var siblings$$1 = v9862[v9863];
        var v17315 = siblings$$1.length;
        var v9864 = v17315 - 1;
        var sourceMapping$$2 = siblings$$1[v9864];
        var v9865 = sourceMapping$$2.end;
        var v17316 = this.emitState;
        v9865.emittedColumn = v17316.column;
        var v9866 = sourceMapping$$2.end;
        var v17317 = this.emitState;
        v9866.emittedLine = v17317.line;
      }
      return;
    }
    function v476(ast$$16) {
      var v17318 = this.sourceMapper;
      if (v17318) {
        v17318 = JAM.call(TypeScript$$12.isValidAstNode, TypeScript$$12, [ast$$16]);
      }
      var v9886 = v17318;
      if (v9886) {
        var lineCol$$1 = {line:-1, col:-1};
        var v9868 = TypeScript$$12.SourceMapping;
        var sourceMapping$$1 = new v9868;
        var v9869 = sourceMapping$$1.start;
        var v17319 = this.emitState;
        v9869.emittedColumn = v17319.column;
        var v9870 = sourceMapping$$1.start;
        var v17320 = this.emitState;
        v9870.emittedLine = v17320.line;
        var v9871 = ast$$16.minChar;
        var v21879 = this.checker;
        var v17321 = v21879.locationInfo;
        var v9872 = v17321.lineMap;
        JAM.call(TypeScript$$12.getSourceLineColFromMap, TypeScript$$12, [lineCol$$1, v9871, v9872], JAM.policy.p1);
        var v9873 = sourceMapping$$1.start;
        v9873.sourceColumn = lineCol$$1.col;
        var v9874 = sourceMapping$$1.start;
        v9874.sourceLine = lineCol$$1.line;
        var v9875 = ast$$16.limChar;
        var v21880 = this.checker;
        var v17322 = v21880.locationInfo;
        var v9876 = v17322.lineMap;
        JAM.call(TypeScript$$12.getSourceLineColFromMap, TypeScript$$12, [lineCol$$1, v9875, v9876], JAM.policy.p1);
        var v9877 = sourceMapping$$1.end;
        v9877.sourceColumn = lineCol$$1.col;
        var v9878 = sourceMapping$$1.end;
        v9878.sourceLine = lineCol$$1.line;
        var v24262 = this.sourceMapper;
        var v21881 = v24262.currentNameIndex;
        var v17323 = v21881.length;
        var v9881 = v17323 > 0;
        if (v9881) {
          var v17324 = this.sourceMapper;
          var v9879 = v17324.currentNameIndex;
          var v24263 = this.sourceMapper;
          var v21882 = v24263.currentNameIndex;
          var v17325 = v21882.length;
          var v9880 = v17325 - 1;
          sourceMapping$$1.nameIndex = v9879[v9880];
        }
        var v17326 = this.sourceMapper;
        var v9882 = v17326.currentMappings;
        var v24264 = this.sourceMapper;
        var v21883 = v24264.currentMappings;
        var v17327 = v21883.length;
        var v9883 = v17327 - 1;
        var siblings = v9882[v9883];
        JAM.call(siblings.push, siblings, [sourceMapping$$1]);
        var v17328 = this.sourceMapper;
        var v9884 = v17328.currentMappings;
        var v9885 = sourceMapping$$1.childMappings;
        JAM.call(v9884.push, v9884, [v9885]);
      }
      return;
    }
    function v475() {
      var v9888 = this.sourceMapper;
      if (v9888) {
        var v17329 = this.sourceMapper;
        var v9887 = v17329.currentNameIndex;
        v9887.pop();
      }
      return;
    }
    function v474(name$$40) {
      var v9895 = this.sourceMapper;
      if (v9895) {
        var finalName = name$$40;
        var v9891 = !name$$40;
        if (v9891) {
          finalName = "";
        } else {
          var v24265 = this.sourceMapper;
          var v21884 = v24265.currentNameIndex;
          var v17330 = v21884.length;
          var v9890 = v17330 > 0;
          if (v9890) {
            var v24266 = this.sourceMapper;
            var v21885 = v24266.names;
            var v25959 = this.sourceMapper;
            var v25405 = v25959.currentNameIndex;
            var v24267 = v25405.length;
            var v21886 = v24267 - 1;
            var v17331 = v21885[v21886];
            var v9889 = v17331 + ".";
            finalName = v9889 + name$$40;
          }
        }
        var v17332 = this.sourceMapper;
        var v9892 = v17332.names;
        JAM.call(v9892.push, v9892, [finalName]);
        var v17333 = this.sourceMapper;
        var v9893 = v17333.currentNameIndex;
        var v24268 = this.sourceMapper;
        var v21887 = v24268.names;
        var v17334 = v21887.length;
        var v9894 = v17334 - 1;
        JAM.call(v9893.push, v9893, [v9894]);
      }
      return;
    }
    function v473(stmts$$2, emitClassPropertiesAfterSuperCall) {
      var v17335 = typeof emitClassPropertiesAfterSuperCall;
      var v9896 = v17335 === "undefined";
      if (v9896) {
        emitClassPropertiesAfterSuperCall = false;
      }
      var v17336 = stmts$$2.nodeType;
      var v21888 = TypeScript$$12.NodeType;
      var v17337 = v21888.Block;
      var v9904 = v17336 != v17337;
      if (v9904) {
        var v17338 = stmts$$2.nodeType;
        var v21889 = TypeScript$$12.NodeType;
        var v17339 = v21889.List;
        var v9902 = v17338 == v17339;
        if (v9902) {
          var stmtList = stmts$$2;
          var v25406 = stmtList.members;
          var v24269 = v25406.length;
          var v21890 = v24269 == 2;
          if (v21890) {
            var v25960 = stmtList.members;
            var v25407 = v25960[0];
            var v24270 = v25407.nodeType;
            var v25408 = TypeScript$$12.NodeType;
            var v24271 = v25408.Block;
            v21890 = v24270 == v24271;
          }
          var v17340 = v21890;
          if (v17340) {
            var v25409 = stmtList.members;
            var v24272 = v25409[1];
            var v21891 = v24272.nodeType;
            var v24273 = TypeScript$$12.NodeType;
            var v21892 = v24273.EndCode;
            v17340 = v21891 == v21892;
          }
          var v9900 = v17340;
          if (v9900) {
            var v17341 = stmtList.members;
            var v9897 = v17341[0];
            var v17342 = TypeScript$$12.TokenID;
            var v9898 = v17342.Semicolon;
            JAM.call(this.emitJavascript, this, [v9897, v9898, true], JAM.policy.p1);
            JAM.call(this.writeLineToOutput, this, [""]);
          } else {
            var v17343 = TypeScript$$12.TokenID;
            var v9899 = v17343.Semicolon;
            JAM.call(this.emitJavascriptList, this, [stmts$$2, null, v9899, true, emitClassPropertiesAfterSuperCall], JAM.policy.p1);
          }
        } else {
          var v17344 = TypeScript$$12.TokenID;
          var v9901 = v17344.Semicolon;
          JAM.call(this.emitJavascript, this, [stmts$$2, v9901, true], JAM.policy.p1);
        }
      } else {
        var v17345 = TypeScript$$12.TokenID;
        var v9903 = v17345.Semicolon;
        JAM.call(this.emitJavascript, this, [stmts$$2, v9903, true], JAM.policy.p1);
      }
      return;
    }
    function v472(stmts$$1, emitEmptyBod) {
      if (stmts$$1) {
        var v17346 = stmts$$1.nodeType;
        var v21893 = TypeScript$$12.NodeType;
        var v17347 = v21893.Block;
        var v9914 = v17346 != v17347;
        if (v9914) {
          var v9905 = stmts$$1;
          if (v9905) {
            var v21894 = stmts$$1.nodeType;
            var v24274 = TypeScript$$12.NodeType;
            var v21895 = v24274.List;
            var v17348 = v21894 != v21895;
            var v21897 = !v17348;
            if (v21897) {
              var v24275 = stmts$$1.members;
              var v21896 = v24275.length;
              v17348 = v21896 > 0;
            }
            v9905 = v17348;
          }
          var hasContents = v9905;
          var v9912 = emitEmptyBod || hasContents;
          if (v9912) {
            var v17349 = stmts$$1.nodeType;
            var v21898 = TypeScript$$12.NodeType;
            var v17350 = v21898.Block;
            var v9906 = v17349 == v17350;
            var v17352 = !v9906;
            if (v17352) {
              var v24276 = stmts$$1.nodeType;
              var v25410 = TypeScript$$12.NodeType;
              var v24277 = v25410.List;
              var v21899 = v24276 == v24277;
              if (v21899) {
                var v25411 = stmts$$1.members;
                var v24278 = v25411.length;
                v21899 = v24278 == 1;
              }
              var v17351 = v21899;
              if (v17351) {
                var v25412 = stmts$$1.members;
                var v24279 = v25412[0];
                var v21900 = v24279.nodeType;
                var v24280 = TypeScript$$12.NodeType;
                var v21901 = v24280.Block;
                v17351 = v21900 == v21901;
              }
              v9906 = v17351;
            }
            var hasOnlyBlockStatement = v9906;
            JAM.call(this.recordSourceMappingStart, this, [stmts$$1]);
            var v9908 = !hasOnlyBlockStatement;
            if (v9908) {
              JAM.call(this.writeLineToOutput, this, [" {"]);
              var v9907 = this.indenter;
              v9907.increaseIndent();
            }
            var v17353 = TypeScript$$12.TokenID;
            var v9909 = v17353.Semicolon;
            JAM.call(this.emitJavascriptList, this, [stmts$$1, null, v9909, true, false], JAM.policy.p1);
            var v9911 = !hasOnlyBlockStatement;
            if (v9911) {
              JAM.call(this.writeLineToOutput, this, [""]);
              var v9910 = this.indenter;
              v9910.decreaseIndent();
              this.emitIndent();
              JAM.call(this.writeToOutput, this, ["}"]);
            }
            JAM.call(this.recordSourceMappingEnd, this, [stmts$$1]);
          }
        } else {
          var v17354 = TypeScript$$12.TokenID;
          var v9913 = v17354.Semicolon;
          JAM.call(this.emitJavascript, this, [stmts$$1, v9913, true], JAM.policy.p1);
        }
      } else {
        if (emitEmptyBod) {
          JAM.call(this.writeToOutput, this, ["{ }"]);
        }
      }
      return;
    }
    function v471(name$$39, addThis) {
      var sym$$4 = name$$39.sym;
      JAM.call(this.emitParensAndCommentsInPlace, this, [name$$39, true], JAM.policy.p1);
      JAM.call(this.recordSourceMappingStart, this, [name$$39]);
      var v17355 = name$$39.isMissing();
      var v9940 = !v17355;
      if (v9940) {
        var v21902 = addThis;
        if (v21902) {
          var v25413 = this.emitState;
          var v24281 = v25413.container;
          var v24282 = EmitContainer.Args;
          v21902 = v24281 != v24282;
        }
        var v17356 = v21902;
        if (v17356) {
          v17356 = sym$$4;
        }
        var v9931 = v17356;
        if (v9931) {
          var v17357 = sym$$4.container;
          if (v17357) {
            var v24283 = sym$$4.container;
            var v21903 = v24283.name;
            var v21904 = TypeScript$$12.globalId;
            v17357 = v21903 != v21904;
          }
          var v9930 = v17357;
          if (v9930) {
            var v21905 = sym$$4.flags;
            var v24284 = TypeScript$$12.SymbolFlags;
            var v21906 = v24284.Static;
            var v17358 = JAM.call(TypeScript$$12.hasFlag, TypeScript$$12, [v21905, v21906], JAM.policy.p1);
            if (v17358) {
              var v21907 = sym$$4.flags;
              var v24285 = TypeScript$$12.SymbolFlags;
              var v21908 = v24285.Property;
              v17358 = JAM.call(TypeScript$$12.hasFlag, TypeScript$$12, [v21907, v21908], JAM.policy.p1);
            }
            var v9928 = v17358;
            if (v9928) {
              var v17359 = sym$$4.declModule;
              if (v17359) {
                var v24286 = sym$$4.declModule;
                var v21909 = v24286.modFlags;
                var v24287 = TypeScript$$12.ModuleFlags;
                var v21910 = v24287.IsDynamic;
                v17359 = JAM.call(TypeScript$$12.hasFlag, TypeScript$$12, [v21909, v21910], JAM.policy.p1);
              }
              var v9916 = v17359;
              if (v9916) {
                JAM.call(this.writeToOutput, this, ["exports."]);
              } else {
                var v21911 = sym$$4.container;
                var v17360 = v21911.name;
                var v9915 = v17360 + ".";
                JAM.call(this.writeToOutput, this, [v9915]);
              }
            } else {
              var v17361 = sym$$4.kind();
              var v21912 = TypeScript$$12.SymbolKind;
              var v17362 = v21912.Field;
              var v9927 = v17361 == v17362;
              if (v9927) {
                var fieldSym = sym$$4;
                var v17363 = fieldSym.flags;
                var v21913 = TypeScript$$12.SymbolFlags;
                var v17364 = v21913.ModuleMember;
                var v9921 = JAM.call(TypeScript$$12.hasFlag, TypeScript$$12, [v17363, v17364], JAM.policy.p1);
                if (v9921) {
                  var v21914 = sym$$4.container;
                  var v24288 = this.checker;
                  var v21915 = v24288.gloMod;
                  var v17365 = v21914 != v21915;
                  if (v17365) {
                    var v24289 = sym$$4.flags;
                    var v25414 = TypeScript$$12.SymbolFlags;
                    var v24290 = v25414.Property;
                    var v21916 = JAM.call(TypeScript$$12.hasFlag, TypeScript$$12, [v24289, v24290], JAM.policy.p1);
                    var v24293 = !v21916;
                    if (v24293) {
                      var v24291 = sym$$4.flags;
                      var v25415 = TypeScript$$12.SymbolFlags;
                      var v24292 = v25415.Exported;
                      v21916 = JAM.call(TypeScript$$12.hasFlag, TypeScript$$12, [v24291, v24292], JAM.policy.p1);
                    }
                    v17365 = v21916;
                  }
                  var v9919 = v17365;
                  if (v9919) {
                    var v21917 = sym$$4.declModule;
                    var v17366 = v21917.modFlags;
                    var v21918 = TypeScript$$12.ModuleFlags;
                    var v17367 = v21918.IsDynamic;
                    var v9918 = JAM.call(TypeScript$$12.hasFlag, TypeScript$$12, [v17366, v17367], JAM.policy.p1);
                    if (v9918) {
                      JAM.call(this.writeToOutput, this, ["exports."]);
                    } else {
                      var v21919 = sym$$4.container;
                      var v17368 = v21919.name;
                      var v9917 = v17368 + ".";
                      JAM.call(this.writeToOutput, this, [v9917]);
                    }
                  }
                } else {
                  var v9920 = sym$$4.isInstanceProperty();
                  if (v9920) {
                    this.emitThis();
                    JAM.call(this.writeToOutput, this, ["."]);
                  }
                }
              } else {
                var v17369 = sym$$4.kind();
                var v21920 = TypeScript$$12.SymbolKind;
                var v17370 = v21920.Type;
                var v9926 = v17369 == v17370;
                if (v9926) {
                  var v9925 = sym$$4.isInstanceProperty();
                  if (v9925) {
                    var typeSym = sym$$4;
                    var type$$28 = typeSym.type;
                    var v17371 = type$$28.call;
                    if (v17371) {
                      var v24294 = sym$$4.flags;
                      var v25416 = TypeScript$$12.SymbolFlags;
                      var v24295 = v25416.ModuleMember;
                      var v21921 = JAM.call(TypeScript$$12.hasFlag, TypeScript$$12, [v24294, v24295], JAM.policy.p1);
                      v17371 = !v21921;
                    }
                    var v9922 = v17371;
                    if (v9922) {
                      this.emitThis();
                      JAM.call(this.writeToOutput, this, ["."]);
                    }
                  } else {
                    var v21922 = sym$$4.unitIndex;
                    var v25417 = this.checker;
                    var v24296 = v25417.locationInfo;
                    var v21923 = v24296.unitIndex;
                    var v17372 = v21922 != v21923;
                    var v21925 = !v17372;
                    if (v21925) {
                      var v24297 = sym$$4.declModule;
                      var v21924 = JAM.call(this.declEnclosed, this, [v24297]);
                      v17372 = !v21924;
                    }
                    var v9924 = v17372;
                    if (v9924) {
                      var v21926 = sym$$4.container;
                      var v17373 = v21926.name;
                      var v9923 = v17373 + ".";
                      JAM.call(this.writeToOutput, this, [v9923]);
                    }
                  }
                }
              }
            }
          } else {
            var v26208 = sym$$4.container;
            var v26323 = this.checker;
            var v26209 = v26323.gloMod;
            var v25961 = v26208 == v26209;
            if (v25961) {
              var v26210 = sym$$4.flags;
              var v26324 = TypeScript$$12.SymbolFlags;
              var v26211 = v26324.Exported;
              v25961 = JAM.call(TypeScript$$12.hasFlag, TypeScript$$12, [v26210, v26211], JAM.policy.p1);
            }
            var v25418 = v25961;
            if (v25418) {
              var v26212 = sym$$4.flags;
              var v26325 = TypeScript$$12.SymbolFlags;
              var v26213 = v26325.Ambient;
              var v25962 = JAM.call(TypeScript$$12.hasFlag, TypeScript$$12, [v26212, v26213], JAM.policy.p1);
              v25418 = !v25962;
            }
            var v24298 = v25418;
            if (v24298) {
              var v26326 = sym$$4.isType();
              var v26383 = !v26326;
              if (v26383) {
                v26326 = sym$$4.isMember();
              }
              var v26214 = v26326;
              if (v26214) {
                v26214 = sym$$4.declModule;
              }
              var v25963 = v26214;
              if (v25963) {
                var v26327 = sym$$4.declModule;
                var v26215 = v26327.modFlags;
                var v26328 = TypeScript$$12.ModuleFlags;
                var v26216 = v26328.Ambient;
                v25963 = JAM.call(TypeScript$$12.hasFlag, TypeScript$$12, [v26215, v26216], JAM.policy.p1);
              }
              var v25419 = v25963;
              v24298 = !v25419;
            }
            var v21927 = v24298;
            if (v21927) {
              var v25420 = this.emitState;
              var v24299 = v25420.container;
              var v24300 = EmitContainer.Prog;
              v21927 = v24299 == v24300;
            }
            var v17374 = v21927;
            if (v17374) {
              var v24301 = sym$$4.declAST;
              var v21928 = v24301.nodeType;
              var v24302 = TypeScript$$12.NodeType;
              var v21929 = v24302.FuncDecl;
              v17374 = v21928 != v21929;
            }
            var v9929 = v17374;
            if (v9929) {
              JAM.call(this.writeToOutput, this, ["this."]);
            }
          }
        }
        var v24303 = sym$$4;
        if (v24303) {
          v24303 = sym$$4.declAST;
        }
        var v21930 = v24303;
        if (v21930) {
          var v25421 = sym$$4.declAST;
          var v24304 = v25421.nodeType;
          var v25422 = TypeScript$$12.NodeType;
          var v24305 = v25422.ModuleDeclaration;
          v21930 = v24304 == v24305;
        }
        var v17375 = v21930;
        if (v17375) {
          var v24306 = sym$$4.declAST;
          var v21931 = v24306.modFlags;
          var v24307 = TypeScript$$12.ModuleFlags;
          var v21932 = v24307.IsDynamic;
          v17375 = JAM.call(TypeScript$$12.hasFlag, TypeScript$$12, [v21931, v21932], JAM.policy.p1);
        }
        var v9939 = v17375;
        if (v9939) {
          var moduleDecl$$2 = sym$$4.declAST;
          var v17376 = TypeScript$$12.moduleGenTarget;
          var v21933 = TypeScript$$12.ModuleGenTarget;
          var v17377 = v21933.Asynchronous;
          var v9937 = v17376 == v17377;
          if (v9937) {
            var v21934 = this.modAliasId;
            var v17378 = "__" + v21934;
            var v9932 = v17378 + "__;";
            JAM.call(this.writeLineToOutput, this, [v9932]);
          } else {
            var modPath$$1 = name$$39.actualText;
            var v21935 = moduleDecl$$2.mod;
            var v17379 = v21935.symbol;
            var v9933 = v17379.declAST;
            if (v9933) {
              var v25423 = moduleDecl$$2.mod;
              var v24308 = v25423.symbol;
              var v21936 = v24308.declAST;
              var v17380 = v21936.modFlags;
              var v21937 = TypeScript$$12.ModuleFlags;
              var v17381 = v21937.Ambient;
              v9933 = JAM.call(TypeScript$$12.hasFlag, TypeScript$$12, [v17380, v17381], JAM.policy.p1);
            }
            var isAmbient = v9933;
            var v9934;
            if (isAmbient) {
              v9934 = modPath$$1;
            } else {
              var v17382;
              var v21938 = this.firstModAlias;
              if (v21938) {
                v17382 = this.firstModAlias;
              } else {
                v17382 = JAM.call(TypeScript$$12.quoteBaseName, TypeScript$$12, [modPath$$1]);
              }
              v9934 = v17382;
            }
            modPath$$1 = v9934;
            var v9935;
            if (isAmbient) {
              v9935 = modPath$$1;
            } else {
              var v17383;
              var v25424 = JAM.call(TypeScript$$12.stripQuotes, TypeScript$$12, [modPath$$1]);
              var v24309 = JAM.call(TypeScript$$12.isRelative, TypeScript$$12, [v25424]);
              var v21940 = !v24309;
              if (v21940) {
                var v24310 = JAM.call(TypeScript$$12.stripQuotes, TypeScript$$12, [modPath$$1]);
                var v21939 = "./" + v24310;
                v17383 = JAM.call(TypeScript$$12.quoteStr, TypeScript$$12, [v21939]);
              } else {
                v17383 = modPath$$1;
              }
              v9935 = v17383;
            }
            modPath$$1 = v9935;
            var v17384 = "require(" + modPath$$1;
            var v9936 = v17384 + ")";
            JAM.call(this.writeToOutput, this, [v9936]);
          }
        } else {
          var v9938 = name$$39.actualText;
          JAM.call(this.writeToOutput, this, [v9938]);
        }
      }
      JAM.call(this.recordSourceMappingEnd, this, [name$$39]);
      JAM.call(this.emitParensAndCommentsInPlace, this, [name$$39, false], JAM.policy.p1);
      return;
    }
    function v470(moduleDecl$$1) {
      var v9941 = moduleDecl$$1 == null;
      if (v9941) {
        return true;
      }
      var i$$44 = 0;
      var v9942 = this.moduleDeclList;
      var len$$10 = v9942.length;
      var v9944 = i$$44 < len$$10;
      for (;v9944;) {
        var v21941 = this.moduleDeclList;
        var v17385 = v21941[i$$44];
        var v9943 = v17385 == moduleDecl$$1;
        if (v9943) {
          return true;
        }
        i$$44++;
        v9944 = i$$44 < len$$10;
      }
      return false;
    }
    function v469(varDecl$$2, tokenId$$39) {
      var v21942 = varDecl$$2.varFlags;
      var v24311 = TypeScript$$12.VarFlags;
      var v21943 = v24311.Ambient;
      var v17386 = v21942 & v21943;
      var v21944 = TypeScript$$12.VarFlags;
      var v17387 = v21944.Ambient;
      var v9970 = v17386 == v17387;
      if (v9970) {
        JAM.call(this.emitAmbientVarDecl, this, [varDecl$$2]);
        this.onEmitVar();
      } else {
        var sym$$3 = varDecl$$2.sym;
        var v9945 = varDecl$$2.init;
        var hasInitializer = v9945 != null;
        JAM.call(this.emitParensAndCommentsInPlace, this, [varDecl$$2, true], JAM.policy.p1);
        JAM.call(this.recordSourceMappingStart, this, [varDecl$$2]);
        var v24312 = sym$$3;
        if (v24312) {
          v24312 = sym$$3.isMember();
        }
        var v21945 = v24312;
        if (v21945) {
          v21945 = sym$$3.container;
        }
        var v17388 = v21945;
        if (v17388) {
          var v24313 = sym$$3.container;
          var v21946 = v24313.kind();
          var v24314 = TypeScript$$12.SymbolKind;
          var v21947 = v24314.Type;
          v17388 = v21946 == v21947;
        }
        var v9959 = v17388;
        if (v9959) {
          var v9946 = sym$$3.container;
          var type$$27 = v9946.type;
          var v17389 = type$$27.isClass();
          if (v17389) {
            var v24315 = sym$$3.flags;
            var v25425 = TypeScript$$12.SymbolFlags;
            var v24316 = v25425.ModuleMember;
            var v21948 = JAM.call(TypeScript$$12.hasFlag, TypeScript$$12, [v24315, v24316], JAM.policy.p1);
            v17389 = !v21948;
          }
          var v9957 = v17389;
          if (v9957) {
            var v21949 = this.emitState;
            var v17390 = v21949.container;
            var v17391 = EmitContainer.Args;
            var v9949 = v17390 != v17391;
            if (v9949) {
              var v17392 = sym$$3.flags;
              var v21950 = TypeScript$$12.SymbolFlags;
              var v17393 = v21950.Static;
              var v9948 = JAM.call(TypeScript$$12.hasFlag, TypeScript$$12, [v17392, v17393], JAM.policy.p1);
              if (v9948) {
                var v21951 = sym$$3.container;
                var v17394 = v21951.name;
                var v9947 = v17394 + ".";
                JAM.call(this.writeToOutput, this, [v9947]);
              } else {
                JAM.call(this.writeToOutput, this, ["this."]);
              }
            }
          } else {
            var v9956 = type$$27.hasImplementation();
            if (v9956) {
              var v24317 = sym$$3.flags;
              var v25426 = TypeScript$$12.SymbolFlags;
              var v24318 = v25426.Exported;
              var v21952 = JAM.call(TypeScript$$12.hasFlag, TypeScript$$12, [v24317, v24318], JAM.policy.p1);
              var v17395 = !v21952;
              if (v17395) {
                var v24319 = sym$$3.container;
                var v25427 = this.checker;
                var v24320 = v25427.gloMod;
                var v21953 = v24319 == v24320;
                var v24322 = !v21953;
                if (v24322) {
                  var v25428 = sym$$3.flags;
                  var v25964 = TypeScript$$12.SymbolFlags;
                  var v25429 = v25964.Property;
                  var v24321 = JAM.call(TypeScript$$12.hasFlag, TypeScript$$12, [v25428, v25429], JAM.policy.p1);
                  v21953 = !v24321;
                }
                v17395 = v21953;
              }
              var v9953 = v17395;
              if (v9953) {
                this.emitVarDeclVar();
              } else {
                var v17396 = varDecl$$2.varFlags;
                var v21954 = TypeScript$$12.VarFlags;
                var v17397 = v21954.LocalStatic;
                var v9952 = JAM.call(TypeScript$$12.hasFlag, TypeScript$$12, [v17396, v17397], JAM.policy.p1);
                if (v9952) {
                  JAM.call(this.writeToOutput, this, ["."]);
                } else {
                  var v21955 = this.emitState;
                  var v17398 = v21955.container;
                  var v17399 = EmitContainer.DynamicModule;
                  var v9951 = v17398 == v17399;
                  if (v9951) {
                    JAM.call(this.writeToOutput, this, ["exports."]);
                  } else {
                    var v17400 = this.moduleName;
                    var v9950 = v17400 + ".";
                    JAM.call(this.writeToOutput, this, [v9950]);
                  }
                }
              }
            } else {
              var v21956 = TypeScript$$12.TokenID;
              var v17401 = v21956.OpenParen;
              var v9955 = tokenId$$39 != v17401;
              if (v9955) {
                var v21957 = sym$$3.flags;
                var v24323 = TypeScript$$12.SymbolFlags;
                var v21958 = v24323.Exported;
                var v17402 = JAM.call(TypeScript$$12.hasFlag, TypeScript$$12, [v21957, v21958], JAM.policy.p1);
                if (v17402) {
                  var v21959 = sym$$3.container;
                  var v24324 = this.checker;
                  var v21960 = v24324.gloMod;
                  v17402 = v21959 == v21960;
                }
                var v9954 = v17402;
                if (v9954) {
                  JAM.call(this.writeToOutput, this, ["this."]);
                } else {
                  this.emitVarDeclVar();
                }
              }
            }
          }
        } else {
          var v21961 = TypeScript$$12.TokenID;
          var v17403 = v21961.OpenParen;
          var v9958 = tokenId$$39 != v17403;
          if (v9958) {
            this.emitVarDeclVar();
          }
        }
        var v9960 = varDecl$$2.id;
        JAM.call(this.recordSourceMappingStart, this, [v9960]);
        var v17404 = varDecl$$2.id;
        var v9961 = v17404.actualText;
        JAM.call(this.writeToOutput, this, [v9961]);
        var v9962 = varDecl$$2.id;
        JAM.call(this.recordSourceMappingEnd, this, [v9962]);
        if (hasInitializer) {
          JAM.call(this.writeToOutputTrimmable, this, [" = "]);
          var v9963 = this.varListCountStack;
          JAM.call(v9963.push, v9963, [0]);
          var v9964 = varDecl$$2.init;
          var v17405 = TypeScript$$12.TokenID;
          var v9965 = v17405.Comma;
          JAM.call(this.emitJavascript, this, [v9964, v9965, false], JAM.policy.p1);
          var v9966 = this.varListCountStack;
          v9966.pop();
        }
        this.onEmitVar();
        var v21962 = TypeScript$$12.TokenID;
        var v17406 = v21962.OpenParen;
        var v9969 = tokenId$$39 != v17406;
        if (v9969) {
          var v17407 = this.varListCount();
          var v9968 = v17407 < 0;
          if (v9968) {
            JAM.call(this.writeToOutput, this, [", "]);
          } else {
            var v21963 = TypeScript$$12.TokenID;
            var v17408 = v21963.For;
            var v9967 = tokenId$$39 != v17408;
            if (v9967) {
              JAM.call(this.writeToOutputTrimmable, this, [";"]);
            }
          }
        }
        JAM.call(this.recordSourceMappingEnd, this, [varDecl$$2]);
        JAM.call(this.emitParensAndCommentsInPlace, this, [varDecl$$2, false], JAM.policy.p1);
      }
      return;
    }
    function v468() {
      var v17409 = this.varListCount();
      var v9974 = v17409 > 0;
      if (v9974) {
        var v17410 = this.varListCount();
        var v9971 = v17410 - 1;
        JAM.call(this.setInVarBlock, this, [v9971]);
      } else {
        var v17411 = this.varListCount();
        var v9973 = v17411 < 0;
        if (v9973) {
          var v17412 = this.varListCount();
          var v9972 = v17412 + 1;
          JAM.call(this.setInVarBlock, this, [v9972]);
        }
      }
      return;
    }
    function v467() {
      var v17413 = this.varListCount();
      var v9976 = v17413 >= 0;
      if (v9976) {
        JAM.call(this.writeToOutput, this, ["var "]);
        var v17414 = this.varListCount();
        var v9975 = -v17414;
        JAM.call(this.setInVarBlock, this, [v9975]);
      }
      return;
    }
    function v466() {
      var v9977 = this.varListCountStack;
      var v21964 = this.varListCountStack;
      var v17415 = v21964.length;
      var v9978 = v17415 - 1;
      return v9977[v9978];
    }
    function v465(varDecl$$1) {
      var v9984 = varDecl$$1.init;
      if (v9984) {
        JAM.call(this.emitParensAndCommentsInPlace, this, [varDecl$$1, true], JAM.policy.p1);
        JAM.call(this.recordSourceMappingStart, this, [varDecl$$1]);
        var v9979 = varDecl$$1.id;
        JAM.call(this.recordSourceMappingStart, this, [v9979]);
        var v17416 = varDecl$$1.id;
        var v9980 = v17416.actualText;
        JAM.call(this.writeToOutput, this, [v9980]);
        var v9981 = varDecl$$1.id;
        JAM.call(this.recordSourceMappingEnd, this, [v9981]);
        JAM.call(this.writeToOutput, this, [" = "]);
        var v9982 = varDecl$$1.init;
        var v17417 = TypeScript$$12.TokenID;
        var v9983 = v17417.Comma;
        JAM.call(this.emitJavascript, this, [v9982, v9983, false], JAM.policy.p1);
        JAM.call(this.recordSourceMappingEnd, this, [varDecl$$1]);
        JAM.call(this.writeToOutput, this, [";"]);
        JAM.call(this.emitParensAndCommentsInPlace, this, [varDecl$$1, false], JAM.policy.p1);
      }
      return;
    }
    function v464(funcDecl$$2) {
      var v21965 = funcDecl$$2.fncFlags;
      var v24325 = TypeScript$$12.FncFlags;
      var v21966 = v24325.Signature;
      var v17418 = JAM.call(TypeScript$$12.hasFlag, TypeScript$$12, [v21965, v21966], JAM.policy.p1);
      var v21967 = !v17418;
      if (v21967) {
        v17418 = funcDecl$$2.isOverload;
      }
      var v9985 = v17418;
      if (v9985) {
        return;
      }
      var temp$$12;
      var tempFnc = this.thisFnc;
      this.thisFnc = funcDecl$$2;
      var v9988 = funcDecl$$2.isConstructor;
      if (v9988) {
        var v9986 = EmitContainer.Constructor;
        temp$$12 = JAM.call(this.setContainer, this, [v9986]);
      } else {
        var v9987 = EmitContainer.Function;
        temp$$12 = JAM.call(this.setContainer, this, [v9987]);
      }
      var bases$$2 = null;
      var hasSelfRef$$1 = false;
      var funcName = funcDecl$$2.getNameText();
      var v24326 = this.emitState;
      var v21968 = v24326.inObjectLiteral;
      var v24328 = !v21968;
      if (v24328) {
        var v24327 = funcDecl$$2.isAccessor();
        v21968 = !v24327;
      }
      var v17419 = v21968;
      if (v17419) {
        var v24329 = EmitContainer.Constructor;
        var v21969 = temp$$12 != v24329;
        var v24332 = !v21969;
        if (v24332) {
          var v25430 = funcDecl$$2.fncFlags;
          var v25965 = TypeScript$$12.FncFlags;
          var v25431 = v25965.Method;
          var v24330 = v25430 & v25431;
          var v25432 = TypeScript$$12.FncFlags;
          var v24331 = v25432.None;
          v21969 = v24330 == v24331;
        }
        v17419 = v21969;
      }
      var v9996 = v17419;
      if (v9996) {
        var tempLit = JAM.call(this.setInObjectLiteral, this, [false]);
        var v9990 = this.thisClassNode;
        if (v9990) {
          var v9989 = this.thisClassNode;
          bases$$2 = v9989.extendsList;
        }
        hasSelfRef$$1 = JAM.call(Emitter$$1.shouldCaptureThis, Emitter$$1, [funcDecl$$2]);
        JAM.call(this.recordSourceMappingStart, this, [funcDecl$$2]);
        var v24333 = funcDecl$$2.fncFlags;
        var v25966 = TypeScript$$12.FncFlags;
        var v25433 = v25966.Exported;
        var v25967 = TypeScript$$12.FncFlags;
        var v25434 = v25967.ClassPropertyMethodExported;
        var v24334 = v25433 | v25434;
        var v21970 = JAM.call(TypeScript$$12.hasFlag, TypeScript$$12, [v24333, v24334], JAM.policy.p1);
        if (v21970) {
          var v25968 = funcDecl$$2.type;
          var v25435 = v25968.symbol;
          var v24335 = v25435.container;
          var v25436 = this.checker;
          var v24336 = v25436.gloMod;
          v21970 = v24335 == v24336;
        }
        var v17420 = v21970;
        if (v17420) {
          var v21971 = funcDecl$$2.isConstructor;
          v17420 = !v21971;
        }
        var v9995 = v17420;
        if (v9995) {
          var v17421 = "this." + funcName;
          var v9991 = v17421 + " = ";
          JAM.call(this.writeToOutput, this, [v9991]);
          var v9992 = this.thisClassNode;
          JAM.call(this.emitInnerFunction, this, [funcDecl$$2, false, false, bases$$2, hasSelfRef$$1, v9992], JAM.policy.p1);
        } else {
          var v17422 = funcDecl$$2.name;
          if (v17422) {
            var v24337 = funcDecl$$2.name;
            var v21972 = v24337.isMissing();
            v17422 = !v21972;
          }
          var v9993 = v17422;
          var v9994 = this.thisClassNode;
          JAM.call(this.emitInnerFunction, this, [funcDecl$$2, v9993, false, bases$$2, hasSelfRef$$1, v9994], JAM.policy.p1);
        }
        JAM.call(this.setInObjectLiteral, this, [tempLit]);
      }
      JAM.call(this.setContainer, this, [temp$$12]);
      this.thisFnc = tempFnc;
      var v17423 = funcDecl$$2.fncFlags;
      var v21973 = TypeScript$$12.FncFlags;
      var v17424 = v21973.Definition;
      var v10005 = JAM.call(TypeScript$$12.hasFlag, TypeScript$$12, [v17423, v17424], JAM.policy.p1);
      if (v10005) {
        var v17425 = funcDecl$$2.fncFlags;
        var v21974 = TypeScript$$12.FncFlags;
        var v17426 = v21974.Static;
        var v10004 = JAM.call(TypeScript$$12.hasFlag, TypeScript$$12, [v17425, v17426], JAM.policy.p1);
        if (v10004) {
          var v10000 = this.thisClassNode;
          if (v10000) {
            var v9999 = funcDecl$$2.isAccessor();
            if (v9999) {
              var v21975 = this.thisClassNode;
              var v17427 = v21975.name;
              var v9997 = v17427.actualText;
              JAM.call(this.emitPropertyAccessor, this, [funcDecl$$2, v9997, false], JAM.policy.p1);
            } else {
              this.emitIndent();
              JAM.call(this.recordSourceMappingStart, this, [funcDecl$$2]);
              var v26329 = this.thisClassNode;
              var v26217 = v26329.name;
              var v25969 = v26217.actualText;
              var v25437 = v25969 + ".";
              var v24338 = v25437 + funcName;
              var v21976 = v24338 + " = ";
              var v17428 = v21976 + funcName;
              var v9998 = v17428 + ";";
              JAM.call(this.writeLineToOutput, this, [v9998]);
              JAM.call(this.recordSourceMappingEnd, this, [funcDecl$$2]);
            }
          }
        } else {
          var v25438 = this.emitState;
          var v24339 = v25438.container;
          var v24340 = EmitContainer.Module;
          var v21977 = v24339 == v24340;
          var v24343 = !v21977;
          if (v24343) {
            var v25439 = this.emitState;
            var v24341 = v25439.container;
            var v24342 = EmitContainer.DynamicModule;
            v21977 = v24341 == v24342;
          }
          var v17429 = v21977;
          if (v17429) {
            var v21978 = funcDecl$$2.fncFlags;
            var v25440 = TypeScript$$12.FncFlags;
            var v24344 = v25440.Exported;
            var v25441 = TypeScript$$12.FncFlags;
            var v24345 = v25441.ClassPropertyMethodExported;
            var v21979 = v24344 | v24345;
            v17429 = JAM.call(TypeScript$$12.hasFlag, TypeScript$$12, [v21978, v21979], JAM.policy.p1);
          }
          var v10003 = v17429;
          if (v10003) {
            this.emitIndent();
            var v10001;
            var v24346 = this.emitState;
            var v21980 = v24346.container;
            var v21981 = EmitContainer.Module;
            var v17430 = v21980 == v21981;
            if (v17430) {
              v10001 = this.moduleName;
            } else {
              v10001 = "exports";
            }
            var modName$$1 = v10001;
            JAM.call(this.recordSourceMappingStart, this, [funcDecl$$2]);
            var v25442 = modName$$1 + ".";
            var v24347 = v25442 + funcName;
            var v21982 = v24347 + " = ";
            var v17431 = v21982 + funcName;
            var v10002 = v17431 + ";";
            JAM.call(this.writeLineToOutput, this, [v10002]);
            JAM.call(this.recordSourceMappingEnd, this, [funcDecl$$2]);
          }
        }
      }
      return;
    }
    function v463(text$$11) {
      JAM.call(this.writeToOutput, this, [text$$11]);
      return;
    }
    function v462(operand1$$2, operand2$$2) {
      var temp$$11 = JAM.call(this.setInObjectLiteral, this, [false]);
      var v17432 = TypeScript$$12.TokenID;
      var v10006 = v17432.Tilde;
      JAM.call(this.emitJavascript, this, [operand1$$2, v10006, false], JAM.policy.p1);
      JAM.call(this.writeToOutput, this, ["["]);
      var v17433 = TypeScript$$12.TokenID;
      var v10007 = v17433.Comma;
      JAM.call(this.emitJavascriptList, this, [operand2$$2, ", ", v10007, false, false], JAM.policy.p1);
      JAM.call(this.writeToOutput, this, ["]"]);
      JAM.call(this.setInObjectLiteral, this, [temp$$11]);
      return;
    }
    function v461(moduleDecl) {
      var v10008 = moduleDecl.name;
      var modName = v10008.actualText;
      var v10014 = JAM.call(TypeScript$$12.isTSFile, TypeScript$$12, [modName]);
      if (v10014) {
        var v10009 = moduleDecl.name;
        var v21983 = modName.length;
        var v17434 = v21983 - 3;
        var v10010 = JAM.call(modName.substring, modName, [0, v17434], JAM.policy.p1);
        JAM.call(v10009.setText, v10009, [v10010]);
      } else {
        var v10013 = JAM.call(TypeScript$$12.isSTRFile, TypeScript$$12, [modName]);
        if (v10013) {
          var v10011 = moduleDecl.name;
          var v21984 = modName.length;
          var v17435 = v21984 - 4;
          var v10012 = JAM.call(modName.substring, modName, [0, v17435], JAM.policy.p1);
          JAM.call(v10011.setText, v10011, [v10012]);
        }
      }
      var v21985 = moduleDecl.modFlags;
      var v24348 = TypeScript$$12.ModuleFlags;
      var v21986 = v24348.Ambient;
      var v17436 = JAM.call(TypeScript$$12.hasFlag, TypeScript$$12, [v21985, v21986], JAM.policy.p1);
      var v10094 = !v17436;
      if (v10094) {
        var v10015 = moduleDecl.modFlags;
        var v17437 = TypeScript$$12.ModuleFlags;
        var v10016 = v17437.IsDynamic;
        var isDynamicMod = JAM.call(TypeScript$$12.hasFlag, TypeScript$$12, [v10015, v10016], JAM.policy.p1);
        var prevOutFile = this.outfile;
        var prevOutFileName = this.emittingFileName;
        var prevAllSourceMappers = this.allSourceMappers;
        var prevSourceMapper = this.sourceMapper;
        var v10017 = this.emitState;
        var prevColumn = v10017.column;
        var v10018 = this.emitState;
        var prevLine = v10018.line;
        var v10019 = EmitContainer.Module;
        var temp$$10 = JAM.call(this.setContainer, this, [v10019]);
        var svModuleName = this.moduleName;
        var v10020 = moduleDecl.modFlags;
        var v17438 = TypeScript$$12.ModuleFlags;
        var v10021 = v17438.Exported;
        var isExported = JAM.call(TypeScript$$12.hasFlag, TypeScript$$12, [v10020, v10021], JAM.policy.p1);
        var v10022 = this.moduleDeclList;
        var v17439 = this.moduleDeclList;
        var v10023 = v17439.length;
        JAM.set(v10022, v10023, moduleDecl);
        var v10024 = moduleDecl.modFlags;
        var v17440 = TypeScript$$12.ModuleFlags;
        var v10025 = v17440.IsWholeFile;
        var isWholeFile = JAM.call(TypeScript$$12.hasFlag, TypeScript$$12, [v10024, v10025], JAM.policy.p1);
        var v10026 = moduleDecl.name;
        this.moduleName = v10026.actualText;
        if (isDynamicMod) {
          var v17441 = moduleDecl.name;
          var v10027 = v17441.actualText;
          var tsModFileName = JAM.call(TypeScript$$12.stripQuotes, TypeScript$$12, [v10027]);
          var v10028 = JAM.call(TypeScript$$12.trimModName, TypeScript$$12, [tsModFileName]);
          var modFilePath = v10028 + ".js";
          var v10029 = this.emitOptions;
          var v17442 = TypeScript$$12.TypeScriptCompiler;
          var v10030 = v17442.mapToJSFileName;
          modFilePath = JAM.call(v10029.mapOutputFileName, v10029, [modFilePath, v10030], JAM.policy.p1);
          var v17443 = this.emitOptions;
          var v10041 = v17443.ioHost;
          if (v10041) {
            var v17444 = JAM.call(TypeScript$$12.switchToForwardSlashes, TypeScript$$12, [modFilePath]);
            var v21987 = this.emittingFileName;
            var v17445 = JAM.call(TypeScript$$12.switchToForwardSlashes, TypeScript$$12, [v21987]);
            var v10040 = v17444 != v17445;
            if (v10040) {
              this.emittingFileName = modFilePath;
              var v10031 = moduleDecl.containsUnicodeChar;
              var v17447 = !v10031;
              if (v17447) {
                var v21988 = this.emitOptions;
                var v17446 = v21988.emitComments;
                if (v17446) {
                  v17446 = moduleDecl.containsUnicodeCharInComment;
                }
                v10031 = v17446;
              }
              var useUTF8InOutputfile = v10031;
              var v10032 = this.emittingFileName;
              var v26987 = JAM.call(this.createFile, this, [v10032, useUTF8InOutputfile], JAM.policy.p1);
              this.outfile = v26987;
              var v10037 = prevSourceMapper != null;
              if (v10037) {
                this.allSourceMappers = [];
                var v17448 = this.emittingFileName;
                var v21989 = TypeScript$$12.SourceMapper;
                var v17449 = v21989.MapFileExtension;
                var v10033 = v17448 + v17449;
                var sourceMappingFile = JAM.call(this.createFile, this, [v10033, false], JAM.policy.p1);
                var v17450 = TypeScript$$12.SourceMapper;
                var v17451 = this.emittingFileName;
                var v17452 = this.outfile;
                var v17453 = this.errorReporter;
                var v10034 = JAM.new(v17450, [tsModFileName, v17451, v17452, sourceMappingFile, v17453]);
                JAM.call(this.setSourceMappings, this, [v10034]);
                var v10035 = this.emitState;
                v10035.column = 0;
                var v10036 = this.emitState;
                v10036.line = 0;
              }
            } else {
              var v10038 = TypeScript$$12.CompilerDiagnostics;
              var v17454 = this.emitOptions;
              var v10039 = v17454.outputMany;
              JAM.call(v10038.assert, v10038, [v10039, "Cannot have dynamic modules compiling into single file"], JAM.policy.p1);
            }
          }
          var v10042 = EmitContainer.DynamicModule;
          JAM.call(this.setContainer, this, [v10042]);
          JAM.call(this.recordSourceMappingStart, this, [moduleDecl]);
          var v17455 = TypeScript$$12.moduleGenTarget;
          var v21990 = TypeScript$$12.ModuleGenTarget;
          var v17456 = v21990.Asynchronous;
          var v10049 = v17455 == v17456;
          if (v10049) {
            var dependencyList = '["require", "exports"';
            var importList = "require, exports";
            var importStatement = null;
            var i$$43 = 0;
            var v24349 = moduleDecl.mod;
            var v21991 = v24349.importedModules;
            var v17457 = v21991.length;
            var v10046 = i$$43 < v17457;
            for (;v10046;) {
              var v17458 = moduleDecl.mod;
              var v10043 = v17458.importedModules;
              importStatement = v10043[i$$43];
              var v21992 = importStatement.id;
              var v17459 = v21992.sym;
              if (v17459) {
                var v25443 = importStatement.id;
                var v24350 = v25443.sym;
                var v21993 = v24350.onlyReferencedAsTypeRef;
                v17459 = !v21993;
              }
              var v10045 = v17459;
              if (v10045) {
                var v25444 = moduleDecl.mod;
                var v24351 = v25444.importedModules;
                var v21994 = v24351.length;
                var v17460 = v21994 - 1;
                var v10044 = i$$43 <= v17460;
                if (v10044) {
                  dependencyList = dependencyList + ", ";
                  importList = importList + ", ";
                }
                var v25445 = importStatement.id;
                var v24352 = v25445.actualText;
                var v21995 = "__" + v24352;
                var v17461 = v21995 + "__";
                importList = importList + v17461;
                var v17462 = importStatement.firstAliasedModToString();
                dependencyList = dependencyList + v17462;
              }
              i$$43++;
              var v24353 = moduleDecl.mod;
              var v21996 = v24353.importedModules;
              var v17463 = v21996.length;
              v10046 = i$$43 < v17463;
            }
            i$$43 = 0;
            var v21997 = moduleDecl.amdDependencies;
            var v17464 = v21997.length;
            var v10047 = i$$43 < v17464;
            for (;v10047;) {
              var v25446 = moduleDecl.amdDependencies;
              var v24354 = v25446[i$$43];
              var v21998 = ', "' + v24354;
              var v17465 = v21998 + '"';
              dependencyList = dependencyList + v17465;
              i$$43++;
              var v21999 = moduleDecl.amdDependencies;
              var v17466 = v21999.length;
              v10047 = i$$43 < v17466;
            }
            dependencyList = dependencyList + "]";
            var v25447 = "define(" + dependencyList;
            var v24355 = v25447 + ",";
            var v22000 = v24355 + " function(";
            var v17467 = v22000 + importList;
            var v10048 = v17467 + ") {";
            JAM.call(this.writeLineToOutput, this, [v10048]);
          } else {
          }
        } else {
          var v10053 = !isExported;
          if (v10053) {
            JAM.call(this.recordSourceMappingStart, this, [moduleDecl]);
            JAM.call(this.writeToOutput, this, ["var "]);
            var v10050 = moduleDecl.name;
            JAM.call(this.recordSourceMappingStart, this, [v10050]);
            var v10051 = this.moduleName;
            JAM.call(this.writeToOutput, this, [v10051]);
            var v10052 = moduleDecl.name;
            JAM.call(this.recordSourceMappingEnd, this, [v10052]);
            JAM.call(this.writeLineToOutput, this, [";"]);
            JAM.call(this.recordSourceMappingEnd, this, [moduleDecl]);
            this.emitIndent();
          }
          JAM.call(this.writeToOutput, this, ["("]);
          JAM.call(this.recordSourceMappingStart, this, [moduleDecl]);
          JAM.call(this.writeToOutput, this, ["function ("]);
          var v10054 = moduleDecl.name;
          JAM.call(this.recordSourceMappingStart, this, [v10054]);
          var v10055 = this.moduleName;
          JAM.call(this.writeToOutput, this, [v10055]);
          var v10056 = moduleDecl.name;
          JAM.call(this.recordSourceMappingEnd, this, [v10056]);
          JAM.call(this.writeLineToOutput, this, [") {"]);
        }
        var v10058 = !isWholeFile;
        if (v10058) {
          var v10057 = this.moduleName;
          JAM.call(this.recordSourceMappingNameStart, this, [v10057]);
        }
        var v17468 = !isDynamicMod;
        var v22003 = !v17468;
        if (v22003) {
          var v22001 = TypeScript$$12.moduleGenTarget;
          var v24356 = TypeScript$$12.ModuleGenTarget;
          var v22002 = v24356.Asynchronous;
          v17468 = v22001 == v22002;
        }
        var v10060 = v17468;
        if (v10060) {
          var v10059 = this.indenter;
          v10059.increaseIndent();
        }
        var v17469 = moduleDecl.modFlags;
        var v22004 = TypeScript$$12.ModuleFlags;
        var v17470 = v22004.MustCaptureThis;
        var v10061 = v17469 & v17470;
        if (v10061) {
          JAM.call(this.writeCaptureThisStatement, this, [moduleDecl]);
        }
        var v10062 = moduleDecl.members;
        var v17471 = TypeScript$$12.TokenID;
        var v10063 = v17471.Semicolon;
        JAM.call(this.emitJavascriptList, this, [v10062, null, v10063, true, false], JAM.policy.p1);
        var v17472 = !isDynamicMod;
        var v22007 = !v17472;
        if (v22007) {
          var v22005 = TypeScript$$12.moduleGenTarget;
          var v24357 = TypeScript$$12.ModuleGenTarget;
          var v22006 = v24357.Asynchronous;
          v17472 = v22005 == v22006;
        }
        var v10065 = v17472;
        if (v10065) {
          var v10064 = this.indenter;
          v10064.decreaseIndent();
        }
        this.emitIndent();
        if (isDynamicMod) {
          var v17473 = TypeScript$$12.moduleGenTarget;
          var v22008 = TypeScript$$12.ModuleGenTarget;
          var v17474 = v22008.Asynchronous;
          var v10066 = v17473 == v17474;
          if (v10066) {
            JAM.call(this.writeLineToOutput, this, ["})"]);
          } else {
          }
          var v10067 = !isWholeFile;
          if (v10067) {
            this.recordSourceMappingNameEnd();
          }
          JAM.call(this.recordSourceMappingEnd, this, [moduleDecl]);
          var v17475 = this.outfile;
          var v10071 = v17475 != prevOutFile;
          if (v10071) {
            this.Close();
            var v10070 = prevSourceMapper != null;
            if (v10070) {
              this.allSourceMappers = prevAllSourceMappers;
              this.sourceMapper = prevSourceMapper;
              var v10068 = this.emitState;
              v10068.column = prevColumn;
              var v10069 = this.emitState;
              v10069.line = prevLine;
            }
            this.outfile = prevOutFile;
            this.emittingFileName = prevOutFileName;
          }
        } else {
          var containingMod = null;
          var v22009 = moduleDecl.type;
          if (v22009) {
            var v25448 = moduleDecl.type;
            var v24358 = v25448.symbol;
            v22009 = v24358.container;
          }
          var v17476 = v22009;
          if (v17476) {
            var v25449 = moduleDecl.type;
            var v24359 = v25449.symbol;
            var v22010 = v24359.container;
            v17476 = v22010.declAST;
          }
          var v10073 = v17476;
          if (v10073) {
            var v22011 = moduleDecl.type;
            var v17477 = v22011.symbol;
            var v10072 = v17477.container;
            containingMod = v10072.declAST;
          }
          var v10074 = containingMod;
          if (v10074) {
            var v17478 = containingMod.modFlags;
            var v22012 = TypeScript$$12.ModuleFlags;
            var v17479 = v22012.IsDynamic;
            v10074 = JAM.call(TypeScript$$12.hasFlag, TypeScript$$12, [v17478, v17479], JAM.policy.p1);
          }
          var parentIsDynamic = v10074;
          var v10075 = moduleDecl.endingToken;
          JAM.call(this.recordSourceMappingStart, this, [v10075]);
          var v22013 = EmitContainer.Prog;
          var v17480 = temp$$10 == v22013;
          if (v17480) {
            v17480 = isExported;
          }
          var v10090 = v17480;
          if (v10090) {
            JAM.call(this.writeToOutput, this, ["}"]);
            var v10076 = !isWholeFile;
            if (v10076) {
              this.recordSourceMappingNameEnd();
            }
            var v10077 = moduleDecl.endingToken;
            JAM.call(this.recordSourceMappingEnd, this, [v10077]);
            var v25450 = this.moduleName;
            var v24360 = ")(this." + v25450;
            var v22014 = v24360 + " || (this.";
            var v22015 = this.moduleName;
            var v17481 = v22014 + v22015;
            var v10078 = v17481 + " = {}));";
            JAM.call(this.writeLineToOutput, this, [v10078]);
          } else {
            var v17482 = isExported;
            var v22017 = !v17482;
            if (v22017) {
              var v22016 = EmitContainer.Prog;
              v17482 = temp$$10 == v22016;
            }
            var v10089 = v17482;
            if (v10089) {
              var v10079;
              var v17484 = svModuleName != "";
              if (v17484) {
                var v22018;
                if (parentIsDynamic) {
                  v22018 = "exports";
                } else {
                  v22018 = svModuleName;
                }
                var v17483 = v22018;
                v10079 = v17483 + ".";
              } else {
                v10079 = svModuleName;
              }
              var dotMod = v10079;
              JAM.call(this.writeToOutput, this, ["}"]);
              var v10080 = !isWholeFile;
              if (v10080) {
                this.recordSourceMappingNameEnd();
              }
              var v10081 = moduleDecl.endingToken;
              JAM.call(this.recordSourceMappingEnd, this, [v10081]);
              var v25970 = ")(" + dotMod;
              var v25971 = this.moduleName;
              var v25451 = v25970 + v25971;
              var v24361 = v25451 + " || (";
              var v22019 = v24361 + dotMod;
              var v22020 = this.moduleName;
              var v17485 = v22019 + v22020;
              var v10082 = v17485 + " = {}));";
              JAM.call(this.writeLineToOutput, this, [v10082]);
            } else {
              var v17486 = !isExported;
              if (v17486) {
                var v22021 = EmitContainer.Prog;
                v17486 = temp$$10 != v22021;
              }
              var v10088 = v17486;
              if (v10088) {
                JAM.call(this.writeToOutput, this, ["}"]);
                var v10083 = !isWholeFile;
                if (v10083) {
                  this.recordSourceMappingNameEnd();
                }
                var v10084 = moduleDecl.endingToken;
                JAM.call(this.recordSourceMappingEnd, this, [v10084]);
                var v25452 = this.moduleName;
                var v24362 = ")(" + v25452;
                var v22022 = v24362 + " || (";
                var v22023 = this.moduleName;
                var v17487 = v22022 + v22023;
                var v10085 = v17487 + " = {}));";
                JAM.call(this.writeLineToOutput, this, [v10085]);
              } else {
                JAM.call(this.writeToOutput, this, ["}"]);
                var v10086 = !isWholeFile;
                if (v10086) {
                  this.recordSourceMappingNameEnd();
                }
                var v10087 = moduleDecl.endingToken;
                JAM.call(this.recordSourceMappingEnd, this, [v10087]);
                JAM.call(this.writeLineToOutput, this, [")();"]);
              }
            }
          }
          JAM.call(this.recordSourceMappingEnd, this, [moduleDecl]);
          var v22024 = EmitContainer.Prog;
          var v17488 = temp$$10 != v22024;
          if (v17488) {
            v17488 = isExported;
          }
          var v10093 = v17488;
          if (v10093) {
            this.emitIndent();
            JAM.call(this.recordSourceMappingStart, this, [moduleDecl]);
            if (parentIsDynamic) {
              var v25453 = this.moduleName;
              var v24363 = "var " + v25453;
              var v22025 = v24363 + " = exports.";
              var v22026 = this.moduleName;
              var v17489 = v22025 + v22026;
              var v10091 = v17489 + ";";
              JAM.call(this.writeLineToOutput, this, [v10091]);
            } else {
              var v26218 = this.moduleName;
              var v25972 = "var " + v26218;
              var v25454 = v25972 + " = ";
              var v24364 = v25454 + svModuleName;
              var v22027 = v24364 + ".";
              var v22028 = this.moduleName;
              var v17490 = v22027 + v22028;
              var v10092 = v17490 + ";";
              JAM.call(this.writeLineToOutput, this, [v10092]);
            }
            JAM.call(this.recordSourceMappingEnd, this, [moduleDecl]);
          }
        }
        JAM.call(this.setContainer, this, [temp$$10]);
        this.moduleName = svModuleName;
        this.moduleDeclList.length--;
      }
      return;
    }
    function v460(funcDecl$$1, printName, isMember, bases$$1, hasSelfRef, classDecl$$1) {
      var v10095 = funcDecl$$1.isConstructor;
      if (v10095) {
        var v17491 = funcDecl$$1.fncFlags;
        var v22029 = TypeScript$$12.FncFlags;
        var v17492 = v22029.ClassMethod;
        v10095 = JAM.call(TypeScript$$12.hasFlag, TypeScript$$12, [v17491, v17492], JAM.policy.p1);
      }
      var isClassConstructor = v10095;
      var v17493 = isClassConstructor;
      if (v17493) {
        var v25973 = this.thisClassNode;
        var v25455 = v25973.type;
        var v24365 = v25455.instanceType;
        var v22030 = v24365.typeFlags;
        var v24366 = TypeScript$$12.TypeFlags;
        var v22031 = v24366.HasBaseType;
        v17493 = JAM.call(TypeScript$$12.hasFlag, TypeScript$$12, [v22030, v22031], JAM.policy.p1);
      }
      var v10096 = v17493;
      if (v10096) {
        var v25974 = this.thisClassNode;
        var v25456 = v25974.type;
        var v24367 = v25456.instanceType;
        var v22032 = v24367.typeFlags;
        var v24368 = TypeScript$$12.TypeFlags;
        var v22033 = v24368.HasBaseTypeOfObject;
        var v17494 = JAM.call(TypeScript$$12.hasFlag, TypeScript$$12, [v22032, v22033], JAM.policy.p1);
        v10096 = !v17494;
      }
      var hasNonObjectBaseType = v10096;
      var v10097 = hasNonObjectBaseType;
      if (v10097) {
        var v22034 = this.thisClassNode;
        var v17495 = v22034.varFlags;
        var v22035 = TypeScript$$12.VarFlags;
        var v17496 = v22035.ClassSuperMustBeFirstCallInConstructor;
        v10097 = JAM.call(TypeScript$$12.hasFlag, TypeScript$$12, [v17495, v17496], JAM.policy.p1);
      }
      var classPropertiesMustComeAfterSuperCall = v10097;
      var v24369 = funcDecl$$1.fncFlags;
      var v25457 = TypeScript$$12.FncFlags;
      var v24370 = v25457.IsFunctionExpression;
      var v22036 = JAM.call(TypeScript$$12.hasFlag, TypeScript$$12, [v24369, v24370], JAM.policy.p1);
      if (v22036) {
        var v24371 = funcDecl$$1.isParenthesized;
        v22036 = !v24371;
      }
      var v17497 = v22036;
      if (v17497) {
        var v22037 = funcDecl$$1.isAccessor();
        v17497 = !v22037;
      }
      var v10098 = v17497;
      if (v10098) {
        var v22038 = funcDecl$$1.flags;
        var v24372 = TypeScript$$12.ASTFlags;
        var v22039 = v24372.ExplicitSemicolon;
        var v17498 = JAM.call(TypeScript$$12.hasFlag, TypeScript$$12, [v22038, v22039], JAM.policy.p1);
        var v22042 = !v17498;
        if (v22042) {
          var v22040 = funcDecl$$1.flags;
          var v24373 = TypeScript$$12.ASTFlags;
          var v22041 = v24373.AutomaticSemicolon;
          v17498 = JAM.call(TypeScript$$12.hasFlag, TypeScript$$12, [v22040, v22041], JAM.policy.p1);
        }
        v10098 = v17498;
      }
      var shouldParenthesize = v10098;
      JAM.call(this.emitParensAndCommentsInPlace, this, [funcDecl$$1, true], JAM.policy.p1);
      if (shouldParenthesize) {
        JAM.call(this.writeToOutput, this, ["("]);
      }
      JAM.call(this.recordSourceMappingStart, this, [funcDecl$$1]);
      var v22043 = funcDecl$$1.isAccessor();
      if (v22043) {
        var v24374 = funcDecl$$1.accessorSymbol;
        v22043 = v24374.isObjectLitField;
      }
      var v17499 = v22043;
      var v10099 = !v17499;
      if (v10099) {
        JAM.call(this.writeToOutput, this, ["function "]);
      }
      if (printName) {
        var id$$8 = funcDecl$$1.getNameText();
        var v17500 = id$$8;
        if (v17500) {
          var v22044 = funcDecl$$1.isAccessor();
          v17500 = !v22044;
        }
        var v10104 = v17500;
        if (v10104) {
          var v10101 = funcDecl$$1.name;
          if (v10101) {
            var v10100 = funcDecl$$1.name;
            JAM.call(this.recordSourceMappingStart, this, [v10100]);
          }
          JAM.call(this.writeToOutput, this, [id$$8]);
          var v10103 = funcDecl$$1.name;
          if (v10103) {
            var v10102 = funcDecl$$1.name;
            JAM.call(this.recordSourceMappingEnd, this, [v10102]);
          }
        }
      }
      JAM.call(this.writeToOutput, this, ["("]);
      var argsLen = 0;
      var i$$42 = 0;
      var arg$$3;
      var defaultArgs = [];
      var v10113 = funcDecl$$1.arguments;
      if (v10113) {
        var v10105 = EmitContainer.Args;
        var tempContainer = JAM.call(this.setContainer, this, [v10105]);
        var v17501 = funcDecl$$1.arguments;
        var v10106 = v17501.members;
        argsLen = v10106.length;
        var printLen = argsLen;
        var v10107 = funcDecl$$1.variableArgList;
        if (v10107) {
          printLen--;
        }
        i$$42 = 0;
        var v10112 = i$$42 < printLen;
        for (;v10112;) {
          var v17502 = funcDecl$$1.arguments;
          var v10108 = v17502.members;
          arg$$3 = v10108[i$$42];
          var v10109 = arg$$3.init;
          if (v10109) {
            JAM.call(defaultArgs.push, defaultArgs, [arg$$3]);
          }
          var v17503 = TypeScript$$12.TokenID;
          var v10110 = v17503.OpenParen;
          JAM.call(this.emitJavascript, this, [arg$$3, v10110, false], JAM.policy.p1);
          var v17504 = printLen - 1;
          var v10111 = i$$42 < v17504;
          if (v10111) {
            JAM.call(this.writeToOutput, this, [", "]);
          }
          i$$42++;
          v10112 = i$$42 < printLen;
        }
        JAM.call(this.setContainer, this, [tempContainer]);
      }
      JAM.call(this.writeLineToOutput, this, [") {"]);
      var v10119 = funcDecl$$1.isConstructor;
      if (v10119) {
        JAM.call(this.recordSourceMappingNameStart, this, ["constructor"]);
      } else {
        var v10118 = funcDecl$$1.isGetAccessor();
        if (v10118) {
          var v17505 = funcDecl$$1.getNameText();
          var v10114 = "get_" + v17505;
          JAM.call(this.recordSourceMappingNameStart, this, [v10114]);
        } else {
          var v10117 = funcDecl$$1.isSetAccessor();
          if (v10117) {
            var v17506 = funcDecl$$1.getNameText();
            var v10115 = "set_" + v17506;
            JAM.call(this.recordSourceMappingNameStart, this, [v10115]);
          } else {
            var v10116 = funcDecl$$1.getNameText();
            JAM.call(this.recordSourceMappingNameStart, this, [v10116]);
          }
        }
      }
      var v10120 = this.indenter;
      v10120.increaseIndent();
      i$$42 = 0;
      var v17507 = defaultArgs.length;
      var v10127 = i$$42 < v17507;
      for (;v10127;) {
        arg$$3 = defaultArgs[i$$42];
        this.emitIndent();
        JAM.call(this.recordSourceMappingStart, this, [arg$$3]);
        var v24375 = arg$$3.id;
        var v22045 = v24375.actualText;
        var v17508 = "if (typeof " + v22045;
        var v10121 = v17508 + ' === "undefined") { ';
        JAM.call(this.writeToOutput, this, [v10121]);
        var v10122 = arg$$3.id;
        JAM.call(this.recordSourceMappingStart, this, [v10122]);
        var v17509 = arg$$3.id;
        var v10123 = v17509.actualText;
        JAM.call(this.writeToOutput, this, [v10123]);
        var v10124 = arg$$3.id;
        JAM.call(this.recordSourceMappingEnd, this, [v10124]);
        JAM.call(this.writeToOutput, this, [" = "]);
        var v10125 = arg$$3.init;
        var v17510 = TypeScript$$12.TokenID;
        var v10126 = v17510.OpenParen;
        JAM.call(this.emitJavascript, this, [v10125, v10126, false], JAM.policy.p1);
        JAM.call(this.writeLineToOutput, this, ["; }"]);
        JAM.call(this.recordSourceMappingEnd, this, [arg$$3]);
        i$$42++;
        var v17511 = defaultArgs.length;
        v10127 = i$$42 < v17511;
      }
      var v17512 = funcDecl$$1.isConstructor;
      if (v17512) {
        var v24376 = funcDecl$$1.classDecl;
        var v22046 = v24376.varFlags;
        var v24377 = TypeScript$$12.VarFlags;
        var v22047 = v24377.MustCaptureThis;
        v17512 = v22046 & v22047;
      }
      var v10128 = v17512;
      if (v10128) {
        JAM.call(this.writeCaptureThisStatement, this, [funcDecl$$1]);
      }
      var v17513 = funcDecl$$1.isConstructor;
      if (v17513) {
        v17513 = !classPropertiesMustComeAfterSuperCall;
      }
      var v10141 = v17513;
      if (v10141) {
        var v10139 = funcDecl$$1.arguments;
        if (v10139) {
          var v17514 = funcDecl$$1.arguments;
          var v10129 = v17514.members;
          argsLen = v10129.length;
          i$$42 = 0;
          var v10138 = i$$42 < argsLen;
          for (;v10138;) {
            var v17515 = funcDecl$$1.arguments;
            var v10130 = v17515.members;
            arg$$3 = v10130[i$$42];
            var v22048 = arg$$3.varFlags;
            var v24378 = TypeScript$$12.VarFlags;
            var v22049 = v24378.Property;
            var v17516 = v22048 & v22049;
            var v22050 = TypeScript$$12.VarFlags;
            var v17517 = v22050.None;
            var v10137 = v17516 != v17517;
            if (v10137) {
              this.emitIndent();
              JAM.call(this.recordSourceMappingStart, this, [arg$$3]);
              var v10131 = arg$$3.id;
              JAM.call(this.recordSourceMappingStart, this, [v10131]);
              var v22051 = arg$$3.id;
              var v17518 = v22051.actualText;
              var v10132 = "this." + v17518;
              JAM.call(this.writeToOutput, this, [v10132]);
              var v10133 = arg$$3.id;
              JAM.call(this.recordSourceMappingEnd, this, [v10133]);
              JAM.call(this.writeToOutput, this, [" = "]);
              var v10134 = arg$$3.id;
              JAM.call(this.recordSourceMappingStart, this, [v10134]);
              var v17519 = arg$$3.id;
              var v10135 = v17519.actualText;
              JAM.call(this.writeToOutput, this, [v10135]);
              var v10136 = arg$$3.id;
              JAM.call(this.recordSourceMappingEnd, this, [v10136]);
              JAM.call(this.writeLineToOutput, this, [";"]);
              JAM.call(this.recordSourceMappingEnd, this, [arg$$3]);
            }
            i$$42++;
            v10138 = i$$42 < argsLen;
          }
        }
        var v22052 = funcDecl$$1.fncFlags;
        var v24379 = TypeScript$$12.FncFlags;
        var v22053 = v24379.ClassMethod;
        var v17520 = JAM.call(TypeScript$$12.hasFlag, TypeScript$$12, [v22052, v22053], JAM.policy.p1);
        var v10140 = !v17520;
        if (v10140) {
          JAM.call(this.emitConstructorCalls, this, [bases$$1, classDecl$$1], JAM.policy.p1);
        }
      }
      if (hasSelfRef) {
        JAM.call(this.writeCaptureThisStatement, this, [funcDecl$$1]);
      }
      var v10152 = funcDecl$$1.variableArgList;
      if (v10152) {
        var v17521 = funcDecl$$1.arguments;
        var v10142 = v17521.members;
        argsLen = v10142.length;
        var v17522 = funcDecl$$1.arguments;
        var v10143 = v17522.members;
        var v10144 = argsLen - 1;
        var lastArg = v10143[v10144];
        this.emitIndent();
        JAM.call(this.recordSourceMappingStart, this, [lastArg]);
        JAM.call(this.writeToOutput, this, ["var "]);
        var v10145 = lastArg.id;
        JAM.call(this.recordSourceMappingStart, this, [v10145]);
        var v17523 = lastArg.id;
        var v10146 = v17523.actualText;
        JAM.call(this.writeToOutput, this, [v10146]);
        var v10147 = lastArg.id;
        JAM.call(this.recordSourceMappingEnd, this, [v10147]);
        JAM.call(this.writeLineToOutput, this, [" = [];"]);
        JAM.call(this.recordSourceMappingEnd, this, [lastArg]);
        this.emitIndent();
        JAM.call(this.writeToOutput, this, ["for ("]);
        JAM.call(this.recordSourceMappingStart, this, [lastArg]);
        JAM.call(this.writeToOutput, this, ["var _i = 0;"]);
        JAM.call(this.recordSourceMappingEnd, this, [lastArg]);
        JAM.call(this.writeToOutput, this, [" "]);
        JAM.call(this.recordSourceMappingStart, this, [lastArg]);
        var v22054 = argsLen - 1;
        var v17524 = "_i < (arguments.length - " + v22054;
        var v10148 = v17524 + ")";
        JAM.call(this.writeToOutput, this, [v10148]);
        JAM.call(this.recordSourceMappingEnd, this, [lastArg]);
        JAM.call(this.writeToOutput, this, ["; "]);
        JAM.call(this.recordSourceMappingStart, this, [lastArg]);
        JAM.call(this.writeToOutput, this, ["_i++"]);
        JAM.call(this.recordSourceMappingEnd, this, [lastArg]);
        JAM.call(this.writeLineToOutput, this, [") {"]);
        var v10149 = this.indenter;
        v10149.increaseIndent();
        this.emitIndent();
        JAM.call(this.recordSourceMappingStart, this, [lastArg]);
        var v25458 = lastArg.id;
        var v24380 = v25458.actualText;
        var v22055 = v24380 + "[_i] = arguments[_i + ";
        var v22056 = argsLen - 1;
        var v17525 = v22055 + v22056;
        var v10150 = v17525 + "];";
        JAM.call(this.writeToOutput, this, [v10150]);
        JAM.call(this.recordSourceMappingEnd, this, [lastArg]);
        JAM.call(this.writeLineToOutput, this, [""]);
        var v10151 = this.indenter;
        v10151.decreaseIndent();
        this.emitIndent();
        JAM.call(this.writeLineToOutput, this, ["}"]);
      }
      var v22057 = funcDecl$$1.isConstructor;
      if (v22057) {
        var v24381 = funcDecl$$1.fncFlags;
        var v25459 = TypeScript$$12.FncFlags;
        var v24382 = v25459.ClassMethod;
        v22057 = JAM.call(TypeScript$$12.hasFlag, TypeScript$$12, [v24381, v24382], JAM.policy.p1);
      }
      var v17526 = v22057;
      if (v17526) {
        v17526 = !classPropertiesMustComeAfterSuperCall;
      }
      var v10159 = v17526;
      if (v10159) {
        var v22058 = this.thisClassNode;
        var v17527 = v22058.members;
        var v10153 = v17527.members;
        var nProps = v10153.length;
        i$$42 = 0;
        var v10158 = i$$42 < nProps;
        for (;v10158;) {
          var v25975 = this.thisClassNode;
          var v25460 = v25975.members;
          var v24383 = v25460.members;
          var v22059 = v24383[i$$42];
          var v17528 = v22059.nodeType;
          var v22060 = TypeScript$$12.NodeType;
          var v17529 = v22060.VarDecl;
          var v10157 = v17528 == v17529;
          if (v10157) {
            var v22061 = this.thisClassNode;
            var v17530 = v22061.members;
            var v10154 = v17530.members;
            var varDecl = v10154[i$$42];
            var v24384 = varDecl.varFlags;
            var v25461 = TypeScript$$12.VarFlags;
            var v24385 = v25461.Static;
            var v22062 = JAM.call(TypeScript$$12.hasFlag, TypeScript$$12, [v24384, v24385], JAM.policy.p1);
            var v17531 = !v22062;
            if (v17531) {
              v17531 = varDecl.init;
            }
            var v10156 = v17531;
            if (v10156) {
              this.emitIndent();
              var v17532 = TypeScript$$12.TokenID;
              var v10155 = v17532.Tilde;
              JAM.call(this.emitJavascriptVarDecl, this, [varDecl, v10155], JAM.policy.p1);
              JAM.call(this.writeLineToOutput, this, [""]);
            }
          }
          i$$42++;
          v10158 = i$$42 < nProps;
        }
      }
      var v10160 = funcDecl$$1.bod;
      JAM.call(this.emitBareJavascriptStatements, this, [v10160, classPropertiesMustComeAfterSuperCall], JAM.policy.p1);
      var v10161 = this.indenter;
      v10161.decreaseIndent();
      this.emitIndent();
      var v10162 = funcDecl$$1.endingToken;
      JAM.call(this.recordSourceMappingStart, this, [v10162]);
      JAM.call(this.writeToOutput, this, ["}"]);
      this.recordSourceMappingNameEnd();
      var v10163 = funcDecl$$1.endingToken;
      JAM.call(this.recordSourceMappingEnd, this, [v10163]);
      JAM.call(this.recordSourceMappingEnd, this, [funcDecl$$1]);
      if (shouldParenthesize) {
        JAM.call(this.writeToOutput, this, [")"]);
      }
      JAM.call(this.recordSourceMappingEnd, this, [funcDecl$$1]);
      JAM.call(this.emitParensAndCommentsInPlace, this, [funcDecl$$1, false], JAM.policy.p1);
      var v22063 = !isMember;
      if (v22063) {
        var v25462 = funcDecl$$1.fncFlags;
        var v25976 = TypeScript$$12.FncFlags;
        var v25463 = v25976.IsFunctionExpression;
        var v24386 = JAM.call(TypeScript$$12.hasFlag, TypeScript$$12, [v25462, v25463], JAM.policy.p1);
        v22063 = !v24386;
      }
      var v17533 = v22063;
      if (v17533) {
        var v24387 = funcDecl$$1.fncFlags;
        var v25464 = TypeScript$$12.FncFlags;
        var v24388 = v25464.Definition;
        var v22064 = JAM.call(TypeScript$$12.hasFlag, TypeScript$$12, [v24387, v24388], JAM.policy.p1);
        var v24389 = !v22064;
        if (v24389) {
          v22064 = funcDecl$$1.isConstructor;
        }
        v17533 = v22064;
      }
      var v10166 = v17533;
      if (v10166) {
        JAM.call(this.writeLineToOutput, this, [""]);
      } else {
        var v17534 = funcDecl$$1.fncFlags;
        var v22065 = TypeScript$$12.FncFlags;
        var v17535 = v22065.IsFunctionExpression;
        var v10165 = JAM.call(TypeScript$$12.hasFlag, TypeScript$$12, [v17534, v17535], JAM.policy.p1);
        if (v10165) {
          var v22066 = funcDecl$$1.flags;
          var v24390 = TypeScript$$12.ASTFlags;
          var v22067 = v24390.ExplicitSemicolon;
          var v17536 = JAM.call(TypeScript$$12.hasFlag, TypeScript$$12, [v22066, v22067], JAM.policy.p1);
          var v22070 = !v17536;
          if (v22070) {
            var v22068 = funcDecl$$1.flags;
            var v24391 = TypeScript$$12.ASTFlags;
            var v22069 = v24391.AutomaticSemicolon;
            v17536 = JAM.call(TypeScript$$12.hasFlag, TypeScript$$12, [v22068, v22069], JAM.policy.p1);
          }
          var v10164 = v17536;
          if (v10164) {
            JAM.call(this.writeLineToOutput, this, [";"]);
          }
        }
      }
      return;
    }
    function v459(bases, classDecl) {
      var v10167 = bases == null;
      if (v10167) {
        return;
      }
      var v10168 = bases.members;
      var basesLen = v10168.length;
      JAM.call(this.recordSourceMappingStart, this, [classDecl]);
      var i$$41 = 0;
      var v10179 = i$$41 < basesLen;
      for (;v10179;) {
        var v10169 = bases.members;
        var baseExpr = v10169[i$$41];
        var baseSymbol = null;
        var v17537 = baseExpr.nodeType;
        var v22071 = TypeScript$$12.NodeType;
        var v17538 = v22071.Call;
        var v10172 = v17537 == v17538;
        if (v10172) {
          var v17539 = baseExpr.target;
          var v10170 = v17539.type;
          baseSymbol = v10170.symbol;
        } else {
          var v10171 = baseExpr.type;
          baseSymbol = v10171.symbol;
        }
        var baseName = baseSymbol.name;
        var v17540 = baseSymbol.declModule;
        var v24392 = classDecl.type;
        var v22072 = v24392.symbol;
        var v17541 = v22072.declModule;
        var v10173 = v17540 != v17541;
        if (v10173) {
          baseName = baseSymbol.fullName();
        }
        var v17542 = baseExpr.nodeType;
        var v22073 = TypeScript$$12.NodeType;
        var v17543 = v22073.Call;
        var v10178 = v17542 == v17543;
        if (v10178) {
          this.emitIndent();
          JAM.call(this.writeToOutput, this, ["_super.call(this"]);
          var args$$5 = baseExpr.arguments;
          var v17544 = args$$5;
          if (v17544) {
            var v24393 = args$$5.members;
            var v22074 = v24393.length;
            v17544 = v22074 > 0;
          }
          var v10175 = v17544;
          if (v10175) {
            JAM.call(this.writeToOutput, this, [", "]);
            var v17545 = TypeScript$$12.TokenID;
            var v10174 = v17545.Comma;
            JAM.call(this.emitJavascriptList, this, [args$$5, ", ", v10174, false, false], JAM.policy.p1);
          }
          JAM.call(this.writeToOutput, this, [")"]);
        } else {
          var v17546 = baseExpr.type;
          if (v17546) {
            var v22075 = baseExpr.type;
            v17546 = v22075.isClassInstance();
          }
          var v10177 = v17546;
          if (v10177) {
            this.emitIndent();
            var v22076 = classDecl.name;
            var v17547 = v22076.actualText;
            var v10176 = v17547 + "._super.constructor";
            JAM.call(this.writeToOutput, this, [v10176]);
            JAM.call(this.writeToOutput, this, [".call(this)"]);
          }
        }
        i$$41++;
        v10179 = i$$41 < basesLen;
      }
      JAM.call(this.recordSourceMappingEnd, this, [classDecl]);
      return;
    }
    function v458(callNode, target$$29, args$$4) {
      var v17548 = JAM.call(this.emitSuperCall, this, [callNode]);
      var v10195 = !v17548;
      if (v10195) {
        var v22077 = callNode.flags;
        var v24394 = TypeScript$$12.ASTFlags;
        var v22078 = v24394.ClassBaseConstructorCall;
        var v17549 = JAM.call(TypeScript$$12.hasFlag, TypeScript$$12, [v22077, v22078], JAM.policy.p1);
        var v10194 = !v17549;
        if (v10194) {
          var v22079 = target$$29.nodeType;
          var v24395 = TypeScript$$12.NodeType;
          var v22080 = v24395.FuncDecl;
          var v17550 = v22079 == v22080;
          if (v17550) {
            var v22081 = target$$29.isParenthesized;
            v17550 = !v22081;
          }
          var v10180 = v17550;
          if (v10180) {
            JAM.call(this.writeToOutput, this, ["("]);
          }
          var v24396 = callNode.target;
          var v22082 = v24396.nodeType;
          var v24397 = TypeScript$$12.NodeType;
          var v22083 = v24397.Super;
          var v17551 = v22082 == v22083;
          if (v17551) {
            var v24398 = this.emitState;
            var v22084 = v24398.container;
            var v22085 = EmitContainer.Constructor;
            v17551 = v22084 == v22085;
          }
          var v10182 = v17551;
          if (v10182) {
            JAM.call(this.writeToOutput, this, ["_super.call"]);
          } else {
            var v17552 = TypeScript$$12.TokenID;
            var v10181 = v17552.OpenParen;
            JAM.call(this.emitJavascript, this, [target$$29, v10181, false], JAM.policy.p1);
          }
          var v22086 = target$$29.nodeType;
          var v24399 = TypeScript$$12.NodeType;
          var v22087 = v24399.FuncDecl;
          var v17553 = v22086 == v22087;
          if (v17553) {
            var v22088 = target$$29.isParenthesized;
            v17553 = !v22088;
          }
          var v10183 = v17553;
          if (v10183) {
            JAM.call(this.writeToOutput, this, [")"]);
          }
          JAM.call(this.recordSourceMappingStart, this, [args$$4]);
          JAM.call(this.writeToOutput, this, ["("]);
          var v24400 = callNode.target;
          var v22089 = v24400.nodeType;
          var v24401 = TypeScript$$12.NodeType;
          var v22090 = v24401.Super;
          var v17554 = v22089 == v22090;
          if (v17554) {
            var v24402 = this.emitState;
            var v22091 = v24402.container;
            var v22092 = EmitContainer.Constructor;
            v17554 = v22091 == v22092;
          }
          var v10185 = v17554;
          if (v10185) {
            JAM.call(this.writeToOutput, this, ["this"]);
            var v17555 = args$$4;
            if (v17555) {
              var v22093 = args$$4.members;
              v17555 = v22093.length;
            }
            var v10184 = v17555;
            if (v10184) {
              JAM.call(this.writeToOutput, this, [", "]);
            }
          }
          var v17556 = TypeScript$$12.TokenID;
          var v10186 = v17556.Comma;
          JAM.call(this.emitJavascriptList, this, [args$$4, ", ", v10186, false, false], JAM.policy.p1);
          JAM.call(this.writeToOutput, this, [")"]);
          JAM.call(this.recordSourceMappingEnd, this, [args$$4]);
        } else {
          var v10187 = this.indenter;
          v10187.decreaseIndent();
          var v10188 = this.indenter;
          v10188.decreaseIndent();
          var v10189 = TypeScript$$12.ASTList;
          var constructorCall = new v10189;
          var v10190 = constructorCall.members;
          v10190[0] = callNode;
          var v10191 = this.thisClassNode;
          JAM.call(this.emitConstructorCalls, this, [constructorCall, v10191], JAM.policy.p1);
          var v10192 = this.indenter;
          v10192.increaseIndent();
          var v10193 = this.indenter;
          v10193.increaseIndent();
        }
      }
      return;
    }
    function v457(dotExpr$$2) {
      var v22094 = this.emitOptions;
      var v17557 = v22094.propagateConstants;
      var v10196 = !v17557;
      if (v10196) {
        return false;
      }
      var propertyName$$7 = dotExpr$$2.operand2;
      var v22095 = propertyName$$7;
      if (v22095) {
        v22095 = propertyName$$7.sym;
      }
      var v17558 = v22095;
      if (v17558) {
        var v22096 = propertyName$$7.sym;
        v17558 = v22096.isVariable();
      }
      var v10202 = v17558;
      if (v10202) {
        var v22097 = propertyName$$7.sym;
        var v17559 = v22097.flags;
        var v22098 = TypeScript$$12.SymbolFlags;
        var v17560 = v22098.Constant;
        var v10201 = JAM.call(TypeScript$$12.hasFlag, TypeScript$$12, [v17559, v17560], JAM.policy.p1);
        if (v10201) {
          var v17561 = propertyName$$7.sym;
          var v10200 = v17561.declAST;
          if (v10200) {
            var v10197 = propertyName$$7.sym;
            var boundDecl = v10197.declAST;
            var v17562 = boundDecl.init;
            if (v17562) {
              var v24403 = boundDecl.init;
              var v22099 = v24403.nodeType;
              var v24404 = TypeScript$$12.NodeType;
              var v22100 = v24404.NumberLit;
              v17562 = v22099 == v22100;
            }
            var v10199 = v17562;
            if (v10199) {
              var numLit = boundDecl.init;
              var v17563 = numLit.value;
              var v10198 = v17563.toString();
              JAM.call(this.writeToOutput, this, [v10198]);
              var comment$$1 = " /* ";
              var v17564 = propertyName$$7.actualText;
              comment$$1 = comment$$1 + v17564;
              comment$$1 = comment$$1 + " */ ";
              JAM.call(this.writeToOutput, this, [comment$$1]);
              return true;
            }
          }
        }
      }
      return false;
    }
    function v456(target$$28, args$$3) {
      JAM.call(this.writeToOutput, this, ["new "]);
      var v17565 = target$$28.nodeType;
      var v22101 = TypeScript$$12.NodeType;
      var v17566 = v22101.TypeRef;
      var v10208 = v17565 == v17566;
      if (v10208) {
        var typeRef = target$$28;
        var v10205 = typeRef.arrayCount;
        if (v10205) {
          JAM.call(this.writeToOutput, this, ["Array()"]);
        } else {
          var v10203 = typeRef.term;
          var v17567 = TypeScript$$12.TokenID;
          var v10204 = v17567.Tilde;
          JAM.call(this.emitJavascript, this, [v10203, v10204, false], JAM.policy.p1);
          JAM.call(this.writeToOutput, this, ["()"]);
        }
      } else {
        var v17568 = TypeScript$$12.TokenID;
        var v10206 = v17568.Tilde;
        JAM.call(this.emitJavascript, this, [target$$28, v10206, false], JAM.policy.p1);
        JAM.call(this.recordSourceMappingStart, this, [args$$3]);
        JAM.call(this.writeToOutput, this, ["("]);
        var v17569 = TypeScript$$12.TokenID;
        var v10207 = v17569.Comma;
        JAM.call(this.emitJavascriptList, this, [args$$3, ", ", v10207, false, false], JAM.policy.p1);
        JAM.call(this.writeToOutput, this, [")"]);
        JAM.call(this.recordSourceMappingEnd, this, [args$$3]);
      }
      return;
    }
    function v455(content$$3) {
      JAM.call(this.writeToOutput, this, ["["]);
      if (content$$3) {
        JAM.call(this.writeLineToOutput, this, [""]);
        var v10209 = this.indenter;
        v10209.increaseIndent();
        var v17570 = TypeScript$$12.TokenID;
        var v10210 = v17570.Comma;
        JAM.call(this.emitJavascriptList, this, [content$$3, ", ", v10210, true, false], JAM.policy.p1);
        var v10211 = this.indenter;
        v10211.decreaseIndent();
        this.emitIndent();
      }
      JAM.call(this.writeToOutput, this, ["]"]);
      return;
    }
    function v454(content$$2) {
      JAM.call(this.writeLineToOutput, this, ["{"]);
      var v10212 = this.indenter;
      v10212.increaseIndent();
      var inObjectLiteral = JAM.call(this.setInObjectLiteral, this, [true]);
      var v17571 = TypeScript$$12.TokenID;
      var v10213 = v17571.Comma;
      JAM.call(this.emitJavascriptList, this, [content$$2, ",", v10213, true, false], JAM.policy.p1);
      JAM.call(this.setInObjectLiteral, this, [inObjectLiteral]);
      var v10214 = this.indenter;
      v10214.decreaseIndent();
      this.emitIndent();
      JAM.call(this.writeToOutput, this, ["}"]);
      return;
    }
    function v453(ast$$15, pre$$10) {
      var v10215;
      if (pre$$10) {
        v10215 = ast$$15.preComments;
      } else {
        v10215 = ast$$15.postComments;
      }
      var comments$$4 = v10215;
      var v17572 = ast$$15.isParenthesized;
      if (v17572) {
        v17572 = !pre$$10;
      }
      var v10216 = v17572;
      if (v10216) {
        JAM.call(this.writeToOutput, this, [")"]);
      }
      var v24405 = this.emitOptions;
      var v22102 = v24405.emitComments;
      if (v22102) {
        v22102 = comments$$4;
      }
      var v17573 = v22102;
      if (v17573) {
        var v22103 = comments$$4.length;
        v17573 = v22103 != 0;
      }
      var v10219 = v17573;
      if (v10219) {
        var i$$40 = 0;
        var v17574 = comments$$4.length;
        var v10218 = i$$40 < v17574;
        for (;v10218;) {
          var v10217 = comments$$4[i$$40];
          JAM.call(this.emitCommentInPlace, this, [v10217]);
          i$$40++;
          var v17575 = comments$$4.length;
          v10218 = i$$40 < v17575;
        }
      }
      var v17576 = ast$$15.isParenthesized;
      if (v17576) {
        v17576 = pre$$10;
      }
      var v10220 = v17576;
      if (v10220) {
        JAM.call(this.writeToOutput, this, ["("]);
      }
      return;
    }
    function v452(comment) {
      JAM.call(this.recordSourceMappingStart, this, [comment]);
      var text$$10 = comment.getText();
      var hadNewLine = false;
      var v10228 = comment.isBlockComment;
      if (v10228) {
        var v22104 = this.emitState;
        var v17577 = v22104.column;
        var v10221 = v17577 == 0;
        if (v10221) {
          this.emitIndent();
        }
        var v10222 = text$$10[0];
        JAM.call(this.writeToOutput, this, [v10222]);
        var v22105 = text$$10.length;
        var v17578 = v22105 > 1;
        var v22106 = !v17578;
        if (v22106) {
          v17578 = comment.endsLine;
        }
        var v10225 = v17578;
        if (v10225) {
          JAM.call(this.writeLineToOutput, this, [""]);
          var i$$39 = 1;
          var v17579 = text$$10.length;
          var v10224 = i$$39 < v17579;
          for (;v10224;) {
            this.emitIndent();
            var v10223 = text$$10[i$$39];
            JAM.call(this.writeLineToOutput, this, [v10223]);
            i$$39++;
            var v17580 = text$$10.length;
            v10224 = i$$39 < v17580;
          }
          hadNewLine = true;
        }
      } else {
        var v22107 = this.emitState;
        var v17581 = v22107.column;
        var v10226 = v17581 == 0;
        if (v10226) {
          this.emitIndent();
        }
        var v10227 = text$$10[0];
        JAM.call(this.writeLineToOutput, this, [v10227]);
        hadNewLine = true;
      }
      if (hadNewLine) {
        this.emitIndent();
      } else {
        JAM.call(this.writeToOutput, this, [" "]);
      }
      JAM.call(this.recordSourceMappingEnd, this, [comment]);
      return;
    }
    function v451() {
      var v10229 = this.getIndentString();
      JAM.call(this.writeToOutput, this, [v10229]);
      return;
    }
    function v450() {
      var v17582 = this.emitOptions;
      var v10231 = v17582.minWhitespace;
      if (v10231) {
        return "";
      } else {
        var v10230 = this.indenter;
        return v10230.getIndent();
      }
      return;
    }
    function v449(c$$5) {
      var v10232 = this.emitState;
      var temp$$9 = v10232.container;
      var v10233 = this.emitState;
      v10233.container = c$$5;
      return temp$$9;
    }
    function v448(val$$5) {
      var v10234 = this.emitState;
      var temp$$8 = v10234.inObjectLiteral;
      var v10235 = this.emitState;
      v10235.inObjectLiteral = val$$5;
      return temp$$8;
    }
    function v447(count$$3) {
      var v10236 = this.varListCountStack;
      var v22108 = this.varListCountStack;
      var v17583 = v22108.length;
      var v10237 = v17583 - 1;
      v10236[v10237] = count$$3;
      return;
    }
    function v446(ast$$14) {
      this.emitIndent();
      JAM.call(this.recordSourceMappingStart, this, [ast$$14]);
      var v10238 = this.captureThisStmtString;
      JAM.call(this.writeToOutput, this, [v10238]);
      JAM.call(this.recordSourceMappingEnd, this, [ast$$14]);
      JAM.call(this.writeLineToOutput, this, [""]);
      return;
    }
    function v445(s$$12) {
      var v17584 = this.emitOptions;
      var v10243 = v17584.minWhitespace;
      if (v10243) {
        JAM.call(this.writeToOutput, this, [s$$12]);
        var v17585 = s$$12.length;
        var v10239 = v17585 - 1;
        var c$$4 = JAM.call(s$$12.charCodeAt, s$$12, [v10239]);
        var v25465 = TypeScript$$12.LexCodeSpace;
        var v24406 = c$$4 == v25465;
        var v25467 = !v24406;
        if (v25467) {
          var v25466 = TypeScript$$12.LexCodeSMC;
          v24406 = c$$4 == v25466;
        }
        var v22109 = v24406;
        var v24408 = !v22109;
        if (v24408) {
          var v24407 = TypeScript$$12.LexCodeLBR;
          v22109 = c$$4 == v24407;
        }
        var v17586 = v22109;
        var v10240 = !v17586;
        if (v10240) {
          JAM.call(this.writeToOutput, this, [" "]);
        }
      } else {
        var v10241 = this.outfile;
        JAM.call(v10241.WriteLine, v10241, [s$$12]);
        var v10242 = this.emitState;
        v10242.column = 0;
        this.emitState.line++;
      }
      return;
    }
    function v444(s$$11) {
      var v17587 = this.emitOptions;
      var v10244 = v17587.minWhitespace;
      if (v10244) {
        s$$11 = JAM.call(s$$11.replace, s$$11, [/[\s]*/g, ""], JAM.policy.p1);
      }
      JAM.call(this.writeToOutput, this, [s$$11]);
      return;
    }
    function v443(s$$10) {
      var v10245 = this.outfile;
      JAM.call(v10245.Write, v10245, [s$$10]);
      var v10246 = this.emitState;
      var v22110 = v10246.column;
      var v22111 = s$$10.length;
      v10246.column = v22110 + v22111;
      return;
    }
    function v442(mapper) {
      var v10247 = this.allSourceMappers;
      JAM.call(v10247.push, v10247, [mapper]);
      this.sourceMapper = mapper;
      return;
    }
    function Emitter$$1(checker$$2, emittingFileName, outfile$$1, emitOptions$$1, errorReporter$$1) {
      this.checker = checker$$2;
      this.emittingFileName = emittingFileName;
      this.outfile = outfile$$1;
      this.emitOptions = emitOptions$$1;
      this.errorReporter = errorReporter$$1;
      this.prologueEmitted = false;
      this.thisClassNode = null;
      this.thisFnc = null;
      this.moduleDeclList = [];
      this.moduleName = "";
      var v26988 = new EmitState;
      this.emitState = v26988;
      var v26989 = new Indenter;
      this.indenter = v26989;
      this.ambientModule = false;
      this.modAliasId = null;
      this.firstModAlias = null;
      this.allSourceMappers = [];
      this.sourceMapper = null;
      this.captureThisStmtString = "var _this = this;";
      this.varListCountStack = [0];
      return;
    }
    var v10248 = Emitter$$1.prototype;
    v10248.setSourceMappings = v442;
    var v10249 = Emitter$$1.prototype;
    v10249.writeToOutput = v443;
    var v10250 = Emitter$$1.prototype;
    v10250.writeToOutputTrimmable = v444;
    var v10251 = Emitter$$1.prototype;
    v10251.writeLineToOutput = v445;
    var v10252 = Emitter$$1.prototype;
    v10252.writeCaptureThisStatement = v446;
    var v10253 = Emitter$$1.prototype;
    v10253.setInVarBlock = v447;
    var v10254 = Emitter$$1.prototype;
    v10254.setInObjectLiteral = v448;
    var v10255 = Emitter$$1.prototype;
    v10255.setContainer = v449;
    var v10256 = Emitter$$1.prototype;
    v10256.getIndentString = v450;
    var v10257 = Emitter$$1.prototype;
    v10257.emitIndent = v451;
    var v10258 = Emitter$$1.prototype;
    v10258.emitCommentInPlace = v452;
    var v10259 = Emitter$$1.prototype;
    v10259.emitParensAndCommentsInPlace = v453;
    var v10260 = Emitter$$1.prototype;
    v10260.emitObjectLiteral = v454;
    var v10261 = Emitter$$1.prototype;
    v10261.emitArrayLiteral = v455;
    var v10262 = Emitter$$1.prototype;
    v10262.emitNew = v456;
    var v10263 = Emitter$$1.prototype;
    v10263.tryEmitConstant = v457;
    var v10264 = Emitter$$1.prototype;
    v10264.emitCall = v458;
    var v10265 = Emitter$$1.prototype;
    v10265.emitConstructorCalls = v459;
    var v10266 = Emitter$$1.prototype;
    v10266.emitInnerFunction = v460;
    var v10267 = Emitter$$1.prototype;
    v10267.emitJavascriptModule = v461;
    var v10268 = Emitter$$1.prototype;
    v10268.emitIndex = v462;
    var v10269 = Emitter$$1.prototype;
    v10269.emitStringLiteral = v463;
    var v10270 = Emitter$$1.prototype;
    v10270.emitJavascriptFunction = v464;
    var v10271 = Emitter$$1.prototype;
    v10271.emitAmbientVarDecl = v465;
    var v10272 = Emitter$$1.prototype;
    v10272.varListCount = v466;
    var v10273 = Emitter$$1.prototype;
    v10273.emitVarDeclVar = v467;
    var v10274 = Emitter$$1.prototype;
    v10274.onEmitVar = v468;
    var v10275 = Emitter$$1.prototype;
    v10275.emitJavascriptVarDecl = v469;
    var v10276 = Emitter$$1.prototype;
    v10276.declEnclosed = v470;
    var v10277 = Emitter$$1.prototype;
    v10277.emitJavascriptName = v471;
    var v10278 = Emitter$$1.prototype;
    v10278.emitJavascriptStatements = v472;
    var v10279 = Emitter$$1.prototype;
    v10279.emitBareJavascriptStatements = v473;
    var v10280 = Emitter$$1.prototype;
    v10280.recordSourceMappingNameStart = v474;
    var v10281 = Emitter$$1.prototype;
    v10281.recordSourceMappingNameEnd = v475;
    var v10282 = Emitter$$1.prototype;
    v10282.recordSourceMappingStart = v476;
    var v10283 = Emitter$$1.prototype;
    v10283.recordSourceMappingEnd = v477;
    var v10284 = Emitter$$1.prototype;
    v10284.Close = v478;
    var v10285 = Emitter$$1.prototype;
    v10285.emitJavascriptList = v479;
    var v10286 = Emitter$$1.prototype;
    v10286.emitJavascript = v480;
    var v10287 = Emitter$$1.prototype;
    v10287.emitPropertyAccessor = v481;
    var v10288 = Emitter$$1.prototype;
    v10288.emitPrototypeMember = v482;
    var v10289 = Emitter$$1.prototype;
    v10289.emitAddBaseMethods = v484;
    var v10290 = Emitter$$1.prototype;
    v10290.emitJavascriptClass = v485;
    var v10291 = Emitter$$1.prototype;
    v10291.emitPrologue = v486;
    var v10292 = Emitter$$1.prototype;
    v10292.emitSuperReference = v487;
    var v10293 = Emitter$$1.prototype;
    v10293.emitSuperCall = v488;
    var v10294 = Emitter$$1.prototype;
    v10294.emitThis = v489;
    Emitter$$1.shouldCaptureThis = shouldCaptureThis;
    var v10295 = Emitter$$1.prototype;
    v10295.createFile = v490;
    return Emitter$$1;
  }
  function v441() {
    function v440() {
      var v10296 = Indenter$$1.indentStrings;
      var v10297 = this.indentAmt;
      var indentString = v10296[v10297];
      var v10301 = indentString === undefined;
      if (v10301) {
        indentString = "";
        var i$$38 = 0;
        var v17588 = this.indentAmt;
        var v10298 = i$$38 < v17588;
        for (;v10298;) {
          var v17589 = Indenter$$1.indentStepString;
          indentString = indentString + v17589;
          var v17590 = Indenter$$1.indentStep;
          i$$38 = i$$38 + v17590;
          var v17591 = this.indentAmt;
          v10298 = i$$38 < v17591;
        }
        var v10299 = Indenter$$1.indentStrings;
        var v10300 = this.indentAmt;
        JAM.set(v10299, v10300, indentString);
      }
      return indentString;
    }
    function v439() {
      var v17592 = this.indentAmt;
      var v17593 = Indenter$$1.indentStep;
      this.indentAmt = v17592 - v17593;
      return;
    }
    function v438() {
      var v17594 = this.indentAmt;
      var v17595 = Indenter$$1.indentStep;
      this.indentAmt = v17594 + v17595;
      return;
    }
    function Indenter$$1() {
      this.indentAmt = 0;
      return;
    }
    Indenter$$1.indentStep = 4;
    Indenter$$1.indentStepString = "    ";
    Indenter$$1.indentStrings = [];
    var v10302 = Indenter$$1.prototype;
    v10302.increaseIndent = v438;
    var v10303 = Indenter$$1.prototype;
    v10303.decreaseIndent = v439;
    var v10304 = Indenter$$1.prototype;
    v10304.getIndent = v440;
    return Indenter$$1;
  }
  function v437() {
    function v436(fileName$$1, extensionChanger) {
      var v10309 = this.outputMany;
      if (v10309) {
        var updatedFileName = fileName$$1;
        var v17596 = this.outputOption;
        var v10307 = v17596 != "";
        if (v10307) {
          var v10305 = this.commonDirectoryPath;
          updatedFileName = JAM.call(fileName$$1.replace, fileName$$1, [v10305, ""], JAM.policy.p1);
          var v10306 = this.outputOption;
          updatedFileName = v10306 + updatedFileName;
        }
        return JAM.call(extensionChanger, null, [updatedFileName, false], JAM.policy.p1);
      } else {
        var v10308 = this.outputOption;
        return JAM.call(extensionChanger, null, [v10308, true], JAM.policy.p1);
      }
      return;
    }
    function EmitOptions$$1(settings$$1) {
      this.ioHost = null;
      this.outputMany = true;
      this.commonDirectoryPath = "";
      this.minWhitespace = settings$$1.minWhitespace;
      this.propagateConstants = settings$$1.propagateConstants;
      this.emitComments = settings$$1.emitComments;
      this.outputOption = settings$$1.outputOption;
      return;
    }
    var v10310 = EmitOptions$$1.prototype;
    v10310.mapOutputFileName = v436;
    return EmitOptions$$1;
  }
  function v435() {
    function EmitState$$1() {
      this.column = 0;
      this.line = 0;
      this.pretty = false;
      this.inObjectLiteral = false;
      this.container = EmitContainer.Prog;
      return;
    }
    return EmitState$$1;
  }
  function v434(EmitContainer$$1) {
    EmitContainer$$1._map = [];
    var v10311 = EmitContainer$$1._map;
    v10311[0] = "Prog";
    EmitContainer$$1.Prog = 0;
    var v10312 = EmitContainer$$1._map;
    v10312[1] = "Module";
    EmitContainer$$1.Module = 1;
    var v10313 = EmitContainer$$1._map;
    v10313[2] = "DynamicModule";
    EmitContainer$$1.DynamicModule = 2;
    var v10314 = EmitContainer$$1._map;
    v10314[3] = "Class";
    EmitContainer$$1.Class = 3;
    var v10315 = EmitContainer$$1._map;
    v10315[4] = "Constructor";
    EmitContainer$$1.Constructor = 4;
    var v10316 = EmitContainer$$1._map;
    v10316[5] = "Function";
    EmitContainer$$1.Function = 5;
    var v10317 = EmitContainer$$1._map;
    v10317[6] = "Args";
    EmitContainer$$1.Args = 6;
    var v10318 = EmitContainer$$1._map;
    v10318[7] = "Interface";
    EmitContainer$$1.Interface = 7;
    return;
  }
  var v17597 = TypeScript$$12.EmitContainer;
  var v22112 = !v17597;
  if (v22112) {
    v17597 = TypeScript$$12.EmitContainer = {};
  }
  var v10319 = v17597;
  v434(v10319);
  var EmitContainer = TypeScript$$12.EmitContainer;
  var EmitState = v435();
  TypeScript$$12.EmitState = EmitState;
  var EmitOptions = v437();
  TypeScript$$12.EmitOptions = EmitOptions;
  var Indenter = v441();
  TypeScript$$12.Indenter = Indenter;
  var Emitter = v491();
  TypeScript$$12.Emitter = Emitter;
  return;
}
function v433(TypeScript$$11) {
  function v432() {
    function EmitSourceMapping(allSourceMappers) {
      function v431(sourceMappings) {
        var i$$37 = 0;
        var v17598 = sourceMappings.length;
        var v10325 = i$$37 < v17598;
        for (;v10325;) {
          var sourceMapping = sourceMappings[i$$37];
          var v10320 = sourceMapping.start;
          var v10321 = sourceMapping.nameIndex;
          JAM.call(recordSourceMapping, null, [v10320, v10321], JAM.policy.p1);
          var v10322 = sourceMapping.childMappings;
          JAM.call(recordSourceMappingSiblings, null, [v10322]);
          var v10323 = sourceMapping.end;
          var v10324 = sourceMapping.nameIndex;
          JAM.call(recordSourceMapping, null, [v10323, v10324], JAM.policy.p1);
          i$$37++;
          var v17599 = sourceMappings.length;
          v10325 = i$$37 < v17599;
        }
        return;
      }
      function v430(mappedPosition, nameIndex) {
        var v22113 = recordedPosition != null;
        if (v22113) {
          var v24409 = recordedPosition.emittedColumn;
          var v24410 = mappedPosition.emittedColumn;
          v22113 = v24409 == v24410;
        }
        var v17600 = v22113;
        if (v17600) {
          var v22114 = recordedPosition.emittedLine;
          var v22115 = mappedPosition.emittedLine;
          v17600 = v22114 == v22115;
        }
        var v10326 = v17600;
        if (v10326) {
          return;
        }
        var v17601 = mappedPosition.emittedLine;
        var v10328 = prevEmittedLine !== v17601;
        if (v10328) {
          var v17602 = mappedPosition.emittedLine;
          var v10327 = prevEmittedLine < v17602;
          for (;v10327;) {
            prevEmittedColumn = 0;
            mappingsString = mappingsString + ";";
            prevEmittedLine++;
            var v17603 = mappedPosition.emittedLine;
            v10327 = prevEmittedLine < v17603;
          }
          emitComma = false;
        } else {
          if (emitComma) {
            mappingsString = mappingsString + ",";
          }
        }
        var v10329 = mappingsString;
        var v17604 = TypeScript$$11.Base64VLQFormat;
        var v22116 = mappedPosition.emittedColumn;
        var v17605 = v22116 - prevEmittedColumn;
        var v10330 = JAM.call(v17604.encode, v17604, [v17605]);
        mappingsString = v10329 + v10330;
        prevEmittedColumn = mappedPosition.emittedColumn;
        var v10331 = mappingsString;
        var v17606 = TypeScript$$11.Base64VLQFormat;
        var v17607 = currentSourceIndex - prevSourceIndex;
        var v10332 = JAM.call(v17606.encode, v17606, [v17607]);
        mappingsString = v10331 + v10332;
        prevSourceIndex = currentSourceIndex;
        var v10333 = mappingsString;
        var v17608 = TypeScript$$11.Base64VLQFormat;
        var v24411 = mappedPosition.sourceLine;
        var v22117 = v24411 - 1;
        var v17609 = v22117 - prevSourceLine;
        var v10334 = JAM.call(v17608.encode, v17608, [v17609]);
        mappingsString = v10333 + v10334;
        var v10335 = mappedPosition.sourceLine;
        prevSourceLine = v10335 - 1;
        var v10336 = mappingsString;
        var v17610 = TypeScript$$11.Base64VLQFormat;
        var v22118 = mappedPosition.sourceColumn;
        var v17611 = v22118 - prevSourceColumn;
        var v10337 = JAM.call(v17610.encode, v17610, [v17611]);
        mappingsString = v10336 + v10337;
        prevSourceColumn = mappedPosition.sourceColumn;
        var v10340 = nameIndex >= 0;
        if (v10340) {
          var v10338 = mappingsString;
          var v17612 = TypeScript$$11.Base64VLQFormat;
          var v22119 = namesCount + nameIndex;
          var v17613 = v22119 - prevNameIndex;
          var v10339 = JAM.call(v17612.encode, v17612, [v17613]);
          mappingsString = v10338 + v10339;
          prevNameIndex = namesCount + nameIndex;
        }
        emitComma = true;
        recordedPosition = mappedPosition;
        return;
      }
      var sourceMapper = allSourceMappers[0];
      var v10341 = sourceMapper.jsFile;
      var v22120 = sourceMapper.jsFileName;
      var v17614 = "//@ sourceMappingURL=" + v22120;
      var v17615 = SourceMapper$$1.MapFileExtension;
      var v10342 = v17614 + v17615;
      JAM.call(v10341.WriteLine, v10341, [v10342]);
      var sourceMapOut$$1 = sourceMapper.sourceMapOut;
      var mappingsString = "";
      var tsFiles = [];
      var prevEmittedColumn = 0;
      var prevEmittedLine = 0;
      var prevSourceColumn = 0;
      var prevSourceLine = 0;
      var prevSourceIndex = 0;
      var prevNameIndex = 0;
      var namesList = [];
      var namesCount = 0;
      var emitComma = false;
      var recordedPosition = null;
      var sourceMapperIndex = 0;
      var v17616 = allSourceMappers.length;
      var v10349 = sourceMapperIndex < v17616;
      for (;v10349;) {
        sourceMapper = allSourceMappers[sourceMapperIndex];
        var currentSourceIndex = tsFiles.length;
        var v10343 = sourceMapper.tsFileName;
        JAM.call(tsFiles.push, tsFiles, [v10343]);
        var v22121 = sourceMapper.names;
        var v17617 = v22121.length;
        var v10346 = v17617 > 0;
        if (v10346) {
          var v10344 = namesList.push;
          var v10345 = sourceMapper.names;
          JAM.call(v10344.apply, v10344, [namesList, v10345], JAM.policy.p1);
        }
        var recordSourceMapping = v430;
        var recordSourceMappingSiblings = v431;
        var v10347 = sourceMapper.sourceMappings;
        JAM.call(recordSourceMappingSiblings, null, [v10347, -1], JAM.policy.p1);
        var v17618 = sourceMapper.names;
        var v10348 = v17618.length;
        namesCount = namesCount + v10348;
        sourceMapperIndex++;
        var v17619 = allSourceMappers.length;
        v10349 = sourceMapperIndex < v17619;
      }
      var v10351 = mappingsString != "";
      if (v10351) {
        var v22122 = sourceMapper.jsFileName;
        var v17620 = {version:3, file:v22122, sources:tsFiles, names:namesList, mappings:mappingsString};
        var v10350 = JAM.call(JSON2.stringify, JSON2, [v17620]);
        JAM.call(sourceMapOut$$1.Write, sourceMapOut$$1, [v10350]);
      }
      try {
        sourceMapOut$$1.Close();
      } catch (ex) {
        var v10352 = sourceMapper.errorReporter;
        var v10353 = ex.message;
        JAM.call(v10352.emitterError, v10352, [v10353]);
      }
      return;
    }
    function SourceMapper$$1(tsFileName, jsFileName, jsFile, sourceMapOut, errorReporter) {
      this.jsFile = jsFile;
      this.sourceMapOut = sourceMapOut;
      this.errorReporter = errorReporter;
      this.sourceMappings = [];
      this.currentMappings = [];
      this.names = [];
      this.currentNameIndex = [];
      var v10354 = this.currentMappings;
      var v10355 = this.sourceMappings;
      JAM.call(v10354.push, v10354, [v10355]);
      jsFileName = JAM.call(TypeScript$$11.switchToForwardSlashes, TypeScript$$11, [jsFileName]);
      var v26990 = JAM.call(TypeScript$$11.getPrettyName, TypeScript$$11, [jsFileName, false, true], JAM.policy.p1);
      this.jsFileName = v26990;
      var v10356 = this.jsFileName;
      var removalIndex = jsFileName.lastIndexOf(v10356);
      var fixedPath = JAM.call(jsFileName.substring, jsFileName, [0, removalIndex], JAM.policy.p1);
      var v26991 = JAM.call(TypeScript$$11.getRelativePathToFixedPath, TypeScript$$11, [fixedPath, tsFileName], JAM.policy.p1);
      this.tsFileName = v26991;
      return;
    }
    SourceMapper$$1.MapFileExtension = ".map";
    SourceMapper$$1.EmitSourceMapping = EmitSourceMapping;
    return SourceMapper$$1;
  }
  function v429() {
    function SourceMapping$$1() {
      var v26992 = new SourceMapPosition;
      this.start = v26992;
      var v26993 = new SourceMapPosition;
      this.end = v26993;
      this.nameIndex = -1;
      this.childMappings = [];
      return;
    }
    return SourceMapping$$1;
  }
  function v428() {
    function SourceMapPosition$$1() {
      return;
    }
    return SourceMapPosition$$1;
  }
  var SourceMapPosition = v428();
  TypeScript$$11.SourceMapPosition = SourceMapPosition;
  var SourceMapping = v429();
  TypeScript$$11.SourceMapping = SourceMapping;
  var SourceMapper = v432();
  TypeScript$$11.SourceMapper = SourceMapper;
  return;
}
function v427() {
  function v426(text$$9, reviver) {
    function v425(a$$3) {
      var v24412 = JAM.call(a$$3.charCodeAt, a$$3, [0]);
      var v22123 = JAM.call(v24412.toString, v24412, [16]);
      var v17621 = "0000" + v22123;
      var v10357 = v17621.slice(-4);
      return "\\u" + v10357;
    }
    function walk$$1(holder$$1, key$$31) {
      var k$$6 = null;
      var v$$1;
      var value$$33 = holder$$1[key$$31];
      var v17622 = value$$33;
      if (v17622) {
        var v22124 = typeof value$$33;
        v17622 = v22124 === "object";
      }
      var v10360 = v17622;
      if (v10360) {
        for (k$$6 in value$$33) {
          var v22125 = Object.prototype;
          var v17623 = v22125.hasOwnProperty;
          var v10359 = JAM.call(v17623.call, v17623, [value$$33, k$$6], JAM.policy.p1);
          if (v10359) {
            v$$1 = walk$$1(value$$33, k$$6);
            var v10358 = v$$1 !== undefined;
            if (v10358) {
              JAM.set(value$$33, k$$6, v$$1);
            } else {
              delete value$$33[k$$6];
            }
          }
        }
      }
      return JAM.call(reviver.call, reviver, [holder$$1, key$$31, value$$33], JAM.policy.p1);
    }
    var j$$2;
    text$$9 = String(text$$9);
    cx.lastIndex = 0;
    var v10361 = cx.test(text$$9);
    if (v10361) {
      text$$9 = JAM.call(text$$9.replace, text$$9, [cx, v425], JAM.policy.p1);
    }
    var v24413 = JAM.call(text$$9.replace, text$$9, [/\\(?:["\\\/bfnrt]|u[0-9a-fA-F]{4})/g, "@"], JAM.policy.p1);
    var v22126 = JAM.call(v24413.replace, v24413, [/"[^"\\\n\r]*"|true|false|null|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?/g, "]"], JAM.policy.p1);
    var v17624 = JAM.call(v22126.replace, v22126, [/(?:^|:|,)(?:\s*\[)+/g, ""], JAM.policy.p1);
    var v10364 = /^[\],:{}\s]*$/.test(v17624);
    if (v10364) {
      var v17625 = "(" + text$$9;
      var v10362 = v17625 + ")";
      if (JAM.isEval(eval)) {
        j$$2 = eval("introspect(JAM.policy.pFull) { " + v10362 + " }");
      } else {
        j$$2 = JAM.call(eval, null, [v10362]);
      }
      var v10363;
      var v22127 = typeof reviver;
      var v17627 = v22127 === "function";
      if (v17627) {
        var v17626 = {"":j$$2};
        v10363 = walk$$1(v17626, "");
      } else {
        v10363 = j$$2;
      }
      return v10363;
    }
    throw new SyntaxError("JSON.parse");
  }
  function v424(value$$32, replacer, space) {
    var i$$36;
    gap = "";
    indent$$3 = "";
    var v17628 = typeof space;
    var v10367 = v17628 === "number";
    if (v10367) {
      i$$36 = 0;
      var v10365 = i$$36 < space;
      for (;v10365;) {
        indent$$3 = indent$$3 + " ";
        i$$36 = i$$36 + 1;
        v10365 = i$$36 < space;
      }
    } else {
      var v17629 = typeof space;
      var v10366 = v17629 === "string";
      if (v10366) {
        indent$$3 = space;
      }
    }
    rep = replacer;
    var v22128 = replacer;
    if (v22128) {
      var v24414 = typeof replacer;
      v22128 = v24414 !== "function";
    }
    var v17630 = v22128;
    if (v17630) {
      var v24415 = typeof replacer;
      var v22129 = v24415 !== "object";
      var v24417 = !v22129;
      if (v24417) {
        var v25468 = replacer.length;
        var v24416 = typeof v25468;
        v22129 = v24416 !== "number";
      }
      v17630 = v22129;
    }
    var v10368 = v17630;
    if (v10368) {
      throw new Error("JSON.stringify");
    }
    var v10369 = {"":value$$32};
    return str$$6("", v10369);
  }
  function v423(key$$30) {
    return this.valueOf();
  }
  function v422(key$$29) {
    var v10370;
    var v22130 = this.valueOf();
    var v17632 = isFinite(v22130);
    if (v17632) {
      var v26432 = this.getUTCFullYear();
      var v26426 = v26432 + "-";
      var v26434 = this.getUTCMonth();
      var v26433 = v26434 + 1;
      var v26427 = f(v26433);
      var v26410 = v26426 + v26427;
      var v26384 = v26410 + "-";
      var v26411 = this.getUTCDate();
      var v26385 = f(v26411);
      var v26330 = v26384 + v26385;
      var v26219 = v26330 + "T";
      var v26331 = this.getUTCHours();
      var v26220 = f(v26331);
      var v25977 = v26219 + v26220;
      var v25469 = v25977 + ":";
      var v25978 = this.getUTCMinutes();
      var v25470 = f(v25978);
      var v24418 = v25469 + v25470;
      var v22131 = v24418 + ":";
      var v24419 = this.getUTCSeconds();
      var v22132 = f(v24419);
      var v17631 = v22131 + v22132;
      v10370 = v17631 + "Z";
    } else {
      v10370 = null;
    }
    return v10370;
  }
  function f(n$$1) {
    var v10371;
    var v17633 = n$$1 < 10;
    if (v17633) {
      v10371 = "0" + n$$1;
    } else {
      v10371 = n$$1;
    }
    return v10371;
  }
  function quote(string) {
    function v421(a$$2) {
      var c$$3 = meta[a$$2];
      var v10372;
      var v22133 = typeof c$$3;
      var v17635 = v22133 === "string";
      if (v17635) {
        v10372 = c$$3;
      } else {
        var v25471 = JAM.call(a$$2.charCodeAt, a$$2, [0]);
        var v24420 = JAM.call(v25471.toString, v25471, [16]);
        var v22134 = "0000" + v24420;
        var v17634 = v22134.slice(-4);
        v10372 = "\\u" + v17634;
      }
      return v10372;
    }
    escapable.lastIndex = 0;
    var v10373;
    var v17638 = escapable.test(string);
    if (v17638) {
      var v22135 = JAM.call(string.replace, string, [escapable, v421], JAM.policy.p1);
      var v17636 = '"' + v22135;
      v10373 = v17636 + '"';
    } else {
      var v17637 = '"' + string;
      v10373 = v17637 + '"';
    }
    return v10373;
  }
  function str$$6(key$$28, holder) {
    var i$$35;
    var k$$5 = null;
    var v;
    var length$$14;
    var mind = gap;
    var partial;
    var value$$31 = holder[key$$28];
    var v22136 = value$$31;
    if (v22136) {
      var v24421 = typeof value$$31;
      v22136 = v24421 === "object";
    }
    var v17639 = v22136;
    if (v17639) {
      var v24422 = value$$31.toJSON;
      var v22137 = typeof v24422;
      v17639 = v22137 === "function";
    }
    var v10374 = v17639;
    if (v10374) {
      value$$31 = JAM.call(value$$31.toJSON, value$$31, [key$$28]);
    }
    var v17640 = typeof rep;
    var v10375 = v17640 === "function";
    if (v10375) {
      value$$31 = JAM.call(rep.call, rep, [holder, key$$28, value$$31], JAM.policy.p1);
    }
    var v10389 = typeof value$$31;
    switch(v10389) {
      case "string":
        return quote(value$$31);
      case "number":
        var v10376;
        var v17641 = isFinite(value$$31);
        if (v17641) {
          v10376 = String(value$$31);
        } else {
          v10376 = "null";
        }
        return v10376;
      case "boolean":
      ;
      case "null":
        return String(value$$31);
      case "object":
        var v10377 = !value$$31;
        if (v10377) {
          return "null";
        }
        gap = gap + indent$$3;
        partial = [];
        var v24423 = Object.prototype;
        var v22138 = v24423.toString;
        var v17642 = JAM.call(v22138.apply, v22138, [value$$31, []], JAM.policy.p1);
        var v10381 = v17642 === "[object Array]";
        if (v10381) {
          length$$14 = value$$31.length;
          i$$35 = 0;
          var v10379 = i$$35 < length$$14;
          for (;v10379;) {
            var v10378 = str$$6(i$$35, value$$31);
            var v17643 = !v10378;
            if (v17643) {
              v10378 = "null";
            }
            JAM.set(partial, i$$35, v10378);
            i$$35 = i$$35 + 1;
            v10379 = i$$35 < length$$14;
          }
          var v10380;
          var v22139 = partial.length;
          var v17645 = v22139 === 0;
          if (v17645) {
            v10380 = "[]";
          } else {
            var v17644;
            if (gap) {
              var v25979 = "[\n" + gap;
              var v26221 = ",\n" + gap;
              var v25980 = partial.join(v26221);
              var v25472 = v25979 + v25980;
              var v24424 = v25472 + "\n";
              var v22140 = v24424 + mind;
              v17644 = v22140 + "]";
            } else {
              var v24425 = partial.join(",");
              var v22141 = "[" + v24425;
              v17644 = v22141 + "]";
            }
            v10380 = v17644;
          }
          v = v10380;
          gap = mind;
          return v;
        }
        var v17646 = rep;
        if (v17646) {
          var v22142 = typeof rep;
          v17646 = v22142 === "object";
        }
        var v10387 = v17646;
        if (v10387) {
          length$$14 = rep.length;
          i$$35 = 0;
          var v10384 = i$$35 < length$$14;
          for (;v10384;) {
            var v22143 = rep[i$$35];
            var v17647 = typeof v22143;
            var v10383 = v17647 === "string";
            if (v10383) {
              k$$5 = rep[i$$35];
              v = str$$6(k$$5, value$$31);
              if (v) {
                var v22144 = quote(k$$5);
                var v24426;
                if (gap) {
                  v24426 = ": ";
                } else {
                  v24426 = ":";
                }
                var v22145 = v24426;
                var v17648 = v22144 + v22145;
                var v10382 = v17648 + v;
                JAM.call(partial.push, partial, [v10382]);
              }
            }
            i$$35 = i$$35 + 1;
            v10384 = i$$35 < length$$14;
          }
        } else {
          for (k$$5 in value$$31) {
            var v22146 = Object.prototype;
            var v17649 = v22146.hasOwnProperty;
            var v10386 = JAM.call(v17649.call, v17649, [value$$31, k$$5], JAM.policy.p1);
            if (v10386) {
              v = str$$6(k$$5, value$$31);
              if (v) {
                var v22147 = quote(k$$5);
                var v24427;
                if (gap) {
                  v24427 = ": ";
                } else {
                  v24427 = ":";
                }
                var v22148 = v24427;
                var v17650 = v22147 + v22148;
                var v10385 = v17650 + v;
                JAM.call(partial.push, partial, [v10385]);
              }
            }
          }
        }
        var v10388;
        var v22149 = partial.length;
        var v17652 = v22149 === 0;
        if (v17652) {
          v10388 = "{}";
        } else {
          var v17651;
          if (gap) {
            var v25981 = "{\n" + gap;
            var v26222 = ",\n" + gap;
            var v25982 = partial.join(v26222);
            var v25473 = v25981 + v25982;
            var v24428 = v25473 + "\n";
            var v22150 = v24428 + mind;
            v17651 = v22150 + "}";
          } else {
            var v24429 = partial.join(",");
            var v22151 = "{" + v24429;
            v17651 = v22151 + "}";
          }
          v10388 = v17651;
        }
        v = v10388;
        gap = mind;
        return v;
    }
    return;
  }
  var v24430 = Date.prototype;
  var v22152 = v24430.toJSON;
  var v17653 = typeof v22152;
  var v10392 = v17653 !== "function";
  if (v10392) {
    var v10390 = Date.prototype;
    v10390.toJSON = v422;
    var strProto = String.prototype;
    var numProto = Number.prototype;
    var v10391 = Boolean.prototype;
    numProto.JSON = strProto.JSON = v10391.toJSON = v423;
  }
  var cx = /[\u0000\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g;
  var escapable = /[\\\"\x00-\x1f\x7f-\x9f\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g;
  var gap;
  var indent$$3;
  var meta = {"\b":"\\b", "\t":"\\t", "\n":"\\n", "\f":"\\f", "\r":"\\r", '"':'\\"', "\\":"\\\\"};
  var rep;
  var v22153 = JSON2.stringify;
  var v17654 = typeof v22153;
  var v10393 = v17654 !== "function";
  if (v10393) {
    JSON2.stringify = v424;
  }
  var v22154 = JSON2.parse;
  var v17655 = typeof v22154;
  var v10394 = v17655 !== "function";
  if (v10394) {
    JSON2.parse = v426;
  }
  return;
}
function v420(TypeScript$$10) {
  function v419() {
    function decode(inString) {
      var result$$6 = 0;
      var negative = false;
      var shift = 0;
      var i$$34 = 0;
      var v17656 = inString.length;
      var v10403 = i$$34 < v17656;
      for (;v10403;) {
        var v10395 = inString[i$$34];
        var byte = JAM.call(Base64Format.decodeChar, Base64Format, [v10395]);
        var v10399 = i$$34 === 0;
        if (v10399) {
          var v17657 = byte & 1;
          var v10396 = v17657 === 1;
          if (v10396) {
            negative = true;
          }
          var v10397 = byte >> 1;
          result$$6 = v10397 & 15;
        } else {
          var v17658 = byte & 31;
          var v10398 = v17658 << shift;
          result$$6 = result$$6 | v10398;
        }
        var v22155;
        var v24431 = i$$34 == 0;
        if (v24431) {
          v22155 = 4;
        } else {
          v22155 = 5;
        }
        var v17659 = v22155;
        shift = shift + v17659;
        var v17660 = byte & 32;
        var v10402 = v17660 === 32;
        if (v10402) {
        } else {
          var v17661;
          if (negative) {
            v17661 = -result$$6;
          } else {
            v17661 = result$$6;
          }
          var v10400 = v17661;
          var v17662 = i$$34 + 1;
          var v10401 = inString.substr(v17662);
          return {value:v10400, rest:v10401};
        }
        i$$34++;
        var v17663 = inString.length;
        v10403 = i$$34 < v17663;
      }
      var v17664 = 'Base64 value "' + inString;
      var v10404 = v17664 + '" finished with a continuation bit';
      throw new Error(v10404);
    }
    function encode$$1(inValue$$1) {
      var v10406 = inValue$$1 < 0;
      if (v10406) {
        var v17665 = -inValue$$1;
        var v10405 = v17665 << 1;
        inValue$$1 = v10405 + 1;
      } else {
        inValue$$1 = inValue$$1 << 1;
      }
      var encodedStr = "";
      var v10409 = inValue$$1 > 0;
      do {
        var currentDigit = inValue$$1 & 31;
        inValue$$1 = inValue$$1 >> 5;
        var v10407 = inValue$$1 > 0;
        if (v10407) {
          currentDigit = currentDigit | 32;
        }
        var v10408 = JAM.call(Base64Format.encode, Base64Format, [currentDigit]);
        encodedStr = encodedStr + v10408;
        v10409 = inValue$$1 > 0;
      } while (v10409);
      return encodedStr;
    }
    function Base64VLQFormat$$1() {
      return;
    }
    Base64VLQFormat$$1.encode = encode$$1;
    Base64VLQFormat$$1.decode = decode;
    return Base64VLQFormat$$1;
  }
  function v418() {
    function decodeChar(inChar) {
      var v17666 = inChar.length;
      var v10412 = v17666 === 1;
      if (v10412) {
        var v10410 = Base64Format$$1.encodedValues;
        return v10410.indexOf(inChar);
      } else {
        var v17667 = '"' + inChar;
        var v10411 = v17667 + '" must have length 1';
        throw TypeError(v10411);
      }
      return;
    }
    function encode(inValue) {
      var v10414 = inValue < 64;
      if (v10414) {
        var v10413 = Base64Format$$1.encodedValues;
        return v10413.charAt(inValue);
      }
      var v10415 = inValue + ": not a 64 based value";
      throw TypeError(v10415);
    }
    function Base64Format$$1() {
      return;
    }
    Base64Format$$1.encodedValues = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
    Base64Format$$1.encode = encode;
    Base64Format$$1.decodeChar = decodeChar;
    return Base64Format$$1;
  }
  var Base64Format = v418();
  var Base64VLQFormat = v419();
  TypeScript$$10.Base64VLQFormat = Base64VLQFormat;
  return;
}
function v417(TypeScript$$9) {
  function v416() {
    function v415(scope$$5, table$$1) {
      function v414(key$$27, sym$$2, binder) {
        JAM.call(binder.bindSymbol, binder, [scope$$5, sym$$2], JAM.policy.p1);
        return;
      }
      JAM.call(table$$1.map, table$$1, [v414, this], JAM.policy.p1);
      return;
    }
    function v413(scope$$4, symbol$$2) {
      function v412(id$$7) {
        return JAM.call(scope$$4.find, scope$$4, [id$$7, false, true], JAM.policy.p1);
      }
      var v17668 = symbol$$2.bound;
      var v10438 = !v17668;
      if (v10438) {
        var v10416 = this.checker;
        var prevLocationInfo = v10416.locationInfo;
        var v24432 = this.checker;
        var v22156 = v24432.units;
        if (v22156) {
          var v24433 = symbol$$2.unitIndex;
          v22156 = v24433 >= 0;
        }
        var v17669 = v22156;
        if (v17669) {
          var v22157 = symbol$$2.unitIndex;
          var v25474 = this.checker;
          var v24434 = v25474.units;
          var v22158 = v24434.length;
          v17669 = v22157 < v22158;
        }
        var v10418 = v17669;
        if (v10418) {
          var v10417 = this.checker;
          var v22159 = this.checker;
          var v17670 = v22159.units;
          var v17671 = symbol$$2.unitIndex;
          v10417.locationInfo = v17670[v17671];
        }
        var v10436 = symbol$$2.kind();
        switch(v10436) {
          case TypeScript$$9.SymbolKind.Type:
            var v17672 = symbol$$2.flags;
            var v22160 = TypeScript$$9.SymbolFlags;
            var v17673 = v22160.Bound;
            var v10419 = v17672 & v17673;
            if (v10419) {
              break;
            }
            var typeSymbol = symbol$$2;
            var v17674 = typeSymbol.flags;
            var v22161 = TypeScript$$9.SymbolFlags;
            var v17675 = v22161.Bound;
            typeSymbol.flags = v17674 | v17675;
            var v22162 = typeSymbol.aliasLink;
            if (v22162) {
              var v24435 = typeSymbol.type;
              v22162 = !v24435;
            }
            var v17676 = v22162;
            if (v17676) {
              var v25475 = typeSymbol.aliasLink;
              var v24436 = v25475.alias;
              var v22163 = v24436.nodeType;
              var v24437 = TypeScript$$9.NodeType;
              var v22164 = v24437.Name;
              v17676 = v22163 == v22164;
            }
            var v10424 = v17676;
            if (v10424) {
              var v17677 = typeSymbol.aliasLink;
              var v10420 = v17677.alias;
              var modPath = v10420.text;
              var v10421 = this.checker;
              var v22165 = this.checker;
              var v17678 = v22165.locationInfo;
              var v10422 = v17678.filename;
              var modSym = JAM.call(v10421.findSymbolForDynamicModule, v10421, [modPath, v10422, v412], JAM.policy.p1);
              if (modSym) {
                var v10423 = typeSymbol;
                var v26994 = modSym.getType();
                v10423.type = v26994;
              }
            }
            var v17679 = typeSymbol.type;
            if (v17679) {
              var v22166 = typeSymbol.type;
              var v24438 = this.checker;
              var v22167 = v24438.gloModType;
              v17679 = v22166 != v22167;
            }
            var v10431 = v17679;
            if (v10431) {
              var v10425 = typeSymbol.type;
              var v10426 = typeSymbol.instanceType;
              JAM.call(this.bindType, this, [scope$$4, v10425, v10426], JAM.policy.p1);
              var v17680 = typeSymbol.type;
              var v10430 = v17680.isModuleType();
              if (v10430) {
                var i$$33 = 0;
                var v22168 = typeSymbol.expansions;
                var v17681 = v22168.length;
                var v10429 = i$$33 < v17681;
                for (;v10429;) {
                  var v17682 = typeSymbol.expansions;
                  var v10427 = v17682[i$$33];
                  var v10428 = typeSymbol.instanceType;
                  JAM.call(this.bindType, this, [scope$$4, v10427, v10428], JAM.policy.p1);
                  i$$33++;
                  var v22169 = typeSymbol.expansions;
                  var v17683 = v22169.length;
                  v10429 = i$$33 < v17683;
                }
              }
            }
            break;
          case TypeScript$$9.SymbolKind.Field:
            var v10432 = this.checker;
            var v17684 = symbol$$2.field;
            var v10433 = v17684.typeLink;
            JAM.call(v10432.resolveTypeLink, v10432, [scope$$4, v10433, false], JAM.policy.p1);
            break;
          case TypeScript$$9.SymbolKind.Parameter:
            var v10434 = this.checker;
            var v17685 = symbol$$2.parameter;
            var v10435 = v17685.typeLink;
            JAM.call(v10434.resolveTypeLink, v10434, [scope$$4, v10435, true], JAM.policy.p1);
        }
        var v10437 = this.checker;
        v10437.locationInfo = prevLocationInfo;
      }
      symbol$$2.bound = true;
      return;
    }
    function v411(scope$$3, type$$26, instanceType$$1) {
      if (instanceType$$1) {
        JAM.call(this.bindType, this, [scope$$3, instanceType$$1, null], JAM.policy.p1);
      }
      var v10454 = type$$26.hasMembers();
      if (v10454) {
        var members$$5 = type$$26.members;
        var ambientMembers = type$$26.ambientMembers;
        var typeMembers = type$$26.getAllEnclosedTypes();
        var ambientTypeMembers = type$$26.getAllAmbientEnclosedTypes();
        var v10439 = TypeScript$$9.SymbolTableScope;
        var v10440 = type$$26.symbol;
        var memberScope = JAM.new(v10439, [members$$5, ambientMembers, typeMembers, ambientTypeMembers, v10440]);
        var v10441 = TypeScript$$9.SymbolAggregateScope;
        var v10442 = type$$26.symbol;
        var agg = JAM.new(v10441, [v10442]);
        var v10443 = this.checker;
        var prevCurrentModDecl = v10443.currentModDecl;
        var v10444 = this.checker;
        var prevBindStatus = v10444.inBind;
        JAM.call(agg.addParentScope, agg, [memberScope]);
        JAM.call(agg.addParentScope, agg, [scope$$3]);
        var v10447 = type$$26.isModuleType();
        if (v10447) {
          var v10445 = this.checker;
          var v17686 = type$$26.symbol;
          v10445.currentModDecl = v17686.declAST;
          var v10446 = this.checker;
          v10446.inBind = true;
        }
        if (members$$5) {
          var v17687 = type$$26.members;
          var v10448 = v17687.allMembers;
          JAM.call(this.bind, this, [agg, v10448], JAM.policy.p1);
        }
        if (typeMembers) {
          var v10449 = typeMembers.allMembers;
          JAM.call(this.bind, this, [agg, v10449], JAM.policy.p1);
        }
        if (ambientMembers) {
          var v10450 = ambientMembers.allMembers;
          JAM.call(this.bind, this, [agg, v10450], JAM.policy.p1);
        }
        if (ambientTypeMembers) {
          var v10451 = ambientTypeMembers.allMembers;
          JAM.call(this.bind, this, [agg, v10451], JAM.policy.p1);
        }
        var v10452 = this.checker;
        v10452.currentModDecl = prevCurrentModDecl;
        var v10453 = this.checker;
        v10453.inBind = prevBindStatus;
      }
      var v10455 = type$$26.extendsTypeLinks;
      if (v10455) {
        JAM.call(this.resolveBases, this, [scope$$3, type$$26], JAM.policy.p1);
      }
      var v10457 = type$$26.construct;
      if (v10457) {
        var v10456 = type$$26.construct;
        JAM.call(this.resolveSignatureGroup, this, [v10456, scope$$3, instanceType$$1], JAM.policy.p1);
      }
      var v10459 = type$$26.call;
      if (v10459) {
        var v10458 = type$$26.call;
        JAM.call(this.resolveSignatureGroup, this, [v10458, scope$$3, null], JAM.policy.p1);
      }
      var v10461 = type$$26.index;
      if (v10461) {
        var v10460 = type$$26.index;
        JAM.call(this.resolveSignatureGroup, this, [v10460, scope$$3, null], JAM.policy.p1);
      }
      var v10463 = type$$26.elementType;
      if (v10463) {
        var v10462 = type$$26.elementType;
        JAM.call(this.bindType, this, [scope$$3, v10462, null], JAM.policy.p1);
      }
      return;
    }
    function v410(signatureGroup, scope$$2, instanceType) {
      var v10464 = signatureGroup.hasImplementation;
      var supplyVar = !v10464;
      var i$$32 = 0;
      var v10465 = signatureGroup.signatures;
      var len$$9 = v10465.length;
      var v10479 = i$$32 < len$$9;
      for (;v10479;) {
        var v10466 = signatureGroup.signatures;
        var signature = v10466[i$$32];
        if (instanceType) {
          var v10467 = signature.returnType;
          v10467.type = instanceType;
        } else {
          var v10468 = this.checker;
          var v10469 = signature.returnType;
          JAM.call(v10468.resolveTypeLink, v10468, [scope$$2, v10469, supplyVar], JAM.policy.p1);
        }
        var v10470 = signature.parameters;
        var paramLen = v10470.length;
        var j$$1 = 0;
        var v10472 = j$$1 < paramLen;
        for (;v10472;) {
          var v17688 = signature.parameters;
          var v10471 = v17688[j$$1];
          JAM.call(this.bindSymbol, this, [scope$$2, v10471], JAM.policy.p1);
          j$$1++;
          v10472 = j$$1 < paramLen;
        }
        var v10478 = signature.hasVariableArgList;
        if (v10478) {
          var v10473 = signature.parameters;
          var v10474 = paramLen - 1;
          var lastParam = v10473[v10474];
          lastParam.argsOffset = paramLen - 1;
          var v22170 = lastParam.getType();
          var v17689 = v22170.isArray();
          var v10477 = !v17689;
          if (v10477) {
            var v17690 = this.checker;
            var v10475 = v17690.errorReporter;
            JAM.call(v10475.simpleErrorFromSym, v10475, [lastParam, "... parameter must have array type"], JAM.policy.p1);
            var v17691 = lastParam.parameter;
            var v10476 = v17691.typeLink;
            var v17692 = this.checker;
            var v24439 = lastParam.parameter;
            var v22171 = v24439.typeLink;
            var v17693 = v22171.type;
            var v26995 = JAM.call(v17692.makeArrayType, v17692, [v17693]);
            v10476.type = v26995;
          }
        }
        i$$32++;
        v10479 = i$$32 < len$$9;
      }
      return;
    }
    function v409(scope$$1, type$$25) {
      var v10480 = type$$25.extendsTypeLinks;
      var v26996 = JAM.call(this.resolveBaseTypeLinks, this, [v10480, scope$$1], JAM.policy.p1);
      type$$25.extendsList = v26996;
      var i$$31 = 0;
      var v10481 = type$$25.extendsList;
      var len$$8 = v10481.length;
      var derivedIsClass = type$$25.isClassInstance();
      var v10490 = i$$31 < len$$8;
      for (;v10490;) {
        var v17694 = type$$25.extendsList;
        var v10482 = v17694[i$$31];
        var baseIsClass = v10482.isClassInstance();
        var v22172 = type$$25.extendsList;
        var v17695 = v22172[i$$31];
        var v22173 = this.checker;
        var v17696 = v22173.anyType;
        var v10489 = v17695 != v17696;
        if (v10489) {
          var v17697 = type$$25.extendsTypeLinks;
          var v10483 = v17697[i$$31];
          var baseRef = v10483.ast;
          if (derivedIsClass) {
            var v10486 = !baseIsClass;
            if (v10486) {
              var v17698 = this.checker;
              var v10484 = v17698.errorReporter;
              var v25983 = type$$25.extendsList;
              var v25476 = v25983[i$$31];
              var v24440 = v25476.symbol;
              var v22174 = v24440.fullName();
              var v17699 = "A class may only extend other classes, " + v22174;
              var v10485 = v17699 + " is not a class.";
              JAM.call(v10484.simpleError, v10484, [baseRef, v10485], JAM.policy.p1);
            }
          } else {
            if (baseIsClass) {
              var v17700 = this.checker;
              var v10487 = v17700.errorReporter;
              var v25984 = type$$25.extendsList;
              var v25477 = v25984[i$$31];
              var v24441 = v25477.symbol;
              var v22175 = v24441.fullName();
              var v17701 = "An interface may only extend other interfaces, " + v22175;
              var v10488 = v17701 + " is a class.";
              JAM.call(v10487.simpleError, v10487, [baseRef, v10488], JAM.policy.p1);
            }
          }
        }
        i$$31++;
        v10490 = i$$31 < len$$8;
      }
      var v10491 = type$$25.implementsTypeLinks;
      var v26997 = JAM.call(this.resolveBaseTypeLinks, this, [v10491, scope$$1], JAM.policy.p1);
      type$$25.implementsList = v26997;
      var v10498 = type$$25.implementsList;
      if (v10498) {
        i$$31 = 0;
        var v17702 = type$$25.implementsList;
        len$$8 = v17702.length;
        var v10497 = i$$31 < len$$8;
        for (;v10497;) {
          var v10492 = type$$25.implementsList;
          var iface = v10492[i$$31];
          var v17703 = type$$25.implementsTypeLinks;
          var v10493 = v17703[i$$31];
          baseRef = v10493.ast;
          var v10496 = iface.isClassInstance();
          if (v10496) {
            if (derivedIsClass) {
              var v17704 = this.checker;
              var v10494 = v17704.errorReporter;
              var v24442 = iface.symbol;
              var v22176 = v24442.fullName();
              var v17705 = "A class may only implement an interface; " + v22176;
              var v10495 = v17705 + " is a class.";
              JAM.call(v10494.simpleError, v10494, [baseRef, v10495], JAM.policy.p1);
            }
          }
          i$$31++;
          v10497 = i$$31 < len$$8;
        }
      }
      return;
    }
    function v408(typeLinks, scope) {
      var extendsList$$3 = null;
      if (typeLinks) {
        extendsList$$3 = new Array;
        var i$$30 = 0;
        var len$$7 = typeLinks.length;
        var v10501 = i$$30 < len$$7;
        for (;v10501;) {
          var v10499 = this.checker;
          var v10500 = typeLinks[i$$30];
          var v26998 = JAM.call(v10499.resolveBaseTypeLink, v10499, [v10500, scope], JAM.policy.p1);
          extendsList$$3[i$$30] = v26998;
          i$$30++;
          v10501 = i$$30 < len$$7;
        }
      }
      return extendsList$$3;
    }
    function Binder$$1(checker$$1) {
      this.checker = checker$$1;
      return;
    }
    var v10502 = Binder$$1.prototype;
    v10502.resolveBaseTypeLinks = v408;
    var v10503 = Binder$$1.prototype;
    v10503.resolveBases = v409;
    var v10504 = Binder$$1.prototype;
    v10504.resolveSignatureGroup = v410;
    var v10505 = Binder$$1.prototype;
    v10505.bindType = v411;
    var v10506 = Binder$$1.prototype;
    v10506.bindSymbol = v413;
    var v10507 = Binder$$1.prototype;
    v10507.bind = v415;
    return Binder$$1;
  }
  var Binder = v416();
  TypeScript$$9.Binder = Binder;
  return;
}
function v407(TypeScript$$8) {
  function v406() {
    function v405(script$$6, position$$1) {
      var lineInfo = {line:-1, col:-1};
      var v17706 = script$$6.locationInfo;
      var v10508 = v17706.lineMap;
      JAM.call(TypeScript$$8.getSourceLineColFromMap, TypeScript$$8, [lineInfo, position$$1, v10508], JAM.policy.p1);
      var v17707 = lineInfo.col;
      var v10509 = v17707 !== -1;
      if (v10509) {
        lineInfo.col++;
      }
      var v24443 = lineInfo.line;
      var v22177 = "(" + v24443;
      var v17708 = v22177 + ", ";
      var v17709 = lineInfo.col;
      var v10510 = v17708 + v17709;
      return v10510 + ")";
    }
    function v404(s$$9, targetLength, paddingString, leftPadding) {
      var v10511;
      if (leftPadding) {
        v10511 = "";
      } else {
        v10511 = s$$9;
      }
      var result$$5 = v10511;
      var i$$29 = s$$9.length;
      var v10512 = i$$29 < targetLength;
      for (;v10512;) {
        result$$5 = result$$5 + paddingString;
        i$$29++;
        v10512 = i$$29 < targetLength;
      }
      var v17710;
      if (leftPadding) {
        v17710 = s$$9;
      } else {
        v17710 = "";
      }
      var v10513 = v17710;
      result$$5 = result$$5 + v10513;
      return result$$5;
    }
    function v403(linemap) {
      var result$$4 = "[";
      var i$$28 = 0;
      var v17711 = linemap.length;
      var v10515 = i$$28 < v17711;
      for (;v10515;) {
        var v10514 = i$$28 > 0;
        if (v10514) {
          result$$4 = result$$4 + ",";
        }
        var v17712 = linemap[i$$28];
        result$$4 = result$$4 + v17712;
        i$$28++;
        var v17713 = linemap.length;
        v10515 = i$$28 < v17713;
      }
      result$$4 = result$$4 + "]";
      var v10516 = this.logger;
      var v10517 = "linemap: " + result$$4;
      JAM.call(v10516.log, v10516, [v10517]);
      return;
    }
    function v402(script$$5, comments$$3, indent$$2) {
      var v10518 = comments$$3 == null;
      if (v10518) {
        return;
      }
      var i$$27 = 0;
      var v17714 = comments$$3.length;
      var v10520 = i$$27 < v17714;
      for (;v10520;) {
        var v10519 = comments$$3[i$$27];
        JAM.call(this.logNode, this, [script$$5, v10519, indent$$2], JAM.policy.p1);
        i$$27++;
        var v17715 = comments$$3.length;
        v10520 = i$$27 < v17715;
      }
      return;
    }
    function v401(script$$4, cur$$8, indent$$1) {
      var msg = JAM.call(this.addPadding, this, ["", indent$$1, "| ", true], JAM.policy.p1);
      var v17716 = cur$$8.treeViewLabel();
      var v10521 = "+ " + v17716;
      msg = msg.concat(v10521);
      msg = JAM.call(this.addPadding, this, [msg, 70, " ", false], JAM.policy.p1);
      var v17717 = cur$$8.minChar;
      var v10522 = JAM.call(this.addLineColumn, this, [script$$4, v17717], JAM.policy.p1);
      msg = msg + v10522;
      msg = JAM.call(this.addPadding, this, [msg, 80, " ", false], JAM.policy.p1);
      msg = msg + "=> ";
      var v17718 = cur$$8.limChar;
      var v10523 = JAM.call(this.addLineColumn, this, [script$$4, v17718], JAM.policy.p1);
      msg = msg + v10523;
      msg = JAM.call(this.addPadding, this, [msg, 102, " ", false], JAM.policy.p1);
      var v26223 = cur$$8.minChar;
      var v25985 = v26223.toString();
      var v25478 = JAM.call(this.addPadding, this, [v25985, 1, " ", true], JAM.policy.p1);
      var v24444 = "[" + v25478;
      var v22178 = v24444 + ", ";
      var v25479 = cur$$8.limChar;
      var v24445 = v25479.toString();
      var v22179 = JAM.call(this.addPadding, this, [v24445, 1, " ", true], JAM.policy.p1);
      var v17719 = v22178 + v22179;
      var v10524 = v17719 + "]";
      msg = msg.concat(v10524);
      msg = JAM.call(this.addPadding, this, [msg, 115, " ", false], JAM.policy.p1);
      var v17720 = cur$$8.sym;
      var v10525 = "sym=" + v17720;
      msg = msg.concat(v10525);
      msg = JAM.call(this.addPadding, this, [msg, 135, " ", false], JAM.policy.p1);
      var v22180;
      var v25480 = cur$$8.type;
      var v24447 = v25480 === null;
      if (v24447) {
        v22180 = "null";
      } else {
        var v24446 = cur$$8.type;
        v22180 = v24446.getTypeName();
      }
      var v17721 = v22180;
      var v10526 = "type=" + v17721;
      msg = msg.concat(v10526);
      var v10527 = this.logger;
      JAM.call(v10527.log, v10527, [msg]);
      return;
    }
    function v400(script$$3) {
      function post$$6(cur$$7, parent$$42) {
        stack.pop();
        return cur$$7;
      }
      function pre$$9(cur$$6, parent$$41) {
        JAM.call(stack.push, stack, [cur$$6]);
        var v17722 = stack.length;
        var v10528 = v17722 - 1;
        var indent = v10528 * 2;
        var v10529 = cur$$6.preComments;
        JAM.call(_this.logComments, _this, [script$$3, v10529, indent], JAM.policy.p1);
        JAM.call(_this.logNode, _this, [script$$3, cur$$6, indent], JAM.policy.p1);
        var v10530 = cur$$6.postComments;
        JAM.call(_this.logComments, _this, [script$$3, v10530, indent], JAM.policy.p1);
        return cur$$6;
      }
      var _this = this;
      var v17723 = script$$3.locationInfo;
      var v10531 = v17723.lineMap;
      JAM.call(this.logLinemap, this, [v10531]);
      var stack = [];
      var v10532 = TypeScript$$8.getAstWalkerFactory();
      JAM.call(v10532.walk, v10532, [script$$3, pre$$9, post$$6], JAM.policy.p1);
      return;
    }
    function AstLogger$$1(logger) {
      this.logger = logger;
      return;
    }
    var v10533 = AstLogger$$1.prototype;
    v10533.logScript = v400;
    var v10534 = AstLogger$$1.prototype;
    v10534.logNode = v401;
    var v10535 = AstLogger$$1.prototype;
    v10535.logComments = v402;
    var v10536 = AstLogger$$1.prototype;
    v10536.logLinemap = v403;
    var v10537 = AstLogger$$1.prototype;
    v10537.addPadding = v404;
    var v10538 = AstLogger$$1.prototype;
    v10538.addLineColumn = v405;
    return AstLogger$$1;
  }
  var AstLogger = v406();
  TypeScript$$8.AstLogger = AstLogger;
  return;
}
function v399(TypeScript$$7) {
  function v398(GetAstPathOptions$$1) {
    GetAstPathOptions$$1._map = [];
    GetAstPathOptions$$1.Default = 0;
    GetAstPathOptions$$1.EdgeInclusive = 1;
    GetAstPathOptions$$1.DontPruneSearchBasedOnPosition = 1 << 1;
    return;
  }
  function v397() {
    function AstPathContext$$1() {
      var v10539 = TypeScript$$7.AstPath;
      var v26999 = new v10539;
      this.path = v26999;
      return;
    }
    return AstPathContext$$1;
  }
  function v396() {
    function v395() {
      var v22181 = this.count();
      var v17724 = v22181 >= 1;
      if (v17724) {
        var v25481 = this.asts;
        var v25986 = this.top;
        var v25482 = v25986 - 0;
        var v24448 = v25481[v25482];
        var v22182 = v24448.nodeType;
        var v24449 = TypeScript$$7.NodeType;
        var v22183 = v24449.Block;
        v17724 = v22182 === v22183;
      }
      var v10540 = v17724;
      if (v10540) {
        var v24450 = this.asts;
        var v25483 = this.top;
        var v24451 = v25483 - 0;
        var v22184 = v24450[v24451];
        var v17725 = v22184.isStatementBlock;
        v10540 = v17725 === false;
      }
      return v10540;
    }
    function v394() {
      var v24452 = this.count();
      var v22185 = v24452 >= 2;
      if (v22185) {
        var v25987 = this.asts;
        var v26224 = this.top;
        var v25988 = v26224 - 0;
        var v25484 = v25987[v25988];
        var v24453 = v25484.nodeType;
        var v25485 = TypeScript$$7.NodeType;
        var v24454 = v25485.List;
        v22185 = v24453 === v24454;
      }
      var v17726 = v22185;
      if (v17726) {
        var v25486 = this.asts;
        var v25989 = this.top;
        var v25487 = v25989 - 1;
        var v24455 = v25486[v25487];
        var v22186 = v24455.nodeType;
        var v24456 = TypeScript$$7.NodeType;
        var v22187 = v24456.New;
        v17726 = v22186 === v22187;
      }
      var v10541 = v17726;
      if (v10541) {
        var v24457 = this.asts;
        var v25488 = this.top;
        var v24458 = v25488 - 1;
        var v22188 = v24457[v24458];
        var v17727 = v22188.arguments;
        var v22189 = this.asts;
        var v24459 = this.top;
        var v22190 = v24459 - 0;
        var v17728 = v22189[v22190];
        v10541 = v17727 === v17728;
      }
      return v10541;
    }
    function v393() {
      var v24460 = this.count();
      var v22191 = v24460 >= 2;
      if (v22191) {
        var v25990 = this.asts;
        var v26225 = this.top;
        var v25991 = v26225 - 0;
        var v25489 = v25990[v25991];
        var v24461 = v25489.nodeType;
        var v25490 = TypeScript$$7.NodeType;
        var v24462 = v25490.List;
        v22191 = v24461 === v24462;
      }
      var v17729 = v22191;
      if (v17729) {
        var v25491 = this.asts;
        var v25992 = this.top;
        var v25492 = v25992 - 1;
        var v24463 = v25491[v25492];
        var v22192 = v24463.nodeType;
        var v24464 = TypeScript$$7.NodeType;
        var v22193 = v24464.Call;
        v17729 = v22192 === v22193;
      }
      var v10542 = v17729;
      if (v10542) {
        var v24465 = this.asts;
        var v25493 = this.top;
        var v24466 = v25493 - 1;
        var v22194 = v24465[v24466];
        var v17730 = v22194.arguments;
        var v22195 = this.asts;
        var v24467 = this.top;
        var v22196 = v24467 - 0;
        var v17731 = v22195[v22196];
        v10542 = v17730 === v17731;
      }
      return v10542;
    }
    function v392() {
      var v24468 = this.count();
      var v22197 = v24468 >= 3;
      if (v22197) {
        var v25993 = this.asts;
        var v26226 = this.top;
        var v25994 = v26226 - 1;
        var v25494 = v25993[v25994];
        var v24469 = v25494.nodeType;
        var v25495 = TypeScript$$7.NodeType;
        var v24470 = v25495.List;
        v22197 = v24469 === v24470;
      }
      var v17732 = v22197;
      if (v17732) {
        var v25496 = this.asts;
        var v25995 = this.top;
        var v25497 = v25995 - 2;
        var v24471 = v25496[v25497];
        var v22198 = v24471.nodeType;
        var v24472 = TypeScript$$7.NodeType;
        var v22199 = v24472.FuncDecl;
        v17732 = v22198 === v22199;
      }
      var v10543 = v17732;
      if (v10543) {
        var v24473 = this.asts;
        var v25498 = this.top;
        var v24474 = v25498 - 2;
        var v22200 = v24473[v24474];
        var v17733 = v22200.arguments;
        var v22201 = this.asts;
        var v24475 = this.top;
        var v22202 = v24475 - 1;
        var v17734 = v22201[v22202];
        v10543 = v17733 === v17734;
      }
      return v10543;
    }
    function v391() {
      var v24476 = this.count();
      var v22203 = v24476 >= 2;
      if (v22203) {
        var v25996 = this.asts;
        var v26227 = this.top;
        var v25997 = v26227 - 0;
        var v25499 = v25996[v25997];
        var v24477 = v25499.nodeType;
        var v25500 = TypeScript$$7.NodeType;
        var v24478 = v25500.List;
        v22203 = v24477 === v24478;
      }
      var v17735 = v22203;
      if (v17735) {
        var v25501 = this.asts;
        var v25998 = this.top;
        var v25502 = v25998 - 1;
        var v24479 = v25501[v25502];
        var v22204 = v24479.nodeType;
        var v24480 = TypeScript$$7.NodeType;
        var v22205 = v24480.FuncDecl;
        v17735 = v22204 === v22205;
      }
      var v10544 = v17735;
      if (v10544) {
        var v24481 = this.asts;
        var v25503 = this.top;
        var v24482 = v25503 - 1;
        var v22206 = v24481[v24482];
        var v17736 = v22206.arguments;
        var v22207 = this.asts;
        var v24483 = this.top;
        var v22208 = v24483 - 0;
        var v17737 = v22207[v22208];
        v10544 = v17736 === v17737;
      }
      return v10544;
    }
    function v390() {
      var v22209 = this.count();
      var v17738 = v22209 >= 1;
      if (v17738) {
        var v25504 = this.asts;
        var v25505 = this.top;
        var v24484 = v25504[v25505];
        var v22210 = v24484.nodeType;
        var v24485 = TypeScript$$7.NodeType;
        var v22211 = v24485.List;
        v17738 = v22210 === v22211;
      }
      var v10545 = v17738;
      if (v10545) {
        var v25506 = this.asts;
        var v25507 = this.top;
        var v24486 = v25506[v25507];
        var v22212 = v24486.members;
        var v17739 = v22212.length;
        v10545 = v17739 === 1;
      }
      return v10545;
    }
    function v389() {
      return this.isBodyOfCase();
    }
    function v388() {
      var v22213 = this.count();
      var v17740 = v22213 >= 2;
      if (v17740) {
        var v25508 = this.asts;
        var v25999 = this.top;
        var v25509 = v25999 - 1;
        var v24487 = v25508[v25509];
        var v22214 = v24487.nodeType;
        var v24488 = TypeScript$$7.NodeType;
        var v22215 = v24488.If;
        v17740 = v22214 === v22215;
      }
      var v10546 = v17740;
      if (v10546) {
        var v24489 = this.asts;
        var v25510 = this.top;
        var v24490 = v25510 - 1;
        var v22216 = v24489[v24490];
        var v17741 = v22216.elseBod;
        var v22217 = this.asts;
        var v24491 = this.top;
        var v22218 = v24491 - 0;
        var v17742 = v22217[v22218];
        v10546 = v17741 == v17742;
      }
      return v10546;
    }
    function v387() {
      var v22219 = this.count();
      var v17743 = v22219 >= 2;
      if (v17743) {
        var v25511 = this.asts;
        var v26000 = this.top;
        var v25512 = v26000 - 1;
        var v24492 = v25511[v25512];
        var v22220 = v24492.nodeType;
        var v24493 = TypeScript$$7.NodeType;
        var v22221 = v24493.If;
        v17743 = v22220 === v22221;
      }
      var v10547 = v17743;
      if (v10547) {
        var v24494 = this.asts;
        var v25513 = this.top;
        var v24495 = v25513 - 1;
        var v22222 = v24494[v24495];
        var v17744 = v22222.thenBod;
        var v22223 = this.asts;
        var v24496 = this.top;
        var v22224 = v24496 - 0;
        var v17745 = v22223[v22224];
        v10547 = v17744 == v17745;
      }
      return v10547;
    }
    function v386() {
      var v17746 = this.count();
      var v10548 = v17746 >= 2;
      if (v10548) {
        var v24497 = this.asts;
        var v25514 = this.top;
        var v24498 = v25514 - 1;
        var v22225 = v24497[v24498];
        var v17747 = v22225.nodeType;
        var v22226 = TypeScript$$7.NodeType;
        var v17748 = v22226.List;
        v10548 = v17747 === v17748;
      }
      return v10548;
    }
    function v385() {
      var v22227 = this.count();
      var v17749 = v22227 >= 2;
      if (v17749) {
        var v25515 = this.asts;
        var v26001 = this.top;
        var v25516 = v26001 - 1;
        var v24499 = v25515[v25516];
        var v22228 = v24499.nodeType;
        var v24500 = TypeScript$$7.NodeType;
        var v22229 = v24500.Member;
        v17749 = v22228 === v22229;
      }
      var v10549 = v17749;
      if (v10549) {
        var v24501 = this.asts;
        var v25517 = this.top;
        var v24502 = v25517 - 1;
        var v22230 = v24501[v24502];
        var v17750 = v22230.operand2;
        var v22231 = this.asts;
        var v24503 = this.top;
        var v22232 = v24503 - 0;
        var v17751 = v22231[v22232];
        v10549 = v17750 === v17751;
      }
      return v10549;
    }
    function v384() {
      var v22233 = this.count();
      var v17752 = v22233 >= 2;
      if (v17752) {
        var v25518 = this.asts;
        var v26002 = this.top;
        var v25519 = v26002 - 1;
        var v24504 = v25518[v25519];
        var v22234 = v24504.nodeType;
        var v24505 = TypeScript$$7.NodeType;
        var v22235 = v24505.Member;
        v17752 = v22234 === v22235;
      }
      var v10550 = v17752;
      if (v10550) {
        var v24506 = this.asts;
        var v25520 = this.top;
        var v24507 = v25520 - 1;
        var v22236 = v24506[v24507];
        var v17753 = v22236.operand1;
        var v22237 = this.asts;
        var v24508 = this.top;
        var v22238 = v24508 - 0;
        var v17754 = v22237[v22238];
        v10550 = v17753 === v17754;
      }
      return v10550;
    }
    function v383() {
      var v24509 = this.count();
      var v22239 = v24509 >= 2;
      if (v22239) {
        var v26003 = this.asts;
        var v26228 = this.top;
        var v26004 = v26228 - 1;
        var v25521 = v26003[v26004];
        var v24510 = v25521.nodeType;
        var v25522 = TypeScript$$7.NodeType;
        var v24511 = v25522.ArrayLit;
        v22239 = v24510 === v24511;
      }
      var v17755 = v22239;
      if (v17755) {
        var v25523 = this.asts;
        var v26005 = this.top;
        var v25524 = v26005 - 0;
        var v24512 = v25523[v25524];
        var v22240 = v24512.nodeType;
        var v24513 = TypeScript$$7.NodeType;
        var v22241 = v24513.List;
        v17755 = v22240 === v22241;
      }
      var v10551 = v17755;
      if (v10551) {
        var v24514 = this.asts;
        var v25525 = this.top;
        var v24515 = v25525 - 1;
        var v22242 = v24514[v24515];
        var v17756 = v22242.operand;
        var v22243 = this.asts;
        var v24516 = this.top;
        var v22244 = v24516 - 0;
        var v17757 = v22243[v22244];
        v10551 = v17756 == v17757;
      }
      return v10551;
    }
    function v382() {
      var v26006 = this.count();
      var v25526 = v26006 >= 4;
      if (v25526) {
        var v26332 = this.asts;
        var v26386 = this.top;
        var v26333 = v26386 - 3;
        var v26229 = v26332[v26333];
        var v26007 = v26229.nodeType;
        var v26230 = TypeScript$$7.NodeType;
        var v26008 = v26230.ObjectLit;
        v25526 = v26007 === v26008;
      }
      var v24517 = v25526;
      if (v24517) {
        var v26231 = this.asts;
        var v26334 = this.top;
        var v26232 = v26334 - 2;
        var v26009 = v26231[v26232];
        var v25527 = v26009.nodeType;
        var v26010 = TypeScript$$7.NodeType;
        var v25528 = v26010.List;
        v24517 = v25527 === v25528;
      }
      var v22245 = v24517;
      if (v22245) {
        var v26011 = this.asts;
        var v26233 = this.top;
        var v26012 = v26233 - 1;
        var v25529 = v26011[v26012];
        var v24518 = v25529.nodeType;
        var v25530 = TypeScript$$7.NodeType;
        var v24519 = v25530.Member;
        v22245 = v24518 === v24519;
      }
      var v17758 = v22245;
      if (v17758) {
        var v25531 = this.asts;
        var v26013 = this.top;
        var v25532 = v26013 - 0;
        var v24520 = v25531[v25532];
        var v22246 = v24520.nodeType;
        var v24521 = TypeScript$$7.NodeType;
        var v22247 = v24521.Name;
        v17758 = v22246 === v22247;
      }
      var v10552 = v17758;
      if (v10552) {
        var v24522 = this.asts;
        var v25533 = this.top;
        var v24523 = v25533 - 3;
        var v22248 = v24522[v24523];
        var v17759 = v22248.operand;
        var v22249 = this.asts;
        var v24524 = this.top;
        var v22250 = v24524 - 2;
        var v17760 = v22249[v22250];
        v10552 = v17759 == v17760;
      }
      return v10552;
    }
    function v381() {
      var v25534 = this.count();
      var v24525 = v25534 >= 3;
      if (v24525) {
        var v26234 = this.asts;
        var v26335 = this.top;
        var v26235 = v26335 - 2;
        var v26014 = v26234[v26235];
        var v25535 = v26014.nodeType;
        var v26015 = TypeScript$$7.NodeType;
        var v25536 = v26015.ObjectLit;
        v24525 = v25535 === v25536;
      }
      var v22251 = v24525;
      if (v22251) {
        var v26016 = this.asts;
        var v26236 = this.top;
        var v26017 = v26236 - 1;
        var v25537 = v26016[v26017];
        var v24526 = v25537.nodeType;
        var v25538 = TypeScript$$7.NodeType;
        var v24527 = v25538.List;
        v22251 = v24526 === v24527;
      }
      var v17761 = v22251;
      if (v17761) {
        var v25539 = this.asts;
        var v26018 = this.top;
        var v25540 = v26018 - 0;
        var v24528 = v25539[v25540];
        var v22252 = v24528.nodeType;
        var v24529 = TypeScript$$7.NodeType;
        var v22253 = v24529.Member;
        v17761 = v22252 === v22253;
      }
      var v10553 = v17761;
      if (v10553) {
        var v24530 = this.asts;
        var v25541 = this.top;
        var v24531 = v25541 - 2;
        var v22254 = v24530[v24531];
        var v17762 = v22254.operand;
        var v22255 = this.asts;
        var v24532 = this.top;
        var v22256 = v24532 - 1;
        var v17763 = v22255[v22256];
        v10553 = v17762 == v17763;
      }
      return v10553;
    }
    function v380() {
      var v25542 = this.count();
      var v24533 = v25542 >= 2;
      if (v24533) {
        var v26237 = this.asts;
        var v26336 = this.top;
        var v26238 = v26336 - 1;
        var v26019 = v26237[v26238];
        var v25543 = v26019.nodeType;
        var v26020 = TypeScript$$7.NodeType;
        var v25544 = v26020.ObjectLit;
        v24533 = v25543 === v25544;
      }
      var v22257 = v24533;
      if (v22257) {
        var v26021 = this.asts;
        var v26239 = this.top;
        var v26022 = v26239 - 0;
        var v25545 = v26021[v26022];
        var v24534 = v25545.nodeType;
        var v25546 = TypeScript$$7.NodeType;
        var v24535 = v25546.List;
        v22257 = v24534 === v24535;
      }
      var v17764 = v22257;
      if (v17764) {
        var v25547 = this.asts;
        var v26023 = this.top;
        var v25548 = v26023 - 1;
        var v24536 = v25547[v25548];
        var v22258 = v24536.operand;
        var v24537 = this.asts;
        var v25549 = this.top;
        var v24538 = v25549 - 0;
        var v22259 = v24537[v24538];
        v17764 = v22258 == v22259;
      }
      var v10554 = v17764;
      if (v10554) {
        var v25550 = this.asts;
        var v26024 = this.top;
        var v25551 = v26024 - 0;
        var v24539 = v25550[v25551];
        var v22260 = v24539.members;
        var v17765 = v22260.length;
        v10554 = v17765 == 0;
      }
      return v10554;
    }
    function v379() {
      return this.isListOfObjectLit();
    }
    function v378() {
      var v24540 = this.count();
      var v22261 = v24540 >= 2;
      if (v22261) {
        var v26025 = this.asts;
        var v26240 = this.top;
        var v26026 = v26240 - 1;
        var v25552 = v26025[v26026];
        var v24541 = v25552.nodeType;
        var v25553 = TypeScript$$7.NodeType;
        var v24542 = v25553.ObjectLit;
        v22261 = v24541 === v24542;
      }
      var v17766 = v22261;
      if (v17766) {
        var v25554 = this.asts;
        var v26027 = this.top;
        var v25555 = v26027 - 0;
        var v24543 = v25554[v25555];
        var v22262 = v24543.nodeType;
        var v24544 = TypeScript$$7.NodeType;
        var v22263 = v24544.List;
        v17766 = v22262 === v22263;
      }
      var v10555 = v17766;
      if (v10555) {
        var v24545 = this.asts;
        var v25556 = this.top;
        var v24546 = v25556 - 1;
        var v22264 = v24545[v24546];
        var v17767 = v22264.operand;
        var v22265 = this.asts;
        var v24547 = this.top;
        var v22266 = v24547 - 0;
        var v17768 = v22265[v22266];
        v10555 = v17767 == v17768;
      }
      return v10555;
    }
    function v377() {
      var v25557 = this.count();
      var v24548 = v25557 >= 3;
      if (v24548) {
        var v26241 = this.asts;
        var v26337 = this.top;
        var v26242 = v26337 - 2;
        var v26028 = v26241[v26242];
        var v25558 = v26028.nodeType;
        var v26029 = TypeScript$$7.NodeType;
        var v25559 = v26029.Switch;
        v24548 = v25558 === v25559;
      }
      var v22267 = v24548;
      if (v22267) {
        var v26030 = this.asts;
        var v26243 = this.top;
        var v26031 = v26243 - 1;
        var v25560 = v26030[v26031];
        var v24549 = v25560.nodeType;
        var v25561 = TypeScript$$7.NodeType;
        var v24550 = v25561.List;
        v22267 = v24549 === v24550;
      }
      var v17769 = v22267;
      if (v17769) {
        var v25562 = this.asts;
        var v26032 = this.top;
        var v25563 = v26032 - 2;
        var v24551 = v25562[v25563];
        var v22268 = v24551.caseList;
        var v24552 = this.asts;
        var v25564 = this.top;
        var v24553 = v25564 - 1;
        var v22269 = v24552[v24553];
        v17769 = v22268 == v22269;
      }
      var v10556 = v17769;
      if (v10556) {
        var v24554 = this.asts;
        var v25565 = this.top;
        var v24555 = v25565 - 2;
        var v22270 = v24554[v24555];
        var v17770 = v22270.defaultCase;
        var v22271 = this.asts;
        var v24556 = this.top;
        var v22272 = v24556 - 0;
        var v17771 = v22271[v22272];
        v10556 = v17770 == v17771;
      }
      return v10556;
    }
    function v376() {
      var v24557 = this.count();
      var v22273 = v24557 >= 3;
      if (v22273) {
        var v26033 = this.asts;
        var v26244 = this.top;
        var v26034 = v26244 - 2;
        var v25566 = v26033[v26034];
        var v24558 = v25566.nodeType;
        var v25567 = TypeScript$$7.NodeType;
        var v24559 = v25567.Switch;
        v22273 = v24558 === v24559;
      }
      var v17772 = v22273;
      if (v17772) {
        var v25568 = this.asts;
        var v26035 = this.top;
        var v25569 = v26035 - 1;
        var v24560 = v25568[v25569];
        var v22274 = v24560.nodeType;
        var v24561 = TypeScript$$7.NodeType;
        var v22275 = v24561.List;
        v17772 = v22274 === v22275;
      }
      var v10557 = v17772;
      if (v10557) {
        var v24562 = this.asts;
        var v25570 = this.top;
        var v24563 = v25570 - 2;
        var v22276 = v24562[v24563];
        var v17773 = v22276.caseList;
        var v22277 = this.asts;
        var v24564 = this.top;
        var v22278 = v24564 - 1;
        var v17774 = v22277[v22278];
        v10557 = v17773 == v17774;
      }
      return v10557;
    }
    function v375() {
      var v22279 = this.count();
      var v17775 = v22279 >= 2;
      if (v17775) {
        var v25571 = this.asts;
        var v26036 = this.top;
        var v25572 = v26036 - 1;
        var v24565 = v25571[v25572];
        var v22280 = v24565.nodeType;
        var v24566 = TypeScript$$7.NodeType;
        var v22281 = v24566.Finally;
        v17775 = v22280 === v22281;
      }
      var v10558 = v17775;
      if (v10558) {
        var v24567 = this.asts;
        var v25573 = this.top;
        var v24568 = v25573 - 1;
        var v22282 = v24567[v24568];
        var v17776 = v22282.body;
        var v22283 = this.asts;
        var v24569 = this.top;
        var v22284 = v24569 - 0;
        var v17777 = v22283[v22284];
        v10558 = v17776 == v17777;
      }
      return v10558;
    }
    function v374() {
      var v22285 = this.count();
      var v17778 = v22285 >= 2;
      if (v17778) {
        var v25574 = this.asts;
        var v26037 = this.top;
        var v25575 = v26037 - 1;
        var v24570 = v25574[v25575];
        var v22286 = v24570.nodeType;
        var v24571 = TypeScript$$7.NodeType;
        var v22287 = v24571.With;
        v17778 = v22286 === v22287;
      }
      var v10559 = v17778;
      if (v10559) {
        var v24572 = this.asts;
        var v25576 = this.top;
        var v24573 = v25576 - 1;
        var v22288 = v24572[v24573];
        var v17779 = v22288.body;
        var v22289 = this.asts;
        var v24574 = this.top;
        var v22290 = v24574 - 0;
        var v17780 = v22289[v22290];
        v10559 = v17779 == v17780;
      }
      return v10559;
    }
    function v373() {
      var v22291 = this.count();
      var v17781 = v22291 >= 2;
      if (v17781) {
        var v25577 = this.asts;
        var v26038 = this.top;
        var v25578 = v26038 - 1;
        var v24575 = v25577[v25578];
        var v22292 = v24575.nodeType;
        var v24576 = TypeScript$$7.NodeType;
        var v22293 = v24576.ForIn;
        v17781 = v22292 === v22293;
      }
      var v10560 = v17781;
      if (v10560) {
        var v24577 = this.asts;
        var v25579 = this.top;
        var v24578 = v25579 - 1;
        var v22294 = v24577[v24578];
        var v17782 = v22294.body;
        var v22295 = this.asts;
        var v24579 = this.top;
        var v22296 = v24579 - 0;
        var v17783 = v22295[v22296];
        v10560 = v17782 == v17783;
      }
      return v10560;
    }
    function v372() {
      var v22297 = this.count();
      var v17784 = v22297 >= 2;
      if (v17784) {
        var v25580 = this.asts;
        var v26039 = this.top;
        var v25581 = v26039 - 1;
        var v24580 = v25580[v25581];
        var v22298 = v24580.nodeType;
        var v24581 = TypeScript$$7.NodeType;
        var v22299 = v24581.While;
        v17784 = v22298 === v22299;
      }
      var v10561 = v17784;
      if (v10561) {
        var v24582 = this.asts;
        var v25582 = this.top;
        var v24583 = v25582 - 1;
        var v22300 = v24582[v24583];
        var v17785 = v22300.body;
        var v22301 = this.asts;
        var v24584 = this.top;
        var v22302 = v24584 - 0;
        var v17786 = v22301[v22302];
        v10561 = v17785 == v17786;
      }
      return v10561;
    }
    function v371() {
      var v22303 = this.count();
      var v17787 = v22303 >= 2;
      if (v17787) {
        var v25583 = this.asts;
        var v26040 = this.top;
        var v25584 = v26040 - 1;
        var v24585 = v25583[v25584];
        var v22304 = v24585.nodeType;
        var v24586 = TypeScript$$7.NodeType;
        var v22305 = v24586.DoWhile;
        v17787 = v22304 === v22305;
      }
      var v10562 = v17787;
      if (v10562) {
        var v24587 = this.asts;
        var v25585 = this.top;
        var v24588 = v25585 - 1;
        var v22306 = v24587[v24588];
        var v17788 = v22306.body;
        var v22307 = this.asts;
        var v24589 = this.top;
        var v22308 = v24589 - 0;
        var v17789 = v22307[v22308];
        v10562 = v17788 == v17789;
      }
      return v10562;
    }
    function v370() {
      var v22309 = this.count();
      var v17790 = v22309 >= 2;
      if (v17790) {
        var v25586 = this.asts;
        var v26041 = this.top;
        var v25587 = v26041 - 1;
        var v24590 = v25586[v25587];
        var v22310 = v24590.nodeType;
        var v24591 = TypeScript$$7.NodeType;
        var v22311 = v24591.Catch;
        v17790 = v22310 === v22311;
      }
      var v10563 = v17790;
      if (v10563) {
        var v24592 = this.asts;
        var v25588 = this.top;
        var v24593 = v25588 - 1;
        var v22312 = v24592[v24593];
        var v17791 = v22312.body;
        var v22313 = this.asts;
        var v24594 = this.top;
        var v22314 = v24594 - 0;
        var v17792 = v22313[v22314];
        v10563 = v17791 == v17792;
      }
      return v10563;
    }
    function v369() {
      var v22315 = this.count();
      var v17793 = v22315 >= 2;
      if (v17793) {
        var v25589 = this.asts;
        var v26042 = this.top;
        var v25590 = v26042 - 1;
        var v24595 = v25589[v25590];
        var v22316 = v24595.nodeType;
        var v24596 = TypeScript$$7.NodeType;
        var v22317 = v24596.Try;
        v17793 = v22316 === v22317;
      }
      var v10564 = v17793;
      if (v10564) {
        var v24597 = this.asts;
        var v25591 = this.top;
        var v24598 = v25591 - 1;
        var v22318 = v24597[v24598];
        var v17794 = v22318.body;
        var v22319 = this.asts;
        var v24599 = this.top;
        var v22320 = v24599 - 0;
        var v17795 = v22319[v22320];
        v10564 = v17794 == v17795;
      }
      return v10564;
    }
    function v368() {
      var v22321 = this.count();
      var v17796 = v22321 >= 2;
      if (v17796) {
        var v25592 = this.asts;
        var v26043 = this.top;
        var v25593 = v26043 - 1;
        var v24600 = v25592[v25593];
        var v22322 = v24600.nodeType;
        var v24601 = TypeScript$$7.NodeType;
        var v22323 = v24601.Case;
        v17796 = v22322 === v22323;
      }
      var v10565 = v17796;
      if (v10565) {
        var v24602 = this.asts;
        var v25594 = this.top;
        var v24603 = v25594 - 1;
        var v22324 = v24602[v24603];
        var v17797 = v22324.body;
        var v22325 = this.asts;
        var v24604 = this.top;
        var v22326 = v24604 - 0;
        var v17798 = v22325[v22326];
        v10565 = v17797 == v17798;
      }
      return v10565;
    }
    function v367() {
      var v22327 = this.count();
      var v17799 = v22327 >= 2;
      if (v17799) {
        var v25595 = this.asts;
        var v26044 = this.top;
        var v25596 = v26044 - 1;
        var v24605 = v25595[v25596];
        var v22328 = v24605.nodeType;
        var v24606 = TypeScript$$7.NodeType;
        var v22329 = v24606.For;
        v17799 = v22328 === v22329;
      }
      var v10566 = v17799;
      if (v10566) {
        var v24607 = this.asts;
        var v25597 = this.top;
        var v24608 = v25597 - 1;
        var v22330 = v24607[v24608];
        var v17800 = v22330.body;
        var v22331 = this.asts;
        var v24609 = this.top;
        var v22332 = v24609 - 0;
        var v17801 = v22331[v22332];
        v10566 = v17800 == v17801;
      }
      return v10566;
    }
    function v366() {
      var v22333 = this.count();
      var v17802 = v22333 >= 2;
      if (v17802) {
        var v25598 = this.asts;
        var v26045 = this.top;
        var v25599 = v26045 - 1;
        var v24610 = v25598[v25599];
        var v22334 = v24610.nodeType;
        var v24611 = TypeScript$$7.NodeType;
        var v22335 = v24611.Block;
        v17802 = v22334 === v22335;
      }
      var v10567 = v17802;
      if (v10567) {
        var v24612 = this.asts;
        var v25600 = this.top;
        var v24613 = v25600 - 1;
        var v22336 = v24612[v24613];
        var v17803 = v22336.statements;
        var v22337 = this.asts;
        var v24614 = this.top;
        var v22338 = v24614 - 0;
        var v17804 = v22337[v22338];
        v10567 = v17803 == v17804;
      }
      return v10567;
    }
    function v365() {
      var v22339 = this.count();
      var v17805 = v22339 >= 2;
      if (v17805) {
        var v25601 = this.asts;
        var v26046 = this.top;
        var v25602 = v26046 - 1;
        var v24615 = v25601[v25602];
        var v22340 = v24615.nodeType;
        var v24616 = TypeScript$$7.NodeType;
        var v22341 = v24616.InterfaceDeclaration;
        v17805 = v22340 === v22341;
      }
      var v10568 = v17805;
      if (v10568) {
        var v24617 = this.asts;
        var v25603 = this.top;
        var v24618 = v25603 - 1;
        var v22342 = v24617[v24618];
        var v17806 = v22342.members;
        var v22343 = this.asts;
        var v24619 = this.top;
        var v22344 = v24619 - 0;
        var v17807 = v22343[v22344];
        v10568 = v17806 == v17807;
      }
      return v10568;
    }
    function v364() {
      var v22345 = this.count();
      var v17808 = v22345 >= 2;
      if (v17808) {
        var v25604 = this.asts;
        var v26047 = this.top;
        var v25605 = v26047 - 1;
        var v24620 = v25604[v25605];
        var v22346 = v24620.nodeType;
        var v24621 = TypeScript$$7.NodeType;
        var v22347 = v24621.FuncDecl;
        v17808 = v22346 === v22347;
      }
      var v10569 = v17808;
      if (v10569) {
        var v24622 = this.asts;
        var v25606 = this.top;
        var v24623 = v25606 - 1;
        var v22348 = v24622[v24623];
        var v17809 = v22348.bod;
        var v22349 = this.asts;
        var v24624 = this.top;
        var v22350 = v24624 - 0;
        var v17810 = v22349[v22350];
        v10569 = v17809 == v17810;
      }
      return v10569;
    }
    function v363() {
      var v22351 = this.count();
      var v17811 = v22351 >= 2;
      if (v17811) {
        var v25607 = this.asts;
        var v26048 = this.top;
        var v25608 = v26048 - 1;
        var v24625 = v25607[v25608];
        var v22352 = v24625.nodeType;
        var v24626 = TypeScript$$7.NodeType;
        var v22353 = v24626.ClassDeclaration;
        v17811 = v22352 === v22353;
      }
      var v10570 = v17811;
      if (v10570) {
        var v24627 = this.asts;
        var v25609 = this.top;
        var v24628 = v25609 - 1;
        var v22354 = v24627[v24628];
        var v17812 = v22354.members;
        var v22355 = this.asts;
        var v24629 = this.top;
        var v22356 = v24629 - 0;
        var v17813 = v22355[v22356];
        v10570 = v17812 == v17813;
      }
      return v10570;
    }
    function v362() {
      var v22357 = this.count();
      var v17814 = v22357 >= 2;
      if (v17814) {
        var v25610 = this.asts;
        var v26049 = this.top;
        var v25611 = v26049 - 1;
        var v24630 = v25610[v25611];
        var v22358 = v24630.nodeType;
        var v24631 = TypeScript$$7.NodeType;
        var v22359 = v24631.ModuleDeclaration;
        v17814 = v22358 === v22359;
      }
      var v10571 = v17814;
      if (v10571) {
        var v24632 = this.asts;
        var v25612 = this.top;
        var v24633 = v25612 - 1;
        var v22360 = v24632[v24633];
        var v17815 = v22360.members;
        var v22361 = this.asts;
        var v24634 = this.top;
        var v22362 = v24634 - 0;
        var v17816 = v22361[v22362];
        v10571 = v17815 == v17816;
      }
      return v10571;
    }
    function v361() {
      var v22363 = this.count();
      var v17817 = v22363 >= 2;
      if (v17817) {
        var v25613 = this.asts;
        var v26050 = this.top;
        var v25614 = v26050 - 1;
        var v24635 = v25613[v25614];
        var v22364 = v24635.nodeType;
        var v24636 = TypeScript$$7.NodeType;
        var v22365 = v24636.Switch;
        v17817 = v22364 === v22365;
      }
      var v10572 = v17817;
      if (v10572) {
        var v24637 = this.asts;
        var v25615 = this.top;
        var v24638 = v25615 - 1;
        var v22366 = v24637[v24638];
        var v17818 = v22366.caseList;
        var v22367 = this.asts;
        var v24639 = this.top;
        var v22368 = v24639 - 0;
        var v17819 = v22367[v22368];
        v10572 = v17818 == v17819;
      }
      return v10572;
    }
    function v360() {
      var v22369 = this.count();
      var v17820 = v22369 >= 2;
      if (v17820) {
        var v25616 = this.asts;
        var v26051 = this.top;
        var v25617 = v26051 - 1;
        var v24640 = v25616[v25617];
        var v22370 = v24640.nodeType;
        var v24641 = TypeScript$$7.NodeType;
        var v22371 = v24641.Script;
        v17820 = v22370 === v22371;
      }
      var v10573 = v17820;
      if (v10573) {
        var v24642 = this.asts;
        var v25618 = this.top;
        var v24643 = v25618 - 1;
        var v22372 = v24642[v24643];
        var v17821 = v22372.bod;
        var v22373 = this.asts;
        var v24644 = this.top;
        var v22374 = v24644 - 0;
        var v17822 = v22373[v22374];
        v10573 = v17821 == v17822;
      }
      return v10573;
    }
    function v359() {
      var v25619 = this.count();
      var v24645 = v25619 >= 2;
      if (v24645) {
        var v26245 = this.asts;
        var v26338 = this.top;
        var v26246 = v26338 - 0;
        var v26052 = v26245[v26246];
        var v25620 = v26052.nodeType;
        var v26053 = TypeScript$$7.NodeType;
        var v25621 = v26053.List;
        v24645 = v25620 === v25621;
      }
      var v22375 = v24645;
      if (v22375) {
        var v26054 = this.asts;
        var v26247 = this.top;
        var v26055 = v26247 - 1;
        var v25622 = v26054[v26055];
        var v24646 = v25622.nodeType;
        var v25623 = TypeScript$$7.NodeType;
        var v24647 = v25623.ModuleDeclaration;
        v22375 = v24646 === v24647;
      }
      var v17823 = v22375;
      if (v17823) {
        var v25624 = this.asts;
        var v26056 = this.top;
        var v25625 = v26056 - 1;
        var v24648 = v25624[v25625];
        var v22376 = v24648.members;
        var v24649 = this.asts;
        var v25626 = this.top;
        var v24650 = v25626 - 0;
        var v22377 = v24649[v24650];
        v17823 = v22376 == v22377;
      }
      var v10574 = v17823;
      if (v10574) {
        var v24651 = this.asts;
        var v25627 = this.top;
        var v24652 = v25627 - 1;
        var v22378 = v24651[v24652];
        var v17824 = v22378.modFlags;
        var v22379 = TypeScript$$7.ModuleFlags;
        var v17825 = v22379.IsWholeFile;
        v10574 = JAM.call(TypeScript$$7.hasFlag, TypeScript$$7, [v17824, v17825], JAM.policy.p1);
      }
      return v10574;
    }
    function v358() {
      var v22380 = this.count();
      var v17826 = v22380 >= 1;
      if (v17826) {
        var v25628 = this.asts;
        var v25629 = this.top;
        var v24653 = v25628[v25629];
        var v22381 = v24653.nodeType;
        var v24654 = TypeScript$$7.NodeType;
        var v22382 = v24654.ModuleDeclaration;
        v17826 = v22381 === v22382;
      }
      var v10575 = v17826;
      if (v10575) {
        var v24655 = this.asts;
        var v24656 = this.top;
        var v22383 = v24655[v24656];
        var v17827 = v22383.modFlags;
        var v22384 = TypeScript$$7.ModuleFlags;
        var v17828 = v22384.IsWholeFile;
        v10575 = JAM.call(TypeScript$$7.hasFlag, TypeScript$$7, [v17827, v17828], JAM.policy.p1);
      }
      return v10575;
    }
    function v357() {
      var v10576 = this.asts;
      var ast$$13 = lastOf(v10576);
      var v24657 = this.count();
      var v22385 = v24657 >= 3;
      if (v22385) {
        var v25630 = this.asts;
        var v25631 = this.top;
        var v24658 = v25630[v25631];
        v22385 = v24658 === ast$$13;
      }
      var v17829 = v22385;
      if (v17829) {
        var v25632 = this.asts;
        var v26057 = this.top;
        var v25633 = v26057 - 1;
        var v24659 = v25632[v25633];
        var v22386 = v24659.nodeType;
        var v24660 = TypeScript$$7.NodeType;
        var v22387 = v24660.List;
        v17829 = v22386 === v22387;
      }
      var v10577 = v17829;
      if (v10577) {
        var v24661 = this.asts;
        var v25634 = this.top;
        var v24662 = v25634 - 2;
        var v22388 = v24661[v24662];
        var v17830 = v22388.nodeType;
        var v22389 = TypeScript$$7.NodeType;
        var v17831 = v22389.InterfaceDeclaration;
        v10577 = v17830 === v17831;
      }
      return v10577;
    }
    function v356() {
      var v10578 = this.asts;
      var ast$$12 = lastOf(v10578);
      var v26387 = this.count();
      var v26339 = v26387 >= 5;
      if (v26339) {
        var v26412 = this.asts;
        var v26413 = this.top;
        var v26388 = v26412[v26413];
        v26339 = v26388 === ast$$12;
      }
      var v26248 = v26339;
      if (v26248) {
        var v26414 = this.asts;
        var v26428 = this.top;
        var v26415 = v26428 - 1;
        var v26389 = v26414[v26415];
        var v26340 = v26389.nodeType;
        var v26390 = TypeScript$$7.NodeType;
        var v26341 = v26390.List;
        v26248 = v26340 === v26341;
      }
      var v26058 = v26248;
      if (v26058) {
        var v26391 = this.asts;
        var v26416 = this.top;
        var v26392 = v26416 - 2;
        var v26342 = v26391[v26392];
        var v26249 = v26342.nodeType;
        var v26343 = TypeScript$$7.NodeType;
        var v26250 = v26343.FuncDecl;
        v26058 = v26249 === v26250;
      }
      var v25635 = v26058;
      if (v25635) {
        var v26344 = this.asts;
        var v26393 = this.top;
        var v26345 = v26393 - 3;
        var v26251 = v26344[v26345];
        var v26059 = v26251.nodeType;
        var v26252 = TypeScript$$7.NodeType;
        var v26060 = v26252.List;
        v25635 = v26059 === v26060;
      }
      var v24663 = v25635;
      if (v24663) {
        var v26253 = this.asts;
        var v26346 = this.top;
        var v26254 = v26346 - 4;
        var v26061 = v26253[v26254];
        var v25636 = v26061.nodeType;
        var v26062 = TypeScript$$7.NodeType;
        var v25637 = v26062.ClassDeclaration;
        v24663 = v25636 === v25637;
      }
      var v22390 = v24663;
      if (v22390) {
        var v25638 = this.asts;
        var v26063 = this.top;
        var v25639 = v26063 - 2;
        var v24664 = v25638[v25639];
        v22390 = v24664.isConstructor;
      }
      var v17832 = v22390;
      if (v17832) {
        var v25640 = this.asts;
        var v26064 = this.top;
        var v25641 = v26064 - 2;
        var v24665 = v25640[v25641];
        var v22391 = v24665.arguments;
        var v24666 = this.asts;
        var v25642 = this.top;
        var v24667 = v25642 - 1;
        var v22392 = v24666[v24667];
        v17832 = v22391 === v22392;
      }
      var v10579 = v17832;
      if (v10579) {
        var v24668 = this.asts;
        var v25643 = this.top;
        var v24669 = v25643 - 4;
        var v22393 = v24668[v24669];
        var v17833 = v22393.constructorDecl;
        var v22394 = this.asts;
        var v24670 = this.top;
        var v22395 = v24670 - 2;
        var v17834 = v22394[v22395];
        v10579 = v17833 === v17834;
      }
      return v10579;
    }
    function v355() {
      var v10580 = this.asts;
      var ast$$11 = lastOf(v10580);
      var v24671 = this.count();
      var v22396 = v24671 >= 3;
      if (v22396) {
        var v25644 = this.asts;
        var v25645 = this.top;
        var v24672 = v25644[v25645];
        v22396 = v24672 === ast$$11;
      }
      var v17835 = v22396;
      if (v17835) {
        var v25646 = this.asts;
        var v26065 = this.top;
        var v25647 = v26065 - 1;
        var v24673 = v25646[v25647];
        var v22397 = v24673.nodeType;
        var v24674 = TypeScript$$7.NodeType;
        var v22398 = v24674.List;
        v17835 = v22397 === v22398;
      }
      var v10581 = v17835;
      if (v10581) {
        var v24675 = this.asts;
        var v25648 = this.top;
        var v24676 = v25648 - 2;
        var v22399 = v24675[v24676];
        var v17836 = v22399.nodeType;
        var v22400 = TypeScript$$7.NodeType;
        var v17837 = v22400.ClassDeclaration;
        v10581 = v17836 === v17837;
      }
      return v10581;
    }
    function v354() {
      var v10582 = this.asts;
      var ast$$10 = lastOf(v10582);
      var v24677 = this.count();
      var v22401 = v24677 >= 3;
      if (v22401) {
        var v25649 = this.asts;
        var v25650 = this.top;
        var v24678 = v25649[v25650];
        v22401 = v24678 === ast$$10;
      }
      var v17838 = v22401;
      if (v17838) {
        var v25651 = this.asts;
        var v26066 = this.top;
        var v25652 = v26066 - 1;
        var v24679 = v25651[v25652];
        var v22402 = v24679.nodeType;
        var v24680 = TypeScript$$7.NodeType;
        var v22403 = v24680.List;
        v17838 = v22402 === v22403;
      }
      var v10583 = v17838;
      if (v10583) {
        var v24681 = this.asts;
        var v25653 = this.top;
        var v24682 = v25653 - 2;
        var v22404 = v24681[v24682];
        var v17839 = v22404.nodeType;
        var v22405 = TypeScript$$7.NodeType;
        var v17840 = v22405.ModuleDeclaration;
        v10583 = v17839 === v17840;
      }
      return v10583;
    }
    function v353() {
      var v10584 = this.asts;
      var ast$$9 = lastOf(v10584);
      var v24683 = this.count();
      var v22406 = v24683 >= 3;
      if (v22406) {
        var v25654 = this.asts;
        var v25655 = this.top;
        var v24684 = v25654[v25655];
        v22406 = v24684 === ast$$9;
      }
      var v17841 = v22406;
      if (v17841) {
        var v25656 = this.asts;
        var v26067 = this.top;
        var v25657 = v26067 - 1;
        var v24685 = v25656[v25657];
        var v22407 = v24685.nodeType;
        var v24686 = TypeScript$$7.NodeType;
        var v22408 = v24686.List;
        v17841 = v22407 === v22408;
      }
      var v10585 = v17841;
      if (v10585) {
        var v24687 = this.asts;
        var v25658 = this.top;
        var v24688 = v25658 - 2;
        var v22409 = v24687[v24688];
        var v17842 = v22409.nodeType;
        var v22410 = TypeScript$$7.NodeType;
        var v17843 = v22410.Script;
        v10585 = v17842 === v17843;
      }
      return v10585;
    }
    function v352() {
      var v22411 = this.ast();
      var v17844 = v22411 === null;
      var v22413 = !v17844;
      if (v22413) {
        var v22412 = this.parent();
        v17844 = v22412 === null;
      }
      var v10586 = v17844;
      if (v10586) {
        return false;
      }
      var v24689 = this.ast();
      var v22414 = v24689.nodeType;
      var v24690 = TypeScript$$7.NodeType;
      var v22415 = v24690.Name;
      var v17845 = v22414 === v22415;
      if (v17845) {
        var v24691 = this.parent();
        var v22416 = v24691.nodeType;
        var v24692 = TypeScript$$7.NodeType;
        var v22417 = v24692.FuncDecl;
        v17845 = v22416 === v22417;
      }
      var v10587 = v17845;
      if (v10587) {
        var v22418 = this.parent();
        var v17846 = v22418.name;
        var v17847 = this.ast();
        v10587 = v17846 === v17847;
      }
      return v10587;
    }
    function v351() {
      var v22419 = this.ast();
      var v17848 = v22419 === null;
      var v22421 = !v17848;
      if (v22421) {
        var v22420 = this.parent();
        v17848 = v22420 === null;
      }
      var v10588 = v17848;
      if (v10588) {
        return false;
      }
      var v24693 = this.ast();
      var v22422 = v24693.nodeType;
      var v24694 = TypeScript$$7.NodeType;
      var v22423 = v24694.Name;
      var v17849 = v22422 === v22423;
      if (v17849) {
        var v24695 = this.parent();
        var v22424 = v24695.nodeType;
        var v24696 = TypeScript$$7.NodeType;
        var v22425 = v24696.ModuleDeclaration;
        v17849 = v22424 === v22425;
      }
      var v10589 = v17849;
      if (v10589) {
        var v22426 = this.parent();
        var v17850 = v22426.name;
        var v17851 = this.ast();
        v10589 = v17850 === v17851;
      }
      return v10589;
    }
    function v350() {
      var v22427 = this.ast();
      var v17852 = v22427 === null;
      var v22429 = !v17852;
      if (v22429) {
        var v22428 = this.parent();
        v17852 = v22428 === null;
      }
      var v10590 = v17852;
      if (v10590) {
        return false;
      }
      var v24697 = this.ast();
      var v22430 = v24697.nodeType;
      var v24698 = TypeScript$$7.NodeType;
      var v22431 = v24698.Name;
      var v17853 = v22430 === v22431;
      if (v17853) {
        var v24699 = this.parent();
        var v22432 = v24699.nodeType;
        var v24700 = TypeScript$$7.NodeType;
        var v22433 = v24700.VarDecl;
        v17853 = v22432 === v22433;
      }
      var v10591 = v17853;
      if (v10591) {
        var v22434 = this.parent();
        var v17854 = v22434.id;
        var v17855 = this.ast();
        v10591 = v17854 === v17855;
      }
      return v10591;
    }
    function v349() {
      var v22435 = this.ast();
      var v17856 = v22435 === null;
      var v22437 = !v17856;
      if (v22437) {
        var v22436 = this.parent();
        v17856 = v22436 === null;
      }
      var v10592 = v17856;
      if (v10592) {
        return false;
      }
      var v24701 = this.ast();
      var v22438 = v24701.nodeType;
      var v24702 = TypeScript$$7.NodeType;
      var v22439 = v24702.Name;
      var v17857 = v22438 === v22439;
      if (v17857) {
        var v24703 = this.parent();
        var v22440 = v24703.nodeType;
        var v24704 = TypeScript$$7.NodeType;
        var v22441 = v24704.ArgDecl;
        v17857 = v22440 === v22441;
      }
      var v10593 = v17857;
      if (v10593) {
        var v22442 = this.parent();
        var v17858 = v22442.id;
        var v17859 = this.ast();
        v10593 = v17858 === v17859;
      }
      return v10593;
    }
    function v348() {
      var v22443 = this.ast();
      var v17860 = v22443 === null;
      var v22445 = !v17860;
      if (v22445) {
        var v22444 = this.parent();
        v17860 = v22444 === null;
      }
      var v10594 = v17860;
      if (v10594) {
        return false;
      }
      var v24705 = this.ast();
      var v22446 = v24705.nodeType;
      var v24706 = TypeScript$$7.NodeType;
      var v22447 = v24706.Name;
      var v17861 = v22446 === v22447;
      if (v17861) {
        var v24707 = this.parent();
        var v22448 = v24707.nodeType;
        var v24708 = TypeScript$$7.NodeType;
        var v22449 = v24708.InterfaceDeclaration;
        v17861 = v22448 === v22449;
      }
      var v10595 = v17861;
      if (v10595) {
        var v22450 = this.parent();
        var v17862 = v22450.name;
        var v17863 = this.ast();
        v10595 = v17862 === v17863;
      }
      return v10595;
    }
    function v347() {
      var v22451 = this.ast();
      var v17864 = v22451 === null;
      var v22453 = !v17864;
      if (v22453) {
        var v22452 = this.parent();
        v17864 = v22452 === null;
      }
      var v10596 = v17864;
      if (v10596) {
        return false;
      }
      var v24709 = this.ast();
      var v22454 = v24709.nodeType;
      var v24710 = TypeScript$$7.NodeType;
      var v22455 = v24710.Name;
      var v17865 = v22454 === v22455;
      if (v17865) {
        var v24711 = this.parent();
        var v22456 = v24711.nodeType;
        var v24712 = TypeScript$$7.NodeType;
        var v22457 = v24712.ClassDeclaration;
        v17865 = v22456 === v22457;
      }
      var v10597 = v17865;
      if (v10597) {
        var v22458 = this.parent();
        var v17866 = v22458.name;
        var v17867 = this.ast();
        v10597 = v17866 === v17867;
      }
      return v10597;
    }
    function v346(index$$43) {
      var v10598 = this.asts;
      return v10598[index$$43];
    }
    function v345() {
      var v10599 = this.top;
      return v10599 + 1;
    }
    function v344() {
      var v10600 = this.asts;
      var v22459 = this.asts;
      var v17868 = v22459.length;
      var v17869 = this.top;
      var v10601 = v17868 - v17869;
      return JAM.call(AstPath$$1.reverseIndexOf, AstPath$$1, [v10600, v10601], JAM.policy.p1);
    }
    function v343() {
      var v10602 = this.asts;
      var v22460 = this.asts;
      var v17870 = v22460.length;
      var v22461 = this.top;
      var v17871 = v22461 + 1;
      var v10603 = v17870 - v17871;
      return JAM.call(AstPath$$1.reverseIndexOf, AstPath$$1, [v10602, v10603], JAM.policy.p1);
    }
    function v342() {
      var v17872 = this.ast();
      var v10605 = v17872 == null;
      if (v10605) {
        var v10604 = TypeScript$$7.NodeType;
        return v10604.None;
      }
      var v10606 = this.ast();
      return v10606.nodeType;
    }
    function v341() {
      var v17873 = this.top;
      var v24713 = this.ast;
      var v22462 = v24713.length;
      var v17874 = v22462 - 1;
      var v10607 = v17873 == v17874;
      if (v10607) {
        throw new Error("Invalid call to 'down'");
      }
      this.top++;
      return;
    }
    function v340() {
      var v17875 = this.top;
      var v10608 = v17875 <= -1;
      if (v10608) {
        throw new Error("Invalid call to 'up'");
      }
      this.top--;
      return;
    }
    function v339(ast$$8) {
      var v22463 = this.asts;
      var v17876 = v22463.length;
      var v17877 = this.count();
      var v10610 = v17876 > v17877;
      for (;v10610;) {
        var v10609 = this.asts;
        v10609.pop();
        var v22464 = this.asts;
        var v17878 = v22464.length;
        var v17879 = this.count();
        v10610 = v17878 > v17879;
      }
      var v10611 = this.asts;
      this.top = v10611.length;
      var v10612 = this.asts;
      JAM.call(v10612.push, v10612, [ast$$8]);
      return;
    }
    function v338() {
      var head = this.ast();
      this.up();
      var v22465 = this.asts;
      var v17880 = v22465.length;
      var v17881 = this.count();
      var v10614 = v17880 > v17881;
      for (;v10614;) {
        var v10613 = this.asts;
        v10613.pop();
        var v22466 = this.asts;
        var v17882 = v22466.length;
        var v17883 = this.count();
        v10614 = v17882 > v17883;
      }
      return head;
    }
    function v337() {
      function v336(value$$30) {
        return value$$30;
      }
      var clone = new AstPath$$1;
      var v10615 = clone;
      var v17884 = this.asts;
      var v27000 = JAM.call(v17884.map, v17884, [v336]);
      v10615.asts = v27000;
      clone.top = this.top;
      return clone;
    }
    function reverseIndexOf(items$$1, index$$42) {
      var v10616;
      var v22467 = items$$1 === null;
      var v24715 = !v22467;
      if (v24715) {
        var v24714 = items$$1.length;
        v22467 = v24714 <= index$$42;
      }
      var v17886 = v22467;
      if (v17886) {
        v10616 = null;
      } else {
        var v24716 = items$$1.length;
        var v22468 = v24716 - index$$42;
        var v17885 = v22468 - 1;
        v10616 = items$$1[v17885];
      }
      return v10616;
    }
    function AstPath$$1() {
      this.asts = [];
      this.top = -1;
      return;
    }
    AstPath$$1.reverseIndexOf = reverseIndexOf;
    var v10617 = AstPath$$1.prototype;
    v10617.clone = v337;
    var v10618 = AstPath$$1.prototype;
    v10618.pop = v338;
    var v10619 = AstPath$$1.prototype;
    v10619.push = v339;
    var v10620 = AstPath$$1.prototype;
    v10620.up = v340;
    var v10621 = AstPath$$1.prototype;
    v10621.down = v341;
    var v10622 = AstPath$$1.prototype;
    v10622.nodeType = v342;
    var v10623 = AstPath$$1.prototype;
    v10623.ast = v343;
    var v10624 = AstPath$$1.prototype;
    v10624.parent = v344;
    var v10625 = AstPath$$1.prototype;
    v10625.count = v345;
    var v10626 = AstPath$$1.prototype;
    v10626.get = v346;
    var v10627 = AstPath$$1.prototype;
    v10627.isNameOfClass = v347;
    var v10628 = AstPath$$1.prototype;
    v10628.isNameOfInterface = v348;
    var v10629 = AstPath$$1.prototype;
    v10629.isNameOfArgument = v349;
    var v10630 = AstPath$$1.prototype;
    v10630.isNameOfVariable = v350;
    var v10631 = AstPath$$1.prototype;
    v10631.isNameOfModule = v351;
    var v10632 = AstPath$$1.prototype;
    v10632.isNameOfFunction = v352;
    var v10633 = AstPath$$1.prototype;
    v10633.isChildOfScript = v353;
    var v10634 = AstPath$$1.prototype;
    v10634.isChildOfModule = v354;
    var v10635 = AstPath$$1.prototype;
    v10635.isChildOfClass = v355;
    var v10636 = AstPath$$1.prototype;
    v10636.isArgumentOfClassConstructor = v356;
    var v10637 = AstPath$$1.prototype;
    v10637.isChildOfInterface = v357;
    var v10638 = AstPath$$1.prototype;
    v10638.isTopLevelImplicitModule = v358;
    var v10639 = AstPath$$1.prototype;
    v10639.isBodyOfTopLevelImplicitModule = v359;
    var v10640 = AstPath$$1.prototype;
    v10640.isBodyOfScript = v360;
    var v10641 = AstPath$$1.prototype;
    v10641.isBodyOfSwitch = v361;
    var v10642 = AstPath$$1.prototype;
    v10642.isBodyOfModule = v362;
    var v10643 = AstPath$$1.prototype;
    v10643.isBodyOfClass = v363;
    var v10644 = AstPath$$1.prototype;
    v10644.isBodyOfFunction = v364;
    var v10645 = AstPath$$1.prototype;
    v10645.isBodyOfInterface = v365;
    var v10646 = AstPath$$1.prototype;
    v10646.isBodyOfBlock = v366;
    var v10647 = AstPath$$1.prototype;
    v10647.isBodyOfFor = v367;
    var v10648 = AstPath$$1.prototype;
    v10648.isBodyOfCase = v368;
    var v10649 = AstPath$$1.prototype;
    v10649.isBodyOfTry = v369;
    var v10650 = AstPath$$1.prototype;
    v10650.isBodyOfCatch = v370;
    var v10651 = AstPath$$1.prototype;
    v10651.isBodyOfDoWhile = v371;
    var v10652 = AstPath$$1.prototype;
    v10652.isBodyOfWhile = v372;
    var v10653 = AstPath$$1.prototype;
    v10653.isBodyOfForIn = v373;
    var v10654 = AstPath$$1.prototype;
    v10654.isBodyOfWith = v374;
    var v10655 = AstPath$$1.prototype;
    v10655.isBodyOfFinally = v375;
    var v10656 = AstPath$$1.prototype;
    v10656.isCaseOfSwitch = v376;
    var v10657 = AstPath$$1.prototype;
    v10657.isDefaultCaseOfSwitch = v377;
    var v10658 = AstPath$$1.prototype;
    v10658.isListOfObjectLit = v378;
    var v10659 = AstPath$$1.prototype;
    v10659.isBodyOfObjectLit = v379;
    var v10660 = AstPath$$1.prototype;
    v10660.isEmptyListOfObjectLit = v380;
    var v10661 = AstPath$$1.prototype;
    v10661.isMemberOfObjectLit = v381;
    var v10662 = AstPath$$1.prototype;
    v10662.isNameOfMemberOfObjectLit = v382;
    var v10663 = AstPath$$1.prototype;
    v10663.isListOfArrayLit = v383;
    var v10664 = AstPath$$1.prototype;
    v10664.isTargetOfMember = v384;
    var v10665 = AstPath$$1.prototype;
    v10665.isMemberOfMember = v385;
    var v10666 = AstPath$$1.prototype;
    v10666.isItemOfList = v386;
    var v10667 = AstPath$$1.prototype;
    v10667.isThenOfIf = v387;
    var v10668 = AstPath$$1.prototype;
    v10668.isElseOfIf = v388;
    var v10669 = AstPath$$1.prototype;
    v10669.isBodyOfDefaultCase = v389;
    var v10670 = AstPath$$1.prototype;
    v10670.isSingleStatementList = v390;
    var v10671 = AstPath$$1.prototype;
    v10671.isArgumentListOfFunction = v391;
    var v10672 = AstPath$$1.prototype;
    v10672.isArgumentOfFunction = v392;
    var v10673 = AstPath$$1.prototype;
    v10673.isArgumentListOfCall = v393;
    var v10674 = AstPath$$1.prototype;
    v10674.isArgumentListOfNew = v394;
    var v10675 = AstPath$$1.prototype;
    v10675.isSynthesizedBlock = v395;
    return AstPath$$1;
  }
  function lastOf(items) {
    var v10676;
    var v22469 = items === null;
    var v24718 = !v22469;
    if (v24718) {
      var v24717 = items.length;
      v22469 = v24717 === 0;
    }
    var v17888 = v22469;
    if (v17888) {
      v10676 = null;
    } else {
      var v22470 = items.length;
      var v17887 = v22470 - 1;
      v10676 = items[v17887];
    }
    return v10676;
  }
  function max(a, b$$1) {
    var v10677;
    var v17889 = a >= b$$1;
    if (v17889) {
      v10677 = a;
    } else {
      v10677 = b$$1;
    }
    return v10677;
  }
  function min$$1(a$$1, b$$2) {
    var v10678;
    var v17890 = a$$1 <= b$$2;
    if (v17890) {
      v10678 = a$$1;
    } else {
      v10678 = b$$2;
    }
    return v10678;
  }
  function isValidAstNode(ast$$6) {
    var v10679 = ast$$6 === null;
    if (v10679) {
      return false;
    }
    var v22471 = ast$$6.minChar;
    var v17891 = v22471 === -1;
    var v22473 = !v17891;
    if (v22473) {
      var v22472 = ast$$6.limChar;
      v17891 = v22472 === -1;
    }
    var v10680 = v17891;
    if (v10680) {
      return false;
    }
    return true;
  }
  function getAstPathToPosition(script$$1, pos, options$$5) {
    function pre$$6(cur$$2, parent$$37, walker$$36) {
      var v10694 = isValidAstNode(cur$$2);
      if (v10694) {
        var v22474 = GetAstPathOptions.EdgeInclusive;
        var v17892 = JAM.call(TypeScript$$7.hasFlag, TypeScript$$7, [options$$5, v22474], JAM.policy.p1);
        var v22477 = !v17892;
        if (v22477) {
          var v22475 = cur$$2.nodeType;
          var v24719 = TypeScript$$7.NodeType;
          var v22476 = v24719.Name;
          v17892 = v22475 === v22476;
        }
        var v10681 = v17892;
        var v17894 = !v10681;
        if (v17894) {
          var v17893 = script$$1.limChar;
          v10681 = pos === v17893;
        }
        var inclusive = v10681;
        var minChar$$1 = cur$$2.minChar;
        var v10682 = cur$$2.limChar;
        var v17895;
        if (inclusive) {
          v17895 = 1;
        } else {
          v17895 = 0;
        }
        var v10683 = v17895;
        var limChar$$1 = v10682 + v10683;
        var v17896 = pos >= minChar$$1;
        if (v17896) {
          v17896 = pos < limChar$$1;
        }
        var v10687 = v17896;
        if (v10687) {
          var v10684 = ctx.path;
          var previous = v10684.ast();
          var v17897 = previous == null;
          var v22479 = !v17897;
          if (v22479) {
            var v24720 = cur$$2.minChar;
            var v24721 = previous.minChar;
            var v22478 = v24720 >= v24721;
            if (v22478) {
              var v24722 = cur$$2.limChar;
              var v24723 = previous.limChar;
              v22478 = v24722 <= v24723;
            }
            v17897 = v22478;
          }
          var v10686 = v17897;
          if (v10686) {
            var v10685 = ctx.path;
            JAM.call(v10685.push, v10685, [cur$$2]);
          } else {
          }
        }
        var v10689 = pos < limChar$$1;
        if (v10689) {
          var v10688 = cur$$2.preComments;
          lookInComments(v10688);
        }
        var v10691 = pos >= minChar$$1;
        if (v10691) {
          var v10690 = cur$$2.postComments;
          lookInComments(v10690);
        }
        var v22480 = GetAstPathOptions.DontPruneSearchBasedOnPosition;
        var v17898 = JAM.call(TypeScript$$7.hasFlag, TypeScript$$7, [options$$5, v22480], JAM.policy.p1);
        var v10693 = !v17898;
        if (v10693) {
          var v10692 = walker$$36.options;
          var v17899 = minChar$$1 <= pos;
          if (v17899) {
            v17899 = pos <= limChar$$1;
          }
          v10692.goChildren = v17899;
        }
      }
      return cur$$2;
    }
    function lookInComments(comments$$2) {
      var v17900 = comments$$2;
      if (v17900) {
        var v22481 = comments$$2.length;
        v17900 = v22481 > 0;
      }
      var v10702 = v17900;
      if (v10702) {
        var i$$26 = 0;
        var v17901 = comments$$2.length;
        var v10701 = i$$26 < v17901;
        for (;v10701;) {
          var v10695 = comments$$2[i$$26];
          var minChar = v10695.minChar;
          var v10696 = comments$$2[i$$26];
          var limChar = v10696.limChar;
          var v22482 = comments$$2[i$$26];
          var v17902 = v22482.isBlockComment;
          var v10697 = !v17902;
          if (v10697) {
            limChar++;
          }
          var v17903 = pos >= minChar;
          if (v17903) {
            v17903 = pos < limChar;
          }
          var v10700 = v17903;
          if (v10700) {
            var v10698 = ctx.path;
            var v10699 = comments$$2[i$$26];
            JAM.call(v10698.push, v10698, [v10699]);
          }
          i$$26++;
          var v17904 = comments$$2.length;
          v10701 = i$$26 < v17904;
        }
      }
      return;
    }
    var v17905 = typeof options$$5;
    var v10703 = v17905 === "undefined";
    if (v10703) {
      options$$5 = GetAstPathOptions.Default;
    }
    var ctx = new AstPathContext;
    var v10704 = TypeScript$$7.getAstWalkerFactory();
    JAM.call(v10704.walk, v10704, [script$$1, pre$$6, null, null, ctx], JAM.policy.p1);
    return ctx.path;
  }
  function getTokenizationOffset(script$$2, position) {
    function pre$$7(cur$$3, parent$$38, walker$$37) {
      var v10709 = JAM.call(TypeScript$$7.isValidAstNode, TypeScript$$7, [cur$$3]);
      if (v10709) {
        var v17906 = cur$$3.minChar;
        var v10706 = v17906 <= position;
        if (v10706) {
          var v10705 = cur$$3.minChar;
          bestOffset = max(bestOffset, v10705);
        }
        var v22483 = cur$$3.minChar;
        var v17907 = v22483 > position;
        var v22485 = !v17907;
        if (v22485) {
          var v22484 = cur$$3.limChar;
          v17907 = v22484 < bestOffset;
        }
        var v10708 = v17907;
        if (v10708) {
          var v10707 = walker$$37.options;
          v10707.goChildren = false;
        }
      }
      return cur$$3;
    }
    var bestOffset = 0;
    var v10710 = TypeScript$$7.getAstWalkerFactory();
    JAM.call(v10710.walk, v10710, [script$$2, pre$$7], JAM.policy.p1);
    return bestOffset;
  }
  function walkAST(ast$$7, callback$$27) {
    function post$$5(cur$$5, parent$$40, walker$$39) {
      var path$$5 = walker$$39.state;
      path$$5.pop();
      return cur$$5;
    }
    function pre$$8(cur$$4, parent$$39, walker$$38) {
      var path$$4 = walker$$38.state;
      JAM.call(path$$4.push, path$$4, [cur$$4]);
      JAM.call(callback$$27, null, [path$$4, walker$$38], JAM.policy.p1);
      return cur$$4;
    }
    var path$$3 = new AstPath;
    var v10711 = TypeScript$$7.getAstWalkerFactory();
    JAM.call(v10711.walk, v10711, [ast$$7, pre$$8, post$$5, null, path$$3], JAM.policy.p1);
    return;
  }
  TypeScript$$7.lastOf = lastOf;
  TypeScript$$7.max = max;
  TypeScript$$7.min = min$$1;
  var AstPath = v396();
  TypeScript$$7.AstPath = AstPath;
  TypeScript$$7.isValidAstNode = isValidAstNode;
  var AstPathContext = v397();
  TypeScript$$7.AstPathContext = AstPathContext;
  var v17908 = TypeScript$$7.GetAstPathOptions;
  var v22486 = !v17908;
  if (v22486) {
    v17908 = TypeScript$$7.GetAstPathOptions = {};
  }
  var v10712 = v17908;
  v398(v10712);
  var GetAstPathOptions = TypeScript$$7.GetAstPathOptions;
  TypeScript$$7.getAstPathToPosition = getAstPathToPosition;
  TypeScript$$7.getTokenizationOffset = getTokenizationOffset;
  TypeScript$$7.walkAST = walkAST;
  return;
}
function v335(TypeScript$$6) {
  function v334(AstWalkerWithDetailCallback$$1) {
    function walk(script, callback$$25) {
      function post$$4(cur$$1, parent$$36) {
        AstWalkerCallback(false, cur$$1, callback$$25);
        return cur$$1;
      }
      function pre$$4(cur, parent$$35) {
        var v10713 = walker$$35.options;
        var v27001 = AstWalkerCallback(true, cur, callback$$25);
        v10713.goChildren = v27001;
        return cur;
      }
      var v10714 = TypeScript$$6.getAstWalkerFactory();
      var walker$$35 = JAM.call(v10714.getWalker, v10714, [pre$$4, post$$4], JAM.policy.p1);
      JAM.call(walker$$35.walk, walker$$35, [script, null], JAM.policy.p1);
      return;
    }
    function AstWalkerCallback(pre$$5, ast$$5, callback$$26) {
      var nodeType$$12 = ast$$5.nodeType;
      var v22487 = TypeScript$$6.NodeType;
      var v17909 = v22487._map;
      var v10715 = v17909[nodeType$$12];
      var callbackString = v10715 + "Callback";
      var v10716 = callback$$26[callbackString];
      if (v10716) {
        return JAM.call(callback$$26[callbackString], callback$$26, [pre$$5, ast$$5], JAM.policy.p1);
      }
      var v10717 = callback$$26.DefaultCallback;
      if (v10717) {
        return JAM.call(callback$$26.DefaultCallback, callback$$26, [pre$$5, ast$$5], JAM.policy.p1);
      }
      return true;
    }
    AstWalkerWithDetailCallback$$1.walk = walk;
    return;
  }
  var v17910 = TypeScript$$6.AstWalkerWithDetailCallback;
  var v22488 = !v17910;
  if (v22488) {
    v17910 = TypeScript$$6.AstWalkerWithDetailCallback = {};
  }
  var v10718 = v17910;
  v334(v10718);
  var AstWalkerWithDetailCallback = TypeScript$$6.AstWalkerWithDetailCallback;
  return;
}
function v333(TypeScript$$5) {
  function v332(ChildrenWalkers$$1) {
    function walkNone(preAst$$1, parent$$2, walker$$2) {
      return;
    }
    function walkListChildren(preAst$$2, parent$$3, walker$$3) {
      var v10719 = preAst$$2.members;
      var len$$6 = v10719.length;
      var v17911 = walker$$3.options;
      var v10726 = v17911.reverseSiblings;
      if (v10726) {
        var i$$25 = len$$6 - 1;
        var v10722 = i$$25 >= 0;
        for (;v10722;) {
          var v17912 = walker$$3.options;
          var v10721 = v17912.goNextSibling;
          if (v10721) {
            var v10720 = preAst$$2.members;
            var v22489 = preAst$$2.members;
            var v17913 = v22489[i$$25];
            var v27002 = JAM.call(walker$$3.walk, walker$$3, [v17913, preAst$$2], JAM.policy.p1);
            v10720[i$$25] = v27002;
          }
          i$$25--;
          v10722 = i$$25 >= 0;
        }
      } else {
        i$$25 = 0;
        var v10725 = i$$25 < len$$6;
        for (;v10725;) {
          var v17914 = walker$$3.options;
          var v10724 = v17914.goNextSibling;
          if (v10724) {
            var v10723 = preAst$$2.members;
            var v22490 = preAst$$2.members;
            var v17915 = v22490[i$$25];
            var v27003 = JAM.call(walker$$3.walk, walker$$3, [v17915, preAst$$2], JAM.policy.p1);
            v10723[i$$25] = v27003;
          }
          i$$25++;
          v10725 = i$$25 < len$$6;
        }
      }
      return;
    }
    function walkUnaryExpressionChildren(preAst$$3, parent$$4, walker$$4) {
      var v10728 = preAst$$3.castTerm;
      if (v10728) {
        var v10727 = preAst$$3.castTerm;
        var v27004 = JAM.call(walker$$4.walk, walker$$4, [v10727, preAst$$3], JAM.policy.p1);
        preAst$$3.castTerm = v27004;
      }
      var v10730 = preAst$$3.operand;
      if (v10730) {
        var v10729 = preAst$$3.operand;
        var v27005 = JAM.call(walker$$4.walk, walker$$4, [v10729, preAst$$3], JAM.policy.p1);
        preAst$$3.operand = v27005;
      }
      return;
    }
    function walkBinaryExpressionChildren(preAst$$4, parent$$5, walker$$5) {
      var v17916 = walker$$5.options;
      var v10739 = v17916.reverseSiblings;
      if (v10739) {
        var v10732 = preAst$$4.operand2;
        if (v10732) {
          var v10731 = preAst$$4.operand2;
          var v27006 = JAM.call(walker$$5.walk, walker$$5, [v10731, preAst$$4], JAM.policy.p1);
          preAst$$4.operand2 = v27006;
        }
        var v17917 = preAst$$4.operand1;
        if (v17917) {
          var v22491 = walker$$5.options;
          v17917 = v22491.goNextSibling;
        }
        var v10734 = v17917;
        if (v10734) {
          var v10733 = preAst$$4.operand1;
          var v27007 = JAM.call(walker$$5.walk, walker$$5, [v10733, preAst$$4], JAM.policy.p1);
          preAst$$4.operand1 = v27007;
        }
      } else {
        var v10736 = preAst$$4.operand1;
        if (v10736) {
          var v10735 = preAst$$4.operand1;
          var v27008 = JAM.call(walker$$5.walk, walker$$5, [v10735, preAst$$4], JAM.policy.p1);
          preAst$$4.operand1 = v27008;
        }
        var v17918 = preAst$$4.operand2;
        if (v17918) {
          var v22492 = walker$$5.options;
          v17918 = v22492.goNextSibling;
        }
        var v10738 = v17918;
        if (v10738) {
          var v10737 = preAst$$4.operand2;
          var v27009 = JAM.call(walker$$5.walk, walker$$5, [v10737, preAst$$4], JAM.policy.p1);
          preAst$$4.operand2 = v27009;
        }
      }
      return;
    }
    function walkTypeReferenceChildren(preAst$$5, parent$$6, walker$$6) {
      var v10741 = preAst$$5.term;
      if (v10741) {
        var v10740 = preAst$$5.term;
        var v27010 = JAM.call(walker$$6.walk, walker$$6, [v10740, preAst$$5], JAM.policy.p1);
        preAst$$5.term = v27010;
      }
      return;
    }
    function walkCallExpressionChildren(preAst$$6, parent$$7, walker$$7) {
      var v22493 = walker$$7.options;
      var v17919 = v22493.reverseSiblings;
      var v10743 = !v17919;
      if (v10743) {
        var v10742 = preAst$$6.target;
        var v27011 = JAM.call(walker$$7.walk, walker$$7, [v10742, preAst$$6], JAM.policy.p1);
        preAst$$6.target = v27011;
      }
      var v17920 = preAst$$6.arguments;
      if (v17920) {
        var v22494 = walker$$7.options;
        v17920 = v22494.goNextSibling;
      }
      var v10745 = v17920;
      if (v10745) {
        var v10744 = preAst$$6.arguments;
        var v27012 = JAM.call(walker$$7.walk, walker$$7, [v10744, preAst$$6], JAM.policy.p1);
        preAst$$6.arguments = v27012;
      }
      var v22495 = walker$$7.options;
      var v17921 = v22495.reverseSiblings;
      if (v17921) {
        var v22496 = walker$$7.options;
        v17921 = v22496.goNextSibling;
      }
      var v10747 = v17921;
      if (v10747) {
        var v10746 = preAst$$6.target;
        var v27013 = JAM.call(walker$$7.walk, walker$$7, [v10746, preAst$$6], JAM.policy.p1);
        preAst$$6.target = v27013;
      }
      return;
    }
    function walkTrinaryExpressionChildren(preAst$$7, parent$$8, walker$$8) {
      var v10749 = preAst$$7.operand1;
      if (v10749) {
        var v10748 = preAst$$7.operand1;
        var v27014 = JAM.call(walker$$8.walk, walker$$8, [v10748, preAst$$7], JAM.policy.p1);
        preAst$$7.operand1 = v27014;
      }
      var v17922 = preAst$$7.operand2;
      if (v17922) {
        var v22497 = walker$$8.options;
        v17922 = v22497.goNextSibling;
      }
      var v10751 = v17922;
      if (v10751) {
        var v10750 = preAst$$7.operand2;
        var v27015 = JAM.call(walker$$8.walk, walker$$8, [v10750, preAst$$7], JAM.policy.p1);
        preAst$$7.operand2 = v27015;
      }
      var v17923 = preAst$$7.operand3;
      if (v17923) {
        var v22498 = walker$$8.options;
        v17923 = v22498.goNextSibling;
      }
      var v10753 = v17923;
      if (v10753) {
        var v10752 = preAst$$7.operand3;
        var v27016 = JAM.call(walker$$8.walk, walker$$8, [v10752, preAst$$7], JAM.policy.p1);
        preAst$$7.operand3 = v27016;
      }
      return;
    }
    function walkFuncDeclChildren(preAst$$8, parent$$9, walker$$9) {
      var v10755 = preAst$$8.name;
      if (v10755) {
        var v10754 = preAst$$8.name;
        var v27017 = JAM.call(walker$$9.walk, walker$$9, [v10754, preAst$$8], JAM.policy.p1);
        preAst$$8.name = v27017;
      }
      var v22499 = preAst$$8.arguments;
      if (v22499) {
        var v26068 = preAst$$8.arguments;
        var v25659 = v26068.members;
        var v24724 = v25659.length;
        v22499 = v24724 > 0;
      }
      var v17924 = v22499;
      if (v17924) {
        var v22500 = walker$$9.options;
        v17924 = v22500.goNextSibling;
      }
      var v10757 = v17924;
      if (v10757) {
        var v10756 = preAst$$8.arguments;
        var v27018 = JAM.call(walker$$9.walk, walker$$9, [v10756, preAst$$8], JAM.policy.p1);
        preAst$$8.arguments = v27018;
      }
      var v17925 = preAst$$8.returnTypeAnnotation;
      if (v17925) {
        var v22501 = walker$$9.options;
        v17925 = v22501.goNextSibling;
      }
      var v10759 = v17925;
      if (v10759) {
        var v10758 = preAst$$8.returnTypeAnnotation;
        var v27019 = JAM.call(walker$$9.walk, walker$$9, [v10758, preAst$$8], JAM.policy.p1);
        preAst$$8.returnTypeAnnotation = v27019;
      }
      var v22502 = preAst$$8.bod;
      if (v22502) {
        var v26069 = preAst$$8.bod;
        var v25660 = v26069.members;
        var v24725 = v25660.length;
        v22502 = v24725 > 0;
      }
      var v17926 = v22502;
      if (v17926) {
        var v22503 = walker$$9.options;
        v17926 = v22503.goNextSibling;
      }
      var v10761 = v17926;
      if (v10761) {
        var v10760 = preAst$$8.bod;
        var v27020 = JAM.call(walker$$9.walk, walker$$9, [v10760, preAst$$8], JAM.policy.p1);
        preAst$$8.bod = v27020;
      }
      return;
    }
    function walkBoundDeclChildren(preAst$$9, parent$$10, walker$$10) {
      var v10763 = preAst$$9.id;
      if (v10763) {
        var v10762 = preAst$$9.id;
        var v27021 = JAM.call(walker$$10.walk, walker$$10, [v10762, preAst$$9], JAM.policy.p1);
        preAst$$9.id = v27021;
      }
      var v10765 = preAst$$9.init;
      if (v10765) {
        var v10764 = preAst$$9.init;
        var v27022 = JAM.call(walker$$10.walk, walker$$10, [v10764, preAst$$9], JAM.policy.p1);
        preAst$$9.init = v27022;
      }
      var v17927 = preAst$$9.typeExpr;
      if (v17927) {
        var v22504 = walker$$10.options;
        v17927 = v22504.goNextSibling;
      }
      var v10767 = v17927;
      if (v10767) {
        var v10766 = preAst$$9.typeExpr;
        var v27023 = JAM.call(walker$$10.walk, walker$$10, [v10766, preAst$$9], JAM.policy.p1);
        preAst$$9.typeExpr = v27023;
      }
      return;
    }
    function walkReturnStatementChildren(preAst$$10, parent$$11, walker$$11) {
      var v10769 = preAst$$10.returnExpression;
      if (v10769) {
        var v10768 = preAst$$10.returnExpression;
        var v27024 = JAM.call(walker$$11.walk, walker$$11, [v10768, preAst$$10], JAM.policy.p1);
        preAst$$10.returnExpression = v27024;
      }
      return;
    }
    function walkForStatementChildren(preAst$$11, parent$$12, walker$$12) {
      var v10771 = preAst$$11.init;
      if (v10771) {
        var v10770 = preAst$$11.init;
        var v27025 = JAM.call(walker$$12.walk, walker$$12, [v10770, preAst$$11], JAM.policy.p1);
        preAst$$11.init = v27025;
      }
      var v17928 = preAst$$11.cond;
      if (v17928) {
        var v22505 = walker$$12.options;
        v17928 = v22505.goNextSibling;
      }
      var v10773 = v17928;
      if (v10773) {
        var v10772 = preAst$$11.cond;
        var v27026 = JAM.call(walker$$12.walk, walker$$12, [v10772, preAst$$11], JAM.policy.p1);
        preAst$$11.cond = v27026;
      }
      var v17929 = preAst$$11.incr;
      if (v17929) {
        var v22506 = walker$$12.options;
        v17929 = v22506.goNextSibling;
      }
      var v10775 = v17929;
      if (v10775) {
        var v10774 = preAst$$11.incr;
        var v27027 = JAM.call(walker$$12.walk, walker$$12, [v10774, preAst$$11], JAM.policy.p1);
        preAst$$11.incr = v27027;
      }
      var v17930 = preAst$$11.body;
      if (v17930) {
        var v22507 = walker$$12.options;
        v17930 = v22507.goNextSibling;
      }
      var v10777 = v17930;
      if (v10777) {
        var v10776 = preAst$$11.body;
        var v27028 = JAM.call(walker$$12.walk, walker$$12, [v10776, preAst$$11], JAM.policy.p1);
        preAst$$11.body = v27028;
      }
      return;
    }
    function walkForInStatementChildren(preAst$$12, parent$$13, walker$$13) {
      var v10778 = preAst$$12.lval;
      var v27029 = JAM.call(walker$$13.walk, walker$$13, [v10778, preAst$$12], JAM.policy.p1);
      preAst$$12.lval = v27029;
      var v17931 = walker$$13.options;
      var v10780 = v17931.goNextSibling;
      if (v10780) {
        var v10779 = preAst$$12.obj;
        var v27030 = JAM.call(walker$$13.walk, walker$$13, [v10779, preAst$$12], JAM.policy.p1);
        preAst$$12.obj = v27030;
      }
      var v17932 = preAst$$12.body;
      if (v17932) {
        var v22508 = walker$$13.options;
        v17932 = v22508.goNextSibling;
      }
      var v10782 = v17932;
      if (v10782) {
        var v10781 = preAst$$12.body;
        var v27031 = JAM.call(walker$$13.walk, walker$$13, [v10781, preAst$$12], JAM.policy.p1);
        preAst$$12.body = v27031;
      }
      return;
    }
    function walkIfStatementChildren(preAst$$13, parent$$14, walker$$14) {
      var v10783 = preAst$$13.cond;
      var v27032 = JAM.call(walker$$14.walk, walker$$14, [v10783, preAst$$13], JAM.policy.p1);
      preAst$$13.cond = v27032;
      var v17933 = preAst$$13.thenBod;
      if (v17933) {
        var v22509 = walker$$14.options;
        v17933 = v22509.goNextSibling;
      }
      var v10785 = v17933;
      if (v10785) {
        var v10784 = preAst$$13.thenBod;
        var v27033 = JAM.call(walker$$14.walk, walker$$14, [v10784, preAst$$13], JAM.policy.p1);
        preAst$$13.thenBod = v27033;
      }
      var v17934 = preAst$$13.elseBod;
      if (v17934) {
        var v22510 = walker$$14.options;
        v17934 = v22510.goNextSibling;
      }
      var v10787 = v17934;
      if (v10787) {
        var v10786 = preAst$$13.elseBod;
        var v27034 = JAM.call(walker$$14.walk, walker$$14, [v10786, preAst$$13], JAM.policy.p1);
        preAst$$13.elseBod = v27034;
      }
      return;
    }
    function walkWhileStatementChildren(preAst$$14, parent$$15, walker$$15) {
      var v10788 = preAst$$14.cond;
      var v27035 = JAM.call(walker$$15.walk, walker$$15, [v10788, preAst$$14], JAM.policy.p1);
      preAst$$14.cond = v27035;
      var v17935 = preAst$$14.body;
      if (v17935) {
        var v22511 = walker$$15.options;
        v17935 = v22511.goNextSibling;
      }
      var v10790 = v17935;
      if (v10790) {
        var v10789 = preAst$$14.body;
        var v27036 = JAM.call(walker$$15.walk, walker$$15, [v10789, preAst$$14], JAM.policy.p1);
        preAst$$14.body = v27036;
      }
      return;
    }
    function walkDoWhileStatementChildren(preAst$$15, parent$$16, walker$$16) {
      var v10791 = preAst$$15.cond;
      var v27037 = JAM.call(walker$$16.walk, walker$$16, [v10791, preAst$$15], JAM.policy.p1);
      preAst$$15.cond = v27037;
      var v17936 = preAst$$15.body;
      if (v17936) {
        var v22512 = walker$$16.options;
        v17936 = v22512.goNextSibling;
      }
      var v10793 = v17936;
      if (v10793) {
        var v10792 = preAst$$15.body;
        var v27038 = JAM.call(walker$$16.walk, walker$$16, [v10792, preAst$$15], JAM.policy.p1);
        preAst$$15.body = v27038;
      }
      return;
    }
    function walkBlockChildren(preAst$$16, parent$$17, walker$$17) {
      var v10795 = preAst$$16.statements;
      if (v10795) {
        var v10794 = preAst$$16.statements;
        var v27039 = JAM.call(walker$$17.walk, walker$$17, [v10794, preAst$$16], JAM.policy.p1);
        preAst$$16.statements = v27039;
      }
      return;
    }
    function walkCaseStatementChildren(preAst$$17, parent$$18, walker$$18) {
      var v10797 = preAst$$17.expr;
      if (v10797) {
        var v10796 = preAst$$17.expr;
        var v27040 = JAM.call(walker$$18.walk, walker$$18, [v10796, preAst$$17], JAM.policy.p1);
        preAst$$17.expr = v27040;
      }
      var v17937 = preAst$$17.body;
      if (v17937) {
        var v22513 = walker$$18.options;
        v17937 = v22513.goNextSibling;
      }
      var v10799 = v17937;
      if (v10799) {
        var v10798 = preAst$$17.body;
        var v27041 = JAM.call(walker$$18.walk, walker$$18, [v10798, preAst$$17], JAM.policy.p1);
        preAst$$17.body = v27041;
      }
      return;
    }
    function walkSwitchStatementChildren(preAst$$18, parent$$19, walker$$19) {
      var v10801 = preAst$$18.val;
      if (v10801) {
        var v10800 = preAst$$18.val;
        var v27042 = JAM.call(walker$$19.walk, walker$$19, [v10800, preAst$$18], JAM.policy.p1);
        preAst$$18.val = v27042;
      }
      var v17938 = preAst$$18.caseList;
      if (v17938) {
        var v22514 = walker$$19.options;
        v17938 = v22514.goNextSibling;
      }
      var v10803 = v17938;
      if (v10803) {
        var v10802 = preAst$$18.caseList;
        var v27043 = JAM.call(walker$$19.walk, walker$$19, [v10802, preAst$$18], JAM.policy.p1);
        preAst$$18.caseList = v27043;
      }
      return;
    }
    function walkTryChildren(preAst$$19, parent$$20, walker$$20) {
      var v10805 = preAst$$19.body;
      if (v10805) {
        var v10804 = preAst$$19.body;
        var v27044 = JAM.call(walker$$20.walk, walker$$20, [v10804, preAst$$19], JAM.policy.p1);
        preAst$$19.body = v27044;
      }
      return;
    }
    function walkTryCatchChildren(preAst$$20, parent$$21, walker$$21) {
      var v10807 = preAst$$20.tryNode;
      if (v10807) {
        var v10806 = preAst$$20.tryNode;
        var v27045 = JAM.call(walker$$21.walk, walker$$21, [v10806, preAst$$20], JAM.policy.p1);
        preAst$$20.tryNode = v27045;
      }
      var v17939 = preAst$$20.catchNode;
      if (v17939) {
        var v22515 = walker$$21.options;
        v17939 = v22515.goNextSibling;
      }
      var v10809 = v17939;
      if (v10809) {
        var v10808 = preAst$$20.catchNode;
        var v27046 = JAM.call(walker$$21.walk, walker$$21, [v10808, preAst$$20], JAM.policy.p1);
        preAst$$20.catchNode = v27046;
      }
      return;
    }
    function walkTryFinallyChildren(preAst$$21, parent$$22, walker$$22) {
      var v10811 = preAst$$21.tryNode;
      if (v10811) {
        var v10810 = preAst$$21.tryNode;
        var v27047 = JAM.call(walker$$22.walk, walker$$22, [v10810, preAst$$21], JAM.policy.p1);
        preAst$$21.tryNode = v27047;
      }
      var v17940 = preAst$$21.finallyNode;
      if (v17940) {
        var v22516 = walker$$22.options;
        v17940 = v22516.goNextSibling;
      }
      var v10813 = v17940;
      if (v10813) {
        var v10812 = preAst$$21.finallyNode;
        var v27048 = JAM.call(walker$$22.walk, walker$$22, [v10812, preAst$$21], JAM.policy.p1);
        preAst$$21.finallyNode = v27048;
      }
      return;
    }
    function walkFinallyChildren(preAst$$22, parent$$23, walker$$23) {
      var v10815 = preAst$$22.body;
      if (v10815) {
        var v10814 = preAst$$22.body;
        var v27049 = JAM.call(walker$$23.walk, walker$$23, [v10814, preAst$$22], JAM.policy.p1);
        preAst$$22.body = v27049;
      }
      return;
    }
    function walkCatchChildren(preAst$$23, parent$$24, walker$$24) {
      var v10817 = preAst$$23.param;
      if (v10817) {
        var v10816 = preAst$$23.param;
        var v27050 = JAM.call(walker$$24.walk, walker$$24, [v10816, preAst$$23], JAM.policy.p1);
        preAst$$23.param = v27050;
      }
      var v17941 = preAst$$23.body;
      if (v17941) {
        var v22517 = walker$$24.options;
        v17941 = v22517.goNextSibling;
      }
      var v10819 = v17941;
      if (v10819) {
        var v10818 = preAst$$23.body;
        var v27051 = JAM.call(walker$$24.walk, walker$$24, [v10818, preAst$$23], JAM.policy.p1);
        preAst$$23.body = v27051;
      }
      return;
    }
    function walkRecordChildren(preAst$$24, parent$$25, walker$$25) {
      var v10820 = preAst$$24.name;
      var v27052 = JAM.call(walker$$25.walk, walker$$25, [v10820, preAst$$24], JAM.policy.p1);
      preAst$$24.name = v27052;
      var v22518 = walker$$25.options;
      var v17942 = v22518.goNextSibling;
      if (v17942) {
        v17942 = preAst$$24.members;
      }
      var v10822 = v17942;
      if (v10822) {
        var v10821 = preAst$$24.members;
        var v27053 = JAM.call(walker$$25.walk, walker$$25, [v10821, preAst$$24], JAM.policy.p1);
        preAst$$24.members = v27053;
      }
      return;
    }
    function walkNamedTypeChildren(preAst$$25, parent$$26, walker$$26) {
      walkRecordChildren(preAst$$25, parent$$26, walker$$26);
      return;
    }
    function walkClassDeclChildren(preAst$$26, parent$$27, walker$$27) {
      walkRecordChildren(preAst$$26, parent$$27, walker$$27);
      var v22519 = walker$$27.options;
      var v17943 = v22519.goNextSibling;
      if (v17943) {
        v17943 = preAst$$26.extendsList;
      }
      var v10824 = v17943;
      if (v10824) {
        var v10823 = preAst$$26.extendsList;
        var v27054 = JAM.call(walker$$27.walk, walker$$27, [v10823, preAst$$26], JAM.policy.p1);
        preAst$$26.extendsList = v27054;
      }
      var v22520 = walker$$27.options;
      var v17944 = v22520.goNextSibling;
      if (v17944) {
        v17944 = preAst$$26.implementsList;
      }
      var v10826 = v17944;
      if (v10826) {
        var v10825 = preAst$$26.implementsList;
        var v27055 = JAM.call(walker$$27.walk, walker$$27, [v10825, preAst$$26], JAM.policy.p1);
        preAst$$26.implementsList = v27055;
      }
      return;
    }
    function walkScriptChildren(preAst$$27, parent$$28, walker$$28) {
      var v10828 = preAst$$27.bod;
      if (v10828) {
        var v10827 = preAst$$27.bod;
        var v27056 = JAM.call(walker$$28.walk, walker$$28, [v10827, preAst$$27], JAM.policy.p1);
        preAst$$27.bod = v27056;
      }
      return;
    }
    function walkTypeDeclChildren(preAst$$28, parent$$29, walker$$29) {
      walkRecordChildren(preAst$$28, parent$$29, walker$$29);
      var v22521 = walker$$29.options;
      var v17945 = v22521.goNextSibling;
      if (v17945) {
        v17945 = preAst$$28.extendsList;
      }
      var v10830 = v17945;
      if (v10830) {
        var v10829 = preAst$$28.extendsList;
        var v27057 = JAM.call(walker$$29.walk, walker$$29, [v10829, preAst$$28], JAM.policy.p1);
        preAst$$28.extendsList = v27057;
      }
      var v22522 = walker$$29.options;
      var v17946 = v22522.goNextSibling;
      if (v17946) {
        v17946 = preAst$$28.implementsList;
      }
      var v10832 = v17946;
      if (v10832) {
        var v10831 = preAst$$28.implementsList;
        var v27058 = JAM.call(walker$$29.walk, walker$$29, [v10831, preAst$$28], JAM.policy.p1);
        preAst$$28.implementsList = v27058;
      }
      return;
    }
    function walkModuleDeclChildren(preAst$$29, parent$$30, walker$$30) {
      walkRecordChildren(preAst$$29, parent$$30, walker$$30);
      return;
    }
    function walkImportDeclChildren(preAst$$30, parent$$31, walker$$31) {
      var v10834 = preAst$$30.id;
      if (v10834) {
        var v10833 = preAst$$30.id;
        var v27059 = JAM.call(walker$$31.walk, walker$$31, [v10833, preAst$$30], JAM.policy.p1);
        preAst$$30.id = v27059;
      }
      var v10836 = preAst$$30.alias;
      if (v10836) {
        var v10835 = preAst$$30.alias;
        var v27060 = JAM.call(walker$$31.walk, walker$$31, [v10835, preAst$$30], JAM.policy.p1);
        preAst$$30.alias = v27060;
      }
      return;
    }
    function walkWithStatementChildren(preAst$$31, parent$$32, walker$$32) {
      var v10838 = preAst$$31.expr;
      if (v10838) {
        var v10837 = preAst$$31.expr;
        var v27061 = JAM.call(walker$$32.walk, walker$$32, [v10837, preAst$$31], JAM.policy.p1);
        preAst$$31.expr = v27061;
      }
      var v17947 = preAst$$31.body;
      if (v17947) {
        var v22523 = walker$$32.options;
        v17947 = v22523.goNextSibling;
      }
      var v10840 = v17947;
      if (v10840) {
        var v10839 = preAst$$31.body;
        var v27062 = JAM.call(walker$$32.walk, walker$$32, [v10839, preAst$$31], JAM.policy.p1);
        preAst$$31.body = v27062;
      }
      return;
    }
    function walkLabelChildren(preAst$$32, parent$$33, walker$$33) {
      return;
    }
    function walkLabeledStatementChildren(preAst$$33, parent$$34, walker$$34) {
      var v10841 = preAst$$33.labels;
      var v27063 = JAM.call(walker$$34.walk, walker$$34, [v10841, preAst$$33], JAM.policy.p1);
      preAst$$33.labels = v27063;
      var v17948 = walker$$34.options;
      var v10843 = v17948.goNextSibling;
      if (v10843) {
        var v10842 = preAst$$33.stmt;
        var v27064 = JAM.call(walker$$34.walk, walker$$34, [v10842, preAst$$33], JAM.policy.p1);
        preAst$$33.stmt = v27064;
      }
      return;
    }
    ChildrenWalkers$$1.walkNone = walkNone;
    ChildrenWalkers$$1.walkListChildren = walkListChildren;
    ChildrenWalkers$$1.walkUnaryExpressionChildren = walkUnaryExpressionChildren;
    ChildrenWalkers$$1.walkBinaryExpressionChildren = walkBinaryExpressionChildren;
    ChildrenWalkers$$1.walkTypeReferenceChildren = walkTypeReferenceChildren;
    ChildrenWalkers$$1.walkCallExpressionChildren = walkCallExpressionChildren;
    ChildrenWalkers$$1.walkTrinaryExpressionChildren = walkTrinaryExpressionChildren;
    ChildrenWalkers$$1.walkFuncDeclChildren = walkFuncDeclChildren;
    ChildrenWalkers$$1.walkBoundDeclChildren = walkBoundDeclChildren;
    ChildrenWalkers$$1.walkReturnStatementChildren = walkReturnStatementChildren;
    ChildrenWalkers$$1.walkForStatementChildren = walkForStatementChildren;
    ChildrenWalkers$$1.walkForInStatementChildren = walkForInStatementChildren;
    ChildrenWalkers$$1.walkIfStatementChildren = walkIfStatementChildren;
    ChildrenWalkers$$1.walkWhileStatementChildren = walkWhileStatementChildren;
    ChildrenWalkers$$1.walkDoWhileStatementChildren = walkDoWhileStatementChildren;
    ChildrenWalkers$$1.walkBlockChildren = walkBlockChildren;
    ChildrenWalkers$$1.walkCaseStatementChildren = walkCaseStatementChildren;
    ChildrenWalkers$$1.walkSwitchStatementChildren = walkSwitchStatementChildren;
    ChildrenWalkers$$1.walkTryChildren = walkTryChildren;
    ChildrenWalkers$$1.walkTryCatchChildren = walkTryCatchChildren;
    ChildrenWalkers$$1.walkTryFinallyChildren = walkTryFinallyChildren;
    ChildrenWalkers$$1.walkFinallyChildren = walkFinallyChildren;
    ChildrenWalkers$$1.walkCatchChildren = walkCatchChildren;
    ChildrenWalkers$$1.walkRecordChildren = walkRecordChildren;
    ChildrenWalkers$$1.walkNamedTypeChildren = walkNamedTypeChildren;
    ChildrenWalkers$$1.walkClassDeclChildren = walkClassDeclChildren;
    ChildrenWalkers$$1.walkScriptChildren = walkScriptChildren;
    ChildrenWalkers$$1.walkTypeDeclChildren = walkTypeDeclChildren;
    ChildrenWalkers$$1.walkModuleDeclChildren = walkModuleDeclChildren;
    ChildrenWalkers$$1.walkImportDeclChildren = walkImportDeclChildren;
    ChildrenWalkers$$1.walkWithStatementChildren = walkWithStatementChildren;
    ChildrenWalkers$$1.walkLabelChildren = walkLabelChildren;
    ChildrenWalkers$$1.walkLabeledStatementChildren = walkLabeledStatementChildren;
    return;
  }
  function v331() {
    function v330() {
      var v10844 = this.childrenWalkers;
      var v17949 = TypeScript$$5.NodeType;
      var v10845 = v17949.None;
      JAM.set(v10844, v10845, ChildrenWalkers.walkNone);
      var v10846 = this.childrenWalkers;
      var v17950 = TypeScript$$5.NodeType;
      var v10847 = v17950.Empty;
      JAM.set(v10846, v10847, ChildrenWalkers.walkNone);
      var v10848 = this.childrenWalkers;
      var v17951 = TypeScript$$5.NodeType;
      var v10849 = v17951.EmptyExpr;
      JAM.set(v10848, v10849, ChildrenWalkers.walkNone);
      var v10850 = this.childrenWalkers;
      var v17952 = TypeScript$$5.NodeType;
      var v10851 = v17952.True;
      JAM.set(v10850, v10851, ChildrenWalkers.walkNone);
      var v10852 = this.childrenWalkers;
      var v17953 = TypeScript$$5.NodeType;
      var v10853 = v17953.False;
      JAM.set(v10852, v10853, ChildrenWalkers.walkNone);
      var v10854 = this.childrenWalkers;
      var v17954 = TypeScript$$5.NodeType;
      var v10855 = v17954.This;
      JAM.set(v10854, v10855, ChildrenWalkers.walkNone);
      var v10856 = this.childrenWalkers;
      var v17955 = TypeScript$$5.NodeType;
      var v10857 = v17955.Super;
      JAM.set(v10856, v10857, ChildrenWalkers.walkNone);
      var v10858 = this.childrenWalkers;
      var v17956 = TypeScript$$5.NodeType;
      var v10859 = v17956.QString;
      JAM.set(v10858, v10859, ChildrenWalkers.walkNone);
      var v10860 = this.childrenWalkers;
      var v17957 = TypeScript$$5.NodeType;
      var v10861 = v17957.Regex;
      JAM.set(v10860, v10861, ChildrenWalkers.walkNone);
      var v10862 = this.childrenWalkers;
      var v17958 = TypeScript$$5.NodeType;
      var v10863 = v17958.Null;
      JAM.set(v10862, v10863, ChildrenWalkers.walkNone);
      var v10864 = this.childrenWalkers;
      var v17959 = TypeScript$$5.NodeType;
      var v10865 = v17959.ArrayLit;
      JAM.set(v10864, v10865, ChildrenWalkers.walkUnaryExpressionChildren);
      var v10866 = this.childrenWalkers;
      var v17960 = TypeScript$$5.NodeType;
      var v10867 = v17960.ObjectLit;
      JAM.set(v10866, v10867, ChildrenWalkers.walkUnaryExpressionChildren);
      var v10868 = this.childrenWalkers;
      var v17961 = TypeScript$$5.NodeType;
      var v10869 = v17961.Void;
      JAM.set(v10868, v10869, ChildrenWalkers.walkUnaryExpressionChildren);
      var v10870 = this.childrenWalkers;
      var v17962 = TypeScript$$5.NodeType;
      var v10871 = v17962.Comma;
      JAM.set(v10870, v10871, ChildrenWalkers.walkBinaryExpressionChildren);
      var v10872 = this.childrenWalkers;
      var v17963 = TypeScript$$5.NodeType;
      var v10873 = v17963.Pos;
      JAM.set(v10872, v10873, ChildrenWalkers.walkUnaryExpressionChildren);
      var v10874 = this.childrenWalkers;
      var v17964 = TypeScript$$5.NodeType;
      var v10875 = v17964.Neg;
      JAM.set(v10874, v10875, ChildrenWalkers.walkUnaryExpressionChildren);
      var v10876 = this.childrenWalkers;
      var v17965 = TypeScript$$5.NodeType;
      var v10877 = v17965.Delete;
      JAM.set(v10876, v10877, ChildrenWalkers.walkUnaryExpressionChildren);
      var v10878 = this.childrenWalkers;
      var v17966 = TypeScript$$5.NodeType;
      var v10879 = v17966.Await;
      JAM.set(v10878, v10879, ChildrenWalkers.walkUnaryExpressionChildren);
      var v10880 = this.childrenWalkers;
      var v17967 = TypeScript$$5.NodeType;
      var v10881 = v17967.In;
      JAM.set(v10880, v10881, ChildrenWalkers.walkBinaryExpressionChildren);
      var v10882 = this.childrenWalkers;
      var v17968 = TypeScript$$5.NodeType;
      var v10883 = v17968.Dot;
      JAM.set(v10882, v10883, ChildrenWalkers.walkBinaryExpressionChildren);
      var v10884 = this.childrenWalkers;
      var v17969 = TypeScript$$5.NodeType;
      var v10885 = v17969.From;
      JAM.set(v10884, v10885, ChildrenWalkers.walkBinaryExpressionChildren);
      var v10886 = this.childrenWalkers;
      var v17970 = TypeScript$$5.NodeType;
      var v10887 = v17970.Is;
      JAM.set(v10886, v10887, ChildrenWalkers.walkBinaryExpressionChildren);
      var v10888 = this.childrenWalkers;
      var v17971 = TypeScript$$5.NodeType;
      var v10889 = v17971.InstOf;
      JAM.set(v10888, v10889, ChildrenWalkers.walkBinaryExpressionChildren);
      var v10890 = this.childrenWalkers;
      var v17972 = TypeScript$$5.NodeType;
      var v10891 = v17972.Typeof;
      JAM.set(v10890, v10891, ChildrenWalkers.walkUnaryExpressionChildren);
      var v10892 = this.childrenWalkers;
      var v17973 = TypeScript$$5.NodeType;
      var v10893 = v17973.NumberLit;
      JAM.set(v10892, v10893, ChildrenWalkers.walkNone);
      var v10894 = this.childrenWalkers;
      var v17974 = TypeScript$$5.NodeType;
      var v10895 = v17974.Name;
      JAM.set(v10894, v10895, ChildrenWalkers.walkNone);
      var v10896 = this.childrenWalkers;
      var v17975 = TypeScript$$5.NodeType;
      var v10897 = v17975.TypeRef;
      JAM.set(v10896, v10897, ChildrenWalkers.walkTypeReferenceChildren);
      var v10898 = this.childrenWalkers;
      var v17976 = TypeScript$$5.NodeType;
      var v10899 = v17976.Index;
      JAM.set(v10898, v10899, ChildrenWalkers.walkBinaryExpressionChildren);
      var v10900 = this.childrenWalkers;
      var v17977 = TypeScript$$5.NodeType;
      var v10901 = v17977.Call;
      JAM.set(v10900, v10901, ChildrenWalkers.walkCallExpressionChildren);
      var v10902 = this.childrenWalkers;
      var v17978 = TypeScript$$5.NodeType;
      var v10903 = v17978.New;
      JAM.set(v10902, v10903, ChildrenWalkers.walkCallExpressionChildren);
      var v10904 = this.childrenWalkers;
      var v17979 = TypeScript$$5.NodeType;
      var v10905 = v17979.Asg;
      JAM.set(v10904, v10905, ChildrenWalkers.walkBinaryExpressionChildren);
      var v10906 = this.childrenWalkers;
      var v17980 = TypeScript$$5.NodeType;
      var v10907 = v17980.AsgAdd;
      JAM.set(v10906, v10907, ChildrenWalkers.walkBinaryExpressionChildren);
      var v10908 = this.childrenWalkers;
      var v17981 = TypeScript$$5.NodeType;
      var v10909 = v17981.AsgSub;
      JAM.set(v10908, v10909, ChildrenWalkers.walkBinaryExpressionChildren);
      var v10910 = this.childrenWalkers;
      var v17982 = TypeScript$$5.NodeType;
      var v10911 = v17982.AsgDiv;
      JAM.set(v10910, v10911, ChildrenWalkers.walkBinaryExpressionChildren);
      var v10912 = this.childrenWalkers;
      var v17983 = TypeScript$$5.NodeType;
      var v10913 = v17983.AsgMul;
      JAM.set(v10912, v10913, ChildrenWalkers.walkBinaryExpressionChildren);
      var v10914 = this.childrenWalkers;
      var v17984 = TypeScript$$5.NodeType;
      var v10915 = v17984.AsgMod;
      JAM.set(v10914, v10915, ChildrenWalkers.walkBinaryExpressionChildren);
      var v10916 = this.childrenWalkers;
      var v17985 = TypeScript$$5.NodeType;
      var v10917 = v17985.AsgAnd;
      JAM.set(v10916, v10917, ChildrenWalkers.walkBinaryExpressionChildren);
      var v10918 = this.childrenWalkers;
      var v17986 = TypeScript$$5.NodeType;
      var v10919 = v17986.AsgXor;
      JAM.set(v10918, v10919, ChildrenWalkers.walkBinaryExpressionChildren);
      var v10920 = this.childrenWalkers;
      var v17987 = TypeScript$$5.NodeType;
      var v10921 = v17987.AsgOr;
      JAM.set(v10920, v10921, ChildrenWalkers.walkBinaryExpressionChildren);
      var v10922 = this.childrenWalkers;
      var v17988 = TypeScript$$5.NodeType;
      var v10923 = v17988.AsgLsh;
      JAM.set(v10922, v10923, ChildrenWalkers.walkBinaryExpressionChildren);
      var v10924 = this.childrenWalkers;
      var v17989 = TypeScript$$5.NodeType;
      var v10925 = v17989.AsgRsh;
      JAM.set(v10924, v10925, ChildrenWalkers.walkBinaryExpressionChildren);
      var v10926 = this.childrenWalkers;
      var v17990 = TypeScript$$5.NodeType;
      var v10927 = v17990.AsgRs2;
      JAM.set(v10926, v10927, ChildrenWalkers.walkBinaryExpressionChildren);
      var v10928 = this.childrenWalkers;
      var v17991 = TypeScript$$5.NodeType;
      var v10929 = v17991.ConditionalExpression;
      JAM.set(v10928, v10929, ChildrenWalkers.walkTrinaryExpressionChildren);
      var v10930 = this.childrenWalkers;
      var v17992 = TypeScript$$5.NodeType;
      var v10931 = v17992.LogOr;
      JAM.set(v10930, v10931, ChildrenWalkers.walkBinaryExpressionChildren);
      var v10932 = this.childrenWalkers;
      var v17993 = TypeScript$$5.NodeType;
      var v10933 = v17993.LogAnd;
      JAM.set(v10932, v10933, ChildrenWalkers.walkBinaryExpressionChildren);
      var v10934 = this.childrenWalkers;
      var v17994 = TypeScript$$5.NodeType;
      var v10935 = v17994.Or;
      JAM.set(v10934, v10935, ChildrenWalkers.walkBinaryExpressionChildren);
      var v10936 = this.childrenWalkers;
      var v17995 = TypeScript$$5.NodeType;
      var v10937 = v17995.Xor;
      JAM.set(v10936, v10937, ChildrenWalkers.walkBinaryExpressionChildren);
      var v10938 = this.childrenWalkers;
      var v17996 = TypeScript$$5.NodeType;
      var v10939 = v17996.And;
      JAM.set(v10938, v10939, ChildrenWalkers.walkBinaryExpressionChildren);
      var v10940 = this.childrenWalkers;
      var v17997 = TypeScript$$5.NodeType;
      var v10941 = v17997.Eq;
      JAM.set(v10940, v10941, ChildrenWalkers.walkBinaryExpressionChildren);
      var v10942 = this.childrenWalkers;
      var v17998 = TypeScript$$5.NodeType;
      var v10943 = v17998.Ne;
      JAM.set(v10942, v10943, ChildrenWalkers.walkBinaryExpressionChildren);
      var v10944 = this.childrenWalkers;
      var v17999 = TypeScript$$5.NodeType;
      var v10945 = v17999.Eqv;
      JAM.set(v10944, v10945, ChildrenWalkers.walkBinaryExpressionChildren);
      var v10946 = this.childrenWalkers;
      var v18000 = TypeScript$$5.NodeType;
      var v10947 = v18000.NEqv;
      JAM.set(v10946, v10947, ChildrenWalkers.walkBinaryExpressionChildren);
      var v10948 = this.childrenWalkers;
      var v18001 = TypeScript$$5.NodeType;
      var v10949 = v18001.Lt;
      JAM.set(v10948, v10949, ChildrenWalkers.walkBinaryExpressionChildren);
      var v10950 = this.childrenWalkers;
      var v18002 = TypeScript$$5.NodeType;
      var v10951 = v18002.Le;
      JAM.set(v10950, v10951, ChildrenWalkers.walkBinaryExpressionChildren);
      var v10952 = this.childrenWalkers;
      var v18003 = TypeScript$$5.NodeType;
      var v10953 = v18003.Gt;
      JAM.set(v10952, v10953, ChildrenWalkers.walkBinaryExpressionChildren);
      var v10954 = this.childrenWalkers;
      var v18004 = TypeScript$$5.NodeType;
      var v10955 = v18004.Ge;
      JAM.set(v10954, v10955, ChildrenWalkers.walkBinaryExpressionChildren);
      var v10956 = this.childrenWalkers;
      var v18005 = TypeScript$$5.NodeType;
      var v10957 = v18005.Add;
      JAM.set(v10956, v10957, ChildrenWalkers.walkBinaryExpressionChildren);
      var v10958 = this.childrenWalkers;
      var v18006 = TypeScript$$5.NodeType;
      var v10959 = v18006.Sub;
      JAM.set(v10958, v10959, ChildrenWalkers.walkBinaryExpressionChildren);
      var v10960 = this.childrenWalkers;
      var v18007 = TypeScript$$5.NodeType;
      var v10961 = v18007.Mul;
      JAM.set(v10960, v10961, ChildrenWalkers.walkBinaryExpressionChildren);
      var v10962 = this.childrenWalkers;
      var v18008 = TypeScript$$5.NodeType;
      var v10963 = v18008.Div;
      JAM.set(v10962, v10963, ChildrenWalkers.walkBinaryExpressionChildren);
      var v10964 = this.childrenWalkers;
      var v18009 = TypeScript$$5.NodeType;
      var v10965 = v18009.Mod;
      JAM.set(v10964, v10965, ChildrenWalkers.walkBinaryExpressionChildren);
      var v10966 = this.childrenWalkers;
      var v18010 = TypeScript$$5.NodeType;
      var v10967 = v18010.Lsh;
      JAM.set(v10966, v10967, ChildrenWalkers.walkBinaryExpressionChildren);
      var v10968 = this.childrenWalkers;
      var v18011 = TypeScript$$5.NodeType;
      var v10969 = v18011.Rsh;
      JAM.set(v10968, v10969, ChildrenWalkers.walkBinaryExpressionChildren);
      var v10970 = this.childrenWalkers;
      var v18012 = TypeScript$$5.NodeType;
      var v10971 = v18012.Rs2;
      JAM.set(v10970, v10971, ChildrenWalkers.walkBinaryExpressionChildren);
      var v10972 = this.childrenWalkers;
      var v18013 = TypeScript$$5.NodeType;
      var v10973 = v18013.Not;
      JAM.set(v10972, v10973, ChildrenWalkers.walkUnaryExpressionChildren);
      var v10974 = this.childrenWalkers;
      var v18014 = TypeScript$$5.NodeType;
      var v10975 = v18014.LogNot;
      JAM.set(v10974, v10975, ChildrenWalkers.walkUnaryExpressionChildren);
      var v10976 = this.childrenWalkers;
      var v18015 = TypeScript$$5.NodeType;
      var v10977 = v18015.IncPre;
      JAM.set(v10976, v10977, ChildrenWalkers.walkUnaryExpressionChildren);
      var v10978 = this.childrenWalkers;
      var v18016 = TypeScript$$5.NodeType;
      var v10979 = v18016.DecPre;
      JAM.set(v10978, v10979, ChildrenWalkers.walkUnaryExpressionChildren);
      var v10980 = this.childrenWalkers;
      var v18017 = TypeScript$$5.NodeType;
      var v10981 = v18017.IncPost;
      JAM.set(v10980, v10981, ChildrenWalkers.walkUnaryExpressionChildren);
      var v10982 = this.childrenWalkers;
      var v18018 = TypeScript$$5.NodeType;
      var v10983 = v18018.DecPost;
      JAM.set(v10982, v10983, ChildrenWalkers.walkUnaryExpressionChildren);
      var v10984 = this.childrenWalkers;
      var v18019 = TypeScript$$5.NodeType;
      var v10985 = v18019.TypeAssertion;
      JAM.set(v10984, v10985, ChildrenWalkers.walkUnaryExpressionChildren);
      var v10986 = this.childrenWalkers;
      var v18020 = TypeScript$$5.NodeType;
      var v10987 = v18020.FuncDecl;
      JAM.set(v10986, v10987, ChildrenWalkers.walkFuncDeclChildren);
      var v10988 = this.childrenWalkers;
      var v18021 = TypeScript$$5.NodeType;
      var v10989 = v18021.Member;
      JAM.set(v10988, v10989, ChildrenWalkers.walkBinaryExpressionChildren);
      var v10990 = this.childrenWalkers;
      var v18022 = TypeScript$$5.NodeType;
      var v10991 = v18022.VarDecl;
      JAM.set(v10990, v10991, ChildrenWalkers.walkBoundDeclChildren);
      var v10992 = this.childrenWalkers;
      var v18023 = TypeScript$$5.NodeType;
      var v10993 = v18023.ArgDecl;
      JAM.set(v10992, v10993, ChildrenWalkers.walkBoundDeclChildren);
      var v10994 = this.childrenWalkers;
      var v18024 = TypeScript$$5.NodeType;
      var v10995 = v18024.Return;
      JAM.set(v10994, v10995, ChildrenWalkers.walkReturnStatementChildren);
      var v10996 = this.childrenWalkers;
      var v18025 = TypeScript$$5.NodeType;
      var v10997 = v18025.Break;
      JAM.set(v10996, v10997, ChildrenWalkers.walkNone);
      var v10998 = this.childrenWalkers;
      var v18026 = TypeScript$$5.NodeType;
      var v10999 = v18026.Continue;
      JAM.set(v10998, v10999, ChildrenWalkers.walkNone);
      var v11000 = this.childrenWalkers;
      var v18027 = TypeScript$$5.NodeType;
      var v11001 = v18027.Throw;
      JAM.set(v11000, v11001, ChildrenWalkers.walkUnaryExpressionChildren);
      var v11002 = this.childrenWalkers;
      var v18028 = TypeScript$$5.NodeType;
      var v11003 = v18028.For;
      JAM.set(v11002, v11003, ChildrenWalkers.walkForStatementChildren);
      var v11004 = this.childrenWalkers;
      var v18029 = TypeScript$$5.NodeType;
      var v11005 = v18029.ForIn;
      JAM.set(v11004, v11005, ChildrenWalkers.walkForInStatementChildren);
      var v11006 = this.childrenWalkers;
      var v18030 = TypeScript$$5.NodeType;
      var v11007 = v18030.If;
      JAM.set(v11006, v11007, ChildrenWalkers.walkIfStatementChildren);
      var v11008 = this.childrenWalkers;
      var v18031 = TypeScript$$5.NodeType;
      var v11009 = v18031.While;
      JAM.set(v11008, v11009, ChildrenWalkers.walkWhileStatementChildren);
      var v11010 = this.childrenWalkers;
      var v18032 = TypeScript$$5.NodeType;
      var v11011 = v18032.DoWhile;
      JAM.set(v11010, v11011, ChildrenWalkers.walkDoWhileStatementChildren);
      var v11012 = this.childrenWalkers;
      var v18033 = TypeScript$$5.NodeType;
      var v11013 = v18033.Block;
      JAM.set(v11012, v11013, ChildrenWalkers.walkBlockChildren);
      var v11014 = this.childrenWalkers;
      var v18034 = TypeScript$$5.NodeType;
      var v11015 = v18034.Case;
      JAM.set(v11014, v11015, ChildrenWalkers.walkCaseStatementChildren);
      var v11016 = this.childrenWalkers;
      var v18035 = TypeScript$$5.NodeType;
      var v11017 = v18035.Switch;
      JAM.set(v11016, v11017, ChildrenWalkers.walkSwitchStatementChildren);
      var v11018 = this.childrenWalkers;
      var v18036 = TypeScript$$5.NodeType;
      var v11019 = v18036.Try;
      JAM.set(v11018, v11019, ChildrenWalkers.walkTryChildren);
      var v11020 = this.childrenWalkers;
      var v18037 = TypeScript$$5.NodeType;
      var v11021 = v18037.TryCatch;
      JAM.set(v11020, v11021, ChildrenWalkers.walkTryCatchChildren);
      var v11022 = this.childrenWalkers;
      var v18038 = TypeScript$$5.NodeType;
      var v11023 = v18038.TryFinally;
      JAM.set(v11022, v11023, ChildrenWalkers.walkTryFinallyChildren);
      var v11024 = this.childrenWalkers;
      var v18039 = TypeScript$$5.NodeType;
      var v11025 = v18039.Finally;
      JAM.set(v11024, v11025, ChildrenWalkers.walkFinallyChildren);
      var v11026 = this.childrenWalkers;
      var v18040 = TypeScript$$5.NodeType;
      var v11027 = v18040.Catch;
      JAM.set(v11026, v11027, ChildrenWalkers.walkCatchChildren);
      var v11028 = this.childrenWalkers;
      var v18041 = TypeScript$$5.NodeType;
      var v11029 = v18041.List;
      JAM.set(v11028, v11029, ChildrenWalkers.walkListChildren);
      var v11030 = this.childrenWalkers;
      var v18042 = TypeScript$$5.NodeType;
      var v11031 = v18042.Script;
      JAM.set(v11030, v11031, ChildrenWalkers.walkScriptChildren);
      var v11032 = this.childrenWalkers;
      var v18043 = TypeScript$$5.NodeType;
      var v11033 = v18043.ClassDeclaration;
      JAM.set(v11032, v11033, ChildrenWalkers.walkClassDeclChildren);
      var v11034 = this.childrenWalkers;
      var v18044 = TypeScript$$5.NodeType;
      var v11035 = v18044.InterfaceDeclaration;
      JAM.set(v11034, v11035, ChildrenWalkers.walkTypeDeclChildren);
      var v11036 = this.childrenWalkers;
      var v18045 = TypeScript$$5.NodeType;
      var v11037 = v18045.ModuleDeclaration;
      JAM.set(v11036, v11037, ChildrenWalkers.walkModuleDeclChildren);
      var v11038 = this.childrenWalkers;
      var v18046 = TypeScript$$5.NodeType;
      var v11039 = v18046.ImportDeclaration;
      JAM.set(v11038, v11039, ChildrenWalkers.walkImportDeclChildren);
      var v11040 = this.childrenWalkers;
      var v18047 = TypeScript$$5.NodeType;
      var v11041 = v18047.With;
      JAM.set(v11040, v11041, ChildrenWalkers.walkWithStatementChildren);
      var v11042 = this.childrenWalkers;
      var v18048 = TypeScript$$5.NodeType;
      var v11043 = v18048.Label;
      JAM.set(v11042, v11043, ChildrenWalkers.walkLabelChildren);
      var v11044 = this.childrenWalkers;
      var v18049 = TypeScript$$5.NodeType;
      var v11045 = v18049.LabeledStatement;
      JAM.set(v11044, v11045, ChildrenWalkers.walkLabeledStatementChildren);
      var v11046 = this.childrenWalkers;
      var v18050 = TypeScript$$5.NodeType;
      var v11047 = v18050.EBStart;
      JAM.set(v11046, v11047, ChildrenWalkers.walkNone);
      var v11048 = this.childrenWalkers;
      var v18051 = TypeScript$$5.NodeType;
      var v11049 = v18051.GotoEB;
      JAM.set(v11048, v11049, ChildrenWalkers.walkNone);
      var v11050 = this.childrenWalkers;
      var v18052 = TypeScript$$5.NodeType;
      var v11051 = v18052.EndCode;
      JAM.set(v11050, v11051, ChildrenWalkers.walkNone);
      var v11052 = this.childrenWalkers;
      var v18053 = TypeScript$$5.NodeType;
      var v11053 = v18053.Error;
      JAM.set(v11052, v11053, ChildrenWalkers.walkNone);
      var v11054 = this.childrenWalkers;
      var v18054 = TypeScript$$5.NodeType;
      var v11055 = v18054.Comment;
      JAM.set(v11054, v11055, ChildrenWalkers.walkNone);
      var v11056 = this.childrenWalkers;
      var v18055 = TypeScript$$5.NodeType;
      var v11057 = v18055.Debugger;
      JAM.set(v11056, v11057, ChildrenWalkers.walkNone);
      var e$$8;
      var v18056 = TypeScript$$5.NodeType;
      var v11059 = v18056._map;
      for (e$$8 in v11059) {
        var v22524 = this.childrenWalkers;
        var v18057 = v22524[e$$8];
        var v11058 = v18057 === undefined;
        if (v11058) {
          throw new Error("initWalkers function is not up to date with enum content!");
        }
      }
      return;
    }
    function v329(pre$$3, post$$3, options$$4, state$$3) {
      var v11060 = !options$$4;
      if (v11060) {
        options$$4 = new AstWalkOptions;
      }
      var v11061 = this.childrenWalkers;
      return JAM.new(AstWalker, [v11061, pre$$3, post$$3, options$$4, state$$3]);
    }
    function v328(pre$$2, post$$2, options$$3, state$$2) {
      return JAM.call(this.getSlowWalker, this, [pre$$2, post$$2, options$$3, state$$2], JAM.policy.p1);
    }
    function v327(ast$$4, pre$$1, post$$1, options$$2, state$$1) {
      var v11062 = JAM.call(this.getWalker, this, [pre$$1, post$$1, options$$2, state$$1], JAM.policy.p1);
      return JAM.call(v11062.walk, v11062, [ast$$4, null], JAM.policy.p1);
    }
    function AstWalkerFactory$$1() {
      this.childrenWalkers = [];
      this.initChildrenWalkers();
      return;
    }
    var v11063 = AstWalkerFactory$$1.prototype;
    v11063.walk = v327;
    var v11064 = AstWalkerFactory$$1.prototype;
    v11064.getWalker = v328;
    var v11065 = AstWalkerFactory$$1.prototype;
    v11065.getSlowWalker = v329;
    var v11066 = AstWalkerFactory$$1.prototype;
    v11066.initChildrenWalkers = v330;
    return AstWalkerFactory$$1;
  }
  function v326() {
    function v325(ast$$3, parent$$1) {
      var preAst = JAM.call(this.pre, this, [ast$$3, parent$$1, this], JAM.policy.p1);
      var v11067 = preAst === undefined;
      if (v11067) {
        preAst = ast$$3;
      }
      var v18058 = this.options;
      var v11074 = v18058.goChildren;
      if (v11074) {
        var v11068 = this.options;
        var svGoSib = v11068.goNextSibling;
        var v11069 = this.options;
        v11069.goNextSibling = true;
        var v11070 = this.childrenWalkers;
        var v11071 = ast$$3.nodeType;
        JAM.call(v11070[v11071], v11070, [ast$$3, parent$$1, this], JAM.policy.p1);
        var v11072 = this.options;
        v11072.goNextSibling = svGoSib;
      } else {
        var v11073 = this.options;
        v11073.goChildren = true;
      }
      var v11076 = this.post;
      if (v11076) {
        var postAst = JAM.call(this.post, this, [preAst, parent$$1, this], JAM.policy.p1);
        var v11075 = postAst === undefined;
        if (v11075) {
          postAst = preAst;
        }
        return postAst;
      } else {
        return preAst;
      }
      return;
    }
    function AstWalker$$1(childrenWalkers, pre, post, options$$1, state) {
      this.childrenWalkers = childrenWalkers;
      this.pre = pre;
      this.post = post;
      this.options = options$$1;
      this.state = state;
      return;
    }
    var v11077 = AstWalker$$1.prototype;
    v11077.walk = v325;
    return AstWalker$$1;
  }
  function v324() {
    function v323() {
      var stop;
      var v18059 = typeof stop;
      var v11078 = v18059 === "undefined";
      if (v11078) {
        stop = true;
      }
      this.goChildren = !stop;
      this.goNextSibling = !stop;
      return;
    }
    function AstWalkOptions$$1() {
      this.goChildren = true;
      this.goNextSibling = true;
      this.reverseSiblings = false;
      return;
    }
    var v11079 = AstWalkOptions$$1.prototype;
    v11079.stopWalk = v323;
    return AstWalkOptions$$1;
  }
  function getAstWalkerFactory() {
    var v11080 = !globalAstWalkerFactory;
    if (v11080) {
      globalAstWalkerFactory = new AstWalkerFactory;
    }
    return globalAstWalkerFactory;
  }
  var AstWalkOptions = v324();
  TypeScript$$5.AstWalkOptions = AstWalkOptions;
  var AstWalker = v326();
  var AstWalkerFactory = v331();
  TypeScript$$5.AstWalkerFactory = AstWalkerFactory;
  var globalAstWalkerFactory;
  TypeScript$$5.getAstWalkerFactory = getAstWalkerFactory;
  var ChildrenWalkers;
  var v18060 = ChildrenWalkers;
  var v22525 = !v18060;
  if (v22525) {
    v18060 = ChildrenWalkers = {};
  }
  var v11081 = v18060;
  v332(v11081);
  return;
}
function v322(TypeScript$$4) {
  function v321(_super$$47) {
    function v320(emitter$$38, tokenId$$38, startLine$$38) {
      JAM.call(emitter$$38.emitParensAndCommentsInPlace, emitter$$38, [this, true], JAM.policy.p1);
      JAM.call(emitter$$38.recordSourceMappingStart, emitter$$38, [this]);
      JAM.call(emitter$$38.writeLineToOutput, emitter$$38, ["debugger;"]);
      JAM.call(emitter$$38.recordSourceMappingEnd, emitter$$38, [this]);
      JAM.call(emitter$$38.emitParensAndCommentsInPlace, emitter$$38, [this, false], JAM.policy.p1);
      return;
    }
    function DebuggerStatement$$1() {
      var v18061 = TypeScript$$4.NodeType;
      var v11082 = v18061.Debugger;
      JAM.call(_super$$47.call, _super$$47, [this, v11082], JAM.policy.p1);
      return;
    }
    JAM.call(__extends, null, [DebuggerStatement$$1, _super$$47], JAM.policy.p1);
    var v11083 = DebuggerStatement$$1.prototype;
    v11083.emit = v320;
    return DebuggerStatement$$1;
  }
  function v319(_super$$46) {
    function getDocCommentTextOfSignatures(signatures) {
      var comments$$1 = [];
      var i$$24 = 0;
      var v18062 = signatures.length;
      var v11087 = i$$24 < v18062;
      for (;v11087;) {
        var v11084 = TypeScript$$4.Comment;
        var v22526 = signatures[i$$24];
        var v18063 = v22526.declAST;
        var v11085 = v18063.getDocComments();
        var signatureDocComment = JAM.call(v11084.getDocCommentText, v11084, [v11085]);
        var v11086 = signatureDocComment != "";
        if (v11086) {
          JAM.call(comments$$1.push, comments$$1, [signatureDocComment]);
        }
        i$$24++;
        var v18064 = signatures.length;
        v11087 = i$$24 < v18064;
      }
      return comments$$1.join("\n");
    }
    function getParameterDocCommentText(param$$4, fncDocComments) {
      var v22527 = fncDocComments.length;
      var v18065 = v22527 == 0;
      var v22529 = !v18065;
      if (v22529) {
        var v24726 = fncDocComments[0];
        var v22528 = v24726.isBlockComment;
        v18065 = !v22528;
      }
      var v11088 = v18065;
      if (v11088) {
        return "";
      }
      var i$$23 = 0;
      var v18066 = fncDocComments.length;
      var v11112 = i$$23 < v18066;
      for (;v11112;) {
        var v11089 = fncDocComments[i$$23];
        var commentContents = v11089.content;
        var j = JAM.call(commentContents.indexOf, commentContents, ["@param", 0], JAM.policy.p1);
        var v11111 = 0 <= j;
        for (;v11111;) {
          j = j + 6;
          var v18067 = JAM.call(Comment$$2.isSpaceChar, Comment$$2, [commentContents, j], JAM.policy.p1);
          var v11090 = !v18067;
          if (v11090) {
            j = JAM.call(commentContents.indexOf, commentContents, ["@param", j], JAM.policy.p1);
            v11111 = 0 <= j;
            continue;
          }
          j = JAM.call(Comment$$2.consumeLeadingSpace, Comment$$2, [commentContents, j], JAM.policy.p1);
          var v11091 = j == -1;
          if (v11091) {
            break;
          }
          var v18068 = JAM.call(commentContents.charCodeAt, commentContents, [j]);
          var v18069 = TypeScript$$4.LexCodeLC;
          var v11101 = v18068 == v18069;
          if (v11101) {
            j++;
            var charCode$$3 = 0;
            var curlies = 1;
            var v18070 = commentContents.length;
            var v11096 = j < v18070;
            for (;v11096;) {
              charCode$$3 = JAM.call(commentContents.charCodeAt, commentContents, [j]);
              var v18071 = TypeScript$$4.LexCodeLC;
              var v11092 = charCode$$3 == v18071;
              if (v11092) {
                curlies++;
                j++;
                var v18072 = commentContents.length;
                v11096 = j < v18072;
                continue;
              }
              var v18073 = TypeScript$$4.LexCodeRC;
              var v11094 = charCode$$3 == v18073;
              if (v11094) {
                curlies--;
                var v11093 = curlies == 0;
                if (v11093) {
                  break;
                } else {
                  j++;
                  var v18074 = commentContents.length;
                  v11096 = j < v18074;
                  continue;
                }
              }
              var v18075 = TypeScript$$4.LexCodeAtSign;
              var v11095 = charCode$$3 == v18075;
              if (v11095) {
                break;
              }
              j++;
              var v18076 = commentContents.length;
              v11096 = j < v18076;
            }
            var v18077 = commentContents.length;
            var v11097 = j == v18077;
            if (v11097) {
              break;
            }
            var v18078 = TypeScript$$4.LexCodeAtSign;
            var v11098 = charCode$$3 == v18078;
            if (v11098) {
              j = JAM.call(commentContents.indexOf, commentContents, ["@param", j], JAM.policy.p1);
              v11111 = 0 <= j;
              continue;
            }
            var v11099 = j + 1;
            j = JAM.call(Comment$$2.consumeLeadingSpace, Comment$$2, [commentContents, v11099], JAM.policy.p1);
            var v11100 = j == -1;
            if (v11100) {
              break;
            }
          }
          var v24727 = param$$4.length;
          var v22530 = JAM.call(commentContents.substr, commentContents, [j, v24727], JAM.policy.p1);
          var v18079 = param$$4 != v22530;
          var v22532 = !v18079;
          if (v22532) {
            var v25661 = param$$4.length;
            var v24728 = j + v25661;
            var v22531 = JAM.call(Comment$$2.isSpaceChar, Comment$$2, [commentContents, v24728], JAM.policy.p1);
            v18079 = !v22531;
          }
          var v11102 = v18079;
          if (v11102) {
            j = JAM.call(commentContents.indexOf, commentContents, ["@param", j], JAM.policy.p1);
            v11111 = 0 <= j;
            continue;
          }
          var v18080 = param$$4.length;
          var v11103 = j + v18080;
          j = JAM.call(Comment$$2.consumeLeadingSpace, Comment$$2, [commentContents, v11103], JAM.policy.p1);
          var v11104 = j == -1;
          if (v11104) {
            return "";
          }
          var endOfParam = JAM.call(commentContents.indexOf, commentContents, ["@", j], JAM.policy.p1);
          var v18081;
          var v22533 = endOfParam < 0;
          if (v22533) {
            v18081 = commentContents.length;
          } else {
            v18081 = endOfParam;
          }
          var v11105 = v18081;
          var paramHelpString = JAM.call(commentContents.substring, commentContents, [j, v11105], JAM.policy.p1);
          var paramSpacesToRemove = undefined;
          var v18082 = JAM.call(commentContents.substring, commentContents, [0, j], JAM.policy.p1);
          var v11106 = v18082.lastIndexOf("\n");
          var paramLineIndex = v11106 + 1;
          var v11108 = paramLineIndex != 0;
          if (v11108) {
            var v18083 = paramLineIndex < j;
            if (v18083) {
              var v24729 = paramLineIndex + 1;
              var v22534 = commentContents.charAt(v24729);
              v18083 = v22534 == "\r";
            }
            var v11107 = v18083;
            if (v11107) {
              paramLineIndex++;
            }
          }
          var startSpaceRemovalIndex = JAM.call(Comment$$2.consumeLeadingSpace, Comment$$2, [commentContents, paramLineIndex], JAM.policy.p1);
          var v18084 = startSpaceRemovalIndex != j;
          if (v18084) {
            var v22535 = commentContents.charAt(startSpaceRemovalIndex);
            v18084 = v22535 == "*";
          }
          var v11110 = v18084;
          if (v11110) {
            var v11109 = j - startSpaceRemovalIndex;
            paramSpacesToRemove = v11109 - 1;
          }
          return JAM.call(Comment$$2.cleanJSDocComment, Comment$$2, [paramHelpString, paramSpacesToRemove], JAM.policy.p1);
        }
        i$$23++;
        var v18085 = fncDocComments.length;
        v11112 = i$$23 < v18085;
      }
      return "";
    }
    function getDocCommentText(comments) {
      var docCommentText$$1 = [];
      var c$$2 = 0;
      var v18086 = comments.length;
      var v11115 = c$$2 < v18086;
      for (;v11115;) {
        var v11113 = comments[c$$2];
        var commentText = v11113.getDocCommentText();
        var v11114 = commentText != "";
        if (v11114) {
          JAM.call(docCommentText$$1.push, docCommentText$$1, [commentText]);
        }
        c$$2++;
        var v18087 = comments.length;
        v11115 = c$$2 < v18087;
      }
      return docCommentText$$1.join("\n");
    }
    function cleanJSDocComment(content$$1, spacesToRemove) {
      var docCommentLines = [];
      content$$1 = JAM.call(content$$1.replace, content$$1, ["/**", ""], JAM.policy.p1);
      var v24730 = content$$1.length;
      var v22536 = v24730 >= 2;
      if (v22536) {
        var v26070 = content$$1.length;
        var v25662 = v26070 - 1;
        var v24731 = content$$1.charAt(v25662);
        v22536 = v24731 == "/";
      }
      var v18088 = v22536;
      if (v18088) {
        var v25663 = content$$1.length;
        var v24732 = v25663 - 2;
        var v22537 = content$$1.charAt(v24732);
        v18088 = v22537 == "*";
      }
      var v11117 = v18088;
      if (v11117) {
        var v18089 = content$$1.length;
        var v11116 = v18089 - 2;
        content$$1 = JAM.call(content$$1.substring, content$$1, [0, v11116], JAM.policy.p1);
      }
      var lines = content$$1.split("\n");
      var inParamTag = false;
      var l = 0;
      var v18090 = lines.length;
      var v11125 = l < v18090;
      for (;v11125;) {
        var line$$3 = lines[l];
        var cleanLinePos = JAM.call(Comment$$2.cleanDocCommentLine, Comment$$2, [line$$3, true, spacesToRemove], JAM.policy.p1);
        var v11118 = !cleanLinePos;
        if (v11118) {
          l++;
          var v18091 = lines.length;
          v11125 = l < v18091;
          continue;
        }
        var docCommentText = "";
        var prevPos = cleanLinePos.minChar;
        var v11119 = cleanLinePos.minChar;
        var i$$22 = JAM.call(line$$3.indexOf, line$$3, ["@", v11119], JAM.policy.p1);
        var v18092 = 0 <= i$$22;
        if (v18092) {
          var v22538 = cleanLinePos.limChar;
          v18092 = i$$22 < v22538;
        }
        var v11122 = v18092;
        for (;v11122;) {
          var wasInParamtag = inParamTag;
          var v24733 = i$$22 + 1;
          var v22539 = JAM.call(line$$3.indexOf, line$$3, ["param", v24733], JAM.policy.p1);
          var v22540 = i$$22 + 1;
          var v18093 = v22539 == v22540;
          if (v18093) {
            var v22541 = i$$22 + 6;
            v18093 = JAM.call(Comment$$2.isSpaceChar, Comment$$2, [line$$3, v22541], JAM.policy.p1);
          }
          var v11121 = v18093;
          if (v11121) {
            var v11120 = !wasInParamtag;
            if (v11120) {
              var v18094 = JAM.call(line$$3.substring, line$$3, [prevPos, i$$22], JAM.policy.p1);
              docCommentText = docCommentText + v18094;
            }
            prevPos = i$$22;
            inParamTag = true;
          } else {
            if (wasInParamtag) {
              prevPos = i$$22;
              inParamTag = false;
            }
          }
          var v18095 = i$$22 + 1;
          i$$22 = JAM.call(line$$3.indexOf, line$$3, ["@", v18095], JAM.policy.p1);
          var v18096 = 0 <= i$$22;
          if (v18096) {
            var v22542 = cleanLinePos.limChar;
            v18096 = i$$22 < v22542;
          }
          v11122 = v18096;
        }
        var v11123 = !inParamTag;
        if (v11123) {
          var v22543 = cleanLinePos.limChar;
          var v18097 = JAM.call(line$$3.substring, line$$3, [prevPos, v22543], JAM.policy.p1);
          docCommentText = docCommentText + v18097;
        }
        var newCleanPos = JAM.call(Comment$$2.cleanDocCommentLine, Comment$$2, [docCommentText, false], JAM.policy.p1);
        if (newCleanPos) {
          var v11124 = spacesToRemove == undefined;
          if (v11124) {
            spacesToRemove = cleanLinePos.jsDocSpacesRemoved;
          }
          JAM.call(docCommentLines.push, docCommentLines, [docCommentText]);
        }
        l++;
        var v18098 = lines.length;
        v11125 = l < v18098;
      }
      return docCommentLines.join("\n");
    }
    function cleanDocCommentLine(line$$2, jsDocStyleComment, jsDocLineSpaceToRemove) {
      var nonSpaceIndex = JAM.call(Comment$$2.consumeLeadingSpace, Comment$$2, [line$$2, 0], JAM.policy.p1);
      var v11129 = nonSpaceIndex != -1;
      if (v11129) {
        var jsDocSpacesRemoved = nonSpaceIndex;
        var v18099 = jsDocStyleComment;
        if (v18099) {
          var v22544 = line$$2.charAt(nonSpaceIndex);
          v18099 = v22544 == "*";
        }
        var v11127 = v18099;
        if (v11127) {
          var startIndex$$1 = nonSpaceIndex + 1;
          nonSpaceIndex = JAM.call(Comment$$2.consumeLeadingSpace, Comment$$2, [line$$2, startIndex$$1, jsDocLineSpaceToRemove], JAM.policy.p1);
          var v11126 = nonSpaceIndex != -1;
          if (v11126) {
            jsDocSpacesRemoved = nonSpaceIndex - startIndex$$1;
          } else {
            return null;
          }
        }
        var v18100;
        var v26071 = line$$2.length;
        var v25664 = v26071 - 1;
        var v24734 = line$$2.charAt(v25664);
        var v22546 = v24734 == "\r";
        if (v22546) {
          var v22545 = line$$2.length;
          v18100 = v22545 - 1;
        } else {
          v18100 = line$$2.length;
        }
        var v11128 = v18100;
        return {minChar:nonSpaceIndex, limChar:v11128, jsDocSpacesRemoved:jsDocSpacesRemoved};
      }
      return null;
    }
    function isSpaceChar(line$$1, index$$41) {
      var length$$13 = line$$1.length;
      var v11131 = index$$41 < length$$13;
      if (v11131) {
        var charCode$$2 = JAM.call(line$$1.charCodeAt, line$$1, [index$$41]);
        var v18101 = TypeScript$$4.LexCodeSpace;
        var v11130 = charCode$$2 == v18101;
        var v18103 = !v11130;
        if (v18103) {
          var v18102 = TypeScript$$4.LexCodeTAB;
          v11130 = charCode$$2 == v18102;
        }
        return v11130;
      }
      return index$$41 == length$$13;
    }
    function consumeLeadingSpace(line, startIndex, maxSpacesToRemove) {
      var endIndex = line.length;
      var v11133 = maxSpacesToRemove != undefined;
      if (v11133) {
        var v11132 = startIndex + maxSpacesToRemove;
        endIndex = JAM.call(TypeScript$$4.min, TypeScript$$4, [v11132, endIndex], JAM.policy.p1);
      }
      var v11135 = startIndex < endIndex;
      for (;v11135;) {
        var charCode$$1 = JAM.call(line.charCodeAt, line, [startIndex]);
        var v22547 = TypeScript$$4.LexCodeSpace;
        var v18104 = charCode$$1 != v22547;
        if (v18104) {
          var v22548 = TypeScript$$4.LexCodeTAB;
          v18104 = charCode$$1 != v22548;
        }
        var v11134 = v18104;
        if (v11134) {
          return startIndex;
        }
        startIndex++;
        v11135 = startIndex < endIndex;
      }
      var v18105 = line.length;
      var v11136 = endIndex != v18105;
      if (v11136) {
        return endIndex;
      }
      return -1;
    }
    function v318() {
      var v18106 = this.docCommentText;
      var v11138 = v18106 == null;
      if (v11138) {
        var v11137 = this.content;
        var v27065 = JAM.call(Comment$$2.cleanJSDocComment, Comment$$2, [v11137]);
        this.docCommentText = v27065;
      }
      return this.docCommentText;
    }
    function v317() {
      var v11140 = this.isBlockComment;
      if (v11140) {
        var v18107 = this.content;
        var v11139 = v18107.charAt(2);
        return v11139 == "*";
      }
      return false;
    }
    function v316() {
      var v18108 = this.text;
      var v11146 = v18108 == null;
      if (v11146) {
        var v11145 = this.isBlockComment;
        if (v11145) {
          var v11141 = this.content;
          var v27066 = v11141.split("\n");
          this.text = v27066;
          var i$$21 = 0;
          var v22549 = this.text;
          var v18109 = v22549.length;
          var v11143 = i$$21 < v18109;
          for (;v11143;) {
            var v11142 = this.text;
            var v22550 = this.text;
            var v18110 = v22550[i$$21];
            var v27067 = JAM.call(v18110.replace, v18110, [/^\s+|\s+$/g, ""], JAM.policy.p1);
            v11142[i$$21] = v27067;
            i$$21++;
            var v22551 = this.text;
            var v18111 = v22551.length;
            v11143 = i$$21 < v18111;
          }
        } else {
          var v18112 = this.content;
          var v11144 = JAM.call(v18112.replace, v18112, [/^\s+|\s+$/g, ""], JAM.policy.p1);
          this.text = [v11144];
        }
      }
      return this.text;
    }
    function Comment$$2(content, isBlockComment, endsLine) {
      var v18113 = TypeScript$$4.NodeType;
      var v11147 = v18113.Comment;
      JAM.call(_super$$46.call, _super$$46, [this, v11147], JAM.policy.p1);
      this.content = content;
      this.isBlockComment = isBlockComment;
      this.endsLine = endsLine;
      this.text = null;
      this.docCommentText = null;
      return;
    }
    JAM.call(__extends, null, [Comment$$2, _super$$46], JAM.policy.p1);
    var v11148 = Comment$$2.prototype;
    v11148.getText = v316;
    var v11149 = Comment$$2.prototype;
    v11149.isDocComment = v317;
    var v11150 = Comment$$2.prototype;
    v11150.getDocCommentText = v318;
    Comment$$2.consumeLeadingSpace = consumeLeadingSpace;
    Comment$$2.isSpaceChar = isSpaceChar;
    Comment$$2.cleanDocCommentLine = cleanDocCommentLine;
    Comment$$2.cleanJSDocComment = cleanJSDocComment;
    Comment$$2.getDocCommentText = getDocCommentText;
    Comment$$2.getParameterDocCommentText = getParameterDocCommentText;
    Comment$$2.getDocCommentTextOfSignatures = getDocCommentTextOfSignatures;
    return Comment$$2;
  }
  function v315(_super$$45) {
    function v314(typeFlow$$35) {
      var v11151 = this.body;
      var v27068 = JAM.call(typeFlow$$35.typeCheck, typeFlow$$35, [v11151]);
      this.body = v27068;
      return this;
    }
    function v313(context$$26) {
      var v11153 = this.body;
      if (v11153) {
        var v11152 = this.body;
        JAM.call(context$$26.walk, context$$26, [v11152, this], JAM.policy.p1);
      }
      var v18114 = context$$26.walker;
      var v11154 = v18114.options;
      v11154.goChildren = false;
      context$$26.noContinuation = false;
      return;
    }
    function v312(emitter$$37, tokenId$$37, startLine$$37) {
      JAM.call(emitter$$37.emitParensAndCommentsInPlace, emitter$$37, [this, true], JAM.policy.p1);
      JAM.call(emitter$$37.recordSourceMappingStart, emitter$$37, [this]);
      JAM.call(emitter$$37.writeToOutput, emitter$$37, ["finally"]);
      var v11155 = this.body;
      var v18115 = TypeScript$$4.TokenID;
      var v11156 = v18115.Finally;
      JAM.call(emitter$$37.emitJavascript, emitter$$37, [v11155, v11156, false], JAM.policy.p1);
      JAM.call(emitter$$37.recordSourceMappingEnd, emitter$$37, [this]);
      JAM.call(emitter$$37.emitParensAndCommentsInPlace, emitter$$37, [this, false], JAM.policy.p1);
      return;
    }
    function Finally$$1(body$$2) {
      var v18116 = TypeScript$$4.NodeType;
      var v11157 = v18116.Finally;
      JAM.call(_super$$45.call, _super$$45, [this, v11157], JAM.policy.p1);
      this.body = body$$2;
      return;
    }
    JAM.call(__extends, null, [Finally$$1, _super$$45], JAM.policy.p1);
    var v11158 = Finally$$1.prototype;
    v11158.emit = v312;
    var v11159 = Finally$$1.prototype;
    v11159.addToControlFlow = v313;
    var v11160 = Finally$$1.prototype;
    v11160.typeCheck = v314;
    return Finally$$1;
  }
  function v311(_super$$44) {
    function v310(typeFlow$$34) {
      var prevScope = typeFlow$$34.scope;
      typeFlow$$34.scope = this.containedScope;
      var v11161 = this.param;
      var v27069 = JAM.call(typeFlow$$34.typeCheck, typeFlow$$34, [v11161]);
      this.param = v27069;
      var v11162 = TypeScript$$4.ValueLocation;
      var exceptVar = new v11162;
      var v11163 = TypeScript$$4.VariableSymbol;
      var v22552 = this.param;
      var v18117 = v22552.id;
      var v11164 = v18117.text;
      var v18118 = this.param;
      var v11165 = v18118.minChar;
      var v22553 = typeFlow$$34.checker;
      var v18119 = v22553.locationInfo;
      var v11166 = v18119.unitIndex;
      var varSym = JAM.new(v11163, [v11164, v11165, v11166, exceptVar]);
      exceptVar.symbol = varSym;
      var v11167 = TypeScript$$4.TypeLink;
      var v27070 = new v11167;
      exceptVar.typeLink = v27070;
      var v11168 = exceptVar.typeLink;
      v11168.type = typeFlow$$34.anyType;
      var thisFnc = typeFlow$$34.thisFnc;
      var v18120 = thisFnc;
      if (v18120) {
        v18120 = thisFnc.type;
      }
      var v11171 = v18120;
      if (v11171) {
        var v11169 = exceptVar.symbol;
        var v18121 = thisFnc.type;
        v11169.container = v18121.symbol;
      } else {
        var v11170 = exceptVar.symbol;
        v11170.container = null;
      }
      var v11172 = this.param;
      v11172.sym = exceptVar.symbol;
      var v11173 = typeFlow$$34.scope;
      var v18122 = exceptVar.symbol;
      var v11174 = v18122.container;
      var v11175 = this.param;
      var v11176 = exceptVar.symbol;
      var v18123 = typeFlow$$34.checker;
      var v11177 = v18123.errorReporter;
      JAM.call(v11173.enter, v11173, [v11174, v11175, v11176, v11177, false, false, false], JAM.policy.p1);
      var v11178 = this.body;
      var v27071 = JAM.call(typeFlow$$34.typeCheck, typeFlow$$34, [v11178]);
      this.body = v27071;
      var v18124 = typeFlow$$34.checker;
      var v11182 = v18124.inProvisionalTypecheckMode();
      if (v11182) {
        var v11179 = typeFlow$$34.scope;
        var table = v11179.getTable();
        var v18125 = table.secondaryTable;
        var v11180 = v18125.table;
        var v18126 = exceptVar.symbol;
        var v11181 = v18126.name;
        JAM.set(v11180, v11181, undefined);
      }
      this.type = typeFlow$$34.voidType;
      typeFlow$$34.scope = prevScope;
      return this;
    }
    function v309(context$$25) {
      var v11186 = this.param;
      if (v11186) {
        var v11183 = this.param;
        JAM.call(context$$25.addContent, context$$25, [v11183]);
        var v11184 = TypeScript$$4.BasicBlock;
        var bodBlock = new v11184;
        var v11185 = context$$25.current;
        JAM.call(v11185.addSuccessor, v11185, [bodBlock]);
        context$$25.current = bodBlock;
      }
      var v11188 = this.body;
      if (v11188) {
        var v11187 = this.body;
        JAM.call(context$$25.walk, context$$25, [v11187, this], JAM.policy.p1);
      }
      context$$25.noContinuation = false;
      var v18127 = context$$25.walker;
      var v11189 = v18127.options;
      v11189.goChildren = false;
      return;
    }
    function v308(emitter$$36, tokenId$$36, startLine$$36) {
      JAM.call(emitter$$36.emitParensAndCommentsInPlace, emitter$$36, [this, true], JAM.policy.p1);
      JAM.call(emitter$$36.recordSourceMappingStart, emitter$$36, [this]);
      JAM.call(emitter$$36.writeToOutput, emitter$$36, [" "]);
      var v11190 = this.statement;
      JAM.call(emitter$$36.recordSourceMappingStart, emitter$$36, [v11190]);
      JAM.call(emitter$$36.writeToOutput, emitter$$36, ["catch ("]);
      var v11191 = this.param;
      var v18128 = TypeScript$$4.TokenID;
      var v11192 = v18128.OpenParen;
      JAM.call(emitter$$36.emitJavascript, emitter$$36, [v11191, v11192, false], JAM.policy.p1);
      JAM.call(emitter$$36.writeToOutput, emitter$$36, [")"]);
      var v11193 = this.statement;
      JAM.call(emitter$$36.recordSourceMappingEnd, emitter$$36, [v11193]);
      var v11194 = this.body;
      var v18129 = TypeScript$$4.TokenID;
      var v11195 = v18129.Catch;
      JAM.call(emitter$$36.emitJavascript, emitter$$36, [v11194, v11195, false], JAM.policy.p1);
      JAM.call(emitter$$36.recordSourceMappingEnd, emitter$$36, [this]);
      JAM.call(emitter$$36.emitParensAndCommentsInPlace, emitter$$36, [this, false], JAM.policy.p1);
      return;
    }
    function Catch$$1(param$$3, body$$1) {
      var v18130 = TypeScript$$4.NodeType;
      var v11196 = v18130.Catch;
      JAM.call(_super$$44.call, _super$$44, [this, v11196], JAM.policy.p1);
      this.param = param$$3;
      this.body = body$$1;
      var v27072 = new ASTSpan;
      this.statement = v27072;
      this.containedScope = null;
      var v11198 = this.param;
      if (v11198) {
        var v11197 = this.param;
        var v22554 = v11197.varFlags;
        var v24735 = TypeScript$$4.VarFlags;
        var v22555 = v24735.AutoInit;
        v11197.varFlags = v22554 | v22555;
      }
      return;
    }
    JAM.call(__extends, null, [Catch$$1, _super$$44], JAM.policy.p1);
    var v11199 = Catch$$1.prototype;
    v11199.emit = v308;
    var v11200 = Catch$$1.prototype;
    v11200.addToControlFlow = v309;
    var v11201 = Catch$$1.prototype;
    v11201.typeCheck = v310;
    return Catch$$1;
  }
  function v307(_super$$43) {
    function v306(context$$24) {
      var v11203 = this.body;
      if (v11203) {
        var v11202 = this.body;
        JAM.call(context$$24.walk, context$$24, [v11202, this], JAM.policy.p1);
      }
      var v18131 = context$$24.walker;
      var v11204 = v18131.options;
      v11204.goChildren = false;
      context$$24.noContinuation = false;
      return;
    }
    function v305(typeFlow$$33) {
      var v11205 = this.body;
      var v27073 = JAM.call(typeFlow$$33.typeCheck, typeFlow$$33, [v11205]);
      this.body = v27073;
      return this;
    }
    function v304(emitter$$35, tokenId$$35, startLine$$35) {
      JAM.call(emitter$$35.emitParensAndCommentsInPlace, emitter$$35, [this, true], JAM.policy.p1);
      JAM.call(emitter$$35.recordSourceMappingStart, emitter$$35, [this]);
      JAM.call(emitter$$35.writeToOutput, emitter$$35, ["try "]);
      var v11206 = this.body;
      var v18132 = TypeScript$$4.TokenID;
      var v11207 = v18132.Try;
      JAM.call(emitter$$35.emitJavascript, emitter$$35, [v11206, v11207, false], JAM.policy.p1);
      JAM.call(emitter$$35.recordSourceMappingEnd, emitter$$35, [this]);
      JAM.call(emitter$$35.emitParensAndCommentsInPlace, emitter$$35, [this, false], JAM.policy.p1);
      return;
    }
    function Try$$1(body) {
      var v18133 = TypeScript$$4.NodeType;
      var v11208 = v18133.Try;
      JAM.call(_super$$43.call, _super$$43, [this, v11208], JAM.policy.p1);
      this.body = body;
      return;
    }
    JAM.call(__extends, null, [Try$$1, _super$$43], JAM.policy.p1);
    var v11209 = Try$$1.prototype;
    v11209.emit = v304;
    var v11210 = Try$$1.prototype;
    v11210.typeCheck = v305;
    var v11211 = Try$$1.prototype;
    v11211.addToControlFlow = v306;
    return Try$$1;
  }
  function v303(_super$$42) {
    function v302(typeFlow$$32) {
      var v11212 = this.tryNode;
      var v27074 = JAM.call(typeFlow$$32.typeCheck, typeFlow$$32, [v11212]);
      this.tryNode = v27074;
      var v11213 = this.catchNode;
      var v27075 = JAM.call(typeFlow$$32.typeCheck, typeFlow$$32, [v11213]);
      this.catchNode = v27075;
      this.type = typeFlow$$32.voidType;
      return this;
    }
    function v301(context$$23) {
      var beforeTry = context$$23.current;
      var v11214 = TypeScript$$4.BasicBlock;
      var tryBlock = new v11214;
      JAM.call(beforeTry.addSuccessor, beforeTry, [tryBlock]);
      context$$23.current = tryBlock;
      var v11215 = TypeScript$$4.BasicBlock;
      var afterTryCatch = new v11215;
      JAM.call(context$$23.pushStatement, context$$23, [this, null, afterTryCatch], JAM.policy.p1);
      var v11216 = this.tryNode;
      JAM.call(context$$23.walk, context$$23, [v11216, this], JAM.policy.p1);
      var v18134 = context$$23.noContinuation;
      var v11219 = !v18134;
      if (v11219) {
        var v11218 = context$$23.current;
        if (v11218) {
          var v11217 = context$$23.current;
          JAM.call(v11217.addSuccessor, v11217, [afterTryCatch]);
        }
      }
      var v11220 = TypeScript$$4.BasicBlock;
      var v27076 = new v11220;
      context$$23.current = v27076;
      var v11221 = context$$23.current;
      JAM.call(beforeTry.addSuccessor, beforeTry, [v11221]);
      var v11222 = this.catchNode;
      JAM.call(context$$23.walk, context$$23, [v11222, this], JAM.policy.p1);
      context$$23.popStatement();
      var v18135 = context$$23.noContinuation;
      var v11225 = !v18135;
      if (v11225) {
        var v11224 = context$$23.current;
        if (v11224) {
          var v11223 = context$$23.current;
          JAM.call(v11223.addSuccessor, v11223, [afterTryCatch]);
        }
      }
      context$$23.current = afterTryCatch;
      var v18136 = context$$23.walker;
      var v11226 = v18136.options;
      v11226.goChildren = false;
      return;
    }
    function v300(emitter$$34, tokenId$$34, startLine$$34) {
      JAM.call(emitter$$34.emitParensAndCommentsInPlace, emitter$$34, [this, true], JAM.policy.p1);
      JAM.call(emitter$$34.recordSourceMappingStart, emitter$$34, [this]);
      var v11227 = this.tryNode;
      var v18137 = TypeScript$$4.TokenID;
      var v11228 = v18137.Try;
      JAM.call(emitter$$34.emitJavascript, emitter$$34, [v11227, v11228, false], JAM.policy.p1);
      var v11229 = this.catchNode;
      var v18138 = TypeScript$$4.TokenID;
      var v11230 = v18138.Catch;
      JAM.call(emitter$$34.emitJavascript, emitter$$34, [v11229, v11230, false], JAM.policy.p1);
      JAM.call(emitter$$34.recordSourceMappingEnd, emitter$$34, [this]);
      JAM.call(emitter$$34.emitParensAndCommentsInPlace, emitter$$34, [this, false], JAM.policy.p1);
      return;
    }
    function v299() {
      return true;
    }
    function TryCatch$$1(tryNode$$1, catchNode) {
      var v18139 = TypeScript$$4.NodeType;
      var v11231 = v18139.TryCatch;
      JAM.call(_super$$42.call, _super$$42, [this, v11231], JAM.policy.p1);
      this.tryNode = tryNode$$1;
      this.catchNode = catchNode;
      return;
    }
    JAM.call(__extends, null, [TryCatch$$1, _super$$42], JAM.policy.p1);
    var v11232 = TryCatch$$1.prototype;
    v11232.isCompoundStatement = v299;
    var v11233 = TryCatch$$1.prototype;
    v11233.emit = v300;
    var v11234 = TryCatch$$1.prototype;
    v11234.addToControlFlow = v301;
    var v11235 = TryCatch$$1.prototype;
    v11235.typeCheck = v302;
    return TryCatch$$1;
  }
  function v298(_super$$41) {
    function v297(context$$22) {
      var v11236 = TypeScript$$4.BasicBlock;
      var afterFinally = new v11236;
      var v11237 = this.tryNode;
      JAM.call(context$$22.walk, context$$22, [v11237, this], JAM.policy.p1);
      var v11238 = TypeScript$$4.BasicBlock;
      var finBlock = new v11238;
      var v11240 = context$$22.current;
      if (v11240) {
        var v11239 = context$$22.current;
        JAM.call(v11239.addSuccessor, v11239, [finBlock]);
      }
      context$$22.current = finBlock;
      JAM.call(context$$22.pushStatement, context$$22, [this, null, afterFinally], JAM.policy.p1);
      var v11241 = this.finallyNode;
      JAM.call(context$$22.walk, context$$22, [v11241, this], JAM.policy.p1);
      var v22556 = context$$22.noContinuation;
      var v18140 = !v22556;
      if (v18140) {
        v18140 = context$$22.current;
      }
      var v11243 = v18140;
      if (v11243) {
        var v11242 = context$$22.current;
        JAM.call(v11242.addSuccessor, v11242, [afterFinally]);
      }
      var v22557 = afterFinally.predecessors;
      var v18141 = v22557.length;
      var v11244 = v18141 > 0;
      if (v11244) {
        context$$22.current = afterFinally;
      } else {
        context$$22.noContinuation = true;
      }
      context$$22.popStatement();
      var v18142 = context$$22.walker;
      var v11245 = v18142.options;
      v11245.goChildren = false;
      return;
    }
    function v296(typeFlow$$31) {
      var v11246 = this.tryNode;
      var v27077 = JAM.call(typeFlow$$31.typeCheck, typeFlow$$31, [v11246]);
      this.tryNode = v27077;
      var v11247 = this.finallyNode;
      var v27078 = JAM.call(typeFlow$$31.typeCheck, typeFlow$$31, [v11247]);
      this.finallyNode = v27078;
      this.type = typeFlow$$31.voidType;
      return this;
    }
    function v295(emitter$$33, tokenId$$33, startLine$$33) {
      JAM.call(emitter$$33.recordSourceMappingStart, emitter$$33, [this]);
      var v11248 = this.tryNode;
      var v18143 = TypeScript$$4.TokenID;
      var v11249 = v18143.Try;
      JAM.call(emitter$$33.emitJavascript, emitter$$33, [v11248, v11249, false], JAM.policy.p1);
      var v11250 = this.finallyNode;
      var v18144 = TypeScript$$4.TokenID;
      var v11251 = v18144.Finally;
      JAM.call(emitter$$33.emitJavascript, emitter$$33, [v11250, v11251, false], JAM.policy.p1);
      JAM.call(emitter$$33.recordSourceMappingEnd, emitter$$33, [this]);
      return;
    }
    function v294() {
      return true;
    }
    function TryFinally$$1(tryNode, finallyNode) {
      var v18145 = TypeScript$$4.NodeType;
      var v11252 = v18145.TryFinally;
      JAM.call(_super$$41.call, _super$$41, [this, v11252], JAM.policy.p1);
      this.tryNode = tryNode;
      this.finallyNode = finallyNode;
      return;
    }
    JAM.call(__extends, null, [TryFinally$$1, _super$$41], JAM.policy.p1);
    var v11253 = TryFinally$$1.prototype;
    v11253.isCompoundStatement = v294;
    var v11254 = TryFinally$$1.prototype;
    v11254.emit = v295;
    var v11255 = TryFinally$$1.prototype;
    v11255.typeCheck = v296;
    var v11256 = TryFinally$$1.prototype;
    v11256.addToControlFlow = v297;
    return TryFinally$$1;
  }
  function v293(_super$$40) {
    function v292(typeFlow$$30) {
      var prevInTCTR = typeFlow$$30.inTypeRefTypeCheck;
      typeFlow$$30.inTypeRefTypeCheck = true;
      var v11257 = typeFlow$$30.checker;
      var typeLink = JAM.call(TypeScript$$4.getTypeLink, TypeScript$$4, [this, v11257, true], JAM.policy.p1);
      var v11258 = typeFlow$$30.checker;
      var v11259 = typeFlow$$30.scope;
      JAM.call(v11258.resolveTypeLink, v11258, [v11259, typeLink, false], JAM.policy.p1);
      var v11261 = this.term;
      if (v11261) {
        var v11260 = this.term;
        JAM.call(typeFlow$$30.typeCheck, typeFlow$$30, [v11260]);
      }
      var v11262 = typeLink.type;
      JAM.call(typeFlow$$30.checkForVoidConstructor, typeFlow$$30, [v11262, this], JAM.policy.p1);
      this.type = typeLink.type;
      var v11264 = this.term;
      if (v11264) {
        var v11263 = this.term;
        v11263.type = this.type;
      }
      typeFlow$$30.inTypeRefTypeCheck = prevInTCTR;
      return this;
    }
    function v291(emitter$$32, tokenId$$32, startLine$$32) {
      throw new Error("should not emit a type ref");
    }
    function TypeReference$$1(term, arrayCount) {
      var v18146 = TypeScript$$4.NodeType;
      var v11265 = v18146.TypeRef;
      JAM.call(_super$$40.call, _super$$40, [this, v11265], JAM.policy.p1);
      this.term = term;
      this.arrayCount = arrayCount;
      return;
    }
    JAM.call(__extends, null, [TypeReference$$1, _super$$40], JAM.policy.p1);
    var v11266 = TypeReference$$1.prototype;
    v11266.emit = v291;
    var v11267 = TypeReference$$1.prototype;
    v11267.typeCheck = v292;
    return TypeReference$$1;
  }
  function v290(_super$$39) {
    function v289(context$$21) {
      var v11268 = TypeScript$$4.BasicBlock;
      var execBlock$$1 = new v11268;
      var v11269 = context$$21.currentSwitch;
      var v22558 = context$$21.currentSwitch;
      var v18147 = v22558.length;
      var v11270 = v18147 - 1;
      var sw$$2 = v11269[v11270];
      var v11273 = this.expr;
      if (v11273) {
        var v11271 = TypeScript$$4.BasicBlock;
        var exprBlock = new v11271;
        context$$21.current = exprBlock;
        JAM.call(sw$$2.addSuccessor, sw$$2, [exprBlock]);
        var v11272 = this.expr;
        JAM.call(context$$21.addContent, context$$21, [v11272]);
        JAM.call(exprBlock.addSuccessor, exprBlock, [execBlock$$1]);
      } else {
        JAM.call(sw$$2.addSuccessor, sw$$2, [execBlock$$1]);
      }
      context$$21.current = execBlock$$1;
      var v11275 = this.body;
      if (v11275) {
        var v11274 = this.body;
        JAM.call(context$$21.walk, context$$21, [v11274, this], JAM.policy.p1);
      }
      context$$21.noContinuation = false;
      var v18148 = context$$21.walker;
      var v11276 = v18148.options;
      v11276.goChildren = false;
      return;
    }
    function v288(typeFlow$$29) {
      var v11277 = this.expr;
      var v27079 = JAM.call(typeFlow$$29.typeCheck, typeFlow$$29, [v11277]);
      this.expr = v27079;
      var v11278 = this.body;
      JAM.call(typeFlow$$29.typeCheck, typeFlow$$29, [v11278]);
      this.type = typeFlow$$29.voidType;
      return this;
    }
    function v287(emitter$$31, tokenId$$31, startLine$$31) {
      JAM.call(emitter$$31.emitParensAndCommentsInPlace, emitter$$31, [this, true], JAM.policy.p1);
      JAM.call(emitter$$31.recordSourceMappingStart, emitter$$31, [this]);
      var v11281 = this.expr;
      if (v11281) {
        JAM.call(emitter$$31.writeToOutput, emitter$$31, ["case "]);
        var v11279 = this.expr;
        var v18149 = TypeScript$$4.TokenID;
        var v11280 = v18149.Identifier;
        JAM.call(emitter$$31.emitJavascript, emitter$$31, [v11279, v11280, false], JAM.policy.p1);
      } else {
        JAM.call(emitter$$31.writeToOutput, emitter$$31, ["default"]);
      }
      JAM.call(emitter$$31.writeToOutput, emitter$$31, [":"]);
      var v25665 = this.body;
      var v24736 = v25665.members;
      var v22559 = v24736.length;
      var v18150 = v22559 == 1;
      if (v18150) {
        var v26072 = this.body;
        var v25666 = v26072.members;
        var v24737 = v25666[0];
        var v22560 = v24737.nodeType;
        var v24738 = TypeScript$$4.NodeType;
        var v22561 = v24738.Block;
        v18150 = v22560 == v22561;
      }
      var v11286 = v18150;
      if (v11286) {
        var v11282 = this.body;
        JAM.call(emitter$$31.emitJavascriptStatements, emitter$$31, [v11282, false], JAM.policy.p1);
      } else {
        JAM.call(emitter$$31.writeLineToOutput, emitter$$31, [""]);
        var v11283 = emitter$$31.indenter;
        v11283.increaseIndent();
        var v11284 = this.body;
        JAM.call(emitter$$31.emitBareJavascriptStatements, emitter$$31, [v11284]);
        var v11285 = emitter$$31.indenter;
        v11285.decreaseIndent();
      }
      JAM.call(emitter$$31.recordSourceMappingEnd, emitter$$31, [this]);
      JAM.call(emitter$$31.emitParensAndCommentsInPlace, emitter$$31, [this, false], JAM.policy.p1);
      return;
    }
    function CaseStatement$$1() {
      var v18151 = TypeScript$$4.NodeType;
      var v11287 = v18151.Case;
      JAM.call(_super$$39.call, _super$$39, [this, v11287], JAM.policy.p1);
      this.expr = null;
      return;
    }
    JAM.call(__extends, null, [CaseStatement$$1, _super$$39], JAM.policy.p1);
    var v11288 = CaseStatement$$1.prototype;
    v11288.emit = v287;
    var v11289 = CaseStatement$$1.prototype;
    v11289.typeCheck = v288;
    var v11290 = CaseStatement$$1.prototype;
    v11290.addToControlFlow = v289;
    return CaseStatement$$1;
  }
  function v286(_super$$38) {
    function v285(context$$20) {
      var condBlock$$2 = context$$20.current;
      var v11291 = this.val;
      JAM.call(context$$20.addContent, context$$20, [v11291]);
      var v11292 = TypeScript$$4.BasicBlock;
      var execBlock = new v11292;
      var v11293 = TypeScript$$4.BasicBlock;
      var afterSwitch = new v11293;
      JAM.call(condBlock$$2.addSuccessor, condBlock$$2, [execBlock]);
      JAM.call(context$$20.pushSwitch, context$$20, [execBlock]);
      context$$20.current = execBlock;
      JAM.call(context$$20.pushStatement, context$$20, [this, execBlock, afterSwitch], JAM.policy.p1);
      var v11294 = this.caseList;
      JAM.call(context$$20.walk, context$$20, [v11294, this], JAM.policy.p1);
      context$$20.popSwitch();
      var targetInfo$$4 = context$$20.popStatement();
      var v11295 = this.defaultCase;
      var hasCondContinuation = v11295 == null;
      var v18152 = this.defaultCase;
      var v11296 = v18152 == null;
      if (v11296) {
        JAM.call(condBlock$$2.addSuccessor, condBlock$$2, [afterSwitch]);
      }
      var v22562 = afterSwitch.predecessors;
      var v18153 = v22562.length;
      var v11297 = v18153 > 0;
      if (v11297) {
        context$$20.noContinuation = false;
        context$$20.current = afterSwitch;
      } else {
        context$$20.noContinuation = true;
      }
      var v18154 = context$$20.walker;
      var v11298 = v18154.options;
      v11298.goChildren = false;
      return;
    }
    function v284(typeFlow$$28) {
      var v18155 = this.caseList;
      var v11299 = v18155.members;
      var len$$5 = v11299.length;
      var v11300 = this.val;
      var v27080 = JAM.call(typeFlow$$28.typeCheck, typeFlow$$28, [v11300]);
      this.val = v27080;
      var i$$20 = 0;
      var v11302 = i$$20 < len$$5;
      for (;v11302;) {
        var v18156 = this.caseList;
        var v11301 = v18156.members;
        var v24739 = this.caseList;
        var v22563 = v24739.members;
        var v18157 = v22563[i$$20];
        var v27081 = JAM.call(typeFlow$$28.typeCheck, typeFlow$$28, [v18157]);
        v11301[i$$20] = v27081;
        i$$20++;
        v11302 = i$$20 < len$$5;
      }
      var v11303 = this.defaultCase;
      var v27082 = JAM.call(typeFlow$$28.typeCheck, typeFlow$$28, [v11303]);
      this.defaultCase = v27082;
      this.type = typeFlow$$28.voidType;
      return this;
    }
    function v283(emitter$$30, tokenId$$30, startLine$$30) {
      JAM.call(emitter$$30.emitParensAndCommentsInPlace, emitter$$30, [this, true], JAM.policy.p1);
      JAM.call(emitter$$30.recordSourceMappingStart, emitter$$30, [this]);
      var temp$$7 = JAM.call(emitter$$30.setInObjectLiteral, emitter$$30, [false]);
      var v11304 = this.statement;
      JAM.call(emitter$$30.recordSourceMappingStart, emitter$$30, [v11304]);
      JAM.call(emitter$$30.writeToOutput, emitter$$30, ["switch("]);
      var v11305 = this.val;
      var v18158 = TypeScript$$4.TokenID;
      var v11306 = v18158.Identifier;
      JAM.call(emitter$$30.emitJavascript, emitter$$30, [v11305, v11306, false], JAM.policy.p1);
      JAM.call(emitter$$30.writeToOutput, emitter$$30, [")"]);
      var v11307 = this.statement;
      JAM.call(emitter$$30.recordSourceMappingEnd, emitter$$30, [v11307]);
      JAM.call(emitter$$30.writeLineToOutput, emitter$$30, [" {"]);
      var v11308 = emitter$$30.indenter;
      v11308.increaseIndent();
      var v18159 = this.caseList;
      var v11309 = v18159.members;
      var casesLen = v11309.length;
      var i$$19 = 0;
      var v11312 = i$$19 < casesLen;
      for (;v11312;) {
        var v18160 = this.caseList;
        var v11310 = v18160.members;
        var caseExpr = v11310[i$$19];
        var v18161 = TypeScript$$4.TokenID;
        var v11311 = v18161.Case;
        JAM.call(emitter$$30.emitJavascript, emitter$$30, [caseExpr, v11311, true], JAM.policy.p1);
        i$$19++;
        v11312 = i$$19 < casesLen;
      }
      var v11313 = emitter$$30.indenter;
      v11313.decreaseIndent();
      emitter$$30.emitIndent();
      JAM.call(emitter$$30.writeToOutput, emitter$$30, ["}"]);
      JAM.call(emitter$$30.setInObjectLiteral, emitter$$30, [temp$$7]);
      JAM.call(emitter$$30.recordSourceMappingEnd, emitter$$30, [this]);
      JAM.call(emitter$$30.emitParensAndCommentsInPlace, emitter$$30, [this, false], JAM.policy.p1);
      return;
    }
    function v282() {
      return true;
    }
    function SwitchStatement$$1(val$$4) {
      var v18162 = TypeScript$$4.NodeType;
      var v11314 = v18162.Switch;
      JAM.call(_super$$38.call, _super$$38, [this, v11314], JAM.policy.p1);
      this.val = val$$4;
      this.defaultCase = null;
      var v27083 = new ASTSpan;
      this.statement = v27083;
      return;
    }
    JAM.call(__extends, null, [SwitchStatement$$1, _super$$38], JAM.policy.p1);
    var v11315 = SwitchStatement$$1.prototype;
    v11315.isCompoundStatement = v282;
    var v11316 = SwitchStatement$$1.prototype;
    v11316.emit = v283;
    var v11317 = SwitchStatement$$1.prototype;
    v11317.typeCheck = v284;
    var v11318 = SwitchStatement$$1.prototype;
    v11318.addToControlFlow = v285;
    return SwitchStatement$$1;
  }
  function v281(_super$$37) {
    function v280(typeFlow$$27) {
      return JAM.call(typeFlow$$27.typeCheckWith, typeFlow$$27, [this]);
    }
    function v279(emitter$$29, tokenId$$29, startLine$$29) {
      JAM.call(emitter$$29.emitParensAndCommentsInPlace, emitter$$29, [this, true], JAM.policy.p1);
      JAM.call(emitter$$29.recordSourceMappingStart, emitter$$29, [this]);
      JAM.call(emitter$$29.writeToOutput, emitter$$29, ["with ("]);
      var v11321 = this.expr;
      if (v11321) {
        var v11319 = this.expr;
        var v18163 = TypeScript$$4.TokenID;
        var v11320 = v18163.With;
        JAM.call(emitter$$29.emitJavascript, emitter$$29, [v11319, v11320, false], JAM.policy.p1);
      }
      JAM.call(emitter$$29.writeToOutput, emitter$$29, [")"]);
      var v11322 = this.body;
      JAM.call(emitter$$29.emitJavascriptStatements, emitter$$29, [v11322, true], JAM.policy.p1);
      JAM.call(emitter$$29.recordSourceMappingEnd, emitter$$29, [this]);
      JAM.call(emitter$$29.emitParensAndCommentsInPlace, emitter$$29, [this, false], JAM.policy.p1);
      return;
    }
    function v278() {
      return true;
    }
    function WithStatement$$1(expr$$3) {
      var v18164 = TypeScript$$4.NodeType;
      var v11323 = v18164.With;
      JAM.call(_super$$37.call, _super$$37, [this, v11323], JAM.policy.p1);
      this.expr = expr$$3;
      this.withSym = null;
      return;
    }
    JAM.call(__extends, null, [WithStatement$$1, _super$$37], JAM.policy.p1);
    var v11324 = WithStatement$$1.prototype;
    v11324.isCompoundStatement = v278;
    var v11325 = WithStatement$$1.prototype;
    v11325.emit = v279;
    var v11326 = WithStatement$$1.prototype;
    v11326.typeCheck = v280;
    return WithStatement$$1;
  }
  function v277(_super$$36) {
    function v276(context$$19) {
      var v11328 = this.init;
      if (v11328) {
        var v11327 = this.init;
        JAM.call(context$$19.addContent, context$$19, [v11327]);
      }
      var loopHeader$$3 = context$$19.current;
      var v11329 = TypeScript$$4.BasicBlock;
      var loopStart$$3 = new v11329;
      var v11330 = TypeScript$$4.BasicBlock;
      var afterLoop$$3 = new v11330;
      JAM.call(loopHeader$$3.addSuccessor, loopHeader$$3, [loopStart$$3]);
      context$$19.current = loopStart$$3;
      var condBlock$$1 = null;
      var continueTarget = loopStart$$3;
      var incrBB = null;
      var v11332 = this.incr;
      if (v11332) {
        var v11331 = TypeScript$$4.BasicBlock;
        incrBB = new v11331;
        continueTarget = incrBB;
      }
      var v11336 = this.cond;
      if (v11336) {
        condBlock$$1 = context$$19.current;
        var v11333 = this.cond;
        JAM.call(context$$19.addContent, context$$19, [v11333]);
        var v11334 = TypeScript$$4.BasicBlock;
        var v27084 = new v11334;
        context$$19.current = v27084;
        var v11335 = context$$19.current;
        JAM.call(condBlock$$1.addSuccessor, condBlock$$1, [v11335]);
      }
      var targetInfo$$3 = null;
      var v11338 = this.body;
      if (v11338) {
        JAM.call(context$$19.pushStatement, context$$19, [this, continueTarget, afterLoop$$3], JAM.policy.p1);
        var v11337 = this.body;
        JAM.call(context$$19.walk, context$$19, [v11337, this], JAM.policy.p1);
        targetInfo$$3 = context$$19.popStatement();
      }
      var v11344 = this.incr;
      if (v11344) {
        var v11343 = context$$19.noContinuation;
        if (v11343) {
          var v22564 = incrBB.predecessors;
          var v18165 = v22564.length;
          var v11340 = v18165 == 0;
          if (v11340) {
            var v11339 = this.incr;
            JAM.call(context$$19.addUnreachable, context$$19, [v11339]);
          }
        } else {
          var v11341 = context$$19.current;
          JAM.call(v11341.addSuccessor, v11341, [incrBB]);
          context$$19.current = incrBB;
          var v11342 = this.incr;
          JAM.call(context$$19.addContent, context$$19, [v11342]);
        }
      }
      var loopEnd$$3 = context$$19.current;
      var v18166 = context$$19.noContinuation;
      var v11345 = !v18166;
      if (v11345) {
        JAM.call(loopEnd$$3.addSuccessor, loopEnd$$3, [loopStart$$3]);
      }
      if (condBlock$$1) {
        JAM.call(condBlock$$1.addSuccessor, condBlock$$1, [afterLoop$$3]);
        context$$19.noContinuation = false;
      }
      var v22565 = afterLoop$$3.predecessors;
      var v18167 = v22565.length;
      var v11346 = v18167 > 0;
      if (v11346) {
        context$$19.noContinuation = false;
        context$$19.current = afterLoop$$3;
      }
      var v18168 = context$$19.walker;
      var v11347 = v18168.options;
      v11347.goChildren = false;
      return;
    }
    function v275(typeFlow$$26) {
      return JAM.call(typeFlow$$26.typeCheckFor, typeFlow$$26, [this]);
    }
    function v274(emitter$$28, tokenId$$28, startLine$$28) {
      JAM.call(emitter$$28.emitParensAndCommentsInPlace, emitter$$28, [this, true], JAM.policy.p1);
      JAM.call(emitter$$28.recordSourceMappingStart, emitter$$28, [this]);
      var temp$$6 = JAM.call(emitter$$28.setInObjectLiteral, emitter$$28, [false]);
      JAM.call(emitter$$28.writeToOutput, emitter$$28, ["for("]);
      var v11354 = this.init;
      if (v11354) {
        var v22566 = this.init;
        var v18169 = v22566.nodeType;
        var v22567 = TypeScript$$4.NodeType;
        var v18170 = v22567.List;
        var v11353 = v18169 != v18170;
        if (v11353) {
          var v11348 = this.init;
          var v18171 = TypeScript$$4.TokenID;
          var v11349 = v18171.For;
          JAM.call(emitter$$28.emitJavascript, emitter$$28, [v11348, v11349, false], JAM.policy.p1);
        } else {
          var v22568 = this.init;
          var v18172 = v22568.members;
          var v11350 = v18172.length;
          JAM.call(emitter$$28.setInVarBlock, emitter$$28, [v11350]);
          var v11351 = this.init;
          var v18173 = TypeScript$$4.TokenID;
          var v11352 = v18173.For;
          JAM.call(emitter$$28.emitJavascriptList, emitter$$28, [v11351, null, v11352, false, false], JAM.policy.p1);
        }
      }
      JAM.call(emitter$$28.writeToOutput, emitter$$28, ["; "]);
      var v11355 = this.cond;
      var v18174 = TypeScript$$4.TokenID;
      var v11356 = v18174.For;
      JAM.call(emitter$$28.emitJavascript, emitter$$28, [v11355, v11356, false], JAM.policy.p1);
      JAM.call(emitter$$28.writeToOutput, emitter$$28, ["; "]);
      var v11357 = this.incr;
      var v18175 = TypeScript$$4.TokenID;
      var v11358 = v18175.For;
      JAM.call(emitter$$28.emitJavascript, emitter$$28, [v11357, v11358, false], JAM.policy.p1);
      JAM.call(emitter$$28.writeToOutput, emitter$$28, [")"]);
      var v11359 = this.body;
      JAM.call(emitter$$28.emitJavascriptStatements, emitter$$28, [v11359, true], JAM.policy.p1);
      JAM.call(emitter$$28.setInObjectLiteral, emitter$$28, [temp$$6]);
      JAM.call(emitter$$28.recordSourceMappingEnd, emitter$$28, [this]);
      JAM.call(emitter$$28.emitParensAndCommentsInPlace, emitter$$28, [this, false], JAM.policy.p1);
      return;
    }
    function v273() {
      return true;
    }
    function ForStatement$$1(init) {
      var v18176 = TypeScript$$4.NodeType;
      var v11360 = v18176.For;
      JAM.call(_super$$36.call, _super$$36, [this, v11360], JAM.policy.p1);
      this.init = init;
      return;
    }
    JAM.call(__extends, null, [ForStatement$$1, _super$$36], JAM.policy.p1);
    var v11361 = ForStatement$$1.prototype;
    v11361.isLoop = v273;
    var v11362 = ForStatement$$1.prototype;
    v11362.emit = v274;
    var v11363 = ForStatement$$1.prototype;
    v11363.typeCheck = v275;
    var v11364 = ForStatement$$1.prototype;
    v11364.addToControlFlow = v276;
    return ForStatement$$1;
  }
  function v272(_super$$35) {
    function v271(context$$18) {
      var v11366 = this.lval;
      if (v11366) {
        var v11365 = this.lval;
        JAM.call(context$$18.addContent, context$$18, [v11365]);
      }
      var v11368 = this.obj;
      if (v11368) {
        var v11367 = this.obj;
        JAM.call(context$$18.addContent, context$$18, [v11367]);
      }
      var loopHeader$$2 = context$$18.current;
      var v11369 = TypeScript$$4.BasicBlock;
      var loopStart$$2 = new v11369;
      var v11370 = TypeScript$$4.BasicBlock;
      var afterLoop$$2 = new v11370;
      JAM.call(loopHeader$$2.addSuccessor, loopHeader$$2, [loopStart$$2]);
      context$$18.current = loopStart$$2;
      var v11372 = this.body;
      if (v11372) {
        JAM.call(context$$18.pushStatement, context$$18, [this, loopStart$$2, afterLoop$$2], JAM.policy.p1);
        var v11371 = this.body;
        JAM.call(context$$18.walk, context$$18, [v11371, this], JAM.policy.p1);
        context$$18.popStatement();
      }
      var v18177 = context$$18.noContinuation;
      var v11373 = !v18177;
      if (v11373) {
        var loopEnd$$2 = context$$18.current;
        JAM.call(loopEnd$$2.addSuccessor, loopEnd$$2, [loopStart$$2]);
      }
      context$$18.current = afterLoop$$2;
      context$$18.noContinuation = false;
      JAM.call(loopHeader$$2.addSuccessor, loopHeader$$2, [afterLoop$$2]);
      var v18178 = context$$18.walker;
      var v11374 = v18178.options;
      v11374.goChildren = false;
      return;
    }
    function v270(typeFlow$$25) {
      var v22569 = typeFlow$$25.checker;
      var v18179 = v22569.styleSettings;
      var v11377 = v18179.forin;
      if (v11377) {
        var v18180 = this.isFiltered();
        var v11376 = !v18180;
        if (v11376) {
          var v18181 = typeFlow$$25.checker;
          var v11375 = v18181.errorReporter;
          JAM.call(v11375.styleError, v11375, [this, "no hasOwnProperty filter"], JAM.policy.p1);
        }
      }
      return JAM.call(typeFlow$$25.typeCheckForIn, typeFlow$$25, [this]);
    }
    function v269(emitter$$27, tokenId$$27, startLine$$27) {
      JAM.call(emitter$$27.emitParensAndCommentsInPlace, emitter$$27, [this, true], JAM.policy.p1);
      JAM.call(emitter$$27.recordSourceMappingStart, emitter$$27, [this]);
      var temp$$5 = JAM.call(emitter$$27.setInObjectLiteral, emitter$$27, [false]);
      var v11378 = this.statement;
      JAM.call(emitter$$27.recordSourceMappingStart, emitter$$27, [v11378]);
      JAM.call(emitter$$27.writeToOutput, emitter$$27, ["for("]);
      var v11379 = this.lval;
      var v18182 = TypeScript$$4.TokenID;
      var v11380 = v18182.For;
      JAM.call(emitter$$27.emitJavascript, emitter$$27, [v11379, v11380, false], JAM.policy.p1);
      JAM.call(emitter$$27.writeToOutput, emitter$$27, [" in "]);
      var v11381 = this.obj;
      var v18183 = TypeScript$$4.TokenID;
      var v11382 = v18183.For;
      JAM.call(emitter$$27.emitJavascript, emitter$$27, [v11381, v11382, false], JAM.policy.p1);
      JAM.call(emitter$$27.writeToOutput, emitter$$27, [")"]);
      var v11383 = this.statement;
      JAM.call(emitter$$27.recordSourceMappingEnd, emitter$$27, [v11383]);
      var v11384 = this.body;
      JAM.call(emitter$$27.emitJavascriptStatements, emitter$$27, [v11384, true], JAM.policy.p1);
      JAM.call(emitter$$27.setInObjectLiteral, emitter$$27, [temp$$5]);
      JAM.call(emitter$$27.recordSourceMappingEnd, emitter$$27, [this]);
      JAM.call(emitter$$27.emitParensAndCommentsInPlace, emitter$$27, [this, false], JAM.policy.p1);
      return;
    }
    function v268() {
      var v11401 = this.body;
      if (v11401) {
        var singleItem = null;
        var v22570 = this.body;
        var v18184 = v22570.nodeType;
        var v22571 = TypeScript$$4.NodeType;
        var v18185 = v22571.List;
        var v11387 = v18184 == v18185;
        if (v11387) {
          var stmts = this.body;
          var v22572 = stmts.members;
          var v18186 = v22572.length;
          var v11386 = v18186 == 1;
          if (v11386) {
            var v11385 = stmts.members;
            singleItem = v11385[0];
          }
        } else {
          singleItem = this.body;
        }
        var v11400 = singleItem !== null;
        if (v11400) {
          var v18187 = singleItem.nodeType;
          var v22573 = TypeScript$$4.NodeType;
          var v18188 = v22573.Block;
          var v11390 = v18187 == v18188;
          if (v11390) {
            var block = singleItem;
            var v22574 = block.statements;
            var v18189 = v22574 !== null;
            if (v18189) {
              var v25667 = block.statements;
              var v24740 = v25667.members;
              var v22575 = v24740.length;
              v18189 = v22575 == 1;
            }
            var v11389 = v18189;
            if (v11389) {
              var v18190 = block.statements;
              var v11388 = v18190.members;
              singleItem = v11388[0];
            }
          }
          var v18191 = singleItem.nodeType;
          var v22576 = TypeScript$$4.NodeType;
          var v18192 = v22576.If;
          var v11399 = v18191 == v18192;
          if (v11399) {
            var cond$$2 = singleItem.cond;
            var v18193 = cond$$2.nodeType;
            var v22577 = TypeScript$$4.NodeType;
            var v18194 = v22577.Call;
            var v11398 = v18193 == v18194;
            if (v11398) {
              var target$$27 = cond$$2.target;
              var v18195 = target$$27.nodeType;
              var v22578 = TypeScript$$4.NodeType;
              var v18196 = v22578.Dot;
              var v11397 = v18195 == v18196;
              if (v11397) {
                var binex = target$$27;
                var v25668 = binex.operand1;
                var v24741 = v25668.nodeType;
                var v25669 = TypeScript$$4.NodeType;
                var v24742 = v25669.Name;
                var v22579 = v24741 == v24742;
                if (v22579) {
                  var v25670 = this.obj;
                  var v24743 = v25670.nodeType;
                  var v25671 = TypeScript$$4.NodeType;
                  var v24744 = v25671.Name;
                  v22579 = v24743 == v24744;
                }
                var v18197 = v22579;
                if (v18197) {
                  var v24745 = binex.operand1;
                  var v22580 = v24745.actualText;
                  var v24746 = this.obj;
                  var v22581 = v24746.actualText;
                  v18197 = v22580 == v22581;
                }
                var v11396 = v18197;
                if (v11396) {
                  var prop$$4 = binex.operand2;
                  var v18198 = prop$$4.actualText;
                  var v11395 = v18198 == "hasOwnProperty";
                  if (v11395) {
                    var args$$2 = cond$$2.arguments;
                    var v18199 = args$$2 !== null;
                    if (v18199) {
                      var v24747 = args$$2.members;
                      var v22582 = v24747.length;
                      v18199 = v22582 == 1;
                    }
                    var v11394 = v18199;
                    if (v11394) {
                      var v11391 = args$$2.members;
                      var arg$$2 = v11391[0];
                      var v22583 = arg$$2.nodeType;
                      var v24748 = TypeScript$$4.NodeType;
                      var v22584 = v24748.Name;
                      var v18200 = v22583 == v22584;
                      if (v18200) {
                        var v24749 = this.lval;
                        var v22585 = v24749.nodeType;
                        var v24750 = TypeScript$$4.NodeType;
                        var v22586 = v24750.Name;
                        v18200 = v22585 == v22586;
                      }
                      var v11393 = v18200;
                      if (v11393) {
                        var v22587 = this.lval;
                        var v18201 = v22587.actualText;
                        var v18202 = arg$$2.actualText;
                        var v11392 = v18201 == v18202;
                        if (v11392) {
                          return true;
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      return false;
    }
    function v267() {
      return true;
    }
    function ForInStatement$$1(lval, obj$$16) {
      var v18203 = TypeScript$$4.NodeType;
      var v11402 = v18203.ForIn;
      JAM.call(_super$$35.call, _super$$35, [this, v11402], JAM.policy.p1);
      this.lval = lval;
      this.obj = obj$$16;
      var v27085 = new ASTSpan;
      this.statement = v27085;
      var v18204 = this.lval;
      if (v18204) {
        var v24751 = this.lval;
        var v22588 = v24751.nodeType;
        var v24752 = TypeScript$$4.NodeType;
        var v22589 = v24752.VarDecl;
        v18204 = v22588 == v22589;
      }
      var v11404 = v18204;
      if (v11404) {
        var v11403 = this.lval;
        var v22590 = v11403.varFlags;
        var v24753 = TypeScript$$4.VarFlags;
        var v22591 = v24753.AutoInit;
        v11403.varFlags = v22590 | v22591;
      }
      return;
    }
    JAM.call(__extends, null, [ForInStatement$$1, _super$$35], JAM.policy.p1);
    var v11405 = ForInStatement$$1.prototype;
    v11405.isLoop = v267;
    var v11406 = ForInStatement$$1.prototype;
    v11406.isFiltered = v268;
    var v11407 = ForInStatement$$1.prototype;
    v11407.emit = v269;
    var v11408 = ForInStatement$$1.prototype;
    v11408.typeCheck = v270;
    var v11409 = ForInStatement$$1.prototype;
    v11409.addToControlFlow = v271;
    return ForInStatement$$1;
  }
  function v266(_super$$34) {
    function EndCode$$1() {
      var v18205 = TypeScript$$4.NodeType;
      var v11410 = v18205.EndCode;
      JAM.call(_super$$34.call, _super$$34, [this, v11410], JAM.policy.p1);
      return;
    }
    JAM.call(__extends, null, [EndCode$$1, _super$$34], JAM.policy.p1);
    return EndCode$$1;
  }
  function v265(_super$$33) {
    function v264(typeFlow$$24) {
      return JAM.call(typeFlow$$24.typeCheckReturn, typeFlow$$24, [this]);
    }
    function v263(context$$17) {
      var v18206 = _super$$33.prototype;
      var v11411 = v18206.addToControlFlow;
      JAM.call(v11411.call, v11411, [this, context$$17], JAM.policy.p1);
      context$$17.returnStmt();
      return;
    }
    function v262(emitter$$26, tokenId$$26, startLine$$26) {
      JAM.call(emitter$$26.emitParensAndCommentsInPlace, emitter$$26, [this, true], JAM.policy.p1);
      JAM.call(emitter$$26.recordSourceMappingStart, emitter$$26, [this]);
      var temp$$4 = JAM.call(emitter$$26.setInObjectLiteral, emitter$$26, [false]);
      var v11415 = this.returnExpression;
      if (v11415) {
        JAM.call(emitter$$26.writeToOutput, emitter$$26, ["return "]);
        var v11412 = this.returnExpression;
        var v18207 = TypeScript$$4.TokenID;
        var v11413 = v18207.Semicolon;
        JAM.call(emitter$$26.emitJavascript, emitter$$26, [v11412, v11413, false], JAM.policy.p1);
        var v22592 = this.returnExpression;
        var v18208 = v22592.nodeType;
        var v22593 = TypeScript$$4.NodeType;
        var v18209 = v22593.FuncDecl;
        var v11414 = v18208 === v18209;
        if (v11414) {
          JAM.call(emitter$$26.writeToOutput, emitter$$26, [";"]);
        }
      } else {
        JAM.call(emitter$$26.writeToOutput, emitter$$26, ["return;"]);
      }
      JAM.call(emitter$$26.setInObjectLiteral, emitter$$26, [temp$$4]);
      JAM.call(emitter$$26.recordSourceMappingEnd, emitter$$26, [this]);
      JAM.call(emitter$$26.emitParensAndCommentsInPlace, emitter$$26, [this, false], JAM.policy.p1);
      return;
    }
    function ReturnStatement$$1() {
      var v18210 = TypeScript$$4.NodeType;
      var v11416 = v18210.Return;
      JAM.call(_super$$33.call, _super$$33, [this, v11416], JAM.policy.p1);
      this.returnExpression = null;
      return;
    }
    JAM.call(__extends, null, [ReturnStatement$$1, _super$$33], JAM.policy.p1);
    var v11417 = ReturnStatement$$1.prototype;
    v11417.emit = v262;
    var v11418 = ReturnStatement$$1.prototype;
    v11418.addToControlFlow = v263;
    var v11419 = ReturnStatement$$1.prototype;
    v11419.typeCheck = v264;
    return ReturnStatement$$1;
  }
  function v261(_super$$32) {
    function v260(context$$16) {
      var v11420 = this.cond;
      JAM.call(v11420.addToControlFlow, v11420, [context$$16]);
      var v11421 = TypeScript$$4.BasicBlock;
      var afterIf = new v11421;
      var beforeIf = context$$16.current;
      JAM.call(context$$16.pushStatement, context$$16, [this, beforeIf, afterIf], JAM.policy.p1);
      var hasContinuation = false;
      var v11422 = TypeScript$$4.BasicBlock;
      var v27086 = new v11422;
      context$$16.current = v27086;
      var v11423 = context$$16.current;
      JAM.call(beforeIf.addSuccessor, beforeIf, [v11423]);
      var v11424 = this.thenBod;
      JAM.call(context$$16.walk, context$$16, [v11424, this], JAM.policy.p1);
      var v18211 = context$$16.noContinuation;
      var v11426 = !v18211;
      if (v11426) {
        hasContinuation = true;
        var v11425 = context$$16.current;
        JAM.call(v11425.addSuccessor, v11425, [afterIf]);
      }
      var v11432 = this.elseBod;
      if (v11432) {
        var v11427 = TypeScript$$4.BasicBlock;
        var v27087 = new v11427;
        context$$16.current = v27087;
        context$$16.noContinuation = false;
        var v11428 = context$$16.current;
        JAM.call(beforeIf.addSuccessor, beforeIf, [v11428]);
        var v11429 = this.elseBod;
        JAM.call(context$$16.walk, context$$16, [v11429, this], JAM.policy.p1);
        var v18212 = context$$16.noContinuation;
        var v11431 = !v18212;
        if (v11431) {
          hasContinuation = true;
          var v11430 = context$$16.current;
          JAM.call(v11430.addSuccessor, v11430, [afterIf]);
        } else {
          if (hasContinuation) {
            context$$16.noContinuation = false;
          }
        }
      } else {
        JAM.call(beforeIf.addSuccessor, beforeIf, [afterIf]);
        context$$16.noContinuation = false;
        hasContinuation = true;
      }
      var targetInfo$$2 = context$$16.popStatement();
      var v22594 = afterIf.predecessors;
      var v18213 = v22594.length;
      var v11433 = v18213 > 0;
      if (v11433) {
        context$$16.noContinuation = false;
        hasContinuation = true;
      }
      if (hasContinuation) {
        context$$16.current = afterIf;
      }
      var v18214 = context$$16.walker;
      var v11434 = v18214.options;
      v11434.goChildren = false;
      return;
    }
    function v259(typeFlow$$23) {
      return JAM.call(typeFlow$$23.typeCheckIf, typeFlow$$23, [this]);
    }
    function v258(emitter$$25, tokenId$$25, startLine$$25) {
      JAM.call(emitter$$25.emitParensAndCommentsInPlace, emitter$$25, [this, true], JAM.policy.p1);
      JAM.call(emitter$$25.recordSourceMappingStart, emitter$$25, [this]);
      var temp$$3 = JAM.call(emitter$$25.setInObjectLiteral, emitter$$25, [false]);
      var v11435 = this.statement;
      JAM.call(emitter$$25.recordSourceMappingStart, emitter$$25, [v11435]);
      JAM.call(emitter$$25.writeToOutput, emitter$$25, ["if("]);
      var v11436 = this.cond;
      var v18215 = TypeScript$$4.TokenID;
      var v11437 = v18215.If;
      JAM.call(emitter$$25.emitJavascript, emitter$$25, [v11436, v11437, false], JAM.policy.p1);
      JAM.call(emitter$$25.writeToOutput, emitter$$25, [")"]);
      var v11438 = this.statement;
      JAM.call(emitter$$25.recordSourceMappingEnd, emitter$$25, [v11438]);
      var v11439 = this.thenBod;
      JAM.call(emitter$$25.emitJavascriptStatements, emitter$$25, [v11439, true], JAM.policy.p1);
      var v11443 = this.elseBod;
      if (v11443) {
        var v22595 = this.elseBod;
        var v18216 = v22595.nodeType;
        var v22596 = TypeScript$$4.NodeType;
        var v18217 = v22596.If;
        var v11442 = v18216 === v18217;
        if (v11442) {
          JAM.call(emitter$$25.writeToOutput, emitter$$25, [" else "]);
          var v11440 = this.elseBod;
          JAM.call(v11440.emit, v11440, [emitter$$25, tokenId$$25, false], JAM.policy.p1);
        } else {
          JAM.call(emitter$$25.writeToOutput, emitter$$25, [" else"]);
          var v11441 = this.elseBod;
          JAM.call(emitter$$25.emitJavascriptStatements, emitter$$25, [v11441, true], JAM.policy.p1);
        }
      }
      JAM.call(emitter$$25.setInObjectLiteral, emitter$$25, [temp$$3]);
      JAM.call(emitter$$25.recordSourceMappingEnd, emitter$$25, [this]);
      JAM.call(emitter$$25.emitParensAndCommentsInPlace, emitter$$25, [this, false], JAM.policy.p1);
      return;
    }
    function v257() {
      return true;
    }
    function IfStatement$$1(cond$$1) {
      var v18218 = TypeScript$$4.NodeType;
      var v11444 = v18218.If;
      JAM.call(_super$$32.call, _super$$32, [this, v11444], JAM.policy.p1);
      this.cond = cond$$1;
      this.elseBod = null;
      var v27088 = new ASTSpan;
      this.statement = v27088;
      return;
    }
    JAM.call(__extends, null, [IfStatement$$1, _super$$32], JAM.policy.p1);
    var v11445 = IfStatement$$1.prototype;
    v11445.isCompoundStatement = v257;
    var v11446 = IfStatement$$1.prototype;
    v11446.emit = v258;
    var v11447 = IfStatement$$1.prototype;
    v11447.typeCheck = v259;
    var v11448 = IfStatement$$1.prototype;
    v11448.addToControlFlow = v260;
    return IfStatement$$1;
  }
  function v256(_super$$31) {
    function v255(context$$15) {
      var loopHeader$$1 = context$$15.current;
      var v11449 = TypeScript$$4.BasicBlock;
      var loopStart$$1 = new v11449;
      var v11450 = TypeScript$$4.BasicBlock;
      var afterLoop$$1 = new v11450;
      JAM.call(loopHeader$$1.addSuccessor, loopHeader$$1, [loopStart$$1]);
      context$$15.current = loopStart$$1;
      var targetInfo$$1 = null;
      var v11452 = this.body;
      if (v11452) {
        JAM.call(context$$15.pushStatement, context$$15, [this, loopStart$$1, afterLoop$$1], JAM.policy.p1);
        var v11451 = this.body;
        JAM.call(context$$15.walk, context$$15, [v11451, this], JAM.policy.p1);
        targetInfo$$1 = context$$15.popStatement();
      }
      var v18219 = context$$15.noContinuation;
      var v11455 = !v18219;
      if (v11455) {
        var loopEnd$$1 = context$$15.current;
        JAM.call(loopEnd$$1.addSuccessor, loopEnd$$1, [loopStart$$1]);
        var v11453 = this.cond;
        JAM.call(context$$15.addContent, context$$15, [v11453]);
        context$$15.current = afterLoop$$1;
        JAM.call(loopEnd$$1.addSuccessor, loopEnd$$1, [afterLoop$$1]);
      } else {
        var v11454 = this.cond;
        JAM.call(context$$15.addUnreachable, context$$15, [v11454]);
      }
      var v18220 = context$$15.walker;
      var v11456 = v18220.options;
      v11456.goChildren = false;
      return;
    }
    function v254(typeFlow$$22) {
      return JAM.call(typeFlow$$22.typeCheckDoWhile, typeFlow$$22, [this]);
    }
    function v253(emitter$$24, tokenId$$24, startLine$$24) {
      JAM.call(emitter$$24.emitParensAndCommentsInPlace, emitter$$24, [this, true], JAM.policy.p1);
      JAM.call(emitter$$24.recordSourceMappingStart, emitter$$24, [this]);
      var temp$$2 = JAM.call(emitter$$24.setInObjectLiteral, emitter$$24, [false]);
      JAM.call(emitter$$24.writeToOutput, emitter$$24, ["do"]);
      var v11457 = this.body;
      JAM.call(emitter$$24.emitJavascriptStatements, emitter$$24, [v11457, true], JAM.policy.p1);
      var v11458 = this.whileAST;
      JAM.call(emitter$$24.recordSourceMappingStart, emitter$$24, [v11458]);
      JAM.call(emitter$$24.writeToOutput, emitter$$24, ["while"]);
      var v11459 = this.whileAST;
      JAM.call(emitter$$24.recordSourceMappingEnd, emitter$$24, [v11459]);
      JAM.call(emitter$$24.writeToOutput, emitter$$24, ["("]);
      var v11460 = this.cond;
      var v18221 = TypeScript$$4.TokenID;
      var v11461 = v18221.CloseParen;
      JAM.call(emitter$$24.emitJavascript, emitter$$24, [v11460, v11461, false], JAM.policy.p1);
      JAM.call(emitter$$24.writeToOutput, emitter$$24, [")"]);
      JAM.call(emitter$$24.setInObjectLiteral, emitter$$24, [temp$$2]);
      JAM.call(emitter$$24.recordSourceMappingEnd, emitter$$24, [this]);
      JAM.call(emitter$$24.writeToOutput, emitter$$24, [";"]);
      JAM.call(emitter$$24.emitParensAndCommentsInPlace, emitter$$24, [this, false], JAM.policy.p1);
      return;
    }
    function v252() {
      return true;
    }
    function DoWhileStatement$$1() {
      var v18222 = TypeScript$$4.NodeType;
      var v11462 = v18222.DoWhile;
      JAM.call(_super$$31.call, _super$$31, [this, v11462], JAM.policy.p1);
      this.body = null;
      this.whileAST = null;
      this.cond = null;
      return;
    }
    JAM.call(__extends, null, [DoWhileStatement$$1, _super$$31], JAM.policy.p1);
    var v11463 = DoWhileStatement$$1.prototype;
    v11463.isLoop = v252;
    var v11464 = DoWhileStatement$$1.prototype;
    v11464.emit = v253;
    var v11465 = DoWhileStatement$$1.prototype;
    v11465.typeCheck = v254;
    var v11466 = DoWhileStatement$$1.prototype;
    v11466.addToControlFlow = v255;
    return DoWhileStatement$$1;
  }
  function v251(_super$$30) {
    function v250(context$$14) {
      var loopHeader = context$$14.current;
      var v11467 = TypeScript$$4.BasicBlock;
      var loopStart = new v11467;
      var v11468 = TypeScript$$4.BasicBlock;
      var afterLoop = new v11468;
      JAM.call(loopHeader.addSuccessor, loopHeader, [loopStart]);
      context$$14.current = loopStart;
      var v11469 = this.cond;
      JAM.call(context$$14.addContent, context$$14, [v11469]);
      var condBlock = context$$14.current;
      var targetInfo = null;
      var v11473 = this.body;
      if (v11473) {
        var v11470 = TypeScript$$4.BasicBlock;
        var v27089 = new v11470;
        context$$14.current = v27089;
        var v11471 = context$$14.current;
        JAM.call(condBlock.addSuccessor, condBlock, [v11471]);
        JAM.call(context$$14.pushStatement, context$$14, [this, loopStart, afterLoop], JAM.policy.p1);
        var v11472 = this.body;
        JAM.call(context$$14.walk, context$$14, [v11472, this], JAM.policy.p1);
        targetInfo = context$$14.popStatement();
      }
      var v18223 = context$$14.noContinuation;
      var v11474 = !v18223;
      if (v11474) {
        var loopEnd = context$$14.current;
        JAM.call(loopEnd.addSuccessor, loopEnd, [loopStart]);
      }
      context$$14.current = afterLoop;
      JAM.call(condBlock.addSuccessor, condBlock, [afterLoop]);
      context$$14.noContinuation = false;
      var v18224 = context$$14.walker;
      var v11475 = v18224.options;
      v11475.goChildren = false;
      return;
    }
    function v249(typeFlow$$21) {
      return JAM.call(typeFlow$$21.typeCheckWhile, typeFlow$$21, [this]);
    }
    function v248(emitter$$23, tokenId$$23, startLine$$23) {
      JAM.call(emitter$$23.emitParensAndCommentsInPlace, emitter$$23, [this, true], JAM.policy.p1);
      JAM.call(emitter$$23.recordSourceMappingStart, emitter$$23, [this]);
      var temp$$1 = JAM.call(emitter$$23.setInObjectLiteral, emitter$$23, [false]);
      JAM.call(emitter$$23.writeToOutput, emitter$$23, ["while("]);
      var v11476 = this.cond;
      var v18225 = TypeScript$$4.TokenID;
      var v11477 = v18225.While;
      JAM.call(emitter$$23.emitJavascript, emitter$$23, [v11476, v11477, false], JAM.policy.p1);
      JAM.call(emitter$$23.writeToOutput, emitter$$23, [")"]);
      var v11478 = this.body;
      JAM.call(emitter$$23.emitJavascriptStatements, emitter$$23, [v11478, false], JAM.policy.p1);
      JAM.call(emitter$$23.setInObjectLiteral, emitter$$23, [temp$$1]);
      JAM.call(emitter$$23.recordSourceMappingEnd, emitter$$23, [this]);
      JAM.call(emitter$$23.emitParensAndCommentsInPlace, emitter$$23, [this, false], JAM.policy.p1);
      return;
    }
    function v247() {
      return true;
    }
    function WhileStatement$$1(cond) {
      var v18226 = TypeScript$$4.NodeType;
      var v11479 = v18226.While;
      JAM.call(_super$$30.call, _super$$30, [this, v11479], JAM.policy.p1);
      this.cond = cond;
      this.body = null;
      return;
    }
    JAM.call(__extends, null, [WhileStatement$$1, _super$$30], JAM.policy.p1);
    var v11480 = WhileStatement$$1.prototype;
    v11480.isLoop = v247;
    var v11481 = WhileStatement$$1.prototype;
    v11481.emit = v248;
    var v11482 = WhileStatement$$1.prototype;
    v11482.typeCheck = v249;
    var v11483 = WhileStatement$$1.prototype;
    v11483.addToControlFlow = v250;
    return WhileStatement$$1;
  }
  function v246(_super$$29) {
    function v245(emitter$$22, tokenId$$22, startLine$$22) {
      JAM.call(emitter$$22.emitParensAndCommentsInPlace, emitter$$22, [this, true], JAM.policy.p1);
      JAM.call(emitter$$22.recordSourceMappingStart, emitter$$22, [this]);
      var v18227 = this.nodeType;
      var v22597 = TypeScript$$4.NodeType;
      var v18228 = v22597.Break;
      var v11484 = v18227 == v18228;
      if (v11484) {
        JAM.call(emitter$$22.writeToOutput, emitter$$22, ["break"]);
      } else {
        JAM.call(emitter$$22.writeToOutput, emitter$$22, ["continue"]);
      }
      var v11486 = this.target;
      if (v11486) {
        var v18229 = this.target;
        var v11485 = " " + v18229;
        JAM.call(emitter$$22.writeToOutput, emitter$$22, [v11485]);
      }
      JAM.call(emitter$$22.recordSourceMappingEnd, emitter$$22, [this]);
      JAM.call(emitter$$22.writeToOutput, emitter$$22, [";"]);
      JAM.call(emitter$$22.emitParensAndCommentsInPlace, emitter$$22, [this, false], JAM.policy.p1);
      return;
    }
    function v244(context$$13) {
      var v18230 = _super$$29.prototype;
      var v11487 = v18230.addToControlFlow;
      JAM.call(v11487.call, v11487, [this, context$$13], JAM.policy.p1);
      var v11488 = this.resolvedTarget;
      var v18231 = this.nodeType;
      var v22598 = TypeScript$$4.NodeType;
      var v18232 = v22598.Continue;
      var v11489 = v18231 == v18232;
      JAM.call(context$$13.unconditionalBranch, context$$13, [v11488, v11489], JAM.policy.p1);
      return;
    }
    function v243(parser, stmt$$2) {
      var v11490 = stmt$$2.isLoop();
      if (v11490) {
        this.resolvedTarget = stmt$$2;
        return;
      }
      var v18233 = this.nodeType;
      var v22599 = TypeScript$$4.NodeType;
      var v18234 = v22599.Continue;
      var v11492 = v18233 === v18234;
      if (v11492) {
        JAM.call(parser.reportParseError, parser, ["continue statement applies only to loops"]);
      } else {
        var v22600 = stmt$$2.nodeType;
        var v24754 = TypeScript$$4.NodeType;
        var v22601 = v24754.Switch;
        var v18235 = v22600 == v22601;
        var v22602 = !v18235;
        if (v22602) {
          v18235 = this.target;
        }
        var v11491 = v18235;
        if (v11491) {
          this.resolvedTarget = stmt$$2;
        } else {
          JAM.call(parser.reportParseError, parser, ["break statement with no label can apply only to a loop or switch statement"]);
        }
      }
      return;
    }
    function v242() {
      return this.target;
    }
    function Jump$$1(nodeType$$11) {
      JAM.call(_super$$29.call, _super$$29, [this, nodeType$$11], JAM.policy.p1);
      this.target = null;
      this.resolvedTarget = null;
      return;
    }
    JAM.call(__extends, null, [Jump$$1, _super$$29], JAM.policy.p1);
    var v11493 = Jump$$1.prototype;
    v11493.hasExplicitTarget = v242;
    var v11494 = Jump$$1.prototype;
    v11494.setResolvedTarget = v243;
    var v11495 = Jump$$1.prototype;
    v11495.addToControlFlow = v244;
    var v11496 = Jump$$1.prototype;
    v11496.emit = v245;
    return Jump$$1;
  }
  function v241(_super$$28) {
    function v240(typeFlow$$20) {
      var v24755 = typeFlow$$20.checker;
      var v22603 = v24755.styleSettings;
      var v18236 = v22603.emptyBlocks;
      var v11499 = !v18236;
      if (v11499) {
        var v22604 = this.statements;
        var v18237 = v22604 === null;
        var v22606 = !v18237;
        if (v22606) {
          var v25672 = this.statements;
          var v24756 = v25672.members;
          var v22605 = v24756.length;
          v18237 = v22605 == 0;
        }
        var v11498 = v18237;
        if (v11498) {
          var v18238 = typeFlow$$20.checker;
          var v11497 = v18238.errorReporter;
          JAM.call(v11497.styleError, v11497, [this, "empty block"], JAM.policy.p1);
        }
      }
      var v11500 = this.statements;
      JAM.call(typeFlow$$20.typeCheck, typeFlow$$20, [v11500]);
      return this;
    }
    function v239(context$$12) {
      var v11501 = TypeScript$$4.BasicBlock;
      var afterIfNeeded = new v11501;
      var v11502 = context$$12.current;
      JAM.call(context$$12.pushStatement, context$$12, [this, v11502, afterIfNeeded], JAM.policy.p1);
      var v11504 = this.statements;
      if (v11504) {
        var v11503 = this.statements;
        JAM.call(context$$12.walk, context$$12, [v11503, this], JAM.policy.p1);
      }
      var v18239 = context$$12.walker;
      var v11505 = v18239.options;
      v11505.goChildren = false;
      context$$12.popStatement();
      var v22607 = afterIfNeeded.predecessors;
      var v18240 = v22607.length;
      var v11507 = v18240 > 0;
      if (v11507) {
        var v11506 = context$$12.current;
        JAM.call(v11506.addSuccessor, v11506, [afterIfNeeded]);
        context$$12.current = afterIfNeeded;
      }
      return;
    }
    function v238(emitter$$21, tokenId$$21, startLine$$21) {
      JAM.call(emitter$$21.emitParensAndCommentsInPlace, emitter$$21, [this, true], JAM.policy.p1);
      JAM.call(emitter$$21.recordSourceMappingStart, emitter$$21, [this]);
      var v11510 = this.isStatementBlock;
      if (v11510) {
        JAM.call(emitter$$21.writeLineToOutput, emitter$$21, [" {"]);
        var v11508 = emitter$$21.indenter;
        v11508.increaseIndent();
      } else {
        var v22608 = this.statements;
        var v18241 = v22608.members;
        var v11509 = v18241.length;
        JAM.call(emitter$$21.setInVarBlock, emitter$$21, [v11509]);
      }
      var temp = JAM.call(emitter$$21.setInObjectLiteral, emitter$$21, [false]);
      var v11513 = this.statements;
      if (v11513) {
        var v11511 = this.statements;
        var v18242 = TypeScript$$4.TokenID;
        var v11512 = v18242.Semicolon;
        JAM.call(emitter$$21.emitJavascriptList, emitter$$21, [v11511, null, v11512, true, false], JAM.policy.p1);
      }
      var v11515 = this.isStatementBlock;
      if (v11515) {
        var v11514 = emitter$$21.indenter;
        v11514.decreaseIndent();
        emitter$$21.emitIndent();
        JAM.call(emitter$$21.writeToOutput, emitter$$21, ["}"]);
      }
      JAM.call(emitter$$21.setInObjectLiteral, emitter$$21, [temp]);
      JAM.call(emitter$$21.recordSourceMappingEnd, emitter$$21, [this]);
      JAM.call(emitter$$21.emitParensAndCommentsInPlace, emitter$$21, [this, false], JAM.policy.p1);
      return;
    }
    function Block$$1(statements, isStatementBlock) {
      var v18243 = TypeScript$$4.NodeType;
      var v11516 = v18243.Block;
      JAM.call(_super$$28.call, _super$$28, [this, v11516], JAM.policy.p1);
      this.statements = statements;
      this.isStatementBlock = isStatementBlock;
      return;
    }
    JAM.call(__extends, null, [Block$$1, _super$$28], JAM.policy.p1);
    var v11517 = Block$$1.prototype;
    v11517.emit = v238;
    var v11518 = Block$$1.prototype;
    v11518.addToControlFlow = v239;
    var v11519 = Block$$1.prototype;
    v11519.typeCheck = v240;
    return Block$$1;
  }
  function v237(_super$$27) {
    function v236(context$$11) {
      var beforeBB = context$$11.current;
      var v11520 = TypeScript$$4.BasicBlock;
      var bb = new v11520;
      context$$11.current = bb;
      JAM.call(beforeBB.addSuccessor, beforeBB, [bb]);
      return;
    }
    function v235(typeFlow$$19) {
      var v11521 = this.labels;
      JAM.call(typeFlow$$19.typeCheck, typeFlow$$19, [v11521]);
      var v11522 = this.stmt;
      var v27090 = JAM.call(v11522.typeCheck, v11522, [typeFlow$$19]);
      this.stmt = v27090;
      return this;
    }
    function v234(emitter$$20, tokenId$$20, startLine$$20) {
      JAM.call(emitter$$20.emitParensAndCommentsInPlace, emitter$$20, [this, true], JAM.policy.p1);
      JAM.call(emitter$$20.recordSourceMappingStart, emitter$$20, [this]);
      var v11526 = this.labels;
      if (v11526) {
        var v18244 = this.labels;
        var v11523 = v18244.members;
        var labelsLen = v11523.length;
        var i$$18 = 0;
        var v11525 = i$$18 < labelsLen;
        for (;v11525;) {
          var v22609 = this.labels;
          var v18245 = v22609.members;
          var v11524 = v18245[i$$18];
          JAM.call(v11524.emit, v11524, [emitter$$20, tokenId$$20, startLine$$20], JAM.policy.p1);
          i$$18++;
          v11525 = i$$18 < labelsLen;
        }
      }
      var v11527 = this.stmt;
      JAM.call(v11527.emit, v11527, [emitter$$20, tokenId$$20, true], JAM.policy.p1);
      JAM.call(emitter$$20.recordSourceMappingEnd, emitter$$20, [this]);
      JAM.call(emitter$$20.emitParensAndCommentsInPlace, emitter$$20, [this, false], JAM.policy.p1);
      return;
    }
    function LabeledStatement$$1(labels, stmt$$1) {
      var v18246 = TypeScript$$4.NodeType;
      var v11528 = v18246.LabeledStatement;
      JAM.call(_super$$27.call, _super$$27, [this, v11528], JAM.policy.p1);
      this.labels = labels;
      this.stmt = stmt$$1;
      return;
    }
    JAM.call(__extends, null, [LabeledStatement$$1, _super$$27], JAM.policy.p1);
    var v11529 = LabeledStatement$$1.prototype;
    v11529.emit = v234;
    var v11530 = LabeledStatement$$1.prototype;
    v11530.typeCheck = v235;
    var v11531 = LabeledStatement$$1.prototype;
    v11531.addToControlFlow = v236;
    return LabeledStatement$$1;
  }
  function v233(_super$$26) {
    function v232(typeFlow$$18) {
      this.type = typeFlow$$18.voidType;
      return this;
    }
    function v231() {
      return this.isLoop();
    }
    function v230() {
      return true;
    }
    function v229() {
      return false;
    }
    function Statement$$1(nodeType$$10) {
      JAM.call(_super$$26.call, _super$$26, [this, nodeType$$10], JAM.policy.p1);
      var v18247 = this.flags;
      var v22610 = TypeScript$$4.ASTFlags;
      var v18248 = v22610.IsStatement;
      this.flags = v18247 | v18248;
      return;
    }
    JAM.call(__extends, null, [Statement$$1, _super$$26], JAM.policy.p1);
    var v11532 = Statement$$1.prototype;
    v11532.isLoop = v229;
    var v11533 = Statement$$1.prototype;
    v11533.isStatementOrExpression = v230;
    var v11534 = Statement$$1.prototype;
    v11534.isCompoundStatement = v231;
    var v11535 = Statement$$1.prototype;
    v11535.typeCheck = v232;
    return Statement$$1;
  }
  function v228(_super$$25) {
    function v227(emitter$$19, tokenId$$19, startLine$$19) {
      return;
    }
    function v226(typeFlow$$17) {
      return JAM.call(typeFlow$$17.typeCheckInterface, typeFlow$$17, [this]);
    }
    function InterfaceDeclaration$$1(name$$38, members$$4, extendsList$$2, implementsList$$2) {
      var v18249 = TypeScript$$4.NodeType;
      var v11536 = v18249.InterfaceDeclaration;
      JAM.call(_super$$25.call, _super$$25, [this, v11536, name$$38, extendsList$$2, implementsList$$2, members$$4], JAM.policy.p1);
      return;
    }
    JAM.call(__extends, null, [InterfaceDeclaration$$1, _super$$25], JAM.policy.p1);
    var v11537 = InterfaceDeclaration$$1.prototype;
    v11537.typeCheck = v226;
    var v11538 = InterfaceDeclaration$$1.prototype;
    v11538.emit = v227;
    return InterfaceDeclaration$$1;
  }
  function v225(_super$$24) {
    function v224(emitter$$18, tokenId$$18, startLine$$18) {
      JAM.call(emitter$$18.emitJavascriptClass, emitter$$18, [this]);
      return;
    }
    function v223(typeFlow$$16) {
      return JAM.call(typeFlow$$16.typeCheckClass, typeFlow$$16, [this]);
    }
    function ClassDeclaration$$1(name$$37, members$$3, extendsList$$1, implementsList$$1) {
      var v18250 = TypeScript$$4.NodeType;
      var v11539 = v18250.ClassDeclaration;
      JAM.call(_super$$24.call, _super$$24, [this, v11539, name$$37, extendsList$$1, implementsList$$1, members$$3], JAM.policy.p1);
      this.knownMemberNames = {};
      this.constructorDecl = null;
      this.constructorNestingLevel = 0;
      this.endingToken = null;
      return;
    }
    JAM.call(__extends, null, [ClassDeclaration$$1, _super$$24], JAM.policy.p1);
    var v11540 = ClassDeclaration$$1.prototype;
    v11540.typeCheck = v223;
    var v11541 = ClassDeclaration$$1.prototype;
    v11541.emit = v224;
    return ClassDeclaration$$1;
  }
  function v222(_super$$23) {
    function v221() {
      var v11542 = this.varFlags;
      var v18251 = TypeScript$$4.VarFlags;
      var v11543 = v18251.Ambient;
      return JAM.call(TypeScript$$4.hasFlag, TypeScript$$4, [v11542, v11543], JAM.policy.p1);
    }
    function v220() {
      var v11544 = this.varFlags;
      var v18252 = TypeScript$$4.VarFlags;
      var v11545 = v18252.Exported;
      return JAM.call(TypeScript$$4.hasFlag, TypeScript$$4, [v11544, v11545], JAM.policy.p1);
    }
    function TypeDeclaration$$1(nodeType$$9, name$$36, extendsList, implementsList, members$$2) {
      JAM.call(_super$$23.call, _super$$23, [this, nodeType$$9, name$$36, members$$2], JAM.policy.p1);
      this.extendsList = extendsList;
      this.implementsList = implementsList;
      var v11546 = TypeScript$$4.VarFlags;
      this.varFlags = v11546.None;
      return;
    }
    JAM.call(__extends, null, [TypeDeclaration$$1, _super$$23], JAM.policy.p1);
    var v11547 = TypeDeclaration$$1.prototype;
    v11547.isExported = v220;
    var v11548 = TypeDeclaration$$1.prototype;
    v11548.isAmbient = v221;
    return TypeDeclaration$$1;
  }
  function v219(_super$$22) {
    function v218(emitter$$17, tokenId$$17, startLine$$17) {
      var v22611 = this.modFlags;
      var v24757 = TypeScript$$4.ModuleFlags;
      var v22612 = v24757.ShouldEmitModuleDecl;
      var v18253 = JAM.call(TypeScript$$4.hasFlag, TypeScript$$4, [v22611, v22612], JAM.policy.p1);
      var v11549 = !v18253;
      if (v11549) {
        JAM.call(emitter$$17.emitParensAndCommentsInPlace, emitter$$17, [this, true], JAM.policy.p1);
        JAM.call(emitter$$17.recordSourceMappingStart, emitter$$17, [this]);
        JAM.call(emitter$$17.emitJavascriptModule, emitter$$17, [this]);
        JAM.call(emitter$$17.recordSourceMappingEnd, emitter$$17, [this]);
        JAM.call(emitter$$17.emitParensAndCommentsInPlace, emitter$$17, [this, false], JAM.policy.p1);
      }
      return;
    }
    function v217(typeFlow$$15) {
      return JAM.call(typeFlow$$15.typeCheckModule, typeFlow$$15, [this]);
    }
    function v216() {
      var v18254 = this.modFlags;
      var v24758 = TypeScript$$4.ModuleFlags;
      var v22613 = v24758.ShouldEmitModuleDecl;
      var v18255 = ~v22613;
      this.modFlags = v18254 & v18255;
      return;
    }
    function v215() {
      var v11550 = this.modFlags;
      var v18256 = TypeScript$$4.ModuleFlags;
      var v11551 = v18256.IsEnum;
      return JAM.call(TypeScript$$4.hasFlag, TypeScript$$4, [v11550, v11551], JAM.policy.p1);
    }
    function v214() {
      var v11552 = this.modFlags;
      var v18257 = TypeScript$$4.ModuleFlags;
      var v11553 = v18257.Ambient;
      return JAM.call(TypeScript$$4.hasFlag, TypeScript$$4, [v11552, v11553], JAM.policy.p1);
    }
    function v213() {
      var v11554 = this.modFlags;
      var v18258 = TypeScript$$4.ModuleFlags;
      var v11555 = v18258.Exported;
      return JAM.call(TypeScript$$4.hasFlag, TypeScript$$4, [v11554, v11555], JAM.policy.p1);
    }
    function ModuleDeclaration$$1(name$$35, members$$1, vars$$2, scopes$$2, endingToken) {
      var v18259 = TypeScript$$4.NodeType;
      var v11556 = v18259.ModuleDeclaration;
      JAM.call(_super$$22.call, _super$$22, [this, v11556, name$$35, members$$1], JAM.policy.p1);
      this.endingToken = endingToken;
      var v11557 = TypeScript$$4.ModuleFlags;
      this.modFlags = v11557.ShouldEmitModuleDecl;
      this.amdDependencies = [];
      this.containsUnicodeChar = false;
      this.containsUnicodeCharInComment = false;
      this.vars = vars$$2;
      this.scopes = scopes$$2;
      var v11558 = this.name;
      this.prettyName = v11558.actualText;
      return;
    }
    JAM.call(__extends, null, [ModuleDeclaration$$1, _super$$22], JAM.policy.p1);
    var v11559 = ModuleDeclaration$$1.prototype;
    v11559.isExported = v213;
    var v11560 = ModuleDeclaration$$1.prototype;
    v11560.isAmbient = v214;
    var v11561 = ModuleDeclaration$$1.prototype;
    v11561.isEnum = v215;
    var v11562 = ModuleDeclaration$$1.prototype;
    v11562.recordNonInterface = v216;
    var v11563 = ModuleDeclaration$$1.prototype;
    v11563.typeCheck = v217;
    var v11564 = ModuleDeclaration$$1.prototype;
    v11564.emit = v218;
    return ModuleDeclaration$$1;
  }
  function v212(_super$$21) {
    function v211() {
      return true;
    }
    function NamedDeclaration$$1(nodeType$$8, name$$34, members) {
      JAM.call(_super$$21.call, _super$$21, [this, nodeType$$8], JAM.policy.p1);
      this.name = name$$34;
      this.members = members;
      this.leftCurlyCount = 0;
      this.rightCurlyCount = 0;
      return;
    }
    JAM.call(__extends, null, [NamedDeclaration$$1, _super$$21], JAM.policy.p1);
    var v11565 = NamedDeclaration$$1.prototype;
    v11565.isDeclaration = v211;
    return NamedDeclaration$$1;
  }
  function v210(_super$$20) {
    function v209(symbol$$1) {
      var i$$17 = 0;
      var v22614 = this.externallyVisibleImportedSymbols;
      var v18260 = v22614.length;
      var v11567 = i$$17 < v18260;
      for (;v11567;) {
        var v22615 = this.externallyVisibleImportedSymbols;
        var v18261 = v22615[i$$17];
        var v11566 = v18261 == symbol$$1;
        if (v11566) {
          return true;
        }
        i$$17++;
        var v22616 = this.externallyVisibleImportedSymbols;
        var v18262 = v22616.length;
        v11567 = i$$17 < v18262;
      }
      return false;
    }
    function v208(symbol, checker) {
      var v11568 = JAM.call(this.isExternallyVisibleSymbol, this, [symbol]);
      if (v11568) {
        return;
      }
      var v24759 = symbol.getType();
      var v22617 = v24759.symbol;
      var v18263 = JAM.call(v22617.isExternallyVisible, v22617, [checker]);
      var v11574 = !v18263;
      if (v11574) {
        var quotes = "";
        var v18264 = symbol.getType();
        var v11569 = v18264.symbol;
        var moduleName = v11569.prettyName;
        var v18265 = JAM.call(TypeScript$$4.isQuoted, TypeScript$$4, [moduleName]);
        var v11570 = !v18265;
        if (v11570) {
          quotes = "'";
        }
        var v11571 = checker.errorReporter;
        var v11572 = symbol.declAST;
        var v22618 = "Externally visible import statement uses non exported module " + quotes;
        var v18266 = v22618 + moduleName;
        var v11573 = v18266 + quotes;
        JAM.call(v11571.simpleError, v11571, [v11572, v11573], JAM.policy.p1);
      }
      var v11575 = this.externallyVisibleImportedSymbols;
      JAM.call(v11575.push, v11575, [symbol]);
      return;
    }
    function v207(emitter$$16, tokenId$$16, startLine$$16) {
      var v18267 = emitter$$16.emitOptions;
      var v11581 = JAM.call(this.emitRequired, this, [v18267]);
      if (v11581) {
        var v11576 = this.bod;
        JAM.call(emitter$$16.emitParensAndCommentsInPlace, emitter$$16, [v11576, true], JAM.policy.p1);
        var v11577 = this.bod;
        var v18268 = TypeScript$$4.TokenID;
        var v11578 = v18268.Semicolon;
        var v11579 = this.requiresExtendsBlock;
        JAM.call(emitter$$16.emitJavascriptList, emitter$$16, [v11577, null, v11578, true, false, true, v11579], JAM.policy.p1);
        var v11580 = this.bod;
        JAM.call(emitter$$16.emitParensAndCommentsInPlace, emitter$$16, [v11580, false], JAM.policy.p1);
      }
      return;
    }
    function v206(emitOptions) {
      var v18269 = this.cachedEmitRequired;
      var v11582 = v18269 != undefined;
      if (v11582) {
        return this.cachedEmitRequired;
      }
      var v24760 = this.isDeclareFile;
      var v22619 = !v24760;
      if (v22619) {
        var v24761 = this.isResident;
        v22619 = !v24761;
      }
      var v18270 = v22619;
      if (v18270) {
        v18270 = this.bod;
      }
      var v11596 = v18270;
      if (v11596) {
        var i$$16 = 0;
        var v18271 = this.bod;
        var v11583 = v18271.members;
        var len$$4 = v11583.length;
        var v11594 = i$$16 < len$$4;
        for (;v11594;) {
          var v18272 = this.bod;
          var v11584 = v18272.members;
          var stmt = v11584[i$$16];
          var v18273 = stmt.nodeType;
          var v22620 = TypeScript$$4.NodeType;
          var v18274 = v22620.ModuleDeclaration;
          var v11593 = v18273 == v18274;
          if (v11593) {
            var v22621 = stmt.modFlags;
            var v25673 = TypeScript$$4.ModuleFlags;
            var v24762 = v25673.ShouldEmitModuleDecl;
            var v25674 = TypeScript$$4.ModuleFlags;
            var v24763 = v25674.Ambient;
            var v22622 = v24762 | v24763;
            var v18275 = JAM.call(TypeScript$$4.hasFlag, TypeScript$$4, [v22621, v22622], JAM.policy.p1);
            var v11585 = !v18275;
            if (v11585) {
              return JAM.call(this.setCachedEmitRequired, this, [true]);
            }
          } else {
            var v18276 = stmt.nodeType;
            var v22623 = TypeScript$$4.NodeType;
            var v18277 = v22623.ClassDeclaration;
            var v11592 = v18276 == v18277;
            if (v11592) {
              var v22624 = stmt.varFlags;
              var v24764 = TypeScript$$4.VarFlags;
              var v22625 = v24764.Ambient;
              var v18278 = JAM.call(TypeScript$$4.hasFlag, TypeScript$$4, [v22624, v22625], JAM.policy.p1);
              var v11586 = !v18278;
              if (v11586) {
                return JAM.call(this.setCachedEmitRequired, this, [true]);
              }
            } else {
              var v18279 = stmt.nodeType;
              var v22626 = TypeScript$$4.NodeType;
              var v18280 = v22626.VarDecl;
              var v11591 = v18279 == v18280;
              if (v11591) {
                var v22627 = stmt.varFlags;
                var v24765 = TypeScript$$4.VarFlags;
                var v22628 = v24765.Ambient;
                var v18281 = JAM.call(TypeScript$$4.hasFlag, TypeScript$$4, [v22627, v22628], JAM.policy.p1);
                var v11587 = !v18281;
                if (v11587) {
                  return JAM.call(this.setCachedEmitRequired, this, [true]);
                }
              } else {
                var v18282 = stmt.nodeType;
                var v22629 = TypeScript$$4.NodeType;
                var v18283 = v22629.FuncDecl;
                var v11590 = v18282 == v18283;
                if (v11590) {
                  var v18284 = stmt.isSignature();
                  var v11588 = !v18284;
                  if (v11588) {
                    return JAM.call(this.setCachedEmitRequired, this, [true]);
                  }
                } else {
                  var v22630 = stmt.nodeType;
                  var v24766 = TypeScript$$4.NodeType;
                  var v22631 = v24766.InterfaceDeclaration;
                  var v18285 = v22630 != v22631;
                  if (v18285) {
                    var v22632 = stmt.nodeType;
                    var v24767 = TypeScript$$4.NodeType;
                    var v22633 = v24767.Empty;
                    v18285 = v22632 != v22633;
                  }
                  var v11589 = v18285;
                  if (v11589) {
                    return JAM.call(this.setCachedEmitRequired, this, [true]);
                  }
                }
              }
            }
          }
          i$$16++;
          v11594 = i$$16 < len$$4;
        }
        var v18286 = emitOptions.emitComments;
        if (v18286) {
          var v25675 = this.bod;
          var v24768 = v25675.preComments;
          if (v24768) {
            var v26255 = this.bod;
            var v26073 = v26255.preComments;
            var v25676 = v26073.length;
            v24768 = v25676 > 0;
          }
          var v22634 = v24768;
          var v24770 = !v22634;
          if (v24770) {
            var v25677 = this.bod;
            var v24769 = v25677.postComments;
            if (v24769) {
              var v26256 = this.bod;
              var v26074 = v26256.postComments;
              var v25678 = v26074.length;
              v24769 = v25678 > 0;
            }
            v22634 = v24769;
          }
          v18286 = v22634;
        }
        var v11595 = v18286;
        if (v11595) {
          return JAM.call(this.setCachedEmitRequired, this, [true]);
        }
      }
      return JAM.call(this.setCachedEmitRequired, this, [false]);
    }
    function v205() {
      return "Script";
    }
    function v204(typeFlow$$14) {
      return JAM.call(typeFlow$$14.typeCheckScript, typeFlow$$14, [this]);
    }
    function v203(value$$29) {
      this.cachedEmitRequired = value$$29;
      return this.cachedEmitRequired;
    }
    function Script$$1(vars$$1, scopes$$1) {
      var v11597 = JAM.new(Identifier, ["script"]);
      var v18287 = TypeScript$$4.NodeType;
      var v11598 = v18287.Script;
      JAM.call(_super$$20.call, _super$$20, [this, v11597, null, false, null, vars$$1, scopes$$1, null, v11598], JAM.policy.p1);
      this.locationInfo = null;
      this.referencedFiles = [];
      this.requiresGlobal = false;
      this.requiresExtendsBlock = false;
      this.isResident = false;
      this.isDeclareFile = false;
      this.hasBeenTypeChecked = false;
      this.topLevelMod = null;
      this.leftCurlyCount = 0;
      this.rightCurlyCount = 0;
      this.containsUnicodeChar = false;
      this.containsUnicodeCharInComment = false;
      this.externallyVisibleImportedSymbols = [];
      this.vars = vars$$1;
      this.scopes = scopes$$1;
      return;
    }
    JAM.call(__extends, null, [Script$$1, _super$$20], JAM.policy.p1);
    var v11599 = Script$$1.prototype;
    v11599.setCachedEmitRequired = v203;
    var v11600 = Script$$1.prototype;
    v11600.typeCheck = v204;
    var v11601 = Script$$1.prototype;
    v11601.treeViewLabel = v205;
    var v11602 = Script$$1.prototype;
    v11602.emitRequired = v206;
    var v11603 = Script$$1.prototype;
    v11603.emit = v207;
    var v11604 = Script$$1.prototype;
    v11604.AddExternallyVisibleImportedSymbol = v208;
    var v11605 = Script$$1.prototype;
    v11605.isExternallyVisibleSymbol = v209;
    return Script$$1;
  }
  function v202() {
    function LocationInfo$$1(filename, lineMap, unitIndex) {
      this.filename = filename;
      this.lineMap = lineMap;
      this.unitIndex = unitIndex;
      return;
    }
    return LocationInfo$$1;
  }
  function v201(_super$$19) {
    function v200() {
      var v18288 = this.fncFlags;
      var v22635 = TypeScript$$4.FncFlags;
      var v18289 = v22635.Signature;
      var v11606 = v18288 & v18289;
      var v18290 = TypeScript$$4.FncFlags;
      var v11607 = v18290.None;
      return v11606 != v11607;
    }
    function v199() {
      var v11608 = TypeScript$$4.FncFlags;
      this.fncFlags = v11608.None;
      return;
    }
    function v198() {
      var v18291 = this.name;
      var v11610 = v18291 == null;
      if (v11610) {
        return "funcExpr";
      } else {
        var v18292 = this.name;
        var v11609 = v18292.actualText;
        return "func: " + v11609;
      }
      return;
    }
    function v197() {
      var v11611 = this.fncFlags;
      var v18293 = TypeScript$$4.FncFlags;
      var v11612 = v18293.Static;
      return JAM.call(TypeScript$$4.hasFlag, TypeScript$$4, [v11611, v11612], JAM.policy.p1);
    }
    function v196() {
      var v11613 = this.fncFlags;
      var v18294 = TypeScript$$4.FncFlags;
      var v11614 = v18294.Public;
      return JAM.call(TypeScript$$4.hasFlag, TypeScript$$4, [v11613, v11614], JAM.policy.p1);
    }
    function v195() {
      var v11615 = this.fncFlags;
      var v18295 = TypeScript$$4.FncFlags;
      var v11616 = v18295.Private;
      return JAM.call(TypeScript$$4.hasFlag, TypeScript$$4, [v11615, v11616], JAM.policy.p1);
    }
    function v194() {
      var v11617 = this.fncFlags;
      var v18296 = TypeScript$$4.FncFlags;
      var v11618 = v18296.Exported;
      return JAM.call(TypeScript$$4.hasFlag, TypeScript$$4, [v11617, v11618], JAM.policy.p1);
    }
    function v193() {
      var v11619 = this.fncFlags;
      var v18297 = TypeScript$$4.FncFlags;
      var v11620 = v18297.Ambient;
      return JAM.call(TypeScript$$4.hasFlag, TypeScript$$4, [v11619, v11620], JAM.policy.p1);
    }
    function v192() {
      var v11621 = this.fncFlags;
      var v18298 = TypeScript$$4.FncFlags;
      var v11622 = v18298.SetAccessor;
      return JAM.call(TypeScript$$4.hasFlag, TypeScript$$4, [v11621, v11622], JAM.policy.p1);
    }
    function v191() {
      var v11623 = this.fncFlags;
      var v18299 = TypeScript$$4.FncFlags;
      var v11624 = v18299.GetAccessor;
      return JAM.call(TypeScript$$4.hasFlag, TypeScript$$4, [v11623, v11624], JAM.policy.p1);
    }
    function v190() {
      var v18300 = this.fncFlags;
      var v22636 = TypeScript$$4.FncFlags;
      var v18301 = v22636.GetAccessor;
      var v11625 = JAM.call(TypeScript$$4.hasFlag, TypeScript$$4, [v18300, v18301], JAM.policy.p1);
      var v18304 = !v11625;
      if (v18304) {
        var v18302 = this.fncFlags;
        var v22637 = TypeScript$$4.FncFlags;
        var v18303 = v22637.SetAccessor;
        v11625 = JAM.call(TypeScript$$4.hasFlag, TypeScript$$4, [v18302, v18303], JAM.policy.p1);
      }
      return v11625;
    }
    function v189() {
      var v11626 = this.name;
      return v11626 === null;
    }
    function v188() {
      var v18305 = this.isCallMember();
      var v22638 = !v18305;
      if (v22638) {
        v18305 = this.isIndexerMember();
      }
      var v11627 = v18305;
      var v18306 = !v11627;
      if (v18306) {
        v11627 = this.isConstructMember();
      }
      return v11627;
    }
    function v187() {
      var v11628 = this.fncFlags;
      var v18307 = TypeScript$$4.FncFlags;
      var v11629 = v18307.IndexerMember;
      return JAM.call(TypeScript$$4.hasFlag, TypeScript$$4, [v11628, v11629], JAM.policy.p1);
    }
    function v186() {
      var v11630 = this.fncFlags;
      var v18308 = TypeScript$$4.FncFlags;
      var v11631 = v18308.ConstructMember;
      return JAM.call(TypeScript$$4.hasFlag, TypeScript$$4, [v11630, v11631], JAM.policy.p1);
    }
    function v185() {
      var v11632 = this.fncFlags;
      var v18309 = TypeScript$$4.FncFlags;
      var v11633 = v18309.CallMember;
      return JAM.call(TypeScript$$4.hasFlag, TypeScript$$4, [v11632, v11633], JAM.policy.p1);
    }
    function v184() {
      var v18310 = this.fncFlags;
      var v22639 = TypeScript$$4.FncFlags;
      var v18311 = v22639.Method;
      var v11634 = v18310 & v18311;
      var v18312 = TypeScript$$4.FncFlags;
      var v11635 = v18312.None;
      return v11634 != v11635;
    }
    function v183() {
      var v11637 = this.name;
      if (v11637) {
        var v11636 = this.name;
        return v11636.actualText;
      } else {
        return this.hint;
      }
      return;
    }
    function v182(emitter$$15, tokenId$$15, startLine$$15) {
      JAM.call(emitter$$15.emitJavascriptFunction, emitter$$15, [this]);
      return;
    }
    function v181(typeFlow$$13) {
      return JAM.call(typeFlow$$13.typeCheckFunction, typeFlow$$13, [this]);
    }
    function v180() {
      function controlFlowPrefix(ast$$2, parent, walker$$1) {
        var v11638 = walker$$1.state;
        JAM.call(ast$$2.addToControlFlow, ast$$2, [v11638]);
        return ast$$2;
      }
      var v11639 = TypeScript$$4.BasicBlock;
      var entry$$1 = new v11639;
      var v11640 = TypeScript$$4.BasicBlock;
      var exit = new v11640;
      var v11641 = TypeScript$$4.ControlFlowContext;
      var context$$10 = JAM.new(v11641, [entry$$1, exit]);
      var v11642 = TypeScript$$4.getAstWalkerFactory();
      var walker = JAM.call(v11642.getWalker, v11642, [controlFlowPrefix, null, null, context$$10], JAM.policy.p1);
      context$$10.walker = walker;
      var v11643 = this.bod;
      JAM.call(walker.walk, walker, [v11643, this], JAM.policy.p1);
      return context$$10;
    }
    function v179(sym$$1) {
      var v18313 = this.jumpRefs;
      var v11644 = v18313 == null;
      if (v11644) {
        var v27091 = new Array;
        this.jumpRefs = v27091;
      }
      var v11645 = sym$$1.name;
      var id$$6 = JAM.new(Identifier, [v11645]);
      var v11646 = this.jumpRefs;
      var v18314 = this.jumpRefs;
      var v11647 = v18314.length;
      JAM.set(v11646, v11647, id$$6);
      id$$6.sym = sym$$1;
      var v27092 = JAM.call(this.addCloRef, this, [id$$6]);
      id$$6.cloId = v27092;
      return;
    }
    function v178(id$$5) {
      var sym = null;
      var v18315 = this.envids;
      var v11648 = v18315 == null;
      if (v11648) {
        var v27093 = new Array;
        this.envids = v27093;
      }
      var v11649 = this.envids;
      var v18316 = this.envids;
      var v11650 = v18316.length;
      JAM.set(v11649, v11650, id$$5);
      var outerFnc = this.enclosingFnc;
      if (sym) {
        var v18317 = outerFnc;
        if (v18317) {
          var v24771 = outerFnc.type;
          var v22640 = v24771.symbol;
          var v22641 = sym.container;
          v18317 = v22640 != v22641;
        }
        var v11651 = v18317;
        for (;v11651;) {
          JAM.call(outerFnc.addJumpRef, outerFnc, [sym]);
          outerFnc = outerFnc.enclosingFnc;
          var v18318 = outerFnc;
          if (v18318) {
            var v24772 = outerFnc.type;
            var v22642 = v24772.symbol;
            var v22643 = sym.container;
            v18318 = v22642 != v22643;
          }
          v11651 = v18318;
        }
      }
      var v18319 = this.envids;
      var v11652 = v18319.length;
      return v11652 - 1;
    }
    function v177() {
      var v18320 = this.fncFlags;
      var v22644 = TypeScript$$4.FncFlags;
      var v18321 = v22644.HasSuperReferenceInFatArrowFunction;
      this.fncFlags = v18320 | v18321;
      return;
    }
    function v176() {
      var v11653 = this.fncFlags;
      var v18322 = TypeScript$$4.FncFlags;
      var v11654 = v18322.HasSuperReferenceInFatArrowFunction;
      return JAM.call(TypeScript$$4.hasFlag, TypeScript$$4, [v11653, v11654], JAM.policy.p1);
    }
    function v175() {
      var v18323 = this.fncFlags;
      var v22645 = TypeScript$$4.FncFlags;
      var v18324 = v22645.HasSelfReference;
      this.fncFlags = v18323 | v18324;
      return;
    }
    function v174() {
      var v11655 = this.fncFlags;
      var v18325 = TypeScript$$4.FncFlags;
      var v11656 = v18325.HasSelfReference;
      return JAM.call(TypeScript$$4.hasFlag, TypeScript$$4, [v11655, v11656], JAM.policy.p1);
    }
    function v173() {
      var v18326 = this.internalNameCache;
      var v11658 = v18326 == null;
      if (v11658) {
        var extName = this.getNameText();
        if (extName) {
          this.internalNameCache = "_internal_" + extName;
        } else {
          var v11657 = internalId;
          internalId = internalId + 1;
          this.internalNameCache = "_internal_" + v11657;
        }
      }
      return this.internalNameCache;
    }
    function v172() {
      return true;
    }
    function FuncDecl$$1(name$$33, bod, isConstructor, args$$1, vars, scopes, statics, nodeType$$7) {
      JAM.call(_super$$19.call, _super$$19, [this, nodeType$$7], JAM.policy.p1);
      this.name = name$$33;
      this.bod = bod;
      this.isConstructor = isConstructor;
      this.arguments = args$$1;
      this.vars = vars;
      this.scopes = scopes;
      this.statics = statics;
      this.hint = null;
      var v11659 = TypeScript$$4.FncFlags;
      this.fncFlags = v11659.None;
      this.returnTypeAnnotation = null;
      this.variableArgList = false;
      this.jumpRefs = null;
      this.internalNameCache = null;
      this.tmp1Declared = false;
      this.enclosingFnc = null;
      this.freeVariables = [];
      this.unitIndex = -1;
      this.classDecl = null;
      this.boundToProperty = null;
      this.isOverload = false;
      this.innerStaticFuncs = [];
      this.isTargetTypedAsMethod = false;
      this.isInlineCallLiteral = false;
      this.accessorSymbol = null;
      this.leftCurlyCount = 0;
      this.rightCurlyCount = 0;
      this.returnStatementsWithExpressions = [];
      this.scopeType = null;
      this.endingToken = null;
      return;
    }
    JAM.call(__extends, null, [FuncDecl$$1, _super$$19], JAM.policy.p1);
    var v11660 = FuncDecl$$1.prototype;
    v11660.isDeclaration = v172;
    var v11661 = FuncDecl$$1.prototype;
    v11661.internalName = v173;
    var v11662 = FuncDecl$$1.prototype;
    v11662.hasSelfReference = v174;
    var v11663 = FuncDecl$$1.prototype;
    v11663.setHasSelfReference = v175;
    var v11664 = FuncDecl$$1.prototype;
    v11664.hasSuperReferenceInFatArrowFunction = v176;
    var v11665 = FuncDecl$$1.prototype;
    v11665.setHasSuperReferenceInFatArrowFunction = v177;
    var v11666 = FuncDecl$$1.prototype;
    v11666.addCloRef = v178;
    var v11667 = FuncDecl$$1.prototype;
    v11667.addJumpRef = v179;
    var v11668 = FuncDecl$$1.prototype;
    v11668.buildControlFlow = v180;
    var v11669 = FuncDecl$$1.prototype;
    v11669.typeCheck = v181;
    var v11670 = FuncDecl$$1.prototype;
    v11670.emit = v182;
    var v11671 = FuncDecl$$1.prototype;
    v11671.getNameText = v183;
    var v11672 = FuncDecl$$1.prototype;
    v11672.isMethod = v184;
    var v11673 = FuncDecl$$1.prototype;
    v11673.isCallMember = v185;
    var v11674 = FuncDecl$$1.prototype;
    v11674.isConstructMember = v186;
    var v11675 = FuncDecl$$1.prototype;
    v11675.isIndexerMember = v187;
    var v11676 = FuncDecl$$1.prototype;
    v11676.isSpecialFn = v188;
    var v11677 = FuncDecl$$1.prototype;
    v11677.isAnonymousFn = v189;
    var v11678 = FuncDecl$$1.prototype;
    v11678.isAccessor = v190;
    var v11679 = FuncDecl$$1.prototype;
    v11679.isGetAccessor = v191;
    var v11680 = FuncDecl$$1.prototype;
    v11680.isSetAccessor = v192;
    var v11681 = FuncDecl$$1.prototype;
    v11681.isAmbient = v193;
    var v11682 = FuncDecl$$1.prototype;
    v11682.isExported = v194;
    var v11683 = FuncDecl$$1.prototype;
    v11683.isPrivate = v195;
    var v11684 = FuncDecl$$1.prototype;
    v11684.isPublic = v196;
    var v11685 = FuncDecl$$1.prototype;
    v11685.isStatic = v197;
    var v11686 = FuncDecl$$1.prototype;
    v11686.treeViewLabel = v198;
    var v11687 = FuncDecl$$1.prototype;
    v11687.ClearFlags = v199;
    var v11688 = FuncDecl$$1.prototype;
    v11688.isSignature = v200;
    return FuncDecl$$1;
  }
  function v171(_super$$18) {
    function v170(emitter$$14, tokenId$$14, startLine$$14) {
      JAM.call(emitter$$14.emitParensAndCommentsInPlace, emitter$$14, [this, true], JAM.policy.p1);
      JAM.call(emitter$$14.recordSourceMappingStart, emitter$$14, [this]);
      var v18327 = this.id;
      var v11689 = v18327.actualText;
      JAM.call(emitter$$14.writeToOutput, emitter$$14, [v11689]);
      JAM.call(emitter$$14.recordSourceMappingEnd, emitter$$14, [this]);
      JAM.call(emitter$$14.emitParensAndCommentsInPlace, emitter$$14, [this, false], JAM.policy.p1);
      return;
    }
    function v169() {
      var v18328 = this.id;
      var v11690 = v18328.actualText;
      return "arg: " + v11690;
    }
    function v168() {
      var v11691 = this.isOptional;
      var v18329 = !v11691;
      if (v18329) {
        v11691 = this.init;
      }
      return v11691;
    }
    function ArgDecl$$1(id$$4) {
      var v18330 = TypeScript$$4.NodeType;
      var v11692 = v18330.ArgDecl;
      JAM.call(_super$$18.call, _super$$18, [this, id$$4, v11692, 0], JAM.policy.p1);
      this.isOptional = false;
      this.parameterPropertySym = null;
      return;
    }
    JAM.call(__extends, null, [ArgDecl$$1, _super$$18], JAM.policy.p1);
    var v11693 = ArgDecl$$1.prototype;
    v11693.isOptionalArg = v168;
    var v11694 = ArgDecl$$1.prototype;
    v11694.treeViewLabel = v169;
    var v11695 = ArgDecl$$1.prototype;
    v11695.emit = v170;
    return ArgDecl$$1;
  }
  function v167(_super$$17) {
    function v166() {
      var v18331 = this.id;
      var v11696 = v18331.actualText;
      return "var " + v11696;
    }
    function v165(emitter$$13, tokenId$$13, startLine$$13) {
      JAM.call(emitter$$13.emitJavascriptVarDecl, emitter$$13, [this, tokenId$$13], JAM.policy.p1);
      return;
    }
    function v164() {
      var v11697 = this.varFlags;
      var v18332 = TypeScript$$4.VarFlags;
      var v11698 = v18332.Static;
      return JAM.call(TypeScript$$4.hasFlag, TypeScript$$4, [v11697, v11698], JAM.policy.p1);
    }
    function v163() {
      var v11699 = this.varFlags;
      var v18333 = TypeScript$$4.VarFlags;
      var v11700 = v18333.Exported;
      return JAM.call(TypeScript$$4.hasFlag, TypeScript$$4, [v11699, v11700], JAM.policy.p1);
    }
    function v162() {
      var v11701 = this.varFlags;
      var v18334 = TypeScript$$4.VarFlags;
      var v11702 = v18334.Ambient;
      return JAM.call(TypeScript$$4.hasFlag, TypeScript$$4, [v11701, v11702], JAM.policy.p1);
    }
    function VarDecl$$1(id$$3, nest) {
      var v18335 = TypeScript$$4.NodeType;
      var v11703 = v18335.VarDecl;
      JAM.call(_super$$17.call, _super$$17, [this, id$$3, v11703, nest], JAM.policy.p1);
      return;
    }
    JAM.call(__extends, null, [VarDecl$$1, _super$$17], JAM.policy.p1);
    var v11704 = VarDecl$$1.prototype;
    v11704.isAmbient = v162;
    var v11705 = VarDecl$$1.prototype;
    v11705.isExported = v163;
    var v11706 = VarDecl$$1.prototype;
    v11706.isStatic = v164;
    var v11707 = VarDecl$$1.prototype;
    v11707.emit = v165;
    var v11708 = VarDecl$$1.prototype;
    v11708.treeViewLabel = v166;
    return VarDecl$$1;
  }
  function v161(_super$$16) {
    function v160() {
      return this.treeViewLabel();
    }
    function v159(typeFlow$$12) {
      return JAM.call(typeFlow$$12.typeCheckBoundDecl, typeFlow$$12, [this]);
    }
    function v158() {
      var v11709 = this.varFlags;
      var v18336 = TypeScript$$4.VarFlags;
      var v11710 = v18336.Property;
      return JAM.call(TypeScript$$4.hasFlag, TypeScript$$4, [v11709, v11710], JAM.policy.p1);
    }
    function v157() {
      var v11711 = this.varFlags;
      var v18337 = TypeScript$$4.VarFlags;
      var v11712 = v18337.Public;
      return JAM.call(TypeScript$$4.hasFlag, TypeScript$$4, [v11711, v11712], JAM.policy.p1);
    }
    function v156() {
      var v11713 = this.varFlags;
      var v18338 = TypeScript$$4.VarFlags;
      var v11714 = v18338.Private;
      return JAM.call(TypeScript$$4.hasFlag, TypeScript$$4, [v11713, v11714], JAM.policy.p1);
    }
    function v155() {
      return true;
    }
    function v154() {
      return true;
    }
    function BoundDecl$$1(id$$2, nodeType$$6, nestingLevel) {
      JAM.call(_super$$16.call, _super$$16, [this, nodeType$$6], JAM.policy.p1);
      this.id = id$$2;
      this.nestingLevel = nestingLevel;
      this.init = null;
      this.typeExpr = null;
      var v11715 = TypeScript$$4.VarFlags;
      this.varFlags = v11715.None;
      this.sym = null;
      return;
    }
    JAM.call(__extends, null, [BoundDecl$$1, _super$$16], JAM.policy.p1);
    var v11716 = BoundDecl$$1.prototype;
    v11716.isDeclaration = v154;
    var v11717 = BoundDecl$$1.prototype;
    v11717.isStatementOrExpression = v155;
    var v11718 = BoundDecl$$1.prototype;
    v11718.isPrivate = v156;
    var v11719 = BoundDecl$$1.prototype;
    v11719.isPublic = v157;
    var v11720 = BoundDecl$$1.prototype;
    v11720.isProperty = v158;
    var v11721 = BoundDecl$$1.prototype;
    v11721.typeCheck = v159;
    var v11722 = BoundDecl$$1.prototype;
    v11722.printLabel = v160;
    return BoundDecl$$1;
  }
  function v153(_super$$15) {
    function v152() {
      var v22646 = this.alias;
      var v18339 = v22646.nodeType;
      var v22647 = TypeScript$$4.NodeType;
      var v18340 = v22647.Name;
      var v11724 = v18339 == v18340;
      if (v11724) {
        var v11723 = this.alias;
        return v11723.actualText;
      } else {
        var dotExpr$$1 = this.alias;
        var firstMod = dotExpr$$1.operand1;
        return firstMod.actualText;
      }
      return;
    }
    function v151(aliasAST) {
      var v18341 = typeof aliasAST;
      var v11725 = v18341 === "undefined";
      if (v11725) {
        aliasAST = this.alias;
      }
      var v18342 = aliasAST.nodeType;
      var v22648 = TypeScript$$4.NodeType;
      var v18343 = v22648.Name;
      var v11728 = v18342 == v18343;
      if (v11728) {
        return aliasAST.actualText;
      } else {
        var dotExpr = aliasAST;
        var v22649 = dotExpr.operand1;
        var v18344 = JAM.call(this.getAliasName, this, [v22649]);
        var v11726 = v18344 + ".";
        var v18345 = dotExpr.operand2;
        var v11727 = JAM.call(this.getAliasName, this, [v18345]);
        return v11726 + v11727;
      }
      return;
    }
    function v150(typeFlow$$11) {
      return JAM.call(typeFlow$$11.typeCheckImportDecl, typeFlow$$11, [this]);
    }
    function v149(emitter$$12, tokenId$$12, startLine$$12) {
      var v11729 = this.alias;
      var mod = v11729.type;
      var v22650 = this.isDynamicImport;
      var v18346 = !v22650;
      var v22652 = !v18346;
      if (v22652) {
        var v24773 = this.id;
        var v22651 = v24773.sym;
        if (v22651) {
          var v26075 = this.id;
          var v25679 = v26075.sym;
          var v24774 = v25679.onlyReferencedAsTypeRef;
          v22651 = !v24774;
        }
        v18346 = v22651;
      }
      var v11735 = v18346;
      if (v11735) {
        var prevModAliasId = emitter$$12.modAliasId;
        var prevFirstModAlias = emitter$$12.firstModAlias;
        JAM.call(emitter$$12.recordSourceMappingStart, emitter$$12, [this]);
        JAM.call(emitter$$12.emitParensAndCommentsInPlace, emitter$$12, [this, true], JAM.policy.p1);
        var v24775 = this.id;
        var v22653 = v24775.actualText;
        var v18347 = "var " + v22653;
        var v11730 = v18347 + " = ";
        JAM.call(emitter$$12.writeToOutput, emitter$$12, [v11730]);
        var v11731 = this.id;
        emitter$$12.modAliasId = v11731.actualText;
        var v27094 = this.firstAliasedModToString();
        emitter$$12.firstModAlias = v27094;
        var v11732 = this.alias;
        var v18348 = TypeScript$$4.TokenID;
        var v11733 = v18348.Tilde;
        JAM.call(emitter$$12.emitJavascript, emitter$$12, [v11732, v11733, false], JAM.policy.p1);
        var v18349 = this.isDynamicImport;
        var v11734 = !v18349;
        if (v11734) {
          JAM.call(emitter$$12.writeToOutput, emitter$$12, [";"]);
        }
        JAM.call(emitter$$12.emitParensAndCommentsInPlace, emitter$$12, [this, false], JAM.policy.p1);
        JAM.call(emitter$$12.recordSourceMappingEnd, emitter$$12, [this]);
        emitter$$12.modAliasId = prevModAliasId;
        emitter$$12.firstModAlias = prevFirstModAlias;
      }
      return;
    }
    function v148() {
      return true;
    }
    function v147() {
      return true;
    }
    function ImportDeclaration$$1(id$$1, alias) {
      var v18350 = TypeScript$$4.NodeType;
      var v11736 = v18350.ImportDeclaration;
      JAM.call(_super$$15.call, _super$$15, [this, v11736], JAM.policy.p1);
      this.id = id$$1;
      this.alias = alias;
      var v11737 = TypeScript$$4.VarFlags;
      this.varFlags = v11737.None;
      this.isDynamicImport = false;
      return;
    }
    JAM.call(__extends, null, [ImportDeclaration$$1, _super$$15], JAM.policy.p1);
    var v11738 = ImportDeclaration$$1.prototype;
    v11738.isStatementOrExpression = v147;
    var v11739 = ImportDeclaration$$1.prototype;
    v11739.isDeclaration = v148;
    var v11740 = ImportDeclaration$$1.prototype;
    v11740.emit = v149;
    var v11741 = ImportDeclaration$$1.prototype;
    v11741.typeCheck = v150;
    var v11742 = ImportDeclaration$$1.prototype;
    v11742.getAliasName = v151;
    var v11743 = ImportDeclaration$$1.prototype;
    v11743.firstAliasedModToString = v152;
    return ImportDeclaration$$1;
  }
  function v146(_super$$14) {
    function ModuleElement$$1(nodeType$$5) {
      JAM.call(_super$$14.call, _super$$14, [this, nodeType$$5], JAM.policy.p1);
      return;
    }
    JAM.call(__extends, null, [ModuleElement$$1, _super$$14], JAM.policy.p1);
    return ModuleElement$$1;
  }
  function v145(_super$$13) {
    function v144() {
      return this.text;
    }
    function v143() {
      var v11744 = this.text;
      return "st: " + v11744;
    }
    function v142(typeFlow$$10) {
      this.type = typeFlow$$10.stringType;
      return this;
    }
    function v141(emitter$$11, tokenId$$11, startLine$$11) {
      JAM.call(emitter$$11.emitParensAndCommentsInPlace, emitter$$11, [this, true], JAM.policy.p1);
      JAM.call(emitter$$11.recordSourceMappingStart, emitter$$11, [this]);
      var v11745 = this.text;
      JAM.call(emitter$$11.emitStringLiteral, emitter$$11, [v11745]);
      JAM.call(emitter$$11.recordSourceMappingEnd, emitter$$11, [this]);
      JAM.call(emitter$$11.emitParensAndCommentsInPlace, emitter$$11, [this, false], JAM.policy.p1);
      return;
    }
    function StringLiteral$$1(text$$8) {
      var v18351 = TypeScript$$4.NodeType;
      var v11746 = v18351.QString;
      JAM.call(_super$$13.call, _super$$13, [this, v11746], JAM.policy.p1);
      this.text = text$$8;
      return;
    }
    JAM.call(__extends, null, [StringLiteral$$1, _super$$13], JAM.policy.p1);
    var v11747 = StringLiteral$$1.prototype;
    v11747.emit = v141;
    var v11748 = StringLiteral$$1.prototype;
    v11748.typeCheck = v142;
    var v11749 = StringLiteral$$1.prototype;
    v11749.treeViewLabel = v143;
    var v11750 = StringLiteral$$1.prototype;
    v11750.printLabel = v144;
    return StringLiteral$$1;
  }
  function v140(_super$$12) {
    function v139(emitter$$10, tokenId$$10, startLine$$10) {
      JAM.call(emitter$$10.emitParensAndCommentsInPlace, emitter$$10, [this, true], JAM.policy.p1);
      JAM.call(emitter$$10.recordSourceMappingStart, emitter$$10, [this]);
      var v18352 = this.regex;
      var v11751 = v18352.toString();
      JAM.call(emitter$$10.writeToOutput, emitter$$10, [v11751]);
      JAM.call(emitter$$10.recordSourceMappingEnd, emitter$$10, [this]);
      JAM.call(emitter$$10.emitParensAndCommentsInPlace, emitter$$10, [this, false], JAM.policy.p1);
      return;
    }
    function v138(typeFlow$$9) {
      this.type = typeFlow$$9.regexType;
      return this;
    }
    function RegexLiteral$$1(regex$$1) {
      var v18353 = TypeScript$$4.NodeType;
      var v11752 = v18353.Regex;
      JAM.call(_super$$12.call, _super$$12, [this, v11752], JAM.policy.p1);
      this.regex = regex$$1;
      return;
    }
    JAM.call(__extends, null, [RegexLiteral$$1, _super$$12], JAM.policy.p1);
    var v11753 = RegexLiteral$$1.prototype;
    v11753.typeCheck = v138;
    var v11754 = RegexLiteral$$1.prototype;
    v11754.emit = v139;
    return RegexLiteral$$1;
  }
  function v137(_super$$11) {
    function v136() {
      var v22654 = this.value;
      var v18354 = Math.floor(v22654);
      var v18355 = this.value;
      var v11759 = v18354 != v18355;
      if (v11759) {
        var v18356 = this.value;
        var v11755 = v18356.toFixed(2);
        return v11755.toString();
      } else {
        var v11758 = this.hasEmptyFraction;
        if (v11758) {
          var v18357 = this.value;
          var v11756 = v18357.toString();
          return v11756 + ".0";
        } else {
          var v11757 = this.value;
          return v11757.toString();
        }
      }
      return;
    }
    function v135(emitter$$9, tokenId$$9, startLine$$9) {
      JAM.call(emitter$$9.emitParensAndCommentsInPlace, emitter$$9, [this, true], JAM.policy.p1);
      JAM.call(emitter$$9.recordSourceMappingStart, emitter$$9, [this]);
      var v11760 = this.isNegativeZero;
      if (v11760) {
        JAM.call(emitter$$9.writeToOutput, emitter$$9, ["-"]);
      }
      var v18358 = this.value;
      var v11761 = v18358.toString();
      JAM.call(emitter$$9.writeToOutput, emitter$$9, [v11761]);
      var v11762 = this.hasEmptyFraction;
      if (v11762) {
        JAM.call(emitter$$9.writeToOutput, emitter$$9, [".0"]);
      }
      JAM.call(emitter$$9.recordSourceMappingEnd, emitter$$9, [this]);
      JAM.call(emitter$$9.emitParensAndCommentsInPlace, emitter$$9, [this, false], JAM.policy.p1);
      return;
    }
    function v134() {
      var v11763 = this.printLabel();
      return "num: " + v11763;
    }
    function v133(typeFlow$$8) {
      this.type = typeFlow$$8.doubleType;
      return this;
    }
    function NumberLiteral$$1(value$$28, hasEmptyFraction) {
      var v18359 = TypeScript$$4.NodeType;
      var v11764 = v18359.NumberLit;
      JAM.call(_super$$11.call, _super$$11, [this, v11764], JAM.policy.p1);
      this.value = value$$28;
      this.hasEmptyFraction = hasEmptyFraction;
      this.isNegativeZero = false;
      return;
    }
    JAM.call(__extends, null, [NumberLiteral$$1, _super$$11], JAM.policy.p1);
    var v11765 = NumberLiteral$$1.prototype;
    v11765.typeCheck = v133;
    var v11766 = NumberLiteral$$1.prototype;
    v11766.treeViewLabel = v134;
    var v11767 = NumberLiteral$$1.prototype;
    v11767.emit = v135;
    var v11768 = NumberLiteral$$1.prototype;
    v11768.printLabel = v136;
    return NumberLiteral$$1;
  }
  function v132(_super$$10) {
    function v131(emitter$$8, tokenId$$8, startLine$$8) {
      JAM.call(emitter$$8.emitParensAndCommentsInPlace, emitter$$8, [this, true], JAM.policy.p1);
      JAM.call(emitter$$8.recordSourceMappingStart, emitter$$8, [this]);
      var v11769 = this.operand1;
      var v18360 = TypeScript$$4.TokenID;
      var v11770 = v18360.Question;
      JAM.call(emitter$$8.emitJavascript, emitter$$8, [v11769, v11770, false], JAM.policy.p1);
      JAM.call(emitter$$8.writeToOutput, emitter$$8, [" ? "]);
      var v11771 = this.operand2;
      var v18361 = TypeScript$$4.TokenID;
      var v11772 = v18361.Question;
      JAM.call(emitter$$8.emitJavascript, emitter$$8, [v11771, v11772, false], JAM.policy.p1);
      JAM.call(emitter$$8.writeToOutput, emitter$$8, [" : "]);
      var v11773 = this.operand3;
      var v18362 = TypeScript$$4.TokenID;
      var v11774 = v18362.Question;
      JAM.call(emitter$$8.emitJavascript, emitter$$8, [v11773, v11774, false], JAM.policy.p1);
      JAM.call(emitter$$8.recordSourceMappingEnd, emitter$$8, [this]);
      JAM.call(emitter$$8.emitParensAndCommentsInPlace, emitter$$8, [this, false], JAM.policy.p1);
      return;
    }
    function v130(typeFlow$$7) {
      return JAM.call(typeFlow$$7.typeCheckQMark, typeFlow$$7, [this]);
    }
    function ConditionalExpression$$1(operand1$$1, operand2$$1, operand3) {
      var v18363 = TypeScript$$4.NodeType;
      var v11775 = v18363.ConditionalExpression;
      JAM.call(_super$$10.call, _super$$10, [this, v11775], JAM.policy.p1);
      this.operand1 = operand1$$1;
      this.operand2 = operand2$$1;
      this.operand3 = operand3;
      return;
    }
    JAM.call(__extends, null, [ConditionalExpression$$1, _super$$10], JAM.policy.p1);
    var v11776 = ConditionalExpression$$1.prototype;
    v11776.typeCheck = v130;
    var v11777 = ConditionalExpression$$1.prototype;
    v11777.emit = v131;
    return ConditionalExpression$$1;
  }
  function v129(_super$$9) {
    function v128(emitter$$7, tokenId$$7, startLine$$7) {
      var v11778 = TypeScript$$4.nodeTypeToTokTable;
      var v11779 = this.nodeType;
      var binTokenId = v11778[v11779];
      JAM.call(emitter$$7.emitParensAndCommentsInPlace, emitter$$7, [this, true], JAM.policy.p1);
      JAM.call(emitter$$7.recordSourceMappingStart, emitter$$7, [this]);
      var v11805 = binTokenId != undefined;
      if (v11805) {
        var v11780 = this.operand1;
        JAM.call(emitter$$7.emitJavascript, emitter$$7, [v11780, binTokenId, false], JAM.policy.p1);
        var v24776 = TypeScript$$4.tokenTable;
        var v22655 = v24776[binTokenId];
        var v18364 = v22655.text;
        var v11783 = v18364 == "instanceof";
        if (v11783) {
          JAM.call(emitter$$7.writeToOutput, emitter$$7, [" instanceof "]);
        } else {
          var v24777 = TypeScript$$4.tokenTable;
          var v22656 = v24777[binTokenId];
          var v18365 = v22656.text;
          var v11782 = v18365 == "in";
          if (v11782) {
            JAM.call(emitter$$7.writeToOutput, emitter$$7, [" in "]);
          } else {
            var v25680 = TypeScript$$4.tokenTable;
            var v24778 = v25680[binTokenId];
            var v22657 = v24778.text;
            var v18366 = " " + v22657;
            var v11781 = v18366 + " ";
            JAM.call(emitter$$7.writeToOutputTrimmable, emitter$$7, [v11781]);
          }
        }
        var v11784 = this.operand2;
        JAM.call(emitter$$7.emitJavascript, emitter$$7, [v11784, binTokenId, false], JAM.policy.p1);
      } else {
        var v11804 = this.nodeType;
        switch(v11804) {
          case TypeScript$$4.NodeType.Dot:
            var v18367 = JAM.call(emitter$$7.tryEmitConstant, emitter$$7, [this]);
            var v11788 = !v18367;
            if (v11788) {
              var v11785 = this.operand1;
              var v18368 = TypeScript$$4.TokenID;
              var v11786 = v18368.Dot;
              JAM.call(emitter$$7.emitJavascript, emitter$$7, [v11785, v11786, false], JAM.policy.p1);
              JAM.call(emitter$$7.writeToOutput, emitter$$7, ["."]);
              var v11787 = this.operand2;
              JAM.call(emitter$$7.emitJavascriptName, emitter$$7, [v11787, false], JAM.policy.p1);
            }
            break;
          case TypeScript$$4.NodeType.Index:
            var v11789 = this.operand1;
            var v11790 = this.operand2;
            JAM.call(emitter$$7.emitIndex, emitter$$7, [v11789, v11790], JAM.policy.p1);
            break;
          case TypeScript$$4.NodeType.Member:
            var v24779 = this.operand2;
            var v22658 = v24779.nodeType;
            var v24780 = TypeScript$$4.NodeType;
            var v22659 = v24780.FuncDecl;
            var v18369 = v22658 == v22659;
            if (v18369) {
              var v22660 = this.operand2;
              v18369 = v22660.isAccessor();
            }
            var v11796 = v18369;
            if (v11796) {
              var funcDecl = this.operand2;
              var v18370 = funcDecl.fncFlags;
              var v22661 = TypeScript$$4.FncFlags;
              var v18371 = v22661.GetAccessor;
              var v11791 = JAM.call(TypeScript$$4.hasFlag, TypeScript$$4, [v18370, v18371], JAM.policy.p1);
              if (v11791) {
                JAM.call(emitter$$7.writeToOutput, emitter$$7, ["get "]);
              } else {
                JAM.call(emitter$$7.writeToOutput, emitter$$7, ["set "]);
              }
              var v11792 = this.operand1;
              var v18372 = TypeScript$$4.TokenID;
              var v11793 = v18372.Colon;
              JAM.call(emitter$$7.emitJavascript, emitter$$7, [v11792, v11793, false], JAM.policy.p1);
            } else {
              var v11794 = this.operand1;
              var v18373 = TypeScript$$4.TokenID;
              var v11795 = v18373.Colon;
              JAM.call(emitter$$7.emitJavascript, emitter$$7, [v11794, v11795, false], JAM.policy.p1);
              JAM.call(emitter$$7.writeToOutputTrimmable, emitter$$7, [": "]);
            }
            var v11797 = this.operand2;
            var v18374 = TypeScript$$4.TokenID;
            var v11798 = v18374.Comma;
            JAM.call(emitter$$7.emitJavascript, emitter$$7, [v11797, v11798, false], JAM.policy.p1);
            break;
          case TypeScript$$4.NodeType.Comma:
            var v11799 = this.operand1;
            var v18375 = TypeScript$$4.TokenID;
            var v11800 = v18375.Comma;
            JAM.call(emitter$$7.emitJavascript, emitter$$7, [v11799, v11800, false], JAM.policy.p1);
            var v18376 = emitter$$7.emitState;
            var v11801 = v18376.inObjectLiteral;
            if (v11801) {
              JAM.call(emitter$$7.writeLineToOutput, emitter$$7, [", "]);
            } else {
              JAM.call(emitter$$7.writeToOutput, emitter$$7, [","]);
            }
            var v11802 = this.operand2;
            var v18377 = TypeScript$$4.TokenID;
            var v11803 = v18377.Comma;
            JAM.call(emitter$$7.emitJavascript, emitter$$7, [v11802, v11803, false], JAM.policy.p1);
            break;
          case TypeScript$$4.NodeType.Is:
            throw new Error("should be de-sugared during type check");;
          default:
            throw new Error("please implement in derived class");;
        }
      }
      JAM.call(emitter$$7.recordSourceMappingEnd, emitter$$7, [this]);
      JAM.call(emitter$$7.emitParensAndCommentsInPlace, emitter$$7, [this, false], JAM.policy.p1);
      return;
    }
    function v127(typeFlow$$6) {
      var v11818 = this.nodeType;
      switch(v11818) {
        case TypeScript$$4.NodeType.Dot:
          return JAM.call(typeFlow$$6.typeCheckDotOperator, typeFlow$$6, [this]);
        case TypeScript$$4.NodeType.Asg:
          return JAM.call(typeFlow$$6.typeCheckAsgOperator, typeFlow$$6, [this]);
        case TypeScript$$4.NodeType.Add:
        ;
        case TypeScript$$4.NodeType.Sub:
        ;
        case TypeScript$$4.NodeType.Mul:
        ;
        case TypeScript$$4.NodeType.Div:
        ;
        case TypeScript$$4.NodeType.Mod:
        ;
        case TypeScript$$4.NodeType.Or:
        ;
        case TypeScript$$4.NodeType.And:
          return JAM.call(typeFlow$$6.typeCheckArithmeticOperator, typeFlow$$6, [this, false], JAM.policy.p1);
        case TypeScript$$4.NodeType.Xor:
          return JAM.call(typeFlow$$6.typeCheckBitwiseOperator, typeFlow$$6, [this, false], JAM.policy.p1);
        case TypeScript$$4.NodeType.Ne:
        ;
        case TypeScript$$4.NodeType.Eq:
          var text$$7;
          var v22662 = typeFlow$$6.checker;
          var v18378 = v22662.styleSettings;
          var v11816 = v18378.eqeqeq;
          if (v11816) {
            var v11806 = TypeScript$$4.nodeTypeTable;
            var v11807 = this.nodeType;
            text$$7 = v11806[v11807];
            var v18379 = typeFlow$$6.checker;
            var v11808 = v18379.errorReporter;
            var v11809 = "use of " + text$$7;
            JAM.call(v11808.styleError, v11808, [this, v11809], JAM.policy.p1);
          } else {
            var v22663 = typeFlow$$6.checker;
            var v18380 = v22663.styleSettings;
            var v11815 = v18380.eqnull;
            if (v11815) {
              var v11810 = TypeScript$$4.nodeTypeTable;
              var v11811 = this.nodeType;
              text$$7 = v11810[v11811];
              var v22664 = this.operand2;
              var v18381 = v22664 !== null;
              if (v18381) {
                var v24781 = this.operand2;
                var v22665 = v24781.nodeType;
                var v24782 = TypeScript$$4.NodeType;
                var v22666 = v24782.Null;
                v18381 = v22665 == v22666;
              }
              var v11814 = v18381;
              if (v11814) {
                var v18382 = typeFlow$$6.checker;
                var v11812 = v18382.errorReporter;
                var v18383 = "use of " + text$$7;
                var v11813 = v18383 + " to compare with null";
                JAM.call(v11812.styleError, v11812, [this, v11813], JAM.policy.p1);
              }
            }
          }
        ;
        case TypeScript$$4.NodeType.Eqv:
        ;
        case TypeScript$$4.NodeType.NEqv:
        ;
        case TypeScript$$4.NodeType.Lt:
        ;
        case TypeScript$$4.NodeType.Le:
        ;
        case TypeScript$$4.NodeType.Ge:
        ;
        case TypeScript$$4.NodeType.Gt:
          return JAM.call(typeFlow$$6.typeCheckBooleanOperator, typeFlow$$6, [this]);
        case TypeScript$$4.NodeType.Index:
          return JAM.call(typeFlow$$6.typeCheckIndex, typeFlow$$6, [this]);
        case TypeScript$$4.NodeType.Member:
          this.type = typeFlow$$6.voidType;
          return this;
        case TypeScript$$4.NodeType.LogOr:
          return JAM.call(typeFlow$$6.typeCheckLogOr, typeFlow$$6, [this]);
        case TypeScript$$4.NodeType.LogAnd:
          return JAM.call(typeFlow$$6.typeCheckLogAnd, typeFlow$$6, [this]);
        case TypeScript$$4.NodeType.AsgAdd:
        ;
        case TypeScript$$4.NodeType.AsgSub:
        ;
        case TypeScript$$4.NodeType.AsgMul:
        ;
        case TypeScript$$4.NodeType.AsgDiv:
        ;
        case TypeScript$$4.NodeType.AsgMod:
        ;
        case TypeScript$$4.NodeType.AsgOr:
        ;
        case TypeScript$$4.NodeType.AsgAnd:
          return JAM.call(typeFlow$$6.typeCheckArithmeticOperator, typeFlow$$6, [this, true], JAM.policy.p1);
        case TypeScript$$4.NodeType.AsgXor:
          return JAM.call(typeFlow$$6.typeCheckBitwiseOperator, typeFlow$$6, [this, true], JAM.policy.p1);
        case TypeScript$$4.NodeType.Lsh:
        ;
        case TypeScript$$4.NodeType.Rsh:
        ;
        case TypeScript$$4.NodeType.Rs2:
          return JAM.call(typeFlow$$6.typeCheckShift, typeFlow$$6, [this, false], JAM.policy.p1);
        case TypeScript$$4.NodeType.AsgLsh:
        ;
        case TypeScript$$4.NodeType.AsgRsh:
        ;
        case TypeScript$$4.NodeType.AsgRs2:
          return JAM.call(typeFlow$$6.typeCheckShift, typeFlow$$6, [this, true], JAM.policy.p1);
        case TypeScript$$4.NodeType.Comma:
          return JAM.call(typeFlow$$6.typeCheckCommaOperator, typeFlow$$6, [this]);
        case TypeScript$$4.NodeType.InstOf:
          return JAM.call(typeFlow$$6.typeCheckInstOf, typeFlow$$6, [this]);
        case TypeScript$$4.NodeType.In:
          return JAM.call(typeFlow$$6.typeCheckInOperator, typeFlow$$6, [this]);
        case TypeScript$$4.NodeType.From:
          var v18384 = typeFlow$$6.checker;
          var v11817 = v18384.errorReporter;
          JAM.call(v11817.simpleError, v11817, [this, "Illegal use of 'from' keyword in binary expression"], JAM.policy.p1);
          break;
        default:
          throw new Error("please implement in derived class");;
      }
      return this;
    }
    function BinaryExpression$$1(nodeType$$4, operand1, operand2) {
      JAM.call(_super$$9.call, _super$$9, [this, nodeType$$4], JAM.policy.p1);
      this.operand1 = operand1;
      this.operand2 = operand2;
      return;
    }
    JAM.call(__extends, null, [BinaryExpression$$1, _super$$9], JAM.policy.p1);
    var v11819 = BinaryExpression$$1.prototype;
    v11819.typeCheck = v127;
    var v11820 = BinaryExpression$$1.prototype;
    v11820.emit = v128;
    return BinaryExpression$$1;
  }
  function v126(_super$$8) {
    function v125(emitter$$6, tokenId$$6, startLine$$6) {
      JAM.call(emitter$$6.emitParensAndCommentsInPlace, emitter$$6, [this, true], JAM.policy.p1);
      JAM.call(emitter$$6.recordSourceMappingStart, emitter$$6, [this]);
      var v18385 = this.nodeType;
      var v22667 = TypeScript$$4.NodeType;
      var v18386 = v22667.New;
      var v11825 = v18385 == v18386;
      if (v11825) {
        var v11821 = this.target;
        var v11822 = this.arguments;
        JAM.call(emitter$$6.emitNew, emitter$$6, [v11821, v11822], JAM.policy.p1);
      } else {
        var v11823 = this.target;
        var v11824 = this.arguments;
        JAM.call(emitter$$6.emitCall, emitter$$6, [this, v11823, v11824], JAM.policy.p1);
      }
      JAM.call(emitter$$6.recordSourceMappingEnd, emitter$$6, [this]);
      JAM.call(emitter$$6.emitParensAndCommentsInPlace, emitter$$6, [this, false], JAM.policy.p1);
      return;
    }
    function v124(typeFlow$$5) {
      var v18387 = this.nodeType;
      var v22668 = TypeScript$$4.NodeType;
      var v18388 = v22668.New;
      var v11826 = v18387 == v18388;
      if (v11826) {
        return JAM.call(typeFlow$$5.typeCheckNew, typeFlow$$5, [this]);
      } else {
        return JAM.call(typeFlow$$5.typeCheckCall, typeFlow$$5, [this]);
      }
      return;
    }
    function CallExpression$$1(nodeType$$3, target$$26, args) {
      JAM.call(_super$$8.call, _super$$8, [this, nodeType$$3], JAM.policy.p1);
      this.target = target$$26;
      this.arguments = args;
      this.signature = null;
      var v11827 = this.target;
      this.minChar = v11827.minChar;
      return;
    }
    JAM.call(__extends, null, [CallExpression$$1, _super$$8], JAM.policy.p1);
    var v11828 = CallExpression$$1.prototype;
    v11828.typeCheck = v124;
    var v11829 = CallExpression$$1.prototype;
    v11829.emit = v125;
    return CallExpression$$1;
  }
  function v123(_super$$7) {
    function v122(emitter$$5, tokenId$$5, startLine$$5) {
      JAM.call(emitter$$5.emitParensAndCommentsInPlace, emitter$$5, [this, true], JAM.policy.p1);
      JAM.call(emitter$$5.recordSourceMappingStart, emitter$$5, [this]);
      var v11862 = this.nodeType;
      switch(v11862) {
        case TypeScript$$4.NodeType.IncPost:
          var v11830 = this.operand;
          var v18389 = TypeScript$$4.TokenID;
          var v11831 = v18389.PlusPlus;
          JAM.call(emitter$$5.emitJavascript, emitter$$5, [v11830, v11831, false], JAM.policy.p1);
          JAM.call(emitter$$5.writeToOutput, emitter$$5, ["++"]);
          break;
        case TypeScript$$4.NodeType.LogNot:
          JAM.call(emitter$$5.writeToOutput, emitter$$5, ["!"]);
          var v11832 = this.operand;
          var v18390 = TypeScript$$4.TokenID;
          var v11833 = v18390.Exclamation;
          JAM.call(emitter$$5.emitJavascript, emitter$$5, [v11832, v11833, false], JAM.policy.p1);
          break;
        case TypeScript$$4.NodeType.DecPost:
          var v11834 = this.operand;
          var v18391 = TypeScript$$4.TokenID;
          var v11835 = v18391.MinusMinus;
          JAM.call(emitter$$5.emitJavascript, emitter$$5, [v11834, v11835, false], JAM.policy.p1);
          JAM.call(emitter$$5.writeToOutput, emitter$$5, ["--"]);
          break;
        case TypeScript$$4.NodeType.ObjectLit:
          var v11836 = this.operand;
          JAM.call(emitter$$5.emitObjectLiteral, emitter$$5, [v11836]);
          break;
        case TypeScript$$4.NodeType.ArrayLit:
          var v11837 = this.operand;
          JAM.call(emitter$$5.emitArrayLiteral, emitter$$5, [v11837]);
          break;
        case TypeScript$$4.NodeType.Not:
          JAM.call(emitter$$5.writeToOutput, emitter$$5, ["~"]);
          var v11838 = this.operand;
          var v18392 = TypeScript$$4.TokenID;
          var v11839 = v18392.Tilde;
          JAM.call(emitter$$5.emitJavascript, emitter$$5, [v11838, v11839, false], JAM.policy.p1);
          break;
        case TypeScript$$4.NodeType.Neg:
          JAM.call(emitter$$5.writeToOutput, emitter$$5, ["-"]);
          var v22669 = this.operand;
          var v18393 = v22669.nodeType;
          var v22670 = TypeScript$$4.NodeType;
          var v18394 = v22670.Neg;
          var v11841 = v18393 == v18394;
          if (v11841) {
            var v11840 = this.operand;
            v11840.isParenthesized = true;
          }
          var v11842 = this.operand;
          var v18395 = TypeScript$$4.TokenID;
          var v11843 = v18395.Minus;
          JAM.call(emitter$$5.emitJavascript, emitter$$5, [v11842, v11843, false], JAM.policy.p1);
          break;
        case TypeScript$$4.NodeType.Pos:
          JAM.call(emitter$$5.writeToOutput, emitter$$5, ["+"]);
          var v22671 = this.operand;
          var v18396 = v22671.nodeType;
          var v22672 = TypeScript$$4.NodeType;
          var v18397 = v22672.Pos;
          var v11845 = v18396 == v18397;
          if (v11845) {
            var v11844 = this.operand;
            v11844.isParenthesized = true;
          }
          var v11846 = this.operand;
          var v18398 = TypeScript$$4.TokenID;
          var v11847 = v18398.Plus;
          JAM.call(emitter$$5.emitJavascript, emitter$$5, [v11846, v11847, false], JAM.policy.p1);
          break;
        case TypeScript$$4.NodeType.IncPre:
          JAM.call(emitter$$5.writeToOutput, emitter$$5, ["++"]);
          var v11848 = this.operand;
          var v18399 = TypeScript$$4.TokenID;
          var v11849 = v18399.PlusPlus;
          JAM.call(emitter$$5.emitJavascript, emitter$$5, [v11848, v11849, false], JAM.policy.p1);
          break;
        case TypeScript$$4.NodeType.DecPre:
          JAM.call(emitter$$5.writeToOutput, emitter$$5, ["--"]);
          var v11850 = this.operand;
          var v18400 = TypeScript$$4.TokenID;
          var v11851 = v18400.MinusMinus;
          JAM.call(emitter$$5.emitJavascript, emitter$$5, [v11850, v11851, false], JAM.policy.p1);
          break;
        case TypeScript$$4.NodeType.Throw:
          JAM.call(emitter$$5.writeToOutput, emitter$$5, ["throw "]);
          var v11852 = this.operand;
          var v18401 = TypeScript$$4.TokenID;
          var v11853 = v18401.Tilde;
          JAM.call(emitter$$5.emitJavascript, emitter$$5, [v11852, v11853, false], JAM.policy.p1);
          JAM.call(emitter$$5.writeToOutput, emitter$$5, [";"]);
          break;
        case TypeScript$$4.NodeType.Typeof:
          JAM.call(emitter$$5.writeToOutput, emitter$$5, ["typeof "]);
          var v11854 = this.operand;
          var v18402 = TypeScript$$4.TokenID;
          var v11855 = v18402.Tilde;
          JAM.call(emitter$$5.emitJavascript, emitter$$5, [v11854, v11855, false], JAM.policy.p1);
          break;
        case TypeScript$$4.NodeType.Delete:
          JAM.call(emitter$$5.writeToOutput, emitter$$5, ["delete "]);
          var v11856 = this.operand;
          var v18403 = TypeScript$$4.TokenID;
          var v11857 = v18403.Tilde;
          JAM.call(emitter$$5.emitJavascript, emitter$$5, [v11856, v11857, false], JAM.policy.p1);
          break;
        case TypeScript$$4.NodeType.Void:
          JAM.call(emitter$$5.writeToOutput, emitter$$5, ["void "]);
          var v11858 = this.operand;
          var v18404 = TypeScript$$4.TokenID;
          var v11859 = v18404.Tilde;
          JAM.call(emitter$$5.emitJavascript, emitter$$5, [v11858, v11859, false], JAM.policy.p1);
          break;
        case TypeScript$$4.NodeType.TypeAssertion:
          var v11860 = this.operand;
          var v18405 = TypeScript$$4.TokenID;
          var v11861 = v18405.Tilde;
          JAM.call(emitter$$5.emitJavascript, emitter$$5, [v11860, v11861, false], JAM.policy.p1);
          break;
        default:
          throw new Error("please implement in derived class");;
      }
      JAM.call(emitter$$5.recordSourceMappingEnd, emitter$$5, [this]);
      JAM.call(emitter$$5.emitParensAndCommentsInPlace, emitter$$5, [this, false], JAM.policy.p1);
      return;
    }
    function v121(typeFlow$$4) {
      var v11877 = this.nodeType;
      switch(v11877) {
        case TypeScript$$4.NodeType.Not:
          return JAM.call(typeFlow$$4.typeCheckBitNot, typeFlow$$4, [this]);
        case TypeScript$$4.NodeType.LogNot:
          return JAM.call(typeFlow$$4.typeCheckLogNot, typeFlow$$4, [this]);
        case TypeScript$$4.NodeType.Pos:
        ;
        case TypeScript$$4.NodeType.Neg:
          return JAM.call(typeFlow$$4.typeCheckUnaryNumberOperator, typeFlow$$4, [this]);
        case TypeScript$$4.NodeType.IncPost:
        ;
        case TypeScript$$4.NodeType.IncPre:
        ;
        case TypeScript$$4.NodeType.DecPost:
        ;
        case TypeScript$$4.NodeType.DecPre:
          return JAM.call(typeFlow$$4.typeCheckIncOrDec, typeFlow$$4, [this]);
        case TypeScript$$4.NodeType.ArrayLit:
          JAM.call(typeFlow$$4.typeCheckArrayLit, typeFlow$$4, [this]);
          return this;
        case TypeScript$$4.NodeType.ObjectLit:
          JAM.call(typeFlow$$4.typeCheckObjectLit, typeFlow$$4, [this]);
          return this;
        case TypeScript$$4.NodeType.Throw:
          var v11863 = this.operand;
          var v27095 = JAM.call(typeFlow$$4.typeCheck, typeFlow$$4, [v11863]);
          this.operand = v27095;
          this.type = typeFlow$$4.voidType;
          return this;
        case TypeScript$$4.NodeType.Typeof:
          var v11864 = this.operand;
          var v27096 = JAM.call(typeFlow$$4.typeCheck, typeFlow$$4, [v11864]);
          this.operand = v27096;
          this.type = typeFlow$$4.stringType;
          return this;
        case TypeScript$$4.NodeType.Delete:
          var v11865 = this.operand;
          var v27097 = JAM.call(typeFlow$$4.typeCheck, typeFlow$$4, [v11865]);
          this.operand = v27097;
          this.type = typeFlow$$4.booleanType;
          break;
        case TypeScript$$4.NodeType.TypeAssertion:
          var v11866 = this.castTerm;
          var v27098 = JAM.call(typeFlow$$4.typeCheck, typeFlow$$4, [v11866]);
          this.castTerm = v27098;
          var v18406 = this.operand;
          var v11867 = v18406.isParenthesized;
          var applyTargetType = !v11867;
          var v11868;
          if (applyTargetType) {
            var v18407 = this.castTerm;
            v11868 = v18407.type;
          } else {
            v11868 = null;
          }
          var targetType = v11868;
          var v11869 = typeFlow$$4.checker;
          var v18408 = typeFlow$$4.checker;
          var v11870 = v18408.inProvisionalTypecheckMode();
          var v11871 = this.operand;
          JAM.call(v11869.typeCheckWithContextualType, v11869, [targetType, v11870, true, v11871], JAM.policy.p1);
          var v11872 = this.operand;
          var v18409 = this.castTerm;
          var v11873 = v18409.type;
          JAM.call(typeFlow$$4.castWithCoercion, typeFlow$$4, [v11872, v11873, false, true], JAM.policy.p1);
          var v11874 = this.castTerm;
          this.type = v11874.type;
          return this;
        case TypeScript$$4.NodeType.Void:
          var v11875 = this.operand;
          var v27099 = JAM.call(typeFlow$$4.typeCheck, typeFlow$$4, [v11875]);
          this.operand = v27099;
          var v11876 = typeFlow$$4.checker;
          this.type = v11876.undefinedType;
          break;
        default:
          throw new Error("please implement in derived class");;
      }
      return this;
    }
    function v120(context$$9) {
      var v18410 = _super$$7.prototype;
      var v11878 = v18410.addToControlFlow;
      JAM.call(v11878.call, v11878, [this, context$$9], JAM.policy.p1);
      var v18411 = this.nodeType;
      var v22673 = TypeScript$$4.NodeType;
      var v18412 = v22673.Throw;
      var v11879 = v18411 == v18412;
      if (v11879) {
        context$$9.returnStmt();
      }
      return;
    }
    function UnaryExpression$$1(nodeType$$2, operand) {
      JAM.call(_super$$7.call, _super$$7, [this, nodeType$$2], JAM.policy.p1);
      this.operand = operand;
      this.targetType = null;
      this.castTerm = null;
      return;
    }
    JAM.call(__extends, null, [UnaryExpression$$1, _super$$7], JAM.policy.p1);
    var v11880 = UnaryExpression$$1.prototype;
    v11880.addToControlFlow = v120;
    var v11881 = UnaryExpression$$1.prototype;
    v11881.typeCheck = v121;
    var v11882 = UnaryExpression$$1.prototype;
    v11882.emit = v122;
    return UnaryExpression$$1;
  }
  function v119(_super$$6) {
    function v118() {
      return true;
    }
    function v117() {
      return true;
    }
    function Expression$$1(nodeType$$1) {
      JAM.call(_super$$6.call, _super$$6, [this, nodeType$$1], JAM.policy.p1);
      return;
    }
    JAM.call(__extends, null, [Expression$$1, _super$$6], JAM.policy.p1);
    var v11883 = Expression$$1.prototype;
    v11883.isExpression = v117;
    var v11884 = Expression$$1.prototype;
    v11884.isStatementOrExpression = v118;
    return Expression$$1;
  }
  function v116(_super$$5) {
    function v115(emitter$$4, tokenId$$4, startLine$$4) {
      JAM.call(emitter$$4.emitParensAndCommentsInPlace, emitter$$4, [this, true], JAM.policy.p1);
      JAM.call(emitter$$4.recordSourceMappingStart, emitter$$4, [this]);
      var v11885 = this.id;
      JAM.call(emitter$$4.recordSourceMappingStart, emitter$$4, [v11885]);
      var v18413 = this.id;
      var v11886 = v18413.actualText;
      JAM.call(emitter$$4.writeToOutput, emitter$$4, [v11886]);
      var v11887 = this.id;
      JAM.call(emitter$$4.recordSourceMappingEnd, emitter$$4, [v11887]);
      JAM.call(emitter$$4.writeLineToOutput, emitter$$4, [":"]);
      JAM.call(emitter$$4.recordSourceMappingEnd, emitter$$4, [this]);
      JAM.call(emitter$$4.emitParensAndCommentsInPlace, emitter$$4, [this, false], JAM.policy.p1);
      return;
    }
    function v114(typeFlow$$3) {
      this.type = typeFlow$$3.voidType;
      return this;
    }
    function v113() {
      var v18414 = this.id;
      var v11888 = v18414.actualText;
      return v11888 + ":";
    }
    function Label$$1(id) {
      var v18415 = TypeScript$$4.NodeType;
      var v11889 = v18415.Label;
      JAM.call(_super$$5.call, _super$$5, [this, v11889], JAM.policy.p1);
      this.id = id;
      return;
    }
    JAM.call(__extends, null, [Label$$1, _super$$5], JAM.policy.p1);
    var v11890 = Label$$1.prototype;
    v11890.printLabel = v113;
    var v11891 = Label$$1.prototype;
    v11891.typeCheck = v114;
    var v11892 = Label$$1.prototype;
    v11892.emit = v115;
    return Label$$1;
  }
  function v112(_super$$4) {
    function v111(emitter$$3, tokenId$$3, startLine$$3) {
      return;
    }
    function v110() {
      return true;
    }
    function MissingIdentifier$$1() {
      JAM.call(_super$$4.call, _super$$4, [this, "__missing"], JAM.policy.p1);
      return;
    }
    JAM.call(__extends, null, [MissingIdentifier$$1, _super$$4], JAM.policy.p1);
    var v11893 = MissingIdentifier$$1.prototype;
    v11893.isMissing = v110;
    var v11894 = MissingIdentifier$$1.prototype;
    v11894.emit = v111;
    return MissingIdentifier$$1;
  }
  function v109(_super$$3) {
    function fromToken(token$$4) {
      var v11895 = token$$4.getText();
      var v11896 = token$$4.hasEscapeSequence;
      return new Identifier$$1(v11895, v11896);
    }
    function v108(emitter$$2, tokenId$$2, startLine$$2) {
      JAM.call(emitter$$2.emitJavascriptName, emitter$$2, [this, true], JAM.policy.p1);
      return;
    }
    function v107(typeFlow$$2) {
      return JAM.call(typeFlow$$2.typeCheckName, typeFlow$$2, [this]);
    }
    function v106() {
      var v11898 = this.actualText;
      if (v11898) {
        var v11897 = this.actualText;
        return "id: " + v11897;
      } else {
        return "name node";
      }
      return;
    }
    function v105() {
      var v11899 = this.actualText;
      return "id: " + v11899;
    }
    function v104() {
      return true;
    }
    function v103() {
      return false;
    }
    function v102(actualText$$1, hasEscapeSequence$$1) {
      this.actualText = actualText$$1;
      if (hasEscapeSequence$$1) {
        var v27100 = JAM.call(AST.getResolvedIdentifierName, AST, [actualText$$1]);
        this.text = v27100;
      } else {
        this.text = actualText$$1;
      }
      return;
    }
    function Identifier$$1(actualText, hasEscapeSequence) {
      var v18416 = TypeScript$$4.NodeType;
      var v11900 = v18416.Name;
      JAM.call(_super$$3.call, _super$$3, [this, v11900], JAM.policy.p1);
      this.actualText = actualText;
      this.hasEscapeSequence = hasEscapeSequence;
      this.sym = null;
      this.cloId = -1;
      JAM.call(this.setText, this, [actualText, hasEscapeSequence], JAM.policy.p1);
      return;
    }
    JAM.call(__extends, null, [Identifier$$1, _super$$3], JAM.policy.p1);
    var v11901 = Identifier$$1.prototype;
    v11901.setText = v102;
    var v11902 = Identifier$$1.prototype;
    v11902.isMissing = v103;
    var v11903 = Identifier$$1.prototype;
    v11903.isLeaf = v104;
    var v11904 = Identifier$$1.prototype;
    v11904.treeViewLabel = v105;
    var v11905 = Identifier$$1.prototype;
    v11905.printLabel = v106;
    var v11906 = Identifier$$1.prototype;
    v11906.typeCheck = v107;
    var v11907 = Identifier$$1.prototype;
    v11907.emit = v108;
    Identifier$$1.fromToken = fromToken;
    return Identifier$$1;
  }
  function v101(_super$$2) {
    function v100(typeFlow$$1) {
      var v11908 = this.members;
      var len$$3 = v11908.length;
      typeFlow$$1.nestingLevel++;
      var i$$15 = 0;
      var v11911 = i$$15 < len$$3;
      for (;v11911;) {
        var v18417 = this.members;
        var v11910 = v18417[i$$15];
        if (v11910) {
          var v11909 = this.members;
          var v22674 = this.members;
          var v18418 = v22674[i$$15];
          var v27101 = JAM.call(v18418.typeCheck, v18418, [typeFlow$$1]);
          v11909[i$$15] = v27101;
        }
        i$$15++;
        v11911 = i$$15 < len$$3;
      }
      typeFlow$$1.nestingLevel--;
      return this;
    }
    function v99(emitter$$1, tokenId$$1, startLine$$1) {
      JAM.call(emitter$$1.recordSourceMappingStart, emitter$$1, [this]);
      var v18419 = TypeScript$$4.TokenID;
      var v11912 = v18419.Semicolon;
      JAM.call(emitter$$1.emitJavascriptList, emitter$$1, [this, null, v11912, startLine$$1, false], JAM.policy.p1);
      JAM.call(emitter$$1.recordSourceMappingEnd, emitter$$1, [this]);
      return;
    }
    function v98(ast$$1) {
      var v18420 = ast$$1.nodeType;
      var v22675 = TypeScript$$4.NodeType;
      var v18421 = v22675.List;
      var v11916 = v18420 == v18421;
      if (v11916) {
        var list = ast$$1;
        var i$$14 = 0;
        var v11913 = list.members;
        var len$$2 = v11913.length;
        var v11915 = i$$14 < len$$2;
        for (;v11915;) {
          var v18422 = list.members;
          var v11914 = v18422[i$$14];
          JAM.call(this.append, this, [v11914]);
          i$$14++;
          v11915 = i$$14 < len$$2;
        }
      } else {
        JAM.call(this.append, this, [ast$$1]);
      }
      return this;
    }
    function v97(ast) {
      var v11917 = this.members;
      var v18423 = this.members;
      var v11918 = v18423.length;
      JAM.set(v11917, v11918, ast);
      return this;
    }
    function v96(context$$8) {
      var v11919 = this.members;
      var len$$1 = v11919.length;
      var i$$13 = 0;
      var v11923 = i$$13 < len$$1;
      for (;v11923;) {
        var v11922 = context$$8.noContinuation;
        if (v11922) {
          var v18424 = this.members;
          var v11920 = v18424[i$$13];
          JAM.call(context$$8.addUnreachable, context$$8, [v11920]);
          break;
        } else {
          var v11921 = this.members;
          var v22676 = this.members;
          var v18425 = v22676[i$$13];
          var v27102 = JAM.call(context$$8.walk, context$$8, [v18425, this], JAM.policy.p1);
          v11921[i$$13] = v27102;
        }
        i$$13++;
        v11923 = i$$13 < len$$1;
      }
      var v18426 = context$$8.walker;
      var v11924 = v18426.options;
      v11924.goChildren = false;
      return;
    }
    function ASTList$$1() {
      var v18427 = TypeScript$$4.NodeType;
      var v11925 = v18427.List;
      JAM.call(_super$$2.call, _super$$2, [this, v11925], JAM.policy.p1);
      this.enclosingScope = null;
      var v27103 = new Array;
      this.members = v27103;
      return;
    }
    JAM.call(__extends, null, [ASTList$$1, _super$$2], JAM.policy.p1);
    var v11926 = ASTList$$1.prototype;
    v11926.addToControlFlow = v96;
    var v11927 = ASTList$$1.prototype;
    v11927.append = v97;
    var v11928 = ASTList$$1.prototype;
    v11928.appendAll = v98;
    var v11929 = ASTList$$1.prototype;
    v11929.emit = v99;
    var v11930 = ASTList$$1.prototype;
    v11930.typeCheck = v100;
    return ASTList$$1;
  }
  function v95(_super$$1) {
    function IncompleteAST$$1(min, lim) {
      var v18428 = TypeScript$$4.NodeType;
      var v11931 = v18428.Error;
      JAM.call(_super$$1.call, _super$$1, [this, v11931], JAM.policy.p1);
      this.minChar = min;
      this.limChar = lim;
      return;
    }
    JAM.call(__extends, null, [IncompleteAST$$1, _super$$1], JAM.policy.p1);
    return IncompleteAST$$1;
  }
  function v94(_super) {
    function v93() {
      var v24783 = this.isDeclaration();
      var v22677 = !v24783;
      var v24785 = !v22677;
      if (v24785) {
        var v24784 = this.preComments;
        v22677 = !v24784;
      }
      var v18429 = v22677;
      var v22679 = !v18429;
      if (v22679) {
        var v24786 = this.preComments;
        var v22678 = v24786.length;
        v18429 = v22678 == 0;
      }
      var v11932 = v18429;
      if (v11932) {
        return [];
      }
      var v18430 = this.docComments;
      var v11939 = !v18430;
      if (v11939) {
        var v11933 = this.preComments;
        var preCommentsLength = v11933.length;
        var docComments = [];
        var i$$12 = preCommentsLength - 1;
        var v11938 = i$$12 >= 0;
        for (;v11938;) {
          var v22680 = this.preComments;
          var v18431 = v22680[i$$12];
          var v11937 = v18431.isDocComment();
          if (v11937) {
            var v11934;
            var v22681 = docComments.length;
            var v18433 = v22681 > 0;
            if (v18433) {
              var v22682 = docComments.length;
              var v18432 = v22682 - 1;
              v11934 = docComments[v18432];
            } else {
              v11934 = null;
            }
            var prevDocComment = v11934;
            var v18434 = prevDocComment == null;
            var v22684 = !v18434;
            if (v22684) {
              var v26076 = this.preComments;
              var v25681 = v26076[i$$12];
              var v24787 = v25681.limLine;
              var v24788 = prevDocComment.minLine;
              var v22683 = v24787 == v24788;
              var v24791 = !v22683;
              if (v24791) {
                var v26257 = this.preComments;
                var v26077 = v26257[i$$12];
                var v25682 = v26077.limLine;
                var v24789 = v25682 + 1;
                var v24790 = prevDocComment.minLine;
                v22683 = v24789 == v24790;
              }
              v18434 = v22683;
            }
            var v11936 = v18434;
            if (v11936) {
              var v18435 = this.preComments;
              var v11935 = v18435[i$$12];
              JAM.call(docComments.push, docComments, [v11935]);
              i$$12--;
              v11938 = i$$12 >= 0;
              continue;
            }
          }
          break;
        }
        var v27104 = docComments.reverse();
        this.docComments = v27104;
      }
      return this.docComments;
    }
    function getResolvedIdentifierName(name$$32) {
      var v11940 = !name$$32;
      if (v11940) {
        return "";
      }
      var resolved = "";
      var start$$6 = 0;
      var i$$11 = 0;
      var v22685 = name$$32.length;
      var v18436 = v22685 - 6;
      var v11943 = i$$11 <= v18436;
      for (;v11943;) {
        var v22686 = name$$32.charAt(i$$11);
        var v18437 = v22686 == "\\";
        if (v18437) {
          var v24792 = i$$11 + 1;
          var v22687 = name$$32.charAt(v24792);
          v18437 = v22687 == "u";
        }
        var v11942 = v18437;
        if (v11942) {
          var v18438 = i$$11 + 2;
          var v11941 = JAM.call(name$$32.substr, name$$32, [v18438, 4], JAM.policy.p1);
          var charCode = parseInt(v11941, 16);
          var v22688 = i$$11 - start$$6;
          var v18439 = JAM.call(name$$32.substr, name$$32, [start$$6, v22688], JAM.policy.p1);
          resolved = resolved + v18439;
          var v18440 = String.fromCharCode(charCode);
          resolved = resolved + v18440;
          i$$11 = i$$11 + 6;
          start$$6 = i$$11;
          var v22689 = name$$32.length;
          var v18441 = v22689 - 6;
          v11943 = i$$11 <= v18441;
          continue;
        }
        i$$11++;
        var v22690 = name$$32.length;
        var v18442 = v22690 - 6;
        v11943 = i$$11 <= v18442;
      }
      var v18443 = JAM.call(name$$32.substring, name$$32, [start$$6]);
      resolved = resolved + v18443;
      return resolved;
    }
    function v92() {
      var v18444 = TypeScript$$4.NodeType;
      var v11944 = v18444._map;
      var v11945 = this.nodeType;
      return v11944[v11945];
    }
    function v91(container, freeUses) {
      return;
    }
    function v90(context$$7) {
      var v18445 = context$$7.walker;
      var v11946 = v18445.options;
      v11946.goChildren = false;
      JAM.call(context$$7.addContent, context$$7, [this]);
      return;
    }
    function v89() {
      var v22691 = TypeScript$$4.nodeTypeTable;
      var v22692 = this.nodeType;
      var v18446 = v22691[v22692];
      var v11951 = v18446 !== undefined;
      if (v11951) {
        var v11947 = TypeScript$$4.nodeTypeTable;
        var v11948 = this.nodeType;
        return v11947[v11948];
      } else {
        var v18447 = TypeScript$$4.NodeType;
        var v11949 = v18447._map;
        var v11950 = this.nodeType;
        return v11949[v11950];
      }
      return;
    }
    function v88(context$$6) {
      context$$6.startLine();
      var lineCol = {line:-1, col:-1};
      var limLineCol = {line:-1, col:-1};
      var v18448 = context$$6.parser;
      var v11957 = v18448 !== null;
      if (v11957) {
        var v11952 = context$$6.parser;
        var v11953 = this.minChar;
        JAM.call(v11952.getSourceLineCol, v11952, [lineCol, v11953], JAM.policy.p1);
        var v11954 = context$$6.parser;
        var v11955 = this.limChar;
        JAM.call(v11954.getSourceLineCol, v11954, [limLineCol, v11955], JAM.policy.p1);
        var v26417 = lineCol.line;
        var v26394 = "(" + v26417;
        var v26347 = v26394 + ",";
        var v26348 = lineCol.col;
        var v26258 = v26347 + v26348;
        var v26078 = v26258 + ")--";
        var v25683 = v26078 + "(";
        var v25684 = limLineCol.line;
        var v24793 = v25683 + v25684;
        var v22693 = v24793 + ",";
        var v22694 = limLineCol.col;
        var v18449 = v22693 + v22694;
        var v11956 = v18449 + "): ";
        JAM.call(context$$6.write, context$$6, [v11956]);
      }
      var lab = this.printLabel();
      var v18450 = this.flags;
      var v22695 = TypeScript$$4.ASTFlags;
      var v18451 = v22695.Error;
      var v11958 = JAM.call(TypeScript$$4.hasFlag, TypeScript$$4, [v18450, v18451], JAM.policy.p1);
      if (v11958) {
        lab = lab + " (Error)";
      }
      JAM.call(context$$6.writeLine, context$$6, [lab]);
      return;
    }
    function v87(emitter, tokenId, startLine) {
      JAM.call(emitter.emitParensAndCommentsInPlace, emitter, [this, true], JAM.policy.p1);
      var v11960 = this.nodeType;
      switch(v11960) {
        case TypeScript$$4.NodeType.This:
          JAM.call(emitter.recordSourceMappingStart, emitter, [this]);
          var v18452 = emitter.thisFnc;
          if (v18452) {
            var v24794 = emitter.thisFnc;
            var v22696 = v24794.fncFlags;
            var v24795 = TypeScript$$4.FncFlags;
            var v22697 = v24795.IsFatArrowFunction;
            v18452 = JAM.call(TypeScript$$4.hasFlag, TypeScript$$4, [v22696, v22697], JAM.policy.p1);
          }
          var v11959 = v18452;
          if (v11959) {
            JAM.call(emitter.writeToOutput, emitter, ["_this"]);
          } else {
            JAM.call(emitter.writeToOutput, emitter, ["this"]);
          }
          JAM.call(emitter.recordSourceMappingEnd, emitter, [this]);
          break;
        case TypeScript$$4.NodeType.Null:
          JAM.call(emitter.recordSourceMappingStart, emitter, [this]);
          JAM.call(emitter.writeToOutput, emitter, ["null"]);
          JAM.call(emitter.recordSourceMappingEnd, emitter, [this]);
          break;
        case TypeScript$$4.NodeType.False:
          JAM.call(emitter.recordSourceMappingStart, emitter, [this]);
          JAM.call(emitter.writeToOutput, emitter, ["false"]);
          JAM.call(emitter.recordSourceMappingEnd, emitter, [this]);
          break;
        case TypeScript$$4.NodeType.True:
          JAM.call(emitter.recordSourceMappingStart, emitter, [this]);
          JAM.call(emitter.writeToOutput, emitter, ["true"]);
          JAM.call(emitter.recordSourceMappingEnd, emitter, [this]);
          break;
        case TypeScript$$4.NodeType.Super:
          JAM.call(emitter.recordSourceMappingStart, emitter, [this]);
          emitter.emitSuperReference();
          JAM.call(emitter.recordSourceMappingEnd, emitter, [this]);
          break;
        case TypeScript$$4.NodeType.EndCode:
        ;
        case TypeScript$$4.NodeType.Error:
        ;
        case TypeScript$$4.NodeType.EmptyExpr:
          break;
        case TypeScript$$4.NodeType.Empty:
          JAM.call(emitter.recordSourceMappingStart, emitter, [this]);
          JAM.call(emitter.recordSourceMappingEnd, emitter, [this]);
          break;
        case TypeScript$$4.NodeType.Void:
          JAM.call(emitter.recordSourceMappingStart, emitter, [this]);
          JAM.call(emitter.writeToOutput, emitter, ["void "]);
          JAM.call(emitter.recordSourceMappingEnd, emitter, [this]);
          break;
        default:
          throw new Error("please implement in derived class");;
      }
      JAM.call(emitter.emitParensAndCommentsInPlace, emitter, [this, false], JAM.policy.p1);
      return;
    }
    function v86(typeFlow) {
      var v11961 = this.nodeType;
      switch(v11961) {
        case TypeScript$$4.NodeType.Error:
        ;
        case TypeScript$$4.NodeType.EmptyExpr:
          this.type = typeFlow.anyType;
          break;
        case TypeScript$$4.NodeType.This:
          return JAM.call(typeFlow.typeCheckThis, typeFlow, [this]);
        case TypeScript$$4.NodeType.Null:
          this.type = typeFlow.nullType;
          break;
        case TypeScript$$4.NodeType.False:
        ;
        case TypeScript$$4.NodeType.True:
          this.type = typeFlow.booleanType;
          break;
        case TypeScript$$4.NodeType.Super:
          return JAM.call(typeFlow.typeCheckSuper, typeFlow, [this]);
        case TypeScript$$4.NodeType.EndCode:
        ;
        case TypeScript$$4.NodeType.Empty:
        ;
        case TypeScript$$4.NodeType.Void:
          this.type = typeFlow.voidType;
          break;
        default:
          throw new Error("please implement in derived class");;
      }
      return this;
    }
    function v85() {
      return false;
    }
    function v84() {
      var v11962 = this.isStatementOrExpression();
      if (v11962) {
        var v18453 = this.isCompoundStatement();
        v11962 = !v18453;
      }
      return v11962;
    }
    function v83() {
      return false;
    }
    function v82() {
      return false;
    }
    function v81() {
      return false;
    }
    function AST$$1(nodeType) {
      JAM.call(_super.call, _super, [this]);
      this.nodeType = nodeType;
      this.type = null;
      var v11963 = TypeScript$$4.ASTFlags;
      this.flags = v11963.Writeable;
      var v11964 = TypeScript$$4.CompilerDiagnostics;
      this.passCreated = v11964.analysisPass;
      this.preComments = null;
      this.postComments = null;
      this.docComments = null;
      this.isParenthesized = false;
      return;
    }
    JAM.call(__extends, null, [AST$$1, _super], JAM.policy.p1);
    var v11965 = AST$$1.prototype;
    v11965.isExpression = v81;
    var v11966 = AST$$1.prototype;
    v11966.isStatementOrExpression = v82;
    var v11967 = AST$$1.prototype;
    v11967.isCompoundStatement = v83;
    var v11968 = AST$$1.prototype;
    v11968.isLeaf = v84;
    var v11969 = AST$$1.prototype;
    v11969.isDeclaration = v85;
    var v11970 = AST$$1.prototype;
    v11970.typeCheck = v86;
    var v11971 = AST$$1.prototype;
    v11971.emit = v87;
    var v11972 = AST$$1.prototype;
    v11972.print = v88;
    var v11973 = AST$$1.prototype;
    v11973.printLabel = v89;
    var v11974 = AST$$1.prototype;
    v11974.addToControlFlow = v90;
    var v11975 = AST$$1.prototype;
    v11975.netFreeUses = v91;
    var v11976 = AST$$1.prototype;
    v11976.treeViewLabel = v92;
    AST$$1.getResolvedIdentifierName = getResolvedIdentifierName;
    var v11977 = AST$$1.prototype;
    v11977.getDocComments = v93;
    return AST$$1;
  }
  function v80() {
    function ASTSpan$$1() {
      this.minChar = -1;
      this.limChar = -1;
      return;
    }
    return ASTSpan$$1;
  }
  var ASTSpan = v80();
  TypeScript$$4.ASTSpan = ASTSpan;
  var AST = v94(ASTSpan);
  TypeScript$$4.AST = AST;
  var IncompleteAST = v95(AST);
  TypeScript$$4.IncompleteAST = IncompleteAST;
  var ASTList = v101(AST);
  TypeScript$$4.ASTList = ASTList;
  var Identifier = v109(AST);
  TypeScript$$4.Identifier = Identifier;
  var MissingIdentifier = v112(Identifier);
  TypeScript$$4.MissingIdentifier = MissingIdentifier;
  var Label = v116(AST);
  TypeScript$$4.Label = Label;
  var Expression = v119(AST);
  TypeScript$$4.Expression = Expression;
  var UnaryExpression = v123(Expression);
  TypeScript$$4.UnaryExpression = UnaryExpression;
  var CallExpression = v126(Expression);
  TypeScript$$4.CallExpression = CallExpression;
  var BinaryExpression = v129(Expression);
  TypeScript$$4.BinaryExpression = BinaryExpression;
  var ConditionalExpression = v132(Expression);
  TypeScript$$4.ConditionalExpression = ConditionalExpression;
  var NumberLiteral = v137(Expression);
  TypeScript$$4.NumberLiteral = NumberLiteral;
  var RegexLiteral = v140(Expression);
  TypeScript$$4.RegexLiteral = RegexLiteral;
  var StringLiteral = v145(Expression);
  TypeScript$$4.StringLiteral = StringLiteral;
  var ModuleElement = v146(AST);
  TypeScript$$4.ModuleElement = ModuleElement;
  var ImportDeclaration = v153(ModuleElement);
  TypeScript$$4.ImportDeclaration = ImportDeclaration;
  var BoundDecl = v161(AST);
  TypeScript$$4.BoundDecl = BoundDecl;
  var VarDecl = v167(BoundDecl);
  TypeScript$$4.VarDecl = VarDecl;
  var ArgDecl = v171(BoundDecl);
  TypeScript$$4.ArgDecl = ArgDecl;
  var internalId = 0;
  var FuncDecl = v201(AST);
  TypeScript$$4.FuncDecl = FuncDecl;
  var LocationInfo = v202();
  TypeScript$$4.LocationInfo = LocationInfo;
  var v11978 = TypeScript$$4;
  var v27105 = JAM.new(LocationInfo, ["unknown", null, -1]);
  v11978.unknownLocationInfo = v27105;
  var Script = v210(FuncDecl);
  TypeScript$$4.Script = Script;
  var NamedDeclaration = v212(ModuleElement);
  TypeScript$$4.NamedDeclaration = NamedDeclaration;
  var ModuleDeclaration = v219(NamedDeclaration);
  TypeScript$$4.ModuleDeclaration = ModuleDeclaration;
  var TypeDeclaration = v222(NamedDeclaration);
  TypeScript$$4.TypeDeclaration = TypeDeclaration;
  var ClassDeclaration = v225(TypeDeclaration);
  TypeScript$$4.ClassDeclaration = ClassDeclaration;
  var InterfaceDeclaration = v228(TypeDeclaration);
  TypeScript$$4.InterfaceDeclaration = InterfaceDeclaration;
  var Statement = v233(ModuleElement);
  TypeScript$$4.Statement = Statement;
  var LabeledStatement = v237(Statement);
  TypeScript$$4.LabeledStatement = LabeledStatement;
  var Block = v241(Statement);
  TypeScript$$4.Block = Block;
  var Jump = v246(Statement);
  TypeScript$$4.Jump = Jump;
  var WhileStatement = v251(Statement);
  TypeScript$$4.WhileStatement = WhileStatement;
  var DoWhileStatement = v256(Statement);
  TypeScript$$4.DoWhileStatement = DoWhileStatement;
  var IfStatement = v261(Statement);
  TypeScript$$4.IfStatement = IfStatement;
  var ReturnStatement = v265(Statement);
  TypeScript$$4.ReturnStatement = ReturnStatement;
  var EndCode = v266(AST);
  TypeScript$$4.EndCode = EndCode;
  var ForInStatement = v272(Statement);
  TypeScript$$4.ForInStatement = ForInStatement;
  var ForStatement = v277(Statement);
  TypeScript$$4.ForStatement = ForStatement;
  var WithStatement = v281(Statement);
  TypeScript$$4.WithStatement = WithStatement;
  var SwitchStatement = v286(Statement);
  TypeScript$$4.SwitchStatement = SwitchStatement;
  var CaseStatement = v290(Statement);
  TypeScript$$4.CaseStatement = CaseStatement;
  var TypeReference = v293(AST);
  TypeScript$$4.TypeReference = TypeReference;
  var TryFinally = v298(Statement);
  TypeScript$$4.TryFinally = TryFinally;
  var TryCatch = v303(Statement);
  TypeScript$$4.TryCatch = TryCatch;
  var Try = v307(Statement);
  TypeScript$$4.Try = Try;
  var Catch = v311(Statement);
  TypeScript$$4.Catch = Catch;
  var Finally = v315(Statement);
  TypeScript$$4.Finally = Finally;
  var Comment$$1 = v319(AST);
  TypeScript$$4.Comment = Comment$$1;
  var DebuggerStatement = v321(Statement);
  TypeScript$$4.DebuggerStatement = DebuggerStatement;
  return;
}
function v79(d, b) {
  function __() {
    this.constructor = d;
    return;
  }
  __.prototype = b.prototype;
  var v11979 = d;
  var v27106 = new __;
  v11979.prototype = v27106;
  return;
}
function v78(TypeScript$$3) {
  function v77() {
    function v76(key$$26, data$$32) {
      var lookupData = JAM.call(this.lookup, this, [key$$26]);
      if (lookupData) {
        return false;
      }
      var v11980 = this.keys;
      var v18454 = this.keys;
      var v11981 = v18454.length;
      JAM.set(v11980, v11981, key$$26);
      var v11982 = this.values;
      var v18455 = this.values;
      var v11983 = v18455.length;
      JAM.set(v11982, v11983, data$$32);
      return true;
    }
    function v75(key$$25, findValue) {
      var searchArray = this.keys;
      if (findValue) {
        searchArray = this.values;
      }
      var i$$10 = 0;
      var v18456 = searchArray.length;
      var v11987 = i$$10 < v18456;
      for (;v11987;) {
        var v18457 = searchArray[i$$10];
        var v11986 = v18457 == key$$25;
        if (v11986) {
          var v18458 = this.keys;
          var v11984 = v18458[i$$10];
          var v18459 = this.values;
          var v11985 = v18459[i$$10];
          return {key:v11984, data:v11985};
        }
        i$$10++;
        var v18460 = searchArray.length;
        v11987 = i$$10 < v18460;
      }
      return null;
    }
    function SimpleHashTable$$1() {
      this.keys = [];
      this.values = [];
      return;
    }
    var v11988 = SimpleHashTable$$1.prototype;
    v11988.lookup = v75;
    var v11989 = SimpleHashTable$$1.prototype;
    v11989.add = v76;
    return SimpleHashTable$$1;
  }
  function v74() {
    function v73(key$$24) {
      var current$$2;
      var val$$3 = JAM.call(this.hashFn, this, [key$$24]);
      var v11990 = this.size;
      val$$3 = val$$3 % v11990;
      var v11991 = this.table;
      current$$2 = v11991[val$$3];
      var v11993 = current$$2 != null;
      for (;v11993;) {
        var v18461 = current$$2.key;
        var v11992 = JAM.call(this.equalsFn, this, [key$$24, v18461], JAM.policy.p1);
        if (v11992) {
          return current$$2.data;
        }
        current$$2 = current$$2.next;
        v11993 = current$$2 != null;
      }
      return null;
    }
    function v72() {
      return this.itemCount;
    }
    function v71(key$$23) {
      var current$$1;
      var val$$2 = JAM.call(this.hashFn, this, [key$$23]);
      var v11994 = this.size;
      val$$2 = val$$2 % v11994;
      var result$$3 = null;
      var prevEntry = null;
      var v11995 = this.table;
      current$$1 = v11995[val$$2];
      var v11998 = current$$1 != null;
      for (;v11998;) {
        var v18462 = current$$1.key;
        var v11997 = JAM.call(this.equalsFn, this, [key$$23, v18462], JAM.policy.p1);
        if (v11997) {
          result$$3 = current$$1.data;
          this.itemCount--;
          if (prevEntry) {
            prevEntry.next = current$$1.next;
          } else {
            var v11996 = this.table;
            JAM.set(v11996, val$$2, current$$1.next);
          }
          break;
        }
        prevEntry = current$$1;
        current$$1 = current$$1.next;
        v11998 = current$$1 != null;
      }
      return result$$3;
    }
    function v70(key$$22, data$$31) {
      var current;
      var entry = JAM.new(HashEntry, [key$$22, data$$31]);
      var val$$1 = JAM.call(this.hashFn, this, [key$$22]);
      var v11999 = this.size;
      val$$1 = val$$1 % v11999;
      var v12000 = this.table;
      current = v12000[val$$1];
      var v12002 = current != null;
      for (;v12002;) {
        var v18463 = current.key;
        var v12001 = JAM.call(this.equalsFn, this, [key$$22, v18463], JAM.policy.p1);
        if (v12001) {
          return false;
        }
        current = current.next;
        v12002 = current != null;
      }
      var v12003 = this.table;
      entry.next = v12003[val$$1];
      var v12004 = this.table;
      JAM.set(v12004, val$$1, entry);
      this.itemCount++;
      return true;
    }
    function HashTable$$1(size$$4, hashFn, equalsFn) {
      this.size = size$$4;
      this.hashFn = hashFn;
      this.equalsFn = equalsFn;
      this.itemCount = 0;
      var v27107 = new Array;
      this.table = v27107;
      var i$$9 = 0;
      var v18464 = this.size;
      var v12006 = i$$9 < v18464;
      for (;v12006;) {
        var v12005 = this.table;
        v12005[i$$9] = null;
        i$$9++;
        var v18465 = this.size;
        v12006 = i$$9 < v18465;
      }
      return;
    }
    var v12007 = HashTable$$1.prototype;
    v12007.add = v70;
    var v12008 = HashTable$$1.prototype;
    v12008.remove = v71;
    var v12009 = HashTable$$1.prototype;
    v12009.count = v72;
    var v12010 = HashTable$$1.prototype;
    v12010.lookup = v73;
    return HashTable$$1;
  }
  function v69() {
    function HashEntry$$1(key$$21, data$$30) {
      this.key = key$$21;
      this.data = data$$30;
      return;
    }
    return HashEntry$$1;
  }
  function v68() {
    function v67(key$$20) {
      var v12011 = this.primaryTable;
      var data$$29 = JAM.call(v12011.lookup, v12011, [key$$20]);
      var v12013 = data$$29 != undefined;
      if (v12013) {
        return data$$29;
      } else {
        var v12012 = this.secondaryTable;
        return JAM.call(v12012.lookup, v12012, [key$$20]);
      }
      return;
    }
    function v66() {
      var v18466 = this.primaryTable;
      var v12014 = v18466.count();
      var v18467 = this.secondaryTable;
      var v12015 = v18467.count();
      return v12014 + v12015;
    }
    function v65(fn$$5, context$$5) {
      var v18468 = this.primaryTable;
      var v12016 = JAM.call(v18468.some, v18468, [fn$$5, context$$5], JAM.policy.p1);
      var v18470 = !v12016;
      if (v18470) {
        var v18469 = this.secondaryTable;
        v12016 = JAM.call(v18469.some, v18469, [fn$$5, context$$5], JAM.policy.p1);
      }
      return v12016;
    }
    function v64(fn$$4, context$$4) {
      var v18471 = this.primaryTable;
      var v12017 = JAM.call(v18471.every, v18471, [fn$$4, context$$4], JAM.policy.p1);
      if (v12017) {
        var v18472 = this.secondaryTable;
        v12017 = JAM.call(v18472.every, v18472, [fn$$4, context$$4], JAM.policy.p1);
      }
      return v12017;
    }
    function v63(fn$$3, context$$3) {
      var v12018 = this.primaryTable;
      JAM.call(v12018.map, v12018, [fn$$3, context$$3], JAM.policy.p1);
      var v12019 = this.secondaryTable;
      JAM.call(v12019.map, v12019, [fn$$3, context$$3], JAM.policy.p1);
      return;
    }
    function v62(key$$19, data$$28) {
      var v12022 = this.insertPrimary;
      if (v12022) {
        var v12020 = this.primaryTable;
        return JAM.call(v12020.addOrUpdate, v12020, [key$$19, data$$28], JAM.policy.p1);
      } else {
        var v12021 = this.secondaryTable;
        return JAM.call(v12021.addOrUpdate, v12021, [key$$19, data$$28], JAM.policy.p1);
      }
      return;
    }
    function v61(key$$18, data$$27) {
      var v12025 = this.insertPrimary;
      if (v12025) {
        var v12023 = this.primaryTable;
        return JAM.call(v12023.add, v12023, [key$$18, data$$27], JAM.policy.p1);
      } else {
        var v12024 = this.secondaryTable;
        return JAM.call(v12024.add, v12024, [key$$18, data$$27], JAM.policy.p1);
      }
      return;
    }
    function v60() {
      var v18473 = this.primaryTable;
      var v12026 = v18473.getAllKeys();
      var v18474 = this.secondaryTable;
      var v12027 = v18474.getAllKeys();
      return v12026.concat(v12027);
    }
    function DualStringHashTable$$1(primaryTable, secondaryTable) {
      this.primaryTable = primaryTable;
      this.secondaryTable = secondaryTable;
      this.insertPrimary = true;
      return;
    }
    var v12028 = DualStringHashTable$$1.prototype;
    v12028.getAllKeys = v60;
    var v12029 = DualStringHashTable$$1.prototype;
    v12029.add = v61;
    var v12030 = DualStringHashTable$$1.prototype;
    v12030.addOrUpdate = v62;
    var v12031 = DualStringHashTable$$1.prototype;
    v12031.map = v63;
    var v12032 = DualStringHashTable$$1.prototype;
    v12032.every = v64;
    var v12033 = DualStringHashTable$$1.prototype;
    v12033.some = v65;
    var v12034 = DualStringHashTable$$1.prototype;
    v12034.count = v66;
    var v12035 = DualStringHashTable$$1.prototype;
    v12035.lookup = v67;
    return DualStringHashTable$$1;
  }
  function v59() {
    function v58(key$$17) {
      var v12036 = this.table;
      var data$$26 = v12036[key$$17];
      var v12037 = data$$26 != undefined;
      if (v12037) {
        return data$$26;
      } else {
        return null;
      }
      return;
    }
    function v57() {
      return this.itemCount;
    }
    function v56(fn$$2, context$$2) {
      var k$$4;
      var v12041 = this.table;
      for (k$$4 in v12041) {
        var v12038 = this.table;
        var data$$25 = v12038[k$$4];
        var v12040 = data$$25 != undefined;
        if (v12040) {
          var v22698 = this.table;
          var v18475 = v22698[k$$4];
          var v12039 = JAM.call(fn$$2, null, [k$$4, v18475, context$$2], JAM.policy.p1);
          if (v12039) {
            return true;
          }
        }
      }
      return false;
    }
    function v55(fn$$1, context$$1) {
      var k$$3;
      var v12045 = this.table;
      for (k$$3 in v12045) {
        var v12042 = this.table;
        var data$$24 = v12042[k$$3];
        var v12044 = data$$24 != undefined;
        if (v12044) {
          var v24796 = this.table;
          var v22699 = v24796[k$$3];
          var v18476 = JAM.call(fn$$1, null, [k$$3, v22699, context$$1], JAM.policy.p1);
          var v12043 = !v18476;
          if (v12043) {
            return false;
          }
        }
      }
      return true;
    }
    function v54(fn, context) {
      var k$$2;
      var v12049 = this.table;
      for (k$$2 in v12049) {
        var v12046 = this.table;
        var data$$23 = v12046[k$$2];
        var v12048 = data$$23 != undefined;
        if (v12048) {
          var v18477 = this.table;
          var v12047 = v18477[k$$2];
          JAM.call(fn, null, [k$$2, v12047, context], JAM.policy.p1);
        }
      }
      return;
    }
    function v53(key$$16, data$$22) {
      var v22700 = this.table;
      var v18478 = v22700[key$$16];
      var v12051 = v18478 != undefined;
      if (v12051) {
        var v12050 = this.table;
        JAM.set(v12050, key$$16, data$$22);
        return false;
      }
      var v12052 = this.table;
      JAM.set(v12052, key$$16, data$$22);
      this.itemCount++;
      return true;
    }
    function v52(key$$15, data$$21) {
      var v22701 = this.table;
      var v18479 = v22701[key$$15];
      var v12053 = v18479 != undefined;
      if (v12053) {
        return false;
      }
      var v12054 = this.table;
      JAM.set(v12054, key$$15, data$$21);
      this.itemCount++;
      return true;
    }
    function v51() {
      var result$$2 = [];
      var k$$1;
      var v12057 = this.table;
      for (k$$1 in v12057) {
        var v22702 = this.table;
        var v18480 = v22702[k$$1];
        var v12056 = v18480 != undefined;
        if (v12056) {
          var v12055 = result$$2.length;
          result$$2[v12055] = k$$1;
        }
      }
      return result$$2;
    }
    function StringHashTable$$1() {
      this.itemCount = 0;
      var v27108 = new BlockIntrinsics;
      this.table = v27108;
      return;
    }
    var v12058 = StringHashTable$$1.prototype;
    v12058.getAllKeys = v51;
    var v12059 = StringHashTable$$1.prototype;
    v12059.add = v52;
    var v12060 = StringHashTable$$1.prototype;
    v12060.addOrUpdate = v53;
    var v12061 = StringHashTable$$1.prototype;
    v12061.map = v54;
    var v12062 = StringHashTable$$1.prototype;
    v12062.every = v55;
    var v12063 = StringHashTable$$1.prototype;
    v12063.some = v56;
    var v12064 = StringHashTable$$1.prototype;
    v12064.count = v57;
    var v12065 = StringHashTable$$1.prototype;
    v12065.lookup = v58;
    return StringHashTable$$1;
  }
  function v50() {
    function BlockIntrinsics$$1() {
      this.prototype = undefined;
      this.toString = undefined;
      this.toLocaleString = undefined;
      this.valueOf = undefined;
      this.hasOwnProperty = undefined;
      this.propertyIsEnumerable = undefined;
      this.isPrototypeOf = undefined;
      this["constructor"] = undefined;
      return;
    }
    return BlockIntrinsics$$1;
  }
  function numberHashFn(key$$14) {
    var c2 = 668265261;
    var v12066 = key$$14 ^ 61;
    var v12067 = key$$14 >>> 16;
    key$$14 = v12066 ^ v12067;
    var v12068 = key$$14 << 3;
    key$$14 = key$$14 + v12068;
    var v12069 = key$$14 >>> 4;
    key$$14 = key$$14 ^ v12069;
    key$$14 = key$$14 * c2;
    var v12070 = key$$14 >>> 15;
    key$$14 = key$$14 ^ v12070;
    return key$$14;
  }
  function combineHashes(key1, key2) {
    var v18481 = key1 >> 5;
    var v12071 = v18481 + key1;
    return key2 ^ v12071;
  }
  var BlockIntrinsics = v50();
  TypeScript$$3.BlockIntrinsics = BlockIntrinsics;
  var StringHashTable = v59();
  TypeScript$$3.StringHashTable = StringHashTable;
  var DualStringHashTable = v68();
  TypeScript$$3.DualStringHashTable = DualStringHashTable;
  TypeScript$$3.numberHashFn = numberHashFn;
  TypeScript$$3.combineHashes = combineHashes;
  var HashEntry = v69();
  TypeScript$$3.HashEntry = HashEntry;
  var HashTable = v74();
  TypeScript$$3.HashTable = HashTable;
  var SimpleHashTable = v77();
  TypeScript$$3.SimpleHashTable = SimpleHashTable;
  return;
}
function v49(TypeScript$$2) {
  var v12072 = TypeScript$$2.NodeType;
  var v18482 = !v12072;
  if (v18482) {
    v12072 = TypeScript$$2.NodeType = {};
  }
  var NodeType$$inline_0 = v12072;
  NodeType$$inline_0._map = [];
  var v12073 = NodeType$$inline_0._map;
  v12073[0] = "None";
  NodeType$$inline_0.None = 0;
  var v12074 = NodeType$$inline_0._map;
  v12074[1] = "Empty";
  NodeType$$inline_0.Empty = 1;
  var v12075 = NodeType$$inline_0._map;
  v12075[2] = "EmptyExpr";
  NodeType$$inline_0.EmptyExpr = 2;
  var v12076 = NodeType$$inline_0._map;
  v12076[3] = "True";
  NodeType$$inline_0.True = 3;
  var v12077 = NodeType$$inline_0._map;
  v12077[4] = "False";
  NodeType$$inline_0.False = 4;
  var v12078 = NodeType$$inline_0._map;
  v12078[5] = "This";
  NodeType$$inline_0.This = 5;
  var v12079 = NodeType$$inline_0._map;
  v12079[6] = "Super";
  NodeType$$inline_0.Super = 6;
  var v12080 = NodeType$$inline_0._map;
  v12080[7] = "QString";
  NodeType$$inline_0.QString = 7;
  var v12081 = NodeType$$inline_0._map;
  v12081[8] = "Regex";
  NodeType$$inline_0.Regex = 8;
  var v12082 = NodeType$$inline_0._map;
  v12082[9] = "Null";
  NodeType$$inline_0.Null = 9;
  var v12083 = NodeType$$inline_0._map;
  v12083[10] = "ArrayLit";
  NodeType$$inline_0.ArrayLit = 10;
  var v12084 = NodeType$$inline_0._map;
  v12084[11] = "ObjectLit";
  NodeType$$inline_0.ObjectLit = 11;
  var v12085 = NodeType$$inline_0._map;
  v12085[12] = "Void";
  NodeType$$inline_0.Void = 12;
  var v12086 = NodeType$$inline_0._map;
  v12086[13] = "Comma";
  NodeType$$inline_0.Comma = 13;
  var v12087 = NodeType$$inline_0._map;
  v12087[14] = "Pos";
  NodeType$$inline_0.Pos = 14;
  var v12088 = NodeType$$inline_0._map;
  v12088[15] = "Neg";
  NodeType$$inline_0.Neg = 15;
  var v12089 = NodeType$$inline_0._map;
  v12089[16] = "Delete";
  NodeType$$inline_0.Delete = 16;
  var v12090 = NodeType$$inline_0._map;
  v12090[17] = "Await";
  NodeType$$inline_0.Await = 17;
  var v12091 = NodeType$$inline_0._map;
  v12091[18] = "In";
  NodeType$$inline_0.In = 18;
  var v12092 = NodeType$$inline_0._map;
  v12092[19] = "Dot";
  NodeType$$inline_0.Dot = 19;
  var v12093 = NodeType$$inline_0._map;
  v12093[20] = "From";
  NodeType$$inline_0.From = 20;
  var v12094 = NodeType$$inline_0._map;
  v12094[21] = "Is";
  NodeType$$inline_0.Is = 21;
  var v12095 = NodeType$$inline_0._map;
  v12095[22] = "InstOf";
  NodeType$$inline_0.InstOf = 22;
  var v12096 = NodeType$$inline_0._map;
  v12096[23] = "Typeof";
  NodeType$$inline_0.Typeof = 23;
  var v12097 = NodeType$$inline_0._map;
  v12097[24] = "NumberLit";
  NodeType$$inline_0.NumberLit = 24;
  var v12098 = NodeType$$inline_0._map;
  v12098[25] = "Name";
  NodeType$$inline_0.Name = 25;
  var v12099 = NodeType$$inline_0._map;
  v12099[26] = "TypeRef";
  NodeType$$inline_0.TypeRef = 26;
  var v12100 = NodeType$$inline_0._map;
  v12100[27] = "Index";
  NodeType$$inline_0.Index = 27;
  var v12101 = NodeType$$inline_0._map;
  v12101[28] = "Call";
  NodeType$$inline_0.Call = 28;
  var v12102 = NodeType$$inline_0._map;
  v12102[29] = "New";
  NodeType$$inline_0.New = 29;
  var v12103 = NodeType$$inline_0._map;
  v12103[30] = "Asg";
  NodeType$$inline_0.Asg = 30;
  var v12104 = NodeType$$inline_0._map;
  v12104[31] = "AsgAdd";
  NodeType$$inline_0.AsgAdd = 31;
  var v12105 = NodeType$$inline_0._map;
  v12105[32] = "AsgSub";
  NodeType$$inline_0.AsgSub = 32;
  var v12106 = NodeType$$inline_0._map;
  v12106[33] = "AsgDiv";
  NodeType$$inline_0.AsgDiv = 33;
  var v12107 = NodeType$$inline_0._map;
  v12107[34] = "AsgMul";
  NodeType$$inline_0.AsgMul = 34;
  var v12108 = NodeType$$inline_0._map;
  v12108[35] = "AsgMod";
  NodeType$$inline_0.AsgMod = 35;
  var v12109 = NodeType$$inline_0._map;
  v12109[36] = "AsgAnd";
  NodeType$$inline_0.AsgAnd = 36;
  var v12110 = NodeType$$inline_0._map;
  v12110[37] = "AsgXor";
  NodeType$$inline_0.AsgXor = 37;
  var v12111 = NodeType$$inline_0._map;
  v12111[38] = "AsgOr";
  NodeType$$inline_0.AsgOr = 38;
  var v12112 = NodeType$$inline_0._map;
  v12112[39] = "AsgLsh";
  NodeType$$inline_0.AsgLsh = 39;
  var v12113 = NodeType$$inline_0._map;
  v12113[40] = "AsgRsh";
  NodeType$$inline_0.AsgRsh = 40;
  var v12114 = NodeType$$inline_0._map;
  v12114[41] = "AsgRs2";
  NodeType$$inline_0.AsgRs2 = 41;
  var v12115 = NodeType$$inline_0._map;
  v12115[42] = "ConditionalExpression";
  NodeType$$inline_0.ConditionalExpression = 42;
  var v12116 = NodeType$$inline_0._map;
  v12116[43] = "LogOr";
  NodeType$$inline_0.LogOr = 43;
  var v12117 = NodeType$$inline_0._map;
  v12117[44] = "LogAnd";
  NodeType$$inline_0.LogAnd = 44;
  var v12118 = NodeType$$inline_0._map;
  v12118[45] = "Or";
  NodeType$$inline_0.Or = 45;
  var v12119 = NodeType$$inline_0._map;
  v12119[46] = "Xor";
  NodeType$$inline_0.Xor = 46;
  var v12120 = NodeType$$inline_0._map;
  v12120[47] = "And";
  NodeType$$inline_0.And = 47;
  var v12121 = NodeType$$inline_0._map;
  v12121[48] = "Eq";
  NodeType$$inline_0.Eq = 48;
  var v12122 = NodeType$$inline_0._map;
  v12122[49] = "Ne";
  NodeType$$inline_0.Ne = 49;
  var v12123 = NodeType$$inline_0._map;
  v12123[50] = "Eqv";
  NodeType$$inline_0.Eqv = 50;
  var v12124 = NodeType$$inline_0._map;
  v12124[51] = "NEqv";
  NodeType$$inline_0.NEqv = 51;
  var v12125 = NodeType$$inline_0._map;
  v12125[52] = "Lt";
  NodeType$$inline_0.Lt = 52;
  var v12126 = NodeType$$inline_0._map;
  v12126[53] = "Le";
  NodeType$$inline_0.Le = 53;
  var v12127 = NodeType$$inline_0._map;
  v12127[54] = "Gt";
  NodeType$$inline_0.Gt = 54;
  var v12128 = NodeType$$inline_0._map;
  v12128[55] = "Ge";
  NodeType$$inline_0.Ge = 55;
  var v12129 = NodeType$$inline_0._map;
  v12129[56] = "Add";
  NodeType$$inline_0.Add = 56;
  var v12130 = NodeType$$inline_0._map;
  v12130[57] = "Sub";
  NodeType$$inline_0.Sub = 57;
  var v12131 = NodeType$$inline_0._map;
  v12131[58] = "Mul";
  NodeType$$inline_0.Mul = 58;
  var v12132 = NodeType$$inline_0._map;
  v12132[59] = "Div";
  NodeType$$inline_0.Div = 59;
  var v12133 = NodeType$$inline_0._map;
  v12133[60] = "Mod";
  NodeType$$inline_0.Mod = 60;
  var v12134 = NodeType$$inline_0._map;
  v12134[61] = "Lsh";
  NodeType$$inline_0.Lsh = 61;
  var v12135 = NodeType$$inline_0._map;
  v12135[62] = "Rsh";
  NodeType$$inline_0.Rsh = 62;
  var v12136 = NodeType$$inline_0._map;
  v12136[63] = "Rs2";
  NodeType$$inline_0.Rs2 = 63;
  var v12137 = NodeType$$inline_0._map;
  v12137[64] = "Not";
  NodeType$$inline_0.Not = 64;
  var v12138 = NodeType$$inline_0._map;
  v12138[65] = "LogNot";
  NodeType$$inline_0.LogNot = 65;
  var v12139 = NodeType$$inline_0._map;
  v12139[66] = "IncPre";
  NodeType$$inline_0.IncPre = 66;
  var v12140 = NodeType$$inline_0._map;
  v12140[67] = "DecPre";
  NodeType$$inline_0.DecPre = 67;
  var v12141 = NodeType$$inline_0._map;
  v12141[68] = "IncPost";
  NodeType$$inline_0.IncPost = 68;
  var v12142 = NodeType$$inline_0._map;
  v12142[69] = "DecPost";
  NodeType$$inline_0.DecPost = 69;
  var v12143 = NodeType$$inline_0._map;
  v12143[70] = "TypeAssertion";
  NodeType$$inline_0.TypeAssertion = 70;
  var v12144 = NodeType$$inline_0._map;
  v12144[71] = "FuncDecl";
  NodeType$$inline_0.FuncDecl = 71;
  var v12145 = NodeType$$inline_0._map;
  v12145[72] = "Member";
  NodeType$$inline_0.Member = 72;
  var v12146 = NodeType$$inline_0._map;
  v12146[73] = "VarDecl";
  NodeType$$inline_0.VarDecl = 73;
  var v12147 = NodeType$$inline_0._map;
  v12147[74] = "ArgDecl";
  NodeType$$inline_0.ArgDecl = 74;
  var v12148 = NodeType$$inline_0._map;
  v12148[75] = "Return";
  NodeType$$inline_0.Return = 75;
  var v12149 = NodeType$$inline_0._map;
  v12149[76] = "Break";
  NodeType$$inline_0.Break = 76;
  var v12150 = NodeType$$inline_0._map;
  v12150[77] = "Continue";
  NodeType$$inline_0.Continue = 77;
  var v12151 = NodeType$$inline_0._map;
  v12151[78] = "Throw";
  NodeType$$inline_0.Throw = 78;
  var v12152 = NodeType$$inline_0._map;
  v12152[79] = "For";
  NodeType$$inline_0.For = 79;
  var v12153 = NodeType$$inline_0._map;
  v12153[80] = "ForIn";
  NodeType$$inline_0.ForIn = 80;
  var v12154 = NodeType$$inline_0._map;
  v12154[81] = "If";
  NodeType$$inline_0.If = 81;
  var v12155 = NodeType$$inline_0._map;
  v12155[82] = "While";
  NodeType$$inline_0.While = 82;
  var v12156 = NodeType$$inline_0._map;
  v12156[83] = "DoWhile";
  NodeType$$inline_0.DoWhile = 83;
  var v12157 = NodeType$$inline_0._map;
  v12157[84] = "Block";
  NodeType$$inline_0.Block = 84;
  var v12158 = NodeType$$inline_0._map;
  v12158[85] = "Case";
  NodeType$$inline_0.Case = 85;
  var v12159 = NodeType$$inline_0._map;
  v12159[86] = "Switch";
  NodeType$$inline_0.Switch = 86;
  var v12160 = NodeType$$inline_0._map;
  v12160[87] = "Try";
  NodeType$$inline_0.Try = 87;
  var v12161 = NodeType$$inline_0._map;
  v12161[88] = "TryCatch";
  NodeType$$inline_0.TryCatch = 88;
  var v12162 = NodeType$$inline_0._map;
  v12162[89] = "TryFinally";
  NodeType$$inline_0.TryFinally = 89;
  var v12163 = NodeType$$inline_0._map;
  v12163[90] = "Finally";
  NodeType$$inline_0.Finally = 90;
  var v12164 = NodeType$$inline_0._map;
  v12164[91] = "Catch";
  NodeType$$inline_0.Catch = 91;
  var v12165 = NodeType$$inline_0._map;
  v12165[92] = "List";
  NodeType$$inline_0.List = 92;
  var v12166 = NodeType$$inline_0._map;
  v12166[93] = "Script";
  NodeType$$inline_0.Script = 93;
  var v12167 = NodeType$$inline_0._map;
  v12167[94] = "ClassDeclaration";
  NodeType$$inline_0.ClassDeclaration = 94;
  var v12168 = NodeType$$inline_0._map;
  v12168[95] = "InterfaceDeclaration";
  NodeType$$inline_0.InterfaceDeclaration = 95;
  var v12169 = NodeType$$inline_0._map;
  v12169[96] = "ModuleDeclaration";
  NodeType$$inline_0.ModuleDeclaration = 96;
  var v12170 = NodeType$$inline_0._map;
  v12170[97] = "ImportDeclaration";
  NodeType$$inline_0.ImportDeclaration = 97;
  var v12171 = NodeType$$inline_0._map;
  v12171[98] = "With";
  NodeType$$inline_0.With = 98;
  var v12172 = NodeType$$inline_0._map;
  v12172[99] = "Label";
  NodeType$$inline_0.Label = 99;
  var v12173 = NodeType$$inline_0._map;
  v12173[100] = "LabeledStatement";
  NodeType$$inline_0.LabeledStatement = 100;
  var v12174 = NodeType$$inline_0._map;
  v12174[101] = "EBStart";
  NodeType$$inline_0.EBStart = 101;
  var v12175 = NodeType$$inline_0._map;
  v12175[102] = "GotoEB";
  NodeType$$inline_0.GotoEB = 102;
  var v12176 = NodeType$$inline_0._map;
  v12176[103] = "EndCode";
  NodeType$$inline_0.EndCode = 103;
  var v12177 = NodeType$$inline_0._map;
  v12177[104] = "Error";
  NodeType$$inline_0.Error = 104;
  var v12178 = NodeType$$inline_0._map;
  v12178[105] = "Comment";
  NodeType$$inline_0.Comment = 105;
  var v12179 = NodeType$$inline_0._map;
  v12179[106] = "Debugger";
  NodeType$$inline_0.Debugger = 106;
  NodeType$$inline_0.GeneralNode = NodeType$$inline_0.FuncDecl;
  NodeType$$inline_0.LastAsg = NodeType$$inline_0.AsgRs2;
  var NodeType = TypeScript$$2.NodeType;
  return;
}
function v48(TypeScript$$1) {
  function v47(ModuleGenTarget$$1) {
    ModuleGenTarget$$1._map = [];
    ModuleGenTarget$$1.Synchronous = 0;
    ModuleGenTarget$$1.Asynchronous = 1;
    ModuleGenTarget$$1.Local = 1 << 1;
    return;
  }
  function v46(CodeGenTarget$$1) {
    CodeGenTarget$$1._map = [];
    CodeGenTarget$$1.ES3 = 0;
    CodeGenTarget$$1.ES5 = 1;
    return;
  }
  function v45(TypeRelationshipFlags$$1) {
    TypeRelationshipFlags$$1._map = [];
    TypeRelationshipFlags$$1.SuccessfulComparison = 0;
    TypeRelationshipFlags$$1.SourceIsNullTargetIsVoidOrUndefined = 1;
    TypeRelationshipFlags$$1.RequiredPropertyIsMissing = 1 << 1;
    TypeRelationshipFlags$$1.IncompatibleSignatures = 1 << 2;
    TypeRelationshipFlags$$1.SourceSignatureHasTooManyParameters = 3;
    TypeRelationshipFlags$$1.IncompatibleReturnTypes = 1 << 4;
    TypeRelationshipFlags$$1.IncompatiblePropertyTypes = 1 << 5;
    TypeRelationshipFlags$$1.IncompatibleParameterTypes = 1 << 6;
    return;
  }
  function v44(TypeFlags$$1) {
    TypeFlags$$1._map = [];
    TypeFlags$$1.None = 0;
    TypeFlags$$1.HasImplementation = 1;
    TypeFlags$$1.HasSelfReference = 1 << 1;
    TypeFlags$$1.MergeResult = 1 << 2;
    TypeFlags$$1.IsEnum = 1 << 3;
    TypeFlags$$1.BuildingName = 1 << 4;
    TypeFlags$$1.HasBaseType = 1 << 5;
    TypeFlags$$1.HasBaseTypeOfObject = 1 << 6;
    TypeFlags$$1.IsClass = 1 << 7;
    return;
  }
  function v43(SignatureFlags$$1) {
    SignatureFlags$$1._map = [];
    SignatureFlags$$1.None = 0;
    SignatureFlags$$1.IsIndexer = 1;
    SignatureFlags$$1.IsStringIndexer = 1 << 1;
    SignatureFlags$$1.IsNumberIndexer = 1 << 2;
    return;
  }
  function v42(FncFlags$$1) {
    FncFlags$$1._map = [];
    FncFlags$$1.None = 0;
    FncFlags$$1.Exported = 1;
    FncFlags$$1.Private = 1 << 1;
    FncFlags$$1.Public = 1 << 2;
    FncFlags$$1.Ambient = 1 << 3;
    FncFlags$$1.Static = 1 << 4;
    FncFlags$$1.LocalStatic = 1 << 5;
    FncFlags$$1.GetAccessor = 1 << 6;
    FncFlags$$1.SetAccessor = 1 << 7;
    FncFlags$$1.Definition = 1 << 8;
    FncFlags$$1.Signature = 1 << 9;
    FncFlags$$1.Method = 1 << 10;
    FncFlags$$1.HasReturnExpression = 1 << 11;
    FncFlags$$1.CallMember = 1 << 12;
    FncFlags$$1.ConstructMember = 1 << 13;
    FncFlags$$1.HasSelfReference = 1 << 14;
    FncFlags$$1.IsFatArrowFunction = 1 << 15;
    FncFlags$$1.IndexerMember = 1 << 16;
    FncFlags$$1.IsFunctionExpression = 1 << 17;
    FncFlags$$1.ClassMethod = 1 << 18;
    FncFlags$$1.ClassPropertyMethodExported = 1 << 19;
    FncFlags$$1.HasSuperReferenceInFatArrowFunction = 1 << 20;
    FncFlags$$1.IsPropertyBound = 1 << 21;
    return;
  }
  function v41(VarFlags$$1) {
    VarFlags$$1._map = [];
    VarFlags$$1.None = 0;
    VarFlags$$1.Exported = 1;
    VarFlags$$1.Private = 1 << 1;
    VarFlags$$1.Public = 1 << 2;
    VarFlags$$1.Ambient = 1 << 3;
    VarFlags$$1.Static = 1 << 4;
    VarFlags$$1.LocalStatic = 1 << 5;
    VarFlags$$1.GetAccessor = 1 << 6;
    VarFlags$$1.SetAccessor = 1 << 7;
    VarFlags$$1.AutoInit = 1 << 8;
    VarFlags$$1.Property = 1 << 9;
    VarFlags$$1.Readonly = 1 << 10;
    VarFlags$$1.Class = 1 << 11;
    VarFlags$$1.ClassProperty = 1 << 12;
    VarFlags$$1.ClassBodyProperty = 1 << 13;
    VarFlags$$1.ClassConstructorProperty = 1 << 14;
    VarFlags$$1.ClassSuperMustBeFirstCallInConstructor = 1 << 15;
    VarFlags$$1.Constant = 1 << 16;
    VarFlags$$1.MustCaptureThis = 1 << 17;
    return;
  }
  function v40(SymbolFlags$$1) {
    SymbolFlags$$1._map = [];
    SymbolFlags$$1.None = 0;
    SymbolFlags$$1.Exported = 1;
    SymbolFlags$$1.Private = 1 << 1;
    SymbolFlags$$1.Public = 1 << 2;
    SymbolFlags$$1.Ambient = 1 << 3;
    SymbolFlags$$1.Static = 1 << 4;
    SymbolFlags$$1.LocalStatic = 1 << 5;
    SymbolFlags$$1.GetAccessor = 1 << 6;
    SymbolFlags$$1.SetAccessor = 1 << 7;
    SymbolFlags$$1.Property = 1 << 8;
    SymbolFlags$$1.Readonly = 1 << 9;
    SymbolFlags$$1.ModuleMember = 1 << 10;
    SymbolFlags$$1.InterfaceMember = 1 << 11;
    SymbolFlags$$1.ClassMember = 1 << 12;
    SymbolFlags$$1.BuiltIn = 1 << 13;
    SymbolFlags$$1.TypeSetDuringScopeAssignment = 1 << 14;
    SymbolFlags$$1.Constant = 1 << 15;
    SymbolFlags$$1.Optional = 1 << 16;
    SymbolFlags$$1.RecursivelyReferenced = 1 << 17;
    SymbolFlags$$1.Bound = 1 << 18;
    SymbolFlags$$1.CompilerGenerated = 1 << 19;
    return;
  }
  function v39(ModuleFlags$$1) {
    ModuleFlags$$1._map = [];
    ModuleFlags$$1.None = 0;
    ModuleFlags$$1.Exported = 1;
    ModuleFlags$$1.Private = 1 << 1;
    ModuleFlags$$1.Public = 1 << 2;
    ModuleFlags$$1.Ambient = 1 << 3;
    ModuleFlags$$1.Static = 1 << 4;
    ModuleFlags$$1.LocalStatic = 1 << 5;
    ModuleFlags$$1.GetAccessor = 1 << 6;
    ModuleFlags$$1.SetAccessor = 1 << 7;
    ModuleFlags$$1.IsEnum = 1 << 8;
    ModuleFlags$$1.ShouldEmitModuleDecl = 1 << 9;
    ModuleFlags$$1.IsWholeFile = 1 << 10;
    ModuleFlags$$1.IsDynamic = 1 << 11;
    ModuleFlags$$1.MustCaptureThis = 1 << 12;
    return;
  }
  function v38(DeclFlags$$1) {
    DeclFlags$$1._map = [];
    DeclFlags$$1.None = 0;
    DeclFlags$$1.Exported = 1;
    DeclFlags$$1.Private = 1 << 1;
    DeclFlags$$1.Public = 1 << 2;
    DeclFlags$$1.Ambient = 1 << 3;
    DeclFlags$$1.Static = 1 << 4;
    DeclFlags$$1.LocalStatic = 1 << 5;
    DeclFlags$$1.GetAccessor = 1 << 6;
    DeclFlags$$1.SetAccessor = 1 << 7;
    return;
  }
  function v37(ASTFlags$$1) {
    ASTFlags$$1._map = [];
    ASTFlags$$1.None = 0;
    ASTFlags$$1.ExplicitSemicolon = 1;
    ASTFlags$$1.AutomaticSemicolon = 1 << 1;
    ASTFlags$$1.Writeable = 1 << 2;
    ASTFlags$$1.Error = 1 << 3;
    ASTFlags$$1.DotLHSPartial = 1 << 4;
    ASTFlags$$1.DotLHS = 1 << 5;
    ASTFlags$$1.IsStatement = 1 << 6;
    ASTFlags$$1.StrictMode = 1 << 7;
    ASTFlags$$1.PossibleOptionalParameter = 1 << 8;
    ASTFlags$$1.ClassBaseConstructorCall = 1 << 9;
    ASTFlags$$1.OptionalName = 1 << 10;
    ASTFlags$$1.SkipNextRParen = 1 << 11;
    return;
  }
  function v36(Modifiers$$1) {
    Modifiers$$1._map = [];
    Modifiers$$1.None = 0;
    Modifiers$$1.Private = 1;
    Modifiers$$1.Public = 1 << 1;
    Modifiers$$1.Readonly = 1 << 2;
    Modifiers$$1.Ambient = 1 << 3;
    Modifiers$$1.Exported = 1 << 4;
    Modifiers$$1.Getter = 1 << 5;
    Modifiers$$1.Setter = 1 << 6;
    Modifiers$$1.Static = 1 << 7;
    return;
  }
  function v35(AllowedElements$$1) {
    AllowedElements$$1._map = [];
    AllowedElements$$1.None = 0;
    AllowedElements$$1.ModuleDeclarations = 1 << 2;
    AllowedElements$$1.ClassDeclarations = 1 << 3;
    AllowedElements$$1.InterfaceDeclarations = 1 << 4;
    AllowedElements$$1.AmbientDeclarations = 1 << 10;
    AllowedElements$$1.Properties = 1 << 11;
    var v22703 = AllowedElements$$1.ModuleDeclarations;
    var v22704 = AllowedElements$$1.ClassDeclarations;
    var v18483 = v22703 | v22704;
    var v18484 = AllowedElements$$1.InterfaceDeclarations;
    var v12180 = v18483 | v18484;
    var v12181 = AllowedElements$$1.AmbientDeclarations;
    AllowedElements$$1.Global = v12180 | v12181;
    var v12182 = AllowedElements$$1.Global;
    var v12183 = AllowedElements$$1.Properties;
    AllowedElements$$1.QuickParse = v12182 | v12183;
    return;
  }
  function v34(ErrorRecoverySet$$1) {
    ErrorRecoverySet$$1._map = [];
    ErrorRecoverySet$$1.None = 0;
    ErrorRecoverySet$$1.Comma = 1;
    ErrorRecoverySet$$1.SColon = 1 << 1;
    ErrorRecoverySet$$1.Asg = 1 << 2;
    ErrorRecoverySet$$1.BinOp = 1 << 3;
    ErrorRecoverySet$$1.RBrack = 1 << 4;
    ErrorRecoverySet$$1.RCurly = 1 << 5;
    ErrorRecoverySet$$1.RParen = 1 << 6;
    ErrorRecoverySet$$1.Dot = 1 << 7;
    ErrorRecoverySet$$1.Colon = 1 << 8;
    ErrorRecoverySet$$1.PrimType = 1 << 9;
    ErrorRecoverySet$$1.AddOp = 1 << 10;
    ErrorRecoverySet$$1.LCurly = 1 << 11;
    ErrorRecoverySet$$1.PreOp = 1 << 12;
    ErrorRecoverySet$$1.RegExp = 1 << 13;
    ErrorRecoverySet$$1.LParen = 1 << 14;
    ErrorRecoverySet$$1.LBrack = 1 << 15;
    ErrorRecoverySet$$1.Scope = 1 << 16;
    ErrorRecoverySet$$1.In = 1 << 17;
    ErrorRecoverySet$$1.SCase = 1 << 18;
    ErrorRecoverySet$$1.Else = 1 << 19;
    ErrorRecoverySet$$1.Catch = 1 << 20;
    ErrorRecoverySet$$1.Var = 1 << 21;
    ErrorRecoverySet$$1.Stmt = 1 << 22;
    ErrorRecoverySet$$1.While = 1 << 23;
    ErrorRecoverySet$$1.ID = 1 << 24;
    ErrorRecoverySet$$1.Prefix = 1 << 25;
    ErrorRecoverySet$$1.Literal = 1 << 26;
    ErrorRecoverySet$$1.RLit = 1 << 27;
    ErrorRecoverySet$$1.Func = 1 << 28;
    ErrorRecoverySet$$1.EOF = 1 << 29;
    ErrorRecoverySet$$1.TypeScriptS = 1 << 30;
    var v26429 = ErrorRecoverySet$$1.SColon;
    var v26430 = ErrorRecoverySet$$1.AddOp;
    var v26418 = v26429 | v26430;
    var v26419 = ErrorRecoverySet$$1.LCurly;
    var v26395 = v26418 | v26419;
    var v26396 = ErrorRecoverySet$$1.PreOp;
    var v26349 = v26395 | v26396;
    var v26350 = ErrorRecoverySet$$1.RegExp;
    var v26259 = v26349 | v26350;
    var v26260 = ErrorRecoverySet$$1.LParen;
    var v26079 = v26259 | v26260;
    var v26080 = ErrorRecoverySet$$1.LBrack;
    var v25685 = v26079 | v26080;
    var v25686 = ErrorRecoverySet$$1.ID;
    var v24797 = v25685 | v25686;
    var v24798 = ErrorRecoverySet$$1.Prefix;
    var v22705 = v24797 | v24798;
    var v22706 = ErrorRecoverySet$$1.RLit;
    var v18485 = v22705 | v22706;
    var v18486 = ErrorRecoverySet$$1.Func;
    var v12184 = v18485 | v18486;
    var v12185 = ErrorRecoverySet$$1.Literal;
    ErrorRecoverySet$$1.ExprStart = v12184 | v12185;
    var v25687 = ErrorRecoverySet$$1.ExprStart;
    var v25688 = ErrorRecoverySet$$1.SColon;
    var v24799 = v25687 | v25688;
    var v24800 = ErrorRecoverySet$$1.Var;
    var v22707 = v24799 | v24800;
    var v22708 = ErrorRecoverySet$$1.Stmt;
    var v18487 = v22707 | v22708;
    var v18488 = ErrorRecoverySet$$1.While;
    var v12186 = v18487 | v18488;
    var v12187 = ErrorRecoverySet$$1.TypeScriptS;
    ErrorRecoverySet$$1.StmtStart = v12186 | v12187;
    var v18489 = ErrorRecoverySet$$1.Dot;
    var v18490 = ErrorRecoverySet$$1.LParen;
    var v12188 = v18489 | v18490;
    var v12189 = ErrorRecoverySet$$1.LBrack;
    ErrorRecoverySet$$1.Postfix = v12188 | v12189;
    return;
  }
  function hasFlag(val, flag$$1) {
    var v12190 = val & flag$$1;
    return v12190 != 0;
  }
  function ToDeclFlags(fncOrVarOrSymbolOrModuleFlags) {
    return fncOrVarOrSymbolOrModuleFlags;
  }
  function flagsToString(e$$7, flags$$1) {
    var builder = "";
    var i$$8 = 1;
    var v18491 = 1 << 31;
    var v12194 = i$$8 < v18491;
    for (;v12194;) {
      var v18492 = flags$$1 & i$$8;
      var v12193 = v18492 != 0;
      if (v12193) {
        var k;
        for (k in e$$7) {
          var v18493 = e$$7[k];
          var v12192 = v18493 == i$$8;
          if (v12192) {
            var v18494 = builder.length;
            var v12191 = v18494 > 0;
            if (v12191) {
              builder = builder + "|";
            }
            builder = builder + k;
            break;
          }
        }
      }
      i$$8 = i$$8 << 1;
      var v18495 = 1 << 31;
      v12194 = i$$8 < v18495;
    }
    return builder;
  }
  TypeScript$$1.hasFlag = hasFlag;
  var v18496 = TypeScript$$1.ErrorRecoverySet;
  var v22709 = !v18496;
  if (v22709) {
    v18496 = TypeScript$$1.ErrorRecoverySet = {};
  }
  var v12195 = v18496;
  v34(v12195);
  var ErrorRecoverySet = TypeScript$$1.ErrorRecoverySet;
  var v18497 = TypeScript$$1.AllowedElements;
  var v22710 = !v18497;
  if (v22710) {
    v18497 = TypeScript$$1.AllowedElements = {};
  }
  var v12196 = v18497;
  v35(v12196);
  var AllowedElements = TypeScript$$1.AllowedElements;
  var v18498 = TypeScript$$1.Modifiers;
  var v22711 = !v18498;
  if (v22711) {
    v18498 = TypeScript$$1.Modifiers = {};
  }
  var v12197 = v18498;
  v36(v12197);
  var Modifiers = TypeScript$$1.Modifiers;
  var v18499 = TypeScript$$1.ASTFlags;
  var v22712 = !v18499;
  if (v22712) {
    v18499 = TypeScript$$1.ASTFlags = {};
  }
  var v12198 = v18499;
  v37(v12198);
  var ASTFlags = TypeScript$$1.ASTFlags;
  var v18500 = TypeScript$$1.DeclFlags;
  var v22713 = !v18500;
  if (v22713) {
    v18500 = TypeScript$$1.DeclFlags = {};
  }
  var v12199 = v18500;
  v38(v12199);
  var DeclFlags = TypeScript$$1.DeclFlags;
  var v18501 = TypeScript$$1.ModuleFlags;
  var v22714 = !v18501;
  if (v22714) {
    v18501 = TypeScript$$1.ModuleFlags = {};
  }
  var v12200 = v18501;
  v39(v12200);
  var ModuleFlags = TypeScript$$1.ModuleFlags;
  var v18502 = TypeScript$$1.SymbolFlags;
  var v22715 = !v18502;
  if (v22715) {
    v18502 = TypeScript$$1.SymbolFlags = {};
  }
  var v12201 = v18502;
  v40(v12201);
  var SymbolFlags = TypeScript$$1.SymbolFlags;
  var v18503 = TypeScript$$1.VarFlags;
  var v22716 = !v18503;
  if (v22716) {
    v18503 = TypeScript$$1.VarFlags = {};
  }
  var v12202 = v18503;
  v41(v12202);
  var VarFlags = TypeScript$$1.VarFlags;
  var v18504 = TypeScript$$1.FncFlags;
  var v22717 = !v18504;
  if (v22717) {
    v18504 = TypeScript$$1.FncFlags = {};
  }
  var v12203 = v18504;
  v42(v12203);
  var FncFlags = TypeScript$$1.FncFlags;
  var v18505 = TypeScript$$1.SignatureFlags;
  var v22718 = !v18505;
  if (v22718) {
    v18505 = TypeScript$$1.SignatureFlags = {};
  }
  var v12204 = v18505;
  v43(v12204);
  var SignatureFlags = TypeScript$$1.SignatureFlags;
  TypeScript$$1.ToDeclFlags = ToDeclFlags;
  var v18506 = TypeScript$$1.TypeFlags;
  var v22719 = !v18506;
  if (v22719) {
    v18506 = TypeScript$$1.TypeFlags = {};
  }
  var v12205 = v18506;
  v44(v12205);
  var TypeFlags = TypeScript$$1.TypeFlags;
  var v18507 = TypeScript$$1.TypeRelationshipFlags;
  var v22720 = !v18507;
  if (v22720) {
    v18507 = TypeScript$$1.TypeRelationshipFlags = {};
  }
  var v12206 = v18507;
  v45(v12206);
  var TypeRelationshipFlags = TypeScript$$1.TypeRelationshipFlags;
  var v18508 = TypeScript$$1.CodeGenTarget;
  var v22721 = !v18508;
  if (v22721) {
    v18508 = TypeScript$$1.CodeGenTarget = {};
  }
  var v12207 = v18508;
  v46(v12207);
  var CodeGenTarget = TypeScript$$1.CodeGenTarget;
  var v18509 = TypeScript$$1.ModuleGenTarget;
  var v22722 = !v18509;
  if (v22722) {
    v18509 = TypeScript$$1.ModuleGenTarget = {};
  }
  var v12208 = v18509;
  v47(v12208);
  var ModuleGenTarget = TypeScript$$1.ModuleGenTarget;
  TypeScript$$1.codeGenTarget = CodeGenTarget.ES3;
  TypeScript$$1.moduleGenTarget = ModuleGenTarget.Synchronous;
  TypeScript$$1.optimizeModuleCodeGen = true;
  TypeScript$$1.flagsToString = flagsToString;
  return;
}
function v33(s$$8) {
  var i$$7 = 0;
  var v18510 = s$$8.length;
  var v12210 = i$$7 < v18510;
  for (;v12210;) {
    var c$$1 = JAM.call(s$$8.charCodeAt, s$$8, [i$$7]);
    var v18511 = this.cumulative_checksum;
    var v12209 = v18511 << 1;
    this.cumulative_checksum = v12209 ^ c$$1;
    i$$7++;
    var v18512 = s$$8.length;
    v12210 = i$$7 < v18512;
  }
  return;
}
function v32() {
  var v18513 = this.checksum;
  var v18514 = this.cumulative_checksum;
  var v12211 = v18513 != v18514;
  if (v12211) {
    throw new Error("Wrong checksum.");
  }
  this.cumulative_checksum = 0;
  return;
}
function v31(s$$7) {
  var v12212 = s$$7 + "\n";
  JAM.call(this.Verify, this, [v12212]);
  return;
}
function v30(s$$6) {
  JAM.call(this.Verify, this, [s$$6]);
  return;
}
function v29(s$$5) {
  var i$$6 = 0;
  var v18515 = s$$5.length;
  var v12214 = i$$6 < v18515;
  for (;v12214;) {
    var c = JAM.call(s$$5.charCodeAt, s$$5, [i$$6]);
    var v18516 = this.cumulative_checksum;
    var v12213 = v18516 << 1;
    this.cumulative_checksum = v12213 ^ c;
    i$$6++;
    var v18517 = s$$5.length;
    v12214 = i$$6 < v18517;
  }
  return;
}
function v28() {
  var v18518 = this.checksum;
  var v18519 = this.cumulative_checksum;
  var v12215 = v18518 != v18519;
  if (v12215) {
    throw new Error("Wrong checksum.");
  }
  this.cumulative_checksum = 0;
  return;
}
function v27(s$$4) {
  var v12216 = s$$4 + "\n";
  JAM.call(this.Verify, this, [v12216]);
  return;
}
function v26(s$$3) {
  JAM.call(this.Verify, this, [s$$3]);
  return;
}
function v25(runner$$2) {
  function RunNextSetup() {
    var v12218 = index$$40 < length$$12;
    if (v12218) {
      try {
        var v18520 = suite$$1.benchmarks;
        var v12217 = v18520[index$$40];
        v12217.Setup();
      } catch (e$$4) {
        JAM.call(suite$$1.NotifyError, suite$$1, [e$$4]);
        return null;
      }
      return RunNextBenchmark;
    }
    suite$$1.NotifyResult();
    return null;
  }
  function RunNextBenchmark() {
    try {
      var v18521 = suite$$1.benchmarks;
      var v12219 = v18521[index$$40];
      data$$20 = JAM.call(suite$$1.RunSingleBenchmark, suite$$1, [v12219, data$$20], JAM.policy.p1);
    } catch (e$$5) {
      JAM.call(suite$$1.NotifyError, suite$$1, [e$$5]);
      return null;
    }
    var v12220;
    var v18522 = data$$20 == null;
    if (v18522) {
      v12220 = RunNextTearDown;
    } else {
      v12220 = RunNextBenchmark();
    }
    return v12220;
  }
  function RunNextTearDown() {
    try {
      var v18523 = suite$$1.benchmarks;
      var v18524 = index$$40;
      index$$40 = index$$40 + 1;
      var v12221 = v18523[v18524];
      v12221.TearDown();
    } catch (e$$6) {
      JAM.call(suite$$1.NotifyError, suite$$1, [e$$6]);
      return null;
    }
    return RunNextSetup;
  }
  BenchmarkSuite.ResetRNG();
  this.results = [];
  this.runner = runner$$2;
  var v12222 = this.benchmarks;
  var length$$12 = v12222.length;
  var index$$40 = 0;
  var suite$$1 = this;
  var data$$20;
  return RunNextSetup();
}
function v24(benchmark$$1, data$$18) {
  function Measure(data$$19) {
    var elapsed = 0;
    var start$$4 = new Date;
    var i$$5 = 0;
    var v18525;
    if (doDeterministic$$1) {
      var v22723 = benchmark$$1.deterministicIterations;
      v18525 = i$$5 < v22723;
    } else {
      v18525 = elapsed < 1E3;
    }
    var v12224 = v18525;
    for (;v12224;) {
      benchmark$$1.run();
      var v12223 = new Date;
      elapsed = v12223 - start$$4;
      i$$5++;
      var v18526;
      if (doDeterministic$$1) {
        var v22724 = benchmark$$1.deterministicIterations;
        v18526 = i$$5 < v22724;
      } else {
        v18526 = elapsed < 1E3;
      }
      v12224 = v18526;
    }
    var v12225 = data$$19 != null;
    if (v12225) {
      var v18527 = data$$19.runs;
      data$$19.runs = v18527 + i$$5;
      var v18528 = data$$19.elapsed;
      data$$19.elapsed = v18528 + elapsed;
    }
    return;
  }
  var config = BenchmarkSuite.config;
  var v12226;
  var v22725 = config.doWarmup;
  var v18529 = v22725 !== undefined;
  if (v18529) {
    v12226 = config.doWarmup;
  } else {
    v12226 = benchmark$$1.doWarmup;
  }
  var doWarmup$$1 = v12226;
  var v12227;
  var v22726 = config.doDeterministic;
  var v18530 = v22726 !== undefined;
  if (v18530) {
    v12227 = config.doDeterministic;
  } else {
    v12227 = benchmark$$1.doDeterministic;
  }
  var doDeterministic$$1 = v12227;
  var v18531 = !doWarmup$$1;
  if (v18531) {
    v18531 = data$$18 == null;
  }
  var v12228 = v18531;
  if (v12228) {
    data$$18 = {runs:0, elapsed:0};
  }
  var v12234 = data$$18 == null;
  if (v12234) {
    Measure(null);
    return {runs:0, elapsed:0};
  } else {
    Measure(data$$18);
    var v18532 = data$$18.runs;
    var v18533 = benchmark$$1.minIterations;
    var v12229 = v18532 < v18533;
    if (v12229) {
      return data$$18;
    }
    var v18534 = data$$18.elapsed;
    var v12230 = v18534 * 1E3;
    var v12231 = data$$18.runs;
    var usec = v12230 / v12231;
    var v12232;
    var v22727 = benchmark$$1.rmsResult;
    var v18535 = v22727 != null;
    if (v18535) {
      v12232 = benchmark$$1.rmsResult();
    } else {
      v12232 = 0;
    }
    var rms = v12232;
    var v12233 = new BenchmarkResult(benchmark$$1, usec, rms);
    JAM.call(this.NotifyStep, this, [v12233]);
    return null;
  }
  return;
}
function v23(error$$1) {
  var v18536 = this.runner;
  var v12237 = v18536.NotifyError;
  if (v12237) {
    var v12235 = this.runner;
    var v12236 = this.name;
    JAM.call(v12235.NotifyError, v12235, [v12236, error$$1], JAM.policy.p1);
  }
  var v18537 = this.runner;
  var v12240 = v18537.NotifyStep;
  if (v12240) {
    var v12238 = this.runner;
    var v12239 = this.name;
    JAM.call(v12238.NotifyStep, v12238, [v12239]);
  }
  return;
}
function v22(runner$$1) {
  var v12241 = BenchmarkSuite.scores;
  JAM.call(v12241.push, v12241, [1]);
  var v12243 = runner$$1.NotifyResult;
  if (v12243) {
    var v12242 = this.name;
    JAM.call(runner$$1.NotifyResult, runner$$1, [v12242, "Skipped"], JAM.policy.p1);
  }
  return;
}
function v21() {
  var v12244 = this.results;
  var mean = JAM.call(BenchmarkSuite.GeometricMeanTime, BenchmarkSuite, [v12244]);
  var v18538 = this.reference;
  var v12245 = v18538[0];
  var score$$1 = v12245 / mean;
  var v12246 = BenchmarkSuite.scores;
  JAM.call(v12246.push, v12246, [score$$1]);
  var v18539 = this.runner;
  var v12250 = v18539.NotifyResult;
  if (v12250) {
    var v12247 = 100 * score$$1;
    var formatted$$1 = JAM.call(BenchmarkSuite.FormatScore, BenchmarkSuite, [v12247]);
    var v12248 = this.runner;
    var v12249 = this.name;
    JAM.call(v12248.NotifyResult, v12248, [v12249, formatted$$1], JAM.policy.p1);
  }
  var v22728 = this.reference;
  var v18540 = v22728.length;
  var v12259 = v18540 == 2;
  if (v12259) {
    var v12251 = this.results;
    var meanLatency = JAM.call(BenchmarkSuite.GeometricMeanLatency, BenchmarkSuite, [v12251]);
    var v12258 = meanLatency != 0;
    if (v12258) {
      var v18541 = this.reference;
      var v12252 = v18541[1];
      var scoreLatency = v12252 / meanLatency;
      var v12253 = BenchmarkSuite.scores;
      JAM.call(v12253.push, v12253, [scoreLatency]);
      var v18542 = this.runner;
      var v12257 = v18542.NotifyResult;
      if (v12257) {
        var v12254 = 100 * scoreLatency;
        var formattedLatency = JAM.call(BenchmarkSuite.FormatScore, BenchmarkSuite, [v12254]);
        var v12255 = this.runner;
        var v18543 = this.name;
        var v12256 = v18543 + "Latency";
        JAM.call(v12255.NotifyResult, v12255, [v12256, formattedLatency], JAM.policy.p1);
      }
    }
  }
  return;
}
function v20(result$$1) {
  var v12260 = this.results;
  JAM.call(v12260.push, v12260, [result$$1]);
  var v18544 = this.runner;
  var v12263 = v18544.NotifyStep;
  if (v12263) {
    var v12261 = this.runner;
    var v18545 = result$$1.benchmark;
    var v12262 = v18545.name;
    JAM.call(v12261.NotifyStep, v12261, [v12262]);
  }
  return;
}
function v19(value$$27) {
  var v12264 = value$$27 > 100;
  if (v12264) {
    return value$$27.toFixed(0);
  } else {
    return value$$27.toPrecision(3);
  }
  return;
}
function v18(measurements$$1) {
  var log$$2 = 0;
  var hasLatencyResult = false;
  var i$$4 = 0;
  var v18546 = measurements$$1.length;
  var v12266 = i$$4 < v18546;
  for (;v12266;) {
    var v22729 = measurements$$1[i$$4];
    var v18547 = v22729.latency;
    var v12265 = v18547 != 0;
    if (v12265) {
      var v24801 = measurements$$1[i$$4];
      var v22730 = v24801.latency;
      var v18548 = JAM.call(Math.log, Math, [v22730]);
      log$$2 = log$$2 + v18548;
      hasLatencyResult = true;
    }
    i$$4++;
    var v18549 = measurements$$1.length;
    v12266 = i$$4 < v18549;
  }
  if (hasLatencyResult) {
    var v12267 = Math.E;
    var v18550 = measurements$$1.length;
    var v12268 = log$$2 / v18550;
    return JAM.call(Math.pow, Math, [v12267, v12268], JAM.policy.p1);
  } else {
    return 0;
  }
  return;
}
function v17(measurements) {
  var log$$1 = 0;
  var i$$3 = 0;
  var v18551 = measurements.length;
  var v12269 = i$$3 < v18551;
  for (;v12269;) {
    var v24802 = measurements[i$$3];
    var v22731 = v24802.time;
    var v18552 = JAM.call(Math.log, Math, [v22731]);
    log$$1 = log$$1 + v18552;
    i$$3++;
    var v18553 = measurements.length;
    v12269 = i$$3 < v18553;
  }
  var v12270 = Math.E;
  var v18554 = measurements.length;
  var v12271 = log$$1 / v18554;
  return JAM.call(Math.pow, Math, [v12270, v12271], JAM.policy.p1);
}
function v16() {
  var numbers = BenchmarkSuite.scores;
  var log = 0;
  var i$$2 = 0;
  var v18555 = numbers.length;
  var v12272 = i$$2 < v18555;
  for (;v12272;) {
    var v22732 = numbers[i$$2];
    var v18556 = JAM.call(Math.log, Math, [v22732]);
    log = log + v18556;
    i$$2++;
    var v18557 = numbers.length;
    v12272 = i$$2 < v18557;
  }
  var v12273 = Math.E;
  var v18558 = numbers.length;
  var v12274 = log / v18558;
  return JAM.call(Math.pow, Math, [v12273, v12274], JAM.policy.p1);
}
function v15() {
  var result = 0;
  var suites$$1 = BenchmarkSuite.suites;
  var i$$1 = 0;
  var v18559 = suites$$1.length;
  var v12275 = i$$1 < v18559;
  for (;v12275;) {
    var v24803 = suites$$1[i$$1];
    var v22733 = v24803.benchmarks;
    var v18560 = v22733.length;
    result = result + v18560;
    i$$1++;
    var v18561 = suites$$1.length;
    v12275 = i$$1 < v18561;
  }
  return result;
}
function v14() {
  function RunStep() {
    var v18562 = continuation;
    var v22734 = !v18562;
    if (v22734) {
      v18562 = index$$39 < length$$11;
    }
    var v12281 = v18562;
    for (;v12281;) {
      if (continuation) {
        continuation = continuation();
      } else {
        var v12276 = index$$39;
        index$$39 = index$$39 + 1;
        var suite = suites[v12276];
        var v12278 = runner.NotifyStart;
        if (v12278) {
          var v12277 = suite.name;
          JAM.call(runner.NotifyStart, runner, [v12277]);
        }
        var v22735 = suite.name;
        var v18563 = skipBenchmarks$$1.indexOf(v22735);
        var v12279 = v18563 > -1;
        if (v12279) {
          JAM.call(suite.NotifySkipped, suite, [runner]);
        } else {
          continuation = JAM.call(suite.RunStep, suite, [runner]);
        }
      }
      var v22736 = continuation;
      if (v22736) {
        var v24804 = typeof window;
        v22736 = v24804 != "undefined";
      }
      var v18564 = v22736;
      if (v18564) {
        v18564 = window.setTimeout;
      }
      var v12280 = v18564;
      if (v12280) {
        JAM.call(window.setTimeout, window, [RunStep, 25], JAM.policy.p1);
        return;
      }
      var v18565 = continuation;
      var v22737 = !v18565;
      if (v22737) {
        v18565 = index$$39 < length$$11;
      }
      v12281 = v18565;
    }
    var v12283 = runner.NotifyScore;
    if (v12283) {
      var score = BenchmarkSuite.GeometricMean();
      var v12282 = 100 * score;
      var formatted = JAM.call(BenchmarkSuite.FormatScore, BenchmarkSuite, [v12282]);
      JAM.call(runner.NotifyScore, runner, [formatted]);
    }
    return;
  }
  var runner = {NotifyStart:ShowBox, NotifyError:AddError, NotifyResult:AddResult, NotifyScore:AddScore};
  var skipBenchmarks$$1 = skipBenchmarks;
  var v12284;
  var v22738 = typeof skipBenchmarks$$1;
  var v18566 = v22738 === "undefined";
  if (v18566) {
    v12284 = [];
  } else {
    v12284 = skipBenchmarks$$1;
  }
  skipBenchmarks$$1 = v12284;
  var continuation = null;
  var suites = BenchmarkSuite.suites;
  var length$$11 = suites.length;
  BenchmarkSuite.scores = [];
  var index$$39 = 0;
  RunStep();
  return;
}
function v13() {
  function v12() {
    function v11() {
      var v18567 = seed + 2127912214;
      var v18568 = seed << 12;
      var v12285 = v18567 + v18568;
      seed = v12285 & 4294967295;
      var v18569 = seed ^ 3345072700;
      var v18570 = seed >>> 19;
      var v12286 = v18569 ^ v18570;
      seed = v12286 & 4294967295;
      var v18571 = seed + 374761393;
      var v18572 = seed << 5;
      var v12287 = v18571 + v18572;
      seed = v12287 & 4294967295;
      var v18573 = seed + 3550635116;
      var v18574 = seed << 9;
      var v12288 = v18573 ^ v18574;
      seed = v12288 & 4294967295;
      var v18575 = seed + 4251993797;
      var v18576 = seed << 3;
      var v12289 = v18575 + v18576;
      seed = v12289 & 4294967295;
      var v18577 = seed ^ 3042594569;
      var v18578 = seed >>> 16;
      var v12290 = v18577 ^ v18578;
      seed = v12290 & 4294967295;
      var v12291 = seed & 268435455;
      return v12291 / 268435456;
    }
    var seed = 49734321;
    return v11;
  }
  var v12292 = Math;
  var v27109 = v12();
  v12292.random = v27109;
  return;
}
function v10(s$$2) {
  throw "Alert called with argument: " + s$$2;
}
function v9() {
  return this.time;
}
function v8() {
  var v25689 = performance.now;
  var v26081 = !v25689;
  if (v26081) {
    v25689 = performance.mozNow;
  }
  var v24805 = v25689;
  var v25690 = !v24805;
  if (v25690) {
    v24805 = performance.msNow;
  }
  var v22739 = v24805;
  var v24806 = !v22739;
  if (v24806) {
    v22739 = performance.oNow;
  }
  var v18579 = v22739;
  var v22740 = !v18579;
  if (v22740) {
    v18579 = performance.webkitNow;
  }
  var v12293 = v18579;
  var v18580 = !v12293;
  if (v18580) {
    v12293 = Date.now;
  }
  return v12293;
}
function Benchmark() {
  function v1() {
    return;
  }
  function v0() {
    return;
  }
  var name$$30 = "Typescript";
  var doWarmup = false;
  var doDeterministic = true;
  var deterministicIterations = 5;
  var run = runTypescript;
  var setup = setupTypescript;
  var tearDown = tearDownTypescript;
  var rmsResult = null;
  var minIterations = 1;
  this.name = name$$30;
  this.doWarmup = doWarmup;
  this.doDeterministic = doDeterministic;
  this.deterministicIterations = deterministicIterations;
  this.run = run;
  var v12294;
  if (setup) {
    v12294 = setup;
  } else {
    v12294 = v0;
  }
  this.Setup = v12294;
  var v12295;
  if (tearDown) {
    v12295 = tearDown;
  } else {
    v12295 = v1;
  }
  this.TearDown = v12295;
  var v12296;
  if (rmsResult) {
    v12296 = rmsResult;
  } else {
    v12296 = null;
  }
  this.rmsResult = v12296;
  var v12297;
  if (minIterations) {
    v12297 = minIterations;
  } else {
    v12297 = 32;
  }
  this.minIterations = v12297;
  return;
}
function BenchmarkResult(benchmark, time, latency) {
  this.benchmark = benchmark;
  this.time = time;
  this.latency = latency;
  return;
}
function BenchmarkSuite(name$$31, reference, benchmarks$$1) {
  this.name = name$$31;
  this.reference = reference;
  this.benchmarks = benchmarks$$1;
  var v12298 = BenchmarkSuite.suites;
  JAM.call(v12298.push, v12298, [this]);
  return;
}
function setupTypescript() {
  return;
}
function tearDownTypescript() {
  compiler_input = null;
  return;
}
function runTypescript() {
  function v5(path$$2) {
    return path$$2;
  }
  function v4(path$$1) {
    return false;
  }
  function v3(path) {
    return false;
  }
  function v2(fileName) {
    return outfile;
  }
  var compiler = createCompiler();
  JAM.call(compiler.addUnit, compiler, [compiler_input, "compiler_input.ts"], JAM.policy.p1);
  parseErrors = [];
  compiler.reTypeCheck();
  var v12299 = {createFile:v2, fileExists:v3, directoryExists:v4, resolvePath:v5};
  JAM.call(compiler.emit, compiler, [v12299]);
  var v22741 = parseErrors.length;
  var v18581 = v22741 != 192;
  if (v18581) {
    var v22742 = parseErrors.length;
    v18581 = v22742 != 193;
  }
  var v12300 = v18581;
  if (v12300) {
    throw new Error("Parse errors.");
  }
  compiler = null;
  return;
}
function createCompiler() {
  function v6(start$$5, len, message$$9) {
    var v12301 = {start:start$$5, len:len, message:message$$9};
    JAM.call(parseErrors.push, parseErrors, [v12301]);
    return;
  }
  var v12302 = TypeScript.CompilationSettings;
  var settings = new v12302;
  var v12303 = TypeScript.CodeGenTarget;
  settings.codeGenTarget = v12303.ES5;
  var v12304 = TypeScript.TypeScriptCompiler;
  var v18582 = TypeScript.NullLogger;
  var v12305 = new v18582;
  var compiler$$1 = JAM.new(v12304, [outerr, v12305, settings]);
  JAM.call(compiler$$1.setErrorCallback, compiler$$1, [v6]);
  var v12306 = compiler$$1.parser;
  v12306.errorRecovery = true;
  compiler$$1.typeCheck();
  return compiler$$1;
}
function ShowBox(name$$92) {
  function v7(entry$$3) {
    var v18583 = name$$92.valueOf();
    var v18584 = entry$$3.valueOf();
    var v12309 = v18583 === v18584;
    if (v12309) {
      var v18585 = "Box-" + name$$92;
      var v12307 = v18585 + "Latency";
      var box1 = document.getElementById(v12307);
      var v12308 = box1.style;
      v12308.visibility = "visible";
    }
    return;
  }
  var v12310 = "Box-" + name$$92;
  var box = document.getElementById(v12310);
  var v12311 = box.style;
  v12311.visibility = "visible";
  var v18586 = document.getElementById("progress-bar");
  var v12312 = v18586.style;
  var v25691 = completed = completed + 1;
  var v24807 = v25691 / benchmarks;
  var v22743 = v24807 * 100;
  var v18587 = "" + v22743;
  var bar = v12312.width = v18587 + "%";
  latencyBenchmarks.forEach(v7);
  return;
}
function AddResult(name$$93, result$$41) {
  var v18588 = name$$93 + ": ";
  var v12313 = v18588 + result$$41;
  JAM.call(console.log, console, [v12313]);
  var v12314 = "Result-" + name$$93;
  var box$$1 = document.getElementById(v12314);
  JAM.set(box$$1, "innerHTML", result$$41);
  return;
}
function AddError(name$$94, error$$3) {
  var v18589 = name$$94 + ": ";
  var v18590 = error$$3.message;
  var v12315 = v18589 + v18590;
  JAM.call(console.log, console, [v12315]);
  var v12317 = error$$3 == "TypedArrayUnsupported";
  if (v12317) {
    AddResult(name$$94, "<b>Unsupported</b>");
  } else {
    var v12316 = error$$3 == "PerformanceNowUnsupported";
    if (v12316) {
      AddResult(name$$94, "<b>Timer error</b>");
    } else {
      AddResult(name$$94, "<b>Error</b>");
    }
  }
  success = false;
  return;
}
function AddScore(score$$2) {
  var status$$1 = document.getElementById("main-banner");
  if (success) {
    JAM.set(status$$1, "innerHTML", "Octane Score: " + score$$2);
  } else {
    JAM.set(status$$1, "innerHTML", "Octane Score (incomplete): " + score$$2);
  }
  var v18591 = document.getElementById("progress-bar-container");
  var v12318 = v18591.style;
  v12318.visibility = "hidden";
  var v18592 = document.getElementById("bottom-text");
  var v12319 = v18592.style;
  v12319.visibility = "visible";
  var v12320 = document.getElementById("inside-anchor");
  var v12321 = document.getElementById("bar-appendix");
  v12320.removeChild(v12321);
  var v18593 = document.getElementById("alertbox");
  var v12322 = v18593.style;
  v12322.visibility = "hidden";
  return;
}
function Run() {
  var v12323 = document.getElementById("main-banner");
  JAM.set(v12323, "innerHTML", "Running Octane...");
  var v12324 = document.getElementById("bar-appendix");
  JAM.set(v12324, "innerHTML", '<br/><div class="progress progress-striped" id="progress-bar-container" style="visibility:hidden"><div class="bar"style="width: 0%;" id="progress-bar"></div></div>');
  var anchor = document.getElementById("run-octane");
  var parent$$73 = document.getElementById("main-container");
  var v12325 = document.getElementById("inside-anchor");
  JAM.call(parent$$73.appendChild, parent$$73, [v12325]);
  parent$$73.removeChild(anchor);
  var v12326 = document.getElementById("startup-text");
  JAM.set(v12326, "innerHTML", "");
  var v18594 = document.getElementById("progress-bar-container");
  var v12327 = v18594.style;
  v12327.visibility = "visible";
  BenchmarkSuite.RunSuites();
  return;
}
function CheckCompatibility() {
  var v22744 = typeof Uint8Array;
  var v18595 = v22744 != "undefined";
  if (v18595) {
    var v22745 = typeof Float64Array;
    v18595 = v22745 != "undefined";
  }
  var v12328 = v18595;
  if (v12328) {
    var v24808 = new Uint8Array(0);
    var v22746 = v24808.subarray;
    var v18596 = typeof v22746;
    v12328 = v18596 != "undefined";
  }
  var hasTypedArrays = v12328;
  var v12330 = !hasTypedArrays;
  if (v12330) {
    JAM.call(console.log, console, ["Typed Arrays not supported"]);
    var v18597 = document.getElementById("alertbox");
    var v12329 = v18597.style;
    v12329.display = "block";
  }
  var v24809 = window.document;
  var v22747 = v24809.URL;
  var v18598 = v22747.indexOf("skip_zlib=1");
  var v12331 = v18598 >= 0;
  if (v12331) {
    JAM.call(skipBenchmarks.push, skipBenchmarks, ["zlib"]);
  }
  var v24810 = window.document;
  var v22748 = v24810.URL;
  var v18599 = v22748.indexOf("auto=1");
  var v12332 = v18599 >= 0;
  if (v12332) {
    Run();
  }
  return;
}
function Load() {
  JAM.call(setTimeout, null, [CheckCompatibility, 200]);
  return;
}
var performance = performance || {};
var v12333 = performance;
var v27110 = v8();
v12333.now = v27110;
var v12334 = BenchmarkResult.prototype;
v12334.valueOf = v9;
BenchmarkSuite.suites = [];
BenchmarkSuite.version = "9";
BenchmarkSuite.config = {doWarmup:undefined, doDeterministic:undefined};
alert = v10;
BenchmarkSuite.ResetRNG = v13;
BenchmarkSuite.RunSuites = v14;
BenchmarkSuite.CountBenchmarks = v15;
BenchmarkSuite.GeometricMean = v16;
BenchmarkSuite.GeometricMeanTime = v17;
BenchmarkSuite.GeometricMeanLatency = v18;
BenchmarkSuite.FormatScore = v19;
var v12335 = BenchmarkSuite.prototype;
v12335.NotifyStep = v20;
var v12336 = BenchmarkSuite.prototype;
v12336.NotifyResult = v21;
var v12337 = BenchmarkSuite.prototype;
v12337.NotifySkipped = v22;
var v12338 = BenchmarkSuite.prototype;
v12338.NotifyError = v23;
var v12339 = BenchmarkSuite.prototype;
v12339.RunSingleBenchmark = v24;
var v12340 = BenchmarkSuite.prototype;
v12340.RunStep = v25;
var v12341 = [255011322];
var v18600 = new Benchmark;
var v12342 = [v18600];
var typescript = new BenchmarkSuite("Typescript", v12341, v12342);
var parseErrors = [];
var outfile = {checksum:-412589664, cumulative_checksum:0, Write:v26, WriteLine:v27, Close:v28, Verify:v29};
var outerr = {checksum:0, cumulative_checksum:0, Write:v30, WriteLine:v31, Close:v32, Verify:v33};
var v27362 = '//\n// Copyright (c) Microsoft Corporation.  All rights reserved.\n// \n// Licensed under the Apache License, Version 2.0 (the "License");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an "AS IS" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n\nmodule TypeScript {\n    export class AstLogger {\n\n        constructor (public logger: ILogger) { }\n\n        public logScript(script: TypeScript.Script): void {\n            this.logLinemap(script.locationInfo.lineMap);\n\n            var stack: AST[]= [];\n\n            var pre = (cur: TypeScript.AST, parent: TypeScript.AST) => {\n                stack.push(cur);\n                var indent = (stack.length - 1) * 2;\n                this.logComments(script, cur.preComments, indent);\n                this.logNode(script, cur, indent);\n                this.logComments(script, cur.postComments, indent);\n                return cur;\n            }\n\n            var post = (cur: TypeScript.AST, parent: TypeScript.AST) => {\n                stack.pop();\n                return cur;\n            }\n\n            TypeScript.getAstWalkerFactory().walk(script, pre, post);\n        }\n\n\n        public logNode(script: TypeScript.Script, cur: TypeScript.AST, indent: number) {\n            var msg = this.addPadding("", indent, "| ", true);\n\n            msg = msg.concat("+ " + cur.treeViewLabel());\n            msg = this.addPadding(msg, 70, " ", false);\n\n            msg = msg + this.addLineColumn(script, cur.minChar);\n            msg = this.addPadding(msg, 80, " ", false);\n\n            msg = msg + "=> ";\n            msg = msg + this.addLineColumn(script, cur.limChar);\n            msg = this.addPadding(msg, 102, " ", false);\n\n            msg = msg.concat("[" + this.addPadding(cur.minChar.toString(), 1, " ", true) + ", " + this.addPadding(cur.limChar.toString(), 1, " ", true) + "]");\n\n            msg = this.addPadding(msg, 115, " ", false);\n            msg = msg.concat("sym=" + (<any>cur).sym);\n\n            msg = this.addPadding(msg, 135, " ", false);\n            msg = msg.concat("type=" + (cur.type === null ? "null" : cur.type.getTypeName()));\n            this.logger.log(msg);\n        }\n\n        private logComments(script: TypeScript.Script, comments: TypeScript.AST[], indent: number) {\n            if (comments == null)\n                return;\n\n            for (var i = 0; i < comments.length; i++) {\n                this.logNode(script, comments[i], indent);\n            }\n        }\n\n        public logLinemap(linemap: number[]) {\n            var result = "[";\n            for (var i = 0; i < linemap.length; i++) {\n                if (i > 0)\n                    result += ",";\n                result += linemap[i];\n            }\n            result += "]";\n            this.logger.log("linemap: " + result);\n        }\n\n        private addPadding(s: string, targetLength: number, paddingString: string, leftPadding: bool): string {\n            var result = (leftPadding ? "" : s);\n            for (var i = s.length; i < targetLength; i++) {\n                result = result + paddingString;\n            }\n            result = result + (leftPadding ? s : "");\n            return result;\n        }\n\n        private addLineColumn(script: TypeScript.Script, position: numbe' + 
'r): string {\n            // just for calling getSourceLineColFromMap\n            var lineInfo = {\n                line: -1,\n                col: -1\n            }\n            TypeScript.getSourceLineColFromMap(lineInfo, position, script.locationInfo.lineMap);\n\n            if (lineInfo.col !== -1) {\n                lineInfo.col++; //TODO: function above seems to consider line as 1-based, and column as 0-based\n            }\n\n            return "(" + lineInfo.line + ", " + lineInfo.col + ")";\n        }\n    }\n}\n//\n// Copyright (c) Microsoft Corporation.  All rights reserved.\n// \n// Licensed under the Apache License, Version 2.0 (the "License");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an "AS IS" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n\n///<reference path=\'typescript.ts\' />\n\nmodule TypeScript {\n    export function lastOf(items: any[]): any {\n        return (items === null || items.length === 0) ? null : items[items.length - 1];\n    }\n\n    export function max(a: number, b: number): number {\n        return a >= b ? a : b;\n    }\n\n    export function min(a: number, b: number): number {\n        return a <= b ? a : b;\n    }\n\n    //\n    // Helper class representing a path from a root ast node to a (grand)child ast node.\n    // This is helpful as our tree don\'t have parents.\n    //\n    export class AstPath {\n        public asts: TypeScript.AST[] = [];\n        public top: number = -1;\n\n        static reverseIndexOf(items: any[], index: number): any {\n            return (items === null || items.length <= index) ? null : items[items.length - index - 1];\n        }\n\n        public clone(): AstPath {\n            var clone = new AstPath();\n            clone.asts = this.asts.map((value) => { return value; });\n            clone.top = this.top;\n            return clone;\n        }\n\n        public pop(): TypeScript.AST {\n            var head = this.ast();\n            this.up();\n\n            while (this.asts.length > this.count()) {\n                this.asts.pop();\n            }\n            return head;\n        }\n\n        public push(ast: TypeScript.AST) {\n            while (this.asts.length > this.count()) {\n                this.asts.pop();\n            }\n            this.top = this.asts.length;\n            this.asts.push(ast);\n        }\n\n        public up() {\n            if (this.top <= -1)\n                throw new Error("Invalid call to \'up\'");\n            this.top--;\n        }\n\n        public down() {\n            if (this.top == this.ast.length - 1)\n                throw new Error("Invalid call to \'down\'");\n            this.top++;\n        }\n\n        public nodeType(): TypeScript.NodeType {\n            if (this.ast() == null)\n                return TypeScript.NodeType.None;\n            return this.ast().nodeType;\n        }\n\n        public ast() {\n            return <TypeScript.AST>AstPath.reverseIndexOf(this.asts, this.asts.length - (this.top + 1));\n        }\n\n        public parent() {\n            return <TypeScript.AST>AstPath.reverseIndexOf(this.asts, this.asts.length - this.top);\n        }\n\n        public count() {\n            return this.top + 1;\n        }\n\n        public get(index: number): TypeScript.AST {\n            return this.asts[index];\n        }\n\n        public isNameOfClass(): bool {\n            if (this.ast() === null || this.parent() === null)\n                return false;\n\n            return (this.ast().nodeType === TypeScript.NodeType.Name) &&\n                (this.parent().nodeType === TypeScript.NodeType.ClassDeclaration) &&\n                ((<TypeScript.InterfaceDeclaration>this.parent()).name === this.ast());\n        }\n\n        public isNameOfInterface(): bool {\n            if (this.ast() === null || this.parent() === null)\n                return false;\n\n            return (this.ast().nodeType === TypeScript.NodeType.Name) &&\n                (this.parent().nodeType === TypeScript.NodeType.InterfaceDeclaration) &&\n                ((<TypeScript.InterfaceDeclaration>this.parent()).name === this.ast());\n        }\n\n        public isNameOfArgument(): bool {\n            if (this.ast() === null || this.parent() === null)\n                return false;\n\n            return (this.ast().nodeType === TypeScript.NodeType.Name) &&\n                (this.parent().nodeType === TypeScript.NodeType.ArgDecl) &&\n                ((<TypeScript.ArgDecl>this.parent()).id === this.ast());\n        }\n\n        public isNameOfVariable(): bool {\n            if (this.ast() === null || this.parent() === null)\n                return false;\n\n            return (this.ast().nodeType === TypeScript.NodeType.Name) &&\n                (this.parent().nodeType === Ty';
var v27361 = v27362 + "peScript.NodeType.VarDecl) &&\n                ((<TypeScript.VarDecl>this.parent()).id === this.ast());\n        }\n\n        public isNameOfModule(): bool {\n            if (this.ast() === null || this.parent() === null)\n                return false;\n\n            return (this.ast().nodeType === TypeScript.NodeType.Name) &&\n                (this.parent().nodeType === TypeScript.NodeType.ModuleDeclaration) &&\n                ((<TypeScript.ModuleDeclaration>this.parent()).name === this.ast());\n        }\n\n        public isNameOfFunction(): bool {\n            if (this.ast() === null || this.parent() === null)\n                return false;\n\n            return (this.ast().nodeType === TypeScript.NodeType.Name) &&\n                (this.parent().nodeType === TypeScript.NodeType.FuncDecl) &&\n                ((<TypeScript.FuncDecl>this.parent()).name === this.ast());\n        }\n\n        public isChildOfScript(): bool {\n            var ast = lastOf(this.asts);\n            return this.count() >= 3 &&\n                this.asts[this.top] === ast &&\n                this.asts[this.top - 1].nodeType === TypeScript.NodeType.List &&\n                this.asts[this.top - 2].nodeType === TypeScript.NodeType.Script;\n        }\n\n        public isChildOfModule(): bool {\n            var ast = lastOf(this.asts);\n            return this.count() >= 3 &&\n                this.asts[this.top] === ast &&\n                this.asts[this.top - 1].nodeType === TypeScript.NodeType.List &&\n                this.asts[this.top - 2].nodeType === TypeScript.NodeType.ModuleDeclaration;\n        }\n\n        public isChildOfClass(): bool {\n            var ast = lastOf(this.asts);\n            return this.count() >= 3 &&\n                this.asts[this.top] === ast &&\n                this.asts[this.top - 1].nodeType === TypeScript.NodeType.List &&\n                this.asts[this.top - 2].nodeType === TypeScript.NodeType.ClassDeclaration;\n        }\n\n        public isArgumentOfClassConstructor(): bool {\n            var ast = lastOf(this.asts);\n            return this.count() >= 5 &&\n                this.asts[this.top] === ast &&\n                this.asts[this.top - 1].nodeType === TypeScript.NodeType.List &&\n                this.asts[this.top - 2].nodeType === TypeScript.NodeType.FuncDecl &&\n                this.asts[this.top - 3].nodeType === TypeScript.NodeType.List &&\n                this.asts[this.top - 4].nodeType === TypeScript.NodeType.ClassDeclaration &&\n                ((<TypeScript.FuncDecl>this.asts[this.top - 2]).isConstructor) &&\n                ((<TypeScript.FuncDecl>this.asts[this.top - 2]).arguments === this.asts[this.top - 1]) &&\n                ((<TypeScript.ClassDeclaration>this.asts[this.top - 4]).constructorDecl === this.asts[this.top - 2]);\n        }\n\n        public isChildOfInterface(): bool {\n            var ast = lastOf(this.asts);\n            return this.count() >= 3 &&\n                this.asts[this.top] === ast &&\n                this.asts[this.top - 1].nodeType === TypeScript.NodeType.List &&\n                this.asts[this.top - 2].nodeType === TypeScript.NodeType.InterfaceDeclaration;\n        }\n\n        public isTopLevelImplicitModule() {\n            return this.count() >= 1 &&\n                this.asts[this.top].nodeType === TypeScript.NodeType.ModuleDeclaration &&\n                TypeScript.hasFlag((<TypeScript.ModuleDeclaration>this.asts[this.top]).modFlags, TypeScript.ModuleFlags.IsWholeFile);\n        }\n\n        public isBodyOfTopLevelImplicitModule() {\n            return this.count() >= 2 &&\n                this.asts[this.top - 0].nodeType === TypeScript.NodeType.List &&\n                this.asts[this.top - 1].nodeType === TypeScript.NodeType.ModuleDeclaration &&\n                 (<TypeScript.ModuleDeclaration>this.asts[this.top - 1]).members == this.asts[this.top - 0] &&\n                TypeScript.hasFlag((<TypeScript.ModuleDeclaration>this.asts[this.top - 1]).modFlags, TypeScript.ModuleFlags.IsWholeFile);\n        }\n\n        public isBodyOfScript(): bool {\n            return this.count() >= 2 &&\n                this.asts[this.top - 1].nodeType === TypeScript.NodeType.Script &&\n                 (<TypeScript.Script>this.asts[this.top - 1]).bod == this.asts[this.top - 0];\n        }\n\n        public isBodyOfSwitch(): bool {\n            return this.count() >= 2 &&\n                this.asts[this.top - 1].nodeType === TypeScript.NodeType.Switch &&\n                 (<TypeScript.SwitchStatement>this.asts[this.top - 1]).caseList == this.asts[this.top - 0];\n        }\n\n        public isBodyOfModule(): bool {\n            return this.count() >= 2 &&\n                this.asts[this.top - 1].nodeType === TypeScript.NodeType.ModuleDeclaration &&\n                 (<TypeScript.ModuleDeclaration>this.asts[this.top - 1]).members == this.asts[this.top - 0];\n        }\n\n        public isBodyOfClass(): bool {\n            return this.count() >= 2 &&\n                this.asts[this.top - 1].nodeType === TypeScript.NodeType.ClassDeclaration &&\n                 (<T";
var v27360 = v27361 + "ypeScript.ClassDeclaration>this.asts[this.top - 1]).members == this.asts[this.top - 0];\n        }\n\n        public isBodyOfFunction(): bool {\n            return this.count() >= 2 &&\n                this.asts[this.top - 1].nodeType === TypeScript.NodeType.FuncDecl &&\n                 (<TypeScript.FuncDecl>this.asts[this.top - 1]).bod == this.asts[this.top - 0];\n        }\n\n        public isBodyOfInterface(): bool {\n            return this.count() >= 2 &&\n                this.asts[this.top - 1].nodeType === TypeScript.NodeType.InterfaceDeclaration &&\n                 (<TypeScript.InterfaceDeclaration>this.asts[this.top - 1]).members == this.asts[this.top - 0];\n        }\n\n        public isBodyOfBlock(): bool {\n            return this.count() >= 2 &&\n                this.asts[this.top - 1].nodeType === TypeScript.NodeType.Block &&\n                (<TypeScript.Block>this.asts[this.top - 1]).statements == this.asts[this.top - 0];\n        }\n\n        public isBodyOfFor(): bool {\n            return this.count() >= 2 &&\n                this.asts[this.top - 1].nodeType === TypeScript.NodeType.For &&\n                (<TypeScript.ForStatement>this.asts[this.top - 1]).body == this.asts[this.top - 0];\n        }\n\n        public isBodyOfCase(): bool {\n            return this.count() >= 2 &&\n                this.asts[this.top - 1].nodeType === TypeScript.NodeType.Case &&\n                (<TypeScript.CaseStatement>this.asts[this.top - 1]).body == this.asts[this.top - 0];\n        }\n\n        public isBodyOfTry(): bool {\n            return this.count() >= 2 &&\n                this.asts[this.top - 1].nodeType === TypeScript.NodeType.Try &&\n                (<TypeScript.Try>this.asts[this.top - 1]).body == this.asts[this.top - 0];\n        }\n\n        public isBodyOfCatch(): bool {\n            return this.count() >= 2 &&\n                this.asts[this.top - 1].nodeType === TypeScript.NodeType.Catch &&\n                (<TypeScript.Catch>this.asts[this.top - 1]).body == this.asts[this.top - 0];\n        }\n\n        public isBodyOfDoWhile(): bool {\n            return this.count() >= 2 &&\n                this.asts[this.top - 1].nodeType === TypeScript.NodeType.DoWhile &&\n                (<TypeScript.DoWhileStatement>this.asts[this.top - 1]).body == this.asts[this.top - 0];\n        }\n\n        public isBodyOfWhile(): bool {\n            return this.count() >= 2 &&\n                this.asts[this.top - 1].nodeType === TypeScript.NodeType.While &&\n                (<TypeScript.WhileStatement>this.asts[this.top - 1]).body == this.asts[this.top - 0];\n        }\n\n        public isBodyOfForIn(): bool {\n            return this.count() >= 2 &&\n                this.asts[this.top - 1].nodeType === TypeScript.NodeType.ForIn &&\n                (<TypeScript.ForInStatement>this.asts[this.top - 1]).body == this.asts[this.top - 0];\n        }\n\n        public isBodyOfWith(): bool {\n            return this.count() >= 2 &&\n                this.asts[this.top - 1].nodeType === TypeScript.NodeType.With &&\n                (<TypeScript.WithStatement>this.asts[this.top - 1]).body == this.asts[this.top - 0];\n        }\n\n        public isBodyOfFinally(): bool {\n            return this.count() >= 2 &&\n                this.asts[this.top - 1].nodeType === TypeScript.NodeType.Finally &&\n                (<TypeScript.Finally>this.asts[this.top - 1]).body == this.asts[this.top - 0];\n        }\n\n        public isCaseOfSwitch(): bool {\n            return this.count() >= 3 &&\n                this.asts[this.top - 2].nodeType === TypeScript.NodeType.Switch &&\n                this.asts[this.top - 1].nodeType === TypeScript.NodeType.List &&\n                (<TypeScript.SwitchStatement>this.asts[this.top - 2]).caseList == this.asts[this.top - 1];\n        }\n\n        public isDefaultCaseOfSwitch(): bool {\n            return this.count() >= 3 &&\n                this.asts[this.top - 2].nodeType === TypeScript.NodeType.Switch &&\n                this.asts[this.top - 1].nodeType === TypeScript.NodeType.List &&\n                (<TypeScript.SwitchStatement>this.asts[this.top - 2]).caseList == this.asts[this.top - 1] &&\n                (<TypeScript.SwitchStatement>this.asts[this.top - 2]).defaultCase == this.asts[this.top - 0];\n        }\n\n        public isListOfObjectLit(): bool {\n            return this.count() >= 2 &&\n                this.asts[this.top - 1].nodeType === TypeScript.NodeType.ObjectLit &&\n                this.asts[this.top - 0].nodeType === TypeScript.NodeType.List &&\n                (<TypeScript.UnaryExpression>this.asts[this.top - 1]).operand == this.asts[this.top - 0];\n        }\n\n        public isBodyOfObjectLit(): bool {\n            return this.isListOfObjectLit();\n        }\n\n        public isEmptyListOfObjectLit(): bool {\n            return this.count() >= 2 &&\n                this.asts[this.top - 1].nodeType === TypeScript.NodeType.ObjectLit &&\n                this.asts[this.top - 0].nodeType === TypeScript.NodeType.List &&\n                (<TypeScript.UnaryExpression>this.asts[t";
var v27359 = v27360 + "his.top - 1]).operand == this.asts[this.top - 0] &&\n                (<TypeScript.ASTList>this.asts[this.top - 0]).members.length == 0;\n        }\n\n        public isMemberOfObjectLit(): bool {\n            return this.count() >= 3 &&\n                this.asts[this.top - 2].nodeType === TypeScript.NodeType.ObjectLit &&\n                this.asts[this.top - 1].nodeType === TypeScript.NodeType.List &&\n                this.asts[this.top - 0].nodeType === TypeScript.NodeType.Member &&\n                (<TypeScript.UnaryExpression>this.asts[this.top - 2]).operand == this.asts[this.top - 1];\n        }\n\n        public isNameOfMemberOfObjectLit(): bool {\n            return this.count() >= 4 &&\n                this.asts[this.top - 3].nodeType === TypeScript.NodeType.ObjectLit &&\n                this.asts[this.top - 2].nodeType === TypeScript.NodeType.List &&\n                this.asts[this.top - 1].nodeType === TypeScript.NodeType.Member &&\n                this.asts[this.top - 0].nodeType === TypeScript.NodeType.Name &&\n                (<TypeScript.UnaryExpression>this.asts[this.top - 3]).operand == this.asts[this.top - 2];\n        }\n\n        public isListOfArrayLit(): bool {\n            return this.count() >= 2 &&\n                this.asts[this.top - 1].nodeType === TypeScript.NodeType.ArrayLit &&\n                this.asts[this.top - 0].nodeType === TypeScript.NodeType.List &&\n                (<TypeScript.UnaryExpression>this.asts[this.top - 1]).operand == this.asts[this.top - 0];\n        }\n\n        public isTargetOfMember(): bool {\n            return this.count() >= 2 &&\n                this.asts[this.top - 1].nodeType === TypeScript.NodeType.Member &&\n                (<TypeScript.BinaryExpression>this.asts[this.top - 1]).operand1 === this.asts[this.top - 0];\n        }\n\n        public isMemberOfMember(): bool {\n            return this.count() >= 2 &&\n                this.asts[this.top - 1].nodeType === TypeScript.NodeType.Member &&\n                (<TypeScript.BinaryExpression>this.asts[this.top - 1]).operand2 === this.asts[this.top - 0];\n        }\n\n        public isItemOfList(): bool {\n            return this.count() >= 2 &&\n                this.asts[this.top - 1].nodeType === TypeScript.NodeType.List;\n            //(<Tools.ASTList>this.asts[this.top - 1]).operand2 === this.asts[this.top - 0];\n        }\n\n        public isThenOfIf(): bool {\n            return this.count() >= 2 &&\n                this.asts[this.top - 1].nodeType === TypeScript.NodeType.If &&\n                (<TypeScript.IfStatement>this.asts[this.top - 1]).thenBod == this.asts[this.top - 0];\n        }\n\n        public isElseOfIf(): bool {\n            return this.count() >= 2 &&\n                this.asts[this.top - 1].nodeType === TypeScript.NodeType.If &&\n                (<TypeScript.IfStatement>this.asts[this.top - 1]).elseBod == this.asts[this.top - 0];\n        }\n\n        public isBodyOfDefaultCase(): bool {\n            return this.isBodyOfCase();\n        }\n\n        public isSingleStatementList(): bool {\n            return this.count() >= 1 &&\n                this.asts[this.top].nodeType === TypeScript.NodeType.List &&\n                (<TypeScript.ASTList>this.asts[this.top]).members.length === 1;\n        }\n\n        public isArgumentListOfFunction(): bool {\n            return this.count() >= 2 &&\n                this.asts[this.top - 0].nodeType === TypeScript.NodeType.List &&\n                this.asts[this.top - 1].nodeType === TypeScript.NodeType.FuncDecl &&\n                (<TypeScript.FuncDecl>this.asts[this.top - 1]).arguments === this.asts[this.top - 0];\n        }\n\n        public isArgumentOfFunction(): bool {\n            return this.count() >= 3 &&\n                this.asts[this.top - 1].nodeType === TypeScript.NodeType.List &&\n                this.asts[this.top - 2].nodeType === TypeScript.NodeType.FuncDecl &&\n                (<TypeScript.FuncDecl>this.asts[this.top - 2]).arguments === this.asts[this.top - 1];\n        }\n\n        public isArgumentListOfCall(): bool {\n            return this.count() >= 2 &&\n                this.asts[this.top - 0].nodeType === TypeScript.NodeType.List &&\n                this.asts[this.top - 1].nodeType === TypeScript.NodeType.Call &&\n                (<TypeScript.CallExpression>this.asts[this.top - 1]).arguments === this.asts[this.top - 0];\n        }\n\n        public isArgumentListOfNew(): bool {\n            return this.count() >= 2 &&\n                this.asts[this.top - 0].nodeType === TypeScript.NodeType.List &&\n                this.asts[this.top - 1].nodeType === TypeScript.NodeType.New &&\n                (<TypeScript.CallExpression>this.asts[this.top - 1]).arguments === this.asts[this.top - 0];\n        }\n\n        public isSynthesizedBlock(): bool {\n            return this.count() >= 1 &&\n                this.asts[this.top - 0].nodeType === TypeScript.NodeType.Block &&\n                (<TypeScript.Block>this.asts[this.top - 0]).isStatementBlock === false;\n        }\n    }\n\n    export function isValidAstNode(ast: Typ";
var v27358 = v27359 + 'eScript.ASTSpan): bool {\n        if (ast === null)\n            return false;\n\n        if (ast.minChar === -1 || ast.limChar === -1)\n            return false;\n\n        return true;\n    }\n\n    export class AstPathContext {\n        public path = new TypeScript.AstPath();\n    }\n\n    export enum GetAstPathOptions {\n        Default = 0,\n        EdgeInclusive = 1,\n        //We need this options dealing with an AST coming from an incomplete AST. For example:\n        //     class foo { // r\n        // If we ask for the AST at the position after the "r" character, we won\'t see we are \n        // inside a comment, because the "class" AST node has a limChar corresponding to the position of \n        // the "{" character, meaning we don\'t traverse the tree down to the stmt list of the class, meaning\n        // we don\'t find the "precomment" attached to the errorneous empty stmt.\n        //TODO: It would be nice to be able to get rid of this.\n        DontPruneSearchBasedOnPosition = 1 << 1,\n    }\n\n    ///\n    /// Return the stack of AST nodes containing "position"\n    ///\n    export function getAstPathToPosition(script: TypeScript.AST, pos: number, options = GetAstPathOptions.Default): TypeScript.AstPath {\n        var lookInComments = (comments: TypeScript.Comment[]) => {\n            if (comments && comments.length > 0) {\n                for (var i = 0; i < comments.length; i++) {\n                    var minChar = comments[i].minChar;\n                    var limChar = comments[i].limChar;\n                    if (!comments[i].isBlockComment) {\n                        limChar++; // For single line comments, include 1 more character (for the newline)\n                    }\n                    if (pos >= minChar && pos < limChar) {\n                        ctx.path.push(comments[i]);\n                    }\n                }\n            }\n        }\n\n        var pre = function (cur: TypeScript.AST, parent: TypeScript.AST, walker: IAstWalker) {\n            if (isValidAstNode(cur)) {\n\n                // Add "cur" to the stack if it contains our position\n                // For "identifier" nodes, we need a special case: A position equal to "limChar" is\n                // valid, since the position corresponds to a caret position (in between characters)\n                // For example:\n                //  bar\n                //  0123\n                // If "position == 3", the caret is at the "right" of the "r" character, which should be considered valid\n                var inclusive =\n                    hasFlag(options, GetAstPathOptions.EdgeInclusive) ||\n                    cur.nodeType === TypeScript.NodeType.Name ||\n                    pos === script.limChar; // Special "EOF" case\n\n                var minChar = cur.minChar;\n                var limChar = cur.limChar + (inclusive ? 1 : 0)\n                if (pos >= minChar && pos < limChar) {\n\n                    // TODO: Since AST is sometimes not correct wrt to position, only add "cur" if it\'s better\n                    //       than top of the stack.\n                    var previous = ctx.path.ast();\n                    if (previous == null || (cur.minChar >= previous.minChar && cur.limChar <= previous.limChar)) {\n                        ctx.path.push(cur);\n                    }\n                    else {\n                        //logger.log("TODO: Ignoring node because minChar, limChar not better than previous node in stack");\n                    }\n                }\n\n                // The AST walker skips comments, but we might be in one, so check the pre/post comments for this node manually\n                if (pos < limChar) {\n                    lookInComments(cur.preComments);\n                }\n                if (pos >= minChar) {\n                    lookInComments(cur.postComments);\n                }\n\n                if (!hasFlag(options, GetAstPathOptions.DontPruneSearchBasedOnPosition)) {\n                    // Don\'t go further down the tree if pos is outside of [minChar, limChar]\n                    walker.options.goChildren = (minChar <= pos && pos <= limChar);\n                }\n            }\n            return cur;\n        }\n\n        var ctx = new AstPathContext();\n        TypeScript.getAstWalkerFactory().walk(script, pre, null, null, ctx);\n        return ctx.path;\n    }\n\n    //\n    // Find a source text offset that is safe for lexing tokens at the given position.\n    // This is used when "position" might be inside a comment or string, etc.\n    //\n    export function getTokenizationOffset(script: TypeScript.Script, position: number): number {\n        var bestOffset = 0;\n        var pre = (cur: TypeScript.AST, parent: TypeScript.AST, walker: TypeScript.IAstWalker): TypeScript.AST => {\n            if (TypeScript.isValidAstNode(cur)) {\n                // Did we find a closer offset?\n                if (cur.minChar <= position) {\n                    bestOffset = max(bestOffset, cur.minChar);\n                }\n\n                // Stop the walk if this node is not related to ';
var v27357 = v27358 + '"minChar"\n                if (cur.minChar > position || cur.limChar < bestOffset) {\n                    walker.options.goChildren = false;\n                }\n            }\n\n            return cur;\n        }\n\n        TypeScript.getAstWalkerFactory().walk(script, pre);\n        return bestOffset;\n    }\n\n    ///\n    /// Simple function to Walk an AST using a simple callback function.\n    ///\n    export function walkAST(ast: TypeScript.AST, callback: (path: AstPath, walker: TypeScript.IAstWalker) => void ): void {\n        var pre = function (cur: TypeScript.AST, parent: TypeScript.AST, walker: TypeScript.IAstWalker) {\n            var path: TypeScript.AstPath = walker.state;\n            path.push(cur);\n            callback(path, walker);\n            return cur;\n        }\n        var post = function (cur: TypeScript.AST, parent: TypeScript.AST, walker: TypeScript.IAstWalker) {\n            var path: TypeScript.AstPath = walker.state;\n            path.pop();\n            return cur;\n        }\n\n        var path = new AstPath();\n        TypeScript.getAstWalkerFactory().walk(ast, pre, post, null, path);\n    }\n}\n//\n// Copyright (c) Microsoft Corporation.  All rights reserved.\n// \n// Licensed under the Apache License, Version 2.0 (the "License");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an "AS IS" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n\n///<reference path=\'typescript.ts\' />\n\nmodule TypeScript {\n    export class ASTSpan {\n        public minChar: number = -1;  // -1 = "undefined" or "compiler generated"\n        public limChar: number = -1;  // -1 = "undefined" or "compiler generated"   \n    }\n\n    export class AST extends ASTSpan {\n        public type: Type = null;\n        public flags = ASTFlags.Writeable;\n\n        // REVIEW: for diagnostic purposes\n        public passCreated: number = CompilerDiagnostics.analysisPass;\n\n        public preComments: Comment[] = null;\n        public postComments: Comment[] = null;\n        private docComments: Comment[] = null;\n\n        public isParenthesized = false;\n\n        constructor (public nodeType: NodeType) {\n            super();\n        }\n\n        public isExpression() { return false; }\n\n        public isStatementOrExpression() { return false; }\n\n        public isCompoundStatement() { return false; }\n\n        public isLeaf() { return this.isStatementOrExpression() && (!this.isCompoundStatement()); }\n        \n        public isDeclaration() { return false; }\n\n        public typeCheck(typeFlow: TypeFlow) {\n            switch (this.nodeType) {\n                case NodeType.Error:\n                case NodeType.EmptyExpr:\n                    this.type = typeFlow.anyType;\n                    break;\n                case NodeType.This:\n                    return typeFlow.typeCheckThis(this);\n                case NodeType.Null:\n                    this.type = typeFlow.nullType;\n                    break;\n                case NodeType.False:\n                case NodeType.True:\n                    this.type = typeFlow.booleanType;\n                    break;\n                case NodeType.Super:\n                    return typeFlow.typeCheckSuper(this);\n                case NodeType.EndCode:\n                case NodeType.Empty:\n                case NodeType.Void:\n                    this.type = typeFlow.voidType;\n                    break;\n                default:\n                    throw new Error("please implement in derived class");\n            }\n            return this;\n        }\n\n        public emit(emitter: Emitter, tokenId: TokenID, startLine: bool) {\n            emitter.emitParensAndCommentsInPlace(this, true);\n            switch (this.nodeType) {\n                case NodeType.This:\n                    emitter.recordSourceMappingStart(this);\n                    if (emitter.thisFnc && (hasFlag(emitter.thisFnc.fncFlags, FncFlags.IsFatArrowFunction))) {\n                        emitter.writeToOutput("_this");\n                    }\n                    else {\n                        emitter.writeToOutput("this");\n                    }\n                    emitter.recordSourceMappingEnd(this);\n                    break;\n                case NodeType.Null:\n                    emitter.recordSourceMappingStart(this);\n                    emitter.writeToOutput("null");\n                    emitter.recordSourceMappingEnd(this);\n                    break;\n                case NodeType.False:\n                    emitter.recordSourceMappingStart(this);\n                    emitter.writeToOutput("false");\n                    emitter.recordSourceMappingEnd(this);\n                    break;\n                case NodeType.True';
var v27356 = v27357 + ':\n                    emitter.recordSourceMappingStart(this);\n                    emitter.writeToOutput("true");\n                    emitter.recordSourceMappingEnd(this);\n                    break;\n                case NodeType.Super:\n                    emitter.recordSourceMappingStart(this);\n                    emitter.emitSuperReference();\n                    emitter.recordSourceMappingEnd(this);\n                    break;\n                case NodeType.EndCode:\n                case NodeType.Error:\n                case NodeType.EmptyExpr:\n                    break;\n                case NodeType.Empty:\n                    emitter.recordSourceMappingStart(this);\n                    emitter.recordSourceMappingEnd(this);\n                    break;\n                case NodeType.Void:\n                    emitter.recordSourceMappingStart(this);\n                    emitter.writeToOutput("void ");\n                    emitter.recordSourceMappingEnd(this);\n                    break;\n                default:\n                    throw new Error("please implement in derived class");\n            }\n            emitter.emitParensAndCommentsInPlace(this, false);\n        }\n\n        public print(context: PrintContext) {\n            context.startLine();\n            var lineCol = { line: -1, col: -1 };\n            var limLineCol = { line: -1, col: -1 };\n            if (context.parser !== null) {\n                context.parser.getSourceLineCol(lineCol, this.minChar);\n                context.parser.getSourceLineCol(limLineCol, this.limChar);\n                context.write("(" + lineCol.line + "," + lineCol.col + ")--" +\n                              "(" + limLineCol.line + "," + limLineCol.col + "): ");\n            }\n            var lab = this.printLabel();\n            if (hasFlag(this.flags, ASTFlags.Error)) {\n                lab += " (Error)";\n            }\n            context.writeLine(lab);\n        }\n\n        public printLabel() {\n            if (nodeTypeTable[this.nodeType] !== undefined) {\n                return nodeTypeTable[this.nodeType];\n            }\n            else {\n                return (<any>NodeType)._map[this.nodeType];\n            }\n        }\n\n        public addToControlFlow(context: ControlFlowContext): void {\n            // by default, AST adds itself to current basic block and does not check its children\n            context.walker.options.goChildren = false;\n            context.addContent(this);\n        }\n\n        public netFreeUses(container: Symbol, freeUses: StringHashTable) {\n        }\n\n        public treeViewLabel() {\n            return (<any>NodeType)._map[this.nodeType];\n        }\n\n        public static getResolvedIdentifierName(name: string): string {\n            if (!name) return "";\n\n            var resolved = "";\n            var start = 0;\n            var i = 0;\n            while(i <= name.length - 6) {\n                // Look for escape sequence \\uxxxx\n                if (name.charAt(i) == \'\\\\\' && name.charAt(i+1) == \'u\') {\n                    var charCode = parseInt(name.substr(i + 2, 4), 16);\n                    resolved += name.substr(start, i - start);\n                    resolved += String.fromCharCode(charCode);\n                    i += 6;\n                    start = i;\n                    continue;\n                } \n                i++;\n            }\n            // Append remaining string\n            resolved += name.substring(start);\n            return resolved;\n        }\n\n        public getDocComments() : Comment[] {\n            if (!this.isDeclaration() || !this.preComments || this.preComments.length == 0) {\n                return [];\n            }\n\n            if (!this.docComments) {\n                var preCommentsLength = this.preComments.length;\n                var docComments: Comment[] = [];\n                for (var i = preCommentsLength - 1; i >= 0; i--) {\n                    if (this.preComments[i].isDocComment()) {\n                        var prevDocComment = docComments.length > 0 ? docComments[docComments.length - 1] : null;\n                        if (prevDocComment == null || // If the help comments were not yet set then this is the comment\n                             (this.preComments[i].limLine == prevDocComment.minLine ||\n                              this.preComments[i].limLine + 1 == prevDocComment.minLine)) { // On same line or next line\n                            docComments.push(this.preComments[i]);\n                            continue;\n                        }\n                    }\n                    break;\n                }\n\n                this.docComments = docComments.reverse();\n            }\n\n            return this.docComments;\n        }\n    }\n\n    export class IncompleteAST extends AST {\n        constructor (min: number, lim: number) {\n            super(NodeType.Error);\n\n            this.minChar = min;\n            this.limChar = lim;\n        }\n    }\n\n    export class ASTList extends AST {\n        public enclosingScope: SymbolScope = null;\n        publ';
var v27355 = v27356 + "ic members: AST[] = new AST[];\n\n        constructor () {\n            super(NodeType.List);\n        }\n\n        public addToControlFlow(context: ControlFlowContext) {\n            var len = this.members.length;\n            for (var i = 0; i < len; i++) {\n                if (context.noContinuation) {\n                    context.addUnreachable(this.members[i]);\n                    break;\n                }\n                else {\n                    this.members[i] = context.walk(this.members[i], this);\n                }\n            }\n            context.walker.options.goChildren = false;\n        }\n\n        public append(ast: AST) {\n            this.members[this.members.length] = ast;\n            return this;\n        }\n\n        public appendAll(ast: AST) {\n            if (ast.nodeType == NodeType.List) {\n                var list = <ASTList>ast;\n                for (var i = 0, len = list.members.length; i < len; i++) {\n                    this.append(list.members[i]);\n                }\n            }\n            else {\n                this.append(ast);\n            }\n            return this;\n        }\n\n        public emit(emitter: Emitter, tokenId: TokenID, startLine: bool) {\n            emitter.recordSourceMappingStart(this);\n            emitter.emitJavascriptList(this, null, TokenID.Semicolon, startLine, false, false);\n            emitter.recordSourceMappingEnd(this);\n        }\n\n        public typeCheck(typeFlow: TypeFlow) {\n            var len = this.members.length;\n            typeFlow.nestingLevel++;\n            for (var i = 0; i < len; i++) {\n                if (this.members[i]) {\n                    this.members[i] = this.members[i].typeCheck(typeFlow);\n                }\n            }\n            typeFlow.nestingLevel--;\n            return this;\n        }\n    }\n\n    export class Identifier extends AST {\n        public sym: Symbol = null;\n        public cloId = -1;\n        public text: string;\n\n        // 'actualText' is the text that the user has entered for the identifier. the text might \n        // include any Unicode escape sequences (e.g.: \\u0041 for 'A'). 'text', however, contains \n        // the resolved value of any escape sequences in the actual text; so in the previous \n        // example, actualText = '\\u0041', text = 'A'.\n        //\n        // For purposes of finding a symbol, use text, as this will allow you to match all \n        // variations of the variable text. For full-fidelity translation of the user input, such\n        // as emitting, use the actualText field.\n        // \n        // Note: \n        //    To change text, and to avoid running into a situation where 'actualText' does not \n        //    match 'text', always use setText.\n        constructor (public actualText: string, public hasEscapeSequence?: bool) {\n            super(NodeType.Name);\n            this.setText(actualText, hasEscapeSequence);\n        }\n\n        public setText(actualText: string, hasEscapeSequence?: bool) {\n            this.actualText = actualText;\n            if (hasEscapeSequence) {\n                this.text = AST.getResolvedIdentifierName(actualText);\n            }\n            else {\n                this.text = actualText;\n            }\n        }\n\n        public isMissing() { return false; }\n        public isLeaf() { return true; }\n\n        public treeViewLabel() {\n            return \"id: \" + this.actualText;\n        }\n\n        public printLabel() {\n            if (this.actualText) {\n                return \"id: \" + this.actualText;\n            }\n            else {\n                return \"name node\";\n            }\n        }\n\n        public typeCheck(typeFlow: TypeFlow) {\n            return typeFlow.typeCheckName(this);\n        }\n\n        public emit(emitter: Emitter, tokenId: TokenID, startLine: bool) {\n            emitter.emitJavascriptName(this, true);\n        }\n\n        public static fromToken(token: Token): Identifier {\n            return new Identifier(token.getText(), (<IdentifierToken>token).hasEscapeSequence);\n        }\n    }\n\n    export class MissingIdentifier extends Identifier {\n        constructor () {\n            super(\"__missing\");\n        }\n\n        public isMissing() {\n            return true;\n        }\n\n        public emit(emitter: Emitter, tokenId: TokenID, startLine: bool) {\n            // Emit nothing for a missing ID\n        }\n    }\n\n    export class Label extends AST {\n        constructor (public id: Identifier) {\n            super(NodeType.Label);\n        }\n\n        public printLabel() { return this.id.actualText + \":\"; }\n\n        public typeCheck(typeFlow: TypeFlow) {\n            this.type = typeFlow.voidType;\n            return this;\n        }\n\n        public emit(emitter: Emitter, tokenId: TokenID, startLine: bool) {\n            emitter.emitParensAndCommentsInPlace(this, true);\n            emitter.recordSourceMappingStart(this);\n            emitter.recordSourceMappingStart(this.id);\n            emitter.writeToOutput(this.id.actualText);\n            emitter.recordSourceMappingEnd(this.id);";
var v27354 = v27355 + '\n            emitter.writeLineToOutput(":");\n            emitter.recordSourceMappingEnd(this);\n            emitter.emitParensAndCommentsInPlace(this, false);\n        }\n    }\n\n    export class Expression extends AST {\n        constructor (nodeType: NodeType) {\n            super(nodeType);\n        }\n\n        public isExpression() { return true; }\n\n        public isStatementOrExpression() { return true; }\n    }\n\n    export class UnaryExpression extends Expression {\n        public targetType: Type = null; // Target type for an object literal (null if no target type)\n        public castTerm: AST = null;\n\n        constructor (nodeType: NodeType, public operand: AST) {\n            super(nodeType);\n        }\n\n        public addToControlFlow(context: ControlFlowContext): void {\n            super.addToControlFlow(context);\n            // TODO: add successor as catch block/finally block if present\n            if (this.nodeType == NodeType.Throw) {\n                context.returnStmt();\n            }\n        }\n\n        public typeCheck(typeFlow: TypeFlow) {\n            switch (this.nodeType) {\n                case NodeType.Not:\n                    return typeFlow.typeCheckBitNot(this);\n\n                case NodeType.LogNot:\n                    return typeFlow.typeCheckLogNot(this);\n\n                case NodeType.Pos:\n                case NodeType.Neg:\n                    return typeFlow.typeCheckUnaryNumberOperator(this);\n\n                case NodeType.IncPost:\n                case NodeType.IncPre:\n                case NodeType.DecPost:\n                case NodeType.DecPre:\n                    return typeFlow.typeCheckIncOrDec(this);\n\n                case NodeType.ArrayLit:\n                    typeFlow.typeCheckArrayLit(this);\n                    return this;\n\n                case NodeType.ObjectLit:\n                    typeFlow.typeCheckObjectLit(this);\n                    return this;\n\n                case NodeType.Throw:\n                    this.operand = typeFlow.typeCheck(this.operand);\n                    this.type = typeFlow.voidType;\n                    return this;\n\n                case NodeType.Typeof:\n                    this.operand = typeFlow.typeCheck(this.operand);\n                    this.type = typeFlow.stringType;\n                    return this;\n\n                case NodeType.Delete:\n                    this.operand = typeFlow.typeCheck(this.operand);\n                    this.type = typeFlow.booleanType;\n                    break;\n\n                case NodeType.TypeAssertion:\n                    this.castTerm = typeFlow.typeCheck(this.castTerm);\n                    var applyTargetType = !this.operand.isParenthesized;\n\n                    var targetType = applyTargetType ? this.castTerm.type : null;\n\n                    typeFlow.checker.typeCheckWithContextualType(targetType, typeFlow.checker.inProvisionalTypecheckMode(), true, this.operand);\n                    typeFlow.castWithCoercion(this.operand, this.castTerm.type, false, true);\n                    this.type = this.castTerm.type;\n                    return this;\n\n                case NodeType.Void:\n                    // REVIEW - Although this is good to do for completeness\'s sake,\n                    // this shouldn\'t be strictly necessary from the void operator\'s\n                    // point of view\n                    this.operand = typeFlow.typeCheck(this.operand);\n                    this.type = typeFlow.checker.undefinedType;\n                    break;\n\n                default:\n                    throw new Error("please implement in derived class");\n            }\n            return this;\n        }\n\n        public emit(emitter: Emitter, tokenId: TokenID, startLine: bool) {\n            emitter.emitParensAndCommentsInPlace(this, true);\n            emitter.recordSourceMappingStart(this);\n            switch (this.nodeType) {\n                case NodeType.IncPost:\n                    emitter.emitJavascript(this.operand, TokenID.PlusPlus, false);\n                    emitter.writeToOutput("++");\n                    break;\n                case NodeType.LogNot:\n                    emitter.writeToOutput("!");\n                    emitter.emitJavascript(this.operand, TokenID.Exclamation, false);\n                    break;\n                case NodeType.DecPost:\n                    emitter.emitJavascript(this.operand, TokenID.MinusMinus, false);\n                    emitter.writeToOutput("--");\n                    break;\n                case NodeType.ObjectLit:\n                    emitter.emitObjectLiteral(<ASTList>this.operand);\n                    break;\n                case NodeType.ArrayLit:\n                    emitter.emitArrayLiteral(<ASTList>this.operand);\n                    break;\n                case NodeType.Not:\n                    emitter.writeToOutput("~");\n                    emitter.emitJavascript(this.operand, TokenID.Tilde, false);\n                    break;\n                case NodeType.Neg:\n                    emitter.writeToOutput("-"';
var v27353 = v27354 + ');\n                    if (this.operand.nodeType == NodeType.Neg) {\n                        this.operand.isParenthesized = true;\n                    }\n                    emitter.emitJavascript(this.operand, TokenID.Minus, false);\n                    break;\n                case NodeType.Pos:\n                    emitter.writeToOutput("+");\n                    if (this.operand.nodeType == NodeType.Pos) {\n                        this.operand.isParenthesized = true;\n                    }\n                    emitter.emitJavascript(this.operand, TokenID.Plus, false);\n                    break;\n                case NodeType.IncPre:\n                    emitter.writeToOutput("++");\n                    emitter.emitJavascript(this.operand, TokenID.PlusPlus, false);\n                    break;\n                case NodeType.DecPre:\n                    emitter.writeToOutput("--");\n                    emitter.emitJavascript(this.operand, TokenID.MinusMinus, false);\n                    break;\n                case NodeType.Throw:\n                    emitter.writeToOutput("throw ");\n                    emitter.emitJavascript(this.operand, TokenID.Tilde, false);\n                    emitter.writeToOutput(";");\n                    break;\n                case NodeType.Typeof:\n                    emitter.writeToOutput("typeof ");\n                    emitter.emitJavascript(this.operand, TokenID.Tilde, false);\n                    break;\n                case NodeType.Delete:\n                    emitter.writeToOutput("delete ");\n                    emitter.emitJavascript(this.operand, TokenID.Tilde, false);\n                    break;\n                case NodeType.Void:\n                    emitter.writeToOutput("void ");\n                    emitter.emitJavascript(this.operand, TokenID.Tilde, false);\n                    break;\n                case NodeType.TypeAssertion:\n                    emitter.emitJavascript(this.operand, TokenID.Tilde, false);\n                    break;\n                default:\n                    throw new Error("please implement in derived class");\n            }\n            emitter.recordSourceMappingEnd(this);\n            emitter.emitParensAndCommentsInPlace(this, false);\n        }\n    }\n\n    export class CallExpression extends Expression {\n        constructor (nodeType: NodeType,\n                     public target: AST,\n                     public arguments: ASTList) {\n            super(nodeType);\n            this.minChar = this.target.minChar;\n        }\n\n        public signature: Signature = null;\n\n        public typeCheck(typeFlow: TypeFlow) {\n            if (this.nodeType == NodeType.New) {\n                return typeFlow.typeCheckNew(this);\n            }\n            else {\n                return typeFlow.typeCheckCall(this);\n            }\n        }\n\n        public emit(emitter: Emitter, tokenId: TokenID, startLine: bool) {\n            emitter.emitParensAndCommentsInPlace(this, true);\n            emitter.recordSourceMappingStart(this);\n\n            if (this.nodeType == NodeType.New) {\n                emitter.emitNew(this.target, this.arguments);\n            }\n            else {\n                emitter.emitCall(this, this.target, this.arguments);\n            }\n\n            emitter.recordSourceMappingEnd(this);\n            emitter.emitParensAndCommentsInPlace(this, false);\n        }\n    }\n\n    export class BinaryExpression extends Expression {\n        constructor (nodeType: NodeType, public operand1: AST, public operand2: AST) {\n            super(nodeType);\n        }\n\n        public typeCheck(typeFlow: TypeFlow) {\n            switch (this.nodeType) {\n                case NodeType.Dot:\n                    return typeFlow.typeCheckDotOperator(this);\n                case NodeType.Asg:\n                    return typeFlow.typeCheckAsgOperator(this);\n                case NodeType.Add:\n                case NodeType.Sub:\n                case NodeType.Mul:\n                case NodeType.Div:\n                case NodeType.Mod:\n                case NodeType.Or:\n                case NodeType.And:\n                    return typeFlow.typeCheckArithmeticOperator(this, false);\n                case NodeType.Xor:\n                    return typeFlow.typeCheckBitwiseOperator(this, false);\n                case NodeType.Ne:\n                case NodeType.Eq:\n                    var text: string;\n                    if (typeFlow.checker.styleSettings.eqeqeq) {\n                        text = nodeTypeTable[this.nodeType];\n                        typeFlow.checker.errorReporter.styleError(this, "use of " + text);\n                    }\n                    else if (typeFlow.checker.styleSettings.eqnull) {\n                        text = nodeTypeTable[this.nodeType];\n                        if ((this.operand2 !== null) && (this.operand2.nodeType == NodeType.Null)) {\n                            typeFlow.checker.errorReporter.styleError(this, "use of " + text + " to compare with null");\n                        }\n                    }\n         ';
var v27352 = v27353 + '       case NodeType.Eqv:\n                case NodeType.NEqv:\n                case NodeType.Lt:\n                case NodeType.Le:\n                case NodeType.Ge:\n                case NodeType.Gt:\n                    return typeFlow.typeCheckBooleanOperator(this);\n                case NodeType.Index:\n                    return typeFlow.typeCheckIndex(this);\n                case NodeType.Member:\n                    this.type = typeFlow.voidType;\n                    return this;\n                case NodeType.LogOr:\n                    return typeFlow.typeCheckLogOr(this);\n                case NodeType.LogAnd:\n                    return typeFlow.typeCheckLogAnd(this);\n                case NodeType.AsgAdd:\n                case NodeType.AsgSub:\n                case NodeType.AsgMul:\n                case NodeType.AsgDiv:\n                case NodeType.AsgMod:\n                case NodeType.AsgOr:\n                case NodeType.AsgAnd:\n                    return typeFlow.typeCheckArithmeticOperator(this, true);\n                case NodeType.AsgXor:\n                    return typeFlow.typeCheckBitwiseOperator(this, true);\n                case NodeType.Lsh:\n                case NodeType.Rsh:\n                case NodeType.Rs2:\n                    return typeFlow.typeCheckShift(this, false);\n                case NodeType.AsgLsh:\n                case NodeType.AsgRsh:\n                case NodeType.AsgRs2:\n                    return typeFlow.typeCheckShift(this, true);\n                case NodeType.Comma:\n                    return typeFlow.typeCheckCommaOperator(this);\n                case NodeType.InstOf:\n                    return typeFlow.typeCheckInstOf(this);\n                case NodeType.In:\n                    return typeFlow.typeCheckInOperator(this);\n                case NodeType.From:\n                    typeFlow.checker.errorReporter.simpleError(this, "Illegal use of \'from\' keyword in binary expression");\n                    break;\n                default:\n                    throw new Error("please implement in derived class");\n            }\n            return this;\n        }\n\n        public emit(emitter: Emitter, tokenId: TokenID, startLine: bool) {\n            var binTokenId = nodeTypeToTokTable[this.nodeType];\n\n            emitter.emitParensAndCommentsInPlace(this, true);\n            emitter.recordSourceMappingStart(this);\n            if (binTokenId != undefined) {\n\n                emitter.emitJavascript(this.operand1, binTokenId, false);\n\n                if (tokenTable[binTokenId].text == "instanceof") {\n                    emitter.writeToOutput(" instanceof ");\n                }\n                else if (tokenTable[binTokenId].text == "in") {\n                    emitter.writeToOutput(" in ");\n                }\n                else {\n                    emitter.writeToOutputTrimmable(" " + tokenTable[binTokenId].text + " ");\n                }\n\n                emitter.emitJavascript(this.operand2, binTokenId, false);\n            }\n            else {\n                switch (this.nodeType) {\n                    case NodeType.Dot:\n                        if (!emitter.tryEmitConstant(this)) {\n                            emitter.emitJavascript(this.operand1, TokenID.Dot, false);\n                            emitter.writeToOutput(".");\n                            emitter.emitJavascriptName(<Identifier>this.operand2, false);\n                        }\n                        break;\n                    case NodeType.Index:\n                        emitter.emitIndex(this.operand1, this.operand2);\n                        break;\n\n                    case NodeType.Member:\n                        if (this.operand2.nodeType == NodeType.FuncDecl && (<FuncDecl>this.operand2).isAccessor()) {\n                            var funcDecl = <FuncDecl>this.operand2;\n                            if (hasFlag(funcDecl.fncFlags, FncFlags.GetAccessor)) {\n                                emitter.writeToOutput("get ");\n                            }\n                            else {\n                                emitter.writeToOutput("set ");\n                            }\n                            emitter.emitJavascript(this.operand1, TokenID.Colon, false);\n                        }\n                        else {\n                            emitter.emitJavascript(this.operand1, TokenID.Colon, false);\n                            emitter.writeToOutputTrimmable(": ");\n                        }\n                        emitter.emitJavascript(this.operand2, TokenID.Comma, false);\n                        break;\n                    case NodeType.Comma:\n                        emitter.emitJavascript(this.operand1, TokenID.Comma, false);\n                        if (emitter.emitState.inObjectLiteral) {\n                            emitter.writeLineToOutput(", ");\n                        }\n                        else {\n                            emitter.writeToOutput(",");\n                        }\n                        emitter.emitJavascript(this.op';
var v27351 = v27352 + 'erand2, TokenID.Comma, false);\n                        break;\n                    case NodeType.Is:\n                        throw new Error("should be de-sugared during type check");\n                    default:\n                        throw new Error("please implement in derived class");\n                }\n            }\n            emitter.recordSourceMappingEnd(this);\n            emitter.emitParensAndCommentsInPlace(this, false);\n        }\n    }\n\n    export class ConditionalExpression extends Expression {\n        constructor (public operand1: AST,\n                     public operand2: AST,\n                     public operand3: AST) {\n            super(NodeType.ConditionalExpression);\n        }\n\n        public typeCheck(typeFlow: TypeFlow) {\n            return typeFlow.typeCheckQMark(this);\n        }\n\n        public emit(emitter: Emitter, tokenId: TokenID, startLine: bool) {\n            emitter.emitParensAndCommentsInPlace(this, true);\n            emitter.recordSourceMappingStart(this);\n            emitter.emitJavascript(this.operand1, TokenID.Question, false);\n            emitter.writeToOutput(" ? ");\n            emitter.emitJavascript(this.operand2, TokenID.Question, false);\n            emitter.writeToOutput(" : ");\n            emitter.emitJavascript(this.operand3, TokenID.Question, false);\n            emitter.recordSourceMappingEnd(this);\n            emitter.emitParensAndCommentsInPlace(this, false);\n        }\n    }\n\n    export class NumberLiteral extends Expression {\n        constructor (public value: number, public hasEmptyFraction?: bool) {\n            super(NodeType.NumberLit);\n        }\n\n        public isNegativeZero = false;\n\n        public typeCheck(typeFlow: TypeFlow) {\n            this.type = typeFlow.doubleType;\n            return this;\n        }\n\n        public treeViewLabel() {\n            return "num: " + this.printLabel();\n        }\n\n        public emit(emitter: Emitter, tokenId: TokenID, startLine: bool) {\n            emitter.emitParensAndCommentsInPlace(this, true);\n            emitter.recordSourceMappingStart(this);\n            if (this.isNegativeZero) {\n                emitter.writeToOutput("-");\n            }\n\n            emitter.writeToOutput(this.value.toString());\n\n            if (this.hasEmptyFraction)\n                emitter.writeToOutput(".0");\n\n            emitter.recordSourceMappingEnd(this);\n            emitter.emitParensAndCommentsInPlace(this, false);\n        }\n\n        public printLabel() {\n            if (Math.floor(this.value) != this.value) {\n                return this.value.toFixed(2).toString();\n            }\n            else if (this.hasEmptyFraction) {\n                return this.value.toString() + ".0";\n            }\n            else {\n                return this.value.toString();\n            }\n        }\n    }\n\n    export class RegexLiteral extends Expression {\n        constructor (public regex) {\n            super(NodeType.Regex);\n        }\n        \n        public typeCheck(typeFlow: TypeFlow) {\n            this.type = typeFlow.regexType;\n            return this;\n        }\n\n        public emit(emitter: Emitter, tokenId: TokenID, startLine: bool) {\n            emitter.emitParensAndCommentsInPlace(this, true);\n            emitter.recordSourceMappingStart(this);\n            emitter.writeToOutput(this.regex.toString());\n            emitter.recordSourceMappingEnd(this);\n            emitter.emitParensAndCommentsInPlace(this, false);\n        }\n    }\n\n    export class StringLiteral extends Expression {\n        constructor (public text: string) {\n            super(NodeType.QString);\n        }\n\n        public emit(emitter: Emitter, tokenId: TokenID, startLine: bool) {\n            emitter.emitParensAndCommentsInPlace(this, true);\n            emitter.recordSourceMappingStart(this);\n            emitter.emitStringLiteral(this.text);\n            emitter.recordSourceMappingEnd(this);\n            emitter.emitParensAndCommentsInPlace(this, false);\n        }\n\n        public typeCheck(typeFlow: TypeFlow) {\n            this.type = typeFlow.stringType;\n            return this;\n        }\n\n        public treeViewLabel() {\n            return "st: " + this.text;\n        }\n\n        public printLabel() {\n            return this.text;\n        }\n    }\n\n    export class ModuleElement extends AST {\n        constructor (nodeType: NodeType) {\n            super(nodeType);\n        }\n    }\n\n    export class ImportDeclaration extends ModuleElement {\n        public isStatementOrExpression() { return true; }\n        public varFlags = VarFlags.None;\n        public isDynamicImport = false;\n        public isDeclaration() { return true; }\n\n        constructor (public id: Identifier, public alias: AST) {\n            super(NodeType.ImportDeclaration);\n        }\n\n        public emit(emitter: Emitter, tokenId: TokenID, startLine: bool) {\n            var mod = <ModuleType>this.alias.type;\n            // REVIEW: Only modules may be aliased for now, though there\'s no real\n            // restriction on what the typ';
var v27350 = v27351 + 'e symbol may be\n            if (!this.isDynamicImport || (this.id.sym && !(<TypeSymbol>this.id.sym).onlyReferencedAsTypeRef)) {\n                var prevModAliasId = emitter.modAliasId;\n                var prevFirstModAlias = emitter.firstModAlias;\n\n                emitter.recordSourceMappingStart(this);\n                emitter.emitParensAndCommentsInPlace(this, true);\n                emitter.writeToOutput("var " + this.id.actualText + " = ");\n                emitter.modAliasId = this.id.actualText;\n                emitter.firstModAlias = this.firstAliasedModToString();\n                emitter.emitJavascript(this.alias, TokenID.Tilde, false);\n                // the dynamic import case will insert the semi-colon automatically\n                if (!this.isDynamicImport) {\n                    emitter.writeToOutput(";");\n                }\n                emitter.emitParensAndCommentsInPlace(this, false);\n                emitter.recordSourceMappingEnd(this);\n\n                emitter.modAliasId = prevModAliasId;\n                emitter.firstModAlias = prevFirstModAlias;\n            }\n        }\n\n        public typeCheck(typeFlow: TypeFlow) {\n            return typeFlow.typeCheckImportDecl(this);\n        }\n\n        public getAliasName(aliasAST?: AST = this.alias) : string {\n            if (aliasAST.nodeType == NodeType.Name) {\n                return (<Identifier>aliasAST).actualText;\n            } else {\n                var dotExpr = <BinaryExpression>aliasAST;\n                return this.getAliasName(dotExpr.operand1) + "." + this.getAliasName(dotExpr.operand2);\n            }\n        }\n\n        public firstAliasedModToString() {\n            if (this.alias.nodeType == NodeType.Name) {\n                return (<Identifier>this.alias).actualText;\n            }\n            else {\n                var dotExpr = <BinaryExpression>this.alias;\n                var firstMod = <Identifier>dotExpr.operand1;\n                return firstMod.actualText;\n            }\n        }\n    }\n\n    export class BoundDecl extends AST {\n        public init: AST = null;\n        public typeExpr: AST = null;\n        public varFlags = VarFlags.None;\n        public sym: Symbol = null;\n        public isDeclaration() { return true; }\n\n        constructor (public id: Identifier, nodeType: NodeType, public nestingLevel: number) {\n            super(nodeType);\n        }\n\n        public isStatementOrExpression() { return true; }\n\n        public isPrivate() { return hasFlag(this.varFlags, VarFlags.Private); }\n        public isPublic() { return hasFlag(this.varFlags, VarFlags.Public); }\n        public isProperty() { return hasFlag(this.varFlags, VarFlags.Property); }\n\n        public typeCheck(typeFlow: TypeFlow) {\n            return typeFlow.typeCheckBoundDecl(this);\n        }\n\n        public printLabel() {\n            return this.treeViewLabel();\n        }\n    }\n\n    export class VarDecl extends BoundDecl {\n        constructor (id: Identifier, nest: number) {\n            super(id, NodeType.VarDecl, nest);\n        }\n\n        public isAmbient() { return hasFlag(this.varFlags, VarFlags.Ambient); }\n        public isExported() { return hasFlag(this.varFlags, VarFlags.Exported); }\n        public isStatic() { return hasFlag(this.varFlags, VarFlags.Static); }\n\n        public emit(emitter: Emitter, tokenId: TokenID, startLine: bool) {\n            emitter.emitJavascriptVarDecl(this, tokenId);\n        }\n\n        public treeViewLabel() {\n            return "var " + this.id.actualText;\n        }\n    }\n\n    export class ArgDecl extends BoundDecl {\n        constructor (id: Identifier) {\n            super(id, NodeType.ArgDecl, 0);\n        }\n\n        public isOptional = false;\n\n        public isOptionalArg() { return this.isOptional || this.init; }\n\n        public treeViewLabel() {\n            return "arg: " + this.id.actualText;\n        }\n\n        public parameterPropertySym: FieldSymbol = null;\n\n        public emit(emitter: Emitter, tokenId: TokenID, startLine: bool) {\n            emitter.emitParensAndCommentsInPlace(this, true);\n            emitter.recordSourceMappingStart(this);\n            emitter.writeToOutput(this.id.actualText);\n            emitter.recordSourceMappingEnd(this);\n            emitter.emitParensAndCommentsInPlace(this, false);\n        }\n    }\n\n    var internalId = 0;\n\n    export class FuncDecl extends AST {\n        public hint: string = null;\n        public fncFlags = FncFlags.None;\n        public returnTypeAnnotation: AST = null;\n        public symbols: IHashTable;\n        public variableArgList = false;\n        public signature: Signature;\n        public envids: Identifier[];\n        public jumpRefs: Identifier[] = null;\n        public internalNameCache: string = null;\n        public tmp1Declared = false;\n        public enclosingFnc: FuncDecl = null;\n        public freeVariables: Symbol[] = [];\n        public unitIndex = -1;\n        public classDecl: NamedDeclaration = null;\n        public boundToProperty: VarDecl = null;\n        public isOverload = fa';
var v27349 = v27350 + 'lse;\n        public innerStaticFuncs: FuncDecl[] = [];\n        public isTargetTypedAsMethod = false;\n        public isInlineCallLiteral = false;\n        public accessorSymbol: Symbol = null;\n        public leftCurlyCount = 0;\n        public rightCurlyCount = 0;\n        public returnStatementsWithExpressions: ReturnStatement[] = [];\n        public scopeType: Type = null; // Type of the FuncDecl, before target typing\n        public endingToken: ASTSpan = null;\n        public isDeclaration() { return true; }\n\n        constructor (public name: Identifier, public bod: ASTList, public isConstructor: bool,\n                     public arguments: ASTList, public vars: ASTList, public scopes: ASTList, public statics: ASTList,\n                     nodeType: number) {\n\n            super(nodeType);\n        }\n\n        public internalName(): string {\n            if (this.internalNameCache == null) {\n                var extName = this.getNameText();\n                if (extName) {\n                    this.internalNameCache = "_internal_" + extName;\n                }\n                else {\n                    this.internalNameCache = "_internal_" + internalId++;\n                }\n            }\n            return this.internalNameCache;\n        }\n\n        public hasSelfReference() { return hasFlag(this.fncFlags, FncFlags.HasSelfReference); }\n        public setHasSelfReference() { this.fncFlags |= FncFlags.HasSelfReference; }\n\n        public hasSuperReferenceInFatArrowFunction() { return hasFlag(this.fncFlags, FncFlags.HasSuperReferenceInFatArrowFunction); }\n        public setHasSuperReferenceInFatArrowFunction() { this.fncFlags |= FncFlags.HasSuperReferenceInFatArrowFunction; }\n\n        public addCloRef(id: Identifier, sym: Symbol): number {\n            if (this.envids == null) {\n                this.envids = new Identifier[];\n            }\n            this.envids[this.envids.length] = id;\n            var outerFnc = this.enclosingFnc;\n            if (sym) {\n                while (outerFnc && (outerFnc.type.symbol != sym.container)) {\n                    outerFnc.addJumpRef(sym);\n                    outerFnc = outerFnc.enclosingFnc;\n                }\n            }\n            return this.envids.length - 1;\n        }\n\n        public addJumpRef(sym: Symbol): void {\n            if (this.jumpRefs == null) {\n                this.jumpRefs = new Identifier[];\n            }\n            var id = new Identifier(sym.name);\n            this.jumpRefs[this.jumpRefs.length] = id;\n            id.sym = sym;\n            id.cloId = this.addCloRef(id, null);\n        }\n\n        public buildControlFlow(): ControlFlowContext {\n            var entry = new BasicBlock();\n            var exit = new BasicBlock();\n\n            var context = new ControlFlowContext(entry, exit);\n\n            var controlFlowPrefix = (ast: AST, parent: AST, walker: IAstWalker) => {\n                ast.addToControlFlow(walker.state);\n                return ast;\n            }\n\n            var walker = getAstWalkerFactory().getWalker(controlFlowPrefix, null, null, context);\n            context.walker = walker;\n            walker.walk(this.bod, this);\n\n            return context;\n        }\n\n        public typeCheck(typeFlow: TypeFlow) {\n            return typeFlow.typeCheckFunction(this);\n        }\n\n        public emit(emitter: Emitter, tokenId: TokenID, startLine: bool) {\n            emitter.emitJavascriptFunction(this);\n        }\n\n        public getNameText() {\n            if (this.name) {\n                return this.name.actualText;\n            }\n            else {\n                return this.hint;\n            }\n        }\n\n        public isMethod() {\n            return (this.fncFlags & FncFlags.Method) != FncFlags.None;\n        }\n\n        public isCallMember() { return hasFlag(this.fncFlags, FncFlags.CallMember); }\n        public isConstructMember() { return hasFlag(this.fncFlags, FncFlags.ConstructMember); }\n        public isIndexerMember() { return hasFlag(this.fncFlags, FncFlags.IndexerMember); }\n        public isSpecialFn() { return this.isCallMember() || this.isIndexerMember() || this.isConstructMember(); }\n        public isAnonymousFn() { return this.name === null; }\n        public isAccessor() { return hasFlag(this.fncFlags, FncFlags.GetAccessor) || hasFlag(this.fncFlags, FncFlags.SetAccessor); }\n        public isGetAccessor() { return hasFlag(this.fncFlags, FncFlags.GetAccessor); }\n        public isSetAccessor() { return hasFlag(this.fncFlags, FncFlags.SetAccessor); }\n        public isAmbient() { return hasFlag(this.fncFlags, FncFlags.Ambient); }\n        public isExported() { return hasFlag(this.fncFlags, FncFlags.Exported); }\n        public isPrivate() { return hasFlag(this.fncFlags, FncFlags.Private); }\n        public isPublic() { return hasFlag(this.fncFlags, FncFlags.Public); }\n        public isStatic() { return hasFlag(this.fncFlags, FncFlags.Static); }\n\n        public treeViewLabel() {\n            if (this.name == null) {\n                return "funcExpr";\n      ';
var v27348 = v27349 + '      }\n            else {\n                return "func: " + this.name.actualText\n            }\n        }\n\n        public ClearFlags(): void {\n            this.fncFlags = FncFlags.None;\n        }\n\n        public isSignature() { return (this.fncFlags & FncFlags.Signature) != FncFlags.None; }\n    }\n\n    export class LocationInfo {\n        constructor (public filename: string, public lineMap: number[], public unitIndex) { }\n    }\n\n    export var unknownLocationInfo = new LocationInfo("unknown", null, -1);\n\n    export class Script extends FuncDecl {\n        public locationInfo: LocationInfo = null;\n        public referencedFiles: IFileReference[] = [];\n        public requiresGlobal = false;\n        public requiresExtendsBlock = false;\n        public isResident = false;\n        public isDeclareFile = false;\n        public hasBeenTypeChecked = false;\n        public topLevelMod: ModuleDeclaration = null;\n        public leftCurlyCount = 0;\n        public rightCurlyCount = 0;\n        public vars: ASTList;\n        public scopes: ASTList;\n        // Remember if the script contains Unicode chars, that is needed when generating code for this script object to decide the output file correct encoding.\n        public containsUnicodeChar = false;\n        public containsUnicodeCharInComment = false;\n        public cachedEmitRequired: bool;\n\n        private setCachedEmitRequired(value: bool) {\n            this.cachedEmitRequired = value;\n            return this.cachedEmitRequired;\n        }\n\n        constructor (vars: ASTList, scopes: ASTList) {\n            super(new Identifier("script"), null, false, null, vars, scopes, null, NodeType.Script);\n            this.vars = vars;\n            this.scopes = scopes;\n        }\n\n        public typeCheck(typeFlow: TypeFlow) {\n            return typeFlow.typeCheckScript(this);\n        }\n\n        public treeViewLabel() {\n            return "Script";\n        }\n\n        public emitRequired(emitOptions: EmitOptions) {\n            if (this.cachedEmitRequired != undefined) {\n                return this.cachedEmitRequired;\n            }\n\n            if (!this.isDeclareFile && !this.isResident && this.bod) {\n                if (this.bod.members.length == 0) {\n                    // allow empty files that are not declare files \n                    return this.setCachedEmitRequired(true);\n                }\n\n                for (var i = 0, len = this.bod.members.length; i < len; i++) {\n                    var stmt = this.bod.members[i];\n                    if (stmt.nodeType == NodeType.ModuleDeclaration) {\n                        if (!hasFlag((<ModuleDeclaration>stmt).modFlags, ModuleFlags.ShouldEmitModuleDecl | ModuleFlags.Ambient)) {\n                            return this.setCachedEmitRequired(true);\n                        }\n                    }\n                    else if (stmt.nodeType == NodeType.ClassDeclaration) {\n                        if (!hasFlag((<ClassDeclaration>stmt).varFlags, VarFlags.Ambient)) {\n                            return this.setCachedEmitRequired(true);\n                        }\n                    }\n                    else if (stmt.nodeType == NodeType.VarDecl) {\n                        if (!hasFlag((<VarDecl>stmt).varFlags, VarFlags.Ambient)) {\n                            return this.setCachedEmitRequired(true);\n                        }\n                    }\n                    else if (stmt.nodeType == NodeType.FuncDecl) {\n                        if (!(<FuncDecl>stmt).isSignature()) {\n                            return this.setCachedEmitRequired(true);\n                        }\n                    }\n                    else if (stmt.nodeType != NodeType.InterfaceDeclaration && stmt.nodeType != NodeType.Empty) {\n                        return this.setCachedEmitRequired(true);\n                    }\n                }\n\n                if ( emitOptions.emitComments &&\n                    ((this.bod.preComments && this.bod.preComments.length > 0) || (this.bod.postComments && this.bod.postComments.length > 0))) {\n                    return this.setCachedEmitRequired(true);\n                }\n            }\n            return this.setCachedEmitRequired(false);\n        }\n\n        public emit(emitter: Emitter, tokenId: TokenID, startLine: bool) {\n            if (this.emitRequired(emitter.emitOptions)) {\n                emitter.emitParensAndCommentsInPlace(this.bod, true);\n                emitter.emitJavascriptList(this.bod, null, TokenID.Semicolon, true, false, false, true, this.requiresExtendsBlock);\n                emitter.emitParensAndCommentsInPlace(this.bod, false);\n            }\n        }\n\n        private externallyVisibleImportedSymbols: Symbol[] = [];\n\n        public AddExternallyVisibleImportedSymbol(symbol: Symbol, checker: TypeChecker) {\n            if (this.isExternallyVisibleSymbol(symbol)) {\n                return;\n            }\n\n            // Before adding check if the external symbol is also marked for visibility\n            if (!symbol.getType().symbol.isExter';
var v27347 = v27348 + 'nallyVisible(checker)) {\n                // Report error\n                var quotes = "";\n                var moduleName = symbol.getType().symbol.prettyName;\n                if (!isQuoted(moduleName)) {\n                    quotes = "\'";\n                }\n                checker.errorReporter.simpleError(symbol.declAST, "Externally visible import statement uses non exported module " + quotes + moduleName + quotes);\n            }\n            this.externallyVisibleImportedSymbols.push(symbol);\n        }\n\n        public isExternallyVisibleSymbol(symbol: Symbol) {\n            for (var i = 0 ; i < this.externallyVisibleImportedSymbols.length; i++) {\n                if (this.externallyVisibleImportedSymbols[i] == symbol) {\n                    return true;\n                }\n            }\n            return false;\n        }\n    }\n\n    export class NamedDeclaration extends ModuleElement {\n        public leftCurlyCount = 0;\n        public rightCurlyCount = 0;\n        public isDeclaration() { return true; }\n\n        constructor (nodeType: NodeType,\n                     public name: Identifier,\n                     public members: ASTList) {\n            super(nodeType);\n        }\n    }\n\n    export class ModuleDeclaration extends NamedDeclaration {\n        public modFlags = ModuleFlags.ShouldEmitModuleDecl;\n        public mod: ModuleType;\n        public prettyName: string;\n        public amdDependencies: string[] = [];\n        public vars: ASTList;\n        public scopes: ASTList;\n        // Remember if the module contains Unicode chars, that is needed for dynamic module as we will generate a file for each.\n        public containsUnicodeChar = false;\n        public containsUnicodeCharInComment = false;\n\n        constructor (name: Identifier, members: ASTList, vars: ASTList, scopes: ASTList, public endingToken: ASTSpan) {\n            super(NodeType.ModuleDeclaration, name, members);\n\n            this.vars = vars;\n            this.scopes = scopes;\n            this.prettyName = this.name.actualText;\n        }\n\n        public isExported() { return hasFlag(this.modFlags, ModuleFlags.Exported); }\n        public isAmbient() { return hasFlag(this.modFlags, ModuleFlags.Ambient); }\n        public isEnum() { return hasFlag(this.modFlags, ModuleFlags.IsEnum); }\n\n        public recordNonInterface() {\n            this.modFlags &= ~ModuleFlags.ShouldEmitModuleDecl;\n        }\n\n        public typeCheck(typeFlow: TypeFlow) {\n            return typeFlow.typeCheckModule(this);\n        }\n\n        public emit(emitter: Emitter, tokenId: TokenID, startLine: bool) {\n            if (!hasFlag(this.modFlags, ModuleFlags.ShouldEmitModuleDecl)) {\n                emitter.emitParensAndCommentsInPlace(this, true);\n                emitter.emitJavascriptModule(this);\n                emitter.emitParensAndCommentsInPlace(this, false);\n            }\n        }\n    }\n\n    export class TypeDeclaration extends NamedDeclaration {\n        public varFlags = VarFlags.None;\n\n        constructor (nodeType: NodeType,\n                     name: Identifier,\n                     public extendsList: ASTList,\n                     public implementsList: ASTList,\n                     members: ASTList) {\n            super(nodeType, name, members);\n        }\n\n        public isExported() { \n            return hasFlag(this.varFlags, VarFlags.Exported);\n        }\n\n        public isAmbient() {\n            return hasFlag(this.varFlags, VarFlags.Ambient);\n        }\n    }\n\n    export class ClassDeclaration extends TypeDeclaration {\n        public knownMemberNames: any = {};\n        public constructorDecl: FuncDecl = null;\n        public constructorNestingLevel = 0;\n        public endingToken: ASTSpan = null;\n\n        constructor (name: Identifier,\n                     members: ASTList,\n                     extendsList: ASTList,\n                     implementsList: ASTList) {\n            super(NodeType.ClassDeclaration, name, extendsList, implementsList, members);\n        }\n\n        public typeCheck(typeFlow: TypeFlow) {\n            return typeFlow.typeCheckClass(this);\n        }\n\n        public emit(emitter: Emitter, tokenId: TokenID, startLine: bool) {\n            emitter.emitJavascriptClass(this);\n        }\n    }\n\n    export class InterfaceDeclaration extends TypeDeclaration {\n        constructor (name: Identifier,\n                     members: ASTList,\n                     extendsList: ASTList,\n                     implementsList: ASTList) {\n            super(NodeType.InterfaceDeclaration, name, extendsList, implementsList, members);\n        }\n\n        public typeCheck(typeFlow: TypeFlow) {\n            return typeFlow.typeCheckInterface(this);\n        }\n\n        public emit(emitter: Emitter, tokenId: TokenID, startLine: bool) {\n        }\n    }\n\n    export class Statement extends ModuleElement {\n        constructor (nodeType: NodeType) {\n            super(nodeType);\n            this.flags |= ASTFlags.IsStatement;\n        }\n\n        public isLoop() { return false; }\n\n        public i';
var v27346 = v27347 + 'sStatementOrExpression() { return true; }\n\n        public isCompoundStatement() { return this.isLoop(); }\n\n        public typeCheck(typeFlow: TypeFlow) {\n            this.type = typeFlow.voidType;\n            return this;\n        }\n    }\n\n    export class LabeledStatement extends Statement {\n        constructor (public labels: ASTList, public stmt: AST) {\n            super(NodeType.LabeledStatement);\n        }\n\n        public emit(emitter: Emitter, tokenId: TokenID, startLine: bool) {\n            emitter.emitParensAndCommentsInPlace(this, true);\n            emitter.recordSourceMappingStart(this);\n            if (this.labels) {\n                var labelsLen = this.labels.members.length;\n                for (var i = 0; i < labelsLen; i++) {\n                    this.labels.members[i].emit(emitter, tokenId, startLine);\n                }\n            }\n            this.stmt.emit(emitter, tokenId, true);\n            emitter.recordSourceMappingEnd(this);\n            emitter.emitParensAndCommentsInPlace(this, false);\n        }\n\n        public typeCheck(typeFlow: TypeFlow) {\n            typeFlow.typeCheck(this.labels);\n            this.stmt = this.stmt.typeCheck(typeFlow);\n            return this;\n        }\n\n        public addToControlFlow(context: ControlFlowContext): void {\n            var beforeBB = context.current;\n            var bb = new BasicBlock();\n            context.current = bb;\n            beforeBB.addSuccessor(bb);\n        }\n    }\n\n    export class Block extends Statement {\n        constructor (public statements: ASTList,\n                     public isStatementBlock: bool) {\n            super(NodeType.Block);\n        }\n\n        public emit(emitter: Emitter, tokenId: TokenID, startLine: bool) {\n            emitter.emitParensAndCommentsInPlace(this, true);\n            emitter.recordSourceMappingStart(this);\n            if (this.isStatementBlock) {\n                emitter.writeLineToOutput(" {");\n                emitter.indenter.increaseIndent();\n            } else {\n                emitter.setInVarBlock(this.statements.members.length);\n            }\n            var temp = emitter.setInObjectLiteral(false);\n            if (this.statements) {\n                emitter.emitJavascriptList(this.statements, null, TokenID.Semicolon, true, false, false);\n            }\n            if (this.isStatementBlock) {\n                emitter.indenter.decreaseIndent();\n                emitter.emitIndent();\n                emitter.writeToOutput("}");\n            }\n            emitter.setInObjectLiteral(temp);\n            emitter.recordSourceMappingEnd(this);\n            emitter.emitParensAndCommentsInPlace(this, false);\n        }\n\n        public addToControlFlow(context: ControlFlowContext) {\n            var afterIfNeeded = new BasicBlock();\n            context.pushStatement(this, context.current, afterIfNeeded);\n            if (this.statements) {\n                context.walk(this.statements, this);\n            }\n            context.walker.options.goChildren = false;\n            context.popStatement();\n            if (afterIfNeeded.predecessors.length > 0) {\n                context.current.addSuccessor(afterIfNeeded);\n                context.current = afterIfNeeded;\n            }\n        }\n\n        public typeCheck(typeFlow: TypeFlow) {\n            if (!typeFlow.checker.styleSettings.emptyBlocks) {\n                if ((this.statements === null) || (this.statements.members.length == 0)) {\n                    typeFlow.checker.errorReporter.styleError(this, "empty block");\n                }\n            }\n\n            typeFlow.typeCheck(this.statements);\n            return this;\n        }\n    }\n\n    export class Jump extends Statement {\n        public target: string = null;\n        public hasExplicitTarget() { return (this.target); }\n        public resolvedTarget: Statement = null;\n\n        constructor (nodeType: NodeType) {\n            super(nodeType);\n        }\n\n        public setResolvedTarget(parser: Parser, stmt: Statement): bool {\n            if (stmt.isLoop()) {\n                this.resolvedTarget = stmt;\n                return true;\n            }\n            if (this.nodeType === NodeType.Continue) {\n                parser.reportParseError("continue statement applies only to loops");\n                return false;\n            }\n            else {\n                if ((stmt.nodeType == NodeType.Switch) || this.hasExplicitTarget()) {\n                    this.resolvedTarget = stmt;\n                    return true;\n                }\n                else {\n                    parser.reportParseError("break statement with no label can apply only to a loop or switch statement");\n                    return false;\n                }\n            }\n        }\n\n        public addToControlFlow(context: ControlFlowContext): void {\n            super.addToControlFlow(context);\n            context.unconditionalBranch(this.resolvedTarget, (this.nodeType == NodeType.Continue));\n        }\n\n        public emit(emitter: Emitter, tokenId: TokenID, s';
var v27345 = v27346 + 'tartLine: bool) {\n            emitter.emitParensAndCommentsInPlace(this, true);\n            emitter.recordSourceMappingStart(this);\n            if (this.nodeType == NodeType.Break) {\n                emitter.writeToOutput("break");\n            }\n            else {\n                emitter.writeToOutput("continue");\n            }\n            if (this.hasExplicitTarget()) {\n                emitter.writeToOutput(" " + this.target);\n            }\n            emitter.recordSourceMappingEnd(this);\n            emitter.writeToOutput(";");\n            emitter.emitParensAndCommentsInPlace(this, false);\n        }\n    }\n\n    export class WhileStatement extends Statement {\n        public body: AST = null;\n\n        constructor (public cond: AST) {\n            super(NodeType.While);\n        }\n\n        public isLoop() { return true; }\n\n        public emit(emitter: Emitter, tokenId: TokenID, startLine: bool) {\n            emitter.emitParensAndCommentsInPlace(this, true);\n            emitter.recordSourceMappingStart(this);\n            var temp = emitter.setInObjectLiteral(false);\n            emitter.writeToOutput("while(");\n            emitter.emitJavascript(this.cond, TokenID.While, false);\n            emitter.writeToOutput(")");\n            emitter.emitJavascriptStatements(this.body, false);\n            emitter.setInObjectLiteral(temp);\n            emitter.recordSourceMappingEnd(this);\n            emitter.emitParensAndCommentsInPlace(this, false);\n        }\n\n        public typeCheck(typeFlow: TypeFlow) {\n            return typeFlow.typeCheckWhile(this);\n        }\n\n        public addToControlFlow(context: ControlFlowContext): void {\n            var loopHeader = context.current;\n            var loopStart = new BasicBlock();\n            var afterLoop = new BasicBlock();\n\n            loopHeader.addSuccessor(loopStart);\n            context.current = loopStart;\n            context.addContent(this.cond);\n            var condBlock = context.current;\n            var targetInfo: ITargetInfo = null;\n            if (this.body) {\n                context.current = new BasicBlock();\n                condBlock.addSuccessor(context.current);\n                context.pushStatement(this, loopStart, afterLoop);\n                context.walk(this.body, this);\n                targetInfo = context.popStatement();\n            }\n            if (!(context.noContinuation)) {\n                var loopEnd = context.current;\n                loopEnd.addSuccessor(loopStart);\n            }\n            context.current = afterLoop;\n            condBlock.addSuccessor(afterLoop);\n            // TODO: check for while (true) and then only continue if afterLoop has predecessors\n            context.noContinuation = false;\n            context.walker.options.goChildren = false;\n        }\n    }\n\n    export class DoWhileStatement extends Statement {\n        public body: AST = null;\n        public whileAST: AST = null;\n        public cond: AST = null;\n        public isLoop() { return true; }\n\n        constructor () {\n            super(NodeType.DoWhile);\n        }\n\n        public emit(emitter: Emitter, tokenId: TokenID, startLine: bool) {\n            emitter.emitParensAndCommentsInPlace(this, true);\n            emitter.recordSourceMappingStart(this);\n            var temp = emitter.setInObjectLiteral(false);\n            emitter.writeToOutput("do");\n            emitter.emitJavascriptStatements(this.body, true);\n            emitter.recordSourceMappingStart(this.whileAST);\n            emitter.writeToOutput("while");\n            emitter.recordSourceMappingEnd(this.whileAST);\n            emitter.writeToOutput(\'(\');\n            emitter.emitJavascript(this.cond, TokenID.CloseParen, false);\n            emitter.writeToOutput(")");\n            emitter.setInObjectLiteral(temp);\n            emitter.recordSourceMappingEnd(this);\n            emitter.writeToOutput(";");\n            emitter.emitParensAndCommentsInPlace(this, false);\n        }\n\n        public typeCheck(typeFlow: TypeFlow) {\n            return typeFlow.typeCheckDoWhile(this);\n        }\n\n        public addToControlFlow(context: ControlFlowContext): void {\n            var loopHeader = context.current;\n            var loopStart = new BasicBlock();\n            var afterLoop = new BasicBlock();\n            loopHeader.addSuccessor(loopStart);\n            context.current = loopStart;\n            var targetInfo: ITargetInfo = null;\n            if (this.body) {\n                context.pushStatement(this, loopStart, afterLoop);\n                context.walk(this.body, this);\n                targetInfo = context.popStatement();\n            }\n            if (!(context.noContinuation)) {\n                var loopEnd = context.current;\n                loopEnd.addSuccessor(loopStart);\n                context.addContent(this.cond);\n                // TODO: check for while (true) \n                context.current = afterLoop;\n                loopEnd.addSuccessor(afterLoop);\n            }\n            else {\n                context.addUnreachable(t';
var v27344 = v27345 + 'his.cond);\n            }\n            context.walker.options.goChildren = false;\n        }\n    }\n\n    export class IfStatement extends Statement {\n        public thenBod: AST;\n        public elseBod: AST = null;\n        public statement: ASTSpan = new ASTSpan();\n\n        constructor (public cond: AST) {\n            super(NodeType.If);\n        }\n\n        public isCompoundStatement() { return true; }\n\n        public emit(emitter: Emitter, tokenId: TokenID, startLine: bool) {\n            emitter.emitParensAndCommentsInPlace(this, true);\n            emitter.recordSourceMappingStart(this);\n            var temp = emitter.setInObjectLiteral(false);\n            emitter.recordSourceMappingStart(this.statement);\n            emitter.writeToOutput("if(");\n            emitter.emitJavascript(this.cond, TokenID.If, false);\n            emitter.writeToOutput(")");\n            emitter.recordSourceMappingEnd(this.statement);\n            emitter.emitJavascriptStatements(this.thenBod, true);\n            if (this.elseBod) {\n                if (this.elseBod.nodeType === NodeType.If) {\n                    emitter.writeToOutput(" else ");\n                    this.elseBod.emit(emitter, tokenId, /*startLine:*/ false);\n                }\n                else {\n                    emitter.writeToOutput(" else");\n                    emitter.emitJavascriptStatements(this.elseBod, true);\n                }\n            }\n            emitter.setInObjectLiteral(temp);\n            emitter.recordSourceMappingEnd(this);\n            emitter.emitParensAndCommentsInPlace(this, false);\n        }\n\n        public typeCheck(typeFlow: TypeFlow) {\n            return typeFlow.typeCheckIf(this);\n        }\n\n        public addToControlFlow(context: ControlFlowContext): void {\n            this.cond.addToControlFlow(context);\n            var afterIf = new BasicBlock();\n            var beforeIf = context.current;\n            context.pushStatement(this, beforeIf, afterIf);\n            var hasContinuation = false;\n            context.current = new BasicBlock();\n            beforeIf.addSuccessor(context.current);\n            context.walk(this.thenBod, this);\n            if (!context.noContinuation) {\n                hasContinuation = true;\n                context.current.addSuccessor(afterIf);\n            }\n            if (this.elseBod) {\n                // current block will be thenBod\n                context.current = new BasicBlock();\n                context.noContinuation = false;\n                beforeIf.addSuccessor(context.current);\n                context.walk(this.elseBod, this);\n                if (!context.noContinuation) {\n                    hasContinuation = true;\n                    context.current.addSuccessor(afterIf);\n                }\n                else {\n                    // thenBod created continuation for if statement\n                    if (hasContinuation) {\n                        context.noContinuation = false;\n                    }\n                }\n            }\n            else {\n                beforeIf.addSuccessor(afterIf);\n                context.noContinuation = false;\n                hasContinuation = true;\n            }\n            var targetInfo = context.popStatement();\n            if (afterIf.predecessors.length > 0) {\n                context.noContinuation = false;\n                hasContinuation = true;\n            }\n            if (hasContinuation) {\n                context.current = afterIf;\n            }\n            context.walker.options.goChildren = false;\n        }\n    }\n\n    export class ReturnStatement extends Statement {\n        public returnExpression: AST = null;\n\n        constructor () {\n            super(NodeType.Return);\n        }\n\n        public emit(emitter: Emitter, tokenId: TokenID, startLine: bool) {\n            emitter.emitParensAndCommentsInPlace(this, true);\n            emitter.recordSourceMappingStart(this);\n            var temp = emitter.setInObjectLiteral(false);\n            if (this.returnExpression) {\n                emitter.writeToOutput("return ");\n                emitter.emitJavascript(this.returnExpression, TokenID.Semicolon, false);\n\n                if (this.returnExpression.nodeType === NodeType.FuncDecl) {\n                    emitter.writeToOutput(";");\n                }\n            }\n            else {\n                emitter.writeToOutput("return;");\n            }\n            emitter.setInObjectLiteral(temp);\n            emitter.recordSourceMappingEnd(this);\n            emitter.emitParensAndCommentsInPlace(this, false);\n        }\n\n        public addToControlFlow(context: ControlFlowContext): void {\n            super.addToControlFlow(context);\n            context.returnStmt();\n        }\n\n        public typeCheck(typeFlow: TypeFlow) {\n            return typeFlow.typeCheckReturn(this);\n        }\n    }\n\n    export class EndCode extends AST {\n        constructor () {\n            super(NodeType.EndCode);\n        }\n    }\n\n    export class ForInStatement extends Statement {\n        constructor ';
var v27343 = v27344 + '(public lval: AST, public obj: AST) {\n            super(NodeType.ForIn);\n            if (this.lval && (this.lval.nodeType == NodeType.VarDecl)) {\n                (<BoundDecl>this.lval).varFlags |= VarFlags.AutoInit;\n            }\n        }\n        public statement: ASTSpan = new ASTSpan();\n        public body: AST;\n\n        public isLoop() { return true; }\n\n        public isFiltered() {\n            if (this.body) {\n                var singleItem: AST = null;\n                if (this.body.nodeType == NodeType.List) {\n                    var stmts = <ASTList>this.body;\n                    if (stmts.members.length == 1) {\n                        singleItem = stmts.members[0];\n                    }\n                }\n                else {\n                    singleItem = this.body;\n                }\n                // match template for filtering \'own\' properties from obj\n                if (singleItem !== null) {\n                    if (singleItem.nodeType == NodeType.Block) {\n                        var block = <Block>singleItem;\n                        if ((block.statements !== null) && (block.statements.members.length == 1)) {\n                            singleItem = block.statements.members[0];\n                        }\n                    }\n                    if (singleItem.nodeType == NodeType.If) {\n                        var cond = (<IfStatement>singleItem).cond;\n                        if (cond.nodeType == NodeType.Call) {\n                            var target = (<CallExpression>cond).target;\n                            if (target.nodeType == NodeType.Dot) {\n                                var binex = <BinaryExpression>target;\n                                if ((binex.operand1.nodeType == NodeType.Name) &&\n                                    (this.obj.nodeType == NodeType.Name) &&\n                                    ((<Identifier>binex.operand1).actualText == (<Identifier>this.obj).actualText)) {\n                                    var prop = <Identifier>binex.operand2;\n                                    if (prop.actualText == "hasOwnProperty") {\n                                        var args = (<CallExpression>cond).arguments;\n                                        if ((args !== null) && (args.members.length == 1)) {\n                                            var arg = args.members[0];\n                                            if ((arg.nodeType == NodeType.Name) &&\n                                                 (this.lval.nodeType == NodeType.Name)) {\n                                                if (((<Identifier>this.lval).actualText) == (<Identifier>arg).actualText) {\n                                                    return true;\n                                                }\n                                            }\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n            return false;\n        }\n\n        public emit(emitter: Emitter, tokenId: TokenID, startLine: bool) {\n            emitter.emitParensAndCommentsInPlace(this, true);\n            emitter.recordSourceMappingStart(this);\n            var temp = emitter.setInObjectLiteral(false);\n            emitter.recordSourceMappingStart(this.statement);\n            emitter.writeToOutput("for(");\n            emitter.emitJavascript(this.lval, TokenID.For, false);\n            emitter.writeToOutput(" in ");\n            emitter.emitJavascript(this.obj, TokenID.For, false);\n            emitter.writeToOutput(")");\n            emitter.recordSourceMappingEnd(this.statement);\n            emitter.emitJavascriptStatements(this.body, true);\n            emitter.setInObjectLiteral(temp);\n            emitter.recordSourceMappingEnd(this);\n            emitter.emitParensAndCommentsInPlace(this, false);\n        }\n\n        public typeCheck(typeFlow: TypeFlow) {\n            if (typeFlow.checker.styleSettings.forin) {\n                if (!this.isFiltered()) {\n                    typeFlow.checker.errorReporter.styleError(this, "no hasOwnProperty filter");\n                }\n            }\n            return typeFlow.typeCheckForIn(this);\n        }\n\n        public addToControlFlow(context: ControlFlowContext): void {\n            if (this.lval) {\n                context.addContent(this.lval);\n            }\n            if (this.obj) {\n                context.addContent(this.obj);\n            }\n\n            var loopHeader = context.current;\n            var loopStart = new BasicBlock();\n            var afterLoop = new BasicBlock();\n\n            loopHeader.addSuccessor(loopStart);\n            context.current = loopStart;\n            if (this.body) {\n                context.pushStatement(this, loopStart, afterLoop);\n                context.walk(this.body, this);\n                context.popStatement();\n            }\n            if (!(context.noContinuation)) {\n                var loopE';
var v27342 = v27343 + 'nd = context.current;\n                loopEnd.addSuccessor(loopStart);\n            }\n            context.current = afterLoop;\n            context.noContinuation = false;\n            loopHeader.addSuccessor(afterLoop);\n            context.walker.options.goChildren = false;\n        }\n    }\n\n    export class ForStatement extends Statement {\n        public cond: AST;\n        public body: AST;\n        public incr: AST;\n\n        constructor (public init: AST) {\n            super(NodeType.For);\n        }\n\n        public isLoop() { return true; }\n\n        public emit(emitter: Emitter, tokenId: TokenID, startLine: bool) {\n            emitter.emitParensAndCommentsInPlace(this, true);\n            emitter.recordSourceMappingStart(this);\n            var temp = emitter.setInObjectLiteral(false);\n            emitter.writeToOutput("for(");\n            if (this.init) {\n                if (this.init.nodeType != NodeType.List) {\n                    emitter.emitJavascript(this.init, TokenID.For, false);\n                }\n                else {\n                    emitter.setInVarBlock((<ASTList>this.init).members.length); \n                    emitter.emitJavascriptList(this.init, null, TokenID.For, false, false, false);\n                }\n            }\n            emitter.writeToOutput("; ");\n            emitter.emitJavascript(this.cond, TokenID.For, false);\n            emitter.writeToOutput("; ");\n            emitter.emitJavascript(this.incr, TokenID.For, false);\n            emitter.writeToOutput(")");\n            emitter.emitJavascriptStatements(this.body, true);\n            emitter.setInObjectLiteral(temp);\n            emitter.recordSourceMappingEnd(this);\n            emitter.emitParensAndCommentsInPlace(this, false);\n        }\n\n        public typeCheck(typeFlow: TypeFlow) {\n            return typeFlow.typeCheckFor(this);\n        }\n\n        public addToControlFlow(context: ControlFlowContext): void {\n            if (this.init) {\n                context.addContent(this.init);\n            }\n            var loopHeader = context.current;\n            var loopStart = new BasicBlock();\n            var afterLoop = new BasicBlock();\n\n            loopHeader.addSuccessor(loopStart);\n            context.current = loopStart;\n            var condBlock: BasicBlock = null;\n            var continueTarget = loopStart;\n            var incrBB: BasicBlock = null;\n            if (this.incr) {\n                incrBB = new BasicBlock();\n                continueTarget = incrBB;\n            }\n            if (this.cond) {\n                condBlock = context.current;\n                context.addContent(this.cond);\n                context.current = new BasicBlock();\n                condBlock.addSuccessor(context.current);\n            }\n            var targetInfo: ITargetInfo = null;\n            if (this.body) {\n                context.pushStatement(this, continueTarget, afterLoop);\n                context.walk(this.body, this);\n                targetInfo = context.popStatement();\n            }\n            if (this.incr) {\n                if (context.noContinuation) {\n                    if (incrBB.predecessors.length == 0) {\n                        context.addUnreachable(this.incr);\n                    }\n                }\n                else {\n                    context.current.addSuccessor(incrBB);\n                    context.current = incrBB;\n                    context.addContent(this.incr);\n                }\n            }\n            var loopEnd = context.current;\n            if (!(context.noContinuation)) {\n                loopEnd.addSuccessor(loopStart);\n\n            }\n            if (condBlock) {\n                condBlock.addSuccessor(afterLoop);\n                context.noContinuation = false;\n            }\n            if (afterLoop.predecessors.length > 0) {\n                context.noContinuation = false;\n                context.current = afterLoop;\n            }\n            context.walker.options.goChildren = false;\n        }\n    }\n\n    export class WithStatement extends Statement {\n        public body: AST;\n\n        public isCompoundStatement() { return true; }\n\n        public withSym: WithSymbol = null;\n\n        constructor (public expr: AST) {\n            super(NodeType.With);\n        }\n\n        public emit(emitter: Emitter, tokenId: TokenID, startLine: bool) {\n            emitter.emitParensAndCommentsInPlace(this, true);\n            emitter.recordSourceMappingStart(this);\n            emitter.writeToOutput("with (");\n            if (this.expr) {\n                emitter.emitJavascript(this.expr, TokenID.With, false);\n            }\n\n            emitter.writeToOutput(")");\n            emitter.emitJavascriptStatements(this.body, true);\n            emitter.recordSourceMappingEnd(this);\n            emitter.emitParensAndCommentsInPlace(this, false);\n        }\n\n        public typeCheck(typeFlow: TypeFlow) {\n            return typeFlow.typeCheckWith(this);\n        }\n    }\n\n    export class SwitchStatement extends Statement {\n        public caseList:';
var v27341 = v27342 + ' ASTList;\n        public defaultCase: CaseStatement = null;\n        public statement: ASTSpan = new ASTSpan();\n\n        constructor (public val: AST) {\n            super(NodeType.Switch);\n        }\n\n        public isCompoundStatement() { return true; }\n\n        public emit(emitter: Emitter, tokenId: TokenID, startLine: bool) {\n            emitter.emitParensAndCommentsInPlace(this, true);\n            emitter.recordSourceMappingStart(this);\n            var temp = emitter.setInObjectLiteral(false);\n            emitter.recordSourceMappingStart(this.statement);\n            emitter.writeToOutput("switch(");\n            emitter.emitJavascript(this.val, TokenID.Identifier, false);\n            emitter.writeToOutput(")"); \n            emitter.recordSourceMappingEnd(this.statement);\n            emitter.writeLineToOutput(" {");\n            emitter.indenter.increaseIndent();\n            var casesLen = this.caseList.members.length;\n            for (var i = 0; i < casesLen; i++) {\n                var caseExpr = this.caseList.members[i];\n                emitter.emitJavascript(caseExpr, TokenID.Case, true);\n            }\n            emitter.indenter.decreaseIndent();\n            emitter.emitIndent();\n            emitter.writeToOutput("}");\n            emitter.setInObjectLiteral(temp);\n            emitter.recordSourceMappingEnd(this);\n            emitter.emitParensAndCommentsInPlace(this, false);\n        }\n\n        public typeCheck(typeFlow: TypeFlow) {\n            var len = this.caseList.members.length;\n            this.val = typeFlow.typeCheck(this.val);\n            for (var i = 0; i < len; i++) {\n                this.caseList.members[i] = typeFlow.typeCheck(this.caseList.members[i]);\n            }\n            this.defaultCase = <CaseStatement>typeFlow.typeCheck(this.defaultCase);\n            this.type = typeFlow.voidType;\n            return this;\n        }\n\n        // if there are break statements that match this switch, then just link cond block with block after switch\n        public addToControlFlow(context: ControlFlowContext) {\n            var condBlock = context.current;\n            context.addContent(this.val);\n            var execBlock = new BasicBlock();\n            var afterSwitch = new BasicBlock();\n\n            condBlock.addSuccessor(execBlock);\n            context.pushSwitch(execBlock);\n            context.current = execBlock;\n            context.pushStatement(this, execBlock, afterSwitch);\n            context.walk(this.caseList, this);\n            context.popSwitch();\n            var targetInfo = context.popStatement();\n            var hasCondContinuation = (this.defaultCase == null);\n            if (this.defaultCase == null) {\n                condBlock.addSuccessor(afterSwitch);\n            }\n            if (afterSwitch.predecessors.length > 0) {\n                context.noContinuation = false;\n                context.current = afterSwitch;\n            }\n            else {\n                context.noContinuation = true;\n            }\n            context.walker.options.goChildren = false;\n        }\n    }\n\n    export class CaseStatement extends Statement {\n        public expr: AST = null;\n        public body: ASTList;\n\n        constructor () {\n            super(NodeType.Case);\n        }\n\n        public emit(emitter: Emitter, tokenId: TokenID, startLine: bool) {\n            emitter.emitParensAndCommentsInPlace(this, true);\n            emitter.recordSourceMappingStart(this);\n            if (this.expr) {\n                emitter.writeToOutput("case ");\n                emitter.emitJavascript(this.expr, TokenID.Identifier, false);\n            }\n            else {\n                emitter.writeToOutput("default");\n            }\n            emitter.writeToOutput(":");\n            if (this.body.members.length == 1 && this.body.members[0].nodeType == NodeType.Block) {\n                // The case statement was written with curly braces, so emit it with the appropriate formatting\n                emitter.emitJavascriptStatements(this.body, false);\n            }\n            else {\n                // No curly braces. Format in the expected way\n                emitter.writeLineToOutput("");\n                emitter.indenter.increaseIndent();\n                emitter.emitBareJavascriptStatements(this.body);\n                emitter.indenter.decreaseIndent();\n            }\n            emitter.recordSourceMappingEnd(this);\n            emitter.emitParensAndCommentsInPlace(this, false);\n        }\n\n        public typeCheck(typeFlow: TypeFlow) {\n            this.expr = typeFlow.typeCheck(this.expr);\n            typeFlow.typeCheck(this.body);\n            this.type = typeFlow.voidType;\n            return this;\n        }\n\n        // TODO: more reasoning about unreachable cases (such as duplicate literals as case expressions)\n        // for now, assume all cases are reachable, regardless of whether some cases fall through\n        public addToControlFlow(context: ControlFlowContext) {\n            var execBlock = new BasicBlock();\n            v';
var v27340 = v27341 + 'ar sw = context.currentSwitch[context.currentSwitch.length - 1];\n            // TODO: fall-through from previous (+ to end of switch)\n            if (this.expr) {\n                var exprBlock = new BasicBlock();\n                context.current = exprBlock;\n                sw.addSuccessor(exprBlock);\n                context.addContent(this.expr);\n                exprBlock.addSuccessor(execBlock);\n            }\n            else {\n                sw.addSuccessor(execBlock);\n            }\n            context.current = execBlock;\n            if (this.body) {\n                context.walk(this.body, this);\n            }\n            context.noContinuation = false;\n            context.walker.options.goChildren = false;\n        }\n    }\n\n    export class TypeReference extends AST {\n        constructor (public term: AST, public arrayCount: number) {\n            super(NodeType.TypeRef);\n        }\n\n        public emit(emitter: Emitter, tokenId: TokenID, startLine: bool) {\n            throw new Error("should not emit a type ref");\n        }\n\n        public typeCheck(typeFlow: TypeFlow) {\n            var prevInTCTR = typeFlow.inTypeRefTypeCheck;\n            typeFlow.inTypeRefTypeCheck = true;\n            var typeLink = getTypeLink(this, typeFlow.checker, true);\n            typeFlow.checker.resolveTypeLink(typeFlow.scope, typeLink, false);\n\n            if (this.term) {\n                typeFlow.typeCheck(this.term);\n            }\n\n            typeFlow.checkForVoidConstructor(typeLink.type, this);\n\n            this.type = typeLink.type;\n\n            // in error recovery cases, there may not be a term\n            if (this.term) {\n                this.term.type = this.type;\n            }\n\n            typeFlow.inTypeRefTypeCheck = prevInTCTR;\n            return this;\n        }\n    }\n\n    export class TryFinally extends Statement {\n        constructor (public tryNode: AST, public finallyNode: Finally) {\n            super(NodeType.TryFinally);\n        }\n\n        public isCompoundStatement() { return true; }\n\n        public emit(emitter: Emitter, tokenId: TokenID, startLine: bool) {\n            emitter.recordSourceMappingStart(this);\n            emitter.emitJavascript(this.tryNode, TokenID.Try, false);\n            emitter.emitJavascript(this.finallyNode, TokenID.Finally, false);\n            emitter.recordSourceMappingEnd(this);\n        }\n\n        public typeCheck(typeFlow: TypeFlow) {\n            this.tryNode = typeFlow.typeCheck(this.tryNode);\n            this.finallyNode = <Finally>typeFlow.typeCheck(this.finallyNode);\n            this.type = typeFlow.voidType;\n            return this;\n        }\n\n        public addToControlFlow(context: ControlFlowContext) {\n            var afterFinally = new BasicBlock();\n            context.walk(this.tryNode, this);\n            var finBlock = new BasicBlock();\n            if (context.current) {\n                context.current.addSuccessor(finBlock);\n            }\n            context.current = finBlock;\n            context.pushStatement(this, null, afterFinally);\n            context.walk(this.finallyNode, this);\n            if (!context.noContinuation && context.current) {\n                context.current.addSuccessor(afterFinally);\n            }\n            if (afterFinally.predecessors.length > 0) {\n                context.current = afterFinally;\n            }\n            else {\n                context.noContinuation = true;\n            }\n            context.popStatement();\n            context.walker.options.goChildren = false;\n        }\n    }\n\n    export class TryCatch extends Statement {\n        constructor (public tryNode: Try, public catchNode: Catch) {\n            super(NodeType.TryCatch);\n        }\n\n        public isCompoundStatement() { return true; }\n\n        public emit(emitter: Emitter, tokenId: TokenID, startLine: bool) {\n            emitter.emitParensAndCommentsInPlace(this, true);\n            emitter.recordSourceMappingStart(this);\n            emitter.emitJavascript(this.tryNode, TokenID.Try, false);\n            emitter.emitJavascript(this.catchNode, TokenID.Catch, false);\n            emitter.recordSourceMappingEnd(this);\n            emitter.emitParensAndCommentsInPlace(this, false);\n        }\n\n        public addToControlFlow(context: ControlFlowContext) {\n            var beforeTry = context.current;\n            var tryBlock = new BasicBlock();\n            beforeTry.addSuccessor(tryBlock);\n            context.current = tryBlock;\n            var afterTryCatch = new BasicBlock();\n            context.pushStatement(this, null, afterTryCatch);\n            context.walk(this.tryNode, this);\n            if (!context.noContinuation) {\n                if (context.current) {\n                    context.current.addSuccessor(afterTryCatch);\n                }\n            }\n            context.current = new BasicBlock();\n            beforeTry.addSuccessor(context.current);\n            context.walk(this.catchNode, this);\n            context.popStatement();\n            if (!context.noContinuation)';
var v27339 = v27340 + ' {\n                if (context.current) {\n                    context.current.addSuccessor(afterTryCatch);\n                }\n            }\n            context.current = afterTryCatch;\n            context.walker.options.goChildren = false;\n        }\n\n        public typeCheck(typeFlow: TypeFlow) {\n            this.tryNode = <Try>typeFlow.typeCheck(this.tryNode);\n            this.catchNode = <Catch>typeFlow.typeCheck(this.catchNode);\n            this.type = typeFlow.voidType;\n            return this;\n        }\n    }\n\n    export class Try extends Statement {\n        constructor (public body: AST) {\n            super(NodeType.Try);\n        }\n\n        public emit(emitter: Emitter, tokenId: TokenID, startLine: bool) {\n            emitter.emitParensAndCommentsInPlace(this, true);\n            emitter.recordSourceMappingStart(this);\n            emitter.writeToOutput("try ");\n            emitter.emitJavascript(this.body, TokenID.Try, false);\n            emitter.recordSourceMappingEnd(this);\n            emitter.emitParensAndCommentsInPlace(this, false);\n        }\n\n        public typeCheck(typeFlow: TypeFlow) {\n            this.body = typeFlow.typeCheck(this.body);\n            return this;\n        }\n\n        public addToControlFlow(context: ControlFlowContext) {\n            if (this.body) {\n                context.walk(this.body, this);\n            }\n            context.walker.options.goChildren = false;\n            context.noContinuation = false;\n        }\n    }\n\n    export class Catch extends Statement {\n        constructor (public param: VarDecl, public body: AST) {\n            super(NodeType.Catch);\n            if (this.param) {\n                this.param.varFlags |= VarFlags.AutoInit;\n            }\n        }\n        public statement: ASTSpan = new ASTSpan();\n        public containedScope: SymbolScope = null;\n\n        public emit(emitter: Emitter, tokenId: TokenID, startLine: bool) {\n            emitter.emitParensAndCommentsInPlace(this, true);\n            emitter.recordSourceMappingStart(this);\n            emitter.writeToOutput(" ");\n            emitter.recordSourceMappingStart(this.statement);\n            emitter.writeToOutput("catch (");\n            emitter.emitJavascript(this.param, TokenID.OpenParen, false);\n            emitter.writeToOutput(")");\n            emitter.recordSourceMappingEnd(this.statement);\n            emitter.emitJavascript(this.body, TokenID.Catch, false);\n            emitter.recordSourceMappingEnd(this);\n            emitter.emitParensAndCommentsInPlace(this, false);\n        }\n\n        public addToControlFlow(context: ControlFlowContext) {\n            if (this.param) {\n                context.addContent(this.param);\n                var bodBlock = new BasicBlock();\n                context.current.addSuccessor(bodBlock);\n                context.current = bodBlock;\n            }\n            if (this.body) {\n                context.walk(this.body, this);\n            }\n            context.noContinuation = false;\n            context.walker.options.goChildren = false;\n        }\n\n        public typeCheck(typeFlow: TypeFlow) {\n            var prevScope = typeFlow.scope;\n            typeFlow.scope = this.containedScope;\n            this.param = <VarDecl>typeFlow.typeCheck(this.param);\n            var exceptVar = new ValueLocation();\n            var varSym = new VariableSymbol((<VarDecl>this.param).id.text,\n                                          this.param.minChar,\n                                          typeFlow.checker.locationInfo.unitIndex,\n                                          exceptVar);\n            exceptVar.symbol = varSym;\n            exceptVar.typeLink = new TypeLink();\n            // var type for now (add syntax for type annotation)\n            exceptVar.typeLink.type = typeFlow.anyType;\n            var thisFnc = typeFlow.thisFnc;\n            if (thisFnc && thisFnc.type) {\n                exceptVar.symbol.container = thisFnc.type.symbol;\n            }\n            else {\n                exceptVar.symbol.container = null;\n            }\n            this.param.sym = exceptVar.symbol;\n            typeFlow.scope.enter(exceptVar.symbol.container, this.param, exceptVar.symbol,\n                                 typeFlow.checker.errorReporter, false, false, false);\n            this.body = typeFlow.typeCheck(this.body);\n\n            // if we\'re in provisional typecheck mode, clean up the symbol entry\n            // REVIEW: This is obviously bad form, since we\'re counting on the internal\n            // layout of the symbol table, but this is also the only place where we insert\n            // symbols during typecheck\n            if (typeFlow.checker.inProvisionalTypecheckMode()) {\n                var table = typeFlow.scope.getTable();\n                (<any>table).secondaryTable.table[exceptVar.symbol.name] = undefined;\n            }\n            this.type = typeFlow.voidType;\n            typeFlow.scope = prevScope;\n            return this;\n        }\n    }\n\n    export class Finally extends Statement ';
var v27338 = v27339 + '{\n        constructor (public body: AST) {\n            super(NodeType.Finally);\n        }\n\n        public emit(emitter: Emitter, tokenId: TokenID, startLine: bool) {\n            emitter.emitParensAndCommentsInPlace(this, true);\n            emitter.recordSourceMappingStart(this);\n            emitter.writeToOutput("finally");\n            emitter.emitJavascript(this.body, TokenID.Finally, false);\n            emitter.recordSourceMappingEnd(this);\n            emitter.emitParensAndCommentsInPlace(this, false);\n        }\n\n        public addToControlFlow(context: ControlFlowContext) {\n            if (this.body) {\n                context.walk(this.body, this);\n            }\n            context.walker.options.goChildren = false;\n            context.noContinuation = false;\n        }\n\n        public typeCheck(typeFlow: TypeFlow) {\n            this.body = typeFlow.typeCheck(this.body);\n            return this;\n        }\n    }\n\n    export class Comment extends AST {\n\n        public text: string[] = null;\n        public minLine: number;\n        public limLine: number;\n        private docCommentText: string = null;\n\n        constructor (public content: string, public isBlockComment: bool, public endsLine) {\n            super(NodeType.Comment);\n        }\n\n        public getText(): string[] {\n            if (this.text == null) {\n                if (this.isBlockComment) {\n                    this.text = this.content.split("\\n");\n                    for (var i = 0; i < this.text.length; i++) {\n                        this.text[i] = this.text[i].replace(/^\\s+|\\s+$/g, \'\');\n                    }\n                }\n                else {\n                    this.text = [(this.content.replace(/^\\s+|\\s+$/g, \'\'))];\n                }\n            }\n\n            return this.text;\n        }\n\n        public isDocComment() {\n            if (this.isBlockComment) {\n                return this.content.charAt(2) == "*";\n            }\n\n            return false;\n        }\n\n        public getDocCommentText() {\n            if (this.docCommentText == null) {\n                this.docCommentText = Comment.cleanJSDocComment(this.content);\n            }\n\n            return this.docCommentText;\n        }\n\n        static consumeLeadingSpace(line: string, startIndex: number, maxSpacesToRemove?: number) {\n            var endIndex = line.length;\n            if (maxSpacesToRemove != undefined) {\n                endIndex = min(startIndex + maxSpacesToRemove, endIndex);\n            }\n\n            for (; startIndex < endIndex; startIndex++) {\n                var charCode = line.charCodeAt(startIndex);\n                if (charCode != LexCodeSpace && charCode != LexCodeTAB) {\n                    return startIndex;\n                }\n            }\n            \n            if (endIndex != line.length) {\n                return endIndex;\n            }\n\n            return -1;\n        }\n\n        static isSpaceChar(line: string, index: number) {\n            var length = line.length;\n            if (index < length) {\n                var charCode = line.charCodeAt(index);\n                // If the character is space\n                return charCode == LexCodeSpace || charCode == LexCodeTAB;\n            }\n\n            // If the index is end of the line it is space\n            return index == length;\n        }\n\n        static cleanDocCommentLine(line: string, jsDocStyleComment: bool, jsDocLineSpaceToRemove?: number) {\n            var nonSpaceIndex = Comment.consumeLeadingSpace(line, 0);\n            if (nonSpaceIndex != -1) {\n                var jsDocSpacesRemoved = nonSpaceIndex;\n                if (jsDocStyleComment && line.charAt(nonSpaceIndex) == \'*\') { // remove leading * in case of jsDocComment\n                    var startIndex = nonSpaceIndex + 1;\n                    nonSpaceIndex = Comment.consumeLeadingSpace(line, startIndex, jsDocLineSpaceToRemove);\n\n                    if (nonSpaceIndex != -1) {\n                        jsDocSpacesRemoved = nonSpaceIndex - startIndex;\n                    } else {\n                        return null;\n                    }\n                }\n\n                return {\n                    minChar: nonSpaceIndex,\n                    limChar: line.charAt(line.length - 1) == "\\r" ? line.length - 1 : line.length,\n                    jsDocSpacesRemoved: jsDocSpacesRemoved\n                };\n            }\n\n            return null;\n        }\n\n        static cleanJSDocComment(content: string, spacesToRemove?: number) {\n            var docCommentLines: string[] = [];\n            content = content.replace("/**", ""); // remove /**\n            if (content.length >= 2 && content.charAt(content.length - 1) == "/" && content.charAt(content.length - 2) == "*") {\n                content = content.substring(0, content.length - 2); // remove last */\n            }\n            var lines = content.split("\\n");\n            var inParamTag = false;\n            for (var l = 0; l < lines.length; l++) {\n                var line = lines[l];\n                var clean';
var v27337 = v27338 + 'LinePos = Comment.cleanDocCommentLine(line, true, spacesToRemove);\n                if (!cleanLinePos) {\n                    // Whole line empty, read next line\n                    continue;\n                }\n\n                var docCommentText = "";\n                var prevPos = cleanLinePos.minChar;\n                for (var i = line.indexOf("@", cleanLinePos.minChar); 0 <= i && i < cleanLinePos.limChar; i = line.indexOf("@", i + 1)) {\n                    // We have encoutered @. \n                    // If we were omitting param comment, we dont have to do anything\n                    // other wise the content of the text till @ tag goes as doc comment\n                    var wasInParamtag = inParamTag;\n\n                    // Parse contents next to @\n                    if (line.indexOf("param", i + 1) == i + 1 && Comment.isSpaceChar(line, i + 6)) {\n                        // It is param tag. \n\n                        // If we were not in param tag earlier, push the contents from prev pos of the tag this tag start as docComment\n                        if (!wasInParamtag) {\n                            docCommentText += line.substring(prevPos, i);\n                        }\n\n                        // New start of contents \n                        prevPos = i;\n                        inParamTag = true;\n                    } else if (wasInParamtag) {\n                        // Non param tag start\n                        prevPos = i;\n                        inParamTag = false;\n                    }\n                }\n\n                if (!inParamTag) {\n                    docCommentText += line.substring(prevPos, cleanLinePos.limChar);\n                }\n\n                // Add line to comment text if it is not only white space line\n                var newCleanPos = Comment.cleanDocCommentLine(docCommentText, false);\n                if (newCleanPos) {\n                    if (spacesToRemove == undefined) {\n                        spacesToRemove = cleanLinePos.jsDocSpacesRemoved;\n                    }\n                    docCommentLines.push(docCommentText);\n                }\n            }\n            \n            return docCommentLines.join("\\n");\n        }\n\n        static getDocCommentText(comments: Comment[]) {\n            var docCommentText: string[] = [];\n            for (var c = 0 ; c < comments.length; c++) {\n                var commentText = comments[c].getDocCommentText();\n                if (commentText != "") {\n                    docCommentText.push(commentText);\n                }\n            }\n            return docCommentText.join("\\n");\n        }\n\n        static getParameterDocCommentText(param: string, fncDocComments: Comment[]) {\n            if (fncDocComments.length == 0 || !fncDocComments[0].isBlockComment) {\n                // there were no fnc doc comments and the comment is not block comment then it cannot have \n                // @param comment that can be parsed\n                return "";\n            }\n            \n            for (var i = 0; i < fncDocComments.length; i++) {\n                var commentContents = fncDocComments[i].content;\n                for (var j = commentContents.indexOf("@param", 0); 0 <= j; j = commentContents.indexOf("@param", j)) {\n                    j += 6;\n                    if (!Comment.isSpaceChar(commentContents, j)) {\n                        // This is not param tag but a tag line @paramxxxxx\n                        continue;\n                    }\n\n                    // This is param tag. Check if it is what we are looking for\n                    j = Comment.consumeLeadingSpace(commentContents, j);\n                    if (j == -1) {\n                        break;\n                    }\n                    \n                    // Ignore the type expression\n                    if (commentContents.charCodeAt(j) == LexCodeLC) {\n                        j++;\n                        // Consume the type\n                        var charCode = 0;\n                        for (var curlies = 1; j < commentContents.length; j++) {\n                            charCode = commentContents.charCodeAt(j);\n                            // { character means we need to find another } to match the found one\n                            if (charCode == LexCodeLC) {\n                                curlies++;\n                                continue;\n                            }\n\n                            // } char\n                            if (charCode == LexCodeRC) {\n                                curlies--;\n                                if (curlies == 0) {\n                                    // We do not have any more } to match the type expression is ignored completely\n                                    break;\n                                } else {\n                                    // there are more { to be matched with }\n                                    continue;\n                                }\n                            }\n\n                            // Found start';
var v27336 = v27337 + ' of another tag\n                            if (charCode == LexCodeAtSign) {\n                                break;\n                            }\n                        }\n\n                        // End of the comment\n                        if (j == commentContents.length) {\n                            break;\n                        }\n\n                        // End of the tag, go onto looking for next tag\n                        if (charCode == LexCodeAtSign) {\n                            continue;\n                        }\n\n                        j = Comment.consumeLeadingSpace(commentContents, j + 1);\n                        if (j == -1) {\n                            break;\n                        }\n                    }\n\n                    // Parameter name\n                    if (param != commentContents.substr(j, param.length) || !Comment.isSpaceChar(commentContents, j + param.length)) {\n                        // this is not the parameter we are looking for\n                        continue;\n                    }\n\n                    // Found the parameter we were looking for\n                    j = Comment.consumeLeadingSpace(commentContents, j + param.length);\n                    if (j == -1) {\n                        return "";\n                    }\n                    \n                    var endOfParam = commentContents.indexOf("@", j);\n                    var paramHelpString = commentContents.substring(j, endOfParam < 0 ? commentContents.length : endOfParam);\n\n                    // Find alignement spaces to remove\n                    var paramSpacesToRemove: number = undefined;\n                    var paramLineIndex = commentContents.substring(0, j).lastIndexOf("\\n") + 1;\n                    if (paramLineIndex != 0) {\n                        if (paramLineIndex < j && commentContents.charAt(paramLineIndex + 1) == "\\r") {\n                            paramLineIndex++;\n                        }\n                    }\n                    var startSpaceRemovalIndex = Comment.consumeLeadingSpace(commentContents, paramLineIndex);\n                    if (startSpaceRemovalIndex != j && commentContents.charAt(startSpaceRemovalIndex) == "*") {\n                        paramSpacesToRemove = j - startSpaceRemovalIndex - 1;\n                    }\n\n                    // Clean jsDocComment and return\n                    return Comment.cleanJSDocComment(paramHelpString, paramSpacesToRemove);\n                }\n            }\n\n            return "";\n        }\n\n        static getDocCommentTextOfSignatures(signatures: Signature[]) {\n            var comments: string[] = [];\n            for (var i = 0; i < signatures.length; i++) {\n                var signatureDocComment = TypeScript.Comment.getDocCommentText(signatures[i].declAST.getDocComments());\n                if (signatureDocComment != "") {\n                    comments.push(signatureDocComment);\n                }\n            }\n\n            return comments.join("\\n");\n        }\n    }\n\n    export class DebuggerStatement extends Statement {\n        constructor () {\n            super(NodeType.Debugger);\n        }\n\n        public emit(emitter: Emitter, tokenId: TokenID, startLine: bool) {\n            emitter.emitParensAndCommentsInPlace(this, true);\n            emitter.recordSourceMappingStart(this);\n            emitter.writeLineToOutput("debugger;");\n            emitter.recordSourceMappingEnd(this);\n            emitter.emitParensAndCommentsInPlace(this, false);\n        }\n    }\n}//\n// Copyright (c) Microsoft Corporation.  All rights reserved.\n// \n// Licensed under the Apache License, Version 2.0 (the "License");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an "AS IS" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n\n///<reference path=\'typescript.ts\' />\n\nmodule TypeScript.AstWalkerWithDetailCallback {\n    export interface AstWalkerDetailCallback {\n        EmptyCallback? (pre, ast: AST): bool;\n        EmptyExprCallback? (pre, ast: AST): bool;\n        TrueCallback? (pre, ast: AST): bool;\n        FalseCallback? (pre, ast: AST): bool;\n        ThisCallback? (pre, ast: AST): bool;\n        SuperCallback? (pre, ast: AST): bool;\n        QStringCallback? (pre, ast: AST): bool;\n        RegexCallback? (pre, ast: AST): bool;\n        NullCallback? (pre, ast: AST): bool;\n        ArrayLitCallback? (pre, ast: AST): bool;\n        ObjectLitCallback? (pre, ast: AST): bool;\n        VoidCallback? (pre, ast: AST): bool;\n        CommaCallback? (pre, ast: AST): bool;\n        PosCallback? (pre, ast: AST): bool;\n        NegCallback? (pre, ast: AST): bool;\n        DeleteCallback? (pre, ast: AST): bool;\n        AwaitCal';
var v27335 = v27336 + "lback? (pre, ast: AST): bool;\n        InCallback? (pre, ast: AST): bool;\n        DotCallback? (pre, ast: AST): bool;\n        FromCallback? (pre, ast: AST): bool;\n        IsCallback? (pre, ast: AST): bool;\n        InstOfCallback? (pre, ast: AST): bool;\n        TypeofCallback? (pre, ast: AST): bool;\n        NumberLitCallback? (pre, ast: AST): bool;\n        NameCallback? (pre, identifierAst: Identifier): bool;\n        TypeRefCallback? (pre, ast: AST): bool;\n        IndexCallback? (pre, ast: AST): bool;\n        CallCallback? (pre, ast: AST): bool;\n        NewCallback? (pre, ast: AST): bool;\n        AsgCallback? (pre, ast: AST): bool;\n        AsgAddCallback? (pre, ast: AST): bool;\n        AsgSubCallback? (pre, ast: AST): bool;\n        AsgDivCallback? (pre, ast: AST): bool;\n        AsgMulCallback? (pre, ast: AST): bool;\n        AsgModCallback? (pre, ast: AST): bool;\n        AsgAndCallback? (pre, ast: AST): bool;\n        AsgXorCallback? (pre, ast: AST): bool;\n        AsgOrCallback? (pre, ast: AST): bool;\n        AsgLshCallback? (pre, ast: AST): bool;\n        AsgRshCallback? (pre, ast: AST): bool;\n        AsgRs2Callback? (pre, ast: AST): bool;\n        QMarkCallback? (pre, ast: AST): bool;\n        LogOrCallback? (pre, ast: AST): bool;\n        LogAndCallback? (pre, ast: AST): bool;\n        OrCallback? (pre, ast: AST): bool;\n        XorCallback? (pre, ast: AST): bool;\n        AndCallback? (pre, ast: AST): bool;\n        EqCallback? (pre, ast: AST): bool;\n        NeCallback? (pre, ast: AST): bool;\n        EqvCallback? (pre, ast: AST): bool;\n        NEqvCallback? (pre, ast: AST): bool;\n        LtCallback? (pre, ast: AST): bool;\n        LeCallback? (pre, ast: AST): bool;\n        GtCallback? (pre, ast: AST): bool;\n        GeCallback? (pre, ast: AST): bool;\n        AddCallback? (pre, ast: AST): bool;\n        SubCallback? (pre, ast: AST): bool;\n        MulCallback? (pre, ast: AST): bool;\n        DivCallback? (pre, ast: AST): bool;\n        ModCallback? (pre, ast: AST): bool;\n        LshCallback? (pre, ast: AST): bool;\n        RshCallback? (pre, ast: AST): bool;\n        Rs2Callback? (pre, ast: AST): bool;\n        NotCallback? (pre, ast: AST): bool;\n        LogNotCallback? (pre, ast: AST): bool;\n        IncPreCallback? (pre, ast: AST): bool;\n        DecPreCallback? (pre, ast: AST): bool;\n        IncPostCallback? (pre, ast: AST): bool;\n        DecPostCallback? (pre, ast: AST): bool;\n        TypeAssertionCallback? (pre, ast: AST): bool;\n        FuncDeclCallback? (pre, funcDecl: FuncDecl): bool;\n        MemberCallback? (pre, ast: AST): bool;\n        VarDeclCallback? (pre, varDecl: VarDecl): bool;\n        ArgDeclCallback? (pre, ast: AST): bool;\n        ReturnCallback? (pre, ast: AST): bool;\n        BreakCallback? (pre, ast: AST): bool;\n        ContinueCallback? (pre, ast: AST): bool;\n        ThrowCallback? (pre, ast: AST): bool;\n        ForCallback? (pre, ast: AST): bool;\n        ForInCallback? (pre, ast: AST): bool;\n        IfCallback? (pre, ast: AST): bool;\n        WhileCallback? (pre, ast: AST): bool;\n        DoWhileCallback? (pre, ast: AST): bool;\n        BlockCallback? (pre, block: Block): bool;\n        CaseCallback? (pre, ast: AST): bool;\n        SwitchCallback? (pre, ast: AST): bool;\n        TryCallback? (pre, ast: AST): bool;\n        TryCatchCallback? (pre, ast: AST): bool;\n        TryFinallyCallback? (pre, ast: AST): bool;\n        FinallyCallback? (pre, ast: AST): bool;\n        CatchCallback? (pre, ast: AST): bool;\n        ListCallback? (pre, astList: ASTList): bool;\n        ScriptCallback? (pre, script: Script): bool;\n        ClassDeclarationCallback? (pre, ast: AST): bool;\n        InterfaceDeclarationCallback? (pre, interfaceDecl: InterfaceDeclaration): bool;\n        ModuleDeclarationCallback? (pre, moduleDecl: ModuleDeclaration): bool;\n        ImportDeclarationCallback? (pre, ast: AST): bool;\n        WithCallback? (pre, ast: AST): bool;\n        LabelCallback? (pre, labelAST: AST): bool;\n        LabeledStatementCallback? (pre, ast: AST): bool;\n        EBStartCallback? (pre, ast: AST): bool;\n        GotoEBCallback? (pre, ast: AST): bool;\n        EndCodeCallback? (pre, ast: AST): bool;\n        ErrorCallback? (pre, ast: AST): bool;\n        CommentCallback? (pre, ast: AST): bool;\n        DebuggerCallback? (pre, ast: AST): bool;\n        DefaultCallback? (pre, ast: AST): bool;\n    }\n\n    export function walk(script: Script, callback: AstWalkerDetailCallback): void {\n        var pre = (cur: AST, parent: AST) => {\n            walker.options.goChildren = AstWalkerCallback(true, cur, callback);\n            return cur;\n        }\n\n        var post = (cur: AST, parent: AST) => {\n            AstWalkerCallback(false, cur, callback);\n            return cur;\n        }\n\n        var walker = TypeScript.getAstWalkerFactory().getWalker(pre, post);\n        walker.walk(script, null);\n    }\n\n    function AstWalkerCallback(pre: bool, ast: AST, callback: AstWalkerDetailCallback): bool {\n        // See if the Callback needs to be handled using spe";
var v27334 = v27335 + 'cific one or default one\n        var nodeType = ast.nodeType;\n        var callbackString = (<any>NodeType)._map[nodeType] + "Callback";\n        if (callback[callbackString]) {\n            return callback[callbackString](pre, ast);\n        }\n\n        if (callback.DefaultCallback) {\n            return callback.DefaultCallback(pre, ast);\n        }\n\n        return true;\n    }\n}//\n// Copyright (c) Microsoft Corporation.  All rights reserved.\n// \n// Licensed under the Apache License, Version 2.0 (the "License");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an "AS IS" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n\n///<reference path=\'typescript.ts\' />\n\nmodule TypeScript {\n    export interface IAstWalker {\n        walk(ast: AST, parent: AST): AST;\n        options: AstWalkOptions;\n        state: any; // user state object\n    }\n\n    export class AstWalkOptions {\n        public goChildren = true;\n        public goNextSibling = true;\n        public reverseSiblings = false; // visit siblings in reverse execution order\n\n        public stopWalk(stop:bool = true) {\n            this.goChildren = !stop;\n            this.goNextSibling = !stop;\n        }\n    }\n\n    export interface IAstWalkCallback {\n        (ast: AST, parent: AST, walker: IAstWalker): AST;\n    }\n\n    export interface IAstWalkChildren {\n        (preAst: AST, parent: AST, walker: IAstWalker): void;\n    }\n\n    class AstWalker implements IAstWalker {\n        constructor (\n            private childrenWalkers: IAstWalkChildren[],\n            private pre: IAstWalkCallback,\n            private post: IAstWalkCallback,\n            public options: AstWalkOptions,\n            public state: any) {\n        }\n\n        public walk(ast: AST, parent: AST): AST {\n            var preAst = this.pre(ast, parent, this);\n            if (preAst === undefined) {\n                preAst = ast;\n            }\n            if (this.options.goChildren) {\n                var svGoSib = this.options.goNextSibling;\n                this.options.goNextSibling = true;\n                // Call the "walkChildren" function corresponding to "nodeType".\n                this.childrenWalkers[ast.nodeType](ast, parent, this);\n                this.options.goNextSibling = svGoSib;\n            }\n            else {\n                // no go only applies to children of node issuing it\n                this.options.goChildren = true;\n            }\n            if (this.post) {\n                var postAst = this.post(preAst, parent, this);\n                if (postAst === undefined) {\n                    postAst = preAst;\n                }\n                return postAst;\n            }\n            else {\n                return preAst;\n            }\n        }\n    }\n\n    export class AstWalkerFactory {\n        private childrenWalkers: IAstWalkChildren[] = [];\n\n        constructor () {\n            this.initChildrenWalkers();\n        }\n\n        public walk(ast: AST, pre: IAstWalkCallback, post?: IAstWalkCallback, options?: AstWalkOptions, state?: any): AST {\n            return this.getWalker(pre, post, options, state).walk(ast, null)\n        }\n\n        public getWalker(pre: IAstWalkCallback, post?: IAstWalkCallback, options?: AstWalkOptions, state?: any): IAstWalker {\n            return this.getSlowWalker(pre, post, options, state);\n        }\n\n        private getSlowWalker(pre: IAstWalkCallback, post?: IAstWalkCallback, options?: AstWalkOptions, state?: any): IAstWalker {\n            if (!options) {\n                options = new AstWalkOptions();\n            }\n\n            return new AstWalker(this.childrenWalkers, pre, post, options, state);\n        }\n\n        private initChildrenWalkers(): void {\n            this.childrenWalkers[NodeType.None] = ChildrenWalkers.walkNone;\n            this.childrenWalkers[NodeType.Empty] = ChildrenWalkers.walkNone;\n            this.childrenWalkers[NodeType.EmptyExpr] = ChildrenWalkers.walkNone;\n            this.childrenWalkers[NodeType.True] = ChildrenWalkers.walkNone;\n            this.childrenWalkers[NodeType.False] = ChildrenWalkers.walkNone;\n            this.childrenWalkers[NodeType.This] = ChildrenWalkers.walkNone;\n            this.childrenWalkers[NodeType.Super] = ChildrenWalkers.walkNone;\n            this.childrenWalkers[NodeType.QString] = ChildrenWalkers.walkNone;\n            this.childrenWalkers[NodeType.Regex] = ChildrenWalkers.walkNone;\n            this.childrenWalkers[NodeType.Null] = ChildrenWalkers.walkNone;\n            this.childrenWalkers[NodeType.ArrayLit] = ChildrenWalkers.walkUnaryExpressionChildren;\n            this.childrenWalkers[NodeType.ObjectLit] = ChildrenWalkers.walkUnaryExpressionChild';
var v27333 = v27334 + "ren;\n            this.childrenWalkers[NodeType.Void] = ChildrenWalkers.walkUnaryExpressionChildren;\n            this.childrenWalkers[NodeType.Comma] = ChildrenWalkers.walkBinaryExpressionChildren;\n            this.childrenWalkers[NodeType.Pos] = ChildrenWalkers.walkUnaryExpressionChildren;\n            this.childrenWalkers[NodeType.Neg] = ChildrenWalkers.walkUnaryExpressionChildren;\n            this.childrenWalkers[NodeType.Delete] = ChildrenWalkers.walkUnaryExpressionChildren;\n            this.childrenWalkers[NodeType.Await] = ChildrenWalkers.walkUnaryExpressionChildren;\n            this.childrenWalkers[NodeType.In] = ChildrenWalkers.walkBinaryExpressionChildren;\n            this.childrenWalkers[NodeType.Dot] = ChildrenWalkers.walkBinaryExpressionChildren;\n            this.childrenWalkers[NodeType.From] = ChildrenWalkers.walkBinaryExpressionChildren;\n            this.childrenWalkers[NodeType.Is] = ChildrenWalkers.walkBinaryExpressionChildren;\n            this.childrenWalkers[NodeType.InstOf] = ChildrenWalkers.walkBinaryExpressionChildren;\n            this.childrenWalkers[NodeType.Typeof] = ChildrenWalkers.walkUnaryExpressionChildren;\n            this.childrenWalkers[NodeType.NumberLit] = ChildrenWalkers.walkNone;\n            this.childrenWalkers[NodeType.Name] = ChildrenWalkers.walkNone;\n            this.childrenWalkers[NodeType.TypeRef] = ChildrenWalkers.walkTypeReferenceChildren;\n            this.childrenWalkers[NodeType.Index] = ChildrenWalkers.walkBinaryExpressionChildren;\n            this.childrenWalkers[NodeType.Call] = ChildrenWalkers.walkCallExpressionChildren;\n            this.childrenWalkers[NodeType.New] = ChildrenWalkers.walkCallExpressionChildren;\n            this.childrenWalkers[NodeType.Asg] = ChildrenWalkers.walkBinaryExpressionChildren;\n            this.childrenWalkers[NodeType.AsgAdd] = ChildrenWalkers.walkBinaryExpressionChildren;\n            this.childrenWalkers[NodeType.AsgSub] = ChildrenWalkers.walkBinaryExpressionChildren;\n            this.childrenWalkers[NodeType.AsgDiv] = ChildrenWalkers.walkBinaryExpressionChildren;\n            this.childrenWalkers[NodeType.AsgMul] = ChildrenWalkers.walkBinaryExpressionChildren;\n            this.childrenWalkers[NodeType.AsgMod] = ChildrenWalkers.walkBinaryExpressionChildren;\n            this.childrenWalkers[NodeType.AsgAnd] = ChildrenWalkers.walkBinaryExpressionChildren;\n            this.childrenWalkers[NodeType.AsgXor] = ChildrenWalkers.walkBinaryExpressionChildren;\n            this.childrenWalkers[NodeType.AsgOr] = ChildrenWalkers.walkBinaryExpressionChildren;\n            this.childrenWalkers[NodeType.AsgLsh] = ChildrenWalkers.walkBinaryExpressionChildren;\n            this.childrenWalkers[NodeType.AsgRsh] = ChildrenWalkers.walkBinaryExpressionChildren;\n            this.childrenWalkers[NodeType.AsgRs2] = ChildrenWalkers.walkBinaryExpressionChildren;\n            this.childrenWalkers[NodeType.ConditionalExpression] = ChildrenWalkers.walkTrinaryExpressionChildren;\n            this.childrenWalkers[NodeType.LogOr] = ChildrenWalkers.walkBinaryExpressionChildren;\n            this.childrenWalkers[NodeType.LogAnd] = ChildrenWalkers.walkBinaryExpressionChildren;\n            this.childrenWalkers[NodeType.Or] = ChildrenWalkers.walkBinaryExpressionChildren;\n            this.childrenWalkers[NodeType.Xor] = ChildrenWalkers.walkBinaryExpressionChildren;\n            this.childrenWalkers[NodeType.And] = ChildrenWalkers.walkBinaryExpressionChildren;\n            this.childrenWalkers[NodeType.Eq] = ChildrenWalkers.walkBinaryExpressionChildren;\n            this.childrenWalkers[NodeType.Ne] = ChildrenWalkers.walkBinaryExpressionChildren;\n            this.childrenWalkers[NodeType.Eqv] = ChildrenWalkers.walkBinaryExpressionChildren;\n            this.childrenWalkers[NodeType.NEqv] = ChildrenWalkers.walkBinaryExpressionChildren;\n            this.childrenWalkers[NodeType.Lt] = ChildrenWalkers.walkBinaryExpressionChildren;\n            this.childrenWalkers[NodeType.Le] = ChildrenWalkers.walkBinaryExpressionChildren;\n            this.childrenWalkers[NodeType.Gt] = ChildrenWalkers.walkBinaryExpressionChildren;\n            this.childrenWalkers[NodeType.Ge] = ChildrenWalkers.walkBinaryExpressionChildren;\n            this.childrenWalkers[NodeType.Add] = ChildrenWalkers.walkBinaryExpressionChildren;\n            this.childrenWalkers[NodeType.Sub] = ChildrenWalkers.walkBinaryExpressionChildren;\n            this.childrenWalkers[NodeType.Mul] = ChildrenWalkers.walkBinaryExpressionChildren;\n            this.childrenWalkers[NodeType.Div] = ChildrenWalkers.walkBinaryExpressionChildren;\n            this.childrenWalkers[NodeType.Mod] = ChildrenWalkers.walkBinaryExpressionChildren;\n            this.childrenWalkers[NodeType.Lsh] = ChildrenWalkers.walkBinaryExpressionChildren;\n            this.childrenWalkers[NodeType.Rsh] = ChildrenWalkers.walkBinaryExpressionChildren;\n            this.childrenWalkers[NodeType.Rs2] = ChildrenWalkers.walkBinaryExpressionChildren;\n            this.childrenWalker";
var v27332 = v27333 + 's[NodeType.Not] = ChildrenWalkers.walkUnaryExpressionChildren;\n            this.childrenWalkers[NodeType.LogNot] = ChildrenWalkers.walkUnaryExpressionChildren;\n            this.childrenWalkers[NodeType.IncPre] = ChildrenWalkers.walkUnaryExpressionChildren;\n            this.childrenWalkers[NodeType.DecPre] = ChildrenWalkers.walkUnaryExpressionChildren;\n            this.childrenWalkers[NodeType.IncPost] = ChildrenWalkers.walkUnaryExpressionChildren;\n            this.childrenWalkers[NodeType.DecPost] = ChildrenWalkers.walkUnaryExpressionChildren;\n            this.childrenWalkers[NodeType.TypeAssertion] = ChildrenWalkers.walkUnaryExpressionChildren;\n            this.childrenWalkers[NodeType.FuncDecl] = ChildrenWalkers.walkFuncDeclChildren;\n            this.childrenWalkers[NodeType.Member] = ChildrenWalkers.walkBinaryExpressionChildren;\n            this.childrenWalkers[NodeType.VarDecl] = ChildrenWalkers.walkBoundDeclChildren;\n            this.childrenWalkers[NodeType.ArgDecl] = ChildrenWalkers.walkBoundDeclChildren;\n            this.childrenWalkers[NodeType.Return] = ChildrenWalkers.walkReturnStatementChildren;\n            this.childrenWalkers[NodeType.Break] = ChildrenWalkers.walkNone;\n            this.childrenWalkers[NodeType.Continue] = ChildrenWalkers.walkNone;\n            this.childrenWalkers[NodeType.Throw] = ChildrenWalkers.walkUnaryExpressionChildren;\n            this.childrenWalkers[NodeType.For] = ChildrenWalkers.walkForStatementChildren;\n            this.childrenWalkers[NodeType.ForIn] = ChildrenWalkers.walkForInStatementChildren;\n            this.childrenWalkers[NodeType.If] = ChildrenWalkers.walkIfStatementChildren;\n            this.childrenWalkers[NodeType.While] = ChildrenWalkers.walkWhileStatementChildren;\n            this.childrenWalkers[NodeType.DoWhile] = ChildrenWalkers.walkDoWhileStatementChildren;\n            this.childrenWalkers[NodeType.Block] = ChildrenWalkers.walkBlockChildren;\n            this.childrenWalkers[NodeType.Case] = ChildrenWalkers.walkCaseStatementChildren;\n            this.childrenWalkers[NodeType.Switch] = ChildrenWalkers.walkSwitchStatementChildren;\n            this.childrenWalkers[NodeType.Try] = ChildrenWalkers.walkTryChildren;\n            this.childrenWalkers[NodeType.TryCatch] = ChildrenWalkers.walkTryCatchChildren;\n            this.childrenWalkers[NodeType.TryFinally] = ChildrenWalkers.walkTryFinallyChildren;\n            this.childrenWalkers[NodeType.Finally] = ChildrenWalkers.walkFinallyChildren;\n            this.childrenWalkers[NodeType.Catch] = ChildrenWalkers.walkCatchChildren;\n            this.childrenWalkers[NodeType.List] = ChildrenWalkers.walkListChildren;\n            this.childrenWalkers[NodeType.Script] = ChildrenWalkers.walkScriptChildren;\n            this.childrenWalkers[NodeType.ClassDeclaration] = ChildrenWalkers.walkClassDeclChildren;\n            this.childrenWalkers[NodeType.InterfaceDeclaration] = ChildrenWalkers.walkTypeDeclChildren;\n            this.childrenWalkers[NodeType.ModuleDeclaration] = ChildrenWalkers.walkModuleDeclChildren;\n            this.childrenWalkers[NodeType.ImportDeclaration] = ChildrenWalkers.walkImportDeclChildren;\n            this.childrenWalkers[NodeType.With] = ChildrenWalkers.walkWithStatementChildren;\n            this.childrenWalkers[NodeType.Label] = ChildrenWalkers.walkLabelChildren;\n            this.childrenWalkers[NodeType.LabeledStatement] = ChildrenWalkers.walkLabeledStatementChildren;\n            this.childrenWalkers[NodeType.EBStart] = ChildrenWalkers.walkNone;\n            this.childrenWalkers[NodeType.GotoEB] = ChildrenWalkers.walkNone;\n            this.childrenWalkers[NodeType.EndCode] = ChildrenWalkers.walkNone;\n            this.childrenWalkers[NodeType.Error] = ChildrenWalkers.walkNone;\n            this.childrenWalkers[NodeType.Comment] = ChildrenWalkers.walkNone;\n            this.childrenWalkers[NodeType.Debugger] = ChildrenWalkers.walkNone;\n\n            // Verify the code is up to date with the enum\n            for (var e in (<any>NodeType)._map) {\n                if ((<any>this.childrenWalkers)[e] === undefined) {\n                    throw new Error("initWalkers function is not up to date with enum content!");\n                }\n            }\n        }\n    }\n\n    var globalAstWalkerFactory: AstWalkerFactory;\n\n    export function getAstWalkerFactory(): AstWalkerFactory {\n        if (!globalAstWalkerFactory) {\n            globalAstWalkerFactory = new AstWalkerFactory();\n        }\n        return globalAstWalkerFactory;\n    }\n\n    module ChildrenWalkers {\n        export function walkNone(preAst: ASTList, parent: AST, walker: IAstWalker): void {\n            // Nothing to do\n        }\n\n        export function walkListChildren(preAst: ASTList, parent: AST, walker: IAstWalker): void {\n            var len = preAst.members.length;\n            if (walker.options.reverseSiblings) {\n                for (var i = len - 1; i >= 0; i--) {\n                    if (walker.options.goNextSibling) {\n                        preAst.m';
var v27331 = v27332 + "embers[i] = walker.walk(preAst.members[i], preAst);\n                    }\n                }\n            }\n            else {\n                for (var i = 0; i < len; i++) {\n                    if (walker.options.goNextSibling) {\n                        preAst.members[i] = walker.walk(preAst.members[i], preAst);\n                    }\n                }\n            }\n        }\n\n        export function walkUnaryExpressionChildren(preAst: UnaryExpression, parent: AST, walker: IAstWalker): void {\n            if (preAst.castTerm) {\n                preAst.castTerm = walker.walk(preAst.castTerm, preAst);\n            }\n            if (preAst.operand) {\n                preAst.operand = walker.walk(preAst.operand, preAst);\n            }\n        }\n\n        export function walkBinaryExpressionChildren(preAst: BinaryExpression, parent: AST, walker: IAstWalker): void {\n            if (walker.options.reverseSiblings) {\n                if (preAst.operand2) {\n                    preAst.operand2 = walker.walk(preAst.operand2, preAst);\n                }\n                if ((preAst.operand1) && (walker.options.goNextSibling)) {\n                    preAst.operand1 = walker.walk(preAst.operand1, preAst);\n                }\n            } else {\n                if (preAst.operand1) {\n                    preAst.operand1 = walker.walk(preAst.operand1, preAst);\n                }\n                if ((preAst.operand2) && (walker.options.goNextSibling)) {\n                    preAst.operand2 = walker.walk(preAst.operand2, preAst);\n                }\n            }\n        }\n\n        export function walkTypeReferenceChildren(preAst: TypeReference, parent: AST, walker: IAstWalker): void {\n            if (preAst.term) {\n                preAst.term = walker.walk(preAst.term, preAst);\n            }\n        }\n\n        export function walkCallExpressionChildren(preAst: CallExpression, parent: AST, walker: IAstWalker): void {\n            if (!walker.options.reverseSiblings) {\n                preAst.target = walker.walk(preAst.target, preAst);\n            }\n            if (preAst.arguments && (walker.options.goNextSibling)) {\n                preAst.arguments = <ASTList> walker.walk(preAst.arguments, preAst);\n            }\n            if ((walker.options.reverseSiblings) && (walker.options.goNextSibling)) {\n                preAst.target = walker.walk(preAst.target, preAst);\n            }\n        }\n\n        export function walkTrinaryExpressionChildren(preAst: ConditionalExpression, parent: AST, walker: IAstWalker): void {\n            if (preAst.operand1) {\n                preAst.operand1 = walker.walk(preAst.operand1, preAst);\n            }\n            if (preAst.operand2 && (walker.options.goNextSibling)) {\n                preAst.operand2 = walker.walk(preAst.operand2, preAst);\n            }\n            if (preAst.operand3 && (walker.options.goNextSibling)) {\n                preAst.operand3 = walker.walk(preAst.operand3, preAst);\n            }\n        }\n\n        export function walkFuncDeclChildren(preAst: FuncDecl, parent: AST, walker: IAstWalker): void {\n            if (preAst.name) {\n                preAst.name = <Identifier>walker.walk(preAst.name, preAst);\n            }\n            if (preAst.arguments && (preAst.arguments.members.length > 0) && (walker.options.goNextSibling)) {\n                preAst.arguments = <ASTList>walker.walk(preAst.arguments, preAst);\n            }\n            if (preAst.returnTypeAnnotation && (walker.options.goNextSibling)) {\n                preAst.returnTypeAnnotation = walker.walk(preAst.returnTypeAnnotation, preAst);\n            }\n            if (preAst.bod && (preAst.bod.members.length > 0) && (walker.options.goNextSibling)) {\n                preAst.bod = <ASTList>walker.walk(preAst.bod, preAst);\n            }\n        }\n\n        export function walkBoundDeclChildren(preAst: BoundDecl, parent: AST, walker: IAstWalker): void {\n            if (preAst.id) {\n                preAst.id = <Identifier>walker.walk(preAst.id, preAst);\n            }\n            if (preAst.init) {\n                preAst.init = walker.walk(preAst.init, preAst);\n            }\n            if ((preAst.typeExpr) && (walker.options.goNextSibling)) {\n                preAst.typeExpr = walker.walk(preAst.typeExpr, preAst);\n            }\n        }\n\n        export function walkReturnStatementChildren(preAst: ReturnStatement, parent: AST, walker: IAstWalker): void {\n            if (preAst.returnExpression) {\n                preAst.returnExpression = walker.walk(preAst.returnExpression, preAst);\n            }\n        }\n\n        export function walkForStatementChildren(preAst: ForStatement, parent: AST, walker: IAstWalker): void {\n            if (preAst.init) {\n                preAst.init = walker.walk(preAst.init, preAst);\n            }\n\n            if (preAst.cond && walker.options.goNextSibling) {\n                preAst.cond = walker.walk(preAst.cond, preAst);\n            }\n\n            if (preAst.incr && walker.options.goNextSibling) {\n                pr";
var v27330 = v27331 + "eAst.incr = walker.walk(preAst.incr, preAst);\n            }\n\n            if (preAst.body && walker.options.goNextSibling) {\n                preAst.body = walker.walk(preAst.body, preAst);\n            }\n        }\n\n        export function walkForInStatementChildren(preAst: ForInStatement, parent: AST, walker: IAstWalker): void {\n            preAst.lval = walker.walk(preAst.lval, preAst);\n            if (walker.options.goNextSibling) {\n                preAst.obj = walker.walk(preAst.obj, preAst);\n            }\n            if (preAst.body && (walker.options.goNextSibling)) {\n                preAst.body = walker.walk(preAst.body, preAst);\n            }\n        }\n\n        export function walkIfStatementChildren(preAst: IfStatement, parent: AST, walker: IAstWalker): void {\n            preAst.cond = walker.walk(preAst.cond, preAst);\n            if (preAst.thenBod && (walker.options.goNextSibling)) {\n                preAst.thenBod = walker.walk(preAst.thenBod, preAst);\n            }\n            if (preAst.elseBod && (walker.options.goNextSibling)) {\n                preAst.elseBod = walker.walk(preAst.elseBod, preAst);\n            }\n        }\n\n        export function walkWhileStatementChildren(preAst: WhileStatement, parent: AST, walker: IAstWalker): void {\n            preAst.cond = walker.walk(preAst.cond, preAst);\n            if (preAst.body && (walker.options.goNextSibling)) {\n                preAst.body = walker.walk(preAst.body, preAst);\n            }\n        }\n\n        export function walkDoWhileStatementChildren(preAst: DoWhileStatement, parent: AST, walker: IAstWalker): void {\n            preAst.cond = walker.walk(preAst.cond, preAst);\n            if (preAst.body && (walker.options.goNextSibling)) {\n                preAst.body = walker.walk(preAst.body, preAst);\n            }\n        }\n\n        export function walkBlockChildren(preAst: Block, parent: AST, walker: IAstWalker): void {\n            if (preAst.statements) {\n                preAst.statements = <ASTList>walker.walk(preAst.statements, preAst);\n            }\n        }\n\n        export function walkCaseStatementChildren(preAst: CaseStatement, parent: AST, walker: IAstWalker): void {\n            if (preAst.expr) {\n                preAst.expr = walker.walk(preAst.expr, preAst);\n            }\n\n            if (preAst.body && walker.options.goNextSibling) {\n                preAst.body = <ASTList>walker.walk(preAst.body, preAst);\n            }\n        }\n\n        export function walkSwitchStatementChildren(preAst: SwitchStatement, parent: AST, walker: IAstWalker): void {\n            if (preAst.val) {\n                preAst.val = walker.walk(preAst.val, preAst);\n            }\n\n            if ((preAst.caseList) && walker.options.goNextSibling) {\n                preAst.caseList = <ASTList>walker.walk(preAst.caseList, preAst);\n            }\n        }\n\n        export function walkTryChildren(preAst: Try, parent: AST, walker: IAstWalker): void {\n            if (preAst.body) {\n                preAst.body = walker.walk(preAst.body, preAst);\n            }\n        }\n\n        export function walkTryCatchChildren(preAst: TryCatch, parent: AST, walker: IAstWalker): void {\n            if (preAst.tryNode) {\n                preAst.tryNode = <Try>walker.walk(preAst.tryNode, preAst);\n            }\n\n            if ((preAst.catchNode) && walker.options.goNextSibling) {\n                preAst.catchNode = <Catch>walker.walk(preAst.catchNode, preAst);\n            }\n        }\n\n        export function walkTryFinallyChildren(preAst: TryFinally, parent: AST, walker: IAstWalker): void {\n            if (preAst.tryNode) {\n                preAst.tryNode = walker.walk(preAst.tryNode, preAst);\n            }\n\n            if (preAst.finallyNode && walker.options.goNextSibling) {\n                preAst.finallyNode = <Finally>walker.walk(preAst.finallyNode, preAst);\n            }\n        }\n\n        export function walkFinallyChildren(preAst: Finally, parent: AST, walker: IAstWalker): void {\n            if (preAst.body) {\n                preAst.body = walker.walk(preAst.body, preAst);\n            }\n        }\n\n        export function walkCatchChildren(preAst: Catch, parent: AST, walker: IAstWalker): void {\n            if (preAst.param) {\n                preAst.param = <VarDecl>walker.walk(preAst.param, preAst);\n            }\n\n            if ((preAst.body) && walker.options.goNextSibling) {\n                preAst.body = walker.walk(preAst.body, preAst);\n            }\n        }\n\n        export function walkRecordChildren(preAst: NamedDeclaration, parent: AST, walker: IAstWalker): void {\n            preAst.name = <Identifier>walker.walk(preAst.name, preAst);\n            if (walker.options.goNextSibling && preAst.members) {\n                preAst.members = <ASTList>walker.walk(preAst.members, preAst);\n            }\n\n        }\n\n        export function walkNamedTypeChildren(preAst: TypeDeclaration, parent: AST, walker: IAstWalker): void {\n            walkRecordChildren(preAst, parent, walker);\n        }\n";
var v27329 = v27330 + '\n        export function walkClassDeclChildren(preAst: ClassDeclaration, parent: AST, walker: IAstWalker): void {\n            walkNamedTypeChildren(preAst, parent, walker);\n\n            if (walker.options.goNextSibling && preAst.extendsList) {\n                preAst.extendsList = <ASTList>walker.walk(preAst.extendsList, preAst);\n            }\n\n            if (walker.options.goNextSibling && preAst.implementsList) {\n                preAst.implementsList = <ASTList>walker.walk(preAst.implementsList, preAst);\n            }\n        }\n\n        export function walkScriptChildren(preAst: Script, parent: AST, walker: IAstWalker): void {\n            if (preAst.bod) {\n                preAst.bod = <ASTList>walker.walk(preAst.bod, preAst);\n            }\n        }\n\n        export function walkTypeDeclChildren(preAst: InterfaceDeclaration, parent: AST, walker: IAstWalker): void {\n            walkNamedTypeChildren(preAst, parent, walker);\n\n            // walked arguments as part of members\n            if (walker.options.goNextSibling && preAst.extendsList) {\n                preAst.extendsList = <ASTList>walker.walk(preAst.extendsList, preAst);\n            }\n\n            if (walker.options.goNextSibling && preAst.implementsList) {\n                preAst.implementsList = <ASTList>walker.walk(preAst.implementsList, preAst);\n            }\n        }\n\n        export function walkModuleDeclChildren(preAst: ModuleDeclaration, parent: AST, walker: IAstWalker): void {\n            walkRecordChildren(preAst, parent, walker);\n        }\n\n        export function walkImportDeclChildren(preAst: ImportDeclaration, parent: AST, walker: IAstWalker): void {\n            if (preAst.id) {\n                preAst.id = <Identifier>walker.walk(preAst.id, preAst);\n            }\n            if (preAst.alias) {\n                preAst.alias = walker.walk(preAst.alias, preAst);\n            }\n        }\n\n        export function walkWithStatementChildren(preAst: WithStatement, parent: AST, walker: IAstWalker): void {\n            if (preAst.expr) {\n                preAst.expr = walker.walk(preAst.expr, preAst);\n            }\n\n            if (preAst.body && walker.options.goNextSibling) {\n                preAst.body = walker.walk(preAst.body, preAst);\n            }\n        }\n\n        export function walkLabelChildren(preAst: Label, parent: AST, walker: IAstWalker): void {\n            //TODO: Walk "id"?\n        }\n\n        export function walkLabeledStatementChildren(preAst: LabeledStatement, parent: AST, walker: IAstWalker): void {\n            preAst.labels = <ASTList>walker.walk(preAst.labels, preAst);\n            if (walker.options.goNextSibling) {\n                preAst.stmt = walker.walk(preAst.stmt, preAst);\n            }\n        }\n    }\n}//\n// Copyright (c) Microsoft Corporation.  All rights reserved.\n// \n// Licensed under the Apache License, Version 2.0 (the "License");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an "AS IS" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n\nmodule TypeScript {\n    class Base64Format {\n        static encodedValues = \'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\';\n        static encode(inValue: number) {\n            if (inValue < 64) {\n                return encodedValues.charAt(inValue);\n            }\n            throw TypeError(inValue + ": not a 64 based value");\n        }\n\n        static decodeChar(inChar: string) {\n            if (inChar.length === 1) {\n                return encodedValues.indexOf(inChar);\n            } else {\n                throw TypeError(\'"\' + inChar + \'" must have length 1\');\n            }\n        }\n    }\n\n    export class Base64VLQFormat {\n        static encode(inValue: number) {\n            // Add a new least significant bit that has the sign of the value.\n            // if negative number the least significant bit that gets added to the number has value 1\n            // else least significant bit value that gets added is 0\n            // eg. -1 changes to binary : 01 [1] => 3\n            //     +1 changes to binary : 01 [0] => 2\n            if (inValue < 0) {\n                inValue = ((-inValue) << 1) + 1;\n            }\n            else {\n                inValue = inValue << 1;\n            }\n\n            // Encode 5 bits at a time starting from least significant bits\n            var encodedStr = "";\n            do {\n                var currentDigit = inValue & 31; // 11111\n                inValue = inValue >> 5;\n                if (inValue > 0) {\n                    // There are still more digits to decode, set the msb (6th bit)\n                    currentDigit = currentDigit | 32; \n               ';
var v27328 = v27329 + ' }\n                encodedStr = encodedStr + Base64Format.encode(currentDigit);\n            } while (inValue > 0);\n\n            return encodedStr;\n        }\n\n        static decode(inString: string) {\n            var result = 0;\n            var negative = false;\n\n            var shift = 0;\n            for (var i = 0; i < inString.length; i++) {\n                var byte = Base64Format.decodeChar(inString[i]);\n                if (i === 0) {\n                    // Sign bit appears in the LSBit of the first value\n                    if ((byte & 1) === 1) {\n                        negative = true;\n                    }\n                    result = (byte >> 1) & 15; // 1111x\n                } else {\n                    result = result | ((byte & 31) << shift); // 11111\n                }\n\n                shift += (i == 0) ? 4 : 5;\n\n                if ((byte & 32) === 32) {\n                    // Continue\n                } else {\n                    return { value: negative ? -(result) : result, rest: inString.substr(i + 1) };\n                }\n            }\n\n            throw new Error(\'Base64 value "\' + inString + \'" finished with a continuation bit\');\n        }\n    }\n}\n//\n// Copyright (c) Microsoft Corporation.  All rights reserved.\n// \n// Licensed under the Apache License, Version 2.0 (the "License");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an "AS IS" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n\n///<reference path=\'typescript.ts\' />\n\nmodule TypeScript {\n    export class Binder {\n        constructor(public checker: TypeChecker) { }\n        \n        public resolveBaseTypeLinks(typeLinks: TypeLink[], scope: SymbolScope) {\n            var extendsList: Type[] = null;\n            if (typeLinks) {\n                extendsList = new Type[];\n                for (var i = 0, len = typeLinks.length; i < len; i++) {\n                    extendsList[i] = this.checker.resolveBaseTypeLink(typeLinks[i], scope);\n                }\n            }\n            return extendsList;\n        }\n\n        public resolveBases(scope: SymbolScope, type: Type) {\n            type.extendsList = this.resolveBaseTypeLinks(type.extendsTypeLinks, scope);\n\n            var i = 0, len = type.extendsList.length;\n            var derivedIsClass = type.isClassInstance();\n            for (; i < len; i++) {\n                var baseIsClass = type.extendsList[i].isClassInstance();\n                if (type.extendsList[i] != this.checker.anyType) {\n                    var baseRef = type.extendsTypeLinks[i].ast;\n                    if (derivedIsClass) {\n                        if (!baseIsClass) {\n                            this.checker.errorReporter.simpleError(baseRef,\n                                                                     "A class may only extend other classes, " + type.extendsList[i].symbol.fullName() + " is not a class.");\n                        }\n                    }\n                    else {\n                        if (baseIsClass) {\n                            this.checker.errorReporter.simpleError(baseRef,\n                                                                     "An interface may only extend other interfaces, " + type.extendsList[i].symbol.fullName() + " is a class.");\n                        }\n                    }\n                }\n            }\n\n            type.implementsList = this.resolveBaseTypeLinks(type.implementsTypeLinks, scope);\n\n            if (type.implementsList) {\n                for (i = 0, len = type.implementsList.length; i < len; i++) {\n                    var iface = type.implementsList[i];\n                    var baseRef = type.implementsTypeLinks[i].ast;\n                    if (iface.isClassInstance()) {\n                        if (derivedIsClass) {\n                            this.checker.errorReporter.simpleError(baseRef,\n                                                                     "A class may only implement an interface; " + iface.symbol.fullName() + " is a class.");\n                        }\n                    }\n                }\n            }\n        }\n\n        public resolveSignatureGroup(signatureGroup: SignatureGroup, scope: SymbolScope, instanceType: Type) {\n            var supplyVar = !(signatureGroup.hasImplementation);\n            for (var i = 0, len = signatureGroup.signatures.length; i < len; i++) {\n                var signature = signatureGroup.signatures[i];\n                if (instanceType) {\n                    signature.returnType.type = instanceType;\n                }\n                else {\n                    this.checker.resolveTypeLink(scope, signature.returnType, supplyVar);\n               ';
var v27327 = v27328 + ' }\n                var paramLen = signature.parameters.length;\n                for (var j = 0; j < paramLen; j++) {\n                    this.bindSymbol(scope, signature.parameters[j]);\n                }\n                if (signature.hasVariableArgList) {\n                    // check that last parameter has an array type\n                    var lastParam = <ParameterSymbol>signature.parameters[paramLen - 1];\n                    lastParam.argsOffset = paramLen - 1;\n                    if (!lastParam.getType().isArray()) {\n                        this.checker.errorReporter.simpleErrorFromSym(lastParam,\n                                                                 "... parameter must have array type");\n                        lastParam.parameter.typeLink.type = this.checker.makeArrayType(lastParam.parameter.typeLink.type);\n                    }\n                }\n            }\n        }\n\n        public bindType(scope: SymbolScope, type: Type, instanceType: Type): void {\n            if (instanceType) {\n                this.bindType(scope, instanceType, null);\n            }\n            if (type.hasMembers()) {\n                var members = type.members;\n                var ambientMembers = type.ambientMembers;\n                var typeMembers = type.getAllEnclosedTypes(); // REVIEW: Should only be getting exported types?\n                var ambientTypeMembers = type.getAllAmbientEnclosedTypes(); // REVIEW: Should only be getting exported types?\n                var memberScope = new SymbolTableScope(members, ambientMembers, typeMembers, ambientTypeMembers, type.symbol);\n                var agg = new SymbolAggregateScope(type.symbol);\n                var prevCurrentModDecl = this.checker.currentModDecl;\n                var prevBindStatus = this.checker.inBind;\n                agg.addParentScope(memberScope);\n                agg.addParentScope(scope);\n                if (type.isModuleType()) {\n                    this.checker.currentModDecl = <ModuleDeclaration>type.symbol.declAST;\n                    this.checker.inBind = true;\n                }\n                if (members) {\n                    this.bind(agg, type.members.allMembers); // REVIEW: Should only be getting exported types?\n                }\n                if (typeMembers) {\n                    this.bind(agg, typeMembers.allMembers);\n                }\n                if (ambientMembers) {\n                    this.bind(agg, ambientMembers.allMembers);\n                }\n                if (ambientTypeMembers) {\n                    this.bind(agg, ambientTypeMembers.allMembers);\n                }\n                this.checker.currentModDecl = prevCurrentModDecl;\n                this.checker.inBind = prevBindStatus;\n            }\n            if (type.extendsTypeLinks) {\n                this.resolveBases(scope, type);\n            }\n            if (type.construct) {\n                this.resolveSignatureGroup(type.construct, scope, instanceType);\n            }\n            if (type.call) {\n                this.resolveSignatureGroup(type.call, scope, null);\n            }\n            if (type.index) {\n                this.resolveSignatureGroup(type.index, scope, null);\n            }\n            if (type.elementType) {\n                this.bindType(scope, type.elementType, null);\n            }\n        }\n\n        public bindSymbol(scope: SymbolScope, symbol: Symbol) {\n            if (!symbol.bound) {\n                var prevLocationInfo = this.checker.locationInfo;\n                if ((this.checker.units) && (symbol.unitIndex >= 0) && (symbol.unitIndex < this.checker.units.length)) {\n                    this.checker.locationInfo = this.checker.units[symbol.unitIndex];\n                }\n                switch (symbol.kind()) {\n                    case SymbolKind.Type:\n\n                        if (symbol.flags & SymbolFlags.Bound) {\n                            break;\n                        }\n\n                        var typeSymbol = <TypeSymbol>symbol;\n                        typeSymbol.flags |= SymbolFlags.Bound;\n\n                        // Since type collection happens out of order, a dynamic module referenced by an import statement\n                        // may not yet be in scope when the import symbol is created.  In that case, we need to search\n                        // out the module symbol now\n                        // Note that we\'ll also want to do this in resolveTypeMembers, in case the symbol is set outside the\n                        // context of a given module  (E.g., an outer import statement)\n                        if (typeSymbol.aliasLink && !typeSymbol.type && typeSymbol.aliasLink.alias.nodeType == NodeType.Name) {\n                            var modPath = (<Identifier>typeSymbol.aliasLink.alias).text;\n                            var modSym = this.checker.findSymbolForDynamicModule(modPath, this.checker.locationInfo.filename, (id) => scope.find(id, false, true));\n                            if (modSym) {\n                                typeSymb';
var v27326 = v27327 + 'ol.type = modSym.getType();\n                            }\n                        }\n\n                        if (typeSymbol.type && typeSymbol.type != this.checker.gloModType) {\n                            this.bindType(scope, typeSymbol.type, typeSymbol.instanceType);\n\n                            // bind expansions on the parent type symbol\n                            if (typeSymbol.type.isModuleType()) {\n                                for (var i = 0; i < typeSymbol.expansions.length; i++) {\n                                    this.bindType(scope, typeSymbol.expansions[i], typeSymbol.instanceType);\n                                }\n                            }\n                        }\n                        break;\n                    case SymbolKind.Field:\n                        this.checker.resolveTypeLink(scope, (<FieldSymbol>symbol).field.typeLink,\n                                                false);\n                        break;\n                    case SymbolKind.Parameter:\n                        this.checker.resolveTypeLink(scope,\n                                                (<ParameterSymbol>symbol).parameter.typeLink,\n                                                true);\n                        break;\n                }\n                this.checker.locationInfo = prevLocationInfo;\n            }\n            symbol.bound = true;\n        }\n\n        public bind(scope: SymbolScope, table: IHashTable) {\n            table.map(\n                (key, sym, binder) => {\n                    binder.bindSymbol(scope, sym);\n                },\n                this);\n        }\n    }\n\n}//\n// Copyright (c) Microsoft Corporation.  All rights reserved.\n// \n// Licensed under the Apache License, Version 2.0 (the "License");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an "AS IS" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n\n///<reference path=\'typescript.ts\' />\n\nmodule TypeScript {\n    export class DeclFileWriter {\n        public onNewLine = true;\n        constructor(private declFile: ITextWriter) {\n        }\n\n        public Write(s: string) {\n            this.declFile.Write(s);\n            this.onNewLine = false;\n        }\n\n        public WriteLine(s: string) {\n            this.declFile.WriteLine(s);\n            this.onNewLine = true;\n        }\n\n        public Close() {\n            this.declFile.Close();\n        }\n    }\n\n    export class DeclarationEmitter implements AstWalkerWithDetailCallback.AstWalkerDetailCallback {\n        private declFile: DeclFileWriter = null;\n        private indenter = new Indenter();\n        private declarationContainerStack: AST[] = [];\n        private isDottedModuleName: bool[] = [];\n        private dottedModuleEmit: string;\n        private ignoreCallbackAst: AST = null;\n        private singleDeclFile: DeclFileWriter = null;\n        private varListCount: number = 0;\n\n        private getAstDeclarationContainer() {\n            return this.declarationContainerStack[this.declarationContainerStack.length - 1];\n        }\n\n        private emitDottedModuleName() {\n            return (this.isDottedModuleName.length == 0) ? false : this.isDottedModuleName[this.isDottedModuleName.length - 1];\n        }\n\n        constructor (public checker: TypeChecker, public emitOptions: EmitOptions, public errorReporter: ErrorReporter) {\n        }\n\n        public setDeclarationFile(file: ITextWriter) {\n            this.declFile = new DeclFileWriter(file);\n        }\n\n        public Close() {\n            try {\n                // Closing files could result in exceptions, report them if they occur\n                this.declFile.Close();\n            } catch (ex) {\n                this.errorReporter.emitterError(null, ex.message);\n            }\n        }\n\n        public emitDeclarations(script: TypeScript.Script): void {\n            AstWalkerWithDetailCallback.walk(script, this);\n        }\n\n        private getIndentString(declIndent? = false) {\n            if (this.emitOptions.minWhitespace) {\n                return "";\n            }\n            else {\n                return this.indenter.getIndent();\n            }\n        }\n\n        private emitIndent() {\n            this.declFile.Write(this.getIndentString());\n        }\n\n        private canEmitSignature(declFlags: DeclFlags, canEmitGlobalAmbientDecl?: bool = true, useDeclarationContainerTop?: bool = true) {\n            var container: AST;\n            if (useDeclarationContainerTop) {\n                container = this.getAstDeclarationContainer();\n            } else {\n                container = this.declarationContainerStack[this.declarationContainerStack.length - 2];\n            }\n';
var v27325 = v27326 + '\n            if (container.nodeType == NodeType.ModuleDeclaration && !hasFlag(declFlags, DeclFlags.Exported)) {\n                return false;\n            }\n\n            if (!canEmitGlobalAmbientDecl && container.nodeType == NodeType.Script && hasFlag(declFlags, DeclFlags.Ambient)) {\n                return false;\n            }\n\n            return true;\n        }\n\n        private canEmitPrePostAstSignature(declFlags: DeclFlags, astWithPrePostCallback: AST, preCallback: bool) {\n            if (this.ignoreCallbackAst) {\n                CompilerDiagnostics.assert(this.ignoreCallbackAst != astWithPrePostCallback, "Ignore Callback AST mismatch");\n                this.ignoreCallbackAst = null;\n                return false;\n            } else if (preCallback &&\n                !this.canEmitSignature(declFlags, true, preCallback)) {\n                this.ignoreCallbackAst = astWithPrePostCallback;\n                return false;\n            }\n\n            return true;\n        }\n\n        private getDeclFlagsString(declFlags: DeclFlags, typeString: string) {\n            var result = this.getIndentString();\n\n            // Accessor strings\n            var accessorString = "";\n            if (hasFlag(declFlags, DeclFlags.GetAccessor)) {\n                accessorString = "get ";\n            }\n            else if (hasFlag(declFlags, DeclFlags.SetAccessor)) {\n                accessorString = "set ";\n            }\n\n            // Emit export only for global export statements. The container for this would be dynamic module which is whole file\n            var container = this.getAstDeclarationContainer();\n            if (container.nodeType == NodeType.ModuleDeclaration &&\n                hasFlag((<ModuleDeclaration>container).modFlags, ModuleFlags.IsWholeFile) &&\n                hasFlag(declFlags, DeclFlags.Exported)) {\n                result += "export ";\n            }\n\n            // Static/public/private/global declare\n            if (hasFlag(declFlags, DeclFlags.LocalStatic) || hasFlag(declFlags, DeclFlags.Static)) {\n                result += "static " + accessorString;\n            }\n            else {\n                if (hasFlag(declFlags, DeclFlags.Private)) {\n                    result += "private " + accessorString;\n                }\n                else if (hasFlag(declFlags, DeclFlags.Public)) {\n                    result += "public " + accessorString;\n                }\n                else {\n                    if (accessorString == "") {\n                        result += typeString + " ";\n                    } else {\n                        result += accessorString;\n                    }\n                }\n            }\n\n            return result;\n        }\n\n        private emitDeclFlags(declFlags: DeclFlags, typeString: string) {\n            this.declFile.Write(this.getDeclFlagsString(declFlags, typeString));\n        }\n\n        private canEmitTypeAnnotationSignature(declFlag: DeclFlags = DeclFlags.None) {\n            // Private declaration, shouldnt emit type any time.\n            return !hasFlag(declFlag, DeclFlags.Private);\n        }\n\n        private pushDeclarationContainer(ast: AST) {\n            this.declarationContainerStack.push(ast);\n        }\n\n        private popDeclarationContainer(ast: AST) {\n            CompilerDiagnostics.assert(ast != this.getAstDeclarationContainer(), \'Declaration container mismatch\');\n            this.declarationContainerStack.pop();\n        }\n\n        private emitTypeNamesMember(memberName: MemberName, emitIndent? : bool = false) {\n            if (memberName.prefix == "{ ") {\n                if (emitIndent) {\n                    this.emitIndent();\n                }\n                this.declFile.WriteLine("{");\n                this.indenter.increaseIndent();\n                emitIndent = true;\n            } else if (memberName.prefix != "") {\n                if (emitIndent) {\n                    this.emitIndent();\n                }\n                this.declFile.Write(memberName.prefix);\n                emitIndent = false;\n            }\n\n            if (memberName.isString()) {\n                if (emitIndent) {\n                    this.emitIndent();\n                }\n                this.declFile.Write((<MemberNameString>memberName).text);\n            } else {\n                var ar = <MemberNameArray>memberName;\n                for (var index = 0; index < ar.entries.length; index++) {\n                    this.emitTypeNamesMember(ar.entries[index], emitIndent);\n                    if (ar.delim == "; ") {\n                        this.declFile.WriteLine(";");\n                    }\n                }\n            }\n\n            if (memberName.suffix == "}") {\n                this.indenter.decreaseIndent();\n                this.emitIndent();\n                this.declFile.Write(memberName.suffix);\n            } else {\n                this.declFile.Write(memberName.suffix);\n            }\n        }\n\n        private emitTypeSignature(type: Type) {\n            var containingScope: SymbolScope = null';
var v27324 = v27325 + ';\n            var declarationContainerAst = this.getAstDeclarationContainer();\n            switch (declarationContainerAst.nodeType) {\n                case NodeType.ModuleDeclaration:\n                case NodeType.InterfaceDeclaration:\n                case NodeType.FuncDecl:\n                    if (declarationContainerAst.type) {\n                        containingScope = declarationContainerAst.type.containedScope;\n                    }\n                    break;\n\n                case NodeType.Script:\n                    var script = <Script>declarationContainerAst;\n                    if (script.bod) {\n                        containingScope = script.bod.enclosingScope;\n                    }\n                    break;\n\n                case NodeType.ClassDeclaration:\n                    if (declarationContainerAst.type) {\n                        containingScope = declarationContainerAst.type.instanceType.containedScope;\n                    }\n                    break;\n\n                default:\n                    CompilerDiagnostics.debugPrint("Unknown containing scope");\n            }\n\n            var typeNameMembers = type.getScopedTypeNameEx(containingScope);\n            this.emitTypeNamesMember(typeNameMembers);\n        }\n\n        private emitComment(comment: Comment) {\n            var text = comment.getText();\n            if (this.declFile.onNewLine) {\n                this.emitIndent();\n            } else if (!comment.isBlockComment) {\n                this.declFile.WriteLine("");\n                this.emitIndent();\n            }\n            \n            this.declFile.Write(text[0]);\n\n            for (var i = 1; i < text.length; i++) {\n                this.declFile.WriteLine("");\n                this.emitIndent();\n                this.declFile.Write(text[i]);\n            }\n\n            if (comment.endsLine || !comment.isBlockComment) {\n                this.declFile.WriteLine("");\n            } else {\n                this.declFile.Write(" ");\n            }\n        }\n\n        private emitDeclarationComments(ast: AST, endLine?: bool);\n        private emitDeclarationComments(symbol: Symbol, endLine?: bool);\n        private emitDeclarationComments(astOrSymbol, endLine = true) {\n            if (!this.emitOptions.emitComments) {\n                return;\n            }\n\n            var declComments = <Comment[]>astOrSymbol.getDocComments();\n            if (declComments.length > 0) {\n                for (var i = 0; i < declComments.length; i++) {\n                    this.emitComment(declComments[i]);\n                }\n\n                if (endLine) {\n                    if (!this.declFile.onNewLine) {\n                        this.declFile.WriteLine("");\n                    }\n                } else {\n                    if (this.declFile.onNewLine) {\n                        this.emitIndent();\n                    }\n                }\n            }\n        }\n\n        public VarDeclCallback(pre: bool, varDecl: VarDecl): bool {\n            if (pre && this.canEmitSignature(ToDeclFlags(varDecl.varFlags), false)) {\n                var interfaceMember = (this.getAstDeclarationContainer().nodeType == NodeType.InterfaceDeclaration);\n                this.emitDeclarationComments(varDecl);\n                if (!interfaceMember) {\n                    // If it is var list of form var a, b, c = emit it only if count > 0 - which will be when emitting first var\n                    // If it is var list of form  var a = varList count will be 0\n                    if (this.varListCount >= 0) {\n                        this.emitDeclFlags(ToDeclFlags(varDecl.varFlags), "var");\n                        this.varListCount = -this.varListCount;\n                    }\n                    this.declFile.Write(varDecl.id.text);\n                } else {\n                    this.emitIndent();\n                    this.declFile.Write(varDecl.id.text);\n                    if (hasFlag(varDecl.id.flags, ASTFlags.OptionalName)) {\n                        this.declFile.Write("?");\n                    }\n                }\n\n                var type: Type = null;\n                if (varDecl.typeExpr && varDecl.typeExpr.type) {\n                    type = varDecl.typeExpr.type;\n                }\n                else if (varDecl.sym) {\n                    type = (<FieldSymbol>varDecl.sym).getType();\n                    // Dont emit inferred any\n                    if (type == this.checker.anyType) {\n                        type = null;\n                    }\n                }\n\n                if (type && this.canEmitTypeAnnotationSignature(ToDeclFlags(varDecl.varFlags))) {\n                    this.declFile.Write(": ");\n                    this.emitTypeSignature(type);\n                }\n               \n                // emitted one var decl\n                if (this.varListCount > 0) { this.varListCount--; } else if (this.varListCount < 0) { this.varListCount++; }\n\n                // Write ; or ,\n                if (this.varListCount < 0) {\n                    this.declF';
var v27323 = v27324 + 'ile.Write(", ");\n                } else {\n                    this.declFile.WriteLine(";");\n                }\n            }\n            return false;\n        }\n\n        public BlockCallback(pre: bool, block: Block): bool {\n            if (!block.isStatementBlock) {\n                if (pre) {\n                    this.varListCount = block.statements.members.length;\n                } else {\n                    this.varListCount = 0;\n                }\n                return true;\n            }\n            return false;\n        }\n\n        private emitArgDecl(argDecl: ArgDecl, funcDecl: FuncDecl) {\n            this.emitDeclarationComments(argDecl, false);\n            this.declFile.Write(argDecl.id.text);\n            if (argDecl.isOptionalArg()) {\n                this.declFile.Write("?");\n            }\n            if ((argDecl.typeExpr || argDecl.type != this.checker.anyType) &&\n                this.canEmitTypeAnnotationSignature(ToDeclFlags(funcDecl.fncFlags))) {\n                this.declFile.Write(": ");\n                this.emitTypeSignature(argDecl.type);\n            }\n        }\n\n        public FuncDeclCallback(pre: bool, funcDecl: FuncDecl): bool {\n            if (!pre) {\n                return false;\n            }\n\n            if (funcDecl.isAccessor()) {\n                return this.emitPropertyAccessorSignature(funcDecl);\n            }\n\n            var isInterfaceMember = (this.getAstDeclarationContainer().nodeType == NodeType.InterfaceDeclaration);\n            if (funcDecl.bod) {\n                if (funcDecl.isConstructor) {\n                    if (funcDecl.type.construct && funcDecl.type.construct.signatures.length > 1) {\n                        return false;\n                    }\n                } else {\n                    if (funcDecl.type.call && funcDecl.type.call.signatures.length > 1) {\n                        // This means its implementation of overload signature. do not emit\n                        return false;\n                    }\n                }\n            } else if (!isInterfaceMember && hasFlag(funcDecl.fncFlags, FncFlags.Private) && funcDecl.type.call && funcDecl.type.call.signatures.length > 1) {\n                // Print only first overload of private function\n                var signatures = funcDecl.type.call.signatures;\n                var firstSignature = signatures[0].declAST;\n                if (firstSignature.bod) {\n                    // Its a implementation, use next one\n                    firstSignature = signatures[1].declAST;\n                }\n\n                if (firstSignature != funcDecl) {\n                    return false;\n                }\n            }\n\n            if (!this.canEmitSignature(ToDeclFlags(funcDecl.fncFlags), false)) {\n                return false;\n            }\n\n            this.emitDeclarationComments(funcDecl);\n            if (funcDecl.isConstructor) {\n                this.emitIndent();\n                this.declFile.Write("constructor");\n            }\n            else {\n                var id = funcDecl.getNameText();\n                if (!isInterfaceMember) {\n                    this.emitDeclFlags(ToDeclFlags(funcDecl.fncFlags), "function");\n                    this.declFile.Write(id);\n                } else {\n                    this.emitIndent();\n                    if (funcDecl.isConstructMember()) {\n                        this.declFile.Write("new");\n                    } else if (!funcDecl.isCallMember() && !funcDecl.isIndexerMember()) {\n                        this.declFile.Write(id);\n                        if (hasFlag(funcDecl.name.flags, ASTFlags.OptionalName)) {\n                            this.declFile.Write("? ");\n                        }\n                    }\n                }\n            }\n\n            if (!funcDecl.isIndexerMember()) {\n                this.declFile.Write("(");\n            } else {\n                this.declFile.Write("[");\n            }\n\n            this.indenter.increaseIndent();\n\n            if (funcDecl.arguments) {\n                var argsLen = funcDecl.arguments.members.length;\n                if (funcDecl.variableArgList) {\n                    argsLen--;\n                }\n                for (var i = 0; i < argsLen; i++) {\n                    var argDecl = <ArgDecl>funcDecl.arguments.members[i];\n                    this.emitArgDecl(argDecl, funcDecl);\n                    if (i < (argsLen - 1)) {\n                        this.declFile.Write(", ");\n                    }\n                }\n            }\n\n            if (funcDecl.variableArgList) {\n                var lastArg = <ArgDecl>funcDecl.arguments.members[funcDecl.arguments.members.length - 1];\n                if (funcDecl.arguments.members.length > 1) {\n                    this.declFile.Write(", ...");\n                }\n                else {\n                    this.declFile.Write("...");\n                }\n                this.emitArgDecl(lastArg, funcDecl);\n            }\n\n            this.indenter.decreaseIndent();\n\n            if (!funcDecl.isIndexerMember(';
var v27322 = v27323 + ')) {\n                this.declFile.Write(")");\n            } else {\n                this.declFile.Write("]");\n            }\n\n            if (!funcDecl.isConstructor &&\n                (funcDecl.returnTypeAnnotation || funcDecl.signature.returnType.type != this.checker.anyType) &&\n                this.canEmitTypeAnnotationSignature(ToDeclFlags(funcDecl.fncFlags))) {\n                this.declFile.Write(": ");\n                this.emitTypeSignature(funcDecl.signature.returnType.type);\n            }\n\n            this.declFile.WriteLine(";");\n\n            return false;\n        }\n\n        private emitBaseList(bases: ASTList, qual: string) {\n            if (bases && (bases.members.length > 0)) {\n                this.declFile.Write(" " + qual + " ");\n                var basesLen = bases.members.length;\n                for (var i = 0; i < basesLen; i++) {\n                    var baseExpr = bases.members[i];\n                    var baseSymbol = baseExpr.type.symbol;\n                    var baseType = baseExpr.type;\n                    if (i > 0) {\n                        this.declFile.Write(", ");\n                    }\n                    this.emitTypeSignature(baseType);\n                }\n            }\n        }\n\n        private emitPropertyAccessorSignature(funcDecl: FuncDecl) {\n            var accessorSymbol = <FieldSymbol>funcDecl.accessorSymbol;\n            if (accessorSymbol.getter && accessorSymbol.getter.declAST != funcDecl) {\n                // Setter is being used to emit the type info. \n                return false;\n            }\n\n            this.emitDeclarationComments(accessorSymbol);\n            this.emitDeclFlags(ToDeclFlags(accessorSymbol.flags), "var");\n            this.declFile.Write(funcDecl.name.text);\n            var propertyType = accessorSymbol.getType();\n            if (this.canEmitTypeAnnotationSignature(ToDeclFlags(accessorSymbol.flags))) {\n                this.declFile.Write(" : ");\n                this.emitTypeSignature(propertyType);\n            }\n            this.declFile.WriteLine(";");\n\n            return false;\n        }\n\n        private emitClassMembersFromConstructorDefinition(funcDecl: FuncDecl) {\n            if (funcDecl.arguments) {\n                var argsLen = funcDecl.arguments.members.length; if (funcDecl.variableArgList) { argsLen--; }\n\n                for (var i = 0; i < argsLen; i++) {\n                    var argDecl = <ArgDecl>funcDecl.arguments.members[i];\n                    if (hasFlag(argDecl.varFlags, VarFlags.Property)) {\n                        this.emitDeclarationComments(argDecl);\n                        this.emitDeclFlags(ToDeclFlags(argDecl.varFlags), "var");\n                        this.declFile.Write(argDecl.id.text);\n\n                        if (argDecl.typeExpr && this.canEmitTypeAnnotationSignature(ToDeclFlags(argDecl.varFlags))) {\n                            this.declFile.Write(": ");\n                            this.emitTypeSignature(argDecl.type);\n                        }\n                        this.declFile.WriteLine(";");\n                    }\n                }\n            }\n        }\n\n        public ClassDeclarationCallback(pre: bool, classDecl: ClassDeclaration): bool {\n            if (!this.canEmitPrePostAstSignature(ToDeclFlags(classDecl.varFlags), classDecl, pre)) {\n                return false;\n            }\n\n            if (pre) {\n                var className = classDecl.name.text;\n                this.emitDeclarationComments(classDecl);\n                this.emitDeclFlags(ToDeclFlags(classDecl.varFlags), "class");\n                this.declFile.Write(className);\n                this.emitBaseList(classDecl.extendsList, "extends");\n                this.emitBaseList(classDecl.implementsList, "implements");\n                this.declFile.WriteLine(" {");\n\n                this.pushDeclarationContainer(classDecl);\n                this.indenter.increaseIndent();\n                if (classDecl.constructorDecl) {\n                    this.emitClassMembersFromConstructorDefinition(classDecl.constructorDecl);\n                }\n            } else {\n                this.indenter.decreaseIndent();\n                this.popDeclarationContainer(classDecl);\n\n                this.emitIndent();\n                this.declFile.WriteLine("}");\n            }\n\n            return true;\n        }\n\n        public InterfaceDeclarationCallback(pre: bool, interfaceDecl: InterfaceDeclaration): bool {\n            if (!this.canEmitPrePostAstSignature(ToDeclFlags(interfaceDecl.varFlags), interfaceDecl, pre)) {\n                return false;\n            }\n\n            if (pre) {\n                var interfaceName = interfaceDecl.name.text;\n                this.emitDeclarationComments(interfaceDecl);\n                this.emitDeclFlags(ToDeclFlags(interfaceDecl.varFlags), "interface");\n                this.declFile.Write(interfaceName);\n                this.emitBaseList(interfaceDecl.extendsList, "extends");\n                this.declFile.WriteLine(" {");\n\n                this.indenter';
var v27321 = v27322 + '.increaseIndent();\n                this.pushDeclarationContainer(interfaceDecl);\n            } else {\n                this.indenter.decreaseIndent();\n                this.popDeclarationContainer(interfaceDecl);\n\n                this.emitIndent();\n                this.declFile.WriteLine("}");\n            }\n\n            return true;\n        }\n\n        public ImportDeclarationCallback(pre: bool, importDecl: ImportDeclaration): bool {\n            if (pre) {\n                if ((<Script>this.declarationContainerStack[0]).isExternallyVisibleSymbol(importDecl.id.sym)) {\n                    this.emitDeclarationComments(importDecl);\n                    this.emitIndent();\n                    this.declFile.Write("import ");\n\n                    this.declFile.Write(importDecl.id.text + " = ");\n                    if (importDecl.isDynamicImport) {\n                        this.declFile.WriteLine("module (" + importDecl.getAliasName() + ");");\n                    } else {\n                        this.declFile.WriteLine(importDecl.getAliasName() + ";");\n                    }\n                }\n            }\n\n            return false;\n        }\n\n        private emitEnumSignature(moduleDecl: ModuleDeclaration) {\n            if (!this.canEmitSignature(ToDeclFlags(moduleDecl.modFlags))) {\n                return false;\n            }\n\n            this.emitDeclarationComments(moduleDecl);\n            this.emitDeclFlags(ToDeclFlags(moduleDecl.modFlags), "enum");\n            this.declFile.WriteLine(moduleDecl.name.text + " {");\n\n            this.indenter.increaseIndent();\n            var membersLen = moduleDecl.members.members.length;\n            for (var j = 1; j < membersLen; j++) {\n                var memberDecl: AST = moduleDecl.members.members[j];\n                if (memberDecl.nodeType == NodeType.VarDecl) {\n                    this.emitDeclarationComments(memberDecl);\n                    this.emitIndent();\n                    this.declFile.WriteLine((<VarDecl>memberDecl).id.text + ",");\n                } else {\n                    CompilerDiagnostics.assert(memberDecl.nodeType != NodeType.Asg, "We want to catch this");\n                }\n            }\n            this.indenter.decreaseIndent();\n\n            this.emitIndent();\n            this.declFile.WriteLine("}");\n\n            return false;\n        }\n\n        public ModuleDeclarationCallback(pre: bool, moduleDecl: ModuleDeclaration): bool {\n            if (hasFlag(moduleDecl.modFlags, ModuleFlags.IsWholeFile)) {\n                // This is dynamic modules and we are going to outputing single file, \n                // we need to change the declFile because dynamic modules are always emitted to their corresponding .d.ts\n                if (hasFlag(moduleDecl.modFlags, ModuleFlags.IsDynamic)) {\n                    if (pre) {\n                        if (!this.emitOptions.outputMany) {\n                            this.singleDeclFile = this.declFile;\n                            CompilerDiagnostics.assert(this.indenter.indentAmt == 0, "Indent has to be 0 when outputing new file");\n                            // Create new file\n                            var declareFileName = this.emitOptions.mapOutputFileName(stripQuotes(moduleDecl.name.sym.name), TypeScriptCompiler.mapToDTSFileName);\n                            var useUTF8InOutputfile = moduleDecl.containsUnicodeChar || (this.emitOptions.emitComments && moduleDecl.containsUnicodeCharInComment);\n                            try {\n                                // Creating files can cause exceptions, report them.   \n                                this.declFile = new DeclFileWriter(this.emitOptions.ioHost.createFile(declareFileName, useUTF8InOutputfile));\n                            } catch (ex) {\n                                this.errorReporter.emitterError(null, ex.message);\n                            }\n                        }\n                        this.pushDeclarationContainer(moduleDecl);\n                    } else {\n                        if (!this.emitOptions.outputMany) {\n                            CompilerDiagnostics.assert(this.singleDeclFile != this.declFile, "singleDeclFile cannot be null as we are going to revert back to it");\n                            CompilerDiagnostics.assert(this.indenter.indentAmt == 0, "Indent has to be 0 when outputing new file");\n                            try {\n                                // Closing files could result in exceptions, report them if they occur\n                                this.declFile.Close();\n                            } catch (ex) {\n                                this.errorReporter.emitterError(null, ex.message);\n                            }\n                            this.declFile = this.singleDeclFile;\n                        }\n                        this.popDeclarationContainer(moduleDecl);\n                    }\n                }\n\n                return true;\n            }\n\n            if (moduleDecl.isEnum()) {\n                if (pre) {\n           ';
var v27320 = v27321 + '         this.emitEnumSignature(moduleDecl);\n                }\n                return false;\n            }\n\n            if (!this.canEmitPrePostAstSignature(ToDeclFlags(moduleDecl.modFlags), moduleDecl, pre)) {\n                return false;\n            }\n\n            if (pre) {\n                if (this.emitDottedModuleName()) {\n                    this.dottedModuleEmit += ".";\n                } else {\n                    this.dottedModuleEmit = this.getDeclFlagsString(ToDeclFlags(moduleDecl.modFlags), "module");\n                }\n                this.dottedModuleEmit += moduleDecl.name.text;\n\n                var isCurrentModuleDotted = (moduleDecl.members.members.length == 1 &&\n                    moduleDecl.members.members[0].nodeType == NodeType.ModuleDeclaration &&\n                    !(<ModuleDeclaration>moduleDecl.members.members[0]).isEnum() &&\n                    hasFlag((<ModuleDeclaration>moduleDecl.members.members[0]).modFlags, ModuleFlags.Exported));\n\n                // Module is dotted only if it does not have doc comments for it\n                var moduleDeclComments = moduleDecl.getDocComments();\n                isCurrentModuleDotted = isCurrentModuleDotted && (moduleDeclComments == null || moduleDeclComments.length == 0);\n\n                this.isDottedModuleName.push(isCurrentModuleDotted);\n                this.pushDeclarationContainer(moduleDecl);\n\n                if (!isCurrentModuleDotted) {\n                    this.emitDeclarationComments(moduleDecl);\n                    this.declFile.Write(this.dottedModuleEmit);\n                    this.declFile.WriteLine(" {");\n                    this.indenter.increaseIndent();\n                }\n            } else {\n                if (!this.emitDottedModuleName()) {\n                    this.indenter.decreaseIndent();\n                    this.emitIndent();\n                    this.declFile.WriteLine("}");\n                }\n                this.popDeclarationContainer(moduleDecl);\n                this.isDottedModuleName.pop();\n            }\n\n            return true;\n        }\n\n        public ScriptCallback(pre: bool, script: Script): bool {\n            if (pre) {\n                if (this.emitOptions.outputMany) {\n                    for (var i = 0; i < script.referencedFiles.length; i++) {\n                        var referencePath = script.referencedFiles[i].path;\n                        var declareFileName: string;\n                        if (isRooted(referencePath)) {\n                            declareFileName = this.emitOptions.mapOutputFileName(referencePath, TypeScriptCompiler.mapToDTSFileName)\n                        } else {\n                            declareFileName = getDeclareFilePath(script.referencedFiles[i].path);\n                        }\n                        this.declFile.WriteLine(\'/// <reference path="\' + declareFileName + \'" />\');\n                    }\n                }\n                this.pushDeclarationContainer(script);\n            }\n            else {\n                this.popDeclarationContainer(script);\n            }\n            return true;\n        }\n\n        public DefaultCallback(pre: bool, ast: AST): bool {\n            return !hasFlag(ast.flags, ASTFlags.IsStatement);\n        }\n    }\n}//\n// Copyright (c) Microsoft Corporation.  All rights reserved.\n// \n// Licensed under the Apache License, Version 2.0 (the "License");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an "AS IS" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n\n///<reference path=\'typescript.ts\' />\n\nmodule TypeScript {\n    export module CompilerDiagnostics {\n        export var debug = false;\n        export interface IDiagnosticWriter {\n            Alert(output: string): void;\n        }\n\n        export var diagnosticWriter: IDiagnosticWriter = null;\n\n        export var analysisPass: number = 0;\n\n        export function Alert(output: string) {\n            if (diagnosticWriter) {\n                diagnosticWriter.Alert(output);\n            }\n        }\n\n        export function debugPrint(s: string) {\n            if (debug) {\n                Alert(s);\n            }\n        }\n\n        export function assert(condition: bool, s: string) {\n            if (debug) {\n                if (!condition) {\n                    Alert(s);\n                }\n            }\n        }\n\n    }\n\n    export interface ILogger {\n        information(): bool;\n        debug(): bool;\n        warning(): bool;\n        error(): bool;\n        fatal(): bool;\n        log(s: string): void;\n    }\n\n    export class NullLogger implements ILogger {\n        public information(): bool { return false; }\n        public debug(): bool { r';
var v27319 = v27320 + 'eturn false; }\n        public warning(): bool { return false; }\n        public error(): bool { return false; }\n        public fatal(): bool { return false; }\n        public log(s: string): void {\n        }\n    }\n\n    export class LoggerAdapter implements ILogger {\n        private _information: bool;\n        private _debug: bool;\n        private _warning: bool;\n        private _error: bool;\n        private _fatal: bool;\n\n        constructor (public logger: ILogger) { \n            this._information = this.logger.information();\n            this._debug = this.logger.debug();\n            this._warning = this.logger.warning();\n            this._error = this.logger.error();\n            this._fatal = this.logger.fatal();\n        }\n\n\n        public information(): bool { return this._information; }\n        public debug(): bool { return this._debug; }\n        public warning(): bool { return this._warning; }\n        public error(): bool { return this._error; }\n        public fatal(): bool { return this._fatal; }\n        public log(s: string): void {\n            this.logger.log(s);\n        }\n    }\n\n    export class BufferedLogger implements ILogger {\n        public logContents = [];\n\n        public information(): bool { return false; }\n        public debug(): bool { return false; }\n        public warning(): bool { return false; }\n        public error(): bool { return false; }\n        public fatal(): bool { return false; }\n        public log(s: string): void {\n            this.logContents.push(s);\n        }\n    }\n\n    export function timeFunction(logger: ILogger, funcDescription: string, func: () =>any): any {\n        var start = +new Date();\n        var result = func();\n        var end = +new Date();\n        logger.log(funcDescription + " completed in " + (end - start) + " msec");\n        return result;\n    }\n\n    export function stringToLiteral(value: string, length: number): string {\n        var result = "";\n\n        var addChar = (index: number) => {\n            var ch = value.charCodeAt(index);\n            switch (ch) {\n                case 0x09: // tab\n                    result += "\\\\t";\n                    break;\n                case 0x0a: // line feed\n                    result += "\\\\n";\n                    break;\n                case 0x0b: // vertical tab\n                    result += "\\\\v";\n                    break;\n                case 0x0c: // form feed\n                    result += "\\\\f";\n                    break;\n                case 0x0d: // carriage return\n                    result += "\\\\r";\n                    break;\n                case 0x22:  // double quote\n                    result += "\\\\\\"";\n                    break;\n                case 0x27: // single quote\n                    result += "\\\\\\\'";\n                    break;\n                case 0x5c: // Backslash\n                    result += "\\\\";\n                    break;\n                default:\n                    result += value.charAt(index);\n            }\n        }\n\n        var tooLong = (value.length > length);\n        if (tooLong) {\n            var mid = length >> 1;\n            for (var i = 0; i < mid; i++) addChar(i);\n            result += "(...)";\n            for (var i = value.length - mid; i < value.length; i++) addChar(i);\n        }\n        else {\n            length = value.length;\n            for (var i = 0; i < length; i++) addChar(i);\n        }\n        return result;\n    }\n}\n//\n// Copyright (c) Microsoft Corporation.  All rights reserved.\n// \n// Licensed under the Apache License, Version 2.0 (the "License");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an "AS IS" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n\n///<reference path=\'typescript.ts\' />\n\nmodule TypeScript {\n\n    export enum EmitContainer {\n        Prog,\n        Module,\n        DynamicModule,\n        Class,\n        Constructor,\n        Function,\n        Args,\n        Interface,\n    }\n\n    export class EmitState {\n        public column: number;\n        public line: number;\n        public pretty: bool;\n        public inObjectLiteral: bool;\n        public container: EmitContainer;\n\n        constructor () {\n            this.column = 0;\n            this.line = 0;\n            this.pretty = false;\n            this.inObjectLiteral = false;\n            this.container = EmitContainer.Prog;\n        }\n    }\n\n    export class EmitOptions {\n        public minWhitespace: bool;\n        public propagateConstants: bool;\n        public emitComments: bool;\n        public outputOption: string;\n        public ioHost: EmitterIOHost = null;\n        public outputMany: bool = true;\n        public commonDirectoryPath';
var v27318 = v27319 + ' = "";\n\n        constructor(settings: CompilationSettings) {\n            this.minWhitespace = settings.minWhitespace;\n            this.propagateConstants = settings.propagateConstants;\n            this.emitComments = settings.emitComments;\n            this.outputOption = settings.outputOption;\n        }\n\n        public mapOutputFileName(fileName: string, extensionChanger: (fname: string, wholeFileNameReplaced: bool) => string) {\n            if (this.outputMany) {\n                var updatedFileName = fileName;\n                if (this.outputOption != "") {\n                    // Replace the common directory path with the option specified\n                    updatedFileName = fileName.replace(this.commonDirectoryPath, "");\n                    updatedFileName = this.outputOption + updatedFileName;\n                }\n                return extensionChanger(updatedFileName, false);\n            } else {\n                return extensionChanger(this.outputOption, true);\n            }\n        }\n    }\n\n    export class Indenter {\n        static indentStep : number = 4;\n        static indentStepString : string = "    ";\n        static indentStrings: string[] = [];\n        public indentAmt: number = 0;\n\n        public increaseIndent() {\n            this.indentAmt += Indenter.indentStep;\n        }\n\n        public decreaseIndent() {\n            this.indentAmt -= Indenter.indentStep;\n        }\n\n        public getIndent() {\n            var indentString = Indenter.indentStrings[this.indentAmt];\n            if (indentString === undefined) {\n                indentString = "";\n                for (var i = 0; i < this.indentAmt; i = i + Indenter.indentStep) {\n                    indentString += Indenter.indentStepString;\n                }\n                Indenter.indentStrings[this.indentAmt] = indentString;\n            }\n            return indentString;\n        }\n    }\n\n    export class Emitter {\n        public prologueEmitted = false;\n        public thisClassNode: TypeDeclaration = null;\n        public thisFnc: FuncDecl = null;\n        public moduleDeclList: ModuleDeclaration[] = [];\n        public moduleName = "";\n        public emitState = new EmitState();\n        public indenter = new Indenter();\n        public ambientModule = false;\n        public modAliasId: string = null;\n        public firstModAlias: string = null;\n        public allSourceMappers: SourceMapper[] = [];\n        public sourceMapper: SourceMapper = null;\n        public captureThisStmtString = "var _this = this;";\n        private varListCountStack: number[] = [0]; \n\n        constructor(public checker: TypeChecker, public emittingFileName: string, public outfile: ITextWriter, public emitOptions: EmitOptions, public errorReporter: ErrorReporter) {\n        }\n\n        public setSourceMappings(mapper: SourceMapper) {\n            this.allSourceMappers.push(mapper);\n            this.sourceMapper = mapper;\n        }\n\n        public writeToOutput(s: string) {\n            this.outfile.Write(s);\n            // TODO: check s for newline\n            this.emitState.column += s.length;\n        }\n\n        public writeToOutputTrimmable(s: string) {\n            if (this.emitOptions.minWhitespace) {\n                s = s.replace(/[\\s]*/g, \'\');\n            }\n            this.writeToOutput(s);\n        }\n\n        public writeLineToOutput(s: string) {\n            if (this.emitOptions.minWhitespace) {\n                this.writeToOutput(s);\n                var c = s.charCodeAt(s.length - 1);\n                if (!((c == LexCodeSpace) || (c == LexCodeSMC) || (c == LexCodeLBR))) {\n                    this.writeToOutput(\' \');\n                }\n            }\n            else {\n                this.outfile.WriteLine(s);\n                this.emitState.column = 0\n                this.emitState.line++;\n            }\n        }\n\n        public writeCaptureThisStatement(ast: AST) {\n            this.emitIndent();\n            this.recordSourceMappingStart(ast);\n            this.writeToOutput(this.captureThisStmtString);\n            this.recordSourceMappingEnd(ast);\n            this.writeLineToOutput("");\n        }\n\n        public setInVarBlock(count: number) {\n            this.varListCountStack[this.varListCountStack.length - 1] = count;\n        }\n\n        public setInObjectLiteral(val: bool): bool {\n            var temp = this.emitState.inObjectLiteral;\n            this.emitState.inObjectLiteral = val;\n            return temp;\n        }\n\n        public setContainer(c: number): number {\n            var temp = this.emitState.container;\n            this.emitState.container = c;\n            return temp;\n        }\n\n        private getIndentString() {\n            if (this.emitOptions.minWhitespace) {\n                return "";\n            }\n            else {\n                return this.indenter.getIndent();\n            }\n        }\n\n        public emitIndent() {\n            this.writeToOutput(this.getIndentString());\n        }\n\n        public emitCommentInPlace(comment: Comment) {\n            var tex';
var v27317 = v27318 + 't = comment.getText();\n            var hadNewLine = false;\n\n            if (comment.isBlockComment) {\n                if (this.emitState.column == 0) {\n                    this.emitIndent();\n                }\n                this.recordSourceMappingStart(comment);\n                this.writeToOutput(text[0]);\n\n                if (text.length > 1 || comment.endsLine) {\n                    for (var i = 1; i < text.length; i++) {\n                        this.writeLineToOutput("");\n                        this.emitIndent();\n                        this.writeToOutput(text[i]);\n                    }\n                    this.recordSourceMappingEnd(comment);\n                    this.writeLineToOutput("");\n                    hadNewLine = true;\n                } else {\n                    this.recordSourceMappingEnd(comment);\n                }\n            }\n            else {\n                if (this.emitState.column == 0) {\n                    this.emitIndent();\n                }\n                this.recordSourceMappingStart(comment);\n                this.writeToOutput(text[0]);\n                this.recordSourceMappingEnd(comment);\n                this.writeLineToOutput("");\n                hadNewLine = true;\n            }\n\n            if (hadNewLine) {\n                this.emitIndent();\n            }\n            else {\n                this.writeToOutput(" ");\n            }\n        }\n\n        public emitParensAndCommentsInPlace(ast: AST, pre: bool) {\n            var comments = pre ? ast.preComments : ast.postComments;\n\n            // comments should be printed before the LParen, but after the RParen\n            if (ast.isParenthesized && !pre) {\n                this.writeToOutput(")");\n            }\n            if (this.emitOptions.emitComments && comments && comments.length != 0) {\n                for (var i = 0; i < comments.length; i++) {\n                    this.emitCommentInPlace(comments[i]);\n                }\n            }\n            if (ast.isParenthesized && pre) {\n                this.writeToOutput("(");\n            }\n        }\n\n        // TODO: emit accessor pattern\n        public emitObjectLiteral(content: ASTList) {\n            this.writeLineToOutput("{");\n            this.indenter.increaseIndent();\n            var inObjectLiteral = this.setInObjectLiteral(true);\n            this.emitJavascriptList(content, ",", TokenID.Comma, true, false, false);\n            this.setInObjectLiteral(inObjectLiteral);\n            this.indenter.decreaseIndent();\n            this.emitIndent();\n            this.writeToOutput("}");\n        }\n\n        public emitArrayLiteral(content: ASTList) {\n            this.writeToOutput("[");\n            if (content) {\n                this.writeLineToOutput("");\n                this.indenter.increaseIndent();\n                this.emitJavascriptList(content, ", ", TokenID.Comma, true, false, false);\n                this.indenter.decreaseIndent();\n                this.emitIndent();\n            }\n            this.writeToOutput("]");\n        }\n\n        public emitNew(target: AST, args: ASTList) {\n            this.writeToOutput("new ");\n            if (target.nodeType == NodeType.TypeRef) {\n                var typeRef = <TypeReference>target;\n                if (typeRef.arrayCount) {\n                    this.writeToOutput("Array()");\n                }\n                else {\n                    this.emitJavascript(typeRef.term, TokenID.Tilde, false);\n                    this.writeToOutput("()");\n                }\n            }\n            else {\n                this.emitJavascript(target, TokenID.Tilde, false);\n                this.recordSourceMappingStart(args);\n                this.writeToOutput("(");\n                this.emitJavascriptList(args, ", ", TokenID.Comma, false, false, false);\n                this.writeToOutput(")");\n                this.recordSourceMappingEnd(args);\n            }\n        }\n\n        public tryEmitConstant(dotExpr: BinaryExpression) {\n            if (!this.emitOptions.propagateConstants) {\n                return false;\n            }\n            var propertyName = <Identifier>dotExpr.operand2;\n            if (propertyName && propertyName.sym && propertyName.sym.isVariable()) {\n                if (hasFlag(propertyName.sym.flags, SymbolFlags.Constant)) {\n                    if (propertyName.sym.declAST) {\n                        var boundDecl = <BoundDecl>propertyName.sym.declAST;\n                        if (boundDecl.init && (boundDecl.init.nodeType == NodeType.NumberLit)) {\n                            var numLit = <NumberLiteral>boundDecl.init;\n                            this.writeToOutput(numLit.value.toString());\n                            var comment = " /* ";\n                            comment += propertyName.actualText;\n                            comment += " */ ";\n                            this.writeToOutput(comment);\n                            return true;\n                        }\n                    }\n                }\n            }\n            ret';
var v27316 = v27317 + 'urn false;\n        }\n\n        public emitCall(callNode: CallExpression, target: AST, args: ASTList) {\n            if (!this.emitSuperCall(callNode)) {\n                if (!hasFlag(callNode.flags, ASTFlags.ClassBaseConstructorCall)) {\n                    if (target.nodeType == NodeType.FuncDecl && !target.isParenthesized) {\n                        this.writeToOutput("(");\n                    }\n                    if (callNode.target.nodeType == NodeType.Super && this.emitState.container == EmitContainer.Constructor) {\n                        this.writeToOutput("_super.call");\n                    }\n                    else {\n                        this.emitJavascript(target, TokenID.OpenParen, false);\n                    }\n                    if (target.nodeType == NodeType.FuncDecl && !target.isParenthesized) {\n                        this.writeToOutput(")");\n                    }\n                    this.recordSourceMappingStart(args);\n                    this.writeToOutput("(");\n                    if (callNode.target.nodeType == NodeType.Super && this.emitState.container == EmitContainer.Constructor) {\n                        this.writeToOutput("this");\n                        if (args && args.members.length) {\n                            this.writeToOutput(", ");\n                        }\n                    }\n                    this.emitJavascriptList(args, ", ", TokenID.Comma, false, false, false);\n                    this.writeToOutput(")");\n                    this.recordSourceMappingEnd(args);\n                }\n                else {\n                    this.indenter.decreaseIndent();\n                    this.indenter.decreaseIndent();\n                    var constructorCall = new ASTList();\n                    constructorCall.members[0] = callNode;\n                    this.emitConstructorCalls(constructorCall, this.thisClassNode);\n                    this.indenter.increaseIndent();\n                    this.indenter.increaseIndent();\n                }\n            }\n        }\n\n        public emitConstructorCalls(bases: ASTList, classDecl: TypeDeclaration) {\n            if (bases == null) {\n                return;\n            }\n            var basesLen = bases.members.length;\n            this.recordSourceMappingStart(classDecl);\n            for (var i = 0; i < basesLen; i++) {\n                var baseExpr = bases.members[i];\n                var baseSymbol: Symbol = null;\n                if (baseExpr.nodeType == NodeType.Call) {\n                    baseSymbol = (<CallExpression>baseExpr).target.type.symbol;\n                }\n                else {\n                    baseSymbol = baseExpr.type.symbol;\n                }\n                var baseName = baseSymbol.name;\n                if (baseSymbol.declModule != classDecl.type.symbol.declModule) {\n                    baseName = baseSymbol.fullName();\n                }\n                if (baseExpr.nodeType == NodeType.Call) {\n                    this.emitIndent();\n                    this.writeToOutput("_super.call(this");\n                    var args = (<CallExpression>baseExpr).arguments;\n                    if (args && (args.members.length > 0)) {\n                        this.writeToOutput(", ");\n                        this.emitJavascriptList(args, ", ", TokenID.Comma, false, false, false);\n                    }\n                    this.writeToOutput(")");\n                }\n                else {\n                    if (baseExpr.type && (baseExpr.type.isClassInstance())) {\n                        // parameterless constructor call;\n                        this.emitIndent();\n                        this.writeToOutput(classDecl.name.actualText + "._super.constructor");\n                        //emitJavascript(baseExpr,TokenID.LParen,false);\n                        this.writeToOutput(".call(this)");\n                    }\n                }\n            }\n            this.recordSourceMappingEnd(classDecl);\n        }\n\n        public emitInnerFunction(funcDecl: FuncDecl, printName: bool, isMember: bool,\n            bases: ASTList, hasSelfRef: bool, classDecl: TypeDeclaration) {\n            /// REVIEW: The code below causes functions to get pushed to a newline in cases where they shouldn\'t\n            /// such as: \n            ///     Foo.prototype.bar = \n            ///         function() {\n            ///         };\n            /// Once we start emitting comments, we should pull this code out to place on the outer context where the function\n            /// is used.\n            //if (funcDecl.preComments!=null && funcDecl.preComments.length>0) {\n            //    this.writeLineToOutput("");\n            //    this.increaseIndent();\n            //    emitIndent();\n            //}\n\n            var isClassConstructor = funcDecl.isConstructor && hasFlag(funcDecl.fncFlags, FncFlags.ClassMethod);\n            var hasNonObjectBaseType = isClassConstructor && hasFlag(this.thisClassNode.type.instanceType.typeFlags, TypeFlags.HasBaseType) && !hasFlag(this.thisClassNode.';
var v27315 = v27316 + 'type.instanceType.typeFlags, TypeFlags.HasBaseTypeOfObject);\n            var classPropertiesMustComeAfterSuperCall = hasNonObjectBaseType && hasFlag((<ClassDeclaration>this.thisClassNode).varFlags, VarFlags.ClassSuperMustBeFirstCallInConstructor);\n\n            // We have no way of knowing if the current function is used as an expression or a statement, so as to enusre that the emitted\n            // JavaScript is always valid, add an extra parentheses for unparenthesized function expressions\n            var shouldParenthesize = hasFlag(funcDecl.fncFlags, FncFlags.IsFunctionExpression) && !funcDecl.isParenthesized && !funcDecl.isAccessor() && (hasFlag(funcDecl.flags, ASTFlags.ExplicitSemicolon) || hasFlag(funcDecl.flags, ASTFlags.AutomaticSemicolon));\n\n            this.emitParensAndCommentsInPlace(funcDecl, true);\n            if (shouldParenthesize) {\n                this.writeToOutput("(");\n            }\n            this.recordSourceMappingStart(funcDecl);\n            if (!(funcDecl.isAccessor() && (<FieldSymbol>funcDecl.accessorSymbol).isObjectLitField)) {\n                this.writeToOutput("function ");\n            }\n            if (printName) {\n                var id = funcDecl.getNameText();\n                if (id && !funcDecl.isAccessor()) {\n                    if (funcDecl.name) {\n                        this.recordSourceMappingStart(funcDecl.name);\n                    }\n                    this.writeToOutput(id);\n                    if (funcDecl.name) {\n                        this.recordSourceMappingEnd(funcDecl.name);\n                    }\n                }\n            }\n\n            this.writeToOutput("(");\n            var argsLen = 0;\n            var i = 0;\n            var arg: ArgDecl;\n            var defaultArgs: ArgDecl[] = [];\n            if (funcDecl.arguments) {\n                var tempContainer = this.setContainer(EmitContainer.Args);\n                argsLen = funcDecl.arguments.members.length;\n                var printLen = argsLen;\n                if (funcDecl.variableArgList) {\n                    printLen--;\n                }\n                for (i = 0; i < printLen; i++) {\n                    arg = <ArgDecl>funcDecl.arguments.members[i];\n                    if (arg.init) {\n                        defaultArgs.push(arg);\n                    }\n                    this.emitJavascript(arg, TokenID.OpenParen, false);\n                    if (i < (printLen - 1)) {\n                        this.writeToOutput(", ");\n                    }\n                }\n                this.setContainer(tempContainer);\n            }\n            this.writeLineToOutput(") {");\n\n            if (funcDecl.isConstructor) {\n                this.recordSourceMappingNameStart("constructor");\n            } else if (funcDecl.isGetAccessor()) {\n                this.recordSourceMappingNameStart("get_" + funcDecl.getNameText());\n            } else if (funcDecl.isSetAccessor()) {\n                this.recordSourceMappingNameStart("set_" + funcDecl.getNameText());\n            } else {\n                this.recordSourceMappingNameStart(funcDecl.getNameText());\n            }\n            this.indenter.increaseIndent();\n\n            // set default args first\n            for (i = 0; i < defaultArgs.length; i++) {\n                var arg = defaultArgs[i];\n                this.emitIndent();\n                this.recordSourceMappingStart(arg);\n                this.writeToOutput("if (typeof " + arg.id.actualText + " === \\"undefined\\") { ");//\n                this.recordSourceMappingStart(arg.id);\n                this.writeToOutput(arg.id.actualText);\n                this.recordSourceMappingEnd(arg.id);\n                this.writeToOutput(" = ");\n                this.emitJavascript(arg.init, TokenID.OpenParen, false);\n                this.writeLineToOutput("; }")\n                this.recordSourceMappingEnd(arg);\n            }\n\n            if (funcDecl.isConstructor && ((<ClassDeclaration>funcDecl.classDecl).varFlags & VarFlags.MustCaptureThis)) {\n                this.writeCaptureThisStatement(funcDecl);\n            }\n\n            if (funcDecl.isConstructor && !classPropertiesMustComeAfterSuperCall) {\n                if (funcDecl.arguments) {\n                    argsLen = funcDecl.arguments.members.length;\n                    for (i = 0; i < argsLen; i++) {\n                        arg = <ArgDecl>funcDecl.arguments.members[i];\n                        if ((arg.varFlags & VarFlags.Property) != VarFlags.None) {\n                            this.emitIndent();\n                            this.recordSourceMappingStart(arg);\n                            this.recordSourceMappingStart(arg.id);\n                            this.writeToOutput("this." + arg.id.actualText);\n                            this.recordSourceMappingEnd(arg.id);\n                            this.writeToOutput(" = ");\n                            this.recordSourceMappingStart(arg.id);\n                            this.writeToOutput(arg.id.actualText);\n                            this.re';
var v27314 = v27315 + 'cordSourceMappingEnd(arg.id);\n                            this.writeLineToOutput(";");\n                            this.recordSourceMappingEnd(arg);\n                        }\n                    }\n                }\n\n                // For classes, the constructor needs to be explicitly called\n                if (!hasFlag(funcDecl.fncFlags, FncFlags.ClassMethod)) {\n                    this.emitConstructorCalls(bases, classDecl);\n                }\n            }\n            if (hasSelfRef) {\n                this.writeCaptureThisStatement(funcDecl);\n            }\n            if (funcDecl.variableArgList) {\n                argsLen = funcDecl.arguments.members.length;\n                var lastArg = <ArgDecl>funcDecl.arguments.members[argsLen - 1];\n                this.emitIndent();\n                this.recordSourceMappingStart(lastArg);\n                this.writeToOutput("var ");\n                this.recordSourceMappingStart(lastArg.id);\n                this.writeToOutput(lastArg.id.actualText);\n                this.recordSourceMappingEnd(lastArg.id);\n                this.writeLineToOutput(" = [];");\n                this.recordSourceMappingEnd(lastArg);\n                this.emitIndent();\n                this.writeToOutput("for (")\n                this.recordSourceMappingStart(lastArg);\n                this.writeToOutput("var _i = 0;");\n                this.recordSourceMappingEnd(lastArg);\n                this.writeToOutput(" ");\n                this.recordSourceMappingStart(lastArg);\n                this.writeToOutput("_i < (arguments.length - " + (argsLen - 1) + ")");\n                this.recordSourceMappingEnd(lastArg);\n                this.writeToOutput("; ");\n                this.recordSourceMappingStart(lastArg);\n                this.writeToOutput("_i++");\n                this.recordSourceMappingEnd(lastArg);\n                this.writeLineToOutput(") {");\n                this.indenter.increaseIndent();\n                this.emitIndent();\n\n                this.recordSourceMappingStart(lastArg);\n                this.writeToOutput(lastArg.id.actualText + "[_i] = arguments[_i + " + (argsLen - 1) + "];");\n                this.recordSourceMappingEnd(lastArg);\n                this.writeLineToOutput("");\n                this.indenter.decreaseIndent();\n                this.emitIndent();\n                this.writeLineToOutput("}");\n            }\n\n            // if it\'s a class, emit the uninitializedMembers, first emit the non-proto class body members\n            if (funcDecl.isConstructor && hasFlag(funcDecl.fncFlags, FncFlags.ClassMethod) && !classPropertiesMustComeAfterSuperCall) {\n\n                var nProps = (<ASTList>this.thisClassNode.members).members.length;\n\n                for (var i = 0; i < nProps; i++) {\n                    if ((<ASTList>this.thisClassNode.members).members[i].nodeType == NodeType.VarDecl) {\n                        var varDecl = <VarDecl>(<ASTList>this.thisClassNode.members).members[i];\n                        if (!hasFlag(varDecl.varFlags, VarFlags.Static) && varDecl.init) {\n                            this.emitIndent();\n                            this.emitJavascriptVarDecl(varDecl, TokenID.Tilde);\n                            this.writeLineToOutput("");\n                        }\n                    }\n                }\n                //this.writeLineToOutput("");\n            }\n\n            this.emitBareJavascriptStatements(funcDecl.bod, classPropertiesMustComeAfterSuperCall);\n\n            this.indenter.decreaseIndent();\n            this.emitIndent();\n            this.recordSourceMappingStart(funcDecl.endingToken);\n            this.writeToOutput("}");\n\n            this.recordSourceMappingNameEnd();\n            this.recordSourceMappingEnd(funcDecl.endingToken);\n            this.recordSourceMappingEnd(funcDecl);\n\n            if (shouldParenthesize) {\n                this.writeToOutput(")");\n            }\n\n            // The extra call is to make sure the caller\'s funcDecl end is recorded, since caller wont be able to record it\n            this.recordSourceMappingEnd(funcDecl);\n\n            this.emitParensAndCommentsInPlace(funcDecl, false);\n\n            if (!isMember &&\n                //funcDecl.name != null &&\n                !hasFlag(funcDecl.fncFlags, FncFlags.IsFunctionExpression) &&\n                (hasFlag(funcDecl.fncFlags, FncFlags.Definition) || funcDecl.isConstructor)) {\n                this.writeLineToOutput("");\n            } else if (hasFlag(funcDecl.fncFlags, FncFlags.IsFunctionExpression)) {\n                if (hasFlag(funcDecl.flags, ASTFlags.ExplicitSemicolon) || hasFlag(funcDecl.flags, ASTFlags.AutomaticSemicolon)) {\n                    // If either of these two flags are set, then the function expression is a statement. Terminate it.\n                    this.writeLineToOutput(";");\n                }\n            }\n            /// TODO: See the other part of this at the beginning of function\n            //if (funcDecl.preComments!=null && funcDecl.preComments.length>0) {\n  ';
var v27313 = v27314 + '          //    this.decreaseIndent();\n            //}           \n        }\n\n        public emitJavascriptModule(moduleDecl: ModuleDeclaration) {\n            var modName = moduleDecl.name.actualText;\n            if (isTSFile(modName)) {\n                moduleDecl.name.setText(modName.substring(0, modName.length - 3));\n            }\n            else if (isSTRFile(modName)) {\n                moduleDecl.name.setText(modName.substring(0, modName.length - 4));\n            }\n\n            if (!hasFlag(moduleDecl.modFlags, ModuleFlags.Ambient)) {\n                var isDynamicMod = hasFlag(moduleDecl.modFlags, ModuleFlags.IsDynamic);\n                var prevOutFile = this.outfile;\n                var prevOutFileName = this.emittingFileName;\n                var prevAllSourceMappers = this.allSourceMappers;\n                var prevSourceMapper = this.sourceMapper;\n                var prevColumn = this.emitState.column;\n                var prevLine = this.emitState.line;\n                var temp = this.setContainer(EmitContainer.Module);\n                var svModuleName = this.moduleName;\n                var isExported = hasFlag(moduleDecl.modFlags, ModuleFlags.Exported);\n                this.moduleDeclList[this.moduleDeclList.length] = moduleDecl;\n                var isWholeFile = hasFlag(moduleDecl.modFlags, ModuleFlags.IsWholeFile);\n                this.moduleName = moduleDecl.name.actualText;\n\n                // prologue\n                if (isDynamicMod) {\n                    // create the new outfile for this module\n                    var tsModFileName = stripQuotes(moduleDecl.name.actualText);\n                    var modFilePath = trimModName(tsModFileName) + ".js";\n                    modFilePath = this.emitOptions.mapOutputFileName(modFilePath, TypeScriptCompiler.mapToJSFileName);\n\n                    if (this.emitOptions.ioHost) {\n                        // Ensure that the slashes are normalized so that the comparison is fair\n                        // REVIEW: Note that modFilePath is normalized to forward slashes in Parser.parse, so the \n                        // first call to switchToForwardSlashes is technically a no-op, but it will prevent us from\n                        // regressing if the parser changes\n                        if (switchToForwardSlashes(modFilePath) != switchToForwardSlashes(this.emittingFileName)) {\n                            this.emittingFileName = modFilePath;\n                            var useUTF8InOutputfile = moduleDecl.containsUnicodeChar || (this.emitOptions.emitComments && moduleDecl.containsUnicodeCharInComment);\n                            this.outfile = this.createFile(this.emittingFileName, useUTF8InOutputfile);\n                            if (prevSourceMapper != null) {\n                                this.allSourceMappers = [];\n                                var sourceMappingFile = this.createFile(this.emittingFileName + SourceMapper.MapFileExtension, false);\n                                this.setSourceMappings(new TypeScript.SourceMapper(tsModFileName, this.emittingFileName, this.outfile, sourceMappingFile, this.errorReporter));\n                                this.emitState.column = 0;\n                                this.emitState.line = 0;\n                            }\n                        } else {\n                            CompilerDiagnostics.assert(this.emitOptions.outputMany, "Cannot have dynamic modules compiling into single file");\n                        }\n                    }\n\n                    this.setContainer(EmitContainer.DynamicModule); // discard the previous \'Module\' container\n\n                    this.recordSourceMappingStart(moduleDecl);\n                    if (moduleGenTarget == ModuleGenTarget.Asynchronous) { // AMD\n                        var dependencyList = "[\\"require\\", \\"exports\\"";\n                        var importList = "require, exports";\n                        var importStatement: ImportDeclaration = null;\n\n                        // all dependencies are quoted\n                        for (var i = 0; i < (<ModuleType>moduleDecl.mod).importedModules.length; i++) {\n                            importStatement = (<ModuleType>moduleDecl.mod).importedModules[i]\n\n                            // if the imported module is only used in a type position, do not add it as a requirement\n                            if (importStatement.id.sym &&\n                                !(<TypeSymbol>importStatement.id.sym).onlyReferencedAsTypeRef) {\n                                if (i <= (<ModuleType>moduleDecl.mod).importedModules.length - 1) {\n                                    dependencyList += ", ";\n                                    importList += ", ";\n                                }\n\n                                importList += "__" + importStatement.id.actualText + "__";\n                                dependencyList += importStatement.firstAliasedModToString();\n                            }\n                        }\n\n                 ';
var v27312 = v27313 + '       // emit any potential amd dependencies\n                        for (var i = 0; i < moduleDecl.amdDependencies.length; i++) {\n                            dependencyList += ", \\"" + moduleDecl.amdDependencies[i] + "\\"";\n                        }\n\n                        dependencyList += "]";\n\n                        this.writeLineToOutput("define(" + dependencyList + "," + " function(" + importList + ") {");\n                    }\n                    else { // Node\n\n                    }\n                }\n                else {\n\n                    if (!isExported) {\n                        this.recordSourceMappingStart(moduleDecl);\n                        this.writeToOutput("var ");\n                        this.recordSourceMappingStart(moduleDecl.name);\n                        this.writeToOutput(this.moduleName);\n                        this.recordSourceMappingEnd(moduleDecl.name);\n                        this.writeLineToOutput(";");\n                        this.recordSourceMappingEnd(moduleDecl);\n                        this.emitIndent();\n                    }\n\n                    this.writeToOutput("(");\n                    this.recordSourceMappingStart(moduleDecl);\n                    this.writeToOutput("function (");\n                    this.recordSourceMappingStart(moduleDecl.name);\n                    this.writeToOutput(this.moduleName);\n                    this.recordSourceMappingEnd(moduleDecl.name);\n                    this.writeLineToOutput(") {");\n                }\n\n                if (!isWholeFile) {\n                    this.recordSourceMappingNameStart(this.moduleName);\n                }\n\n                // body - don\'t indent for Node\n                if (!isDynamicMod || moduleGenTarget == ModuleGenTarget.Asynchronous) {\n                    this.indenter.increaseIndent();\n                }\n\n                if (moduleDecl.modFlags & ModuleFlags.MustCaptureThis) {\n                    this.writeCaptureThisStatement(moduleDecl);\n                }\n\n                this.emitJavascriptList(moduleDecl.members, null, TokenID.Semicolon, true, false, false);\n                if (!isDynamicMod || moduleGenTarget == ModuleGenTarget.Asynchronous) {\n                    this.indenter.decreaseIndent();\n                }\n                this.emitIndent();\n\n                // epilogue\n                if (isDynamicMod) {\n                    if (moduleGenTarget == ModuleGenTarget.Asynchronous) { // AMD\n                        this.writeLineToOutput("})");\n                    }\n                    else { // Node\n                    }\n                    if (!isWholeFile) {\n                        this.recordSourceMappingNameEnd();\n                    }\n                    this.recordSourceMappingEnd(moduleDecl);\n\n                    // close the module outfile, and restore the old one\n                    if (this.outfile != prevOutFile) {\n                        this.Close();\n                        if (prevSourceMapper != null) {\n                            this.allSourceMappers = prevAllSourceMappers;\n                            this.sourceMapper = prevSourceMapper;\n                            this.emitState.column = prevColumn;\n                            this.emitState.line = prevLine;\n                        }\n                        this.outfile = prevOutFile;\n                        this.emittingFileName = prevOutFileName;\n                    }\n                }\n                else {\n                    var containingMod: ModuleDeclaration = null;\n                    if (moduleDecl.type && moduleDecl.type.symbol.container && moduleDecl.type.symbol.container.declAST) {\n                        containingMod = <ModuleDeclaration>moduleDecl.type.symbol.container.declAST;\n                    }\n                    var parentIsDynamic = containingMod && hasFlag(containingMod.modFlags, ModuleFlags.IsDynamic);\n\n                    this.recordSourceMappingStart(moduleDecl.endingToken);\n                    if (temp == EmitContainer.Prog && isExported) {\n                        this.writeToOutput("}");\n                        if (!isWholeFile) {\n                            this.recordSourceMappingNameEnd();\n                        }\n                        this.recordSourceMappingEnd(moduleDecl.endingToken);\n                        this.writeToOutput(")(this." + this.moduleName + " || (this." + this.moduleName + " = {}));");\n                    }\n                    else if (isExported || temp == EmitContainer.Prog) {\n                        var dotMod = svModuleName != "" ? (parentIsDynamic ? "exports" : svModuleName) + "." : svModuleName;\n                        this.writeToOutput("}");\n                        if (!isWholeFile) {\n                            this.recordSourceMappingNameEnd();\n                        }\n                        this.recordSourceMappingEnd(moduleDecl.endingToken);\n                        this.writeToOutput(")(" + dotMod + this.moduleName + " || (" + dotMod + this.moduleName + " = {})';
var v27311 = v27312 + ');");\n                    }\n                    else if (!isExported && temp != EmitContainer.Prog) {\n                        this.writeToOutput("}");\n                        if (!isWholeFile) {\n                            this.recordSourceMappingNameEnd();\n                        }\n                        this.recordSourceMappingEnd(moduleDecl.endingToken);\n                        this.writeToOutput(")(" + this.moduleName + " || (" + this.moduleName + " = {}));");\n                    }\n                    else {\n                        this.writeToOutput("}");\n                        if (!isWholeFile) {\n                            this.recordSourceMappingNameEnd();\n                        }\n                        this.recordSourceMappingEnd(moduleDecl.endingToken);\n                        this.writeToOutput(")();");\n                    }\n                    this.recordSourceMappingEnd(moduleDecl);\n                    this.writeLineToOutput("");\n                    if (temp != EmitContainer.Prog && isExported) {\n                        this.emitIndent();\n                        this.recordSourceMappingStart(moduleDecl);\n                        if (parentIsDynamic) {\n                            this.writeLineToOutput("var " + this.moduleName + " = exports." + this.moduleName + ";");\n                        } else {\n                            this.writeLineToOutput("var " + this.moduleName + " = " + svModuleName + "." + this.moduleName + ";");\n                        }\n                        this.recordSourceMappingEnd(moduleDecl);\n                    }\n                }\n\n                this.setContainer(temp);\n                this.moduleName = svModuleName;\n                this.moduleDeclList.length--;\n            }\n        }\n\n        public emitIndex(operand1: AST, operand2: AST) {\n            var temp = this.setInObjectLiteral(false);\n            this.emitJavascript(operand1, TokenID.Tilde, false);\n            this.writeToOutput("[");\n            this.emitJavascriptList(operand2, ", ", TokenID.Comma, false, false, false);\n            this.writeToOutput("]");\n            this.setInObjectLiteral(temp);\n        }\n\n        public emitStringLiteral(text: string) {\n            // should preserve escape etc.\n            // TODO: simplify object literal simple name\n            this.writeToOutput(text);\n        }\n\n        public emitJavascriptFunction(funcDecl: FuncDecl) {\n            if (hasFlag(funcDecl.fncFlags, FncFlags.Signature) || funcDecl.isOverload) {\n                return;\n            }\n            var temp: number;\n            var tempFnc = this.thisFnc;\n            this.thisFnc = funcDecl;\n\n            if (funcDecl.isConstructor) {\n                temp = this.setContainer(EmitContainer.Constructor);\n            }\n            else {\n                temp = this.setContainer(EmitContainer.Function);\n            }\n\n            var bases: ASTList = null;\n            var hasSelfRef = false;\n            var funcName = funcDecl.getNameText();\n\n            if ((this.emitState.inObjectLiteral || !funcDecl.isAccessor()) &&\n                ((temp != EmitContainer.Constructor) ||\n                ((funcDecl.fncFlags & FncFlags.Method) == FncFlags.None))) {\n                var tempLit = this.setInObjectLiteral(false);\n                if (this.thisClassNode) {\n                    bases = this.thisClassNode.extendsList;\n                }\n                hasSelfRef = Emitter.shouldCaptureThis(funcDecl);\n                this.recordSourceMappingStart(funcDecl);\n                if (hasFlag(funcDecl.fncFlags, FncFlags.Exported | FncFlags.ClassPropertyMethodExported) && funcDecl.type.symbol.container == this.checker.gloMod && !funcDecl.isConstructor) {\n                    this.writeToOutput("this." + funcName + " = ");\n                    this.emitInnerFunction(funcDecl, false, false, bases, hasSelfRef, this.thisClassNode);\n                }\n                else {\n                    this.emitInnerFunction(funcDecl, (funcDecl.name && !funcDecl.name.isMissing()), false, bases, hasSelfRef, this.thisClassNode);\n                }\n                this.setInObjectLiteral(tempLit);\n            }\n            this.setContainer(temp);\n            this.thisFnc = tempFnc;\n\n            if (hasFlag(funcDecl.fncFlags, FncFlags.Definition)) {\n                if (hasFlag(funcDecl.fncFlags, FncFlags.Static)) {\n                    if (this.thisClassNode) {\n                        if (funcDecl.isAccessor()) {\n                            this.emitPropertyAccessor(funcDecl, this.thisClassNode.name.actualText, false);\n                        }\n                        else {\n                            this.emitIndent();\n                            this.recordSourceMappingStart(funcDecl);\n                            this.writeLineToOutput(this.thisClassNode.name.actualText + "." + funcName +\n                                          " = " + funcName + ";");\n                            this.recordSourceMappingEnd(funcDecl);\n                     ';
var v27310 = v27311 + '   }\n                    }\n                }\n                else if ((this.emitState.container == EmitContainer.Module || this.emitState.container == EmitContainer.DynamicModule) && hasFlag(funcDecl.fncFlags, FncFlags.Exported | FncFlags.ClassPropertyMethodExported)) {\n                    this.emitIndent();\n                    var modName = this.emitState.container == EmitContainer.Module ? this.moduleName : "exports";\n                    this.recordSourceMappingStart(funcDecl);\n                    this.writeLineToOutput(modName + "." + funcName +\n                                      " = " + funcName + ";");\n                    this.recordSourceMappingEnd(funcDecl);\n                }\n            }\n        }\n\n        public emitAmbientVarDecl(varDecl: VarDecl) {\n            if (varDecl.init) {\n                this.emitParensAndCommentsInPlace(varDecl, true);\n                this.recordSourceMappingStart(varDecl);\n                this.recordSourceMappingStart(varDecl.id);\n                this.writeToOutput(varDecl.id.actualText);\n                this.recordSourceMappingEnd(varDecl.id);\n                this.writeToOutput(" = ");\n                this.emitJavascript(varDecl.init, TokenID.Comma, false);\n                this.recordSourceMappingEnd(varDecl);\n                this.writeToOutput(";");\n                this.emitParensAndCommentsInPlace(varDecl, false);\n            }\n        }\n\n        private varListCount(): number {\n            return this.varListCountStack[this.varListCountStack.length - 1];\n        }\n\n        // Emits "var " if it is allowed\n        private emitVarDeclVar() {\n            // If it is var list of form var a, b, c = emit it only if count > 0 - which will be when emitting first var\n            // If it is var list of form  var a = varList count will be 0\n            if (this.varListCount() >= 0) {\n                this.writeToOutput("var ");\n                this.setInVarBlock(-this.varListCount());\n            }\n            return true;\n        }\n\n        private onEmitVar() {\n            if (this.varListCount() > 0) {\n                this.setInVarBlock(this.varListCount() - 1);\n            }\n            else if (this.varListCount() < 0) {\n                this.setInVarBlock(this.varListCount() + 1);\n            }\n        }\n\n        public emitJavascriptVarDecl(varDecl: VarDecl, tokenId: TokenID) {\n            if ((varDecl.varFlags & VarFlags.Ambient) == VarFlags.Ambient) {\n                this.emitAmbientVarDecl(varDecl);\n                this.onEmitVar();\n            }\n            else {\n                var sym = varDecl.sym;\n                var hasInitializer = (varDecl.init != null);\n                this.emitParensAndCommentsInPlace(varDecl, true);\n                this.recordSourceMappingStart(varDecl);\n                if (sym && sym.isMember() && sym.container &&\n                    (sym.container.kind() == SymbolKind.Type)) {\n                    var type = (<TypeSymbol>sym.container).type;\n                    if (type.isClass() && (!hasFlag(sym.flags, SymbolFlags.ModuleMember))) {\n                        // class\n                        if (this.emitState.container != EmitContainer.Args) {\n                            if (hasFlag(sym.flags, SymbolFlags.Static)) {\n                                this.writeToOutput(sym.container.name + ".");\n                            }\n                            else {\n                                this.writeToOutput("this.");\n                            }\n                        }\n                    }\n                    else if (type.hasImplementation()) {\n                        // module\n                        if (!hasFlag(sym.flags, SymbolFlags.Exported) && (sym.container == this.checker.gloMod || !hasFlag(sym.flags, SymbolFlags.Property))) {\n                            this.emitVarDeclVar();\n                        }\n                        else if (hasFlag(varDecl.varFlags, VarFlags.LocalStatic)) {\n                            this.writeToOutput(".");\n                        }\n                        else {\n                            if (this.emitState.container == EmitContainer.DynamicModule) {\n                                this.writeToOutput("exports.");\n                            }\n                            else {\n                                this.writeToOutput(this.moduleName + ".");\n                            }\n                        }\n                    }\n                    else {\n                        // function, constructor, method etc.\n                        if (tokenId != TokenID.OpenParen) {\n                            if (hasFlag(sym.flags, SymbolFlags.Exported) && sym.container == this.checker.gloMod) {\n                                this.writeToOutput("this.");\n                            }\n                            else {\n                                this.emitVarDeclVar();\n                            }\n                        }\n                    }\n                }\n                else {\n            ';
var v27309 = v27310 + '        if (tokenId != TokenID.OpenParen) {\n                        this.emitVarDeclVar();\n                    }\n                }\n                this.recordSourceMappingStart(varDecl.id);\n                this.writeToOutput(varDecl.id.actualText);\n                this.recordSourceMappingEnd(varDecl.id);\n                if (hasInitializer) {\n                    this.writeToOutputTrimmable(" = ");\n\n                    // Ensure we have a fresh var list count when recursing into the variable \n                    // initializer.  We don\'t want our current list of variables to affect how we\n                    // emit nested variable lists.\n                    this.varListCountStack.push(0);\n                    this.emitJavascript(varDecl.init, TokenID.Comma, false);\n                    this.varListCountStack.pop();\n                }\n                this.onEmitVar();\n                if ((tokenId != TokenID.OpenParen)) {\n                    if (this.varListCount() < 0) {\n                        this.writeToOutput(", ");\n                    } else if (tokenId != TokenID.For) {\n                        this.writeToOutputTrimmable(";");\n                    }\n                }\n                this.recordSourceMappingEnd(varDecl);\n                this.emitParensAndCommentsInPlace(varDecl, false);\n            }\n        }\n\n        public declEnclosed(moduleDecl: ModuleDeclaration): bool {\n            if (moduleDecl == null) {\n                return true;\n            }\n            for (var i = 0, len = this.moduleDeclList.length; i < len; i++) {\n                if (this.moduleDeclList[i] == moduleDecl) {\n                    return true;\n                }\n            }\n            return false;\n        }\n\n        public emitJavascriptName(name: Identifier, addThis: bool) {\n            var sym = name.sym;\n            this.emitParensAndCommentsInPlace(name, true);\n            this.recordSourceMappingStart(name);\n            if (!name.isMissing()) {\n                if (addThis && (this.emitState.container != EmitContainer.Args) && sym) {\n                    // TODO: flag global module with marker other than string name\n                    if (sym.container && (sym.container.name != globalId)) {\n                        if (hasFlag(sym.flags, SymbolFlags.Static) && (hasFlag(sym.flags, SymbolFlags.Property))) {\n                            if (sym.declModule && hasFlag(sym.declModule.modFlags, ModuleFlags.IsDynamic)) {\n                                this.writeToOutput("exports.");\n                            }\n                            else {\n                                this.writeToOutput(sym.container.name + ".");\n                            }\n                        }\n                        else if (sym.kind() == SymbolKind.Field) {\n                            var fieldSym = <FieldSymbol>sym;\n                            if (hasFlag(fieldSym.flags, SymbolFlags.ModuleMember)) {\n                                if ((sym.container != this.checker.gloMod) && ((hasFlag(sym.flags, SymbolFlags.Property)) || hasFlag(sym.flags, SymbolFlags.Exported))) {\n                                    if (hasFlag(sym.declModule.modFlags, ModuleFlags.IsDynamic)) {\n                                        this.writeToOutput("exports.");\n                                    }\n                                    else {\n                                        this.writeToOutput(sym.container.name + ".");\n                                    }\n                                }\n                            }\n                            else {\n                                if (sym.isInstanceProperty()) {\n                                    this.emitThis();\n                                    this.writeToOutput(".");\n                                }\n                            }\n                        }\n                        else if (sym.kind() == SymbolKind.Type) {\n                            if (sym.isInstanceProperty()) {\n                                var typeSym = <TypeSymbol>sym;\n                                var type = typeSym.type;\n                                if (type.call && !hasFlag(sym.flags, SymbolFlags.ModuleMember)) {\n                                    this.emitThis();\n                                    this.writeToOutput(".");\n                                }\n                            }\n                            else if ((sym.unitIndex != this.checker.locationInfo.unitIndex) || (!this.declEnclosed(sym.declModule))) {\n                                this.writeToOutput(sym.container.name + ".")\n                            }\n                        }\n                    }\n                    else if (sym.container == this.checker.gloMod &&\n                                hasFlag(sym.flags, SymbolFlags.Exported) &&\n                                !hasFlag(sym.flags, SymbolFlags.Ambient) &&\n                                // check that it\'s a not a member of an ambient module...\n                                !((sym.isType()';
var v27308 = v27309 + ' || sym.isMember()) &&\n                                    sym.declModule &&\n                                    hasFlag(sym.declModule.modFlags, ModuleFlags.Ambient)) &&\n                                this.emitState.container == EmitContainer.Prog &&\n                                sym.declAST.nodeType != NodeType.FuncDecl) {\n                        this.writeToOutput("this.");\n                    }\n                }\n\n                // If it\'s a dynamic module, we need to print the "require" invocation\n                if (sym &&\n                    sym.declAST &&\n                    sym.declAST.nodeType == NodeType.ModuleDeclaration &&\n                    (hasFlag((<ModuleDeclaration>sym.declAST).modFlags, ModuleFlags.IsDynamic))) {\n                    var moduleDecl: ModuleDeclaration = <ModuleDeclaration>sym.declAST;\n\n                    if (moduleGenTarget == ModuleGenTarget.Asynchronous) {\n                        this.writeLineToOutput("__" + this.modAliasId + "__;");\n                    }\n                    else {\n                        var modPath = name.actualText;//(<ModuleDecl>moduleDecl.mod.symbol.declAST).name.actualText;\n                        var isAmbient = moduleDecl.mod.symbol.declAST && hasFlag((<ModuleDeclaration>moduleDecl.mod.symbol.declAST).modFlags, ModuleFlags.Ambient);\n                        modPath = isAmbient ? modPath : this.firstModAlias ? this.firstModAlias : quoteBaseName(modPath);\n                        modPath = isAmbient ? modPath : (!isRelative(stripQuotes(modPath)) ? quoteStr("./" + stripQuotes(modPath)) : modPath);\n                        this.writeToOutput("require(" + modPath + ")");\n                    }\n                }\n                else {\n                    this.writeToOutput(name.actualText);\n                }\n            }\n            this.recordSourceMappingEnd(name);\n            this.emitParensAndCommentsInPlace(name, false);\n        }\n\n        public emitJavascriptStatements(stmts: AST, emitEmptyBod: bool) {\n            if (stmts) {\n                if (stmts.nodeType != NodeType.Block) {\n                    var hasContents = (stmts && (stmts.nodeType != NodeType.List || ((<ASTList>stmts).members.length > 0)));\n                    if (emitEmptyBod || hasContents) {\n                        var hasOnlyBlockStatement = ((stmts.nodeType == NodeType.Block) ||\n                            ((stmts.nodeType == NodeType.List) && ((<ASTList>stmts).members.length == 1) && ((<ASTList>stmts).members[0].nodeType == NodeType.Block)));\n\n                        this.recordSourceMappingStart(stmts);\n                        if (!hasOnlyBlockStatement) {\n                            this.writeLineToOutput(" {");\n                            this.indenter.increaseIndent();\n                        }\n                        this.emitJavascriptList(stmts, null, TokenID.Semicolon, true, false, false);\n                        if (!hasOnlyBlockStatement) {\n                            this.writeLineToOutput("");\n                            this.indenter.decreaseIndent();\n                            this.emitIndent();\n                            this.writeToOutput("}");\n                        }\n                        this.recordSourceMappingEnd(stmts);\n                    }\n                }\n                else {\n                    this.emitJavascript(stmts, TokenID.Semicolon, true);\n                }\n            }\n            else if (emitEmptyBod) {\n                this.writeToOutput("{ }");\n            }\n        }\n\n        public emitBareJavascriptStatements(stmts: AST, emitClassPropertiesAfterSuperCall: bool = false) {\n            // just the statements without enclosing curly braces\n            if (stmts.nodeType != NodeType.Block) {\n                if (stmts.nodeType == NodeType.List) {\n                    var stmtList = <ASTList>stmts;\n                    if ((stmtList.members.length == 2) &&\n                        (stmtList.members[0].nodeType == NodeType.Block) &&\n                        (stmtList.members[1].nodeType == NodeType.EndCode)) {\n                        this.emitJavascript(stmtList.members[0], TokenID.Semicolon, true);\n                        this.writeLineToOutput("");\n                    }\n                    else {\n                        this.emitJavascriptList(stmts, null, TokenID.Semicolon, true, false, emitClassPropertiesAfterSuperCall);\n                    }\n                }\n                else {\n                    this.emitJavascript(stmts, TokenID.Semicolon, true);\n                }\n            }\n            else {\n                this.emitJavascript(stmts, TokenID.Semicolon, true);\n            }\n        }\n\n        public recordSourceMappingNameStart(name: string) {\n            if (this.sourceMapper) {\n                var finalName = name;\n                if (!name) {\n                    finalName = "";\n                } else if (this.sourceMapper.currentNameIndex.length > 0) {\n                    finalName = this.sourceMapper.names[this.source';
var v27307 = v27308 + "Mapper.currentNameIndex.length - 1] + \".\" + name;\n                }\n\n                // We are currently not looking for duplicate but that is possible.\n                this.sourceMapper.names.push(finalName);\n                this.sourceMapper.currentNameIndex.push(this.sourceMapper.names.length - 1);\n            }\n        }\n\n        public recordSourceMappingNameEnd() {\n            if (this.sourceMapper) {\n                this.sourceMapper.currentNameIndex.pop();\n            }\n        }\n\n        public recordSourceMappingStart(ast: ASTSpan) {\n            if (this.sourceMapper && isValidAstNode(ast)) {\n                var lineCol = { line: -1, col: -1 };\n                var sourceMapping = new SourceMapping();\n                sourceMapping.start.emittedColumn = this.emitState.column;\n                sourceMapping.start.emittedLine = this.emitState.line;\n                // REVIEW: check time consumed by this binary search (about two per leaf statement)\n                getSourceLineColFromMap(lineCol, ast.minChar, this.checker.locationInfo.lineMap);\n                sourceMapping.start.sourceColumn = lineCol.col;\n                sourceMapping.start.sourceLine = lineCol.line;\n                getSourceLineColFromMap(lineCol, ast.limChar, this.checker.locationInfo.lineMap);\n                sourceMapping.end.sourceColumn = lineCol.col;\n                sourceMapping.end.sourceLine = lineCol.line;\n                if (this.sourceMapper.currentNameIndex.length > 0) {\n                    sourceMapping.nameIndex = this.sourceMapper.currentNameIndex[this.sourceMapper.currentNameIndex.length - 1];\n                }\n                // Set parent and child relationship\n                var siblings = this.sourceMapper.currentMappings[this.sourceMapper.currentMappings.length - 1];\n                siblings.push(sourceMapping);\n                this.sourceMapper.currentMappings.push(sourceMapping.childMappings);\n            }\n        }\n\n        public recordSourceMappingEnd(ast: ASTSpan) {\n            if (this.sourceMapper && isValidAstNode(ast)) {\n                // Pop source mapping childs\n                this.sourceMapper.currentMappings.pop();\n\n                // Get the last source mapping from sibling list = which is the one we are recording end for\n                var siblings = this.sourceMapper.currentMappings[this.sourceMapper.currentMappings.length - 1];\n                var sourceMapping = siblings[siblings.length - 1];\n\n                sourceMapping.end.emittedColumn = this.emitState.column;\n                sourceMapping.end.emittedLine = this.emitState.line;\n            }\n        }\n\n        public Close() {\n            if (this.sourceMapper != null) {\n                SourceMapper.EmitSourceMapping(this.allSourceMappers);\n            }\n            try {\n                // Closing files could result in exceptions, report them if they occur\n                this.outfile.Close();\n            } catch (ex) {\n                this.errorReporter.emitterError(null, ex.message);\n            }\n        }\n\n        public emitJavascriptList(ast: AST, delimiter: string, tokenId: TokenID, startLine: bool, onlyStatics: bool, emitClassPropertiesAfterSuperCall: bool = false, emitPrologue? = false, requiresExtendsBlock?: bool) {\n            if (ast == null) {\n                return;\n            }\n            else if (ast.nodeType != NodeType.List) {\n                this.emitPrologue(emitPrologue);\n                this.emitJavascript(ast, tokenId, startLine);\n            }\n            else {\n                var list = <ASTList>ast;\n                if (list.members.length == 0) {\n                    return;\n                }\n\n                this.emitParensAndCommentsInPlace(ast, true);\n                var len = list.members.length;\n                for (var i = 0; i < len; i++) {\n                    if (emitPrologue) {\n                        // If the list has Strict mode flags, emit prologue after first statement\n                        // otherwise emit before first statement\n                        if (i == 1 || !hasFlag(list.flags, ASTFlags.StrictMode)) {\n                            this.emitPrologue(requiresExtendsBlock);\n                            emitPrologue = false;\n                        }\n                    }\n\n                    // In some circumstances, class property initializers must be emitted immediately after the 'super' constructor\n                    // call which, in these cases, must be the first statement in the constructor body\n                    if (i == 1 && emitClassPropertiesAfterSuperCall) {\n\n                        // emit any parameter properties first\n                        var constructorDecl = (<ClassDeclaration>this.thisClassNode).constructorDecl;\n\n                        if (constructorDecl && constructorDecl.arguments) {\n                            var argsLen = constructorDecl.arguments.members.length;\n                            for (var iArg = 0; iArg < argsLen; iArg++) {\n                     ";
var v27306 = v27307 + '           var arg = <BoundDecl>constructorDecl.arguments.members[iArg];\n                                if ((arg.varFlags & VarFlags.Property) != VarFlags.None) {\n                                    this.emitIndent();\n                                    this.recordSourceMappingStart(arg);\n                                    this.recordSourceMappingStart(arg.id);\n                                    this.writeToOutput("this." + arg.id.actualText);\n                                    this.recordSourceMappingEnd(arg.id);\n                                    this.writeToOutput(" = ");\n                                    this.recordSourceMappingStart(arg.id);\n                                    this.writeToOutput(arg.id.actualText);\n                                    this.recordSourceMappingEnd(arg.id);\n                                    this.writeLineToOutput(";");\n                                    this.recordSourceMappingEnd(arg);\n                                }\n                            }\n                        }\n\n                        var nProps = (<ASTList>this.thisClassNode.members).members.length;\n\n                        for (var iMember = 0; iMember < nProps; iMember++) {\n                            if ((<ASTList>this.thisClassNode.members).members[iMember].nodeType == NodeType.VarDecl) {\n                                var varDecl = <VarDecl>(<ASTList>this.thisClassNode.members).members[iMember];\n                                if (!hasFlag(varDecl.varFlags, VarFlags.Static) && varDecl.init) {\n                                    this.emitIndent();\n                                    this.emitJavascriptVarDecl(varDecl, TokenID.Tilde);\n                                    this.writeLineToOutput("");\n                                }\n                            }\n                        }\n                    }\n\n                    var emitNode = list.members[i];\n\n                    var isStaticDecl =\n                                (emitNode.nodeType == NodeType.FuncDecl && hasFlag((<FuncDecl>emitNode).fncFlags, FncFlags.Static)) ||\n                                (emitNode.nodeType == NodeType.VarDecl && hasFlag((<VarDecl>emitNode).varFlags, VarFlags.Static))\n\n                    if (onlyStatics ? !isStaticDecl : isStaticDecl) {\n                        continue;\n                    }\n                    this.emitJavascript(emitNode, tokenId, startLine);\n\n                    if (delimiter && (i < (len - 1))) {\n                        if (startLine) {\n                            this.writeLineToOutput(delimiter);\n                        }\n                        else {\n                            this.writeToOutput(delimiter);\n                        }\n                    }\n                    else if (startLine &&\n                             (emitNode.nodeType != NodeType.ModuleDeclaration) &&\n                             (emitNode.nodeType != NodeType.InterfaceDeclaration) &&\n                             (!((emitNode.nodeType == NodeType.VarDecl) &&\n                                ((((<VarDecl>emitNode).varFlags) & VarFlags.Ambient) == VarFlags.Ambient) &&\n                                (((<VarDecl>emitNode).init) == null)) && this.varListCount() >= 0) &&\n                             (emitNode.nodeType != NodeType.Block || (<Block>emitNode).isStatementBlock) &&\n                             (emitNode.nodeType != NodeType.EndCode) &&\n                             (emitNode.nodeType != NodeType.FuncDecl)) {\n                        this.writeLineToOutput("");\n                    }\n                }\n                this.emitParensAndCommentsInPlace(ast, false);\n            }\n        }\n\n        // tokenId is the id the preceding token\n        public emitJavascript(ast: AST, tokenId: TokenID, startLine: bool) {\n            if (ast == null) {\n                return;\n            }\n\n            // REVIEW: simplify rules for indenting\n            if (startLine && (this.indenter.indentAmt > 0) && (ast.nodeType != NodeType.List) &&\n                (ast.nodeType != NodeType.Block)) {\n                if ((ast.nodeType != NodeType.InterfaceDeclaration) &&\n                    (!((ast.nodeType == NodeType.VarDecl) &&\n                       ((((<VarDecl>ast).varFlags) & VarFlags.Ambient) == VarFlags.Ambient) &&\n                       (((<VarDecl>ast).init) == null)) && this.varListCount() >= 0) &&\n                    (ast.nodeType != NodeType.EndCode) &&\n                    ((ast.nodeType != NodeType.FuncDecl) ||\n                     (this.emitState.container != EmitContainer.Constructor))) {\n                    this.emitIndent();\n                }\n            }\n\n            ast.emit(this, tokenId, startLine);\n\n            if ((tokenId == TokenID.Semicolon) && (ast.nodeType < NodeType.GeneralNode)) {\n                this.writeToOutput(";");\n            }\n        }\n\n        public emitPropertyAccessor(funcDecl: FuncDecl, className: string, isProto: bool) {\n            if (!(<FieldSymbol>funcDecl.accessorSymbol).h';
var v27305 = v27306 + 'asBeenEmitted) {\n                var accessorSymbol = <FieldSymbol>funcDecl.accessorSymbol;\n                this.emitIndent();\n                this.recordSourceMappingStart(funcDecl);\n                this.writeLineToOutput("Object.defineProperty(" + className + (isProto ? ".prototype, \\"" : ", \\"") + funcDecl.name.actualText + "\\"" + ", {");\n                this.indenter.increaseIndent();\n\n                if (accessorSymbol.getter) {\n                    var getter: FuncDecl = <FuncDecl>accessorSymbol.getter.declAST;\n\n                    this.emitIndent();\n                    this.recordSourceMappingStart(getter);\n                    this.writeToOutput("get: ");\n                    this.emitInnerFunction(getter, false, isProto, null, Emitter.shouldCaptureThis(getter), null);\n                    this.writeLineToOutput(",");\n                }\n\n                if (accessorSymbol.setter) {\n                    var setter: FuncDecl = <FuncDecl>accessorSymbol.setter.declAST;\n\n                    this.emitIndent();\n                    this.recordSourceMappingStart(setter);\n                    this.writeToOutput("set: ");\n                    this.emitInnerFunction(setter, false, isProto, null, Emitter.shouldCaptureThis(setter), null);\n                    this.writeLineToOutput(",");\n                }\n\n                this.emitIndent();\n                this.writeLineToOutput("enumerable: true,");\n                this.emitIndent();\n                this.writeLineToOutput("configurable: true");\n                this.indenter.decreaseIndent();\n                this.emitIndent();\n                this.writeLineToOutput("});");\n                this.recordSourceMappingEnd(funcDecl);\n\n                accessorSymbol.hasBeenEmitted = true;\n            }\n        }\n\n        public emitPrototypeMember(member: AST, className: string) {\n            if (member.nodeType == NodeType.FuncDecl) {\n                var funcDecl = <FuncDecl>member;\n                if (funcDecl.isAccessor()) {\n                    this.emitPropertyAccessor(funcDecl, className, true);\n                }\n                else {\n                    this.emitIndent();\n                    this.recordSourceMappingStart(funcDecl);\n                    this.writeToOutput(className + ".prototype." + funcDecl.getNameText() + " = ");\n                    this.emitInnerFunction(funcDecl, false, true, null, Emitter.shouldCaptureThis(funcDecl), null);\n                    this.writeLineToOutput(";");\n                }\n            }\n            else if (member.nodeType == NodeType.VarDecl) {\n                var varDecl = <VarDecl>member;\n\n                if (varDecl.init) {\n                    this.emitIndent();\n                    this.recordSourceMappingStart(varDecl);\n                    this.recordSourceMappingStart(varDecl.id);\n                    this.writeToOutput(className + ".prototype." + varDecl.id.actualText);\n                    this.recordSourceMappingEnd(varDecl.id);\n                    this.writeToOutput(" = ");\n                    this.emitJavascript(varDecl.init, TokenID.Equals, false);\n                    this.recordSourceMappingEnd(varDecl);\n                    this.writeLineToOutput(";");\n                }\n            }\n        }\n\n        public emitAddBaseMethods(className: string, base: Type, classDecl: TypeDeclaration): void {\n            if (base.members) {\n                var baseSymbol = base.symbol;\n                var baseName = baseSymbol.name;\n                if (baseSymbol.declModule != classDecl.type.symbol.declModule) {\n                    baseName = baseSymbol.fullName();\n                }\n                base.members.allMembers.map(function(key, s, c) {\n                    var sym = <Symbol>s;\n                    if ((sym.kind() == SymbolKind.Type) && (<TypeSymbol>sym).type.call) {\n                        this.recordSourceMappingStart(sym.declAST);\n                        this.writeLineToOutput(className + ".prototype." + sym.name + " = " +\n                                          baseName + ".prototype." + sym.name + ";");\n                        this.recordSourceMappingEnd(sym.declAST);\n                    }\n                }, null);\n            }\n            if (base.extendsList) {\n                for (var i = 0, len = base.extendsList.length; i < len; i++) {\n                    this.emitAddBaseMethods(className, base.extendsList[i], classDecl);\n                }\n            }\n        }\n\n        public emitJavascriptClass(classDecl: ClassDeclaration) {\n            if (!hasFlag(classDecl.varFlags, VarFlags.Ambient)) {\n                var svClassNode = this.thisClassNode;\n                var i = 0;\n                this.thisClassNode = classDecl;\n                var className = classDecl.name.actualText;\n                this.emitParensAndCommentsInPlace(classDecl, true);\n                var temp = this.setContainer(EmitContainer.Class);\n\n                this.recordSourceMappingStart(classDecl);\n                if (hasFlag(classDecl.varFlags, VarF';
var v27304 = v27305 + 'lags.Exported) && classDecl.type.symbol.container == this.checker.gloMod) {\n                    this.writeToOutput("this." + className);\n                }\n                else {\n                    this.writeToOutput("var " + className);\n                }\n\n                //if (hasFlag(classDecl.varFlags, VarFlags.Exported) && (temp == EmitContainer.Module || temp == EmitContainer.DynamicModule)) {\n                //    var modName = temp == EmitContainer.Module ? this.moduleName : "exports";\n                //    this.writeToOutput(" = " + modName + "." + className);\n                //}\n\n                var hasBaseClass = classDecl.extendsList && classDecl.extendsList.members.length;\n                var baseNameDecl: AST = null;\n                var baseName: AST = null;\n\n                if (hasBaseClass) {\n                    this.writeLineToOutput(" = (function (_super) {");\n                } else {\n                    this.writeLineToOutput(" = (function () {");\n                }\n\n                this.recordSourceMappingNameStart(className);\n                this.indenter.increaseIndent();\n\n                if (hasBaseClass) {\n                    baseNameDecl = classDecl.extendsList.members[0];\n                    baseName = baseNameDecl.nodeType == NodeType.Call ? (<CallExpression>baseNameDecl).target : baseNameDecl;\n                    this.emitIndent();\n                    this.writeLineToOutput("__extends(" + className + ", _super);");\n                }\n\n                this.emitIndent();\n\n                var constrDecl = classDecl.constructorDecl;\n\n                // output constructor\n                if (constrDecl) {\n                    // declared constructor\n                    this.emitJavascript(classDecl.constructorDecl, TokenID.OpenParen, false);\n\n                }\n                else {\n                    var wroteProps = 0;\n\n                    this.recordSourceMappingStart(classDecl);\n                    // default constructor\n                    this.indenter.increaseIndent();\n                    this.writeToOutput("function " + classDecl.name.actualText + "() {");\n                    this.recordSourceMappingNameStart("constructor");\n                    if (hasBaseClass) {\n                        this.writeLineToOutput("");\n                        this.emitIndent();\n                        this.writeLineToOutput("_super.apply(this, arguments);");\n                        wroteProps++;\n                    }\n\n                    if (classDecl.varFlags & VarFlags.MustCaptureThis) {\n                        this.writeCaptureThisStatement(classDecl);\n                    }\n\n                    var members = (<ASTList>this.thisClassNode.members).members\n\n                    // output initialized properties\n                    for (var i = 0; i < members.length; i++) {\n                        if (members[i].nodeType == NodeType.VarDecl) {\n                            var varDecl = <VarDecl>members[i];\n                            if (!hasFlag(varDecl.varFlags, VarFlags.Static) && varDecl.init) {\n                                this.writeLineToOutput("");\n                                this.emitIndent();\n                                this.emitJavascriptVarDecl(varDecl, TokenID.Tilde);\n                                wroteProps++;\n                            }\n                        }\n                    }\n                    if (wroteProps) {\n                        this.writeLineToOutput("");\n                        this.indenter.decreaseIndent();\n                        this.emitIndent();\n                        this.writeLineToOutput("}");\n                    }\n                    else {\n                        this.writeLineToOutput(" }");\n                        this.indenter.decreaseIndent();\n                    }\n                    this.recordSourceMappingNameEnd();\n                    this.recordSourceMappingEnd(classDecl);\n                }\n\n                var membersLen = classDecl.members.members.length;\n                for (var j = 0; j < membersLen; j++) {\n\n                    var memberDecl: AST = classDecl.members.members[j];\n\n                    if (memberDecl.nodeType == NodeType.FuncDecl) {\n                        var fn = <FuncDecl>memberDecl;\n\n                        if (hasFlag(fn.fncFlags, FncFlags.Method) && !fn.isSignature()) {\n                            if (!hasFlag(fn.fncFlags, FncFlags.Static)) {\n                                this.emitPrototypeMember(fn, className);\n                            }\n                            else { // static functions\n                                if (fn.isAccessor()) {\n                                    this.emitPropertyAccessor(fn, this.thisClassNode.name.actualText, false);\n                                }\n                                else {\n                                    this.emitIndent();\n                                    this.recordSourceMappingStart(fn)\n                                    this.writeToOutput(classD';
var v27303 = v27304 + 'ecl.name.actualText + "." + fn.name.actualText + " = ");\n                                    this.emitInnerFunction(fn, (fn.name && !fn.name.isMissing()), true,\n                                            null, Emitter.shouldCaptureThis(fn), null);\n                                    this.writeLineToOutput(";");\n                                }\n                            }\n                        }\n                    }\n                    else if (memberDecl.nodeType == NodeType.VarDecl) {\n                        var varDecl = <VarDecl>memberDecl;\n                        if (hasFlag(varDecl.varFlags, VarFlags.Static)) {\n\n                            if (varDecl.init) {\n                                // EMITREVIEW\n                                this.emitIndent();\n                                this.recordSourceMappingStart(varDecl);\n                                this.writeToOutput(classDecl.name.actualText + "." + varDecl.id.actualText + " = ");\n                                this.emitJavascript(varDecl.init, TokenID.Equals, false);\n                                // EMITREVIEW\n\n                                this.writeLineToOutput(";");\n                                this.recordSourceMappingEnd(varDecl);\n                            }\n                        }\n                    }\n                    else {\n                        throw Error("We want to catch this");\n                    }\n                }\n\n                this.emitIndent();\n                this.recordSourceMappingStart(classDecl.endingToken);\n                this.writeLineToOutput("return " + className + ";");\n                this.recordSourceMappingEnd(classDecl.endingToken);\n                this.indenter.decreaseIndent();\n                this.emitIndent();\n                this.recordSourceMappingStart(classDecl.endingToken);\n                this.writeToOutput("}");\n                this.recordSourceMappingNameEnd();\n                this.recordSourceMappingEnd(classDecl.endingToken);\n                this.recordSourceMappingStart(classDecl);\n                this.writeToOutput(")(");\n                if (hasBaseClass)\n                    this.emitJavascript(baseName, TokenID.Tilde, false);\n                this.writeToOutput(");");\n                this.recordSourceMappingEnd(classDecl);\n\n                if ((temp == EmitContainer.Module || temp == EmitContainer.DynamicModule) && hasFlag(classDecl.varFlags, VarFlags.Exported)) {\n                    this.writeLineToOutput("");\n                    this.emitIndent();\n                    var modName = temp == EmitContainer.Module ? this.moduleName : "exports";\n                    this.recordSourceMappingStart(classDecl);\n                    this.writeToOutput(modName + "." + className + " = " + className + ";");\n                    this.recordSourceMappingEnd(classDecl);\n                }\n\n                this.emitIndent();\n                this.recordSourceMappingEnd(classDecl);\n                this.emitParensAndCommentsInPlace(classDecl, false);\n                this.setContainer(temp);\n                this.thisClassNode = svClassNode;\n            }\n        }\n\n        public emitPrologue(reqInherits: bool) {\n            if (!this.prologueEmitted) {\n                if (reqInherits) {\n                    this.prologueEmitted = true;\n                    this.writeLineToOutput("var __extends = this.__extends || function (d, b) {");\n                    this.writeLineToOutput("    function __() { this.constructor = d; }");\n                    this.writeLineToOutput("    __.prototype = b.prototype;");\n                    this.writeLineToOutput("    d.prototype = new __();");\n                    this.writeLineToOutput("};");\n                }\n                if (this.checker.mustCaptureGlobalThis) {\n                    this.prologueEmitted = true;\n                    this.writeLineToOutput(this.captureThisStmtString);\n                }\n            }\n        }\n\n        public emitSuperReference() {\n            this.writeToOutput("_super.prototype");\n        }\n\n        public emitSuperCall(callEx: CallExpression): bool {\n            if (callEx.target.nodeType == NodeType.Dot) {\n                var dotNode = <BinaryExpression>callEx.target;\n                if (dotNode.operand1.nodeType == NodeType.Super) {\n                    this.emitJavascript(dotNode, TokenID.OpenParen, false);\n                    this.writeToOutput(".call(");\n                    this.emitThis();\n                    if (callEx.arguments && callEx.arguments.members.length > 0) {\n                        this.writeToOutput(", ");\n                        this.emitJavascriptList(callEx.arguments, ", ", TokenID.Comma, false, false, false);\n                    }\n                    this.writeToOutput(")");\n                    return true;\n                }\n            }\n            return false;\n        }\n\n        public emitThis() {\n            if (this.thisFnc && !this.thisFnc.isMethod() && (!this.thisFnc.isConstructor)) {\n          ';
var v27302 = v27303 + '      this.writeToOutput("_this");\n            }\n            else {\n                this.writeToOutput("this");\n            }\n        }\n\n        private static shouldCaptureThis(func: FuncDecl): bool {\n            // Super calls use \'this\' reference. If super call is in a lambda, \'this\' value needs to be captured in the parent.\n            return func.hasSelfReference() || func.hasSuperReferenceInFatArrowFunction();\n        }\n\n        private createFile(fileName: string, useUTF8: bool): ITextWriter {\n            try {\n                return this.emitOptions.ioHost.createFile(fileName, useUTF8);\n            } catch (ex) {\n                this.errorReporter.emitterError(null, ex.message);\n            }\n        }\n    }\n}\n//\n// Copyright (c) Microsoft Corporation.  All rights reserved.\n// \n// Licensed under the Apache License, Version 2.0 (the "License");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an "AS IS" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n\n///<reference path=\'typescript.ts\' />\n\nmodule TypeScript {\n    export interface ILineCol {\n        line: number;\n        col: number;\n    }\n\n    export class ErrorReporter {\n        public parser: Parser = null;\n        public checker: TypeChecker = null;\n        public lineCol = { line: 0, col: 0 };\n        public emitAsComments = true;\n        public hasErrors = false;\n        public pushToErrorSink = false;\n        public errorSink: string[] = [];\n\n        constructor (public outfile: ITextWriter) { }\n\n        public getCapturedErrors() { return this.errorSink; }\n        public freeCapturedErrors() { this.errorSink = []; }\n        public captureError(emsg: string) { this.errorSink[this.errorSink.length] = emsg; }\n\n        public setErrOut(outerr) {\n            this.outfile = outerr;\n            this.emitAsComments = false;\n        }\n\n        public emitPrefix() {\n            if (this.emitAsComments) {\n                this.outfile.Write("// ");\n            }\n            this.outfile.Write(this.checker.locationInfo.filename + "(" + this.lineCol.line + "," + this.lineCol.col + "): ");\n        }\n\n        public writePrefix(ast: AST): void {\n            if (ast) {\n                this.setError(ast);\n            }\n            else {\n                this.lineCol.line = 0;\n                this.lineCol.col = 0;\n            }\n            this.emitPrefix();\n        }\n\n        public writePrefixFromSym(symbol: Symbol): void {\n            if (symbol && this.checker.locationInfo.lineMap) {\n                getSourceLineColFromMap(this.lineCol, symbol.location,\n                                        this.checker.locationInfo.lineMap);\n            }\n            else {\n                this.lineCol.line = -1;\n                this.lineCol.col = -1;\n            }\n            this.emitPrefix();\n        }\n\n        public setError(ast: AST) {\n            if (ast) {\n                ast.flags |= ASTFlags.Error;\n                if (this.checker.locationInfo.lineMap) {\n                    getSourceLineColFromMap(this.lineCol, ast.minChar, this.checker.locationInfo.lineMap);\n                }\n            }\n        }\n\n        public reportError(ast: AST, message: string) {\n            if (this.pushToErrorSink) {\n                this.captureError(message);\n                return;\n            }\n\n            this.hasErrors = true;\n            if (ast && this.parser.errorRecovery && this.parser.errorCallback) {\n                var len = (ast.limChar - ast.minChar);\n                this.parser.errorCallback(ast.minChar, len, message, this.checker.locationInfo.unitIndex);\n            }\n            else {\n                this.writePrefix(ast);\n                this.outfile.WriteLine(message); // Right after the semi-colon\n            }\n        }\n\n        public reportErrorFromSym(symbol: Symbol, message: string) {\n            if (this.pushToErrorSink) {\n                this.captureError(message);\n                return;\n            }\n\n            this.hasErrors = true;\n            if (this.parser.errorRecovery && this.parser.errorCallback) {\n                this.parser.errorCallback(symbol.location, symbol.length, message, this.checker.locationInfo.unitIndex);\n            }\n            else {\n                this.writePrefixFromSym(symbol);\n                this.outfile.WriteLine(message);\n            }\n        }\n\n        public emitterError(ast: AST, message: string) {\n            this.reportError(ast, message);\n            // Emitter errors are not recoverable, stop immediately\n            throw Error("EmitError");\n        }\n\n        public duplicateIdentifier(ast: AST, name: string) {\n            this.reportError(';
var v27301 = v27302 + 'ast, "Duplicate identifier \'" + name + "\'");\n        }\n\n        public showRef(ast: AST, text: string, symbol: Symbol) {\n            var defLineCol = { line: -1, col: -1 };\n            // TODO: multiple def locations\n            this.parser.getSourceLineCol(defLineCol, symbol.location);\n            this.reportError(ast, "symbol " + text + " defined at (" + defLineCol.line + "," +\n                              defLineCol.col + ")");\n        }\n\n        public unresolvedSymbol(ast: AST, name: string) {\n            this.reportError(ast, "The name \'" + name + "\' does not exist in the current scope");\n        }\n\n        public symbolDoesNotReferToAValue(ast: AST, name: string): void {\n            this.reportError(ast, "The name \'" + name + "\' does not refer to a value");\n        }\n\n        public styleError(ast: AST, msg: string): void {\n            var bkThrow = this.pushToErrorSink;\n            this.pushToErrorSink = false;\n            this.reportError(ast, "STYLE: " + msg);\n            this.pushToErrorSink = bkThrow;\n        }\n\n        public simpleError(ast: AST, msg: string): void {\n            this.reportError(ast, msg);\n        }\n\n        public simpleErrorFromSym(sym: Symbol, msg: string): void {\n            this.reportErrorFromSym(sym, msg);\n        }\n\n        public invalidSuperReference(ast: AST) {\n            this.simpleError(ast, "Keyword \'super\' can only be used inside a class instance method");\n        }\n\n        public valueCannotBeModified(ast: AST) {\n            this.simpleError(ast, "The left-hand side of an assignment expression must be a variable, property or indexer");\n        }\n\n        public invalidCall(ast: CallExpression, nodeType: number, scope: SymbolScope): void {\n            var targetType = ast.target.type;\n            var typeName = targetType.getScopedTypeName(scope);\n            if (targetType.construct && (nodeType == NodeType.Call)) {\n                this.reportError(ast, "Value of type \'" + typeName + "\' is not callable.  Did you mean to include \'new\'?");\n            } else {\n                var catString = (nodeType == NodeType.Call) ? "callable" : "newable";\n\n                this.reportError(ast, "Value of type \'" + typeName + "\' is not " + catString);\n            }\n        }\n\n        public indexLHS(ast: BinaryExpression, scope: SymbolScope): void {\n            var targetType = ast.operand1.type.getScopedTypeName(scope);\n            var indexType = ast.operand2.type.getScopedTypeName(scope);\n            this.simpleError(ast, "Value of type \'" + targetType + "\' is not indexable by type \'" + indexType + "\'");\n        }\n\n        public incompatibleTypes(ast: AST, t1: Type, t2: Type, op: string, scope: SymbolScope, comparisonInfo?:TypeComparisonInfo) {\n            if (!t1) {\n                t1 = this.checker.anyType;\n            }\n            if (!t2) {\n                t2 = this.checker.anyType;\n            }\n\n            var reason = comparisonInfo ? comparisonInfo.message : "";\n            if (op) {\n                this.reportError(ast, "Operator \'" + op + "\' cannot be applied to types \'" + t1.getScopedTypeName(scope) +\n                                  "\' and \'" + t2.getScopedTypeName(scope) + "\'" + (reason ? ": " + reason : ""));\n            }\n            else {\n                this.reportError(ast, "Cannot convert \'" + t1.getScopedTypeName(scope) +\n                                  "\' to \'" + t2.getScopedTypeName(scope) + "\'" + (reason ? ": " + reason : ""));\n            }\n        }\n\n        public expectedClassOrInterface(ast: AST): void {\n            this.simpleError(ast, "Expected var, class, interface, or module");\n        }\n\n        public unaryOperatorTypeError(ast: AST, op: string, type: Type) {\n            this.reportError(ast, "Operator \'" + op + "\' cannot be applied to type \'" + type.getTypeName() + "\'");\n        }\n    }\n}//\n// Copyright (c) Microsoft Corporation.  All rights reserved.\n// \n// Licensed under the Apache License, Version 2.0 (the "License");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an "AS IS" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n\n///<reference path=\'typescript.ts\' />\n\nmodule TypeScript {\n\n    export function hasFlag(val: number, flag: number) {\n        return (val & flag) != 0;\n    }\n\n    export enum ErrorRecoverySet {\n        None = 0,\n        Comma = 1, // Comma\n        SColon = 1 << 1, // SColon\n        Asg = 1 << 2, // Asg\n        BinOp = 1 << 3, // Lsh, Rsh, Rs2, Le, Ge, INSTANCEOF, EQ, NE, Eqv, NEqv, LogAnd, LogOr, AsgMul, AsgDiv\n        // AsgMod, AsgAdd, AsgSub, AsgLsh, AsgRsh, AsgRs2, AsgAnd, AsgXor, AsgOr, QMark, Mult, Div, \n        // Pct, GT, LT, ';
var v27300 = v27301 + "And, Xor, Or\n        RBrack = 1 << 4, // RBrack\n        RCurly = 1 << 5, // RCurly\n        RParen = 1 << 6, // RParen\n        Dot = 1 << 7, // Dot\n        Colon = 1 << 8, // Colon\n        PrimType = 1 << 9, // number, string, bool\n        AddOp = 1 << 10, // Add, Sub\n        LCurly = 1 << 11, // LCurly\n        PreOp = 1 << 12, // Tilde, Bang, Inc, Dec\n        RegExp = 1 << 13, // RegExp\n        LParen = 1 << 14, // LParen\n        LBrack = 1 << 15, // LBrack\n        Scope = 1 << 16, // Scope\n        In = 1 << 17, // IN\n        SCase = 1 << 18, // CASE, DEFAULT\n        Else = 1 << 19, // ELSE\n        Catch = 1 << 20, // CATCH, FINALLY\n        Var = 1 << 21, // \n        Stmt = 1 << 22, // BREAK, RETURN, THROW, DEBUGGER, FOR, SWITCH, DO, IF, TRY, WITH\n        While = 1 << 23, // WHILE\n        ID = 1 << 24, // ID\n        Prefix = 1 << 25, // VOID, DELETE, TYPEOF, AWAIT\n        Literal = 1 << 26, // IntCon, FltCon, StrCon\n        RLit = 1 << 27, // THIS, TRUE, FALSE, NULL\n        Func = 1 << 28, // FUNCTION\n        EOF = 1 << 29, // EOF\n\n        // REVIEW: Name this something clearer.\n        TypeScriptS = 1 << 30, // PROPERTY, PRIVATE, STATIC, INTERFACE, CLASS, MODULE, EXPORT, IMPORT\n        ExprStart = SColon | AddOp | LCurly | PreOp | RegExp | LParen | LBrack | ID | Prefix | RLit | Func | Literal,\n        StmtStart = ExprStart | SColon | Var | Stmt | While | TypeScriptS,\n        Postfix = Dot | LParen | LBrack,\n    }\n\n    export enum AllowedElements {\n        None = 0,\n        ModuleDeclarations = 1 << 2,\n        ClassDeclarations = 1 << 3,\n        InterfaceDeclarations = 1 << 4,\n        AmbientDeclarations = 1 << 10,\n        Properties = 1 << 11,\n\n        Global = ModuleDeclarations | ClassDeclarations | InterfaceDeclarations | AmbientDeclarations,\n        QuickParse = Global | Properties,\n    }\n\n    export enum Modifiers {\n        None = 0,\n        Private = 1,\n        Public = 1 << 1,\n        Readonly = 1 << 2,\n        Ambient = 1 << 3,\n        Exported = 1 << 4,\n        Getter = 1 << 5,\n        Setter = 1 << 6,\n        Static = 1 << 7,\n    }\n\n    export enum ASTFlags {\n        None = 0,\n        ExplicitSemicolon = 1, // statment terminated by an explicit semicolon\n        AutomaticSemicolon = 1 << 1, // statment terminated by an automatic semicolon\n        Writeable = 1 << 2,  // node is lhs that can be modified\n        Error = 1 << 3, // node has an error\n        DotLHSPartial = 1 << 4, // node is the lhs of an incomplete dot expr at cursor\n        DotLHS = 1 << 5, // node is the lhs of a dot expr\n        IsStatement = 1 << 6, // node is a statement\n        StrictMode = 1 << 7, // node is in the strict mode environment\n        PossibleOptionalParameter = 1 << 8,\n        ClassBaseConstructorCall = 1 << 9,\n        OptionalName = 1 << 10,\n        // REVIEW: This flag is to mark lambda nodes to note that the LParen of an expression has already been matched in the lambda header.\n        //         The flag is used to communicate this piece of information to the calling parseTerm, which intern will remove it.\n        //         Once we have a better way to associate information with nodes, this flag should not be used.\n        SkipNextRParen = 1 << 11, \n    }\n\n    export enum DeclFlags {\n        None = 0,\n        Exported = 1,\n        Private = 1 << 1,\n        Public = 1 << 2,\n        Ambient = 1 << 3,\n        Static = 1 << 4,\n        LocalStatic = 1 << 5,\n        GetAccessor = 1 << 6,\n        SetAccessor = 1 << 7,\n    }\n\n    export enum ModuleFlags {\n        None = 0,\n        Exported = 1,\n        Private = 1 << 1,\n        Public = 1 << 2,\n        Ambient = 1 << 3,\n        Static = 1 << 4,\n        LocalStatic = 1 << 5,\n        GetAccessor = 1 << 6,\n        SetAccessor = 1 << 7,\n        IsEnum = 1 << 8,\n        ShouldEmitModuleDecl = 1 << 9,\n        IsWholeFile = 1 << 10,\n        IsDynamic = 1 << 11,\n        MustCaptureThis = 1 << 12,\n    }\n\n    export enum SymbolFlags {\n        None = 0,\n        Exported = 1,\n        Private = 1 << 1,\n        Public = 1 << 2,\n        Ambient = 1 << 3,\n        Static = 1 << 4,\n        LocalStatic = 1 << 5,\n        GetAccessor = 1 << 6,\n        SetAccessor = 1 << 7,\n        Property = 1 << 8,\n        Readonly = 1 << 9,\n        ModuleMember = 1 << 10,\n        InterfaceMember = 1 << 11,\n        ClassMember = 1 << 12,\n        BuiltIn = 1 << 13,\n        TypeSetDuringScopeAssignment = 1 << 14,\n        Constant = 1 << 15,\n        Optional = 1 << 16,\n        RecursivelyReferenced = 1 << 17,\n        Bound = 1 << 18,\n        CompilerGenerated = 1 << 19,\n    }\n\n    export enum VarFlags {\n        None = 0,\n        Exported = 1,\n        Private = 1 << 1,\n        Public = 1 << 2,\n        Ambient = 1 << 3,\n        Static = 1 << 4,\n        LocalStatic = 1 << 5,\n        GetAccessor = 1 << 6,\n        SetAccessor = 1 << 7,\n        AutoInit = 1 << 8,\n        Property = 1 << 9,\n        Readonly = 1 << 10,\n        Class = 1 << 11,\n        ClassProperty = 1 << 12,\n        ClassBodyProperty = 1 << 13,";
var v27299 = v27300 + '\n        ClassConstructorProperty = 1 << 14,\n        ClassSuperMustBeFirstCallInConstructor = 1 << 15,\n        Constant = 1 << 16,\n        MustCaptureThis = 1 << 17,\n    }\n\n    export enum FncFlags {\n        None = 0,\n        Exported = 1,\n        Private = 1 << 1,\n        Public = 1 << 2,\n        Ambient = 1 << 3,\n        Static = 1 << 4,\n        LocalStatic = 1 << 5,\n        GetAccessor = 1 << 6,\n        SetAccessor = 1 << 7,\n        Definition = 1 << 8,\n        Signature = 1 << 9,\n        Method = 1 << 10,\n        HasReturnExpression = 1 << 11,\n        CallMember = 1 << 12,\n        ConstructMember = 1 << 13,\n        HasSelfReference = 1 << 14,\n        IsFatArrowFunction = 1 << 15,\n        IndexerMember = 1 << 16,\n        IsFunctionExpression = 1 << 17,\n        ClassMethod = 1 << 18,\n        ClassPropertyMethodExported = 1 << 19,\n        HasSuperReferenceInFatArrowFunction = 1 << 20,\n        IsPropertyBound = 1 << 21,\n    }\n\n    export enum SignatureFlags {\n        None = 0,\n        IsIndexer = 1,\n        IsStringIndexer = 1 << 1,\n        IsNumberIndexer = 1 << 2,\n    }\n\n    export function ToDeclFlags(fncFlags: FncFlags) : DeclFlags;\n    export function ToDeclFlags(varFlags: VarFlags) : DeclFlags;\n    export function ToDeclFlags(symFlags: SymbolFlags): DeclFlags;\n    export function ToDeclFlags(moduleFlags: ModuleFlags): DeclFlags;\n    export function ToDeclFlags(fncOrVarOrSymbolOrModuleFlags: any) {\n        return <DeclFlags>fncOrVarOrSymbolOrModuleFlags;\n    }\n\n    export enum TypeFlags {\n        None = 0,\n        HasImplementation = 1,\n        HasSelfReference = 1 << 1,\n        MergeResult = 1 << 2,\n        IsEnum = 1 << 3,\n        BuildingName = 1 << 4,\n        HasBaseType = 1 << 5,\n        HasBaseTypeOfObject = 1 << 6,\n        IsClass = 1 << 7,\n    }\n\n    export enum TypeRelationshipFlags {\n        SuccessfulComparison = 0,\n        SourceIsNullTargetIsVoidOrUndefined = 1,\n        RequiredPropertyIsMissing = 1 << 1,\n        IncompatibleSignatures = 1 << 2,\n        SourceSignatureHasTooManyParameters = 3,\n        IncompatibleReturnTypes = 1 << 4,\n        IncompatiblePropertyTypes = 1 << 5,\n        IncompatibleParameterTypes = 1 << 6,\n    }\n\n    export enum CodeGenTarget {\n        ES3 = 0,\n        ES5 = 1,\n    }\n\n    export enum ModuleGenTarget {\n        Synchronous = 0,\n        Asynchronous = 1,\n        Local = 1 << 1,\n    }\n\n    // Compiler defaults to generating ES5-compliant code for\n    //  - getters and setters\n    export var codeGenTarget: CodeGenTarget = CodeGenTarget.ES3;\n\n    export var moduleGenTarget: ModuleGenTarget = ModuleGenTarget.Synchronous;\n\n    export var optimizeModuleCodeGen = true;\n\n    export function flagsToString(e, flags: number): string {\n        var builder = "";\n        for (var i = 1; i < (1 << 31) ; i = i << 1) {\n            if ((flags & i) != 0) {\n                for (var k in e) {\n                    if (e[k] == i) {\n                        if (builder.length > 0) {\n                            builder += "|";\n                        }\n                        builder += k;\n                        break;\n                    }\n                }\n            }\n        }\n        return builder;\n    }\n\n}//\n// Copyright (c) Microsoft Corporation.  All rights reserved.\n// \n// Licensed under the Apache License, Version 2.0 (the "License");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an "AS IS" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n\n///<reference path=\'typescript.ts\' />\n\nmodule TypeScript {\n\n    export class BlockIntrinsics {\n        public prototype = undefined;\n        public toString = undefined;\n        public toLocaleString = undefined;\n        public valueOf = undefined;\n        public hasOwnProperty = undefined;\n        public propertyIsEnumerable = undefined;\n        public isPrototypeOf = undefined;\n\n        constructor () {\n            // initialize the \'constructor\' field\n            this["constructor"] = undefined;\n        }\n    }\n\n    export interface IHashTable {\n        getAllKeys(): string[];\n        add(key: string, data): bool;\n        addOrUpdate(key: string, data): bool;\n        map(fn: (k: string, v, c) => void , context): void;\n        every(fn: (k: string, v, c) => bool, context): bool;\n        some(fn: (k: string, v, c) => bool, context): bool;\n        count(): number;\n        lookup(key: string): any;\n    }\n\n    export class StringHashTable implements IHashTable {\n        public itemCount = 0;\n        public table = <any>(<any> new BlockIntrinsics());\n\n        public getAllKeys(): string[]{\n            var result: string[] = [];\n            for (var k in this.table) {\n ';
var v27298 = v27299 + "               if (this.table[k] != undefined) {\n                    result[result.length] = k;\n                }\n            }\n            return result;\n        }\n\n        public add(key: string, data): bool {\n            if (this.table[key] != undefined) {\n                return false;\n            }\n            this.table[key] = data;\n            this.itemCount++;\n            return true;\n        }\n\n        public addOrUpdate(key: string, data): bool {\n            if (this.table[key] != undefined) {\n                this.table[key] = data;\n                return false;\n            }\n            this.table[key] = data;\n            this.itemCount++;\n            return true;\n        }\n\n        public map(fn: (k: string, v, c) => void , context) {\n            for (var k in this.table) {\n                var data = this.table[k];\n                if (data != undefined) {\n                    fn(k, this.table[k], context);\n                }\n            }\n        }\n\n        public every(fn: (k: string, v, c) => bool, context) {\n            for (var k in this.table) {\n                var data = this.table[k];\n                if (data != undefined) {\n                    if (!fn(k, this.table[k], context)) {\n                        return false;\n                    }\n                }\n            }\n            return true;\n        }\n\n        public some(fn: (k: string, v, c) => bool, context) {\n            for (var k in this.table) {\n                var data = this.table[k];\n                if (data != undefined) {\n                    if (fn(k, this.table[k], context)) {\n                        return true;\n                    }\n                }\n            }\n            return false;\n        }\n\n        public count(): number { return this.itemCount; }\n\n        public lookup(key: string) {\n            var data = this.table[key];\n            if (data != undefined) {\n                return data;\n            }\n            else {\n                return (null);\n            }\n        }\n    }\n\n    // The resident table is expected to reference the same table object, whereas the \n    // transientTable may reference different objects over time\n    // REVIEW:  WARNING:  For performance reasons, neither the primary nor secondary table may be null\n    export class DualStringHashTable implements IHashTable {\n\n        public insertPrimary = true;\n\n        constructor (public primaryTable: IHashTable,\n                                        public secondaryTable: IHashTable) { }\n\n        public getAllKeys(): string[]{\n            return this.primaryTable.getAllKeys().concat(this.secondaryTable.getAllKeys());\n        }\n\n        public add(key: string, data): bool {\n            if (this.insertPrimary) {\n                return this.primaryTable.add(key, data);\n            }\n            else {\n                return this.secondaryTable.add(key, data);\n            }\n        }\n\n        public addOrUpdate(key: string, data): bool {\n            if (this.insertPrimary) {\n                return this.primaryTable.addOrUpdate(key, data);\n            }\n            else {\n                return this.secondaryTable.addOrUpdate(key, data);\n            }\n        }\n\n        public map(fn: (k: string, v, c) => void , context) {\n            this.primaryTable.map(fn, context);\n            this.secondaryTable.map(fn, context);\n        }\n\n        public every(fn: (k: string, v, c) => bool, context) {\n            return this.primaryTable.every(fn, context) && this.secondaryTable.every(fn, context);\n        }\n\n        public some(fn: (k: string, v, c) => bool, context) {\n            return this.primaryTable.some(fn, context) || this.secondaryTable.some(fn, context);\n        }\n\n        public count() {\n            return this.primaryTable.count() + this.secondaryTable.count();\n        }\n\n        public lookup(key: string) {\n            var data = this.primaryTable.lookup(key);\n            if (data != undefined) {\n                return data;\n            }\n            else {\n                return this.secondaryTable.lookup(key);\n            }\n        }\n    }\n\n    export function numberHashFn(key: number): number {\n        var c2 = 0x27d4eb2d; // a prime or an odd constant\n        key = (key ^ 61) ^ (key >>> 16);\n        key = key + (key << 3);\n        key = key ^ (key >>> 4);\n        key = key * c2;\n        key = key ^ (key >>> 15);\n        return key;\n    }\n\n    export function combineHashes(key1: number, key2: number) {\n        return key2 ^ ((key1 >> 5) + key1);\n    }\n\n    export class HashEntry {\n        public next: HashEntry;\n\n        constructor (public key, public data) { }\n    }\n\n    export class HashTable {\n        public itemCount: number = 0;\n        public table = new HashEntry[];\n\n        constructor (public size: number, public hashFn: (key) =>number,\n                    public equalsFn: (key1, key2) =>bool) {\n            for (var i: number = 0; i < this.size; i++) {\n                this.table[i] = null;\n            }\n        }\n\n        publi";
var v27297 = v27298 + 'c add(key, data): bool {\n            var current: HashEntry;\n            var entry: HashEntry = new HashEntry(key, data);\n            var val: number = this.hashFn(key);\n            val = val % this.size;\n\n            for (current = this.table[val]; current != null ; current = current.next) {\n                if (this.equalsFn(key, current.key)) {\n                    return false;\n                }\n            }\n            entry.next = this.table[val];\n            this.table[val] = entry;\n            this.itemCount++;\n            return true;\n        }\n\n        public remove(key) {\n            var current: HashEntry;\n            var val: number = this.hashFn(key);\n            val = val % this.size;\n            var result = null;\n            var prevEntry: HashEntry = null;\n\n            for (current = this.table[val]; current != null ; current = current.next) {\n                if (this.equalsFn(key, current.key)) {\n                    result = current.data;\n                    this.itemCount--;\n                    if (prevEntry) {\n                        prevEntry.next = current.next;\n                    }\n                    else {\n                        this.table[val] = current.next;\n                    }\n                    break;\n                }\n                prevEntry = current;\n            }\n            return result;\n        }\n\n        public count(): number { return this.itemCount; }\n\n        public lookup(key) {\n            var current: HashEntry;\n            var val: number = this.hashFn(key);\n            val = val % this.size;\n            for (current = this.table[val]; current != null ; current = current.next) {\n                if (this.equalsFn(key, current.key)) {\n                    return (current.data);\n                }\n            }\n            return (null);\n        }\n    }\n\n    // Simple Hash table with list of keys and values matching each other at the given index\n    export class SimpleHashTable {\n        private keys = [];\n        private values = [];\n\n        public lookup(key, findValue?: bool) {\n            var searchArray = this.keys;\n            if (findValue) {\n                searchArray = this.values;\n            }\n\n            for (var i = 0; i < searchArray.length; i++) {\n                if (searchArray[i] == key) {\n                    return {\n                        key: this.keys[i],\n                        data: this.values[i],\n                    };\n                }\n            }\n            return null;\n        }\n\n        public add(key, data): bool {\n            var lookupData = this.lookup(key);\n            if (lookupData) {\n                return false;\n            }\n\n            this.keys[this.keys.length] = key;\n            this.values[this.values.length] = data;\n\n            return true;\n        }\n    }\n\n}//\n// Copyright (c) Microsoft Corporation.  All rights reserved.\n// \n// Licensed under the Apache License, Version 2.0 (the "License");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an "AS IS" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n\n///<reference path=\'typescript.ts\' />\n\nmodule TypeScript {\n\n    export class IncrementalParser {\n        \n        private astLogger: AstLogger;\n\n        constructor (private logger: TypeScript.ILogger) {\n            this.astLogger = new AstLogger(this.logger);\n        }\n\n        //\n        // Return "null" if "editRange" cannot be safely determined to be inside a single scope.\n        //\n        public getEnclosingScopeContextIfSingleScopeEdit(previousScript: Script, scriptId: string, newSourceText: ISourceText, editRange: ScriptEditRange): EnclosingScopeContext {\n            this.logger.log("checkEditsInsideSingleScope(\\"" + scriptId + "\\")");\n\n            if (editRange === null) {\n                throw new Error("editRange should be valid");\n            }\n\n            if (editRange.isUnknown()) {\n                this.logger.log("  Bailing out because edit range is unknown");\n                return null;\n            }\n\n            var scope1 = TypeScript.findEnclosingScopeAt(this.logger, previousScript, newSourceText, editRange.minChar, false/*isMemberCompletion*/);\n            var scope2 = TypeScript.findEnclosingScopeAt(this.logger, previousScript, newSourceText, editRange.limChar, false/*isMemberCompletion*/);\n            if (scope1 == null || scope2 == null) {\n                this.logger.log("  Bailing out because containing scopes cannot be determined");\n                return null;\n            }\n\n            // We only support changes within a single containing scope\n            if (scope1.scopeStartAST !== scope2.scopeStartAST) {\n      ';
var v27296 = v27297 + '          this.logger.log("  Bailing out because edit overlaps 2 disctint scopes");\n                return null;\n            }\n\n            var newScopeLength = scope1.scopeStartAST.limChar - scope1.scopeStartAST.minChar + editRange.delta;\n            if (newScopeLength <= 0) {\n                this.logger.log("  Bailing out because scope has been entirely removed from new source text");\n                return null;\n            }\n\n            return scope1;\n        }\n\n        public attemptIncrementalUpdateUnit(previousScript: Script, scriptId: string, newSourceText: ISourceText, editRange: ScriptEditRange): UpdateUnitResult {\n            this.logger.log("attemptIncrementalUpdateUnit(\\"" + scriptId + "\\")");\n\n            if (editRange === null) {\n                throw new Error("editRange should be valid");\n            }\n\n            var scope1 = this.getEnclosingScopeContextIfSingleScopeEdit(previousScript, scriptId, newSourceText, editRange);\n            if (scope1 === null) {\n                return null;\n            }\n\n            var newScopeLength = scope1.scopeStartAST.limChar - scope1.scopeStartAST.minChar + editRange.delta;\n\n            // Heuristic: if the range to reparse is too big, bail out. \n            // This is because a full parse will be faster than an incremental parse followed by all the necessary fix-ups \n            if (newScopeLength >= newSourceText.getLength() / 2) {\n                this.logger.log("  Bailing out because range of scope to reparse (" + newScopeLength + " characters) is greater than half the size of the source text");\n                return null;\n            }\n\n            // Capture parsing errors so that they are part of "updateResult"\n            var parseErrors: TypeScript.ErrorEntry[] = [];\n            var errorCapture = function(minChar: number, charLen: number, message: string, unitIndex: number): void {\n                parseErrors.push(new TypeScript.ErrorEntry(unitIndex, minChar, minChar + charLen, message));\n            };\n\n            var quickParseResult = TypeScript.quickParse(this.logger, scope1.scopeStartAST, newSourceText, scope1.scopeStartAST.minChar, scope1.scopeStartAST.minChar + newScopeLength, errorCapture);\n            if (quickParseResult.endLexState != TypeScript.LexState.Start) {\n                this.logger.log("  Bailing out because scope contains unterminated comment");\n                return null;\n            }\n\n            var scriptFragment = quickParseResult.Script;\n            if (scriptFragment.vars.members.length !== 0) {\n                this.logger.log("  Bailing out because new source text defines variables");\n                return null;\n            }\n\n            //if (scriptFragment.scopes.members.length !== 1) {\n            //    logger.log("  Bailing out because new source text defines more than one scope (or none)");\n            //    return null;\n            //}\n\n            // This detects adding close curlies, since they have the side effect of having the parser \n            // parse more members in the scope range.\n            if (scriptFragment.bod.members.length !== 1) {\n                this.logger.log("  Bailing out because new source text defines more than one scope (or none)");\n                return null;\n            }\n\n            var oldScope = scope1.scopeStartAST;\n            var newScope = scriptFragment.bod.members[0];\n\n            if (oldScope.nodeType != newScope.nodeType) {\n                this.logger.log("  Bailing out because new source text does not define the same scope type as the existing scope");\n                return null;\n            }\n\n            if (!(<any>oldScope).leftCurlyCount || !(<any>oldScope).rightCurlyCount) {\n                this.logger.log("  Bailing out because sopce doesn\'t have left/right curly count");\n                return null;\n            }\n\n            if ((<any>oldScope).leftCurlyCount !== (<any>newScope).leftCurlyCount) {\n                this.logger.log("  Bailing out because new source text contains more (or fewer) left curly braces");\n                return null;\n            }\n\n            if ((<any>oldScope).rightCurlyCount !== (<any>newScope).rightCurlyCount) {\n                this.logger.log("  Bailing out because new source text contains more (or fewer) right curly braces");\n                return null;\n            }\n\n            if (newScope.minChar !== 0) {\n                this.logger.log("  Bailing out because new function declaration does not start at position 0");\n                return null;\n            }\n\n            if (newScope.limChar !== newScopeLength) {\n                this.logger.log("  Bailing out because new function declaration does not end at the new end position");\n                return null;\n            }\n\n            return TypeScript.UpdateUnitResult.singleScopeEdits(previousScript, scriptFragment, oldScope, newScope, editRange, parseErrors);\n        }\n\n        public mergeTrees(updateResult: UpdateUnitResult): void {\n            TypeScript.timeF';
var v27295 = v27296 + 'unction(this.logger, "mergeTrees()", () => {\n                var editRange = new ScriptEditRange(updateResult.scope1.minChar, updateResult.scope1.limChar, updateResult.editRange.delta);\n                // Update positions in current ast\n                this.applyDeltaPosition(updateResult.script1, editRange.limChar, editRange.delta);\n                // Update positions in new (partial) ast\n                this.applyDeltaPosition(updateResult.script2, 0, editRange.minChar);\n                // Merge linemaps\n                this.mergeLocationInfo(updateResult.script1, updateResult.script2, editRange);\n                //  Replace old AST for scope with new one\n                this.replaceAST(updateResult.script1, updateResult.scope1, updateResult.scope2);\n            });\n        }\n\n        private replaceAST(script: TypeScript.AST, oldAst: TypeScript.AST, newAst: TypeScript.AST) {\n            var pre = (cur: TypeScript.AST, parent: TypeScript.AST, walker: TypeScript.IAstWalker) => {\n                if (cur === oldAst) {\n                    // Transfer comments ownership to new AST. We need this because when "quick parsing" the\n                    // new AST, we don\'t take into account the text before and after the "minChar/limChar" pair\n                    // of the scope, which don\'t include pre/post-comments.\n                    newAst.preComments = cur.preComments;\n                    newAst.postComments = cur.postComments;\n\n                    this.logger.log("replaced old AST node with new one in script AST");\n                    walker.options.stopWalk();\n                    return newAst;\n                }\n\n                // Avoid visiting sub-trees outside of the edit range\n                if (TypeScript.isValidAstNode(cur)) {\n                    if (cur.limChar < oldAst.minChar || cur.minChar > oldAst.limChar) {\n                        walker.options.goChildren = false;\n                    }\n                }\n                return cur;\n            }\n\n            TypeScript.getAstWalkerFactory().walk(script, pre);\n        }\n\n        private mergeLocationInfo(script: TypeScript.Script, partial: TypeScript.Script, editRange: ScriptEditRange) {\n            // Don\'t merger these fields, as the original script has the right values\n            //script.locationInfo.unitIndex = partial.locationInfo.unitIndex;\n            //script.locationInfo.filename = partial.locationInfo.filename;\n\n            var lineMap1 = script.locationInfo.lineMap;\n            var lineMap2 = partial.locationInfo.lineMap;\n\n            if (this.logger.information()) {\n                this.logger.log("lineMap1 (before):");\n                this.astLogger.logLinemap(lineMap1);\n                this.logger.log("lineMap2 (quick parse):");\n                this.astLogger.logLinemap(lineMap2);\n                this.logger.log("EditRange=" + editRange);\n            }\n\n            // Skip entries < minChar\n            var i1 = 2; // lineMap[0] is always undefined, lineMap[1] is always 0.\n            var i2 = 2; // lineMap[0] is always undefined, lineMap[1] is always 0.\n            var len1 = lineMap1.length;\n            var len2 = lineMap2.length;\n            while (i1 < len1) {\n                if (lineMap1[i1] <= editRange.minChar) {\n                    // Nothing to do for this entry, since it\'s before the range of the change\n                    i1++;\n                } else if (lineMap1[i1] >= editRange.limChar) {\n                    // Apply delta to this entry, since it\'s outside the range of the change\n                    lineMap1[i1] += editRange.delta;\n                    i1++;\n                }\n                else {\n                    if (i2 < len2) {\n                        // Add a new entry to lineMap1 corresponding to lineMap2 in new range\n                        lineMap1.splice(i1, 0, lineMap2[i2] + editRange.minChar);\n                        i1++;\n                        len1++;\n                        i2++;\n                    }\n                    else { /* i2 >= len 2 */\n                        // Remove this entry, since there is no corresponding entry in the new map\n                        lineMap1.splice(i1, 1);\n                        len1--;\n                    }\n                }\n            }\n            // Merge the remaining entries in lineMap2 while maintaing the constraint that a lineMap is sorted\n            if (i2 < len2) {\n                // i1 >= len1 && i2 < len2 \n                if (lineMap1[len1 - 1] >= (lineMap2[i2] + editRange.minChar)) {\n                    // lineMap2 needs to be merged within lineMap1\n                    i1 = 2;\n                    while (i1 < len1 && i2 < len2) {\n                        if (lineMap1[i1] < (lineMap2[i2] + editRange.minChar)) {\n                            i1++;\n                        }\n                        else {\n                            lineMap1.splice(i1, 0, lineMap2[i2] + editRange.minChar);\n                            i1++;\n                            len1++;\n  ';
var v27294 = v27295 + '                          i2++;\n                        }\n                    }\n                }\n\n                // Append all the remaining entries in lineMap2 to the end of lineMap1\n                for (; i2 < len2; i2++) {\n                    lineMap1.push(lineMap2[i2] + editRange.minChar);\n                }\n            }\n\n            if (this.logger.information()) {\n                this.logger.log("lineMap1 (after merge):");\n                this.astLogger.logLinemap(lineMap1);\n            }\n        }\n\n        private applyDeltaPosition(ast: TypeScript.AST, start: number, delta: number) {\n            var applyDelta = (ast: TypeScript.AST) => {\n                if (ast.minChar !== -1 && ast.minChar >= start) {\n                    ast.minChar += delta;\n                }\n                if (ast.limChar !== -1 && ast.limChar >= start) {\n                    ast.limChar += delta;\n                }\n            }\n\n            var applyDeltaToComments = (comments: TypeScript.Comment[]) => {\n                if (comments && comments.length > 0) {\n                    for (var i = 0; i < comments.length; i++) {\n                        applyDelta(comments[i]);\n                    }\n                }\n            }\n\n            var pre = function(cur: TypeScript.AST, parent: TypeScript.AST, walker: TypeScript.IAstWalker) {\n                // *Before* applying delta to this, check if we need to go to children\n                if (cur.limChar !== -1 && cur.limChar < start) {\n                    walker.options.goChildren = false; // Done with applying Delta for this sub-tree\n                }\n\n                // Apply delta to this node\n                applyDelta(cur);\n                applyDeltaToComments(cur.preComments);\n                applyDeltaToComments(cur.postComments);\n\n                return cur;\n            }\n\n            TypeScript.getAstWalkerFactory().walk(ast, pre);\n        }\n    }\n}\n//\n// Copyright (c) Microsoft Corporation.  All rights reserved.\n// \n// Licensed under the Apache License, Version 2.0 (the "License");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an "AS IS" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n\ninterface IResolvedFile {\n    content: string;\n    path: string;\n}\n\ninterface IFileWatcher {\n    close(): void;\n}\n\ninterface IIO {\n    readFile(path: string): string;\n    writeFile(path: string, contents: string): void;\n    createFile(path: string, useUTF8?: bool): ITextWriter;\n    deleteFile(path: string): void;\n    dir(path: string, re?: RegExp, options?: { recursive?: bool; }): string[];\n    fileExists(path: string): bool;\n    directoryExists(path: string): bool;\n    createDirectory(path: string): void;\n    resolvePath(path: string): string;\n    dirName(path: string): string;\n    findFile(rootPath: string, partialFilePath: string): IResolvedFile;\n    print(str: string): void;\n    printLine(str: string): void;\n    arguments: string[];\n    stderr: ITextWriter;\n    stdout: ITextWriter;\n    watchFile(filename: string, callback: (string) => void ): IFileWatcher;\n    run(source: string, filename: string): void;\n    getExecutingFilePath(): string;\n    quit(exitCode?: number);\n}\n\nmodule IOUtils {\n    // Creates the directory including its parent if not already present\n    function createDirectoryStructure(ioHost: IIO, dirName: string) {\n        if (ioHost.directoryExists(dirName)) {\n            return;\n        }\n\n        var parentDirectory = ioHost.dirName(dirName);\n        if (parentDirectory != "") {\n            createDirectoryStructure(ioHost, parentDirectory);\n        }\n        ioHost.createDirectory(dirName);\n    }\n\n    // Creates a file including its directory structure if not already present\n    export function createFileAndFolderStructure(ioHost: IIO, fileName: string, useUTF8?: bool) {\n        var path = ioHost.resolvePath(fileName);\n        var dirName = ioHost.dirName(path);\n        createDirectoryStructure(ioHost, dirName);\n        return ioHost.createFile(path, useUTF8);\n    }\n\n    export function throwIOError(message: string, error: Error) {\n        var errorMessage = message;\n        if (error && error.message) {\n            errorMessage += (" " + error.message);\n        }\n        throw new Error(errorMessage);\n    }\n}\n\n// Declare dependencies needed for all supported hosts\ndeclare class Enumerator {\n    public atEnd(): bool;\n    public moveNext();\n    public item(): any;\n    constructor (o: any);\n}\ndeclare function setTimeout(callback: () =>void , ms?: number);\ndeclare var require: any;\ndeclare module process {\n    export var argv: string[];\n    export var platform: string;\n    export function on(event: st';
var v27293 = v27294 + 'ring, handler: (any) => void ): void;\n    export module stdout {\n        export function write(str: string);\n    }\n    export module stderr {\n        export function write(str: string);\n    }\n    export module mainModule {\n        export var filename: string;\n    }\n    export function exit(exitCode?: number);\n}\n\nvar IO = (function() {\n\n    // Create an IO object for use inside WindowsScriptHost hosts\n    // Depends on WSCript and FileSystemObject\n    function getWindowsScriptHostIO(): IIO {\n        var fso = new ActiveXObject("Scripting.FileSystemObject");\n        var streamObjectPool = [];\n\n        function getStreamObject(): any { \n            if (streamObjectPool.length > 0) {\n                return streamObjectPool.pop();\n            }  else {\n                return new ActiveXObject("ADODB.Stream");\n            }\n        }\n\n        function releaseStreamObject(obj: any) { \n            streamObjectPool.push(obj);\n        }\n\n        var args = [];\n        for (var i = 0; i < WScript.Arguments.length; i++) {\n            args[i] = WScript.Arguments.Item(i);\n        }\n\n        return {\n            readFile: function(path) {\n                try {\n                    var streamObj = getStreamObject();\n                    streamObj.Open();\n                    streamObj.Type = 2; // Text data\n                    streamObj.Charset = \'x-ansi\'; // Assume we are reading ansi text\n                    streamObj.LoadFromFile(path);\n                    var bomChar = streamObj.ReadText(2); // Read the BOM char\n                    streamObj.Position = 0; // Position has to be at 0 before changing the encoding\n                    if ((bomChar.charCodeAt(0) == 0xFE && bomChar.charCodeAt(1) == 0xFF)\n                        || (bomChar.charCodeAt(0) == 0xFF && bomChar.charCodeAt(1) == 0xFE)) {\n                        streamObj.Charset = \'unicode\';\n                    } else if (bomChar.charCodeAt(0) == 0xEF && bomChar.charCodeAt(1) == 0xBB) {\n                        streamObj.Charset = \'utf-8\'; \n                    }\n\n                    // Read the whole file\n                    var str = streamObj.ReadText(-1 /* read from the current position to EOS */);\n                    streamObj.Close();\n                    releaseStreamObject(streamObj);\n                    return <string>str;\n                }\n                catch (err) {\n                    IOUtils.throwIOError("Error reading file \\"" + path + "\\".", err);\n                }\n            },\n\n            writeFile: function(path, contents) {\n                var file = this.createFile(path);\n                file.Write(contents);\n                file.Close();\n            },\n\n            fileExists: function(path: string): bool {\n                return fso.FileExists(path);\n            },\n\n            resolvePath: function(path: string): string {\n                return fso.GetAbsolutePathName(path);\n            },\n\n            dirName: function(path: string): string {\n                return fso.GetParentFolderName(path);\n            },\n\n            findFile: function(rootPath: string, partialFilePath: string): IResolvedFile {\n                var path = fso.GetAbsolutePathName(rootPath) + "/" + partialFilePath;\n\n                while (true) {\n                    if (fso.FileExists(path)) {\n                        try {\n                            var content = this.readFile(path);\n                            return { content: content, path: path };\n                        }\n                        catch (err) {\n                            //Tools.CompilerDiagnostics.debugPrint("Could not find " + path + ", trying parent");\n                        }\n                    }\n                    else {\n                        rootPath = fso.GetParentFolderName(fso.GetAbsolutePathName(rootPath));\n\n                        if (rootPath == "") {\n                            return null;\n                        }\n                        else {\n                            path = fso.BuildPath(rootPath, partialFilePath);\n                        }\n                    }\n                }\n            },\n\n            deleteFile: function(path: string): void {\n                try {\n                    if (fso.FileExists(path)) {\n                        fso.DeleteFile(path, true); // true: delete read-only files\n                    }\n                } catch (e) {\n                    IOUtils.throwIOError("Couldn\'t delete file \'" + path + "\'.", e);\n                }\n            },\n\n            createFile: function (path, useUTF8?) {\n                try {\n                    var streamObj = getStreamObject();\n                    streamObj.Charset = useUTF8 ? \'utf-8\' : \'x-ansi\';\n                    streamObj.Open();\n                    return {\n                        Write: function (str) { streamObj.WriteText(str, 0); },\n                        WriteLine: function (str) { streamObj.WriteText(str, 1); },\n                        Close: function() {\n                            try {\n            ';
var v27292 = v27293 + '                    streamObj.SaveToFile(path, 2);\n                            } catch (saveError) {\n                                IOUtils.throwIOError("Couldn\'t write to file \'" + path + "\'.", saveError);\n                            }\n                            finally {\n                                if (streamObj.State != 0 /*adStateClosed*/) {\n                                    streamObj.Close();\n                                }\n                                releaseStreamObject(streamObj);\n                            }\n                        }\n                    };\n                } catch (creationError) {\n                    IOUtils.throwIOError("Couldn\'t write to file \'" + path + "\'.", creationError);\n                }\n            },\n\n            directoryExists: function(path) {\n                return <bool>fso.FolderExists(path);\n            },\n\n            createDirectory: function(path) {\n                try {\n                    if (!this.directoryExists(path)) {\n                        fso.CreateFolder(path);\n                    }\n                } catch (e) {\n                    IOUtils.throwIOError("Couldn\'t create directory \'" + path + "\'.", e);\n                }\n            },\n\n            dir: function(path, spec?, options?) {\n                options = options || <{ recursive?: bool; }>{};\n                function filesInFolder(folder, root): string[]{\n                    var paths = [];\n                    var fc: Enumerator;\n\n                    if (options.recursive) {\n                        fc = new Enumerator(folder.subfolders);\n\n                        for (; !fc.atEnd() ; fc.moveNext()) {\n                            paths = paths.concat(filesInFolder(fc.item(), root + "/" + fc.item().Name));\n                        }\n                    }\n\n                    fc = new Enumerator(folder.files);\n\n                    for (; !fc.atEnd() ; fc.moveNext()) {\n                        if (!spec || fc.item().Name.match(spec)) {\n                            paths.push(root + "/" + fc.item().Name);\n                        }\n                    }\n\n                    return paths;\n                }\n\n                var folder = fso.GetFolder(path);\n                var paths = [];\n\n                return filesInFolder(folder, path);\n            },\n\n            print: function(str) {\n                WScript.StdOut.Write(str);\n            },\n\n            printLine: function(str) {\n                WScript.Echo(str);\n            },\n\n            arguments: <string[]>args,\n            stderr: WScript.StdErr,\n            stdout: WScript.StdOut,\n            watchFile: null,\n            run: function(source, filename) {\n                try {\n                    eval(source);\n                } catch (e) {\n                    IOUtils.throwIOError("Error while executing file \'" + filename + "\'.", e);\n                }\n            },\n            getExecutingFilePath: function () {\n                return WScript.ScriptFullName;\n            },\n            quit: function (exitCode? : number = 0) {\n                try {\n                    WScript.Quit(exitCode);\n                } catch (e) {\n                }\n            }\n        }\n\n    };\n\n    // Create an IO object for use inside Node.js hosts\n    // Depends on \'fs\' and \'path\' modules\n    function getNodeIO(): IIO {\n\n        var _fs = require(\'fs\');\n        var _path = require(\'path\');\n        var _module = require(\'module\');\n\n        return {\n            readFile: function(file) {\n                try {\n                    var buffer = _fs.readFileSync(file);\n                    switch (buffer[0]) {\n                        case 0xFE:\n                            if (buffer[1] == 0xFF) {\n                                // utf16-be. Reading the buffer as big endian is not supported, so convert it to \n                                // Little Endian first\n                                var i = 0;\n                                while ((i + 1) < buffer.length) {\n                                    var temp = buffer[i]\n                                    buffer[i] = buffer[i + 1];\n                                    buffer[i + 1] = temp;\n                                    i += 2;\n                                }\n                                return buffer.toString("ucs2", 2);\n                            }\n                            break;\n                        case 0xFF:\n                            if (buffer[1] == 0xFE) {\n                                // utf16-le \n                                return buffer.toString("ucs2", 2);\n                            }\n                            break;\n                        case 0xEF:\n                            if (buffer[1] == 0xBB) {\n                                // utf-8\n                                return buffer.toString("utf8", 3);\n                            }\n                    }\n                    // Default behaviour\n                    return buffer.toString();\n                } catch ';
var v27291 = v27292 + '(e) {\n                    IOUtils.throwIOError("Error reading file \\"" + file + "\\".", e);\n                }\n            },\n            writeFile: <(path: string, contents: string) => void >_fs.writeFileSync,\n            deleteFile: function(path) {\n                try {\n                    _fs.unlinkSync(path);\n                } catch (e) {\n                    IOUtils.throwIOError("Couldn\'t delete file \'" + path + "\'.", e);\n                }\n            },\n            fileExists: function(path): bool {\n                return _fs.existsSync(path);\n            },\n            createFile: function(path, useUTF8?) {\n                function mkdirRecursiveSync(path) {\n                    var stats = _fs.statSync(path);\n                    if (stats.isFile()) {\n                        IOUtils.throwIOError("\\"" + path + "\\" exists but isn\'t a directory.", null);\n                    } else if (stats.isDirectory()) {\n                        return;\n                    } else {\n                        mkdirRecursiveSync(_path.dirname(path));\n                        _fs.mkdirSync(path, 0775);\n                    }\n                }\n\n                mkdirRecursiveSync(_path.dirname(path));\n\n                try {\n                    var fd = _fs.openSync(path, \'w\');\n                } catch (e) {\n                    IOUtils.throwIOError("Couldn\'t write to file \'" + path + "\'.", e);\n                }\n                return {\n                    Write: function(str) { _fs.writeSync(fd, str); },\n                    WriteLine: function(str) { _fs.writeSync(fd, str + \'\\r\\n\'); },\n                    Close: function() { _fs.closeSync(fd); fd = null; }\n                };\n            },\n            dir: function dir(path, spec?, options?) {\n                options = options || <{ recursive?: bool; }>{};\n\n                function filesInFolder(folder: string): string[]{\n                    var paths = [];\n\n                    var files = _fs.readdirSync(folder);\n                    for (var i = 0; i < files.length; i++) {\n                        var stat = _fs.statSync(folder + "/" + files[i]);\n                        if (options.recursive && stat.isDirectory()) {\n                            paths = paths.concat(filesInFolder(folder + "/" + files[i]));\n                        } else if (stat.isFile() && (!spec || files[i].match(spec))) {\n                            paths.push(folder + "/" + files[i]);\n                        }\n                    }\n\n                    return paths;\n                }\n\n                return filesInFolder(path);\n            },\n            createDirectory: function(path: string): void {\n                try {\n                    if (!this.directoryExists(path)) {\n                        _fs.mkdirSync(path);\n                    }\n                } catch (e) {\n                    IOUtils.throwIOError("Couldn\'t create directory \'" + path + "\'.", e);\n                }\n            },\n\n            directoryExists: function(path: string): bool {\n                return _fs.existsSync(path) && _fs.lstatSync(path).isDirectory();\n            },\n            resolvePath: function(path: string): string {\n                return _path.resolve(path);\n            },\n            dirName: function(path: string): string {\n                return _path.dirname(path);\n            },\n            findFile: function(rootPath: string, partialFilePath): IResolvedFile {\n                var path = rootPath + "/" + partialFilePath;\n\n                while (true) {\n                    if (_fs.existsSync(path)) {\n                        try {\n                            var content = this.readFile(path);\n                            return { content: content, path: path };\n                        } catch (err) {\n                            //Tools.CompilerDiagnostics.debugPrint(("Could not find " + path) + ", trying parent");\n                        }\n                    }\n                    else {\n                        var parentPath = _path.resolve(rootPath, "..");\n\n                        // Node will just continue to repeat the root path, rather than return null\n                        if (rootPath === parentPath) {\n                            return null;\n                        }\n                        else {\n                            rootPath = parentPath;\n                            path = _path.resolve(rootPath, partialFilePath);\n                        }\n                    }\n                }\n            },\n            print: function(str) { process.stdout.write(str) },\n            printLine: function(str) { process.stdout.write(str + \'\\n\') },\n            arguments: process.argv.slice(2),\n            stderr: {\n                Write: function(str) { process.stderr.write(str); },\n                WriteLine: function(str) { process.stderr.write(str + \'\\n\'); },\n                Close: function() { }\n            },\n            stdout: {\n                Write: function(str) { process.stdout.write(str); },\n                Write';
var v27290 = v27291 + 'Line: function(str) { process.stdout.write(str + \'\\n\'); },\n                Close: function() { }\n            },\n            watchFile: function(filename: string, callback: (string) => void ): IFileWatcher {\n                var firstRun = true;\n                var processingChange = false;\n\n                var fileChanged: any = function(curr, prev) {\n                    if (!firstRun) {\n                        if (curr.mtime < prev.mtime) {\n                            return;\n                        }\n\n                        _fs.unwatchFile(filename, fileChanged);\n                        if (!processingChange) {\n                            processingChange = true;\n                            callback(filename);\n                            setTimeout(function() { processingChange = false; }, 100);\n                        }\n                    }\n                    firstRun = false;\n                    _fs.watchFile(filename, { persistent: true, interval: 500 }, fileChanged);\n                };\n\n                fileChanged();\n                return {\n                    filename: filename,\n                    close: function() {\n                        _fs.unwatchFile(filename, fileChanged);\n                    }\n                };\n            },\n            run: function(source, filename) {\n                require.main.filename = filename;\n                require.main.paths = _module._nodeModulePaths(_path.dirname(_fs.realpathSync(filename)));\n                require.main._compile(source, filename);\n            }, \n            getExecutingFilePath: function () {\n                return process.mainModule.filename;\n            },\n            quit: process.exit\n        }\n    };\n\n    if (typeof ActiveXObject === "function")\n        return getWindowsScriptHostIO();\n    else if (typeof require === "function")\n        return getNodeIO();\n    else\n        return null; // Unsupported host\n})();\n//\n// Copyright (c) Microsoft Corporation.  All rights reserved.\n// \n// Licensed under the Apache License, Version 2.0 (the "License");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an "AS IS" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n\n///<reference path=\'typescript.ts\' />\n\nmodule TypeScript {\n    // Note: Any addition to the NodeType should also be supported with addition to AstWalkerDetailCallback\n    export enum NodeType {\n        None,\n        Empty,\n        EmptyExpr,\n        True,\n        False,\n        This,\n        Super,\n        QString,\n        Regex,\n        Null,\n        ArrayLit,\n        ObjectLit,\n        Void,\n        Comma,\n        Pos,\n        Neg,\n        Delete,\n        Await,\n        In,\n        Dot,\n        From,\n        Is,\n        InstOf,\n        Typeof,\n        NumberLit,\n        Name,\n        TypeRef,\n        Index,\n        Call,\n        New,\n        Asg,\n        AsgAdd,\n        AsgSub,\n        AsgDiv,\n        AsgMul,\n        AsgMod,\n        AsgAnd,\n        AsgXor,\n        AsgOr,\n        AsgLsh,\n        AsgRsh,\n        AsgRs2,\n        ConditionalExpression,\n        LogOr,\n        LogAnd,\n        Or,\n        Xor,\n        And,\n        Eq,\n        Ne,\n        Eqv,\n        NEqv,\n        Lt,\n        Le,\n        Gt,\n        Ge,\n        Add,\n        Sub,\n        Mul,\n        Div,\n        Mod,\n        Lsh,\n        Rsh,\n        Rs2,\n        Not,\n        LogNot,\n        IncPre,\n        DecPre,\n        IncPost,\n        DecPost,\n        TypeAssertion,\n        FuncDecl,\n        Member,\n        VarDecl,\n        ArgDecl,\n        Return,\n        Break,\n        Continue,\n        Throw,\n        For,\n        ForIn,\n        If,\n        While,\n        DoWhile,\n        Block,\n        Case,\n        Switch,\n        Try,\n        TryCatch,\n        TryFinally,\n        Finally,\n        Catch,\n        List,\n        Script,\n        ClassDeclaration,\n        InterfaceDeclaration,\n        ModuleDeclaration,\n        ImportDeclaration,\n        With,\n        Label,\n        LabeledStatement,\n        EBStart,\n        GotoEB,\n        EndCode,\n        Error,\n        Comment,\n        Debugger,\n        GeneralNode = FuncDecl,\n        LastAsg = AsgRs2,\n    }\n}//\n// Copyright (c) Microsoft Corporation.  All rights reserved.\n// \n// Licensed under the Apache License, Version 2.0 (the "License");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an "AS IS" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.';
var v27289 = v27290 + '\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n\n///<reference path="io.ts" />\n\ninterface IOptions {\n    name?: string;\n    flag?: bool;\n    short?: string;\n    usage?: string;\n    set?: (s: string) => void;\n    type?: string;\n    experimental?: bool;\n}\n\nclass OptionsParser {\n    private DEFAULT_SHORT_FLAG = "-";\n    private DEFAULT_LONG_FLAG = "--";\n\n    // Find the option record for the given string. Returns null if not found.\n    private findOption(arg: string) {\n\n        for (var i = 0; i < this.options.length; i++) {\n\n            if (arg === this.options[i].short || arg === this.options[i].name) {\n                return this.options[i];\n            }\n        }\n\n        return null;\n    }\n\n    public unnamed: string[] = [];\n\n    public options: IOptions[] = [];\n\n    constructor (public host: IIO) {\n    }\n\n    public printUsage() {\n        this.host.printLine("Syntax:   tsc [options] [file ..]");\n        this.host.printLine("");\n        this.host.printLine("Examples: tsc hello.ts");\n        this.host.printLine("          tsc --out foo.js foo.ts");\n        this.host.printLine("          tsc @args.txt");\n        this.host.printLine("");\n        this.host.printLine("Options:");\n\n        var output = [];\n        var maxLength = 0;\n\n        this.options = this.options.sort(function(a, b) {\n            var aName = a.name.toLowerCase();\n            var bName = b.name.toLowerCase();\n\n            if (aName > bName) {\n                return 1;\n            } else if (aName < bName) {\n                return -1;\n            } else {\n                return 0;\n            }\n        });\n\n        // Build up output array\n        for (var i = 0; i < this.options.length; i++) {\n            var option = this.options[i];\n\n            if (option.experimental) {\n                continue;\n            }\n\n            if (!option.usage) {\n                break;\n            }\n\n            var usageString = "  ";\n            var type = option.type ? " " + option.type.toUpperCase() : "";\n\n            if (option.short) {\n                usageString += this.DEFAULT_SHORT_FLAG + option.short + type + ", ";\n            }\n\n            usageString += this.DEFAULT_LONG_FLAG + option.name + type;\n\n            output.push([usageString, option.usage]);\n\n            if (usageString.length > maxLength) {\n                maxLength = usageString.length;\n            }\n        }\n\n        output.push(["  @<file>", "Insert command line options and files from a file."]);\n\n        // Print padded output\n        for (var i = 0; i < output.length; i++) {\n            this.host.printLine(output[i][0] + (new Array(maxLength - output[i][0].length + 3)).join(" ") + output[i][1]);\n        }\n    }\n\n    public option(name: string, config: IOptions, short?: string) {\n        if (!config) {\n            config = <any>short;\n            short = null;\n        }\n\n        config.name = name;\n        config.short = short;\n        config.flag = false;\n\n        this.options.push(config);\n    }\n\n    public flag(name: string, config: IOptions, short?: string) {\n        if (!config) {\n            config = <any>short;\n            short = null;\n        }\n\n        config.name = name;\n        config.short = short;\n        config.flag = true\n\n        this.options.push(config);\n    }\n\n    // Parse an arguments string\n    public parseString(argString: string) {\n        var position = 0;\n        var tokens = argString.match(/\\s+|"|[^\\s"]+/g);\n\n        function peek() {\n            return tokens[position];\n        }\n\n        function consume() {\n            return tokens[position++];\n        }\n\n        function consumeQuotedString() {\n            var value = \'\';\n            consume(); // skip opening quote.\n\n            var token = peek();\n\n            while (token && token !== \'"\') {\n                consume();\n\n                value += token;\n\n                token = peek();\n            }\n\n            consume(); // skip ending quote;\n\n            return value;\n        }\n\n        var args: string[] = [];\n        var currentArg = \'\';\n\n        while (position < tokens.length) {\n            var token = peek();\n\n            if (token === \'"\') {\n                currentArg += consumeQuotedString();\n            } else if (token.match(/\\s/)) {\n                if (currentArg.length > 0) {\n                    args.push(currentArg);\n                    currentArg = \'\';\n                }\n\n                consume();\n            } else {\n                consume();\n                currentArg += token;\n            }\n        }\n\n        if (currentArg.length > 0) {\n            args.push(currentArg);\n        }\n\n        this.parse(args);\n    }\n\n    // Parse arguments as they come from the platform: split into arguments.\n    public parse(args: string[]) {\n        var position = 0;\n\n        function consume() {\n            return args[position++];\n        }\n\n        while (position < args.length) {\n            var current = consume();\n           ';
var v27288 = v27289 + ' var match = current.match(/^(--?|@)(.*)/);\n            var value = null;\n\n            if (match) {\n                if (match[1] === \'@\') {\n                    this.parseString(this.host.readFile(match[2]));\n                } else {\n                    var arg = match[2];\n                    var option = this.findOption(arg);\n\n                    if (option === null) {\n                        this.host.printLine("Unknown option \'" + arg +"\'");\n                        this.host.printLine("Use the \'--help\' flag to see options");\n                    } else {\n                        if (!option.flag)\n                            value = consume();\n\n                        option.set(value);\n                    }\n                }\n            } else {\n                this.unnamed.push(current);\n            }\n        }\n    }\n}//\n// Copyright (c) Microsoft Corporation.  All rights reserved.\n// \n// Licensed under the Apache License, Version 2.0 (the "License");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an "AS IS" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n\n///<reference path=\'typescript.ts\' />\n\nmodule TypeScript {\n\n    export enum TypeContext {\n        NoTypes = 0,\n        ArraySuffix = 1,\n        Primitive = 2,\n        Named = 4,\n        AllSimpleTypes = Primitive | Named,\n        AllTypes = Primitive | Named | ArraySuffix,\n    }\n\n    export enum ParseState {\n        None,\n        StartScript,\n        StartStatementList,\n        StartStatement,\n        StartFncDecl,\n        FncDeclName,\n        FncDeclArgs,\n        FncDeclReturnType,\n        ForInit,\n        ForInitAfterVar,\n        ForCondStart,\n        EndStmtList,\n        EndScript,\n    }\n\n    export interface IStatementInfo {\n        stmt: Statement;\n        labels: ASTList;\n    }\n\n    export interface ILambdaArgumentContext {\n        preProcessedLambdaArgs: AST;\n    }\n\n    export class QuickParseResult {\n        constructor (public Script: Script, public endLexState: LexState) { }\n    }\n\n    export class Parser {\n        private varLists: ASTList[] = [];\n        private scopeLists: ASTList[] = [];\n        private staticsLists: ASTList[] = [];\n\n        private scanner: IScanner = new Scanner();\n        private currentToken: Token = null;\n\n        private needTerminator = false;\n\n        // TODO: consolidate these\n        private inFunction = false;\n        private inInterfaceDecl = false;\n        public currentClassDecl: NamedDeclaration = null;\n\n        private inFncDecl = false;  // this is only for FuncDecls - not constructors, like inFnc\n        private anonId = new Identifier("_anonymous");\n        public style_requireSemi = false;\n        public style_funcInLoop = true;\n        private incremental = false;\n        public errorRecovery = false;\n        public outfile: ITextWriter = undefined;\n        public errorCallback: (minChar: number, charLen: number, message: string, unit: number) =>void = null;\n        private state: ParseState = ParseState.StartStatementList;\n        private ambientModule = false;\n        private ambientClass = false;\n        private topLevel = true;\n        private allowImportDeclaration = true;\n        private currentUnitIndex = (-1);\n        private prevIDTok: Token = null;\n        private statementInfoStack: IStatementInfo[] = new IStatementInfo[];\n        private hasTopLevelImportOrExport = false; // for imports, only true if it\'s a dynamic module\n        private strictMode = false;\n        private nestingLevel = 0;\n        private prevExpr: AST = null;\n        private currentClassDefinition: ClassDeclaration = null;\n        private parsingClassConstructorDefinition = false;\n        private parsingDeclareFile = false;\n        private amdDependencies: string[] = [];\n        public inferPropertiesFromThisAssignment = false;\n        public requiresExtendsBlock = false;\n\n        private resetStmtStack() {\n            this.statementInfoStack = new IStatementInfo[];\n        }\n\n        private inLoop() {\n            for (var j = this.statementInfoStack.length - 1; j >= 0; j--) {\n                if (this.statementInfoStack[j].stmt.isLoop()) {\n                    return true;\n                }\n            }\n            return false;\n        }\n\n        private pushStmt(stmt: Statement, labels: ASTList) {\n            // allocate here to avoid always storing this information in statements\n            var info = { stmt: stmt, labels: labels };\n            this.statementInfoStack.push(info);\n        }\n\n        private popStmt(): IStatementInfo {\n            return this.statementInfoStack.pop();\n        }\n\n        private resolveJumpTarget(jump: Jump): void {';
var v27287 = v27288 + '\n            var resolvedTarget = AST.getResolvedIdentifierName(jump.target);\n            var len = this.statementInfoStack.length;\n            for (var i = len - 1; i >= 0; i--) {\n                var info = this.statementInfoStack[i];\n                if (jump.target) {\n                    if (info.labels && (info.labels.members.length > 0)) {\n                        for (var j = 0, labLen = info.labels.members.length; j < labLen; j++) {\n                            var label = <Label>info.labels.members[j];\n                            if (label.id.text == resolvedTarget) {\n                                jump.setResolvedTarget(this, info.stmt);\n                                return;\n                            }\n                        }\n                    }\n                }\n                else {\n                    if (info.stmt.isLoop()) {\n                        jump.setResolvedTarget(this, info.stmt);\n                        return;\n                    }\n                    else if ((info.stmt.nodeType == NodeType.Switch) && (jump.nodeType == NodeType.Break)) {\n                        jump.setResolvedTarget(this, info.stmt);\n                        return;\n                    }\n                }\n            }\n            // no luck\n            if (jump.target) {\n                this.reportParseError("could not find enclosing statement with label " + jump.target);\n            }\n            else {\n                if (jump.nodeType == NodeType.Break) {\n                    this.reportParseError("break statement requires enclosing loop or switch");\n                }\n                else {\n                    this.reportParseError("continue statement requires enclosing loop");\n                }\n            }\n        }\n\n        public setErrorRecovery(outfile: ITextWriter) {\n            this.outfile = outfile;\n            this.errorRecovery = true;\n        }\n\n        public getSourceLineCol(lineCol: ILineCol, minChar: number): void {\n            getSourceLineColFromMap(lineCol, minChar, this.scanner.lineMap);\n        }\n\n        private createRef(text: string, hasEscapeSequence: bool, minChar: number): Identifier {\n            var id = new Identifier(text, hasEscapeSequence);\n            id.minChar = minChar;\n            return id;\n        }\n\n        private reportParseStyleError(message: string) {\n            this.reportParseError("STYLE: " + message);\n        }\n\n        public reportParseError(message: string, startPos = this.scanner.startPos, pos = this.scanner.pos) {\n            var len = Math.max(1, pos - startPos);\n            if (this.errorCallback) {\n                this.errorCallback(startPos, len, message, this.currentUnitIndex);\n            }\n            else if (this.errorRecovery) {\n                var lineCol = { line: -1, col: -1 };\n                this.getSourceLineCol(lineCol, startPos);\n                if (this.outfile) {\n                    this.outfile.WriteLine("// " + this.fname + " (" + lineCol.line + "," + lineCol.col + "): " + message);\n                }\n            }\n            else {\n                throw new SyntaxError(this.fname + " (" + this.scanner.line + "," + this.scanner.col + "): " + message);\n            }\n        }\n\n        private checkNextToken(tokenId: TokenID, errorRecoverySet: ErrorRecoverySet, errorText: string = null): void {\n            this.currentToken = this.scanner.scan();\n            this.checkCurrentToken(tokenId, errorRecoverySet, errorText);\n        }\n\n        private skip(errorRecoverySet: ErrorRecoverySet) {\n            errorRecoverySet |= ErrorRecoverySet.EOF;\n            var ersTok = ErrorRecoverySet.None;\n            var tokenInfo = lookupToken(this.currentToken.tokenId);\n            if (tokenInfo != undefined) {\n                ersTok = tokenInfo.ers;\n            }\n            var pendingRightCurlies = 0;\n            while (((ersTok & errorRecoverySet) == ErrorRecoverySet.None) ||\n                   (this.currentToken.tokenId == TokenID.CloseBrace) && (pendingRightCurlies > 0)) {\n                if (this.currentToken.tokenId == TokenID.OpenBrace) {\n                    pendingRightCurlies++;\n                }\n                else if (this.currentToken.tokenId == TokenID.CloseBrace) {\n                    pendingRightCurlies--;\n                }\n                this.currentToken = this.scanner.scan();\n                ersTok = ErrorRecoverySet.None;\n                tokenInfo = lookupToken(this.currentToken.tokenId);\n                if (tokenInfo != undefined) {\n                    ersTok = tokenInfo.ers;\n                }\n                // TODO: regex rescan \n            }\n        }\n\n        private checkCurrentToken(tokenId: TokenID, errorRecoverySet: ErrorRecoverySet, errorText: string = null): void {\n            if (this.currentToken.tokenId != tokenId) {\n                errorText = errorText == null ? ("Expected \'" + tokenTable[tokenId].text + "\'") : errorText;\n                this.reportParseError(errorText);\n                if (this.errorRecove';
var v27286 = v27287 + 'ry) {\n                    this.skip(errorRecoverySet);\n                }\n            }\n            else {\n                this.currentToken = this.scanner.scan();\n            }\n        }\n\n        private pushDeclLists() {\n            this.staticsLists.push(new ASTList());\n            this.varLists.push(new ASTList());\n            this.scopeLists.push(new ASTList());\n        }\n\n        private popDeclLists() {\n            this.staticsLists.pop();\n            this.varLists.pop();\n            this.scopeLists.pop();\n        }\n\n        private topVarList() {\n            return this.varLists[this.varLists.length - 1];\n        }\n\n        private topScopeList() {\n            return this.scopeLists[this.scopeLists.length - 1];\n        }\n\n        private topStaticsList() {\n            return this.staticsLists[this.staticsLists.length - 1];\n        }\n\n        private parseComment(comment: CommentToken) {\n            if (comment) {\n                var c: Comment = new Comment(comment.value, comment.isBlock, comment.endsLine);\n                c.minChar = comment.startPos;\n                c.limChar = comment.startPos + comment.value.length;\n                var lineCol = { line: -1, col: -1 };\n                this.getSourceLineCol(lineCol, c.minChar);\n                c.minLine = lineCol.line;\n                this.getSourceLineCol(lineCol, c.limChar);\n                c.limLine = lineCol.line;\n\n                if (!comment.isBlock && comment.value.length > 3 && comment.value.substring(0, 3) == "///") {\n                    var dependencyPath = getAdditionalDependencyPath(comment.value);\n\n                    if (dependencyPath) {\n                        this.amdDependencies.push(dependencyPath);\n                    }\n\n                    if (getImplicitImport(comment.value)) {\n                        this.hasTopLevelImportOrExport = true;\n                    }\n                }\n\n                return c;\n            }\n            else {\n                return null;\n            }\n        }\n\n        private parseCommentsInner(comments: CommentToken[]) {\n            if (comments) {\n                var commentASTs: Comment[] = new Comment[];\n                for (var i = 0; i < comments.length; i++) {\n                    commentASTs.push(this.parseComment(comments[i]));\n                }\n                return commentASTs;\n            } else {\n                return null;\n            }\n        }\n\n        private parseComments() {\n            var comments = this.scanner.getComments();\n            return this.parseCommentsInner(comments);\n        }\n\n        private parseCommentsForLine(line: number) {\n            var comments = this.scanner.getCommentsForLine(line);\n\n            return this.parseCommentsInner(comments);\n        }\n\n        private combineComments(comment1: Comment[], comment2: Comment[]) {\n            if (comment1 == null) {\n                return comment2;\n            }\n            else if (comment2 == null) {\n                return comment1;\n            }\n            else {\n                return comment1.concat(comment2);\n            }\n        }\n\n        private parseEnumDecl(errorRecoverySet: ErrorRecoverySet, modifiers: Modifiers): ModuleDeclaration {\n            var leftCurlyCount = this.scanner.leftCurlyCount;\n            var rightCurlyCount = this.scanner.rightCurlyCount;\n\n            var name: Identifier = null;\n            if ((this.currentToken.tokenId == TokenID.Identifier) || convertTokToID(this.currentToken, this.strictMode)) {\n                name = Identifier.fromToken(this.currentToken);\n                name.minChar = this.scanner.startPos;\n                name.limChar = this.scanner.pos;\n                this.currentToken = this.scanner.scan();\n            }\n            else {\n                this.reportParseError("Enum declaration requires identifier");\n                if (this.errorRecovery) {\n                    name = new MissingIdentifier();\n                    name.minChar = this.scanner.startPos;\n                    name.limChar = this.scanner.startPos;\n                    name.flags |= ASTFlags.Error;\n                }\n            }\n\n            var membersMinChar = this.scanner.startPos;\n            this.checkCurrentToken(TokenID.OpenBrace, errorRecoverySet | ErrorRecoverySet.ID);\n            this.pushDeclLists();\n            var members = new ASTList();\n            members.minChar = membersMinChar;\n            var mapDecl = new VarDecl(new Identifier("_map"), 0);\n            mapDecl.varFlags |= VarFlags.Exported;\n            mapDecl.varFlags |= VarFlags.Private;\n\n            // REVIEW: Is this still necessary?\n            mapDecl.varFlags |= (VarFlags.Property | VarFlags.Public);\n            mapDecl.init = new UnaryExpression(NodeType.ArrayLit, null);\n            members.append(mapDecl);\n            var lastValue: NumberLiteral = null;\n            for (; ;) {\n                var minChar = this.scanner.startPos;\n                var limChar;\n                var memberName: Identifier = null;\n';
var v27285 = v27286 + '                var memberValue: AST = null;\n                var preComments = null;\n                var postComments = null;\n\n                if ((this.currentToken.tokenId == TokenID.Identifier) || convertTokToIDName(this.currentToken)) {\n                    memberName = Identifier.fromToken(this.currentToken);\n                    memberName.minChar = this.scanner.startPos;\n                    memberName.limChar = this.scanner.pos;\n                }\n                else if (this.currentToken.tokenId == TokenID.CloseBrace) {\n                    break;\n                }\n                else {\n                    this.reportParseError("Expected identifer of enum member");\n                    if (this.errorRecovery) {\n                        memberName = new MissingIdentifier();\n                        memberName.minChar = this.scanner.startPos;\n                        memberName.limChar = this.scanner.startPos;\n                        memberName.flags |= ASTFlags.Error;\n                    }\n                }\n\n                limChar = this.scanner.pos;\n                preComments = this.parseComments();\n                this.currentToken = this.scanner.scan();\n                postComments = this.parseComments();\n\n                if (this.currentToken.tokenId == TokenID.Equals) {\n                    this.currentToken = this.scanner.scan();\n                    memberValue = this.parseExpr(errorRecoverySet, OperatorPrecedence.Comma, true,\n                                          TypeContext.NoTypes);\n                    lastValue = <NumberLiteral>memberValue;\n                    limChar = memberValue.limChar;\n                }\n                else {\n                    if (lastValue == null) {\n                        memberValue = new NumberLiteral(0);\n                        lastValue = <NumberLiteral>memberValue;\n                    }\n                    else {\n                        memberValue = new NumberLiteral(lastValue.value + 1);\n                        lastValue = <NumberLiteral>memberValue;\n                    }\n                    var map: BinaryExpression =\n                        new BinaryExpression(NodeType.Asg,\n                                             new BinaryExpression(NodeType.Index,\n                                                                  new Identifier("_map"),\n                                                                  memberValue),\n                                             new StringLiteral(\'"\' + memberName.actualText + \'"\'));\n                    members.append(map);\n                }\n                var member = new VarDecl(memberName, this.nestingLevel);\n                member.minChar = minChar;\n                member.limChar = limChar;\n                member.init = memberValue;\n                // Note: Leave minChar, limChar as "-1" on typeExpr as this is a parsing artifact.\n                member.typeExpr = new TypeReference(this.createRef(name.actualText, name.hasEscapeSequence, -1), 0);\n                member.varFlags |= (VarFlags.Readonly | VarFlags.Property);\n                if (memberValue.nodeType == NodeType.NumberLit) {\n                    member.varFlags |= VarFlags.Constant;\n                }\n                member.preComments = preComments;\n                members.append(member);\n                member.postComments = postComments;\n                // all enum members are exported\n                member.varFlags |= VarFlags.Exported;\n\n                if (this.currentToken.tokenId == TokenID.Comma) {\n                    this.currentToken = this.scanner.scan();\n                    member.postComments = this.combineComments(member.postComments, this.parseCommentsForLine(this.scanner.prevLine));\n                    if ((this.currentToken.tokenId == TokenID.Identifier) || (convertTokToIDName(this.currentToken))) {\n                        continue;\n                    }\n                }\n                break;\n            }\n            var endingToken = new ASTSpan();\n            endingToken.minChar = this.scanner.startPos;\n            endingToken.limChar = this.scanner.pos;\n\n            this.checkCurrentToken(TokenID.CloseBrace, errorRecoverySet);\n            members.limChar = this.scanner.lastTokenLimChar();\n            var modDecl = new ModuleDeclaration(name, members, this.topVarList(), this.topScopeList(), endingToken);\n            modDecl.modFlags |= ModuleFlags.IsEnum;\n            this.popDeclLists();\n\n            modDecl.leftCurlyCount = this.scanner.leftCurlyCount - leftCurlyCount;\n            modDecl.rightCurlyCount = this.scanner.rightCurlyCount - rightCurlyCount;\n            return modDecl;\n        }\n\n        private parseDottedName(enclosedList: AST[]): void {\n            this.currentToken = this.scanner.scan();\n            if ((this.currentToken.tokenId == TokenID.Identifier) || convertTokToID(this.currentToken, this.strictMode)) {\n                var id = Identifier.fromToken(this.currentToken);\n                id.preComments = this.parseCom';
var v27284 = v27285 + "ments();\n                enclosedList[enclosedList.length] = id;\n                id.minChar = this.scanner.startPos;\n                id.limChar = this.scanner.pos;\n                this.currentToken = this.scanner.scan();\n                if (this.currentToken.tokenId == TokenID.Dot) {\n                    this.parseDottedName(enclosedList);\n                }\n            }\n            else {\n                this.reportParseError(\"need identifier after '.'\");\n            }\n        }\n\n        // REVIEW: This is much more lenient than the spec - we're basically just checking to see if the\n        // path is rooted or contains an extension, not if it could potentially be a bogus file path\n        private isValidImportPath(importPath: string) {\n            importPath = stripQuotes(importPath);\n\n            if (!importPath ||\n                importPath.indexOf(':') != -1 || \n                importPath.indexOf('\\\\') != -1 ||\n                //(importPath.indexOf('.') != -1 && importPath.charAt(0) != '.') ||\n                importPath.charAt(0) == '/') {\n                return false;\n            }\n            return true;\n        }\n\n        private parseImportDeclaration(errorRecoverySet: ErrorRecoverySet, modifiers: Modifiers): ImportDeclaration {\n\n            var name: Identifier = null;\n            var alias: AST = null;\n            var importDecl: ImportDeclaration = null;\n            var minChar = this.scanner.startPos;\n            var isDynamicImport = false;\n\n            this.currentToken = this.scanner.scan();\n\n            if (this.currentToken.tokenId == TokenID.Identifier || convertTokToID(this.currentToken, this.strictMode)) {\n                name = Identifier.fromToken(this.currentToken);\n            }\n            else {\n                this.reportParseError(\"Expected identifer after 'import'\");\n                name = new MissingIdentifier();\n            }\n\n            name.minChar = this.scanner.startPos;\n            name.limChar = this.scanner.pos;\n\n            this.currentToken = this.scanner.scan();\n\n            this.checkCurrentToken(TokenID.Equals, errorRecoverySet | ErrorRecoverySet.ID);\n\n            var aliasPreComments = this.parseComments();\n\n            var limChar;\n            if (this.currentToken.tokenId == TokenID.Identifier || convertTokToID(this.currentToken, this.strictMode)) {\n\n                if (this.currentToken.tokenId == TokenID.Module) {\n                    limChar = this.scanner.pos;\n                    this.currentToken = this.scanner.scan();\n                    if (this.currentToken.tokenId == TokenID.OpenParen) {\n                        this.currentToken = this.scanner.scan();\n\n                        if (this.currentToken.tokenId == TokenID.StringLiteral || this.currentToken.tokenId == TokenID.Identifier || convertTokToID(this.currentToken, this.strictMode)) {\n\n                            if (this.currentToken.tokenId == TokenID.StringLiteral) {\n\n                                if (this.topLevel) {\n                                    this.hasTopLevelImportOrExport = true;\n                                } else if (!this.allowImportDeclaration) {\n                                    this.reportParseError(\"Import declaration of external module is permitted only in global or top level dynamic modules\");\n                                }\n\n                                var aliasText = this.currentToken.getText();\n                                alias = Identifier.fromToken(this.currentToken);\n                                alias.minChar = this.scanner.startPos;\n                                alias.limChar = this.scanner.pos;\n\n                                if (!this.isValidImportPath((<Identifier>alias).text)) {\n                                    this.reportParseError(\"Invalid import path\");\n                                }\n\n                                isDynamicImport = true;\n                                this.currentToken = this.scanner.scan();\n                                    \n                                alias.preComments = aliasPreComments;\n                            }\n                            else {\n                                alias = this.parseExpr(errorRecoverySet | ErrorRecoverySet.SColon,\n                                            OperatorPrecedence.Assignment, true,\n                                            TypeContext.NoTypes);\n                                    \n                                alias.preComments = aliasPreComments;\n                            }\n                        }\n\n                        limChar = this.scanner.pos;\n                        this.checkCurrentToken(TokenID.CloseParen, errorRecoverySet | ErrorRecoverySet.ID);\n\n                        if (alias) {\n                            alias.postComments = this.parseComments();\n                        }\n                    }\n                }\n                else {\n                    alias = this.parseExpr(errorRecoverySet | ErrorRecoverySet.SColon,\n                 ";
var v27283 = v27284 + '                           OperatorPrecedence.Assignment, true,\n                                            TypeContext.NoTypes);\n                    limChar = this.scanner.pos; // Include semicolon if needed\n                }\n            }\n            else {\n                this.reportParseError("Expected module name");\n                alias = new MissingIdentifier();\n                alias.minChar = this.scanner.startPos;\n                if (this.currentToken.tokenId == TokenID.Semicolon) {\n                    alias.limChar = this.scanner.startPos;\n                } else {\n                    alias.limChar = this.scanner.pos;\n                    this.currentToken = this.scanner.scan();\n                }\n                alias.flags |= ASTFlags.Error;\n                limChar = alias.limChar;\n            }\n\n            importDecl = new ImportDeclaration(name, alias);\n            importDecl.isDynamicImport = isDynamicImport;\n\n            importDecl.minChar = minChar;\n            importDecl.limChar = limChar;\n\n            return importDecl;\n        }\n\n        private parseModuleDecl(errorRecoverySet: ErrorRecoverySet, modifiers: Modifiers, preComments: Comment[]): ModuleDeclaration {\n            var leftCurlyCount = this.scanner.leftCurlyCount;\n            var rightCurlyCount = this.scanner.rightCurlyCount;\n\n            var svAmbient = this.ambientModule;\n            var svTopLevel = this.topLevel;\n            this.topLevel = false;\n            if (this.parsingDeclareFile || svAmbient || hasFlag(modifiers, Modifiers.Ambient)) {\n                this.ambientModule = true;\n            }\n\n            this.currentToken = this.scanner.scan();\n            var name: AST = null;\n            var enclosedList: AST[] = null;\n            this.pushDeclLists();\n            var minChar = this.scanner.startPos;\n            var isDynamicMod = false;\n\n            if ((this.currentToken.tokenId == TokenID.Identifier) || (this.currentToken.tokenId == TokenID.StringLiteral) || (!isPrimitiveTypeToken(this.currentToken) && convertTokToID(this.currentToken, this.strictMode))) {\n                var nameText = this.currentToken.getText();\n\n                if (this.currentToken.tokenId == TokenID.StringLiteral) {\n                    isDynamicMod = true;\n                    if (!this.ambientModule) {\n                        this.reportParseError("Only ambient dynamic modules may have string literal names");\n                    }\n\n                    if (!svTopLevel) {\n                        this.reportParseError("Dynamic modules may not be nested within other modules");\n                    }\n                }\n\n                name = Identifier.fromToken(this.currentToken);\n                name.minChar = this.scanner.startPos;\n                name.limChar = this.scanner.pos;\n\n                this.currentToken = this.scanner.scan();\n            }\n            else if (this.currentToken.tokenId == TokenID.OpenBrace) {\n                this.reportParseError("Module name missing");\n                name = new Identifier("");\n                // "fake" position of where the ID would be\n                name.minChar = minChar;\n                name.limChar = minChar;\n            }\n\n            if (this.currentToken.tokenId == TokenID.Dot) {\n                enclosedList = new AST[];\n                this.parseDottedName(enclosedList);\n            }\n\n            if (name == null) {\n                name = new MissingIdentifier();\n            }\n\n            var moduleBody = new ASTList();\n            var bodyMinChar = this.scanner.startPos;\n            this.checkCurrentToken(TokenID.OpenBrace, errorRecoverySet | ErrorRecoverySet.ID);\n\n            if (svTopLevel && isDynamicMod) {\n                this.allowImportDeclaration = true;\n            } else {\n                this.allowImportDeclaration = false;\n            }\n            this.parseStatementList(\n                errorRecoverySet | ErrorRecoverySet.RCurly, moduleBody,\n                /*sourceElements:*/ true, /*noLeadingCase:*/ true, AllowedElements.Global, modifiers);\n            moduleBody.minChar = bodyMinChar;\n            moduleBody.limChar = this.scanner.pos;\n\n            var endingToken = new ASTSpan();\n            endingToken.minChar = this.scanner.startPos;\n            endingToken.limChar = this.scanner.pos;\n            this.checkCurrentToken(TokenID.CloseBrace, errorRecoverySet);\n\n            var limChar = this.scanner.lastTokenLimChar();\n            var moduleDecl: ModuleDeclaration;\n\n            this.allowImportDeclaration = svTopLevel;\n\n            if (enclosedList && (enclosedList.length > 0)) {\n                var len = enclosedList.length;\n                var innerName = <Identifier>enclosedList[len - 1];\n                var innerDecl = new ModuleDeclaration(innerName, moduleBody, this.topVarList(),\n                                                this.topScopeList(), endingToken);\n                innerDecl.preComments = preComments;\n\n                if (this.parsingDeclareFile || hasFl';
var v27282 = v27283 + 'ag(modifiers, Modifiers.Ambient)) {\n                    innerDecl.modFlags |= ModuleFlags.Ambient;\n                }\n\n                innerDecl.modFlags |= ModuleFlags.Exported;\n\n                // REVIEW: will also possibly need to re-parent comments as well\n                innerDecl.minChar = minChar;\n                innerDecl.limChar = limChar;\n\n                this.popDeclLists();\n                var outerModBod: ASTList;\n                for (var i = len - 2; i >= 0; i--) {\n                    outerModBod = new ASTList();\n                    outerModBod.append(innerDecl);\n                    innerName = <Identifier>enclosedList[i];\n                    innerDecl = new ModuleDeclaration(innerName, outerModBod, new ASTList(),\n                                                new ASTList(), endingToken);\n                    outerModBod.minChar = innerDecl.minChar = minChar;\n                    outerModBod.limChar = innerDecl.limChar = limChar;\n\n                    if (this.parsingDeclareFile || hasFlag(modifiers, Modifiers.Ambient)) {\n                        innerDecl.modFlags |= ModuleFlags.Ambient;\n                    }\n\n                    innerDecl.modFlags |= ModuleFlags.Exported;\n                }\n                outerModBod = new ASTList();\n                outerModBod.append(innerDecl);\n                outerModBod.minChar = minChar;\n                outerModBod.limChar = limChar;\n                moduleDecl = new ModuleDeclaration(<Identifier>name, outerModBod, new ASTList(),\n                                            new ASTList(), endingToken);\n            }\n            else {\n                moduleDecl = new ModuleDeclaration(<Identifier>name, moduleBody, this.topVarList(), this.topScopeList(), endingToken);\n                moduleDecl.preComments = preComments;\n                this.popDeclLists();\n            }\n\n            if (this.parsingDeclareFile || svAmbient || hasFlag(modifiers, Modifiers.Ambient)) {\n                moduleDecl.modFlags |= ModuleFlags.Ambient;\n            }\n            if (svAmbient || hasFlag(modifiers, Modifiers.Exported)) {\n                moduleDecl.modFlags |= ModuleFlags.Exported;\n            }\n            if (isDynamicMod) {\n                moduleDecl.modFlags |= ModuleFlags.IsDynamic;\n            }\n\n            this.ambientModule = svAmbient;\n\n            this.topLevel = svTopLevel;\n            moduleDecl.leftCurlyCount = this.scanner.leftCurlyCount - leftCurlyCount;\n            moduleDecl.rightCurlyCount = this.scanner.rightCurlyCount - rightCurlyCount;\n            moduleDecl.limChar = moduleBody.limChar;\n            return moduleDecl;\n        }\n\n        private parseTypeReferenceTail(errorRecoverySet: ErrorRecoverySet, minChar: number, term: AST): TypeReference {\n            var result = new TypeReference(term, 0);\n            result.minChar = minChar;\n            while (this.currentToken.tokenId == TokenID.OpenBracket) {\n                this.currentToken = this.scanner.scan();\n                result.arrayCount++;\n                this.checkCurrentToken(TokenID.CloseBracket, errorRecoverySet | ErrorRecoverySet.LBrack);\n            }\n            result.limChar = this.scanner.lastTokenLimChar();\n            return result;\n        }\n\n        // REVIEW: Consider renaming to parseTypeName.\n        private parseNamedType(errorRecoverySet: ErrorRecoverySet, minChar: number, term: AST, tail: bool): AST {\n            this.currentToken = this.scanner.scan();\n            if (this.currentToken.tokenId == TokenID.Dot) {\n                var curpos = this.scanner.pos;\n                this.currentToken = this.scanner.scan();\n                // Don\'t allow reserved words if immediately after a new line and error recovery is enabled\n                if ((this.currentToken.tokenId == TokenID.Identifier) || ((!this.errorRecovery || !this.scanner.lastTokenHadNewline()) && convertTokToID(this.currentToken, this.strictMode))) {\n                    var op2 = Identifier.fromToken(this.currentToken);\n                    op2.minChar = this.scanner.startPos;\n                    op2.limChar = this.scanner.pos;\n                    var dotNode = new BinaryExpression(NodeType.Dot, term, op2);\n                    dotNode.minChar = term.minChar;\n                    dotNode.limChar = op2.limChar;\n                    return this.parseNamedType(errorRecoverySet, minChar,\n                                            dotNode, tail);\n                }\n                else {\n                    this.reportParseError("need identifier after \'.\'");\n                    if (this.errorRecovery) {\n                        term.flags |= ASTFlags.DotLHS;\n                        // We set "limChar" to be slightly innacurate for completion list behavior\n                        // (last AST node from "quickParse" will match DotLHS and be at end of file position)\n                        // This is to match the behavior of TokenId.Dot processing in parsePostfixOperators.\n                        term.limChar = this.scanner.las';
var v27281 = v27282 + 'tTokenLimChar();\n                        return term;\n                    }\n                    else {\n                        var eop2 = new MissingIdentifier();\n                        eop2.minChar = this.scanner.pos;\n                        eop2.limChar = this.scanner.pos;\n                        var edotNode = new BinaryExpression(NodeType.Dot, term, eop2);\n                        edotNode.flags |= ASTFlags.Error;\n                        edotNode.minChar = term.minChar;\n                        edotNode.limChar = eop2.limChar;\n                        return this.parseNamedType(errorRecoverySet, minChar,\n                                                edotNode, tail);\n                    }\n                }\n            }\n            else {\n                if (tail) {\n                    return this.parseTypeReferenceTail(errorRecoverySet, minChar, term);\n                }\n                else {\n                    return term;\n                }\n            }\n        }\n\n        // REVIEW: Reconsider renaming this to parseType to match the grammar.\n        private parseTypeReference(errorRecoverySet: ErrorRecoverySet, allowVoid: bool): AST {\n            var minChar = this.scanner.startPos;\n            var isConstructorMember = false;\n\n            switch (this.currentToken.tokenId) {\n                case TokenID.Void:\n                    if (!allowVoid) {\n                        this.reportParseError("void not a valid type in this context");\n                    }\n                // Intentional fall-through\n                case TokenID.Any:\n                case TokenID.Number:\n                case TokenID.Bool:\n                case TokenID.String: {\n                    var text = tokenTable[this.currentToken.tokenId].text;\n                    var predefinedIdentifier = new Identifier(text);\n                    predefinedIdentifier.minChar = minChar;\n                    predefinedIdentifier.limChar = this.scanner.pos;\n                    this.currentToken = this.scanner.scan();\n                    return this.parseTypeReferenceTail(errorRecoverySet, minChar, predefinedIdentifier);\n                }\n\n                case TokenID.Identifier:\n                    var ident = this.createRef(this.currentToken.getText(), (<IdentifierToken>this.currentToken).hasEscapeSequence, minChar);\n                    ident.limChar = this.scanner.pos;\n                    return this.parseNamedType(errorRecoverySet, minChar, ident, true);\n\n                case TokenID.OpenBrace:\n                    return this.parseObjectType(minChar, errorRecoverySet);\n\n                case TokenID.New:\n                    this.currentToken = this.scanner.scan();\n                    // can\'t use chkCurrentTok, since we don\'t want to advance the token\n                    if (this.currentToken.tokenId != TokenID.OpenParen) {\n                        this.reportParseError("Expected \'(\'");\n                    }\n                    else {\n                        isConstructorMember = true;\n                        // fall through...\n                    }\n\n                case TokenID.OpenParen: {\n                    // ( formals ) => type\n                    var formals = new ASTList();\n                    var variableArgList =\n                        this.parseFormalParameterList(errorRecoverySet | ErrorRecoverySet.RParen,\n                                            formals, false, true, false, false, false, false, null, true);\n                    this.checkCurrentToken(TokenID.EqualsGreaterThan, errorRecoverySet);\n                    var returnType = this.parseTypeReference(errorRecoverySet, true);\n                    var funcDecl = new FuncDecl(null, null, false, formals, null, null, null,\n                                                NodeType.FuncDecl);\n                    funcDecl.returnTypeAnnotation = returnType;\n                    funcDecl.variableArgList = variableArgList;\n                    funcDecl.fncFlags |= FncFlags.Signature;\n\n                    if (isConstructorMember) {\n                        funcDecl.fncFlags |= FncFlags.ConstructMember;\n                        funcDecl.hint = "_construct";\n                        funcDecl.classDecl = null;\n                    }\n                    funcDecl.minChar = minChar;\n                    return this.parseTypeReferenceTail(errorRecoverySet, minChar, funcDecl);\n                }\n\n                default:\n                    this.reportParseError("Expected type name");\n                    var etr = new TypeReference(null, 0);\n                    etr.flags |= ASTFlags.Error;\n                    etr.minChar = this.scanner.pos;\n                    etr.limChar = this.scanner.pos;\n                    return etr;\n            }\n        }\n\n        private parseObjectType(minChar: number, errorRecoverySet: ErrorRecoverySet): TypeReference {\n            this.currentToken = this.scanner.scan();\n\n            var members = new ASTList();\n            members.minChar = minChar;\n\n            var prevInInter';
var v27280 = v27281 + 'faceDecl = this.inInterfaceDecl;\n            this.inInterfaceDecl = true;\n            this.parseTypeMemberList(errorRecoverySet | ErrorRecoverySet.RCurly, members);\n            this.inInterfaceDecl = prevInInterfaceDecl;\n\n            this.checkCurrentToken(TokenID.CloseBrace, errorRecoverySet);\n\n            // REVIEW: We\'re parsing an ObjectType, but we give a NodeType of Interface here.\n            var interfaceDecl = new InterfaceDeclaration(\n                this.anonId, members, /*extends:*/ null, /*implementsL*/ null);\n\n            interfaceDecl.minChar = minChar;\n            interfaceDecl.limChar = members.limChar;    // "}"\n\n            return this.parseTypeReferenceTail(errorRecoverySet, minChar, interfaceDecl);\n        }\n\n        private parseFunctionBlock(errorRecoverySet: ErrorRecoverySet,\n                                   allowedElements: AllowedElements,\n                                   parentModifiers: Modifiers,\n                                   bod: ASTList,\n                                   bodMinChar: number): void {\n            this.state = ParseState.StartStatementList;\n            this.checkCurrentToken(TokenID.OpenBrace, errorRecoverySet | ErrorRecoverySet.StmtStart);\n            var savedInFunction = this.inFunction;\n            this.inFunction = true;\n            this.parseStatementList(\n                errorRecoverySet | ErrorRecoverySet.RCurly | ErrorRecoverySet.StmtStart,\n                bod, /*sourceElements:*/ true, /*noLeadingCase:*/ false, allowedElements, parentModifiers);\n            bod.minChar = bodMinChar;\n            bod.limChar = this.scanner.pos;\n            this.inFunction = savedInFunction;\n            var ec = new EndCode();\n            ec.minChar = bod.limChar;\n            ec.limChar = ec.minChar;\n            bod.append(ec);\n        }\n\n        private parseFunctionStatements(errorRecoverySet: ErrorRecoverySet,\n                                        name: Identifier,\n                                        isConstructor: bool,\n                                        isMethod: bool,\n                                        args: ASTList,\n                                        allowedElements: AllowedElements,\n                                        minChar: number,\n                                        requiresSignature: bool,\n                                        parentModifiers: Modifiers) {\n\n            this.pushDeclLists();\n            // start new statement stack\n            var svStmtStack = this.statementInfoStack;\n            this.resetStmtStack();\n\n            var bod: ASTList = null;\n            var wasShorthand = false;\n            var isAnonLambda = false;\n            var limChar: number;\n\n            if (requiresSignature) {\n                // If we require a signature, but they provided a block, then give an error, but\n                // still consume the block.\n                limChar = this.scanner.pos;\n                if (this.currentToken.tokenId === TokenID.OpenBrace) {\n                    this.reportParseError("Function declarations are not permitted within interfaces, ambient modules or classes")\n                    bod = new ASTList();\n                    var bodMinChar = this.scanner.startPos;\n\n                    this.parseFunctionBlock(errorRecoverySet, allowedElements, parentModifiers, bod, bodMinChar);\n                    this.checkCurrentToken(TokenID.CloseBrace, errorRecoverySet);\n\n                    // If there\'s also a semicolon, then just skip over it.  We don\'t want to report an \n                    // additional error here.\n                    if (this.currentToken.tokenId === TokenID.Semicolon) {\n                        this.currentToken = this.scanner.scan();\n                    }\n                }\n                else {\n                    this.checkCurrentToken(TokenID.Semicolon, errorRecoverySet, "Expected \';\'");\n                }\n            }\n            else {\n                bod = new ASTList();\n                var bodMinChar = this.scanner.startPos;\n                if (this.currentToken.tokenId == TokenID.EqualsGreaterThan) {\n                    if (isMethod) {\n                        this.reportParseError("\'=>\' may not be used for class methods");\n                    }\n                    wasShorthand = true;\n                    this.currentToken = this.scanner.scan();\n                }\n\n                if (wasShorthand && this.currentToken.tokenId != TokenID.OpenBrace) {\n                    var retExpr = this.parseExpr(errorRecoverySet | ErrorRecoverySet.SColon,\n                                            OperatorPrecedence.Assignment, true,\n                                            TypeContext.NoTypes);\n                    var retStmt = new ReturnStatement();\n                    retStmt.returnExpression = retExpr;\n                    retStmt.minChar = retExpr.minChar;\n                    retStmt.limChar = retExpr.limChar;\n                    bod.minChar = bodMinChar;\n                    bod.append(retStmt);\n ';
var v27279 = v27280 + '               }\n                else {\n                    isAnonLambda = wasShorthand;\n                    this.parseFunctionBlock(errorRecoverySet, allowedElements, parentModifiers, bod, bodMinChar);\n                }\n\n                limChar = this.scanner.pos;\n            }\n\n            var funcDecl = new FuncDecl(name, bod, isConstructor, args, this.topVarList(),\n                                        this.topScopeList(), this.topStaticsList(), NodeType.FuncDecl);\n            this.popDeclLists();\n            var scopeList = this.topScopeList();\n            scopeList.append(funcDecl);\n            var staticFuncDecl = false;\n\n            if (!requiresSignature) {\n                if (!wasShorthand || isAnonLambda) {\n                    funcDecl.endingToken = new ASTSpan();\n                    funcDecl.endingToken.minChar = this.scanner.startPos;\n                    funcDecl.endingToken.limChar = this.scanner.pos;\n                    this.checkCurrentToken(TokenID.CloseBrace, errorRecoverySet);\n\n                    if (isAnonLambda) {\n                        funcDecl.fncFlags |= FncFlags.IsFatArrowFunction;\n                    }\n                }\n                else {\n                    funcDecl.fncFlags |= FncFlags.IsFatArrowFunction;\n                    funcDecl.endingToken = new ASTSpan();\n\n                    funcDecl.endingToken.minChar = bod.members[0].minChar;\n                    funcDecl.endingToken.limChar = bod.members[0].limChar;\n                }\n            }\n            funcDecl.minChar = minChar;\n            funcDecl.limChar = limChar;\n\n            if (!requiresSignature) {\n                funcDecl.fncFlags |= FncFlags.Definition;\n            }\n\n            this.statementInfoStack = svStmtStack;\n            return funcDecl;\n        }\n\n        private transformAnonymousArgsIntoFormals(formals: ASTList, argList: AST) : bool {\n\n            var translateBinExOperand = (operand: AST) : bool => {\n                if (operand.nodeType == NodeType.Comma) {\n                    return this.transformAnonymousArgsIntoFormals(formals, operand);\n                }\n                else if (operand.nodeType == NodeType.Name || operand.nodeType == NodeType.Asg) {\n                    var opArg = operand.nodeType == NodeType.Asg ? (<BinaryExpression>operand).operand1 : operand;\n\n                    var arg = new ArgDecl(<Identifier>opArg);\n                    arg.preComments = opArg.preComments;\n                    arg.postComments = opArg.postComments;\n                    arg.minChar = operand.minChar;\n                    arg.limChar = operand.limChar;\n\n                    if (hasFlag(opArg.flags, ASTFlags.PossibleOptionalParameter)) {\n                        arg.isOptional = true;\n                    }\n\n                    if (operand.nodeType == NodeType.Asg) {\n                        arg.init = (<BinaryExpression>operand).operand2;\n                    }\n\n                    formals.append(arg);\n\n                    return arg.isOptional || arg.init;\n                }\n                else {\n                    this.reportParseError("Invalid lambda argument");\n                }\n                return false;\n            }\n\n            if (argList) {\n                if (argList.nodeType == NodeType.Comma) {\n                    var commaList = <BinaryExpression> argList;\n                    if (commaList.operand1.isParenthesized) { \n                        this.reportParseError("Invalid lambda argument", commaList.operand1.minChar, commaList.operand1.limChar);\n                    }\n                    if (commaList.operand2.isParenthesized) { \n                        this.reportParseError("Invalid lambda argument", commaList.operand2.minChar, commaList.operand2.limChar);\n                    }\n                    var isOptional = translateBinExOperand(commaList.operand1);\n                    isOptional = translateBinExOperand(commaList.operand2) || isOptional;\n                    return isOptional;\n                }\n                else {\n                    return translateBinExOperand(argList);\n                }\n            }\n        }\n\n        private parseFormalParameterList(errorRecoverySet: ErrorRecoverySet,\n                                            formals: ASTList,\n                                            isClassConstr: bool,\n                                            isSig: bool,\n                                            isIndexer: bool,\n                                            isGetter: bool,\n                                            isSetter: bool,\n                                            isLambda: bool,\n                                            preProcessedLambdaArgs: AST,\n                                            expectClosingRParen: bool): bool \n        {\n\n            formals.minChar = this.scanner.startPos; // \'(\' or \'[\'\n            if (isIndexer) {\n                this.currentToken = this.scanner.scan();\n            }\n            else if (!isLambda) {\n                this.ch';
var v27278 = v27279 + 'eckCurrentToken(TokenID.OpenParen, errorRecoverySet | ErrorRecoverySet.RParen);\n            }\n            var sawEllipsis = false;\n            var firstArg = true;\n            var hasOptional = false;\n            var haveFirstArgID = false;\n\n            // if preProcessedLambdaArgs is "true", we either have a typeless argument list, or we have\n            // a single identifier node and the current token is the \':\' before a typereference\n            if (isLambda && preProcessedLambdaArgs && preProcessedLambdaArgs.nodeType != NodeType.EmptyExpr) {\n                hasOptional = this.transformAnonymousArgsIntoFormals(formals, preProcessedLambdaArgs);\n                haveFirstArgID = true;\n            }\n\n            while (true) {\n                var munchedArg = false;\n                var argFlags = VarFlags.None;\n                var argMinChar = this.scanner.startPos;\n\n                if (this.inferPropertiesFromThisAssignment && this.currentToken.tokenId == TokenID.This) {\n                    if (!isClassConstr) {\n                        this.reportParseError("Instance property declarations using \'this\' may only be used in class constructors");\n                    }\n                    this.currentToken = this.scanner.scan(); // consume the \'.\'\n\n                    argFlags |= (VarFlags.Public | VarFlags.Property);\n                    if (this.currentClassDefinition) {\n                        this.currentClassDefinition.varFlags |= VarFlags.ClassSuperMustBeFirstCallInConstructor;\n                    }\n                }\n                if (this.currentToken.tokenId == TokenID.Public) {\n                    argFlags |= (VarFlags.Public | VarFlags.Property);\n\n                    if (this.currentClassDefinition) {\n                        this.currentClassDefinition.varFlags |= VarFlags.ClassSuperMustBeFirstCallInConstructor;\n                    }\n                }\n                else if (this.currentToken.tokenId == TokenID.Private) {\n                    argFlags |= (VarFlags.Private | VarFlags.Property);\n\n                    if (this.currentClassDefinition) {\n                        this.currentClassDefinition.varFlags |= VarFlags.ClassSuperMustBeFirstCallInConstructor;\n                    }\n                }\n                else if (this.currentToken.tokenId == TokenID.Static && isClassConstr) {\n                    this.reportParseError("Static properties can not be declared as parameter properties");\n                    this.currentToken = this.scanner.scan();\n                }\n\n                if (argFlags != VarFlags.None) {\n                    if (!isClassConstr) {\n                        this.reportParseError("only constructor parameters can be properties");\n                    }\n                    this.currentToken = this.scanner.scan();\n\n                    if (isModifier(this.currentToken)) { \n                        this.reportParseError("Multiple modifiers may not be applied to parameters");\n                        this.currentToken = this.scanner.scan();\n                    }\n\n                    if (this.inferPropertiesFromThisAssignment && this.currentToken.tokenId == TokenID.This) {\n                        if (!isClassConstr) {\n                            this.reportParseError("Instance property declarations using \'this\' may only be used in class constructors");\n                        }\n                        this.currentToken = this.scanner.scan(); // consume the \'.\'\n                        this.currentToken = this.scanner.scan();\n                    }\n                }\n                else if (this.currentToken.tokenId == TokenID.DotDotDot) {\n                    sawEllipsis = true;\n                    this.currentToken = this.scanner.scan();\n\n                    if (!(this.currentToken.tokenId == TokenID.Identifier) || convertTokToID(this.currentToken, this.strictMode)) {\n                        this.reportParseError("\'...\' parameters require both a parameter name and an array type annotation to be specified");\n                        sawEllipsis = false; // Do not treat this parameter as vararg\n                    }\n                }\n\n                var argId: Identifier = null;\n\n                if (!haveFirstArgID && (this.currentToken.tokenId == TokenID.Identifier) || convertTokToID(this.currentToken, this.strictMode)) {\n                    argId = Identifier.fromToken(this.currentToken);\n                    argId.minChar = this.scanner.startPos;\n                    argId.limChar = this.scanner.pos;\n                }\n\n                if (haveFirstArgID || argId) {\n                    munchedArg = true;\n                    var type: AST = null;\n                    var arg: ArgDecl = null;\n\n                    if (haveFirstArgID && formals.members.length) {\n                        arg = <ArgDecl>formals.members[formals.members.length - 1];\n\n                        if (arg.isOptional) {\n                            hasOptional = true;\n                        }\n                    }\n         ';
var v27277 = v27278 + '           else {\n                        arg = new ArgDecl(argId);\n\n                        if (isGetter) {\n                            this.reportParseError("Property getters may not take any arguments");\n                        }\n\n                        if (isSetter && !firstArg) {\n                            this.reportParseError("Property setters may only take one argument");\n                        }\n\n                        arg.minChar = argMinChar;\n                        arg.preComments = this.parseComments();\n                        this.currentToken = this.scanner.scan();\n                    }\n\n                    if (this.currentToken.tokenId == TokenID.Question) {\n                        arg.isOptional = true;\n                        hasOptional = true;\n                        this.currentToken = this.scanner.scan();\n                    }\n\n                    if (this.currentToken.tokenId == TokenID.Colon) {\n                        this.currentToken = this.scanner.scan();\n                        type = this.parseTypeReference(errorRecoverySet, false);\n                    }\n\n                    // check for default parameter\n                    // REVIEW: In the case of a typed reference, assume that parseTypeReference or one\n                    // of its children in the call graph advanced tok\n                    if (this.currentToken.tokenId == TokenID.Equals) {\n                        if (isSig) {\n                            this.reportParseError("Arguments in signatures may not have default values");\n                        }\n\n                        hasOptional = true;\n                        this.currentToken = this.scanner.scan();\n                        arg.init = this.parseExpr(ErrorRecoverySet.Comma | errorRecoverySet,\n                                            OperatorPrecedence.Comma, false,\n                                            TypeContext.NoTypes);\n\n                    }\n\n                    if (hasOptional && !arg.isOptionalArg() && !sawEllipsis) {\n                        this.reportParseError("Optional parameters may only be followed by other optional parameters");\n                    }\n\n                    if (sawEllipsis && arg.isOptionalArg()) {\n                        this.reportParseError("Varargs may not be optional or have default parameters");\n                    }\n\n                    if (sawEllipsis && !type) {\n                        // Ellipsis is missing a type definition\n                        this.reportParseError("\'...\' parameters require both a parameter name and an array type annotation to be specified");\n                    }\n\n                    // REVIEW: Ok for lambdas?\n                    arg.postComments = this.parseComments();\n                    arg.typeExpr = type;\n                    arg.limChar = this.scanner.lastTokenLimChar();\n                    arg.varFlags |= argFlags;\n                    if (!haveFirstArgID) {\n                        formals.append(arg);\n                    }\n                    else {\n                        haveFirstArgID = false;\n                    }\n                }\n                firstArg = false;\n                if (this.currentToken.tokenId == TokenID.Comma) {\n                    if ((munchedArg) && (!sawEllipsis)) {\n                        this.currentToken = this.scanner.scan();\n                        continue;\n                    }\n                    else {\n                        this.reportParseError("Unexpected \',\' in argument list");\n                        if (this.errorRecovery) {\n                            this.currentToken = this.scanner.scan();\n                            continue;\n                        }\n                    }\n                }\n                else {\n                    break;\n                }\n            }\n\n            if (isIndexer) {\n                this.checkCurrentToken(TokenID.CloseBracket, errorRecoverySet | ErrorRecoverySet.LCurly | ErrorRecoverySet.SColon);\n            }\n            else if (expectClosingRParen) {\n                this.checkCurrentToken(TokenID.CloseParen, errorRecoverySet | ErrorRecoverySet.LCurly | ErrorRecoverySet.SColon);\n            }\n            formals.limChar = this.scanner.lastTokenLimChar(); // \')\' or \']\'\n            return sawEllipsis;\n        }\n\n        private parseFncDecl(errorRecoverySet: ErrorRecoverySet,\n                             isDecl: bool,\n                             requiresSignature: bool,\n                             isMethod: bool,\n                             methodName: Identifier,\n                             indexer: bool,\n                             isStatic: bool,\n                             markedAsAmbient: bool,\n                             modifiers: Modifiers,\n                             lambdaArgContext: ILambdaArgumentContext,\n                             expectClosingRParen: bool): AST {\n\n            var leftCurlyCount = this.scanner.leftCurlyCount;\n            var rightCurlyCount = this.scanner.rightCurlyC';
var v27276 = v27277 + 'ount;\n\n            var prevInConstr = this.parsingClassConstructorDefinition;\n            this.parsingClassConstructorDefinition = false;\n\n            var name: Identifier = null;\n            var fnMin = this.scanner.startPos;\n            var minChar = this.scanner.pos;\n            var prevNestingLevel = this.nestingLevel;\n            var preComments = this.parseComments();\n            var isLambda = !!lambdaArgContext;\n            this.nestingLevel = 0;\n            if ((!this.style_funcInLoop) && this.inLoop()) {\n                this.reportParseStyleError("function declaration in loop");\n            }\n            if (!isMethod && !isStatic && !indexer && !lambdaArgContext) {\n                // past function keyword\n                this.currentToken = this.scanner.scan();\n                this.state = ParseState.StartFncDecl;\n                if ((this.currentToken.tokenId != TokenID.Identifier) && (!convertTokToID(this.currentToken, this.strictMode))) {\n                    if (isDecl) {\n                        this.reportParseError("Function declaration must include identifier");\n\n                        this.nestingLevel = prevNestingLevel;\n                        return new IncompleteAST(fnMin, this.scanner.pos);\n                    }\n                }\n                else {\n                    name = Identifier.fromToken(this.currentToken);\n                    name.minChar = this.scanner.startPos;\n                    name.limChar = this.scanner.pos;\n                    this.currentToken = this.scanner.scan();\n                }\n            }\n            else {\n                if (methodName) {\n                    name = methodName;\n                }\n            }\n\n            this.state = ParseState.FncDeclName;\n            var args: ASTList = new ASTList();\n            var variableArgList = false;\n            var isOverload = false;\n            var isGetter = hasFlag(modifiers, Modifiers.Getter);\n            var isSetter = hasFlag(modifiers, Modifiers.Setter);\n            if ((this.currentToken.tokenId == TokenID.OpenParen) || (indexer && (this.currentToken.tokenId == TokenID.OpenBracket)) || (lambdaArgContext && (lambdaArgContext.preProcessedLambdaArgs || this.currentToken.tokenId == TokenID.DotDotDot))) {\n                // arg list\n                variableArgList = this.parseFormalParameterList(errorRecoverySet, args, false, requiresSignature, indexer, isGetter, isSetter, isLambda, lambdaArgContext ? lambdaArgContext.preProcessedLambdaArgs : null, expectClosingRParen);\n            }\n            this.state = ParseState.FncDeclArgs;\n            var returnType: AST = null;\n            if (this.currentToken.tokenId == TokenID.Colon) {\n                this.currentToken = this.scanner.scan();\n                if (hasFlag(modifiers, Modifiers.Setter)) {\n                    this.reportParseError("Property setters may not declare a return type");\n                }\n                returnType = this.parseTypeReference(errorRecoverySet, true);\n            }\n\n            if (indexer && args.members.length == 0) {\n                this.reportParseError("Index signatures require a parameter type to be specified");\n            }\n            this.state = ParseState.FncDeclReturnType;\n\n            if (isLambda && this.currentToken.tokenId != TokenID.EqualsGreaterThan) {\n                this.reportParseError("Expected \'=>\'");\n            }\n\n            // REVIEW:\n            // Currently, it\'s imperative that ambient functions *not* be marked as overloads.  At some point, we may\n            // want to unify the two concepts internally\n            if (isDecl && !(this.parsingDeclareFile || markedAsAmbient) && (!isMethod || !(this.ambientModule || this.ambientClass || this.inInterfaceDecl)) && this.currentToken.tokenId == TokenID.Semicolon) {\n                isOverload = true;\n                isDecl = false;\n                requiresSignature = true;\n            }\n            var svInFncDecl = this.inFncDecl;\n            this.inFncDecl = true;\n            var funcDecl: FuncDecl =\n                this.parseFunctionStatements(\n                errorRecoverySet | ErrorRecoverySet.RCurly,\n                name, /*isConstructor:*/ false, isMethod, args, AllowedElements.None,\n                minChar, requiresSignature, Modifiers.None);\n\n            this.inFncDecl = svInFncDecl;\n            funcDecl.variableArgList = variableArgList;\n            funcDecl.isOverload = isOverload;\n\n            if (!requiresSignature) { // REVIEW: What\'s the point of this?  Why not just use \'Signature\' instead of \'Definition\'?\n                funcDecl.fncFlags |= FncFlags.Definition;\n            }\n\n            if (isStatic) {\n                funcDecl.fncFlags |= FncFlags.Static;\n            }\n\n            if (requiresSignature) {\n                funcDecl.fncFlags |= FncFlags.Signature;\n            }\n            if (indexer) {\n                funcDecl.fncFlags |= FncFlags.IndexerMember;\n            }\n            funcDecl.returnTypeAnnotation = returnType;';
var v27275 = v27276 + '\n            if (isMethod) {\n                funcDecl.fncFlags |= FncFlags.Method;\n                // all class property methods are currently exported\n                funcDecl.fncFlags |= FncFlags.ClassPropertyMethodExported;\n            }\n            funcDecl.leftCurlyCount = this.scanner.leftCurlyCount - leftCurlyCount;\n            funcDecl.rightCurlyCount = this.scanner.rightCurlyCount - rightCurlyCount;\n\n            this.nestingLevel = prevNestingLevel;\n            this.parsingClassConstructorDefinition = prevInConstr;\n            funcDecl.preComments = preComments;\n            return funcDecl;\n        }\n\n        private convertToTypeReference(ast: AST): TypeReference {\n            var result: TypeReference;\n            switch (ast.nodeType) {\n                case NodeType.TypeRef:\n                    return <TypeReference>ast;\n                case NodeType.Name:\n                    result = new TypeReference(ast, 0);\n                    result.minChar = ast.minChar;\n                    result.limChar = ast.limChar;\n                    return result;\n                case NodeType.Index: {\n                    var expr = <BinaryExpression>ast;\n                    result = this.convertToTypeReference(expr.operand1);\n                    if (result) {\n                        result.arrayCount++;\n                        result.minChar = expr.minChar;\n                        result.limChar = expr.limChar;\n                        return result;\n                    }\n                    else {\n                        var etr = <TypeReference>new AST(NodeType.Error);\n                        return etr;\n                    }\n                }\n            }\n            return null;\n        }\n\n        private parseArgList(errorRecoverySet: ErrorRecoverySet): ASTList {\n            var args: ASTList = new ASTList();\n            args.minChar = this.scanner.startPos;\n\n            // skip left paren\n            this.currentToken = this.scanner.scan();\n\n            if (this.currentToken.tokenId !== TokenID.CloseParen) {\n                while (true) {\n                    if (args.members.length > 0xffff) {\n                        this.reportParseError("max number of args exceeded");\n                        break;\n                    }\n\n                    var arg = this.parseExpr(\n                        ErrorRecoverySet.Comma | errorRecoverySet,\n                        OperatorPrecedence.Comma, \n                        /*allowIn:*/ true,\n                        TypeContext.NoTypes);\n\n                    args.append(arg);\n                    if (this.currentToken.tokenId != TokenID.Comma) {\n                        break;\n                    }\n\n                    this.currentToken = this.scanner.scan();\n                }\n            }\n\n            args.limChar = this.scanner.pos;\n            return args;\n        }\n\n        private parseBaseList(extendsList: ASTList,\n                              implementsList: ASTList,\n                              errorRecoverySet: ErrorRecoverySet,\n                              isClass: bool): void {\n            var keyword = true;\n            var currentList = extendsList;\n            for (; ;) {\n                if (keyword) {\n                    if (this.currentToken.tokenId === TokenID.Implements) {\n                        currentList = implementsList;\n                    }\n                    else if (this.currentToken.tokenId == TokenID.Extends && !this.requiresExtendsBlock) {\n                        this.requiresExtendsBlock = isClass;\n                    }\n                    this.currentToken = this.scanner.scan();\n                    keyword = false;\n                }\n                var baseName: Identifier = null;\n                if ((this.currentToken.tokenId == TokenID.Identifier) || convertTokToID(this.currentToken, this.strictMode)) {\n                    var minChar = this.scanner.startPos;\n                    baseName = Identifier.fromToken(this.currentToken);\n                    baseName.minChar = minChar;\n                    baseName.limChar = this.scanner.pos;\n                    baseName = <Identifier>this.parseNamedType(errorRecoverySet | ErrorRecoverySet.LCurly,\n                                            minChar, baseName, false);\n                }\n                else {\n                    this.reportParseError("Expected base name");\n                    if (this.errorRecovery) {\n                        baseName = new MissingIdentifier();\n                        baseName.minChar = this.scanner.pos;\n                        baseName.limChar = this.scanner.pos;\n                        baseName.flags |= ASTFlags.Error;\n                    }\n                }\n                if (this.currentToken.tokenId == TokenID.OpenParen) {\n                    if (isClass) {\n                        this.reportParseError("Base classes may only be initialized via a \'super\' call within the constructor body");\n                    }\n                    else {\n                        th';
var v27274 = v27275 + 'is.reportParseError("Interfaces may not be extended with a call expression");\n                    }\n                }\n                else {\n                    currentList.append(baseName);\n                }\n\n                if (isClass && currentList == extendsList && extendsList.members.length > 1) {\n                    this.reportParseError("A class may only extend one other class");\n                }\n\n                if (this.currentToken.tokenId == TokenID.Comma) {\n                    this.currentToken = this.scanner.scan();\n                    continue;\n                }\n\n                else if ((this.currentToken.tokenId == TokenID.Extends) ||\n                         (this.currentToken.tokenId == TokenID.Implements)) {\n\n                    if (this.currentToken.tokenId == TokenID.Extends && !this.requiresExtendsBlock) {\n                        this.requiresExtendsBlock = isClass;\n                    }\n\n                    currentList = extendsList;\n                    keyword = true;\n                    continue;\n                }\n\n                break;\n            }\n        }\n\n        private parseClassDecl(errorRecoverySet: ErrorRecoverySet, minChar: number, modifiers: Modifiers): ClassDeclaration {\n            var leftCurlyCount = this.scanner.leftCurlyCount;\n            var rightCurlyCount = this.scanner.rightCurlyCount;\n\n            if ((modifiers & Modifiers.Readonly) != Modifiers.None) {\n                this.reportParseError("const modifier is implicit for class");\n            }\n\n            // mark the class as ambient, as necessary\n            if (this.parsingDeclareFile || this.ambientModule) {\n                modifiers |= Modifiers.Ambient;\n                modifiers |= Modifiers.Exported;\n            }\n            var classIsMarkedAsAmbient = this.parsingDeclareFile || (modifiers & Modifiers.Ambient) != Modifiers.None;\n            var svAmbientClass = this.ambientClass;\n            this.ambientClass = classIsMarkedAsAmbient;\n\n            // grab the class\'s name\n            this.currentToken = this.scanner.scan();\n            var name: Identifier = null;\n            if ((this.currentToken.tokenId == TokenID.Identifier) || (!isPrimitiveTypeToken(this.currentToken) && convertTokToID(this.currentToken, this.strictMode)) ) {\n                name = Identifier.fromToken(this.currentToken);\n                name.minChar = this.scanner.startPos;\n                name.limChar = this.scanner.pos;\n                this.currentToken = this.scanner.scan();\n            }\n            else {\n                this.reportParseError("class missing name");\n                if (this.errorRecovery) {\n                    name = new MissingIdentifier();\n                    name.minChar = this.scanner.pos;\n                    name.limChar = this.scanner.pos;\n                    name.flags |= ASTFlags.Error;\n                }\n            }\n\n            var extendsList: ASTList = null;\n            var implementsList: ASTList = null;\n            var requiresSignature = false;\n\n            if ((this.currentToken.tokenId == TokenID.Extends) ||\n                (this.currentToken.tokenId == TokenID.Implements)) {\n                extendsList = new ASTList();\n                implementsList = new ASTList();\n                this.parseBaseList(extendsList, implementsList, errorRecoverySet, /*isClass:*/ true);\n            }\n\n            // REVIEW: Note that we don\'t set this as the current class decl\n            var classDecl = new ClassDeclaration(name, new ASTList(), extendsList, implementsList);\n\n            this.currentClassDefinition = classDecl;\n\n            // parse the classes members\n            this.parseClassElements(classDecl, errorRecoverySet, modifiers);\n\n            if (this.ambientModule || this.parsingDeclareFile || hasFlag(modifiers, Modifiers.Exported)) {\n                classDecl.varFlags |= VarFlags.Exported;\n            }\n\n            if (this.ambientModule || hasFlag(modifiers, Modifiers.Ambient)) {\n                classDecl.varFlags |= VarFlags.Ambient;\n            }\n\n            classDecl.varFlags |= VarFlags.Class;\n\n            this.ambientClass = svAmbientClass;\n            classDecl.leftCurlyCount = this.scanner.leftCurlyCount - leftCurlyCount;\n            classDecl.rightCurlyCount = this.scanner.rightCurlyCount - rightCurlyCount;\n            return classDecl;\n        }\n\n        private parseClassElements(classDecl: ClassDeclaration, errorRecoverySet: ErrorRecoverySet, parentModifiers: Modifiers) {\n            var modifiers = parentModifiers;\n            var resetModifiers = false;\n\n            var membersMinChar = this.scanner.startPos;\n            this.checkCurrentToken(TokenID.OpenBrace, errorRecoverySet);\n\n            this.nestingLevel++;\n\n            var currentMemberMinChar = this.scanner.startPos;\n            var wasGetOrSetId = false;\n\n            while (!(this.currentToken.tokenId == TokenID.CloseBrace || this.currentToken.tokenId == TokenID.EndOfFile)) {\n                var scanNext = true;';
var v27273 = v27274 + '\n                var publicOrPrivateFlags = Modifiers.Public | Modifiers.Private;\n\n                // modifiers\n                if (this.currentToken.tokenId == TokenID.Get) {\n                    if (modifiers & Modifiers.Getter) {\n                        this.reportParseError("Duplicate \'get\' declaration in class body");\n                    }\n                    if (modifiers & Modifiers.Setter) {\n                        this.reportParseError("Getter already marked as a setter");\n                    }\n                    modifiers |= Modifiers.Getter;\n                }\n                else if (this.currentToken.tokenId == TokenID.Set) {\n                    if (modifiers & Modifiers.Setter) {\n                        this.reportParseError("Duplicate \'set\' declaration in class body");\n                    }\n                    if (modifiers & Modifiers.Getter) {\n                        this.reportParseError("Setter already marked as a getter");\n                    }\n                    modifiers |= Modifiers.Setter;\n\n                }\n                else if (this.currentToken.tokenId == TokenID.Private) {\n                    if (modifiers & publicOrPrivateFlags) {\n                        this.reportParseError("Multiple modifiers may not be applied to class members");\n                    }\n                    modifiers |= Modifiers.Private;\n                }\n                else if (this.currentToken.tokenId == TokenID.Public) {\n                    if (modifiers & publicOrPrivateFlags) {\n                        this.reportParseError("Multiple modifiers may not be applied to class members");\n                    }\n                    modifiers |= Modifiers.Public;\n                }\n                else if (this.currentToken.tokenId == TokenID.Static) {\n                    if (modifiers & Modifiers.Static) { // only check for double instances of static\n                        this.reportParseError("Multiple modifiers may not be applied to class members");\n                    }\n                    modifiers |= Modifiers.Static;\n                }  // constructors\n                else if (this.currentToken.tokenId == TokenID.Constructor) {\n\n                    if (modifiers != parentModifiers) {\n                        this.reportParseError("Constructors may not have modifiers");\n                    }\n\n                    this.parseClassConstructorDeclaration(currentMemberMinChar, errorRecoverySet, modifiers);\n                    scanNext = false; // parsing functions advances the token for us\n                    resetModifiers = true;\n                }  // member declarations\n                else if (wasGetOrSetId || this.currentToken.tokenId == TokenID.Identifier || convertTokToIDName(this.currentToken)) {\n\n                    var idText = wasGetOrSetId ? ((modifiers & Modifiers.Getter) ? "get" : "set") : this.currentToken.getText();\n                    var id = wasGetOrSetId ? new Identifier(idText) : Identifier.fromToken(this.currentToken);\n                    id.minChar = this.scanner.startPos;\n                    id.limChar = this.scanner.pos;\n\n                    // unset the get/set bit, if we\'re using it for an id\n                    if (wasGetOrSetId) {\n                        modifiers = modifiers ^ ((modifiers & Modifiers.Getter) ? Modifiers.Getter : Modifiers.Setter);\n                        wasGetOrSetId = false;\n                    }\n                    else {\n                        this.currentToken = this.scanner.scan();\n                    }\n\n                    if (this.currentToken.tokenId == TokenID.OpenParen) {\n                        this.parseClassMemberFunctionDeclaration(id, currentMemberMinChar, errorRecoverySet, modifiers);\n                        scanNext = false; // parsing functions advances the token for us\n                    }\n                    else {\n                        if (modifiers & Modifiers.Getter || modifiers & Modifiers.Setter) {\n                            this.reportParseError("Property accessors must be functions");\n                        }\n\n                        var varDecl = this.parseClassMemberVariableDeclaration(id, currentMemberMinChar, false, errorRecoverySet, modifiers);\n\n                        if (varDecl.init && varDecl.init.nodeType == NodeType.FuncDecl) {\n                            if (this.currentToken.tokenId == TokenID.CloseBrace) {\n                                scanNext = false;\n                            }\n                        }\n                        else if (varDecl.init && varDecl.init.nodeType == NodeType.ObjectLit && this.currentToken.tokenId != TokenID.Semicolon) {\n                            scanNext = false;\n                            varDecl.init.flags |= ASTFlags.AutomaticSemicolon;\n                        }\n                        else if (this.currentToken.tokenId != TokenID.Semicolon) {\n                            this.reportParseError("Expected \';\'");\n                            scanNext = false;\n                        }';
var v27272 = v27273 + "\n                    }\n\n                    resetModifiers = true;\n                } // catch errant uses of 'super'\n                else if (this.currentToken.tokenId == TokenID.Super) {\n                    this.reportParseError(\"Base class initializers must be the first statement in a class definition\");\n                }\n                else if (!wasGetOrSetId && ((modifiers & Modifiers.Getter) || (modifiers & Modifiers.Setter)) &&\n                         ((this.currentToken.tokenId == TokenID.OpenParen) || (this.currentToken.tokenId == TokenID.Equals) ||\n                          (this.currentToken.tokenId == TokenID.Colon) || (this.currentToken.tokenId == TokenID.Semicolon))) {\n                             // catch a 'get' or 'set' used as an identifier\n                    wasGetOrSetId = true;\n                    scanNext = false;\n\n                }  // mark anything else as an error\n                else if (this.currentToken.tokenId != TokenID.Semicolon) { // jettison semicolons\n                    this.reportParseError(\"Unexpected '\" + this.currentToken.getText() + \"' in class definition\");\n                    resetModifiers = true;\n                }\n\n                if (scanNext) {\n                    this.currentToken = this.scanner.scan();\n                }\n\n                if (resetModifiers) {\n                    modifiers = parentModifiers;\n                    currentMemberMinChar = this.scanner.startPos;\n                    resetModifiers = false;\n                }\n            }\n\n            var membersLimChar = this.scanner.pos;\n            if (this.currentToken.tokenId == TokenID.CloseBrace) {\n                classDecl.endingToken = new ASTSpan();\n                classDecl.endingToken.minChar = this.scanner.startPos;\n                classDecl.endingToken.limChar = this.scanner.pos;\n\n                // for a class with an empty body, consume any 'dangling' inner comments\n                if (!this.currentClassDefinition.members.members.length) {\n                    this.currentClassDefinition.preComments = this.parseComments();\n                }\n\n                this.currentToken = this.scanner.scan();\n            }\n\n            this.nestingLevel--;\n\n            this.currentClassDefinition.members.minChar = membersMinChar;\n            this.currentClassDefinition.members.limChar = membersLimChar;\n            this.currentClassDefinition.limChar = membersLimChar;\n            this.currentClassDefinition = null;\n        }\n\n        private parseClassConstructorDeclaration(minChar: number, errorRecoverySet: ErrorRecoverySet, modifiers: Modifiers) {\n            this.parsingClassConstructorDefinition = true;\n\n            var isAmbient = this.parsingDeclareFile || hasFlag(modifiers, Modifiers.Ambient);\n\n            var args: ASTList = new ASTList();\n            var variableArgList = false;\n            var preComments = this.parseComments();\n\n            this.currentToken = this.scanner.scan(); // scan past the 'constructor' token\n\n            if (this.currentToken.tokenId == TokenID.OpenParen) {\n                variableArgList = this.parseFormalParameterList(errorRecoverySet, args, true, isAmbient, false, false, false, false, null, true);\n                if (args.members.length > 0) {\n                    var lastArg = args.members[args.members.length - 1];\n                }\n            }\n\n            var requiresSignature = isAmbient || this.currentToken.tokenId == TokenID.Semicolon;\n\n\n            if (requiresSignature) {\n                for (var i = 0; i < args.members.length; i++) {\n                    var arg = <ArgDecl> args.members[i];\n                    if (hasFlag(arg.varFlags, VarFlags.Property)) {\n                        this.reportParseError(\"Overload or ambient signatures may not specify parameter properties\", arg.minChar, arg.limChar);\n                    }\n                }\n            }\n\n            if (!requiresSignature) {\n                this.currentClassDefinition.constructorNestingLevel = this.nestingLevel + 1;\n            }\n\n            var constructorFuncDecl = this.parseFunctionStatements(\n                errorRecoverySet | ErrorRecoverySet.RCurly, this.currentClassDefinition.name, \n                /*isConstructor:*/ true, /*isMethod:*/ false, args, AllowedElements.Properties, \n                minChar, requiresSignature, modifiers);\n\n            constructorFuncDecl.preComments = preComments;\n\n            if (requiresSignature && !isAmbient) {\n                constructorFuncDecl.isOverload = true;\n            }\n\n            constructorFuncDecl.variableArgList = variableArgList;\n            this.currentClassDecl = null;\n            constructorFuncDecl.returnTypeAnnotation = this.convertToTypeReference(this.currentClassDefinition.name);\n            constructorFuncDecl.classDecl = this.currentClassDefinition;\n\n            if (isAmbient) {\n                constructorFuncDecl.fncFlags |= FncFlags.Ambient;\n            }\n\n            if (requiresSignature) {\n                constructorF";
var v27271 = v27272 + 'uncDecl.fncFlags |= FncFlags.Signature;\n            }\n\n            if (this.ambientModule || hasFlag(modifiers, Modifiers.Exported)) {\n                constructorFuncDecl.fncFlags |= FncFlags.Exported;\n            }\n\n\n            if (this.currentClassDefinition.constructorDecl) {\n                if (!isAmbient && !this.currentClassDefinition.constructorDecl.isSignature() && !constructorFuncDecl.isSignature()) {\n                    this.reportParseError("Duplicate constructor definition");\n                }\n            }\n\n            if (isAmbient || !constructorFuncDecl.isSignature()) {\n                this.currentClassDefinition.constructorDecl = constructorFuncDecl;\n            }\n\n            // REVIEW: Should we have a separate flag for class constructors?  (Constructors are not methods)\n            constructorFuncDecl.fncFlags |= FncFlags.ClassMethod;\n\n            this.currentClassDefinition.members.members[this.currentClassDefinition.members.members.length] = constructorFuncDecl;\n\n            this.parsingClassConstructorDefinition = false;\n\n            return constructorFuncDecl;\n        }\n\n        private parseClassMemberVariableDeclaration(text: Identifier, minChar: number, isDeclaredInConstructor: bool, errorRecoverySet: ErrorRecoverySet, modifiers: Modifiers) {\n\n            var varDecl = new VarDecl(text, this.nestingLevel);\n            varDecl.minChar = minChar;\n            var isStatic = false;\n            varDecl.preComments = this.parseComments();\n\n            if (this.currentToken.tokenId == TokenID.Colon) {\n                this.currentToken = this.scanner.scan();\n                varDecl.typeExpr =\n                    this.parseTypeReference(errorRecoverySet | ErrorRecoverySet.Asg | ErrorRecoverySet.Comma, false);\n                if (varDecl.typeExpr && varDecl.typeExpr.nodeType == NodeType.TypeRef) {\n                    var typeExpr = (<TypeReference>varDecl.typeExpr);\n                    if (typeExpr.term && typeExpr.term.nodeType == NodeType.FuncDecl) {\n                        typeExpr.term.preComments = varDecl.preComments;\n                    }\n                }\n            }\n\n            if (this.currentToken.tokenId == TokenID.Equals) {\n                if (this.parsingDeclareFile || hasFlag(modifiers, Modifiers.Ambient)) {\n                    this.reportParseError("context does not permit variable initializer");\n                    if (this.errorRecovery) {\n                        this.skip(errorRecoverySet);\n                        varDecl.flags |= ASTFlags.Error;\n                        varDecl.limChar = this.scanner.lastTokenLimChar();\n                        return varDecl;\n                    }\n                }\n\n                // TODO: note assignment for language service\n                this.currentToken = this.scanner.scan();\n\n                varDecl.init = this.parseExpr(ErrorRecoverySet.Comma | errorRecoverySet,\n                                        OperatorPrecedence.Comma, true, TypeContext.NoTypes);\n\n                varDecl.limChar = varDecl.init.limChar;\n\n                // member initializers on instance properties require that super be invoked as the first call within the constructor\n                if (!(modifiers & Modifiers.Static)) {\n                    this.currentClassDefinition.varFlags |= VarFlags.ClassSuperMustBeFirstCallInConstructor;\n                }\n            }\n            else {\n                varDecl.limChar = this.scanner.pos;\n            }\n\n            if (modifiers & Modifiers.Static) {\n                varDecl.varFlags |= VarFlags.Static;\n                isStatic = true;\n            }\n\n            if ((modifiers & Modifiers.Private) != Modifiers.None) {\n                varDecl.varFlags |= VarFlags.Private;\n            }\n            else {\n                varDecl.varFlags |= VarFlags.Public;\n            }\n\n            varDecl.varFlags |= VarFlags.Property;\n\n            if (isDeclaredInConstructor) {\n                varDecl.varFlags |= VarFlags.ClassConstructorProperty;\n            }\n\n            if (!isDeclaredInConstructor && !isStatic) {\n                varDecl.varFlags |= VarFlags.ClassBodyProperty;\n            }\n\n            this.currentClassDefinition.knownMemberNames[text.actualText] = true;\n\n            if (!isDeclaredInConstructor) {\n                this.currentClassDefinition.members.members[this.currentClassDefinition.members.members.length] = varDecl;\n            }\n\n            varDecl.postComments = this.parseComments();\n            return varDecl;\n        }\n\n        private parseClassMemberFunctionDeclaration(methodName: Identifier, minChar: number, errorRecoverySet: ErrorRecoverySet, modifiers: Modifiers) {\n            var wasAccessorID = this.prevIDTok != null;\n            var isAccessor = hasFlag(modifiers, Modifiers.Getter) || hasFlag(modifiers, Modifiers.Setter);\n            var isStatic = hasFlag(modifiers, Modifiers.Static);\n\n            var isAmbient = this.ambientModule || hasFlag(modifiers, Modifiers.Ambient);\n\n            er';
var v27270 = v27271 + 'rorRecoverySet |= ErrorRecoverySet.RParen;\n\n            if (isAccessor && (modifiers & Modifiers.Ambient)) {\n                this.reportParseError("Property accessors may not be declared in ambient classes");\n            }\n\n            // REVIEW: Why bother passing in isAmbient for both requiresSignature and isAmbient?  Shouldn\'t just saying its ambient suffice?\n            var ast: AST = this.parseFncDecl(errorRecoverySet, true, isAmbient, true, methodName, false, isStatic, isAmbient, modifiers, null, true);\n            if (ast.nodeType == NodeType.Error) {\n                return ast;\n            }\n\n            var funcDecl = <FuncDecl>ast;\n\n            funcDecl.minChar = minChar;\n            if (funcDecl.bod !== null)\n                funcDecl.limChar = funcDecl.bod.limChar;\n\n            if (modifiers & Modifiers.Private) {\n                funcDecl.fncFlags |= FncFlags.Private;\n            }\n            else {\n                funcDecl.fncFlags |= FncFlags.Public;\n            }\n\n            if (isStatic) {\n                funcDecl.fncFlags |= FncFlags.Static;\n            }\n\n            if (isAccessor) {\n                // REVIEW: verify return-type annotations and arguments\n                if (hasFlag(modifiers, Modifiers.Getter)) {\n                    funcDecl.fncFlags |= FncFlags.GetAccessor;\n                    funcDecl.hint = "get" + funcDecl.name.actualText;\n                }\n                else {\n                    funcDecl.fncFlags |= FncFlags.SetAccessor;\n                    funcDecl.hint = "set" + funcDecl.name.actualText;\n                }\n                funcDecl.fncFlags |= FncFlags.IsFunctionExpression;\n                if (codeGenTarget < CodeGenTarget.ES5) {\n                    this.reportParseError("Property accessors are only available when targeting ES5 or greater", funcDecl.minChar, funcDecl.limChar);\n                }\n            }\n\n            funcDecl.fncFlags |= FncFlags.ClassMethod;\n\n            this.currentClassDefinition.knownMemberNames[methodName.actualText] = true;\n\n            this.currentClassDefinition.members.members[this.currentClassDefinition.members.members.length] = funcDecl;\n\n            return funcDecl;\n        }\n\n        private parseTypeMember(errorRecoverySet: ErrorRecoverySet): AST {\n            var minChar = this.scanner.startPos;\n\n            var propertyDecl = this.parsePropertyDeclaration(\n                errorRecoverySet, Modifiers.Public, /*requireSignature:*/ true, /*isStatic:*/ false);\n\n            if (propertyDecl) {\n                propertyDecl.minChar = minChar;\n\n                if (propertyDecl.nodeType == NodeType.VarDecl) {\n                     this.checkCurrentToken(TokenID.Semicolon, errorRecoverySet);\n                }\n            }\n\n            return propertyDecl;\n        }\n\n        private parseTypeMemberList(errorRecoverySet: ErrorRecoverySet, members: ASTList) {\n            errorRecoverySet |= ErrorRecoverySet.TypeScriptS;\n            while (true) {\n                switch (this.currentToken.tokenId) {\n                    case TokenID.CloseBrace:\n                    case TokenID.EndOfFile:\n                        members.limChar = this.scanner.pos;\n                        return;\n                }\n\n                // REVIEW: This code looks suspect.  If parseTypeMember returns null, then \n                // won\'t we just infinite loop?\n                var element = this.parseTypeMember(errorRecoverySet);\n                if (element) {\n                    members.append(element);\n                }\n            }\n        }\n\n        private parseInterfaceDecl(errorRecoverySet: ErrorRecoverySet, modifiers: Modifiers): InterfaceDeclaration {\n            var leftCurlyCount = this.scanner.leftCurlyCount;\n            var rightCurlyCount = this.scanner.rightCurlyCount;\n\n            this.currentToken = this.scanner.scan();\n            var minChar = this.scanner.pos;\n            var name: Identifier = null;\n            if ((this.currentToken.tokenId == TokenID.Identifier) || (!isPrimitiveTypeToken(this.currentToken) && convertTokToID(this.currentToken, this.strictMode))) {\n                name = Identifier.fromToken(this.currentToken);\n                name.minChar = this.scanner.startPos;\n                name.limChar = this.scanner.pos;\n                this.currentToken = this.scanner.scan();\n            }\n            else {\n                this.reportParseError("interface missing name");\n                if (this.errorRecovery) {\n                    name = new MissingIdentifier();\n                    name.minChar = this.scanner.pos;\n                    name.limChar = this.scanner.pos;\n                    name.flags |= ASTFlags.Error;\n                }\n            }\n\n            var extendsList: ASTList = null;\n            var implementsList: ASTList = null;\n            if (this.currentToken.tokenId === TokenID.Extends || this.currentToken.tokenId === TokenID.Implements) {\n                if (this.currentToken.tokenId === TokenID.Implements) {\n            ';
var v27269 = v27270 + '        this.reportParseError("Expected \'extends\'");\n                }\n\n                extendsList = new ASTList();\n                implementsList = new ASTList();\n                extendsList.minChar = this.scanner.startPos;\n                this.parseBaseList(extendsList, implementsList, errorRecoverySet, /*isClass:*/ false);\n            }\n\n            var membersMinChar = this.scanner.startPos;\n            this.checkCurrentToken(TokenID.OpenBrace, errorRecoverySet | ErrorRecoverySet.TypeScriptS);\n            var members = new ASTList();\n            members.minChar = membersMinChar;\n            var prevInInterfaceDecl = this.inInterfaceDecl;\n            this.inInterfaceDecl = true;\n            this.parseTypeMemberList(errorRecoverySet | ErrorRecoverySet.RCurly, members);\n            this.inInterfaceDecl = prevInInterfaceDecl;\n            this.checkCurrentToken(TokenID.CloseBrace, errorRecoverySet);\n\n            // REVIEW: According to the grammar, an interface declaration should actually just\n            // have an \'ObjectType\' and not a list of members.  We may want to consider making that\n            // change.  Note: it would mean breaking aparat TypeDecl into InterfaceDeclaration and \n            // ClassDeclaration.\n            var interfaceDecl = new InterfaceDeclaration(name, members, extendsList, null);\n            if (hasFlag(modifiers, Modifiers.Private)) {\n                interfaceDecl.varFlags |= VarFlags.Private;\n            }\n            if (hasFlag(modifiers, Modifiers.Public)) {\n                interfaceDecl.varFlags |= VarFlags.Public;\n            }\n            if (this.parsingDeclareFile || this.ambientModule || hasFlag(modifiers, Modifiers.Exported)) {\n                interfaceDecl.varFlags |= VarFlags.Exported;\n            }\n\n            interfaceDecl.limChar = members.limChar;\n            interfaceDecl.leftCurlyCount = this.scanner.leftCurlyCount - leftCurlyCount;\n            interfaceDecl.rightCurlyCount = this.scanner.rightCurlyCount - rightCurlyCount;\n            return interfaceDecl;\n        }\n\n        private makeVarDecl(id: Identifier, nest: number): VarDecl {\n            var varDecl = new VarDecl(id, nest);\n            var currentVarList = this.topVarList();\n            if (currentVarList) {\n                currentVarList.append(varDecl);\n            }\n            return varDecl;\n        }\n\n        private parsePropertyDeclaration(\n            errorRecoverySet: ErrorRecoverySet,\n            modifiers: Modifiers,\n            requireSignature: bool,\n            isStatic: bool): AST {\n\n            var text: Identifier = null;\n            var minChar = this.scanner.startPos;\n            var nameLimChar = minChar;\n            var isNew = false;\n            var isIndexer = false;\n            var wasAccessorID = this.prevIDTok != null;\n            var isAccessor = hasFlag(modifiers, Modifiers.Getter) || hasFlag(modifiers, Modifiers.Setter);\n\n            if (this.parsingDeclareFile || this.ambientModule || hasFlag(modifiers, Modifiers.Ambient)) {\n                requireSignature = true;\n            }\n\n            if (this.currentToken.tokenId == TokenID.OpenParen && !wasAccessorID) {\n                if (!requireSignature && !isStatic) {\n                    this.reportParseError("Expected identifier in property declaration");\n                    if (this.errorRecovery) {\n                        this.skip(errorRecoverySet);\n                        //REVIEW: Use something else than "Identifier"?\n                        text = new MissingIdentifier();\n                    }\n                }\n            }\n            else if (this.currentToken.tokenId == TokenID.New) {\n                if (requireSignature) {\n                    this.currentToken = this.scanner.scan();\n                    if (this.currentToken.tokenId == TokenID.OpenParen) {\n                        isNew = true;\n                    }\n                }\n\n                if (!isNew) {\n                    // is identifier\n                    if (!requireSignature) {\n                        this.currentToken = this.scanner.scan();\n                    }\n                    text = new Identifier("new");\n                    text.minChar = this.scanner.pos - 3;\n                    text.limChar = this.scanner.pos;\n                    nameLimChar = this.scanner.pos;\n                }\n            }\n            else if ((this.currentToken.tokenId == TokenID.OpenBracket) && requireSignature) {\n                // indexer signature\n                isIndexer = true;\n                //REVIEW: Should we use a special "compiler reserved" identifier node?\n                text = new Identifier("__item");\n            }\n            else if ((this.currentToken.tokenId != TokenID.Identifier) && (!convertTokToIDName(this.currentToken)) && !wasAccessorID) {\n                this.reportParseError("Expected identifier in property declaration");\n                if (this.errorRecovery) {\n                    var eminChar = this.scanner.startPos;\n             ';
var v27268 = v27269 + '       var curpos = this.scanner.pos;\n                    this.skip(errorRecoverySet & (~ErrorRecoverySet.Comma));\n                    if (this.scanner.pos == curpos) {\n                        // ensure progress\n                        this.currentToken = this.scanner.scan();\n                    }\n\n                    var epd = new VarDecl(new MissingIdentifier(), this.nestingLevel);\n                    epd.flags |= ASTFlags.Error;\n                    epd.minChar = eminChar;\n                    epd.limChar = this.scanner.lastTokenLimChar();\n                    return epd;\n                }\n            }\n            else {\n                if (wasAccessorID) {\n                    text = Identifier.fromToken(this.prevIDTok);\n                    text.minChar = this.scanner.lastTokenLimChar() - 3;\n                    text.limChar = this.scanner.lastTokenLimChar();\n                    nameLimChar = text.limChar;\n\n                    if (codeGenTarget < CodeGenTarget.ES5) {\n                        this.reportParseError("Property accessors are only available when targeting ES5 or greater");\n                    }\n\n                    // this block guards against \'get\' and \'set\' tokens that\n                    // were coerced into identifiers\n                    if (this.currentToken.getText() == text.actualText && this.currentToken != this.prevIDTok) {\n                        this.currentToken = this.scanner.scan();\n                    } // Otherwise, don\'t update the token - we\'re already at \'(\'\n\n                    // reset the previous ID Token\n                    this.prevIDTok = null;\n                }\n                else {\n                    text = Identifier.fromToken(this.currentToken);\n                    text.minChar = this.scanner.startPos;\n                    text.limChar = this.scanner.pos;\n                    nameLimChar = this.scanner.pos;\n                    this.currentToken = this.scanner.scan();\n                }\n            }\n\n            if (this.currentToken.tokenId == TokenID.Question) {\n                if (this.inInterfaceDecl && text) {\n                    text.flags |= ASTFlags.OptionalName;\n                }\n                else {\n                    this.reportParseError("Optional properties may only be declared on interface or object types");\n                }\n                this.currentToken = this.scanner.scan();\n            }\n\n            if ((this.currentToken.tokenId == TokenID.OpenParen) ||\n                (isIndexer && (this.currentToken.tokenId == TokenID.OpenBracket))) {\n                var ers = errorRecoverySet | ErrorRecoverySet.RParen;\n                if (isIndexer) {\n                    ers = errorRecoverySet | ErrorRecoverySet.RBrack;\n                }\n                var ast = this.parseFncDecl(ers, true, requireSignature,\n                                       !this.inFncDecl, text, isIndexer, isStatic, (this.parsingDeclareFile || hasFlag(modifiers, Modifiers.Ambient)), modifiers, null, true);\n                var funcDecl: FuncDecl;\n                if (ast.nodeType == NodeType.Error) {\n                    return ast;\n                }\n                else {\n                    funcDecl = <FuncDecl>ast;\n                }\n                if (funcDecl.name) {\n                    funcDecl.name.minChar = minChar;\n                    funcDecl.name.limChar = nameLimChar;\n                }\n                if ((modifiers & Modifiers.Public) != Modifiers.None) {\n                    funcDecl.fncFlags |= FncFlags.Public;\n                }\n                if ((modifiers & Modifiers.Private) != Modifiers.None) {\n                    funcDecl.fncFlags |= FncFlags.Private;\n                }\n                if (isStatic) {\n                    funcDecl.fncFlags |= FncFlags.Static;\n                }\n                if (this.parsingDeclareFile || hasFlag(modifiers, Modifiers.Ambient)) {\n                    funcDecl.fncFlags |= FncFlags.Ambient;\n                }\n                if (isAccessor) {\n                    // REVIEW: verify return-type annotations and arguments\n                    if (hasFlag(modifiers, Modifiers.Getter)) {\n                        funcDecl.fncFlags |= FncFlags.GetAccessor;\n                        funcDecl.hint = "get" + funcDecl.name.actualText;\n                    }\n                    else {\n                        funcDecl.fncFlags |= FncFlags.SetAccessor;\n                        funcDecl.hint = "set" + funcDecl.name.actualText;\n                    }\n                    funcDecl.fncFlags |= FncFlags.IsFunctionExpression;\n\n                    if (modifiers & Modifiers.Ambient) {\n                        this.reportParseError("Property accessors may not be declared in ambient types");\n                    }\n                }\n\n                if (text == null) {\n                    if (isNew) {\n                        funcDecl.fncFlags |= FncFlags.ConstructMember;\n                        funcDecl.hint = "_construct";\n                        funcDecl.classDecl = thi';
var v27267 = v27268 + 's.currentClassDecl;\n                    }\n                    else {\n                        funcDecl.hint = "_call";\n                        funcDecl.fncFlags |= FncFlags.CallMember;\n                    }\n                }\n                return funcDecl;\n            }\n            else {\n                var varDecl = new VarDecl(text, this.nestingLevel);\n                varDecl.preComments = this.parseComments();\n                varDecl.minChar = minChar;\n                if (this.currentToken.tokenId == TokenID.Colon) {\n                    this.currentToken = this.scanner.scan();\n                    varDecl.typeExpr =\n                        this.parseTypeReference(errorRecoverySet | ErrorRecoverySet.Asg |\n                                           ErrorRecoverySet.Comma, false);\n                    if (varDecl.typeExpr && varDecl.typeExpr.nodeType == NodeType.TypeRef) {\n                        var typeExpr = (<TypeReference>varDecl.typeExpr);\n                        if (typeExpr.term && typeExpr.term.nodeType == NodeType.FuncDecl) {\n                            typeExpr.term.preComments = varDecl.preComments;\n                        }\n                    }\n                }\n                if (this.currentToken.tokenId == TokenID.Equals) {\n                    if (requireSignature) {\n                        this.reportParseError("context does not permit variable initializer");\n                        if (this.errorRecovery) {\n                            this.skip(errorRecoverySet);\n                            varDecl.flags |= ASTFlags.Error;\n                            varDecl.limChar = this.scanner.lastTokenLimChar();\n                            return varDecl;\n                        }\n                    }\n                    // TODO: note assignment for language service\n                    this.currentToken = this.scanner.scan();\n                    varDecl.init = this.parseExpr(ErrorRecoverySet.Comma | errorRecoverySet,\n                                           OperatorPrecedence.Comma, true, TypeContext.NoTypes);\n                    varDecl.limChar = varDecl.init.limChar;\n                    if (varDecl.init.nodeType == NodeType.FuncDecl) {\n                        var funcDecl = <FuncDecl>varDecl.init;\n                        funcDecl.hint = varDecl.id.text;\n                        funcDecl.boundToProperty = varDecl;\n                    }\n                    else if (isAccessor) {\n                        this.reportParseError("Accessors may only be functions");\n                    }\n                }\n                else {\n                    varDecl.limChar = this.scanner.pos;\n                }\n                if ((modifiers & Modifiers.Readonly) != Modifiers.None) {\n                    varDecl.varFlags |= VarFlags.Readonly;\n                }\n                if (isStatic) {\n                    varDecl.varFlags |= VarFlags.Static;\n                }\n                if ((modifiers & Modifiers.Public) != Modifiers.None) {\n                    varDecl.varFlags |= VarFlags.Public;\n                }\n                if ((modifiers & Modifiers.Private) != Modifiers.None) {\n                    varDecl.varFlags |= VarFlags.Private;\n                }\n                varDecl.varFlags |= VarFlags.Property;\n                return varDecl;\n            }\n        }\n\n        private parseVariableDeclaration(\n            errorRecoverySet: ErrorRecoverySet,\n            modifiers: Modifiers,\n            allowIn: bool,\n            isStatic: bool): AST {\n\n            var isConst = hasFlag(modifiers, Modifiers.Readonly);\n            var minChar = this.scanner.startPos;\n            var varDecl: VarDecl = null;\n            var declList: ASTList = null;\n            var multivar = false;\n\n            this.currentToken = this.scanner.scan();\n            var varDeclPreComments = this.parseComments();\n\n            while (true) {\n                if ((this.currentToken.tokenId != TokenID.Identifier) && (!convertTokToID(this.currentToken, this.strictMode))) {\n                    this.reportParseError("Expected identifier in variable declaration");\n\n                    if (this.errorRecovery) {\n                        varDecl = new VarDecl(new MissingIdentifier(), this.nestingLevel);\n                        varDecl.minChar = minChar;\n                        this.skip(errorRecoverySet);\n                        varDecl.flags |= ASTFlags.Error;\n                        varDecl.limChar = this.scanner.lastTokenLimChar();\n                        return varDecl;\n                    }\n                }\n\n                var varDeclName = Identifier.fromToken(this.currentToken)\n                if (this.strictMode && (varDeclName.text == "eval")) {\n                    this.reportParseError("\'eval\' may not name a variable in strict mode");\n                }\n\n                varDecl = this.makeVarDecl(varDeclName, this.nestingLevel);\n                varDecl.id.minChar = this.scanner.startPos;\n                varDecl.id.limChar = this.scanner.pos;\n  ';
var v27266 = v27267 + '              varDecl.preComments = varDeclPreComments;\n\n                if (isStatic) {\n                    varDecl.varFlags |= VarFlags.Static;\n                }\n                if (hasFlag(modifiers, Modifiers.Readonly)) {\n                    varDecl.varFlags |= VarFlags.Readonly;\n                }\n                if (this.parsingDeclareFile || this.ambientModule || hasFlag(modifiers, Modifiers.Ambient)) {\n                    varDecl.varFlags |= VarFlags.Ambient;\n                }\n                if (this.parsingDeclareFile || this.ambientModule || hasFlag(modifiers, Modifiers.Exported)) {\n                    varDecl.varFlags |= VarFlags.Exported;\n                }\n                varDecl.minChar = minChar;\n                if (declList) {\n                    declList.append(varDecl);\n                }\n\n                // move past ID; with error recovery need a test \n                this.currentToken = this.scanner.scan();\n                if (this.currentToken.tokenId == TokenID.Colon) {\n                    this.currentToken = this.scanner.scan();\n                    var prevInFncDecl = this.inFncDecl;\n                    this.inFncDecl = false;\n                    varDecl.typeExpr = this.parseTypeReference(\n                        errorRecoverySet | ErrorRecoverySet.Asg | ErrorRecoverySet.Comma, /*allowVoid:*/ false);\n                    this.inFncDecl = prevInFncDecl;\n                }\n\n                if (this.currentToken.tokenId == TokenID.Equals) {\n                    if (hasFlag(varDecl.varFlags, VarFlags.Ambient)) {\n                        this.reportParseError("Ambient variable can not have an initializer");\n                    }\n                    // TODO: note assignment for language service\n                    this.currentToken = this.scanner.scan();\n                    varDecl.init = this.parseExpr(ErrorRecoverySet.Comma | errorRecoverySet,\n                                           OperatorPrecedence.Comma, allowIn,\n                                           TypeContext.NoTypes);\n                    varDecl.limChar = varDecl.init.limChar;\n                    if (varDecl.init.nodeType == NodeType.FuncDecl) {\n                        // TODO: use \'as\' operator when can bootstrap\n                        var funcDecl = <FuncDecl>varDecl.init;\n                        funcDecl.hint = varDecl.id.actualText;\n                    }\n                }\n                else {\n                    if (isConst) {\n                        this.reportParseError("const declaration requires initializer");\n                    }\n                    varDecl.limChar = this.scanner.pos;\n                }\n                varDecl.postComments = this.parseCommentsForLine(this.scanner.line);\n\n                if (this.currentToken.tokenId != TokenID.Comma) {\n                    if (declList) {\n                        declList.limChar = varDecl.limChar;\n                        return declList;\n                    }\n                    else {\n                        return varDecl;\n                    }\n                }\n\n                if (!multivar) {\n                    declList = new ASTList();\n                    declList.minChar = varDecl.minChar;\n                    declList.append(varDecl);\n                    multivar = true;\n                }\n\n                this.currentToken = this.scanner.scan();\n                minChar = this.scanner.startPos;\n            }\n        }\n\n        private parseMemberList(errorRecoverySet: ErrorRecoverySet): ASTList {\n            var elements = new ASTList();\n            if (this.currentToken.tokenId == TokenID.CloseBrace) {\n                return elements;\n            }\n\n            var idHint: string = null;\n            var memberName: AST = null;\n            var memberExpr: AST = null;\n            var member: BinaryExpression = null;\n            var minChar = this.scanner.startPos;\n            var isSet = false;\n            var skippedTokenForGetSetId = false;\n            var getSetTok: Token = null;\n            var getSetStartPos = 0;\n            var getSetPos = 0;\n\n            for (; ;) {\n                var accessorPattern = false;\n                if (this.currentToken.tokenId == TokenID.Get || this.currentToken.tokenId == TokenID.Set) {\n                    isSet = this.currentToken.tokenId == TokenID.Set;\n                    getSetTok = this.currentToken;\n                    getSetStartPos = this.scanner.startPos;\n                    getSetPos = this.scanner.pos;\n\n                    this.currentToken = this.scanner.scan();\n\n                    if ((this.currentToken.tokenId == TokenID.Identifier) || convertTokToIDName(this.currentToken)) {\n                        idHint = isSet ? "set" : "get";\n                        idHint = idHint + this.currentToken.getText();\n                        memberName = Identifier.fromToken(this.currentToken);\n                        memberName.minChar = this.scanner.startPos;\n                        accessorPattern = true;\n                   ';
var v27265 = v27266 + '     if (codeGenTarget < CodeGenTarget.ES5) {\n                            this.reportParseError("Property accessors are only available when targeting ES5 or greater");\n                        }\n                    }\n                    else if (this.currentToken.tokenId != TokenID.Colon) {\n                        this.reportParseError("Expected identifier, string or number as accessor name");\n                    }\n                    else {\n                        skippedTokenForGetSetId = true;\n                        memberName = Identifier.fromToken(getSetTok);\n                        memberName.minChar = getSetStartPos;\n                        memberName.limChar = getSetPos;\n                    }\n                }\n                else if ((this.currentToken.tokenId == TokenID.Identifier) || convertTokToIDName(this.currentToken)) {\n                    idHint = this.currentToken.getText();\n                    memberName = Identifier.fromToken(this.currentToken);\n                    memberName.minChar = this.scanner.startPos;\n                    memberName.limChar = this.scanner.pos;\n                }\n                else if (this.currentToken.tokenId == TokenID.StringLiteral) {\n                    idHint = this.currentToken.getText();\n                    memberName = new StringLiteral(idHint);\n                    memberName.minChar = this.scanner.startPos;\n                    memberName.limChar = this.scanner.pos;\n                }\n                    // TODO: allow reserved words\n                else if (this.currentToken.tokenId == TokenID.NumberLiteral) {\n                    var ntok = <NumberLiteralToken>this.currentToken;\n                    idHint = ntok.value.toString();\n                    memberName = new StringLiteral(idHint);\n                    memberName.minChar = this.scanner.startPos;\n                    memberName.limChar = this.scanner.pos;\n                }\n                else {\n                    this.reportParseError("Expected identifier, string or number as member name");\n                    if (this.errorRecovery) {\n                        memberName = new MissingIdentifier();\n                        memberName.minChar = this.scanner.startPos;\n                        memberName.flags |= ASTFlags.Error;\n                        this.skip(errorRecoverySet | ErrorRecoverySet.Comma);\n                        memberName.limChar = this.scanner.lastTokenLimChar();\n                    }\n                }\n\n                if (!skippedTokenForGetSetId) {\n                    this.currentToken = this.scanner.scan();\n                }\n                else {\n                    skippedTokenForGetSetId = false;\n                }\n\n                if (this.currentToken.tokenId == TokenID.Question) {\n                    memberName.flags |= ASTFlags.OptionalName;\n                    this.currentToken = this.scanner.scan();\n                }\n\n                if (accessorPattern) {\n                    var args = new ASTList();\n                    this.parseFormalParameterList(errorRecoverySet | ErrorRecoverySet.RParen,\n                                      args, false, true, false, !isSet, isSet, false, null, true);\n\n                    var funcDecl: FuncDecl =\n                        this.parseFunctionStatements(errorRecoverySet | ErrorRecoverySet.RCurly,\n                                                <Identifier>memberName, false, true, args,\n                                                AllowedElements.None,\n                                                this.scanner.startPos, false, Modifiers.None);\n\n                    if (isSet && funcDecl.returnTypeAnnotation) {\n                        this.reportParseError("Property setters may not declare a return type");\n                    }\n\n                    funcDecl.fncFlags |= isSet ? FncFlags.SetAccessor : FncFlags.GetAccessor;\n                    funcDecl.fncFlags |= FncFlags.IsFunctionExpression;\n                    funcDecl.hint = idHint;\n                    memberExpr = funcDecl;\n                    member = new BinaryExpression(NodeType.Member, memberName, memberExpr);\n                    member.minChar = memberName.minChar;\n                    if (memberExpr.nodeType == NodeType.FuncDecl) {\n                        var funcDecl = <FuncDecl>memberExpr;\n                        funcDecl.hint = idHint;\n                    }\n                }\n                else if (this.currentToken.tokenId == TokenID.Colon) {\n                    this.currentToken = this.scanner.scan();\n                    memberExpr = this.parseExpr(ErrorRecoverySet.Comma | errorRecoverySet,\n                                         OperatorPrecedence.Comma, true, TypeContext.NoTypes);\n                    // If the memberExpr is a type reference, we can be certain that it was an\n                    // array type declaraion that lacked a "new".  We can realistically only\n                    // expect call and name ASTs to be the result of this call to parseExpr.\n                   ';
var v27264 = v27265 + " // If it's a constructor without a \"new\", we'll flag it as an invalid\n                    // call site later on.\n                    if (memberExpr.nodeType == NodeType.TypeRef) {\n                        this.reportParseError(\"Expected 'new' on array declaration in member definition\")\n                    }\n                    member = new BinaryExpression(NodeType.Member, memberName, memberExpr);\n                    member.minChar = memberName.minChar;\n                    if (memberExpr.nodeType == NodeType.FuncDecl) {\n                        var funcDecl = <FuncDecl>memberExpr;\n                        funcDecl.hint = idHint;\n                    }\n                }\n                else {\n                    this.reportParseError(\"Expected ':' in member definition\");\n                    if (this.errorRecovery) {\n                        this.skip(errorRecoverySet);\n                        elements.flags |= ASTFlags.Error;\n                        elements.minChar = minChar;\n                        elements.limChar = this.scanner.lastTokenLimChar();\n                        return elements;\n                    }\n                }\n                idHint = null;\n                elements.append(member);\n                member.limChar = this.scanner.lastTokenLimChar();\n                if (this.currentToken.tokenId != TokenID.Comma) {\n                    break;\n                }\n                else {\n                    // munch comma\n                    this.currentToken = this.scanner.scan();\n                }\n\n                // trailing comma allowed\n                if (this.currentToken.tokenId == TokenID.CloseBrace) {\n                    break;\n                }\n            }\n\n            if (member) {\n                elements.limChar = member.limChar;\n            }\n            elements.minChar = minChar;\n            return elements;\n        }\n\n        private parseArrayList(errorRecoverySet: ErrorRecoverySet): ASTList {\n            var elements: ASTList = null;\n            if (this.currentToken.tokenId == TokenID.CloseBracket) {\n                return elements;\n            }\n            else {\n                elements = new ASTList();\n                elements.minChar = this.scanner.startPos;\n            }\n\n            var arg: AST;\n\n            for (; ;) {\n                if ((this.currentToken.tokenId == TokenID.Comma) ||\n                    (this.currentToken.tokenId == TokenID.CloseBracket)) {\n                    arg = new AST(NodeType.EmptyExpr);\n                }\n                else {\n                    arg = this.parseExpr(ErrorRecoverySet.Comma | errorRecoverySet,\n                                  OperatorPrecedence.Comma, true, TypeContext.NoTypes);\n                }\n                elements.append(arg);\n                if (this.currentToken.tokenId != TokenID.Comma) {\n                    break;\n                }\n                this.currentToken = this.scanner.scan();\n            }\n            elements.limChar = this.scanner.lastTokenLimChar();\n            return elements;\n        }\n\n        private parseArrayLiteral(errorRecoverySet: ErrorRecoverySet): UnaryExpression {\n            var arrayLiteral: UnaryExpression = null;\n            arrayLiteral = new UnaryExpression(NodeType.ArrayLit,\n                                             this.parseArrayList(errorRecoverySet));\n            return arrayLiteral;\n        }\n\n        private parseTerm(errorRecoverySet: ErrorRecoverySet, allowCall: bool, typeContext: TypeContext, inCast: bool): AST {\n            var ast: AST = null;\n            var sawId = false;\n            var inNew = false;\n            var minChar = this.scanner.startPos;\n            var limChar = this.scanner.pos;\n            var parseAsLambda = false;\n            var expectlambdaRParen = false;\n\n            // keywords first\n            switch (this.currentToken.tokenId) {\n                case TokenID.Number:\n                case TokenID.Bool:\n                case TokenID.Any:\n                case TokenID.String:\n                    var tid = new Identifier(tokenTable[this.currentToken.tokenId].text);\n                    if (hasFlag(typeContext, TypeContext.Primitive)) {\n                        ast = new TypeReference(tid, 0);\n                        sawId = true;\n                    }\n                    else {\n                        ast = tid;\n                        sawId = true;\n                    }\n                    ast.minChar = minChar;\n                    this.currentToken = this.scanner.scan();\n                    limChar = this.scanner.lastTokenLimChar();\n                    break;\n                case TokenID.This:\n                    ast = new AST(NodeType.This);\n                    ast.minChar = minChar;\n                    this.currentToken = this.scanner.scan();\n                    limChar = this.scanner.lastTokenLimChar();\n                    break;\n                case TokenID.Super:\n                    ast = new AST(NodeType.Super);\n                    ast.minChar =";
var v27263 = v27264 + " minChar;\n                    this.currentToken = this.scanner.scan();\n                    limChar = this.scanner.lastTokenLimChar();\n                    break;\n                case TokenID.True:\n                    ast = new AST(NodeType.True);\n                    this.currentToken = this.scanner.scan();\n                    ast.minChar = minChar;\n                    break;\n                case TokenID.False:\n                    ast = new AST(NodeType.False);\n                    this.currentToken = this.scanner.scan();\n                    ast.minChar = minChar;\n                    break;\n                case TokenID.Null:\n                    ast = new AST(NodeType.Null);\n                    this.currentToken = this.scanner.scan();\n                    ast.minChar = minChar;\n                    break;\n                case TokenID.New:\n                    minChar = this.scanner.pos;\n                    this.currentToken = this.scanner.scan();\n                    var target = this.parseTerm(errorRecoverySet, false, TypeContext.AllSimpleTypes, inCast);\n\n                    if (target.nodeType == NodeType.Error || (target.nodeType == NodeType.Index && (<BinaryExpression>target).operand1.nodeType == NodeType.TypeRef)) {\n                        this.reportParseError(\"Cannot invoke 'new' on this expression\");\n                    } else {\n                        ast = new CallExpression(NodeType.New, target, null);\n                        ast.minChar = minChar;\n                        limChar = this.scanner.lastTokenLimChar();\n                        inNew = true;\n                    }\n                    break;\n                case TokenID.Function:\n                    minChar = this.scanner.pos;\n                    ast = this.parseFncDecl(errorRecoverySet, false, false, false, null, false, false, false, Modifiers.None, null, true);\n                    (<FuncDecl>ast).fncFlags |= FncFlags.IsFunctionExpression;\n                    ast.minChar = minChar;\n                    limChar = this.scanner.lastTokenLimChar();\n                    ast.limChar = limChar;\n                    break;\n            }\n\n            if (ast == null) {\n                if ((this.currentToken.tokenId == TokenID.Identifier) || convertTokToID(this.currentToken, this.strictMode)) {\n\n                    var idText = this.currentToken.getText();\n                    ast = this.createRef(idText, (<IdentifierToken>this.currentToken).hasEscapeSequence, minChar);\n                    sawId = true;\n \n                    ast.minChar = minChar;\n                    this.currentToken = this.scanner.scan();\n\n                    if (this.currentToken.tokenId == TokenID.Question) {\n                        ast.flags |= ASTFlags.PossibleOptionalParameter;\n                    }\n\n                    limChar = this.scanner.lastTokenLimChar();\n                }\n            }\n\n            if (inCast) {\n                this.checkCurrentToken(TokenID.GreaterThan, errorRecoverySet);\n            }\n\n            if (ast == null) {\n                switch (this.currentToken.tokenId) {\n                    case TokenID.OpenParen:\n                        minChar = this.scanner.pos;\n                        var prevTokId = this.scanner.previousToken().tokenId;\n                        this.currentToken = this.scanner.scan();\n\n                        var couldBeLambda = prevTokId == TokenID.OpenParen || // foo(()=>{});\n                                            prevTokId == TokenID.Comma || // foo(x,()=>{});\n                                            prevTokId == TokenID.EqualsEquals || // var foo = ()=>{};\n                                            prevTokId == TokenID.Colon;    // var x = { foo: ()=> {} };\n\n\n                        if (couldBeLambda && this.currentToken.tokenId == TokenID.CloseParen) {\n                            parseAsLambda = true;\n                            expectlambdaRParen = false;\n                            this.currentToken = this.scanner.scan();\n                        }\n                        else if (couldBeLambda && this.currentToken.tokenId == TokenID.DotDotDot) {\n                            parseAsLambda = true;\n                            expectlambdaRParen = true;\n                        }\n                        else {\n                            ast = this.parseExpr(errorRecoverySet | ErrorRecoverySet.RParen,\n                                          OperatorPrecedence.None, true, TypeContext.NoTypes, couldBeLambda);\n                            limChar = this.scanner.lastTokenLimChar();\n                            parseAsLambda = couldBeLambda && (ast.nodeType == NodeType.Name || ast.nodeType == NodeType.Comma) &&\n                                            (this.currentToken.tokenId == TokenID.Colon || this.currentToken.tokenId == TokenID.Question);\n                            expectlambdaRParen = true;\n                        }\n\n                        // Check for the RParen if it's not an anonymous '=>' function\n                       ";
var v27262 = v27263 + " if ((ast && !parseAsLambda)) {\n                            if (hasFlag(ast.flags, ASTFlags.SkipNextRParen)) {\n                                // REVIEW: parseExpr resulted in a lambda node, the LParen scanned earlier, is the beginning of that node, and not of a parenthesized expression;\n                                //         do not look for a matching RParen for this node, but make sure to remove the flag, so that any enclosing parenthesis are matched correctly.\n                                ast.flags = ast.flags & (~(ASTFlags.SkipNextRParen)); \n                                break;\n                            }\n                            this.checkCurrentToken(TokenID.CloseParen, errorRecoverySet);\n                            ast.isParenthesized = true;\n                        }\n\n                        break;\n                    case TokenID.NumberLiteral: {\n                        var numTok = <NumberLiteralToken>this.currentToken;\n                        this.currentToken = this.scanner.scan();\n                        ast = new NumberLiteral(numTok.value, numTok.hasEmptyFraction);\n                        ast.minChar = minChar;\n                        limChar = this.scanner.lastTokenLimChar();\n                        break;\n                    }\n                    case TokenID.StringLiteral:\n                        ast = new StringLiteral(this.currentToken.getText());\n                        this.currentToken = this.scanner.scan();\n                        ast.minChar = minChar;\n                        limChar = this.scanner.lastTokenLimChar();\n                        break;\n                    case TokenID.RegularExpressionLiteral: {\n                        var rtok = <RegularExpressionLiteralToken>this.currentToken;\n                        ast = new RegexLiteral(rtok.regex);\n                        this.currentToken = this.scanner.scan();\n                        ast.minChar = minChar;\n                        limChar = this.scanner.lastTokenLimChar();\n                        break;\n                    }\n                    case TokenID.OpenBracket:\n                        minChar = this.scanner.startPos;\n                        this.currentToken = this.scanner.scan();\n                        ast = this.parseArrayLiteral(ErrorRecoverySet.RBrack | errorRecoverySet);\n                        ast.minChar = minChar;\n                        limChar = this.scanner.pos; // ']'\n                        this.checkCurrentToken(TokenID.CloseBracket, errorRecoverySet);\n                        break;\n                    // TODO: rescan regex for TokenID.Div and AsgDiv\n                        case TokenID.OpenBrace:\n                        minChar = this.scanner.startPos;\n                        this.currentToken = this.scanner.scan();\n                        var members = this.parseMemberList(ErrorRecoverySet.RCurly | errorRecoverySet)\n                        this.checkCurrentToken(TokenID.CloseBrace, errorRecoverySet);\n                        ast = new UnaryExpression(NodeType.ObjectLit, members);\n                        ast.minChar = minChar;\n                        limChar = this.scanner.lastTokenLimChar();\n                        members.minChar = minChar;\n                        members.limChar = limChar;\n                        break;\n\n                    case TokenID.LessThan:\n                        minChar = this.scanner.startPos;\n                        this.currentToken = this.scanner.scan();\n                        var term: AST = this.parseTypeReference(ErrorRecoverySet.BinOp, false);\n                        this.checkCurrentToken(TokenID.GreaterThan, errorRecoverySet);\n                        ast = new UnaryExpression(NodeType.TypeAssertion, this.parseExpr(errorRecoverySet, OperatorPrecedence.Unary, false, TypeContext.NoTypes));\n                        (<UnaryExpression>ast).castTerm = term;\n                        break;\n\n                    default:\n                        if (this.prevExpr && hasFlag(this.prevExpr.flags, ASTFlags.PossibleOptionalParameter)) {\n                            parseAsLambda = true;\n                            ast = this.prevExpr;\n                        }\n                        else {\n                            this.reportParseError(\"Check format of expression term\");\n                            if (this.errorRecovery) {\n                                var ident = new MissingIdentifier();\n                                ident.minChar = minChar;\n                                ident.flags |= ASTFlags.Error;\n                                this.skip(errorRecoverySet | ErrorRecoverySet.Postfix);\n                                if ((this.currentToken.tokenId == TokenID.Identifier) || convertTokToID(this.currentToken, this.strictMode)) {\n                                    ident.setText(this.currentToken.getText(), (<IdentifierToken>this.currentToken).hasEscapeSequence);\n                                    this.currentToken = this.scanner.scan();\n                       ";
var v27261 = v27262 + '             limChar = this.scanner.lastTokenLimChar();\n                                }\n                                else {\n                                    limChar = this.scanner.lastTokenLimChar();\n                                    //tok=scanner.scan();\n                                }\n\n                                // REVIEW: set sawId\n                                ast = ident;\n                            }\n                        }\n                }\n            }\n\n            if (parseAsLambda) {\n                // If the next token is an fat arrow or a colon, we either have a parameter list, or can rightly assume\n                // that we have a typed formal, so we proceed with the lambda parse\n                if (\n                    this.currentToken.tokenId == TokenID.Colon ||\n                    this.currentToken.tokenId == TokenID.Comma ||\n                    this.currentToken.tokenId == TokenID.CloseParen ||\n                    this.currentToken.tokenId == TokenID.DotDotDot) {\n\n                        // We won\'t scan in the \':\' case, since keeping the \':\' simplifies argument handling in parseFormalParameterList\n                        // Note that we don\'t set the minchar in this case\n                    ast = this.parseLambdaExpr(errorRecoverySet, ast, true /* skipNextRParen */, expectlambdaRParen);\n                    ast.minChar = minChar;\n                    limChar = this.scanner.lastTokenLimChar();\n                    ast.limChar = limChar;\n                }\n                else if (ast) {\n                    ast.isParenthesized = true;\n                }\n            }\n\n            if (sawId && (typeContext != TypeContext.NoTypes)) {\n                typeContext |= TypeContext.ArraySuffix;\n            }\n\n            var postFix = this.parsePostfixOperators(errorRecoverySet, ast, allowCall, inNew, typeContext, minChar, limChar);\n\n            // Defensive error check...\n            if (postFix) {\n                if (sawId && (postFix.nodeType == NodeType.Index)) {\n                    var binExpr = <BinaryExpression>postFix;\n                    if (binExpr.operand2 == null) {\n                        postFix = this.convertToTypeReference(postFix);\n                    }\n                }\n\n                ///////////////////////////////////////////////////////////\n                //TODO: Eventually, we want to remove "minChar" and "limChar" assignments here,\n                //      as they are sometimes not specific enough for each expression kind.\n                postFix.minChar = minChar;\n                // Only update "limChar" if it is not better than "lastTokenLimChar()"\n                postFix.limChar = max(postFix.limChar, this.scanner.lastTokenLimChar());\n                //\n                ///////////////////////////////////////////////////////////\n                return postFix;\n            }\n            else {\n                return new AST(NodeType.Error);\n            }\n\n        }\n\n        private parseLambdaExpr(errorRecoverySet: ErrorRecoverySet, lambdaArgs: AST, skipNextRParen: bool, expectClosingRParen: bool): AST {\n            // REVIEW: Parse the remainder of a lambda expression. The opening paren has been read already, if it existed. \n            //         skipNextRParen sets a flag on the resulting lambda node to tell the calling parseTerm that the LParen it scanned has been matched as part of parsing the formal parameter list\n            //         expectClosingRParen indicates that a closing RParen is expected, in the cases with optional parameter or more than one parameter.\n            var ast = this.parseFncDecl(errorRecoverySet, false, false, false, null, false, false, false, Modifiers.None, { preProcessedLambdaArgs: lambdaArgs }, expectClosingRParen);\n            (<FuncDecl>ast).fncFlags |= FncFlags.IsFunctionExpression;\n            (<FuncDecl>ast).fncFlags |= FncFlags.IsFatArrowFunction;\n            if (!skipNextRParen) {\n                ast.flags |= ASTFlags.SkipNextRParen;\n            }\n            ast.limChar = this.scanner.lastTokenLimChar();;\n            return ast;\n        }\n\n        private parseExpr(errorRecoverySet: ErrorRecoverySet, minPrecedence: number, allowIn: bool,\n            typeContext: TypeContext, possiblyInLambda: bool = false): AST {\n            var ast: AST = null;\n            var tokenInfo = lookupToken(this.currentToken.tokenId);\n            var canAssign: bool = true;\n            var idHint: string = null;\n            var minChar = this.scanner.startPos;\n            var preComments = this.parseComments();\n            var exprIsAnonLambda = false;\n\n            if ((tokenInfo != undefined) && (tokenInfo.unopNodeType != NodeType.None)) {\n                canAssign = false;\n                this.currentToken = this.scanner.scan();\n                var tempExpr = this.parseExpr(ErrorRecoverySet.BinOp | errorRecoverySet,\n                                       tokenInfo.unopPrecedence, allowIn,\n                                       TypeCo';
var v27260 = v27261 + 'ntext.NoTypes);\n\n                // fold unary +- into constants\n                if ((tokenInfo.unopNodeType == NodeType.Pos) &&\n                    (tempExpr.nodeType == NodeType.NumberLit)) {\n                    ast = tempExpr;\n                }\n                else if ((tokenInfo.unopNodeType == NodeType.Neg) &&\n                         (tempExpr.nodeType == NodeType.NumberLit)) {\n                    var numLit = <NumberLiteral>tempExpr;\n                    numLit.value = (-numLit.value);\n                    if (numLit.value == 0) {\n                        numLit.isNegativeZero = true;\n                    }\n                    ast = tempExpr;\n                }\n                else {\n                    ast = new UnaryExpression(tokenInfo.unopNodeType, tempExpr);\n                    ast.limChar = tempExpr.limChar;\n                }\n                ast.minChar = minChar;\n            }\n            else {\n                ast = this.parseTerm(ErrorRecoverySet.BinOp | ErrorRecoverySet.AddOp |\n                              errorRecoverySet, true, typeContext, false);\n                var id: Identifier;\n                var temp: AST;\n                if (ast.nodeType == NodeType.Name) {\n                    id = <Identifier>ast;\n                    idHint = id.actualText;\n                }\n                else if (ast.nodeType == NodeType.Dot) {\n\n                    // If this is within a class declaration, and the circumstances are right, we need to\n                    // transform the dotted expression into a member declaration\n                    var subsumedExpr = false;\n\n                    if (this.inferPropertiesFromThisAssignment && \n                        (this.currentToken.tokenId == TokenID.Colon || this.currentToken.tokenId == TokenID.Equals) &&\n                         this.parsingClassConstructorDefinition &&\n                         this.nestingLevel == this.currentClassDefinition.constructorNestingLevel && // this nesting level means we\'re at the top-level in the constructor\n                         (<BinaryExpression>ast).operand1.nodeType == NodeType.This) {\n\n                        if ((<BinaryExpression>ast).operand2.nodeType == NodeType.Name) {\n                            var op2ID: Identifier = (<Identifier>(<BinaryExpression>ast).operand2);\n\n                            if (!this.currentClassDefinition.knownMemberNames[op2ID.actualText]) {\n                                ast = this.parseClassMemberVariableDeclaration(op2ID, ast.minChar, true, errorRecoverySet, Modifiers.Public);\n                                subsumedExpr = true;\n                            }\n                        }\n                    }\n\n                    if (!subsumedExpr) {\n                        temp = ast;\n                        while (temp.nodeType == NodeType.Dot) {\n                            var binExpr = <BinaryExpression>temp;\n                            temp = binExpr.operand2;\n                        }\n                        if (temp.nodeType == NodeType.Name) {\n                             id = <Identifier>temp;\n                            idHint = id.actualText;\n                        }\n                    }\n                }\n                if ((!this.scanner.lastTokenHadNewline()) &&\n                    ((this.currentToken.tokenId == TokenID.PlusPlus) || (this.currentToken.tokenId == TokenID.MinusMinus))) {\n                    canAssign = false;\n                    var operand = ast;\n                    ast = new UnaryExpression((this.currentToken.tokenId == TokenID.PlusPlus) ? NodeType.IncPost : NodeType.DecPost, operand);\n                    ast.limChar = this.scanner.pos;\n                    ast.minChar = operand.minChar;\n                    this.currentToken = this.scanner.scan();\n                }\n            }\n            for (; ;) {\n                tokenInfo = lookupToken(this.currentToken.tokenId);\n                if ((tokenInfo == undefined) || (tokenInfo.binopNodeType == NodeType.None)) {\n                    break;\n                }\n                if ((!allowIn) && (tokenInfo.binopNodeType == NodeType.In)) {\n                    break;\n                }\n                if (tokenInfo.binopPrecedence == OperatorPrecedence.Assignment) {\n                    if (tokenInfo.binopPrecedence < minPrecedence) {\n                        break;\n                    }\n                    if (!canAssign) {\n                        this.reportParseError("illegal assignment");\n                    }\n                }\n                else if (tokenInfo.binopPrecedence <= minPrecedence) {\n                    break;\n                }\n\n                if (possiblyInLambda && this.currentToken.tokenId == TokenID.Comma && this.scanner.getLookAheadToken().tokenId == TokenID.DotDotDot) {\n                    // The ellipsis can only exist in the formal list of a lambda expression, so do not attempt to parse the comma token as the comma binary operator\n                    // instead parse it as a lambda\n               ';
var v27259 = v27260 + '     exprIsAnonLambda = true;\n                    canAssign = false;\n                    ast = this.parseLambdaExpr(errorRecoverySet, ast, false, true);\n                    break;\n                }\n\n                // Precedence is high enough. Consume the operator token.\n                this.currentToken = this.scanner.scan();\n                canAssign = false;\n                if (tokenInfo.binopNodeType == NodeType.ConditionalExpression) {\n                    if (possiblyInLambda && \n                        ( this.currentToken.tokenId == TokenID.Equals || this.currentToken.tokenId == TokenID.Colon || this.currentToken.tokenId == TokenID.CloseParen || this.currentToken.tokenId == TokenID.Comma)) {\n                        // The QMark is not a ternary expression, it is a marker for optional parameter in a lambda expression.\n                        exprIsAnonLambda = true;\n                        canAssign = true;\n                    }\n                    else {\n                        this.prevExpr = ast;\n                        var whenTrue = this.parseExpr(\n                            errorRecoverySet | ErrorRecoverySet.Colon, OperatorPrecedence.Assignment, allowIn, TypeContext.NoTypes);\n\n                        // Do not hold onto the prevExpr handle\n                        this.prevExpr = null;\n                        this.checkCurrentToken(TokenID.Colon, errorRecoverySet | ErrorRecoverySet.ExprStart);\n\n                        var whenFalse = this.parseExpr(\n                            errorRecoverySet | ErrorRecoverySet.BinOp, OperatorPrecedence.Assignment, allowIn, TypeContext.NoTypes)\n                        ast = new ConditionalExpression(ast, whenTrue, whenFalse);\n                    }\n                }\n                else {\n                    var tc = TypeContext.NoTypes;\n                    var binExpr2: BinaryExpression;\n\n                    binExpr2 = new BinaryExpression(tokenInfo.binopNodeType, ast,\n                                                    this.parseExpr(errorRecoverySet |\n                                                            ErrorRecoverySet.BinOp,\n                                                            tokenInfo.binopPrecedence,\n                                                            allowIn, TypeContext.NoTypes, possiblyInLambda));\n                    if (binExpr2.operand2.nodeType == NodeType.FuncDecl) {\n                        var funcDecl = <FuncDecl>binExpr2.operand2;\n                        funcDecl.hint = idHint;\n                    }\n\n                    binExpr2.minChar = ast.minChar;\n                    binExpr2.limChar = this.scanner.lastTokenLimChar();\n                    idHint = null;\n                    ast = binExpr2;\n                }\n            }\n            if (canAssign) {\n                ast.flags |= ASTFlags.Writeable;\n            }\n            if (!exprIsAnonLambda) {\n                ///////////////////////////////////////////////////////////\n                //TODO: Eventually, we want to remove "minChar" and "limChar" assignments here,\n                //      as they are sometimes not specific enough for each statement kind.\n                ast.minChar = minChar;\n                // Only update "limChar" if it is not better than "lastTokenLimChar()"\n                ast.limChar = max(ast.limChar, this.scanner.lastTokenLimChar());\n                //\n                ///////////////////////////////////////////////////////////\n                ast.preComments = preComments;\n                ast.postComments = this.parseCommentsForLine(this.scanner.line);\n            }\n            return ast;\n        }\n\n        private parsePostfixOperators(errorRecoverySet: ErrorRecoverySet, ast: AST, allowCall: bool, inNew: bool,\n            typeContext: TypeContext, lhsMinChar: number, lhsLimChar: number): AST {\n            var count = 0;\n\n            if (!ast) {\n                ast = new AST(NodeType.EmptyExpr);\n                ast.isParenthesized = true;\n            }\n\n            ast.minChar = lhsMinChar;\n            ast.limChar = lhsLimChar;\n\n            for (; ;) {\n                switch (this.currentToken.tokenId) {\n                    case TokenID.OpenParen:\n                        if (inNew) {\n                            var callExpr = <CallExpression>ast;\n                            callExpr.arguments = this.parseArgList(errorRecoverySet);\n                            inNew = false;\n                        }\n                        else {\n                            if (!allowCall) {\n                                return ast;\n                            }\n                            ast = new CallExpression(NodeType.Call, ast,\n                                                   this.parseArgList(errorRecoverySet));\n                            ast.minChar = lhsMinChar;\n                        }\n                        ast.limChar = this.scanner.pos; // \')\'\n                        this.checkCurrentToken(TokenID.CloseParen, errorRecoverySet);\n              ';
var v27258 = v27259 + "          break;\n                    case TokenID.OpenBracket:\n                        this.currentToken = this.scanner.scan();\n                        if (this.currentToken.tokenId == TokenID.CloseBracket) {\n                            if (hasFlag(typeContext, TypeContext.ArraySuffix)) {\n                                this.currentToken = this.scanner.scan();\n                                if (ast.nodeType == NodeType.TypeRef) {\n                                    var typeRef = <TypeReference>ast;\n                                    typeRef.arrayCount++;\n                                }\n                                else {\n                                    ast = new BinaryExpression(NodeType.Index, ast, null);\n                                }\n                                ast.limChar = this.scanner.pos;\n                                break; // note early exit from case\n                            }\n                        }\n\n                        ast = new BinaryExpression(NodeType.Index, ast,\n                                                 this.parseExpr(errorRecoverySet | ErrorRecoverySet.RBrack,\n                                                           OperatorPrecedence.None, true,\n                                                           TypeContext.NoTypes));\n                        ast.minChar = lhsMinChar;\n                        ast.limChar = this.scanner.pos; // ']'\n                        this.checkCurrentToken(TokenID.CloseBracket, errorRecoverySet);\n                        break;\n                    case TokenID.Dot: {\n                        var name: Identifier = null;\n                        var curpos = this.scanner.pos;\n                        this.currentToken = this.scanner.scan();\n                        // Don't allow reserved words if immediately after a new line and error recovery is enabled\n                        if ((this.currentToken.tokenId == TokenID.Identifier) || ((!this.errorRecovery || !this.scanner.lastTokenHadNewline()) && convertTokToIDName(this.currentToken))) {\n                            ast.flags |= ASTFlags.DotLHS;\n                            name = this.createRef(this.currentToken.getText(), (<IdentifierToken>this.currentToken).hasEscapeSequence, this.scanner.startPos);\n                            name.limChar = this.scanner.pos;\n                            this.currentToken = this.scanner.scan();\n                        }\n                        else {\n                            this.reportParseError(\"Expected identifier following dot\");\n                            if (this.errorRecovery) {\n                                this.skip(errorRecoverySet);\n                                ast.flags |= (ASTFlags.Error | ASTFlags.DotLHS);\n                                return ast;\n                            }\n                            else {\n                                name = new MissingIdentifier();\n                            }\n                        }\n                        ast = new BinaryExpression(NodeType.Dot, ast, name);\n                        ast.minChar = lhsMinChar;\n                        ast.limChar = this.scanner.lastTokenLimChar();\n                        break;\n                    }\n                    case TokenID.EqualsGreaterThan:\n                        ast = this.parseFncDecl(errorRecoverySet, false, false, false, null, false, false, false, Modifiers.None, { preProcessedLambdaArgs: ast }, false);\n                        (<FuncDecl>ast).fncFlags |= FncFlags.IsFunctionExpression;\n                        ast.minChar = lhsMinChar;\n                        ast.limChar = this.scanner.lastTokenLimChar();\n                        break;\n                    default:\n                        return ast;\n\n                }\n            }\n        }\n\n        private parseTry(tryNode: Try, errorRecoverySet: ErrorRecoverySet, parentModifiers: Modifiers): Try {\n            var minChar = this.scanner.startPos;\n            var preComments = this.parseComments();\n            this.currentToken = this.scanner.scan();\n            if (this.currentToken.tokenId != TokenID.OpenBrace) {\n                this.reportParseError(\"Expected '{'\");\n                if (this.errorRecovery) {\n                    var etryNode = tryNode;\n                    etryNode.minChar = minChar;\n                    etryNode.limChar = this.scanner.lastTokenLimChar();\n                    etryNode.flags |= ASTFlags.Error;\n                    return etryNode;\n                }\n            }\n            tryNode.body = this.parseStatement(errorRecoverySet, AllowedElements.None, parentModifiers);\n            tryNode.minChar = minChar;\n            tryNode.limChar = tryNode.body.limChar;\n            tryNode.preComments = preComments;\n            tryNode.postComments = this.parseComments();\n            return tryNode;\n        }\n\n        private parseCatch(errorRecoverySet: ErrorRecoverySet, parentModifiers: Modifiers): Catch {\n            var catchMinChar = this.scanner.startPos;\n       ";
var v27257 = v27258 + '     var preComments = this.parseComments();\n            this.currentToken = this.scanner.scan();\n            this.checkCurrentToken(TokenID.OpenParen, errorRecoverySet | ErrorRecoverySet.ExprStart);\n            if ((this.currentToken.tokenId != TokenID.Identifier) || convertTokToID(this.currentToken, this.strictMode)) {\n                this.reportParseError("Expected identifier in catch header");\n                if (this.errorRecovery) {\n                    this.skip(errorRecoverySet);\n\n                    var ecatch = new Catch(new VarDecl(new MissingIdentifier(), this.nestingLevel),\n                                            new Statement(NodeType.Empty));\n                    ecatch.statement.minChar = catchMinChar;\n                    ecatch.statement.limChar = this.scanner.pos;\n                    ecatch.minChar = this.scanner.startPos;\n                    ecatch.limChar = this.scanner.pos;\n                    ecatch.flags |= ASTFlags.Error;\n                    return ecatch;\n                }\n            }\n            var param = new VarDecl(Identifier.fromToken(this.currentToken), this.nestingLevel);\n            param.id.minChar = this.scanner.startPos;\n            param.id.limChar = this.scanner.pos;\n            param.minChar = param.id.minChar;\n            param.limChar = param.id.limChar;\n            this.currentToken = this.scanner.scan();\n            var statementPos = this.scanner.pos;\n            this.checkCurrentToken(TokenID.CloseParen, errorRecoverySet | ErrorRecoverySet.StmtStart);\n            if (this.currentToken.tokenId != TokenID.OpenBrace) {\n                this.reportParseError("Expected \'{\' to start catch body");\n                if (this.errorRecovery) {\n                    this.skip(errorRecoverySet);\n\n                    var ecatch = new Catch(new VarDecl(new MissingIdentifier(), this.nestingLevel),\n                                            new Statement(NodeType.Empty));\n                    ecatch.statement.minChar = catchMinChar;\n                    ecatch.statement.limChar = statementPos;\n                    ecatch.minChar = this.scanner.startPos;\n                    ecatch.limChar = this.scanner.pos;\n                    ecatch.flags |= ASTFlags.Error;\n                    return ecatch;\n                }\n            }\n\n            var catchStmt = this.parseStatement(errorRecoverySet, AllowedElements.None, parentModifiers);\n            var catchNode = new Catch(param, catchStmt);\n            catchNode.statement.minChar = catchMinChar;\n            catchNode.statement.limChar = statementPos;\n            catchNode.minChar = catchMinChar;\n            catchNode.limChar = catchStmt.limChar;\n            catchNode.preComments = preComments;\n            catchNode.postComments = this.parseComments();\n            return catchNode;\n        }\n\n        private parseFinally(errorRecoverySet: ErrorRecoverySet, parentModifiers: Modifiers): Finally {\n            var finMinChar = this.scanner.startPos;\n            var preComments = this.parseComments();\n            this.currentToken = this.scanner.scan();\n            if (this.currentToken.tokenId != TokenID.OpenBrace) {\n                this.reportParseError("Expected \'{\' to start body of finally statement");\n                if (this.errorRecovery) {\n                    this.skip(errorRecoverySet);\n                    var efin = new Finally(new Statement(NodeType.Empty));\n                    efin.flags |= ASTFlags.Error;\n                    efin.minChar = this.scanner.startPos;\n                    efin.limChar = this.scanner.pos;\n                    return efin;\n                }\n            }\n\n            var finBody = this.parseStatement(errorRecoverySet, AllowedElements.None, parentModifiers)\n            var fin = new Finally(finBody);\n            fin.minChar = finMinChar;\n            fin.limChar = fin.body.limChar;\n            fin.preComments = preComments;\n            fin.postComments = this.parseComments();\n            return fin;\n        }\n\n        private parseTryCatchFinally(errorRecoverySet: ErrorRecoverySet, parentModifiers: Modifiers, labelList: ASTList): AST {\n            var tryPart: AST = new Try(null);\n            var tryMinChar = this.scanner.startPos;\n            this.pushStmt(<Statement>tryPart, labelList);\n            this.parseTry(<Try>tryPart, errorRecoverySet | ErrorRecoverySet.Catch, parentModifiers);\n            this.popStmt();\n            var tc: TryCatch = null;\n            var tf: TryFinally = null;\n\n            if (this.currentToken.tokenId == TokenID.Catch) {\n                var catchPart = this.parseCatch(errorRecoverySet | ErrorRecoverySet.Catch, parentModifiers);\n                tc = new TryCatch(<Try>tryPart, catchPart);\n                tc.minChar = tryPart.minChar;\n                tc.limChar = catchPart.limChar;\n            }\n\n            if (this.currentToken.tokenId != TokenID.Finally) {\n                if (tc == null) {\n                    this.reportParseError("try with neither catch nor finally");\n        ';
var v27256 = v27257 + '            if (this.errorRecovery) {\n                        var etf = new TryFinally(tryPart, new Finally(new AST(NodeType.Empty)));\n                        etf.flags |= ASTFlags.Error;\n                        etf.minChar = this.scanner.startPos;\n                        etf.limChar = this.scanner.pos;\n                        return etf;\n                    }\n                    return new TryFinally(tryPart, new Finally(new AST(NodeType.Empty)));\n                }\n                else {\n                    return tc;\n                }\n            }\n            else {\n                if (tc) {\n                    tryPart = tc;\n                }\n                var finallyPart = this.parseFinally(errorRecoverySet, parentModifiers)\n                tf = new TryFinally(tryPart, finallyPart);\n                tf.minChar = tryMinChar;\n                tf.limChar = finallyPart.limChar;\n                return tf;\n            }\n        }\n\n        private parseStatement(errorRecoverySet: ErrorRecoverySet, allowedElements: AllowedElements, parentModifiers: Modifiers): AST {\n            var ast: AST = null;\n            var labelList: ASTList = null;\n            var astList: ASTList = null;\n            var temp: AST;\n            var modifiers = Modifiers.None;\n            var minChar = this.scanner.startPos;\n            var forInOk = false;\n            var needTerminator = false;\n            var fnOrVar: AST = null;\n            var preComments = this.parseComments();\n            this.state = ParseState.StartStatement;\n\n            function isAmbient() {\n                return hasFlag(modifiers, Modifiers.Ambient) || hasFlag(parentModifiers, Modifiers.Ambient);\n            }\n\n            function mayNotBeExported() {\n                if (hasFlag(modifiers, Modifiers.Exported)) {\n                    this.reportError("Statement may not be exported");\n                }\n            }\n\n            for (; ;) {\n                switch (this.currentToken.tokenId) {\n                    case TokenID.EndOfFile:\n                        ast = new AST(NodeType.Error);\n                        ast.minChar = minChar;\n                        ast.limChar = this.scanner.pos;\n                        break;\n                    case TokenID.Function:\n                        if (this.parsingDeclareFile || isAmbient() || this.ambientModule) {\n                            this.currentToken = this.scanner.scan();\n                            fnOrVar = this.parsePropertyDeclaration(errorRecoverySet | ErrorRecoverySet.SColon,\n                                                      modifiers, true, false);\n                            if (fnOrVar.nodeType == NodeType.VarDecl) {\n                                this.reportParseError("function keyword can only introduce function declaration");\n                            }\n                            else if ((fnOrVar.nodeType == NodeType.FuncDecl) && ((<FuncDecl>fnOrVar).fncFlags, FncFlags.IsFatArrowFunction)) {\n                                needTerminator = true;\n                            }\n                            ast = fnOrVar;\n                            if (this.parsingDeclareFile || this.ambientModule && ast.nodeType == NodeType.FuncDecl) {\n                                (<FuncDecl>ast).fncFlags |= FncFlags.Exported;\n                            }\n                        }\n                        else {\n                            ast = this.parseFncDecl(errorRecoverySet, true, false, false, null, false, false, isAmbient(), modifiers, null, true);\n                            if (hasFlag((<FuncDecl>ast).fncFlags, FncFlags.IsFatArrowFunction)) {\n                                needTerminator = true;\n                            }\n                            if (this.ambientModule) {\n                                this.reportParseError("function declaration not permitted within ambient module");\n                            }\n                            if (hasFlag(modifiers, Modifiers.Exported)) {\n                                (<FuncDecl>ast).fncFlags |= FncFlags.Exported;\n                            }\n                        }\n                        break;\n                    case TokenID.Module:\n                        if ((allowedElements & AllowedElements.ModuleDeclarations) == AllowedElements.None) {\n                            this.reportParseError("module not allowed in this context");\n                            this.currentToken = this.scanner.scan();\n                            ast = new AST(NodeType.Error);\n                            ast.minChar = minChar;\n                            ast.limChar = this.scanner.lastTokenLimChar();\n                        }\n                        else {\n                            ast = this.parseModuleDecl(errorRecoverySet, modifiers, preComments);\n                            preComments = null;\n                        }\n                        break;\n                    case TokenID.Import:\n                        if ((allowedElements & AllowedElement';
var v27255 = v27256 + 's.ModuleDeclarations) == AllowedElements.None) {\n                            this.reportParseError("module not allowed in this context");\n                            this.currentToken = this.scanner.scan();\n                            ast = new AST(NodeType.Error);\n                            ast.minChar = minChar;\n                            ast.limChar = this.scanner.lastTokenLimChar();\n                        }\n                        else {\n                            if (hasFlag(modifiers, Modifiers.Exported)) {\n                                this.reportParseError("export keyword not permitted on import declaration");\n                            }\n                            ast = this.parseImportDeclaration(errorRecoverySet, modifiers);\n                            needTerminator = true;\n                        }\n                        break;\n                    case TokenID.Export:\n                        if ((allowedElements & AllowedElements.ModuleDeclarations) == AllowedElements.None) {\n                            this.reportParseError("\'export\' statements are only allowed at the global and module levels");\n                            this.currentToken = this.scanner.scan();\n                            ast = new AST(NodeType.Error);\n                            ast.minChar = minChar;\n                            ast.limChar = this.scanner.lastTokenLimChar();\n                        }\n                        if (this.topLevel) {\n                            this.hasTopLevelImportOrExport = true;\n                        }\n                        modifiers |= Modifiers.Exported;\n                        this.currentToken = this.scanner.scan();\n                        break;\n                    case TokenID.Private:\n                        modifiers |= Modifiers.Private;\n\n                        this.currentToken = this.scanner.scan();\n\n                        if (this.parsingClassConstructorDefinition) {\n\n                            if (!this.inferPropertiesFromThisAssignment) {\n                                this.reportParseError("Property declarations are not permitted within constructor bodies");\n                            }\n\n                            minChar = this.scanner.pos;\n                            if (this.inferPropertiesFromThisAssignment && (this.currentToken.tokenId != TokenID.This || (this.currentToken = this.scanner.scan()).tokenId != TokenID.Dot)) {\n                                this.reportParseError("Expected \'this.\' for property declaration");\n                                this.currentToken = this.scanner.scan();\n                                ast = new AST(NodeType.Error);\n                                ast.minChar = minChar;\n                                ast.limChar = this.scanner.lastTokenLimChar();\n                            }\n                            else {\n                                this.currentToken = this.scanner.scan();\n\n                                var id = Identifier.fromToken(this.currentToken);\n                                id.minChar = this.scanner.startPos;\n                                id.limChar = this.scanner.pos;\n\n                                this.currentToken = this.scanner.scan();\n                                ast = this.parseClassMemberVariableDeclaration(id, minChar, this.parsingClassConstructorDefinition, errorRecoverySet, modifiers);\n                            }\n                        }\n                        else {\n                            if (this.currentToken.tokenId != TokenID.Interface) {\n                                if (this.currentToken.tokenId == TokenID.Get) {\n                                    this.prevIDTok = this.currentToken;\n                                    this.currentToken = this.scanner.scan();\n                                    if (codeGenTarget < CodeGenTarget.ES5) {\n                                        this.reportParseError("Property accessors are only available when targeting ES5 or greater");\n                                    }\n                                    if ((this.currentToken.tokenId == TokenID.Identifier) || convertTokToID(this.currentToken, this.strictMode)) {\n                                        modifiers |= Modifiers.Getter;\n                                        this.prevIDTok = null;\n                                    }\n                                }\n                                else if (this.currentToken.tokenId == TokenID.Set) {\n                                    this.prevIDTok = this.currentToken;\n                                    this.currentToken = this.scanner.scan();\n                                    if (codeGenTarget < CodeGenTarget.ES5) {\n                                        this.reportParseError("Property accessors are only available when targeting ES5 or greater");\n                                    }\n                                    if ((this.currentToken.tokenId == TokenID.Identifier) || convertTokToID(this.currentToken, this.strictMod';
var v27254 = v27255 + 'e)) {\n                                        modifiers |= Modifiers.Setter;\n                                        this.prevIDTok = null;\n                                    }\n                                }\n                                fnOrVar = this.parsePropertyDeclaration(errorRecoverySet | ErrorRecoverySet.SColon,\n                                                          modifiers, isAmbient(), false);\n                                if ((fnOrVar.nodeType == NodeType.VarDecl) ||\n                                    ((fnOrVar.nodeType == NodeType.FuncDecl) && (hasFlag((<FuncDecl>fnOrVar).fncFlags, FncFlags.IsFatArrowFunction)))) {\n                                    needTerminator = true;\n                                }\n                                ast = fnOrVar;\n                            }\n                        }\n                        break;\n                    case TokenID.Public:\n                        if (this.parsingClassConstructorDefinition) {\n\n                            if (!this.inferPropertiesFromThisAssignment) {\n                                this.reportParseError("Property declarations are not permitted within constructor bodies");\n                            }\n\n                            this.currentToken = this.scanner.scan(); \n                            minChar = this.scanner.pos;\n                            modifiers |= Modifiers.Public;\n                            if (this.inferPropertiesFromThisAssignment && (this.currentToken.tokenId != TokenID.This || (this.currentToken = this.scanner.scan()).tokenId != TokenID.Dot)) {\n                                this.reportParseError("Expected \'this.\' for property declaration");\n                                this.currentToken = this.scanner.scan();\n                                ast = new AST(NodeType.Error);\n                                ast.minChar = minChar;\n                                ast.limChar = this.scanner.lastTokenLimChar();\n                            }\n                            else {\n                                this.currentToken = this.scanner.scan();\n\n                                var id = Identifier.fromToken(this.currentToken);\n                                id.minChar = this.scanner.startPos;\n                                id.limChar = this.scanner.pos;\n\n                                this.currentToken = this.scanner.scan();\n                                ast = this.parseClassMemberVariableDeclaration(id, minChar, this.parsingClassConstructorDefinition, errorRecoverySet, modifiers);\n                            }\n                        }\n                        else {\n                            if ((allowedElements & AllowedElements.Properties) == AllowedElements.None) {\n                                this.reportParseError("\'property\' statements are only allowed within classes");\n                                this.currentToken = this.scanner.scan();\n                                ast = new AST(NodeType.Error);\n                                ast.minChar = minChar;\n                                ast.limChar = this.scanner.lastTokenLimChar();\n                            }\n                            else {\n                                modifiers |= Modifiers.Public;\n                                this.currentToken = this.scanner.scan();\n                                if (this.currentToken.tokenId == TokenID.Get) {\n                                    this.prevIDTok = this.currentToken;\n                                    this.currentToken = this.scanner.scan();\n                                    if (codeGenTarget < CodeGenTarget.ES5) {\n                                        this.reportParseError("Property accessors are only available when targeting ES5 or greater");\n                                    }\n                                    if ((this.currentToken.tokenId == TokenID.Identifier) || convertTokToID(this.currentToken, this.strictMode)) {\n                                        modifiers |= Modifiers.Getter;\n                                        this.prevIDTok = null;\n                                    }\n                                }\n                                else if (this.currentToken.tokenId == TokenID.Set) {\n                                    this.prevIDTok = this.currentToken;\n                                    this.currentToken = this.scanner.scan();\n                                    if (codeGenTarget < CodeGenTarget.ES5) {\n                                        this.reportParseError("Property accessors are only available when targeting ES5 or greater");\n                                    }\n                                    if ((this.currentToken.tokenId == TokenID.Identifier) || convertTokToID(this.currentToken, this.strictMode)) {\n                                        modifiers |= Modifiers.Setter;\n                                        this.prevIDTok = null;\n                                    }\n                                }\n       ';
var v27253 = v27254 + '                         fnOrVar = this.parsePropertyDeclaration(errorRecoverySet | ErrorRecoverySet.SColon,\n                                                            modifiers, isAmbient(), false);\n                                if ((fnOrVar.nodeType == NodeType.VarDecl) ||\n                                    ((fnOrVar.nodeType == NodeType.FuncDecl) && hasFlag((<FuncDecl>fnOrVar).fncFlags, FncFlags.IsFatArrowFunction))) {\n                                    needTerminator = true;\n                                }\n                                ast = fnOrVar;\n                            }\n                        }\n                        break;\n                    case TokenID.Declare:\n                        if (!(allowedElements & AllowedElements.AmbientDeclarations)) {\n                            this.reportParseError("Ambient declarations are only allowed at the top-level or module scopes")\n                        }\n                        if (!this.parsingDeclareFile && hasFlag(parentModifiers, Modifiers.Ambient)) {\n                            this.reportParseError("Duplicate ambient declaration in this context. (Is the enclosing module or class already ambient?)")\n                        }\n                        modifiers |= Modifiers.Ambient;\n                        this.currentToken = this.scanner.scan();\n                        break;\n                    case TokenID.Class:\n                        if ((allowedElements & AllowedElements.ClassDeclarations) == AllowedElements.None) {\n                            this.reportParseError("class not allowed in this context");\n                            this.currentToken = this.scanner.scan();\n                            ast = new AST(NodeType.Error);\n                            ast.minChar = minChar;\n                            ast.limChar = this.scanner.lastTokenLimChar();\n                        }\n                        else {\n                            ast = this.parseClassDecl(errorRecoverySet, minChar, modifiers);\n                        }\n                        break;\n                    case TokenID.Interface:\n                        if ((allowedElements & AllowedElements.InterfaceDeclarations) == AllowedElements.None) {\n                            this.reportParseError("interface not allowed in this context");\n                            this.currentToken = this.scanner.scan();\n                            ast = new AST(NodeType.Error);\n                            ast.minChar = minChar;\n                            ast.limChar = this.scanner.lastTokenLimChar();\n                        }\n                        else {\n                            ast = this.parseInterfaceDecl(errorRecoverySet, modifiers);\n                        }\n                        break;\n                    case TokenID.Var:\n                        var declAst: AST = this.parseVariableDeclaration(errorRecoverySet | ErrorRecoverySet.StmtStart, modifiers,\n                                                     true, false);\n                        if (declAst.nodeType == NodeType.VarDecl) {\n                            ast = declAst;\n                        }\n                        else {\n                            ast = new Block(<ASTList>declAst, false);\n                        }\n                        needTerminator = true;\n                        break;\n                    case TokenID.Static:\n\n                        if (this.currentClassDecl == null) {\n                            this.reportParseError("Statics may only be class members");\n                        }\n\n                        mayNotBeExported();\n                        modifiers |= Modifiers.Public;\n                        this.currentToken = this.scanner.scan();\n                        if (this.currentToken.tokenId == TokenID.Get) {\n                            this.prevIDTok = this.currentToken;\n                            this.currentToken = this.scanner.scan();\n                            if (codeGenTarget < CodeGenTarget.ES5) {\n                                this.reportParseError("Property accessors are only available when targeting ES5 or greater");\n                            }\n                            if ((this.currentToken.tokenId == TokenID.Identifier) || convertTokToID(this.currentToken, this.strictMode)) {\n                                modifiers |= Modifiers.Getter;\n                                this.prevIDTok = null;\n                            }\n                        }\n                        else if (this.currentToken.tokenId == TokenID.Set) {\n                            this.currentToken = this.scanner.scan();\n                            if (codeGenTarget < CodeGenTarget.ES5) {\n                                this.reportParseError("Property accessors are only available when targeting ES5 or greater");\n                            }\n                            if ((this.currentToken.tokenId == TokenID.Identifier) || convertTokToID(this.currentToken, this.strictMode)) {\n             ';
var v27252 = v27253 + '                   modifiers |= Modifiers.Setter;\n                            }\n                        }\n                        if (isAmbient()) {\n                            modifiers |= Modifiers.Ambient;\n                        }\n                        fnOrVar = this.parsePropertyDeclaration(errorRecoverySet | ErrorRecoverySet.SColon,\n                                                  modifiers, this.parsingDeclareFile || (modifiers & Modifiers.Ambient) != Modifiers.None, true);\n\n                        var staticsList = this.topStaticsList();\n                        if (staticsList && fnOrVar.nodeType == NodeType.VarDecl) {\n                            staticsList.append(fnOrVar);\n                        }\n\n                        if (fnOrVar.nodeType == NodeType.VarDecl || ((fnOrVar.nodeType == NodeType.FuncDecl) && hasFlag((<FuncDecl>fnOrVar).fncFlags, FncFlags.IsFatArrowFunction))) {\n                            needTerminator = true;\n                        }\n\n                        ast = fnOrVar;\n                        break;\n                    case TokenID.For:\n                        mayNotBeExported();\n                        if (modifiers != Modifiers.None) {\n                            this.reportParseError("syntax error: for statement does not take modifiers");\n                        }\n                        minChar = this.scanner.startPos;\n                        this.checkNextToken(TokenID.OpenParen, errorRecoverySet | ErrorRecoverySet.ExprStart | ErrorRecoverySet.Var);\n                        this.state = ParseState.ForInit;\n                        forInOk = true;\n                        switch (this.currentToken.tokenId) {\n                            case TokenID.Var:\n                                temp = this.parseVariableDeclaration(errorRecoverySet | ErrorRecoverySet.SColon |\n                                                  ErrorRecoverySet.In, Modifiers.None, false, false);\n                                break;\n                            case TokenID.Semicolon:\n                                temp = null;\n                                this.state = ParseState.ForCondStart;\n                                break;\n                            default:\n                                temp = this.parseExpr(errorRecoverySet | ErrorRecoverySet.SColon |\n                                               ErrorRecoverySet.In, OperatorPrecedence.None, false,\n                                               TypeContext.NoTypes);\n                                break;\n                        }\n                        this.state = ParseState.ForInitAfterVar;\n                        if (this.currentToken.tokenId == TokenID.In) {\n                            if ((temp == null) || (!forInOk)) {\n                                this.reportParseError("malformed for statement");\n                                if (this.errorRecovery) {\n                                    this.skip(errorRecoverySet | ErrorRecoverySet.StmtStart);\n                                    ast = new AST(NodeType.Empty);\n                                    ast.flags |= ASTFlags.Error;\n                                }\n                            }\n                            else {\n                                this.currentToken = this.scanner.scan();\n                                var forInStmt = new ForInStatement(temp,\n                                                                 this.parseExpr(ErrorRecoverySet.RParen |\n                                                                           errorRecoverySet,\n                                                                           OperatorPrecedence.Comma,\n                                                                           false,\n                                                                           TypeContext.NoTypes));\n\n                                forInStmt.limChar = this.scanner.pos;\n                                forInStmt.statement.minChar = minChar;\n                                forInStmt.statement.limChar = this.scanner.pos;\n                                this.checkCurrentToken(TokenID.CloseParen, ErrorRecoverySet.StmtStart | errorRecoverySet);\n                                this.pushStmt(forInStmt, labelList);\n                                forInStmt.body = this.parseStatement(errorRecoverySet, allowedElements, parentModifiers);\n                                this.popStmt();\n                                forInStmt.minChar = minChar;\n                                ast = forInStmt;\n                            }\n                        }\n                        else {\n                            var forStmt: ForStatement = new ForStatement(temp);\n                            forStmt.minChar = minChar;\n                            this.checkCurrentToken(TokenID.Semicolon, errorRecoverySet);\n                            if (this.currentToken.tokenId == TokenID.Semicolon) {\n                                forStmt.cond = null;\n                 ';
var v27251 = v27252 + "           }\n                            else {\n                                forStmt.cond = this.parseExpr(errorRecoverySet | ErrorRecoverySet.SColon |\n                                                       ErrorRecoverySet.RParen,\n                                                       OperatorPrecedence.None, true,\n                                                       TypeContext.NoTypes);\n                                if (this.currentToken.tokenId != TokenID.Semicolon) {\n                                    this.skip(errorRecoverySet | ErrorRecoverySet.StmtStart);\n                                    ast = forStmt;\n                                    ast.flags |= ASTFlags.Error;\n                                }\n                            }\n                            this.currentToken = this.scanner.scan();\n                            if (this.currentToken.tokenId == TokenID.CloseParen) {\n                                forStmt.incr = null;\n                            }\n                            else {\n                                forStmt.incr = this.parseExpr(errorRecoverySet | ErrorRecoverySet.SColon |\n                                                       ErrorRecoverySet.RParen,\n                                                       OperatorPrecedence.None, true,\n                                                       TypeContext.NoTypes);\n                            }\n                            this.checkCurrentToken(TokenID.CloseParen, errorRecoverySet | ErrorRecoverySet.LCurly);\n                            this.pushStmt(forStmt, labelList);\n                            forStmt.body = this.parseStatement(errorRecoverySet, allowedElements, parentModifiers);\n                            this.popStmt();\n                            forStmt.limChar = forStmt.body.limChar;\n                            ast = forStmt;\n                        }\n                        break;\n                    case TokenID.With: {\n                        if (codeGenTarget < CodeGenTarget.ES5) {\n                            this.reportParseError(\"'with' statements are only available in ES5 codegen mode or better\");\n                        }\n\n                        if (this.strictMode) {\n                            this.reportParseError(\"'with' statements are not available in strict mode\");\n                        }\n\n                        mayNotBeExported();\n                        if (modifiers != Modifiers.None) {\n                            this.reportParseError(\"'with' statement does not take modifiers\");\n                        }\n                        minChar = this.scanner.startPos;\n                        this.checkNextToken(TokenID.OpenParen, errorRecoverySet | ErrorRecoverySet.ExprStart | ErrorRecoverySet.Var);\n\n                        var expr = this.parseExpr(errorRecoverySet | ErrorRecoverySet.Colon,\n                                                            OperatorPrecedence.None, true,\n                                                            TypeContext.NoTypes);\n                        this.checkCurrentToken(TokenID.CloseParen, errorRecoverySet | ErrorRecoverySet.LCurly);\n\n                        var withStmt = new WithStatement(expr);\n                        withStmt.body = this.parseStatement(errorRecoverySet, allowedElements, parentModifiers);\n                        withStmt.minChar = minChar;\n                        withStmt.limChar = withStmt.body.limChar;\n                        ast = withStmt;\n                    }\n                        break;\n                    case TokenID.Switch: {\n                        mayNotBeExported();\n                        if (modifiers != Modifiers.None) {\n                            this.reportParseError(\"'switch' statement does not take modifiers\");\n                        }\n                        this.checkNextToken(TokenID.OpenParen, errorRecoverySet | ErrorRecoverySet.ExprStart);\n\n                        var switchStmt = new SwitchStatement(this.parseExpr(errorRecoverySet |\n                                                                     ErrorRecoverySet.RParen,\n                                                                     OperatorPrecedence.None,\n                                                                     true,\n                                                                     TypeContext.NoTypes));\n                        switchStmt.statement.minChar = minChar;\n                        switchStmt.statement.limChar = this.scanner.pos;\n                        this.checkCurrentToken(TokenID.CloseParen, errorRecoverySet | ErrorRecoverySet.LCurly);\n                        var caseListMinChar = this.scanner.startPos;\n                         this.checkCurrentToken(TokenID.OpenBrace, errorRecoverySet | ErrorRecoverySet.SCase);\n                        switchStmt.defaultCase = null;\n                        switchStmt.caseList = new ASTList();\n                        var caseStmt: CaseStatement = null;\n                        this.push";
var v27250 = v27251 + 'Stmt(switchStmt, labelList);\n                        for (; ;) {\n                            if ((this.currentToken.tokenId == TokenID.Case) ||\n                                (this.currentToken.tokenId == TokenID.Default)) {\n                                var isDefault = (this.currentToken.tokenId == TokenID.Default);\n                                caseStmt = new CaseStatement();\n                                caseStmt.minChar = this.scanner.startPos;\n                                this.currentToken = this.scanner.scan();\n                                if (isDefault) {\n                                    switchStmt.defaultCase = caseStmt;\n                                }\n                                else {\n                                    caseStmt.expr = this.parseExpr(errorRecoverySet | ErrorRecoverySet.Colon,\n                                                            OperatorPrecedence.None, true,\n                                                            TypeContext.NoTypes);\n                                }\n                                this.checkCurrentToken(TokenID.Colon, errorRecoverySet | ErrorRecoverySet.StmtStart);\n                                caseStmt.body = new ASTList();\n                                this.parseStatementList(errorRecoverySet | ErrorRecoverySet.RCurly,\n                                              caseStmt.body, false, true, allowedElements, modifiers);\n                                caseStmt.limChar = caseStmt.body.limChar;\n                                switchStmt.caseList.append(caseStmt);\n                            }\n                            else {\n                                break;\n                            }\n                        }\n                        // end of switch statement\n                        switchStmt.caseList.minChar = caseListMinChar;\n                        switchStmt.caseList.limChar = this.scanner.pos;\n                        switchStmt.limChar = switchStmt.caseList.limChar;\n                        this.checkCurrentToken(TokenID.CloseBrace, errorRecoverySet);\n                        this.popStmt();\n                        ast = switchStmt;\n                        break;\n                    }\n                    case TokenID.While: {\n                        mayNotBeExported();\n                        if (modifiers != Modifiers.None) {\n                            this.reportParseError("\'while\' statement does not take modifiers");\n                        }\n                        minChar = this.scanner.startPos;\n                        this.checkNextToken(TokenID.OpenParen, ErrorRecoverySet.ExprStart |\n                                  errorRecoverySet);\n                        var whileStmt = new WhileStatement(this.parseExpr(errorRecoverySet |\n                                                                   ErrorRecoverySet.RParen,\n                                                                   OperatorPrecedence.None,\n                                                                   true, TypeContext.NoTypes));\n                        whileStmt.minChar = minChar;\n                        this.checkCurrentToken(TokenID.CloseParen, errorRecoverySet |\n                                  ErrorRecoverySet.StmtStart);\n                        this.pushStmt(whileStmt, labelList);\n                        whileStmt.body = this.parseStatement(errorRecoverySet, allowedElements, parentModifiers);\n                        whileStmt.limChar = whileStmt.body.limChar;\n                        this.popStmt();\n                        ast = whileStmt;\n                        break;\n                    }\n                    case TokenID.Do: {\n                        mayNotBeExported();\n                        if (modifiers != Modifiers.None) {\n                            this.reportParseError("\'do\' statement does not take modifiers");\n                        }\n                        minChar = this.scanner.startPos;\n                        this.currentToken = this.scanner.scan();\n                        var doStmt = new DoWhileStatement();\n                        doStmt.minChar = minChar;\n                        this.pushStmt(doStmt, labelList);\n                        doStmt.body = this.parseStatement(errorRecoverySet | ErrorRecoverySet.While,\n                                                   allowedElements, parentModifiers);\n                        this.popStmt();\n                        doStmt.whileAST = new Identifier("while");\n                        doStmt.whileAST.minChar = this.scanner.startPos;\n                        this.checkCurrentToken(TokenID.While, errorRecoverySet | ErrorRecoverySet.LParen);\n                        doStmt.whileAST.limChar = doStmt.whileAST.minChar + 5;\n                        this.checkCurrentToken(TokenID.OpenParen, errorRecoverySet | ErrorRecoverySet.ExprStart);\n                        doStmt.cond = this.parseExpr(errorRecoverySet | ErrorRecoverySet.RParen,\n                                           ';
var v27249 = v27250 + '   OperatorPrecedence.None, true, TypeContext.NoTypes);\n                        doStmt.limChar = this.scanner.pos;\n                        this.checkCurrentToken(TokenID.CloseParen, errorRecoverySet);\n                        ast = doStmt;\n                        // compatibility; more strict would be to require the \';\'\n                        if (this.currentToken.tokenId == TokenID.Semicolon) {\n                            this.currentToken = this.scanner.scan();\n                        }\n                        break;\n                    }\n                    case TokenID.If: {\n                        mayNotBeExported();\n                        if (modifiers != Modifiers.None) {\n                            this.reportParseError("if statement does not take modifiers");\n                        }\n                        minChar = this.scanner.startPos;\n                        this.checkNextToken(TokenID.OpenParen, errorRecoverySet | ErrorRecoverySet.ExprStart);\n                        var ifStmt = new IfStatement(this.parseExpr(errorRecoverySet |\n                                                             ErrorRecoverySet.LParen,\n                                                             OperatorPrecedence.None, true,\n                                                             TypeContext.NoTypes));\n                        ifStmt.minChar = minChar;\n                        ifStmt.statement.minChar = minChar;\n                        ifStmt.statement.limChar = this.scanner.pos;\n                        this.checkCurrentToken(TokenID.CloseParen, errorRecoverySet | ErrorRecoverySet.StmtStart);\n                        this.pushStmt(ifStmt, labelList);\n                        ifStmt.thenBod = this.parseStatement(ErrorRecoverySet.Else | errorRecoverySet,\n                                                      allowedElements, parentModifiers);\n                        ifStmt.limChar = ifStmt.thenBod.limChar;\n                        if (this.currentToken.tokenId == TokenID.Else) {\n                            this.currentToken = this.scanner.scan();\n                            ifStmt.elseBod = this.parseStatement(errorRecoverySet, allowedElements, parentModifiers);\n                            ifStmt.limChar = ifStmt.elseBod.limChar;\n                        }\n                        this.popStmt();\n                        ast = ifStmt;\n                        break;\n                    }\n                    case TokenID.Try: {\n                        mayNotBeExported();\n                        if (modifiers != Modifiers.None) {\n                            this.reportParseError("try statement does not take modifiers");\n                        }\n                        minChar = this.scanner.startPos;\n                        ast = this.parseTryCatchFinally(errorRecoverySet, parentModifiers, labelList);\n                        break;\n                    }\n                    case TokenID.OpenBrace: {\n                        mayNotBeExported();\n                        if (modifiers != Modifiers.None) {\n                            this.reportParseError("block does not take modifiers");\n                        }\n                        minChar = this.scanner.startPos;\n                        this.currentToken = this.scanner.scan();\n                        var block = new Block(new ASTList(), true);\n                        this.pushStmt(block, labelList);\n                        this.parseStatementList(\n                            errorRecoverySet | ErrorRecoverySet.RCurly, block.statements,\n                            /*sourceElements:*/ false, /*noLeadingCase:*/ false, AllowedElements.None, modifiers);\n                        this.popStmt();\n                        block.statements.minChar = minChar;\n                        block.statements.limChar = this.scanner.pos;\n                        block.minChar = block.statements.minChar;\n                        block.limChar = block.statements.limChar;\n                        this.checkCurrentToken(TokenID.CloseBrace, errorRecoverySet);\n                        ast = block;\n                        break;\n                    }\n                    case TokenID.Semicolon:\n                        mayNotBeExported();\n                        if (modifiers != Modifiers.None) {\n                            this.reportParseError("modifier can not appear here");\n                        }\n                        ast = new AST(NodeType.Empty);\n                        this.currentToken = this.scanner.scan();\n                        break;\n                    case TokenID.Break:\n                    case TokenID.Continue: {\n                        mayNotBeExported();\n                        if (modifiers != Modifiers.None) {\n                            this.reportParseError("modifiers can not appear before jump statement");\n                        }\n                        var jump =\n                            new Jump((this.currentToken.tokenId == TokenID.Break) ? NodeType.Break : NodeType.Cont';
var v27248 = v27249 + 'inue);\n                        this.currentToken = this.scanner.scan();\n                        if ((this.currentToken.tokenId == TokenID.Identifier) && (!this.scanner.lastTokenHadNewline())) {\n                            // Labeled break or continue.\n                            jump.target = this.currentToken.getText();\n                            this.currentToken = this.scanner.scan();\n                        }\n                        this.resolveJumpTarget(jump);\n                        ast = jump;\n                        needTerminator = true;\n                        break;\n                    }\n                    case TokenID.Return: {\n                        mayNotBeExported();\n                        if (modifiers != Modifiers.None) {\n                            this.reportParseError("modifiers can not appear before return statement");\n                        }\n                        if (!this.inFunction) {\n                            this.reportParseError("return statement outside of function body");\n                        }\n                        minChar = this.scanner.startPos;\n                        this.currentToken = this.scanner.scan();\n                        var retStmt = new ReturnStatement();\n                        retStmt.minChar = minChar;\n                        if ((this.currentToken.tokenId != TokenID.Semicolon) &&\n                            (this.currentToken.tokenId != TokenID.CloseBrace) &&\n                            (!(this.scanner.lastTokenHadNewline()))) {\n                            retStmt.returnExpression = this.parseExpr(errorRecoverySet |\n                                                               ErrorRecoverySet.SColon,\n                                                               OperatorPrecedence.None,\n                                                               true, TypeContext.NoTypes);\n                        }\n                        needTerminator = true;\n                        retStmt.limChar = this.scanner.lastTokenLimChar();\n                        ast = retStmt;\n                        break;\n                    }\n                    case TokenID.Throw:\n                        mayNotBeExported();\n                        if (modifiers != Modifiers.None) {\n                            this.reportParseError("modifiers can not appear before a throw statement");\n                        }\n                        minChar = this.scanner.startPos;\n                        this.currentToken = this.scanner.scan();\n                        if ((this.currentToken.tokenId != TokenID.Semicolon) &&\n                            (this.currentToken.tokenId != TokenID.CloseBrace) &&\n                            (!(this.scanner.lastTokenHadNewline()))) {\n                            temp = this.parseExpr(errorRecoverySet | ErrorRecoverySet.SColon,\n                                           OperatorPrecedence.None, true, TypeContext.NoTypes);\n                        }\n                        else {\n                            this.reportParseError("throw with no target");\n                            temp = null;\n                        }\n                        ast = new UnaryExpression(NodeType.Throw, temp);\n                        ast.limChar = this.scanner.lastTokenLimChar();\n                        needTerminator = true;\n                        break;\n                    case TokenID.Enum:\n                        // TODO: check module allowed here\n                        //minChar=scanner.startPos;\n                        this.currentToken = this.scanner.scan();\n                        ast = this.parseEnumDecl(errorRecoverySet, modifiers);\n                        ast.minChar = minChar;\n                        ast.limChar = this.scanner.lastTokenLimChar();\n                        if (this.parsingDeclareFile || this.ambientModule || hasFlag(modifiers, Modifiers.Ambient)) {\n                            (<ModuleDeclaration>ast).modFlags |= ModuleFlags.Ambient;\n                        }\n                        if (this.parsingDeclareFile || this.ambientModule || hasFlag(modifiers, Modifiers.Exported)) {\n                            (<ModuleDeclaration>ast).modFlags |= ModuleFlags.Exported;\n                        }\n                        break;\n                    case TokenID.Debugger:\n                        mayNotBeExported();\n                        if (modifiers != Modifiers.None) {\n                            this.reportParseError("modifiers can not appear before debugger statement");\n                        }\n                        \n                        minChar = this.scanner.startPos;\n                        this.currentToken = this.scanner.scan();\n                        var debuggerStmt = new DebuggerStatement();\n                        debuggerStmt.minChar = minChar;\n                        needTerminator = true;\n                        debuggerStmt.limChar = this.scanner.lastTokenLimChar();\n                        ast = debuggerStmt;\n                       ';
var v27247 = v27248 + ' break;\n                    default:\n                        if (modifiers != Modifiers.None) {\n                            this.reportParseError("modifiers can not appear before an expression statement or label");\n                        }\n                        minChar = this.scanner.startPos;\n                        var svPos = this.scanner.pos;\n                        temp = this.parseExpr(ErrorRecoverySet.Colon | ErrorRecoverySet.StmtStart |\n                                       errorRecoverySet, OperatorPrecedence.None, true,\n                                       TypeContext.NoTypes);\n                        if (this.scanner.pos == svPos) {\n                            // no progress\n                            this.currentToken = this.scanner.scan();\n                            ast = temp;\n                        }\n                        else if ((this.currentToken.tokenId == TokenID.Colon) && (!this.scanner.lastTokenHadNewline()) &&\n                                        temp && (temp.nodeType == NodeType.Name)) {\n                                            // It\'s a label\n                            if (labelList == null) {\n                                labelList = new ASTList();\n                            }\n                            labelList.append(new Label(<Identifier>temp));\n                            this.currentToken = this.scanner.scan();\n                        }\n                        else {\n                            // expression statement\n                            ast = temp;\n                            needTerminator = true;\n                        }\n                }\n                if (ast) {\n                    break;\n                }\n            }\n            if (needTerminator) {\n                switch (this.currentToken.tokenId) {\n                    case TokenID.Semicolon:\n                        this.currentToken = this.scanner.scan();\n                        ast.flags |= ASTFlags.ExplicitSemicolon;\n                        break;\n                    case TokenID.EndOfFile:\n                        // Extend any incomplete statements to include EOF token. This makes sure that this node is in the path \n                        // when completion or parameter help is requested.\n                        ast.limChar = this.scanner.pos;\n                        // IntentionaCloseBracethrough\n                    case TokenID.CloseBrace:\n                        ast.flags |= ASTFlags.AutomaticSemicolon;\n                        if (this.style_requireSemi) {\n                            this.reportParseStyleError("no automatic semicolon");\n                        }\n                        break;\n                    default:\n                        if (!this.scanner.lastTokenHadNewline()) {\n                            this.reportParseError("Expected \';\'");\n                        }\n                        else {\n                            ast.flags |= ASTFlags.AutomaticSemicolon;\n                            if (this.style_requireSemi) {\n                                this.reportParseStyleError("no automatic semicolon");\n                            }\n                        }\n                        break;\n                }\n            }\n            if (labelList) {\n                ast = new LabeledStatement(labelList, ast);\n            }\n\n            ///////////////////////////////////////////////////////////\n            //TODO: Eventually, we want to remove "minChar" and "limChar" assignments here,\n            //      as they are sometimes not specific enough for each statement kind.\n            ast.minChar = minChar;\n            // Only update "limChar" if it is not better than "lastTokenLimChar()"\n            ast.limChar = max(ast.limChar, this.scanner.lastTokenLimChar());\n            //\n            ///////////////////////////////////////////////////////////\n\n            if (preComments) {\n                ast.preComments = preComments;\n            }\n            if (this.ambientModule && (!this.okAmbientModuleMember(ast))) {\n                this.reportParseError("statement not permitted within ambient module");\n            }\n            ast.flags |= ASTFlags.IsStatement;\n            return ast;\n        }\n\n        private okAmbientModuleMember(ast: AST) {\n            var nt = ast.nodeType;\n            return (nt == NodeType.ClassDeclaration) || (nt == NodeType.ImportDeclaration) || (nt == NodeType.InterfaceDeclaration) || (nt == NodeType.ModuleDeclaration) ||\n                (nt == NodeType.Empty) || (nt == NodeType.VarDecl) || \n                ((nt == NodeType.Block) && !(<Block>ast).isStatementBlock) ||\n                ((nt == NodeType.FuncDecl) && ((<FuncDecl>ast).isMethod()));\n        }\n\n        private parseStatementList(errorRecoverySet: ErrorRecoverySet,\n                                   statements: ASTList,\n                                   sourceElms: bool,\n                                   noLeadingCase: bool,\n                                   allowedElements: A';
var v27246 = v27247 + 'llowedElements,\n                                   parentModifiers: Modifiers): void {\n            var directivePrologue = sourceElms;\n            statements.minChar = this.scanner.startPos;\n            var limChar = this.scanner.pos;\n            var innerStmts = (allowedElements & AllowedElements.ModuleDeclarations) == AllowedElements.None;\n            var classNope = (allowedElements & AllowedElements.ClassDeclarations) == AllowedElements.None;\n\n            errorRecoverySet |= ErrorRecoverySet.TypeScriptS | ErrorRecoverySet.RCurly;\n\n            this.state = ParseState.StartStatementList;\n            var oldStrictMode = this.strictMode;\n            this.nestingLevel++;\n            for (; ;) {\n                if ((this.currentToken.tokenId == TokenID.CloseBrace) ||\n                    (noLeadingCase && ((this.currentToken.tokenId == TokenID.Case) || (this.currentToken.tokenId == TokenID.Default))) ||\n                    (innerStmts && (this.currentToken.tokenId == TokenID.Export)) ||\n                    (classNope && (this.currentToken.tokenId == TokenID.Class)) ||\n                    (this.currentToken.tokenId == TokenID.EndOfFile)) {\n                    this.state = ParseState.EndStmtList;\n                    statements.limChar = limChar;\n                    if (statements.members.length == 0) {\n                        statements.preComments = this.parseComments();\n                    }\n                    else {\n                        statements.postComments = this.parseComments();\n                    }\n                    this.strictMode = oldStrictMode;\n                    this.nestingLevel--;\n                    return;\n                }\n\n                var stmt = this.parseStatement(errorRecoverySet &\n                                        (~(ErrorRecoverySet.Else | ErrorRecoverySet.RParen |\n                                           ErrorRecoverySet.Catch | ErrorRecoverySet.Colon)),\n                                        allowedElements, parentModifiers);\n\n\n                if (stmt) {\n                    stmt.postComments = this.combineComments(stmt.postComments, this.parseCommentsForLine(this.scanner.prevLine));\n                    statements.append(stmt);\n                    limChar = stmt.limChar;\n                    if (directivePrologue) {\n                        if (stmt.nodeType == NodeType.QString) {\n                            var qstring = <StringLiteral>stmt;\n                            if (qstring.text == "\\"use strict\\"") {\n                                statements.flags |= ASTFlags.StrictMode;\n                                this.strictMode = true;\n                            }\n                            else {\n                                directivePrologue = false;\n                            }\n                        }\n                        else {\n                            directivePrologue = false;\n                        }\n                    }\n                }\n            }\n        }\n\n        private fname = "";\n\n        public quickParse(sourceText: ISourceText, filename: string, unitIndex: number): QuickParseResult {\n            //TODO: REVIEW: We set this to avoid adding a "module" decl in the resulting script (see parse() method)\n            var svGenTarget = TypeScript.moduleGenTarget;\n            try {\n                TypeScript.moduleGenTarget = TypeScript.ModuleGenTarget.Local;\n                var script = this.parse(sourceText, filename, unitIndex, AllowedElements.QuickParse);\n                return new QuickParseResult(script, this.scanner.lexState);\n            }\n            finally {\n                TypeScript.moduleGenTarget = svGenTarget;\n            }\n        }\n\n        public parse(sourceText: ISourceText, filename: string, unitIndex: number, allowedElements = AllowedElements.Global): Script {\n            // Reset all parser state here.  This allows us to be resilient to reentrancy if an \n            // exception is thrown.\n            this.fname = filename;\n            this.currentUnitIndex = unitIndex;\n\n            this.currentToken = null;\n            this.needTerminator = false;\n            this.inFunction = false;\n            this.inInterfaceDecl = false;\n            this.inFncDecl = false;\n            this.state = ParseState.StartStatementList;\n            this.ambientModule = false;\n            this.ambientClass = false;\n            this.topLevel = true;\n            this.allowImportDeclaration = true;\n            this.prevIDTok = null;\n            this.statementInfoStack = new IStatementInfo[];\n            this.hasTopLevelImportOrExport = false;\n            this.strictMode = false;\n            this.nestingLevel = 0;\n            this.prevExpr = null;\n            this.currentClassDefinition = null;\n            this.parsingClassConstructorDefinition = false;\n            this.parsingDeclareFile = false;\n            this.amdDependencies = [];\n            this.inferPropertiesFromThisAssignment = false;\n            this.requiresExtendsBlock = false;\n\n';
var v27245 = v27246 + '            this.scanner.resetComments();\n            this.scanner.setErrorHandler((message) =>this.reportParseError(message));\n            this.scanner.setSourceText(sourceText, LexMode.File);\n\n            var leftCurlyCount = this.scanner.leftCurlyCount;\n            var rightCurlyCount = this.scanner.rightCurlyCount;\n\n            var minChar = this.scanner.pos;\n            this.currentToken = this.scanner.scan();\n            this.pushDeclLists();\n            var bod = new ASTList();\n            bod.minChar = minChar;\n\n            this.state = ParseState.StartScript;\n            this.parsingDeclareFile = isDSTRFile(filename) || isDTSFile(filename);\n\n            while (true) {\n                this.parseStatementList(\n                    ErrorRecoverySet.EOF | ErrorRecoverySet.Func,\n                    bod, /*sourceElements:*/ true, /*noLeadingCase:*/ false,\n                    allowedElements, Modifiers.None);\n\n                if (this.currentToken.tokenId === TokenID.EndOfFile) {\n                    break;\n                }\n\n                // Still have remaining tokens in the file.  Report error for this unexpected token,\n                // skip it, and continue trying to parse statements until we\'re done. \n                var badToken = tokenTable[this.currentToken.tokenId];\n                this.reportParseError("Unexpected statement block terminator \'" + badToken.text + "\'");\n\n                this.currentToken = this.scanner.scan();\n            }\n\n            this.state = ParseState.EndScript;\n\n            bod.limChar = this.scanner.pos;\n\n            var topLevelMod: ModuleDeclaration = null;\n            if (moduleGenTarget != ModuleGenTarget.Local && this.hasTopLevelImportOrExport) {\n                var correctedFileName = switchToForwardSlashes(filename);\n                var id: Identifier = new Identifier(correctedFileName);\n                topLevelMod = new ModuleDeclaration(id, bod, this.topVarList(), this.topScopeList(), null);\n\n                topLevelMod.modFlags |= ModuleFlags.IsDynamic;\n                topLevelMod.modFlags |= ModuleFlags.IsWholeFile;\n                topLevelMod.modFlags |= ModuleFlags.Exported;\n\n                if (this.parsingDeclareFile) {\n                    topLevelMod.modFlags |= ModuleFlags.Ambient;\n                }\n\n                topLevelMod.minChar = minChar;\n                topLevelMod.limChar = this.scanner.pos;\n                topLevelMod.prettyName = getPrettyName(correctedFileName);\n                topLevelMod.containsUnicodeChar = this.scanner.seenUnicodeChar;\n                topLevelMod.containsUnicodeCharInComment = this.scanner.seenUnicodeCharInComment;\n\n                topLevelMod.amdDependencies = this.amdDependencies;\n\n                bod = new ASTList();\n                bod.minChar = topLevelMod.minChar;\n                bod.limChar = topLevelMod.limChar;\n                bod.append(topLevelMod);\n            }\n\n            var script = new Script(this.topVarList(), this.topScopeList());\n            script.bod = bod;\n            this.popDeclLists();\n            script.minChar = minChar;\n            script.limChar = this.scanner.pos;\n            script.locationInfo = new LocationInfo(filename, this.scanner.lineMap, unitIndex);\n            script.leftCurlyCount = this.scanner.leftCurlyCount - leftCurlyCount;\n            script.rightCurlyCount = this.scanner.rightCurlyCount - rightCurlyCount;\n            script.isDeclareFile = this.parsingDeclareFile;\n            script.topLevelMod = topLevelMod;\n            script.containsUnicodeChar = this.scanner.seenUnicodeChar;\n            script.containsUnicodeCharInComment = this.scanner.seenUnicodeCharInComment;\n            script.requiresExtendsBlock = this.requiresExtendsBlock;\n            return script;\n        }\n    }\n\n    export function quickParse(logger: TypeScript.ILogger, scopeStartAST: AST, sourceText: ISourceText, minChar: number, limChar: number,\n        errorCapture: (minChar: number, charLen: number, message: string, unitIndex: number) => void ): QuickParseResult {\n\n        var fragment = sourceText.getText(minChar, limChar);\n        logger.log("Quick parse range (" + minChar + "," + limChar + "): \\"" + TypeScript.stringToLiteral(fragment, 100) + "\\"");\n\n        var quickParser = new Parser();\n        quickParser.setErrorRecovery(null);\n        quickParser.errorCallback = errorCapture;\n\n        // REVIEW: use enclosing scope to determine this\n        // REVIEW: Why even use class here?\n        var quickClassDecl = new ClassDeclaration(null, null, null, null);\n        quickParser.currentClassDecl = quickClassDecl;\n\n        var result = quickParser.quickParse(new StringSourceText(fragment), "", 0);\n        return result;\n    }\n}\n//\n// Copyright (c) Microsoft Corporation.  All rights reserved.\n// \n// Licensed under the Apache License, Version 2.0 (the "License");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//   http://www.apache.org/license';
var v27244 = v27245 + 's/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an "AS IS" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n\n///<reference path=\'typescript.ts\' />\n\nmodule TypeScript {\n\n    // We need to catch both left and right quotes\n    // (depending on your editor\'s font, this may not be clear...)    \n    export function stripQuotes(str: string) {\n        return str.replace("\\"", "").replace("\'", "").replace("\'", "").replace("\\"", "")\n    }\n\n    export function isQuoted(str: string) {\n        return str.indexOf("\\"") != -1 || str.indexOf("\'") != -1 || str.indexOf("\'") != -1 || str.indexOf("\\"") != -1;\n    }\n\n    export function quoteStr(str: string) {\n        return "\\"" + str + "\\"";\n    }\n\n    export function swapQuotes(str: string) {\n\n        if (str.indexOf("\\"") != -1) {\n            str = str.replace("\\"", "\'");\n            str = str.replace("\\"", "\'");\n        }\n        else {\n            str = str.replace("\'", "\\"");\n            str = str.replace("\'", "\\"");\n        }\n\n        return str;\n    }\n\n    export function switchToForwardSlashes(path: string) {\n        return path.replace(/\\\\/g, "/");\n    }\n\n    export function trimModName(modName: string) {\n        // in case\'s it\'s a declare file...\n        if (modName.length > 6 && modName.substring(modName.length - 6, modName.length) == ".d.str") {\n            return modName.substring(0, modName.length - 6);\n        }\n        if (modName.length > 4 && modName.substring(modName.length - 4, modName.length) == ".str") {\n            return modName.substring(0, modName.length - 4);\n        }\n        if (modName.length > 5 && modName.substring(modName.length - 5, modName.length) == ".d.ts") {\n            return modName.substring(0, modName.length - 5);\n        }\n        if (modName.length > 3 && modName.substring(modName.length - 3, modName.length) == ".ts") {\n            return modName.substring(0, modName.length - 3);\n        }\n        // in case\'s it\'s a .js file\n        if (modName.length > 3 && modName.substring(modName.length - 3, modName.length) == ".js") {\n            return modName.substring(0, modName.length - 3);\n        }\n\n        return modName;\n    }\n\n    export function getDeclareFilePath(fname: string) {\n        return isSTRFile(fname) ? changePathToDSTR(fname) : isTSFile(fname) ? changePathToDTS(fname) : changePathToDTS(fname);\n    }\n\n    function isFileOfExtension(fname: string, ext: string) {\n        var invariantFname = fname.toLocaleUpperCase();\n        var invariantExt = ext.toLocaleUpperCase();\n        var extLength = invariantExt.length;\n        return invariantFname.length > extLength && invariantFname.substring(invariantFname.length - extLength, invariantFname.length) == invariantExt;\n    }\n\n    export function isJSFile(fname: string) {\n        return isFileOfExtension(fname, ".js");\n    }\n\n    export function isSTRFile(fname: string) {\n        return isFileOfExtension(fname, ".str");\n    }\n\n    export function isTSFile(fname: string) {\n        return isFileOfExtension(fname, ".ts");\n    }\n\n    export function isDSTRFile(fname: string) {\n        return isFileOfExtension(fname, ".d.str");\n    }\n\n    export function isDTSFile(fname: string) {\n        return isFileOfExtension(fname, ".d.ts");\n    }\n\n    export function getPrettyName(modPath: string, quote?=true, treatAsFileName?=false) { \n        var modName = treatAsFileName ? switchToForwardSlashes(modPath) : trimModName(stripQuotes(modPath));\n        var components = this.getPathComponents(modName);\n        return components.length ? (quote ? quoteStr(components[components.length - 1]) : components[components.length - 1]) : modPath;\n    }\n\n    export function getPathComponents(path: string) {\n        return path.split("/");\n    }\n\n    export function getRelativePathToFixedPath(fixedModFilePath: string, absoluteModPath: string) {\n        absoluteModPath = switchToForwardSlashes(absoluteModPath);\n\n        var modComponents = this.getPathComponents(absoluteModPath);\n        var fixedModComponents = this.getPathComponents(fixedModFilePath);\n\n        // Find the component that differs\n        var joinStartIndex = 0;\n        for (; joinStartIndex < modComponents.length && joinStartIndex < fixedModComponents.length ; joinStartIndex++) {\n            if (fixedModComponents[joinStartIndex] != modComponents[joinStartIndex]) {\n                break;\n            }\n        }\n\n        // Get the relative path\n        if (joinStartIndex != 0) {\n            var relativePath = "";\n            var relativePathComponents = modComponents.slice(joinStartIndex, modComponents.length);\n            for (; joinStartIndex < fixedModComponents.length; joinStartIndex++) {\n                if (fixedModComponents[joinStartIndex] != "") {\n                    relativePath = relativePath + "../";\n      ';
var v27243 = v27244 + '          }\n            }\n\n            return relativePath + relativePathComponents.join("/");\n        }\n\n        return absoluteModPath;\n    }\n\n    export function quoteBaseName(modPath: string) {\n        var modName = trimModName(stripQuotes(modPath));\n        var path = getRootFilePath(modName);\n        if (path == "") {\n            return modPath;\n        }\n        else {\n            var components = modName.split(path);\n            var fileIndex = components.length > 1 ? 1 : 0;\n            return quoteStr(components[fileIndex]);\n        }\n    }\n\n    export function changePathToSTR(modPath: string) {\n        return trimModName(stripQuotes(modPath)) + ".str";\n    }\n\n    export function changePathToDSTR(modPath: string) {\n        return trimModName(stripQuotes(modPath)) + ".d.str";\n    }\n\n    export function changePathToTS(modPath: string) {\n        return trimModName(stripQuotes(modPath)) + ".ts";\n    }\n\n    export function changePathToDTS(modPath: string) {\n        return trimModName(stripQuotes(modPath)) + ".d.ts";\n    }\n\n    export function isRelative(path: string) {\n        return path.charAt(0) == ".";\n    }\n    export function isRooted(path: string) {\n        return path.charAt(0) == "\\\\" || path.charAt(0) == "/" || (path.indexOf(":\\\\") != -1) || (path.indexOf(":/") != -1);\n    }\n\n    export function getRootFilePath(outFname: string) {\n        if (outFname == "") {\n            return outFname;\n        }\n        else {\n            var isPath = outFname.indexOf("/") != -1;\n            return isPath ? filePath(outFname) : "";\n        }\n    }\n\n    export function filePathComponents(fullPath: string) {\n        fullPath = switchToForwardSlashes(fullPath);\n        var components = getPathComponents(fullPath);\n        return components.slice(0, components.length - 1);\n    }\n\n    export function filePath(fullPath: string) {\n        var path = filePathComponents(fullPath);\n        return path.join("/") + "/";\n    }\n\n    export function normalizeURL(url: string): string {\n        var hostDomainAndPortRegex = /^(https?:\\/\\/[\\-\\w\\.]+(:\\d+)?\\/)(.*)$/i;\n        var matches = hostDomainAndPortRegex.exec(url);\n        if (matches) {\n            var hostDomainAndPort = matches[1];\n            var actualPath = matches[3];\n            return hostDomainAndPort + normalizePath(actualPath);\n        }\n        return normalizePath(url);\n    }\n\n    export var pathNormalizeRegExp = /\\//g;\n\n    export function normalizePath(path: string): string {\n        path = switchToForwardSlashes(path);\n        var startedWithSep = path.charAt(0) === "/";\n        var parts = this.getPathComponents(path);\n        for (var i = 0; i < parts.length; i++) {\n            if (parts[i] === "." || parts[i] === "") {\n                parts.splice(i, 1);\n                i--;\n            }\n            if (i > 0 && parts[i] === ".." && parts[i - 1] !== "..") {\n                parts.splice(i - 1, 2);\n                i -= 2;\n            }\n        }\n        return (startedWithSep ? "/" : "") + parts.join("/");\n    }\n\n    export function normalizeImportPath(path: string): string {\n        return normalizePath(path);\n    }\n}//\n// Copyright (c) Microsoft Corporation.  All rights reserved.\n// \n// Licensed under the Apache License, Version 2.0 (the "License");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an "AS IS" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n\n///<reference path=\'typescript.ts\' />\n\nmodule TypeScript {\n\n    /// Compiler settings\n\n    export class StyleSettings {\n        // bitwise operations not permitted\n        public bitwise = false;  \n        // disallow non-block statements as bodies of compound statements\n        public blockInCompoundStmt = false;\n        // disallow == and !=\n        public eqeqeq = false;\n        // require body of for in loop to start with a filter\n        public forin = false;\n        // empty blocks permitted\n        public emptyBlocks = true;\n        // require result of new expression to be used (no new just for side-effects)\n        public newMustBeUsed = false;\n        // require semicolons to terminate statements\n        public requireSemi = false;\n        // no top-level assignment in conditionals if (a=b) { ...\n        public assignmentInCond = false;\n        // no == null or != null\n        public eqnull = false;\n        // permit eval\n        public evalOK = true;\n        // permit var use if decl in inner scope as in if (c) { var v=10; } v=11;\n        public innerScopeDeclEscape = true;\n        // permit functions in loops\n        public funcInLoop = true;\n        // permit re-declaration of local variable \n        public reDecl';
var v27242 = v27243 + 'areLocal = true;\n        // permit obj[\'x\'] in addition to obj.x\n        public literalSubscript = true;\n        // flag implicit \'any\'\n        public implicitAny = false;\n\n        public setOption(opt: string, val: bool): bool {\n            var optExists = this[opt];\n            if (optExists !== undefined) {\n                this[opt] = val;\n                return true;\n            }\n            else {\n                return false;\n            }\n        }\n        \n        public parseOptions(str: string) {\n            var opts=str.split(";");\n            for (var i = 0, len = opts.length; i < len; i++) {\n                var opt = opts[i];\n                var val = true;\n                var colonIndex=opt.lastIndexOf(":");\n                if (colonIndex >= 0) {\n                    var valStr = opt.substring(colonIndex+1);\n                    opt = opt.substring(0, colonIndex);\n                    if (valStr == "off") {\n                        val = false;\n                    }\n                }\n                if (!this.setOption(opt, val)) {\n                    return false;\n                }\n            }\n            return true;\n        }\n    }\n    \n    export class CompilationSettings {\n        public styleSettings = new StyleSettings();\n        public propagateConstants = false;\n        public minWhitespace = false;\n        public parseOnly = false;\n        public errorRecovery = false;\n        public emitComments = false;\n        public watch = false;\n        public exec = false;\n        public resolve = true;\n        public controlFlow = false;\n        public printControlFlow = false;\n        public controlFlowUseDef = false;\n        public errorOnWith = true;\n        public preprocess = true;\n        public canCallDefinitionSignature = false;\n\n        public inferPropertiesFromThisAssignment = false;\n        public useDefaultLib = true;\n\n        public codeGenTarget = CodeGenTarget.ES3;\n        public moduleGenTarget = ModuleGenTarget.Synchronous;\n        // --out option passed. \n        // Default is the "" which leads to multiple files generated next to the.ts files\n        public outputOption: string = "";\n        public mapSourceFiles = false;\n        public generateDeclarationFiles = false;\n\n        public useCaseSensitiveFileResolution = false;\n\n        public setStyleOptions(str: string) {\n            this.styleSettings.parseOptions(str);\n        }\n    }\n\n    ///\n    /// Preprocessing\n    ///\n    export interface IPreProcessedFileInfo {\n        settings: CompilationSettings;\n        referencedFiles: IFileReference[];\n        importedFiles: IFileReference[];\n        isLibFile: bool;\n    }\n\n    function getFileReferenceFromReferencePath(comment: string): IFileReference {\n        var referencesRegEx = /^(\\/\\/\\/\\s*<reference\\s+path=)(\'|")(.+?)\\2\\s*(static=(\'|")(.+?)\\2\\s*)*\\/>/gim;\n        var match = referencesRegEx.exec(comment);\n\n        if (match) {\n            var path: string = normalizePath(match[3]);\n            var adjustedPath = normalizePath(path);\n    \n            var isResident = match.length >= 7 && match[6] == "true";\n            if (isResident) {\n                CompilerDiagnostics.debugPrint(path + " is resident");\n            }\n            return { minChar: 0, limChar: 0, path: switchToForwardSlashes(adjustedPath), isResident: isResident };\n        }\n        else {\n            return null;\n        }\n    }\n\n    // used in the parser, but kept here in case we want to reintegrate it with preprocessing\n    export function getAdditionalDependencyPath(comment: string): string {\n        var amdDependencyRegEx = /^(\\/\\/\\/\\s*<amd-dependency\\s+path=)(\'|")(.+?)\\2\\s*(static=(\'|")(.+?)\\2\\s*)*\\/>/gim;\n        var match = amdDependencyRegEx.exec(comment);\n\n        if (match) {\n            var path: string = match[3];\n            return path;\n        }\n        else {\n            return null;\n        }\n    }\n\n    export function getImplicitImport(comment: string): bool {\n        var implicitImportRegEx = /^(\\/\\/\\/\\s*<implicit-import\\s*)*\\/>/gim;\n        var match = implicitImportRegEx.exec(comment);\n\n        if (match) {\n            return true;\n        }\n        \n        return false;\n    }\n\n    export function getStyleSettings(comment: string, styleSettings: StyleSettings) {\n        var styleRegEx = /^(\\/\\/\\/\\s*<style\\s+)(([a-zA-Z])+=(\'|").+(\'|"))\\s*\\/>/gim;\n\n        var settings = styleRegEx.exec(comment);\n\n        if (settings) {\n            var settingsRegEx = /^([a-zA-Z]+=[\'"]on[\'|"])/gim;\n            settings = settingsRegEx.exec(settings[2]);\n                \n            if (settings) {\n                for (var i = 0; i < settings.length; i++) {\n                    var setting = (<string>settings[i]).split("=");\n                    var on = "\\"on\\"";\n\n                    switch (setting[0]) {\n                        case "blockInCompoundStmt": styleSettings.blockInCompoundStmt = setting[1] == on; break;\n                        case "eqeqeq": styleSettings.eqeqeq = setting[1] == on; break;';
var v27241 = v27242 + '\n                        case "forin": styleSettings.forin = setting[1] == on; break;\n                        case "emptyBlocks": styleSettings.emptyBlocks = setting[1] == on; break;\n                        case "newMustBeUsed": styleSettings.newMustBeUsed = setting[1] == on; break;\n                        case "requireSemi": styleSettings.requireSemi = setting[1] == on; break;\n                        case "assignmentInCond": styleSettings.assignmentInCond = setting[1] == on; break;\n                        case "eqnull": styleSettings.eqnull = setting[1] == on; break;\n                        case "evalOK": styleSettings.evalOK = setting[1] == on; break;\n                        case "innerScopeDeclEscape": styleSettings.innerScopeDeclEscape = setting[1] == on; break;\n                        case "funcInLoop": styleSettings.funcInLoop = setting[1] == on; break;\n                        case "reDeclareLocal": styleSettings.reDeclareLocal = setting[1] == on; break;\n                        case "literalSubscript": styleSettings.literalSubscript = setting[1] == on; break;\n                        case "implicitAny": styleSettings.implicitAny = setting[1] == on; break;                               \n                    }\n                }\n            }\n        }\n    }\n\n    export function getReferencedFiles(sourceText: ISourceText): IFileReference[] {\n        var preProcessInfo = preProcessFile(sourceText, null, false);\n        return preProcessInfo.referencedFiles;\n    }\n\n    export function preProcessFile(sourceText: ISourceText, options=new CompilationSettings(), readImportFiles? = true): IPreProcessedFileInfo {\n        var scanner = new Scanner();\n        scanner.resetComments();\n        scanner.setSourceText(sourceText, LexMode.File);\n\n        var tok: Token = scanner.scan();\n        var comments: CommentToken[] = [];\n        var comment: CommentToken = null;\n        var leftCurlies: Token[] = [];\n\n        var settings: CompilationSettings = options;\n        var referencedFiles: IFileReference[] = [];\n        var importedFiles: IFileReference[] = [];\n        var isLibFile: bool = false;\n\n        // only search out dynamic mods\n        // if you find a dynamic mod, ignore every other mod inside, until you balance rcurlies\n\n        while (tok.tokenId != TokenID.EndOfFile) {\n\n            if (readImportFiles && tok.tokenId == TokenID.Import) {\n\n                tok = scanner.scan();\n\n                if (tok.tokenId == TokenID.Identifier || convertTokToID(tok, false)) {\n                    tok = scanner.scan();\n\n                    if (tok.tokenId == TokenID.Equals) {\n                        tok = scanner.scan();\n\n                        if (tok.tokenId == TokenID.Module) {\n                            tok = scanner.scan();\n                            if (tok.tokenId == TokenID.OpenParen) {\n                                tok = scanner.scan();\n\n                                // import foo = module("foo")\n                                if (tok.tokenId == TokenID.StringLiteral) {\n                                    var ref = { minChar: scanner.startPos, limChar: scanner.pos, path: stripQuotes(switchToForwardSlashes(tok.getText())), isResident: false };\n                                    importedFiles.push(ref);\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n\n            if (tok.tokenId == TokenID.OpenBrace) {\n                leftCurlies.push(tok);\n            }\n\n            if (tok.tokenId == TokenID.CloseBrace) {\n                leftCurlies.pop();\n            }\n\n            tok = scanner.scan();\n        }\n\n        // deal with comment references, amd dependencies and style settings\n        // REVIEW: We could potentially do this inline with the above, if we\n        // set Scanner::scanComments to \'true\'\n        comments = scanner.getComments();\n\n        for (var iComment = 0; iComment < comments.length; iComment++) {\n            comment = comments[iComment];\n            \n            if (!comment.isBlock) {\n                var referencedCode = getFileReferenceFromReferencePath(comment.getText());\n                if (referencedCode) {\n                    referencedCode.minChar = comment.startPos;\n                    referencedCode.limChar = referencedCode.minChar + comment.value.length;\n                    referencedFiles.push(referencedCode);\n                }\n\n                if (settings) {\n                    getStyleSettings(comment.getText(), settings.styleSettings);\n\n                    // is it a lib file?\n                    var isNoLibRegex = /^(\\/\\/\\/\\s*<reference\\s+no-default-lib=)(\'|")(.+?)\\2\\s*\\/>/gim;\n                    var isNoLibMatch: any = isNoLibRegex.exec(comment.getText());\n                    if (isNoLibMatch) {\n                        isLibFile = (isNoLibMatch[3] == "true");\n                    }\n                }\n            }\n        }\n\n        return { settings: settings, referencedFiles: refere';
var v27240 = v27241 + 'ncedFiles, importedFiles: importedFiles, isLibFile: isLibFile };\n    }\n\n} // Tools//\n// Copyright (c) Microsoft Corporation.  All rights reserved.\n// \n// Licensed under the Apache License, Version 2.0 (the "License");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an "AS IS" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n\n///<reference path=\'typescript.ts\' />\n\nmodule TypeScript {\n    // TODO: refactor indent logic for use in emit\n    export class PrintContext {\n        public builder = "";\n        public indent1 = "  ";\n        public indentStrings: string[] = [];\n        public indentAmt = 0;\n\n        constructor (public outfile: ITextWriter, public parser: Parser) {\n        }\n\n        public increaseIndent() {\n            this.indentAmt++;\n        }\n\n        public decreaseIndent() {\n            this.indentAmt--;\n        }\n\n        public startLine() {\n            if (this.builder.length > 0) {\n                CompilerDiagnostics.Alert(this.builder);\n            }\n            var indentString = this.indentStrings[this.indentAmt];\n            if (indentString === undefined) {\n                indentString = "";\n                for (var i = 0; i < this.indentAmt; i++) {\n                    indentString += this.indent1;\n                }\n                this.indentStrings[this.indentAmt] = indentString;\n            }\n            this.builder += indentString;\n        }\n\n        public write(s) {\n            this.builder += s;\n        }\n\n        public writeLine(s) {\n            this.builder += s;\n            this.outfile.WriteLine(this.builder);\n            this.builder = "";\n        }\n\n    }\n\n    export function prePrintAST(ast: AST, parent: AST, walker: IAstWalker) {\n        var pc: PrintContext = <PrintContext>walker.state;\n\n        ast.print(pc);\n        pc.increaseIndent();\n        return ast;\n    }\n\n\n    export function postPrintAST(ast: AST, parent: AST, walker: IAstWalker) {\n        var pc: PrintContext = <PrintContext>walker.state;\n        pc.decreaseIndent();\n        return ast;\n    }\n}//\n// Copyright (c) Microsoft Corporation.  All rights reserved.\n// \n// Licensed under the Apache License, Version 2.0 (the "License");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an "AS IS" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n\n///<reference path=\'typescript.ts\' />\n\nmodule TypeScript {\n\n    export interface IResolvedFile {\n        content: string;\n        path: string;\n    }\n\n    /// This class acts as a convenience class to store path and content information in places\n    /// where we need an ISourceText object\n    export class SourceUnit implements ISourceText, IResolvedFile {\n        public referencedFiles: IFileReference[] = null;\n        constructor(public path: string, public content: string) {\n        }\n\n        public getText(start: number, end: number): string { return this.content.substring(start, end); }\n        public getLength(): number { return this.content.length; }\n    }\n\n    export interface IFileReference {\n        minChar: number;\n        limChar: number;\n        path: string;\n        isResident: bool;\n    }\n\n    /// Limited API for file system manipulation\n    export interface IFileSystemObject {\n        resolvePath(path: string): string;\n        readFile(path: string): string;\n        findFile(rootPath: string, partialFilePath: string): IResolvedFile;\n        dirName(path: string): string;\n    }\n\n    export class CompilationEnvironment {\n        constructor (public compilationSettings: CompilationSettings, public ioHost: IFileSystemObject) { }\n        public residentCode: SourceUnit[] = [];\n        public code: SourceUnit[] = [];\n    }\n\n    export interface IResolutionDispatcher {\n        postResolutionError(errorFile: string, errorMessage: string, errorObject: any): void;\n        postResolution(path: string, source: ISourceText): void;\n    }\n\n    export interface ICodeResolver {\n        resolveCode(referencePath: string, rootPath: string, performSearch:bool, state: IResolutionDispatcher): void;\n    }\n\n    export interface IResolverHost {\n        resolveCompilationEnvironment(preEnvironment: CompilationEnvironment, resolver: ICodeResolver, traceDependencies: bool): CompilationEnvironment;\n    }\n\n    export class CodeResolver implements T';
var v27239 = v27240 + 'ypeScript.ICodeResolver {\n        public visited: any = { };\n\n        constructor (public environment: CompilationEnvironment) { }\n\n        public resolveCode(referencePath: string, parentPath: string, performSearch: bool, resolutionDispatcher: TypeScript.IResolutionDispatcher): void {\n            \n            var resolvedFile: IResolvedFile = { content: null, path: referencePath };\n            \n            var ioHost = this.environment.ioHost;\n            \n            // If the path is relative, normalize it, based on the root\n            var isRelativePath = TypeScript.isRelative(referencePath);\n            var isRootedPath = isRelativePath ? false : isRooted(referencePath);\n            var normalizedPath: string = \n                isRelativePath ? ioHost.resolvePath(parentPath + "/" + referencePath) : \n                // we only follow the second clause if the path is a non-rooted triple-slash reference path\n                (isRootedPath || !parentPath || performSearch ? referencePath : parentPath + "/" + referencePath);\n\n            // We use +=.ts to make sure we don\'t accidentally pick up ".js" files or the like\n            if (!isSTRFile(normalizedPath) && !isTSFile(normalizedPath)) {\n                normalizedPath += ".ts";  //changePathToSTR(normalizedPath);\n            }\n\n            normalizedPath = switchToForwardSlashes(stripQuotes(normalizedPath));\n            var absoluteModuleID = this.environment.compilationSettings.useCaseSensitiveFileResolution ? normalizedPath : normalizedPath.toLocaleUpperCase();\n            // read the file contents - if it doesn\'t exist, trigger a resolution error\n            if (!this.visited[absoluteModuleID]) {\n\n                // if the path is relative, or came from a reference tag, we don\'t perform a search\n                if (isRelativePath || isRootedPath || !performSearch) {\n                    try {\n                        CompilerDiagnostics.debugPrint("   Reading code from " + normalizedPath);\n                            \n                        // Look for the .ts file first - if not present, use the .ts, the .d.str and the .d.ts\n                        try {\n                            resolvedFile.content = ioHost.readFile(normalizedPath);\n                        }\n                        catch (err) {\n                            try {\n                                if (isSTRFile(normalizedPath)) {\n                                    normalizedPath = changePathToTS(normalizedPath);\n                                }\n                                else if (isTSFile(normalizedPath)) {\n                                    normalizedPath = changePathToSTR(normalizedPath);\n                                }\n                                CompilerDiagnostics.debugPrint("   Reading code from " + normalizedPath);\n                                resolvedFile.content = ioHost.readFile(normalizedPath);\n                            }\n                            catch (err) {\n                                normalizedPath = changePathToDSTR(normalizedPath);\n                                CompilerDiagnostics.debugPrint("   Reading code from " + normalizedPath);\n\n                                try {\n                                    resolvedFile.content = ioHost.readFile(normalizedPath);\n                                }\n                                catch (err) {\n                                    normalizedPath = changePathToDTS(normalizedPath);\n                                    CompilerDiagnostics.debugPrint("   Reading code from " + normalizedPath);\n                                    resolvedFile.content = ioHost.readFile(normalizedPath);\n                                }\n                            }\n                        }\n                        CompilerDiagnostics.debugPrint("   Found code at " + normalizedPath);\n\n                        resolvedFile.path = normalizedPath;\n                        this.visited[absoluteModuleID] = true;\n                    }\n                    catch (err) {\n                        CompilerDiagnostics.debugPrint("   Did not find code for " + referencePath);\n                    }\n                }\n                else {\n\n                    // if the path is non-relative, we should attempt to search on the relative path\n                    resolvedFile = ioHost.findFile(parentPath, normalizedPath);\n\n                    if (!resolvedFile) {\n                        if (isSTRFile(normalizedPath)) {\n                            normalizedPath = changePathToTS(normalizedPath);\n                        }\n                        else if (isTSFile(normalizedPath)) {\n                            normalizedPath = changePathToSTR(normalizedPath);\n                        }\n                        resolvedFile = ioHost.findFile(parentPath, normalizedPath);\n                    }\n\n                    if (!resolvedFile) {\n                        normalizedPath = changePathToDTS(normalizedPath);\n                        resolvedFile = ioHo';
var v27238 = v27239 + "st.findFile(parentPath, normalizedPath);\n                        if (!resolvedFile) {\n                            normalizedPath = changePathToDSTR(normalizedPath);\n                            resolvedFile = ioHost.findFile(parentPath, normalizedPath);\n                        }\n                    }\n\n                    if (resolvedFile) {\n                        resolvedFile.path = switchToForwardSlashes(TypeScript.stripQuotes(resolvedFile.path));\n                        CompilerDiagnostics.debugPrint(referencePath + \" resolved to: \" + resolvedFile.path);\n                        resolvedFile.content = resolvedFile.content;\n                        this.visited[absoluteModuleID] = true;\n                    }\n                    else {\n                        CompilerDiagnostics.debugPrint(\"Could not find \" + referencePath);\n                    }\n                }\n\n                if (resolvedFile && resolvedFile.content != null) {\n                    // preprocess the file, to gather dependencies\n                    var rootDir = ioHost.dirName(resolvedFile.path);\n                    var sourceUnit = new SourceUnit(resolvedFile.path, resolvedFile.content);\n                    var preProcessedFileInfo = preProcessFile(sourceUnit, this.environment.compilationSettings);\n                    sourceUnit.referencedFiles = preProcessedFileInfo.referencedFiles;\n\n                    // resolve explicit references\n                    for (var i = 0; i < preProcessedFileInfo.referencedFiles.length; i++) {\n                        var referencedFile = preProcessedFileInfo.referencedFiles[i];\n                        var normalizedPath = isRooted(referencedFile.path) ? referencedFile.path : rootDir + \"/\" + referencedFile.path;\n                        normalizedPath = ioHost.resolvePath(normalizedPath);\n                        if (referencePath == normalizedPath) {\n                            resolutionDispatcher.postResolutionError(normalizedPath, \"File contains reference to itself\", null);\n                            continue;\n                        }\n                        this.resolveCode(referencedFile.path, rootDir, false, resolutionDispatcher);\n                    }\n                    \n                    // resolve imports\n                    for (var i = 0; i < preProcessedFileInfo.importedFiles.length; i++) {\n                        this.resolveCode(preProcessedFileInfo.importedFiles[i].path, rootDir, true, resolutionDispatcher);\n                    }\n\n                    // add the file to the appropriate code list\n                    resolutionDispatcher.postResolution(sourceUnit.path, sourceUnit);\n                }\n            }\n        }\n    }\n}//\n// Copyright (c) Microsoft Corporation.  All rights reserved.\n// \n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n\n///<reference path='typescript.ts' />\n\nmodule TypeScript {\n\n    export var LexEOF = (-1);\n\n    export var LexCodeNWL = 0x0A;\n    export var LexCodeRET = 0x0D;\n    export var LexCodeLS =  0x2028;\n    export var LexCodePS =  0x2029;\n    export var LexCodeTAB = 0x09;\n    export var LexCodeVTAB = 0x0B;\n    export var LexCode_e = 'e'.charCodeAt(0);\n    export var LexCode_E = 'E'.charCodeAt(0);\n    export var LexCode_x = 'x'.charCodeAt(0);\n    export var LexCode_X = 'X'.charCodeAt(0);\n    export var LexCode_a = 'a'.charCodeAt(0);\n    export var LexCode_A = 'A'.charCodeAt(0);\n    export var LexCode_f = 'f'.charCodeAt(0);\n    export var LexCode_F = 'F'.charCodeAt(0);\n\n    export var LexCode_g = 'g'.charCodeAt(0);\n    export var LexCode_m = 'm'.charCodeAt(0);\n    export var LexCode_i = 'i'.charCodeAt(0);\n\n    export var LexCode_u = 'u'.charCodeAt(0);\n\n    export var LexCode_0 = '0'.charCodeAt(0);\n    export var LexCode_9 = '9'.charCodeAt(0);\n    export var LexCode_8 = '8'.charCodeAt(0);\n    export var LexCode_7 = '7'.charCodeAt(0);\n\n    export var LexCodeBSL = '\\\\'.charCodeAt(0);\n    export var LexCodeSHP = '#'.charCodeAt(0);\n    export var LexCodeBNG = '!'.charCodeAt(0);\n    export var LexCodeQUO = '\"'.charCodeAt(0);\n    export var LexCodeAPO = '\\''.charCodeAt(0);\n    export var LexCodePCT = '%'.charCodeAt(0);\n    export var LexCodeAMP = '&'.charCodeAt(0);\n    export var LexCodeLPR = '('.charCodeAt(0);\n    export var LexCodeRPR = ')'.charCodeAt(0);\n    export var LexCodePLS = '+'.charCodeAt(0);\n    export var LexCodeMIN = '-'.charCodeAt(0);\n    export var LexCodeMUL = '*'.charCodeAt(0);\n    export var LexCodeSLH = '/'.charCodeAt(0);\n    export var LexCodeXOR = '^'.";
var v27237 = v27238 + "charCodeAt(0);\n    export var LexCodeCMA = ','.charCodeAt(0);\n    export var LexCodeDOT = '.'.charCodeAt(0);\n    export var LexCodeLT = '<'.charCodeAt(0);\n    export var LexCodeEQ = '='.charCodeAt(0);\n    export var LexCodeGT = '>'.charCodeAt(0);\n    export var LexCodeQUE = '?'.charCodeAt(0);\n    export var LexCodeLBR = '['.charCodeAt(0);\n    export var LexCodeRBR = ']'.charCodeAt(0);\n    export var LexCodeUSC = '_'.charCodeAt(0);\n    export var LexCodeLC = '{'.charCodeAt(0);\n    export var LexCodeRC = '}'.charCodeAt(0);\n    export var LexCodeBAR = '|'.charCodeAt(0);\n    export var LexCodeTIL = '~'.charCodeAt(0);\n    export var LexCodeCOL = ':'.charCodeAt(0);\n    export var LexCodeSMC = ';'.charCodeAt(0);\n    export var LexCodeUnderscore = '_'.charCodeAt(0);\n    export var LexCodeDollar = '$'.charCodeAt(0);\n    export var LexCodeSpace = 32;\n    export var LexCodeAtSign = '@'.charCodeAt(0);\n    export var LexCodeASCIIChars = 128;\n\n    export var LexKeywordTable = undefined;\n    // TODO: use new Token[128];\n    var autoToken: Token[] = new Array(LexCodeASCIIChars);\n    var lexIdStartTable: bool[] = new Array(LexCodeASCIIChars);\n\n    // Unicode range maps\n    // REVIEW: These range maps have been extracted from the Unicode specifications, they might be missing values, and/or include \n    //         incorrect ranges. but for the most they seem to be correct. A more accurate and thorough review is needed.\n\n    /*\n        As per ECMAScript Language Specification 3th Edition, Section 7.6: Identifiers\n        IdentifierStart :: Can contain Unicode 3.0.0  categories Uppercase letter (Lu), Lowercase letter (Ll), Titlecase letter (Lt), Modifier letter (Lm), Other letter (Lo), or Letter number (Nl).\n        IdentifierPart :: Can contain IdentifierStart + Unicode 3.0.0  categories Non-spacing mark (Mn), Combining spacing mark (Mc), Decimal number (Nd), or Connector punctuation (Pc).\n                    \n        Codepoint ranges for ES3 Identifiers are extracted from the Unicode 3.0.0 specification at:\n        http://www.unicode.org/Public/3.0-Update/UnicodeData-3.0.0.txt\n    */\n    var unicodeES3IdStart = [\n\t\t170, 170,181, 181,186, 186,192, 214,216, 246,248, 543,546, 563,592, 685,688, 696,699, 705,720, 721,736, 740,750, 750,890, 890,902, 902,904, 906,908, 908,910, 929,931, 974,976, 983,986, 1011,1024, 1153,1164, 1220,1223, 1224,1227, 1228,1232, 1269,1272, 1273,1329, 1366,1369, 1369,1377, 1415,1488, 1514,\n\t\t1520, 1522,1569, 1594,1600, 1610,1649, 1747,1749, 1749,1765, 1766,1786, 1788,1808, 1808,1810, 1836,1920, 1957,2309, 2361,2365, 2365,2384, 2384,2392, 2401,2437, 2444,2447, 2448,2451, 2472,2474, 2480,2482, 2482,2486, 2489,2524, 2525,2527, 2529,2544, 2545,2565, 2570,2575, 2576,2579, 2600,2602, 2608,2610, 2611,\n\t\t2613, 2614,2616, 2617,2649, 2652,2654, 2654,2674, 2676,2693, 2699,2701, 2701,2703, 2705,2707, 2728,2730, 2736,2738, 2739,2741, 2745,2749, 2749,2768, 2768,2784, 2784,2821, 2828,2831, 2832,2835, 2856,2858, 2864,2866, 2867,2870, 2873,2877, 2877,2908, 2909,2911, 2913,2949, 2954,2958, 2960,2962, 2965,2969, 2970,\n\t\t2972, 2972,2974, 2975,2979, 2980,2984, 2986,2990, 2997,2999, 3001,3077, 3084,3086, 3088,3090, 3112,3114, 3123,3125, 3129,3168, 3169,3205, 3212,3214, 3216,3218, 3240,3242, 3251,3253, 3257,3294, 3294,3296, 3297,3333, 3340,3342, 3344,3346, 3368,3370, 3385,3424, 3425,3461, 3478,3482, 3505,3507, 3515,3517, 3517,\n\t\t3520, 3526,3585, 3632,3634, 3635,3648, 3654,3713, 3714,3716, 3716,3719, 3720,3722, 3722,3725, 3725,3732, 3735,3737, 3743,3745, 3747,3749, 3749,3751, 3751,3754, 3755,3757, 3760,3762, 3763,3773, 3773,3776, 3780,3782, 3782,3804, 3805,3840, 3840,3904, 3911,3913, 3946,3976, 3979,4096, 4129,4131, 4135,4137, 4138,\n\t\t4176, 4181,4256, 4293,4304, 4342,4352, 4441,4447, 4514,4520, 4601,4608, 4614,4616, 4678,4680, 4680,4682, 4685,4688, 4694,4696, 4696,4698, 4701,4704, 4742,4744, 4744,4746, 4749,4752, 4782,4784, 4784,4786, 4789,4792, 4798,4800, 4800,4802, 4805,4808, 4814,4816, 4822,4824, 4846,4848, 4878,4880, 4880,4882, 4885,\n\t\t4888, 4894,4896, 4934,4936, 4954,5024, 5108,5121, 5740,5743, 5750,5761, 5786,5792, 5866,6016, 6067,6176, 6263,6272, 6312,7680, 7835,7840, 7929,7936, 7957,7960, 7965,7968, 8005,8008, 8013,8016, 8023,8025, 8025,8027, 8027,8029, 8029,8031, 8061,8064, 8116,8118, 8124,8126, 8126,8130, 8132,8134, 8140,8144, 8147,\n\t\t8150, 8155,8160, 8172,8178, 8180,8182, 8188,8319, 8319,8450, 8450,8455, 8455,8458, 8467,8469, 8469,8473, 8477,8484, 8484,8486, 8486,8488, 8488,8490, 8493,8495, 8497,8499, 8505,8544, 8579,12293, 12295,12321, 12329,12337, 12341,12344, 12346,12353, 12436,12445, 12446,12449, 12538,12540, 12542,12549, 12588,\n\t\t12593, 12686,12704, 12727,13312, 13312,19893, 19893,19968, 19968,40869, 40869,40960, 42124,44032, 44032,55203, 55203,63744, 64045,64256, 64262,64275, 64279,64285, 64285,64287, 64296,64298, 64310,64312, 64316,64318, 64318,64320, 64321,64323, 64324,64326, 64433,64467, 64829,64848, 64911,64914, 64967,\n\t\t65008, 65019,65136, 65138,65140, 65140,65142, 65276,65313, 65338,65345, 65370,65382, 654";
var v27236 = v27237 + "70,65474, 65479,65482, 65487,65490, 65495,65498, 65500\n\t];\n\n\tvar unicodeES3IdCont = [\n\t\t768, 846,864, 866,1155, 1158,1425, 1441,1443, 1465,1467, 1469,1471, 1471,1473, 1474,1476, 1476,1611, 1621,1632, 1641,1648, 1648,1750, 1756,1759, 1764,1767, 1768,1770, 1773,1776, 1785,1809, 1809,1840, 1866,1958, 1968,2305, 2307,2364, 2364,2366, 2381,2385, 2388,2402, 2403,2406, 2415,2433, 2435,2492, 2492,\n\t\t2494, 2500,2503, 2504,2507, 2509,2519, 2519,2530, 2531,2534, 2543,2562, 2562,2620, 2620,2622, 2626,2631, 2632,2635, 2637,2662, 2673,2689, 2691,2748, 2748,2750, 2757,2759, 2761,2763, 2765,2790, 2799,2817, 2819,2876, 2876,2878, 2883,2887, 2888,2891, 2893,2902, 2903,2918, 2927,2946, 2947,3006, 3010,3014, 3016,\n\t\t3018, 3021,3031, 3031,3047, 3055,3073, 3075,3134, 3140,3142, 3144,3146, 3149,3157, 3158,3174, 3183,3202, 3203,3262, 3268,3270, 3272,3274, 3277,3285, 3286,3302, 3311,3330, 3331,3390, 3395,3398, 3400,3402, 3405,3415, 3415,3430, 3439,3458, 3459,3530, 3530,3535, 3540,3542, 3542,3544, 3551,3570, 3571,3633, 3633,\n\t\t3636, 3642,3655, 3662,3664, 3673,3761, 3761,3764, 3769,3771, 3772,3784, 3789,3792, 3801,3864, 3865,3872, 3881,3893, 3893,3895, 3895,3897, 3897,3902, 3903,3953, 3972,3974, 3975,3984, 3991,3993, 4028,4038, 4038,4140, 4146,4150, 4153,4160, 4169,4182, 4185,4969, 4977,6068, 6099,6112, 6121,6160, 6169,6313, 6313,\n\t\t8255, 8256,8400, 8412,8417, 8417,12330, 12335,12441, 12442,12539, 12539,64286, 64286,65056, 65059,65075, 65076,65101, 65103,65296, 65305,65343, 65343,65381, 65381\n\t];\n\n\n    /*\n        As per ECMAScript Language Specification 5th Edition, Section 7.6: Identifier Names and Identifiers\n        IdentifierStart :: Can contain Unicode 6.2  categories Uppercase letter (Lu), Lowercase letter (Ll), Titlecase letter (Lt), Modifier letter (Lm), Other letter (Lo), or Letter number (Nl).\n        IdentifierPart :: Can contain IdentifierStart + Unicode 6.2  categories Non-spacing mark (Mn), Combining spacing mark (Mc), Decimal number (Nd), Connector punctuation (Pc), <ZWNJ>, or <ZWJ>.\n                    \n        Codepoint ranges for ES5 Identifiers are extracted from the Unicode 6.2 specification at:\n        http://www.unicode.org/Public/6.2.0/ucd/UnicodeData.txt\n    */\n\tvar unicodeES5IdStart = [\n\t\t170, 170,181, 181,186, 186,192, 214,216, 246,248, 705,710, 721,736, 740,748, 748,750, 750,880, 884,886, 887,890, 893,902, 902,904, 906,908, 908,910, 929,931, 1013,1015, 1153,1162, 1319,1329, 1366,1369, 1369,1377, 1415,1488, 1514,1520, 1522,1568, 1610,1646, 1647,1649, 1747,1749, 1749,1765, 1766,1774, 1775,\n\t\t1786, 1788,1791, 1791,1808, 1808,1810, 1839,1869, 1957,1969, 1969,1994, 2026,2036, 2037,2042, 2042,2048, 2069,2074, 2074,2084, 2084,2088, 2088,2112, 2136,2208, 2208,2210, 2220,2308, 2361,2365, 2365,2384, 2384,2392, 2401,2417, 2423,2425, 2431,2437, 2444,2447, 2448,2451, 2472,2474, 2480,2482, 2482,2486, 2489,\n\t\t2493, 2493,2510, 2510,2524, 2525,2527, 2529,2544, 2545,2565, 2570,2575, 2576,2579, 2600,2602, 2608,2610, 2611,2613, 2614,2616, 2617,2649, 2652,2654, 2654,2674, 2676,2693, 2701,2703, 2705,2707, 2728,2730, 2736,2738, 2739,2741, 2745,2749, 2749,2768, 2768,2784, 2785,2821, 2828,2831, 2832,2835, 2856,2858, 2864,\n\t\t2866, 2867,2869, 2873,2877, 2877,2908, 2909,2911, 2913,2929, 2929,2947, 2947,2949, 2954,2958, 2960,2962, 2965,2969, 2970,2972, 2972,2974, 2975,2979, 2980,2984, 2986,2990, 3001,3024, 3024,3077, 3084,3086, 3088,3090, 3112,3114, 3123,3125, 3129,3133, 3133,3160, 3161,3168, 3169,3205, 3212,3214, 3216,3218, 3240,\n\t\t3242, 3251,3253, 3257,3261, 3261,3294, 3294,3296, 3297,3313, 3314,3333, 3340,3342, 3344,3346, 3386,3389, 3389,3406, 3406,3424, 3425,3450, 3455,3461, 3478,3482, 3505,3507, 3515,3517, 3517,3520, 3526,3585, 3632,3634, 3635,3648, 3654,3713, 3714,3716, 3716,3719, 3720,3722, 3722,3725, 3725,3732, 3735,3737, 3743,\n\t\t3745, 3747,3749, 3749,3751, 3751,3754, 3755,3757, 3760,3762, 3763,3773, 3773,3776, 3780,3782, 3782,3804, 3807,3840, 3840,3904, 3911,3913, 3948,3976, 3980,4096, 4138,4159, 4159,4176, 4181,4186, 4189,4193, 4193,4197, 4198,4206, 4208,4213, 4225,4238, 4238,4256, 4293,4295, 4295,4301, 4301,4304, 4346,4348, 4680,\n\t\t4682, 4685,4688, 4694,4696, 4696,4698, 4701,4704, 4744,4746, 4749,4752, 4784,4786, 4789,4792, 4798,4800, 4800,4802, 4805,4808, 4822,4824, 4880,4882, 4885,4888, 4954,4992, 5007,5024, 5108,5121, 5740,5743, 5759,5761, 5786,5792, 5866,5870, 5872,5888, 5900,5902, 5905,5920, 5937,5952, 5969,5984, 5996,5998, 6000,\n\t\t6016, 6067,6103, 6103,6108, 6108,6176, 6263,6272, 6312,6314, 6314,6320, 6389,6400, 6428,6480, 6509,6512, 6516,6528, 6571,6593, 6599,6656, 6678,6688, 6740,6823, 6823,6917, 6963,6981, 6987,7043, 7072,7086, 7087,7098, 7141,7168, 7203,7245, 7247,7258, 7293,7401, 7404,7406, 7409,7413, 7414,7424, 7615,7680, 7957,\n\t\t7960, 7965,7968, 8005,8008, 8013,8016, 8023,8025, 8025,8027, 8027,8029, 8029,8031, 8061,8064, 8116,8118, 8124,8126, 8126,8130, 8132,8134, 8140,8144, 8147,8150, 8155,8160, 8172,8178, 8180,8182, 8188,8305, 8305,8319, 8319,8336, 8348,8450, 8450,8455, 8455,8458, 8467,8469, 8469,8473, 8477,84";
var v27235 = v27236 + "84, 8484,8486, 8486,\n\t\t8488, 8488,8490, 8493,8495, 8505,8508, 8511,8517, 8521,8526, 8526,8544, 8584,11264, 11310,11312, 11358,11360, 11492,11499, 11502,11506, 11507,11520, 11557,11559, 11559,11565, 11565,11568, 11623,11631, 11631,11648, 11670,11680, 11686,11688, 11694,11696, 11702,11704, 11710,11712, 11718,11720, 11726,\n\t\t11728, 11734,11736, 11742,11823, 11823,12293, 12295,12321, 12329,12337, 12341,12344, 12348,12353, 12438,12445, 12447,12449, 12538,12540, 12543,12549, 12589,12593, 12686,12704, 12730,12784, 12799,13312, 13312,19893, 19893,19968, 19968,40908, 40908,40960, 42124,42192, 42237,42240, 42508,42512, 42527,\n\t\t42538, 42539,42560, 42606,42623, 42647,42656, 42735,42775, 42783,42786, 42888,42891, 42894,42896, 42899,42912, 42922,43000, 43009,43011, 43013,43015, 43018,43020, 43042,43072, 43123,43138, 43187,43250, 43255,43259, 43259,43274, 43301,43312, 43334,43360, 43388,43396, 43442,43471, 43471,43520, 43560,\n\t\t43584, 43586,43588, 43595,43616, 43638,43642, 43642,43648, 43695,43697, 43697,43701, 43702,43705, 43709,43712, 43712,43714, 43714,43739, 43741,43744, 43754,43762, 43764,43777, 43782,43785, 43790,43793, 43798,43808, 43814,43816, 43822,43968, 44002,44032, 44032,55203, 55203,55216, 55238,55243, 55291,\n\t\t63744, 64109,64112, 64217,64256, 64262,64275, 64279,64285, 64285,64287, 64296,64298, 64310,64312, 64316,64318, 64318,64320, 64321,64323, 64324,64326, 64433,64467, 64829,64848, 64911,64914, 64967,65008, 65019,65136, 65140,65142, 65276,65313, 65338,65345, 65370,65382, 65470,65474, 65479,65482, 65487,\n\t\t65490, 65495,65498, 65500\n\t];\n\n\tvar unicodeES5IdCont = [\n\t\t768, 879,1155, 1159,1425, 1469,1471, 1471,1473, 1474,1476, 1477,1479, 1479,1552, 1562,1611, 1641,1648, 1648,1750, 1756,1759, 1764,1767, 1768,1770, 1773,1776, 1785,1809, 1809,1840, 1866,1958, 1968,1984, 1993,2027, 2035,2070, 2073,2075, 2083,2085, 2087,2089, 2093,2137, 2139,2276, 2302,2304, 2307,2362, 2364,\n\t\t2366, 2383,2385, 2391,2402, 2403,2406, 2415,2433, 2435,2492, 2492,2494, 2500,2503, 2504,2507, 2509,2519, 2519,2530, 2531,2534, 2543,2561, 2563,2620, 2620,2622, 2626,2631, 2632,2635, 2637,2641, 2641,2662, 2673,2677, 2677,2689, 2691,2748, 2748,2750, 2757,2759, 2761,2763, 2765,2786, 2787,2790, 2799,2817, 2819,\n\t\t2876, 2876,2878, 2884,2887, 2888,2891, 2893,2902, 2903,2914, 2915,2918, 2927,2946, 2946,3006, 3010,3014, 3016,3018, 3021,3031, 3031,3046, 3055,3073, 3075,3134, 3140,3142, 3144,3146, 3149,3157, 3158,3170, 3171,3174, 3183,3202, 3203,3260, 3260,3262, 3268,3270, 3272,3274, 3277,3285, 3286,3298, 3299,3302, 3311,\n\t\t3330, 3331,3390, 3396,3398, 3400,3402, 3405,3415, 3415,3426, 3427,3430, 3439,3458, 3459,3530, 3530,3535, 3540,3542, 3542,3544, 3551,3570, 3571,3633, 3633,3636, 3642,3655, 3662,3664, 3673,3761, 3761,3764, 3769,3771, 3772,3784, 3789,3792, 3801,3864, 3865,3872, 3881,3893, 3893,3895, 3895,3897, 3897,3902, 3903,\n\t\t3953, 3972,3974, 3975,3981, 3991,3993, 4028,4038, 4038,4139, 4158,4160, 4169,4182, 4185,4190, 4192,4194, 4196,4199, 4205,4209, 4212,4226, 4237,4239, 4253,4957, 4959,5906, 5908,5938, 5940,5970, 5971,6002, 6003,6068, 6099,6109, 6109,6112, 6121,6155, 6157,6160, 6169,6313, 6313,6432, 6443,6448, 6459,6470, 6479,\n\t\t6576, 6592,6600, 6601,6608, 6617,6679, 6683,6741, 6750,6752, 6780,6783, 6793,6800, 6809,6912, 6916,6964, 6980,6992, 7001,7019, 7027,7040, 7042,7073, 7085,7088, 7097,7142, 7155,7204, 7223,7232, 7241,7248, 7257,7376, 7378,7380, 7400,7405, 7405,7410, 7412,7616, 7654,7676, 7679,8204, 8205,8255, 8256,8276, 8276,\n\t\t8400, 8412,8417, 8417,8421, 8432,11503, 11505,11647, 11647,11744, 11775,12330, 12335,12441, 12442,42528, 42537,42607, 42607,42612, 42621,42655, 42655,42736, 42737,43010, 43010,43014, 43014,43019, 43019,43043, 43047,43136, 43137,43188, 43204,43216, 43225,43232, 43249,43264, 43273,43302, 43309,43335, 43347,\n\t\t43392, 43395,43443, 43456,43472, 43481,43561, 43574,43587, 43587,43596, 43597,43600, 43609,43643, 43643,43696, 43696,43698, 43700,43703, 43704,43710, 43711,43713, 43713,43755, 43759,43765, 43766,44003, 44010,44012, 44013,44016, 44025,64286, 64286,65024, 65039,65056, 65062,65075, 65076,65101, 65103,\n\t\t65296, 65305,65343, 65343\n\t];\n\n    export function LexLookUpUnicodeMap(code: number, map: number[]) : bool {\n        // Perform binary search in one of the unicode range maps\n        var lo: number = 0;\n        var hi: number = map.length;\n        var mid: number;\n\n        while (lo + 1 < hi)\n        {\n            mid = lo + (hi - lo) / 2;\n            // mid has to be even to catch a range's beginning\n            mid -= mid % 2;\n            if (map[mid] <= code && code <= map[mid + 1])\n                return true;\n            if (code < map[mid])\n                hi = mid;\n            else\n                lo = mid + 2;\n        }\n        return false;\n    }\n\n    export function LexIsUnicodeDigit(code: number): bool {\n        if (codeGenTarget == CodeGenTarget.ES3) {\n            return LexLookUpUnicodeMap(code, unicodeES3IdCont);\n        } else {\n            return LexLookUpUnicodeMap(code, unicodeES5IdCont);\n        }\n    ";
var v27234 = v27235 + "}\n\n    export function LexIsUnicodeIdStart(code: number): bool {\n        if (codeGenTarget == CodeGenTarget.ES3) {\n            return LexLookUpUnicodeMap(code, unicodeES3IdStart);\n        } else {\n            return LexLookUpUnicodeMap(code, unicodeES5IdStart);\n        }\n    }\n    export function LexInitialize() {\n        initializeStaticTokens();\n        autoToken[LexCodeLPR] = staticTokens[TokenID.OpenParen];\n        autoToken[LexCodeRPR] = staticTokens[TokenID.CloseParen];\n        autoToken[LexCodeCMA] = staticTokens[TokenID.Comma];\n        autoToken[LexCodeSMC] = staticTokens[TokenID.Semicolon];\n        autoToken[LexCodeLBR] = staticTokens[TokenID.OpenBracket];\n        autoToken[LexCodeRBR] = staticTokens[TokenID.CloseBracket];\n        autoToken[LexCodeTIL] = staticTokens[TokenID.Tilde];\n        autoToken[LexCodeQUE] = staticTokens[TokenID.Question];\n        autoToken[LexCodeLC] = staticTokens[TokenID.OpenBrace];\n        autoToken[LexCodeRC] = staticTokens[TokenID.CloseBrace];\n        autoToken[LexCodeCOL] = staticTokens[TokenID.Colon];\n        LexKeywordTable = new StringHashTable();\n        for (var i in (<any>TokenID)._map) {\n            if ((<number><any>i) <= TokenID.LimKeyword) {\n                LexKeywordTable.add((<any>TokenID)._map[i].toLowerCase(), i);\n            }\n        }\n        for (var j = 0; j < LexCodeASCIIChars; j++) {\n            if (LexIsIdentifierStartChar(j)) {\n                lexIdStartTable[j] = true;\n            }\n            else {\n                lexIdStartTable[j] = false;\n            }\n        }\n    }\n\n    export function LexAdjustIndent(code, indentAmt) {\n        if ((code == LexCodeLBR) || (code == LexCodeLC) || (code == LexCodeLPR)) {\n            return indentAmt + 1;\n        }\n        else if ((code == LexCodeRBR) || (code == LexCodeRC) || (code == LexCodeRPR)) {\n            return indentAmt - 1;\n        }\n        else return indentAmt;\n    }\n\n    export function LexIsIdentifierStartChar(code): bool {\n        return (((code >= 97) && (code <= 122)) ||\n                ((code >= 65) && (code <= 90)) ||\n                (code == LexCodeDollar) ||\n                (code == LexCodeUnderscore));\n    }\n\n    export function LexIsDigit(code): bool {\n        return ((code >= 48) && (code <= 57));\n    }\n\n    export function LexIsIdentifierChar(code:number) {\n        return lexIdStartTable[code] || LexIsDigit(code);\n    }\n\n    export function LexMatchingOpen(code) {\n        if (code == LexCodeRBR)\n            return LexCodeLBR;\n        else if (code == LexCodeRC)\n            return LexCodeLC;\n        else if (code == LexCodeRPR)\n            return LexCodeLPR;\n        else return 0;\n    }\n\n    export enum NumberScanState {\n        Start,\n        InFraction,\n        InEmptyFraction,\n        InExponent\n    }\n\n    export enum LexState {\n        Start,\n        InMultilineComment,\n        InMultilineSingleQuoteString,\n        InMultilineDoubleQuoteString,\n    }\n\n    export enum LexMode {\n        Line,\n        File,\n    }\n\n    export enum CommentStyle {\n        Line,\n        Block\n    }\n\n    // Represent a piece of source code which can be read in multiple segments\n    export interface ISourceText {\n        getText(start: number, end: number): string;\n        getLength(): number;\n    }\n\n    // Implementation on top of a contiguous string\n    export class StringSourceText implements ISourceText {\n        constructor (public text: string) {\n        }\n\n        public getText(start: number, end: number): string {\n            return this.text.substring(start, end);\n        }\n\n        public getLength(): number {\n            return this.text.length;\n        }\n    }\n\n    export class SourceTextSegment implements ISourceTextSegment {\n        constructor (public segmentStart: number,\n                    public segmentEnd: number,\n                    public segment: string) {\n        }\n\n        charCodeAt(index: number): number {\n            return this.segment.charCodeAt(index - this.segmentStart);\n        }\n\n        substring(start: number, end: number): string {\n            return this.segment.substring(start - this.segmentStart, end - this.segmentStart);\n        }\n    }\n\n    export class AggerateSourceTextSegment implements ISourceTextSegment {\n\n        constructor (public seg1: SourceTextSegment, public seg2: SourceTextSegment) { }\n\n        public charCodeAt(index: number): number {\n            if (this.seg1.segmentStart <= index && index < this.seg1.segmentEnd)\n                return this.seg1.segment.charCodeAt(index - this.seg1.segmentStart);\n\n            return this.seg2.segment.charCodeAt(index - this.seg2.segmentStart);\n        }\n\n        public substring(start: number, end: number): string {\n            if (this.seg1.segmentStart <= start && end <= this.seg1.segmentEnd)\n                return this.seg1.segment.substring(start - this.seg1.segmentStart, end - this.seg1.segmentStart);\n\n            return this.seg2.segment.substring(start - this.seg2.segmentStart) + this.seg1.segment.substri";
var v27233 = v27234 + 'ng(0, end - this.seg1.segmentStart);\n        }\n    }\n\n    export interface ISourceTextSegment {\n        charCodeAt(index: number): number;\n        substring(start: number, end: number): string;\n    }\n\n    export class ScannerTextStream {\n        static emptySegment = new SourceTextSegment(0, 0, "");\n        public agg: AggerateSourceTextSegment;\n        public len: number;\n\n        constructor (public sourceText: ISourceText) {\n            this.agg = new AggerateSourceTextSegment(ScannerTextStream.emptySegment, ScannerTextStream.emptySegment);\n            this.len = this.sourceText.getLength();\n        }\n\n        public max(a: number, b: number): number {\n            return a >= b ? a : b;\n        }\n\n        public min(a: number, b: number): number {\n            return a <= b ? a : b;\n        }\n\n        public fetchSegment(start: number, end: number): ISourceTextSegment {\n            // Common case\n            if (this.agg.seg1.segmentStart <= start && end <= this.agg.seg1.segmentEnd)\n                return this.agg.seg1;\n\n            // Common overlap case\n            if (this.agg.seg2.segmentStart <= start && end <= this.agg.seg1.segmentEnd)\n                return this.agg;\n\n            // if overlapping outside of fetched segment(s), fetch a new segment\n            var prev = this.agg.seg1;\n\n            var s = prev.segmentEnd;\n            var e = max(s + 512, end); // ensure we move forward at least 512 characters or "end"\n            e = min(e, this.len);    // but don\'t go past the end of the source text\n\n            var src = this.sourceText.getText(s, e);\n            var newSeg = new SourceTextSegment(s, e, src);\n            this.agg.seg2 = prev;\n            this.agg.seg1 = newSeg;\n            return this.agg;\n        }\n\n        public charCodeAt(index: number): number {\n            return this.fetchSegment(index, index + 1).charCodeAt(index);\n        }\n\n        public substring(start: number, end: number) {\n            return this.fetchSegment(start, end).substring(start, end);\n        }\n    }\n\n    export interface IScanner {\n        startPos: number;\n        pos: number;\n        scan(): Token;\n        previousToken(): Token;\n        prevLine: number;\n        line: number;\n        col: number;\n        leftCurlyCount: number;\n        rightCurlyCount: number;\n        lastTokenLimChar(): number;\n        lastTokenHadNewline(): bool;\n        lexState: number;\n        getComments(): CommentToken[];\n        getCommentsForLine(line: number): CommentToken[];\n        resetComments(): void;\n        lineMap: number[];\n        setSourceText(newSrc: ISourceText, textMode: number): void;\n        setErrorHandler(reportError: (message: string) => void): void;\n        seenUnicodeChar: bool;\n        seenUnicodeCharInComment: bool;\n        getLookAheadToken(): Token;\n    }\n\n    export class SavedTokens implements IScanner {\n        public prevToken: Token = null;\n        public curSavedToken: SavedToken = null;\n        public prevSavedToken: SavedToken = null;\n        public currentTokenIndex: number;\n        public currentTokens: SavedToken[];\n        public tokensByLine: SavedToken[][];\n        public lexStateByLine: LexState[];\n        private prevToken: SavedToken = null;\n        public previousToken(): Token { return this.prevToken; }\n        public currentToken = 0;\n        public tokens = new SavedToken[];\n        public startPos: number;\n        public pos: number;\n        public seenUnicodeChar: bool = false;\n        seenUnicodeCharInComment: bool = false;\n\n        public close() {\n            this.currentToken = 0;\n        }\n\n        public addToken(tok: Token, scanner: IScanner) {\n            this.tokens[this.currentToken++] = new SavedToken(tok, scanner.startPos, scanner.pos);\n        }\n\n        public scan(): Token {\n            // TODO: curly count\n            this.startLine = this.line;\n            this.startPos = this.col;\n            if (this.currentTokenIndex == this.currentTokens.length) {\n                if (this.line < this.lineMap.length) {\n                    this.line++;\n                    this.col = 0;\n                    this.currentTokenIndex = 0;\n                    this.currentTokens = this.tokensByLine[this.line];\n                }\n                else {\n                    return staticTokens[TokenID.EndOfFile];\n                }\n            }\n            if (this.currentTokenIndex < this.currentTokens.length) {\n                this.prevToken = this.curSavedToken.tok;\n                this.prevSavedToken = this.curSavedToken;\n                this.curSavedToken = this.currentTokens[this.currentTokenIndex++];\n                var curToken = this.curSavedToken.tok;\n                this.pos = this.curSavedToken.limChar;\n                this.col += (this.curSavedToken.limChar - this.curSavedToken.minChar);\n                this.startPos = this.curSavedToken.minChar;\n                this.prevLine = this.line;\n                return curToken;\n            }\n            else {\n                retur';
var v27232 = v27233 + 'n staticTokens[TokenID.EndOfFile];\n            }\n        }\n        public startLine: number;\n        public prevLine = 1;\n        public line = 1;\n        public col = 0;\n        public leftCurlyCount: number;\n        public rightCurlyCount: number;\n\n        public syncToTok(offset: number): number {\n            this.line = getLineNumberFromPosition(this.lineMap, offset);\n            this.currentTokenIndex = 0;\n            var tmpCol = offset - this.lineMap[this.line];\n            while ((this.lexStateByLine[this.line] == LexState.InMultilineComment) && (this.line > 0)) {\n                this.line--;\n                tmpCol = 0;\n            }\n            var lenMin1 = this.lineMap.length - 1;\n            this.currentTokens = this.tokensByLine[this.line];\n            while ((this.currentTokens.length == 0) && (this.line < lenMin1)) {\n                this.line++;\n                this.currentTokens = this.tokensByLine[this.line];\n                tmpCol = 0;\n            }\n            if (this.line <= lenMin1) {\n                while ((this.currentTokenIndex < this.currentTokens.length) &&\n                       (tmpCol > this.currentTokens[this.currentTokenIndex].limChar)) {\n                    this.currentTokenIndex++;\n                }\n                if (this.currentTokenIndex < this.currentTokens.length) {\n                    this.col = this.currentTokens[this.currentTokenIndex].minChar;\n                    return this.col + this.lineMap[this.line];\n                }\n            }\n            return -1;\n        }\n\n        public lastTokenLimChar(): number {\n            if (this.prevSavedToken !== null) {\n                return this.prevSavedToken.limChar;\n            }\n            else {\n                return 0;\n            }\n        }\n\n        public lastTokenHadNewline(): bool {\n            return this.prevLine != this.startLine;\n        }\n\n        public lexState = LexState.Start;\n\n        public commentStack: CommentToken[] = new CommentToken[];\n\n        public pushComment(comment: CommentToken) {\n            this.commentStack.push(comment);\n        }\n\n        public getComments() {\n            var stack = this.commentStack;\n            this.commentStack = [];\n            return stack;\n        }\n\n        public getCommentsForLine(line: number) {\n            var comments: CommentToken[] = null;\n            while ((this.commentStack.length > 0) && (this.commentStack[0].line == line)) {\n                if (comments == null) {\n                    comments = [this.commentStack.shift()];\n                }\n                else {\n                    comments = comments.concat([this.commentStack.shift()]);\n                }\n\n            }\n            return comments;\n        }\n\n        public resetComments() {\n            this.commentStack = [];\n        }\n\n        public lineMap: number[] = [];\n        public setSourceText(newSrc: ISourceText, textMode: number) {\n        }\n        public setErrorHandler(reportError: (message: string) => void ) { \n        }\n        public getLookAheadToken(): Token {\n            throw new Error("Invalid operation.");\n        }\n    }\n\n    export class Scanner implements IScanner {\n        // REVIEW: When adding new variables make sure to handle storing them in getLookAheadToken. \n        //         The method works by storing the state before scanning and restoring it later on, missing a member variable \n        //         could result in an inconsistent state.\n        public prevLine = 1;\n        public line = 1;\n        public col = 0;\n        public pos = 0;\n        public startPos = 0;\n        public startCol: number;\n        public startLine: number;\n        public src: string;\n        public len = 0;\n        public lineMap: number[] = [];\n        \n        public ch = LexEOF;\n        public lexState = LexState.Start;\n        public mode = LexMode.File;\n        public scanComments: bool = true;\n        public interveningWhitespace = false; // Was there a whitespace token between the last token and the current one?\n        private interveningWhitespacePos = 0; //  If yes, this contains the start position of the whitespace\n        public leftCurlyCount = 0;\n        public rightCurlyCount = 0;\n        public commentStack: CommentToken[] = new CommentToken[];\n        public saveScan: SavedTokens = null;\n        public seenUnicodeChar: bool = false;\n        seenUnicodeCharInComment: bool = false;\n\n        private reportError: (message: string) =>void;\n\n        constructor () {\n            this.startCol = this.col;\n            this.startLine = this.line;            \n            this.lineMap[1] = 0;\n            \n            if (!LexKeywordTable) {\n                LexInitialize();\n            }            \n        }\n\n        private prevTok = staticTokens[TokenID.EndOfFile];\n        public previousToken() { return this.prevTok; }\n\n        public setSourceText(newSrc: ISourceText, textMode: number) {\n            this.mode = textMode;\n            this.scanComments = (this.mode === LexMo';
var v27231 = v27232 + "de.Line);\n            this.pos = 0;\n            this.interveningWhitespacePos = 0;\n            this.startPos = 0;\n            this.line = 1;\n            this.col = 0;\n            this.startCol = this.col;\n            this.startLine = this.line;\n            this.len = 0;\n            this.src = newSrc.getText(0, newSrc.getLength());\n            this.len = this.src.length;\n            this.lineMap = [];\n            this.lineMap[1] = 0;\n            this.commentStack = [];\n            this.leftCurlyCount = 0;\n            this.rightCurlyCount = 0;\n            this.seenUnicodeChar = false;\n            this.seenUnicodeCharInComment = false;\n        }\n\n        public setErrorHandler(reportError: (message: string) => void ) { \n            this.reportError = reportError;\n        }\n\n        public setSaveScan(savedTokens: SavedTokens) {\n            this.saveScan = savedTokens;\n        }\n\n        public setText(newSrc: string, textMode: number) {\n            this.setSourceText(new StringSourceText(newSrc), textMode);\n        }\n\n        public setScanComments(value: bool) {\n            this.scanComments = value;\n        }\n\n        public getLexState(): number {\n            return this.lexState;\n        }\n\n        public tokenStart() {\n            this.startPos = this.pos;\n            this.startLine = this.line;\n            this.startCol = this.col;\n            this.interveningWhitespace = false;\n        }\n\n        public peekChar(): number {\n            if (this.pos < this.len) {\n                return this.src.charCodeAt(this.pos);\n            }\n            else {\n                return LexEOF;\n            }\n        }\n\n        public peekCharAt(index: number): number {\n            if (index < this.len) {\n                return this.src.charCodeAt(index);\n            }\n            else {\n                return LexEOF;\n            }\n        }\n\n        public IsHexDigit(c: number) {\n            return ((c >= LexCode_0) && (c <= LexCode_9)) || ((c >= LexCode_A) && (c <= LexCode_F)) ||\n                ((c >= LexCode_a) && (c <= LexCode_f));\n        }\n\n        public IsOctalDigit(c: number) {\n            return ((c >= LexCode_0) && (c <= LexCode_7)) ||\n                ((c >= LexCode_a) && (c <= LexCode_f));\n        }\n\n        public scanHexDigits(): Token {\n            var atLeastOneDigit = false;\n            for (; ;) {\n                if (this.IsHexDigit(this.ch)) {\n                    this.nextChar();\n                    atLeastOneDigit = true;\n                }\n                else {\n                    if (atLeastOneDigit) {\n                        return new NumberLiteralToken(parseInt(this.src.substring(this.startPos, this.pos)));\n                    }\n                    else {\n                        return null;\n                    }\n                }\n            }\n\n        }\n\n        public scanOctalDigits(): Token {\n            var atLeastOneDigit = false;\n            for (; ;) {\n                if (this.IsOctalDigit(this.ch)) {\n                    this.nextChar();\n                    atLeastOneDigit = true;\n                }\n                else {\n                    if (atLeastOneDigit) {\n                        return new NumberLiteralToken(parseInt(this.src.substring(this.startPos, this.pos)));\n                    }\n                    else {\n                        return null;\n                    }\n                }\n            }\n\n        }\n\n        public scanDecimalNumber(state: number): Token {\n            var atLeastOneDigit = false;\n            var svPos = this.pos;\n            var svCol = this.col;\n            for (; ;) {\n                if (LexIsDigit(this.ch)) {\n                    atLeastOneDigit = true;\n                    if (this.ch != LexCode_0 && state == NumberScanState.InEmptyFraction) {\n                        state = NumberScanState.InFraction;\n                    }\n                    this.nextChar();\n                }\n                else if (this.ch == LexCodeDOT) {\n                    if (state == NumberScanState.Start) {\n                        // DecimalDigit* .\n                        this.nextChar();\n                        state = NumberScanState.InEmptyFraction;\n                    }\n                    else {\n                        // dot not part of number\n                        if (atLeastOneDigit) {\n                            // DecimalDigit* . DecimalDigit+\n                            return new NumberLiteralToken(parseFloat(this.src.substring(this.startPos, this.pos)), state == NumberScanState.InEmptyFraction);\n                        }\n                        else {\n                            this.pos = svPos;\n                            this.col = svCol;\n                            return null;\n                        }\n                    }\n                } else if ((this.ch == LexCode_e) || (this.ch == LexCode_E)) {\n                    if (state == NumberScanState.Start) {\n                        if (atLeastOneDigit) {\n                            // DecimalDigit+ (.";
var v27230 = v27231 + " DecimalDigit*) [eE] [+-]DecimalDigit+\n                            atLeastOneDigit = false;\n                            this.nextChar();\n                            state = NumberScanState.InExponent;\n                        }\n                        else {\n                            this.pos = svPos;\n                            this.col = svCol;\n                            return null;\n                        }\n                    }\n                    else if (state == NumberScanState.InFraction || state == NumberScanState.InEmptyFraction) {\n                        // DecimalDigit+ . DecimalDigit* [eE]\n                        this.nextChar();\n                        state = NumberScanState.InExponent;\n                        atLeastOneDigit = false;\n                    }\n                    else {\n                        // DecimalDigit+ . DecimalDigit* [eE] DecimalDigit+\n                        if (atLeastOneDigit) {\n                            return new NumberLiteralToken(parseFloat(this.src.substring(this.startPos, this.pos)));\n                        }\n                        else {\n                            this.pos = svPos;\n                            this.col = svCol;\n                            return null;\n                        }\n                    }\n                }\n                else if ((this.ch == LexCodePLS) || (this.ch == LexCodeMIN)) {\n                    if (state == NumberScanState.InExponent) {\n                        if (!atLeastOneDigit) {\n                            this.nextChar();\n                        }\n                        else {\n                            this.pos = svPos;\n                            this.col = svCol;\n                            return null;\n                        }\n                    }\n                    else if (state == NumberScanState.InEmptyFraction || state == NumberScanState.InFraction) {\n                        // This case will not generate bad javascript if we miss the fractional part, but we just want to be consistent with the dot case\n                        return new NumberLiteralToken(parseFloat(this.src.substring(this.startPos, this.pos)), state == NumberScanState.InEmptyFraction);\n                    }\n                    else {\n                        if (!atLeastOneDigit) {\n                            this.pos = svPos;\n                            this.col = svCol;\n                            return null;\n                        }\n                        else {\n                            return new NumberLiteralToken(parseFloat(this.src.substring(this.startPos, this.pos)));\n                        }\n                    }\n                }\n                else {\n                    if (!atLeastOneDigit) {\n                        this.pos = svPos;\n                        this.col = svCol;\n                        return null;\n                    }\n                    else {\n                        return new NumberLiteralToken(parseFloat(this.src.substring(this.startPos, this.pos)), state == NumberScanState.InEmptyFraction);\n                    }\n                }\n            }\n        }\n\n        // 0 [xX] hexDigits\n        // 0 octalDigits\n        // 0 [89] decimalDigits\n        // decimalDigits? fraction? exponent?\n\n        public scanNumber(): Token {\n            if (this.peekChar() == LexCode_0) {\n                switch (this.peekCharAt(this.pos + 1)) {\n                    case LexCode_x:\n                    case LexCode_X:\n                        // Hex\n                        this.advanceChar(2);\n                        return this.scanHexDigits();\n                    case LexCode_8:\n                    case LexCode_9:\n                    case LexCodeDOT:\n                        return this.scanDecimalNumber(NumberScanState.Start);\n                    default:\n                        // Octal\n                        return this.scanOctalDigits();\n                }\n            }\n            else {\n                return this.scanDecimalNumber(NumberScanState.Start);\n            }\n        }\n\n        public scanFraction(): Token {\n            return this.scanDecimalNumber(NumberScanState.InFraction);\n        }\n\n        public newLine() {\n            this.col = 0;\n            if (this.mode == LexMode.File) {\n                this.line++;\n                this.lineMap[this.line] = this.pos + 1;\n            }\n        }\n\n        public finishMultilineComment(): bool {\n            var ch2: number;\n            this.lexState = LexState.InMultilineComment;\n            while (this.pos < this.len) {\n                if (this.ch == LexCodeMUL) {\n                    ch2 = this.peekCharAt(this.pos + 1);\n                    if (ch2 == LexCodeSLH) {\n                        this.advanceChar(2);\n                        if (this.mode == LexMode.File) {\n                            this.tokenStart();\n                        }\n                        this.lexState = LexState.Start;\n                        return true;\n                    }\n        ";
var v27229 = v27230 + "        }\n                else if (this.ch == LexCodeNWL) {\n                    this.newLine();\n                    if (this.mode == LexMode.Line) {\n                        this.nextChar();\n                        return false;\n                    }\n                } \n                else if (this.ch >= LexCodeASCIIChars) { \n                    this.seenUnicodeCharInComment = true;\n                }\n                this.nextChar();\n            }\n            return false;\n        }\n\n        public pushComment(comment: CommentToken) {\n            this.commentStack.push(comment);\n        }\n\n        public getComments() {\n            var stack = this.commentStack;\n            this.commentStack = [];\n            return stack;\n        }\n\n        public getCommentsForLine(line: number) {\n            var comments: CommentToken[] = null;\n            while ((this.commentStack.length > 0) && (this.commentStack[0].line == line)) {\n                if (comments == null) {\n                    comments = [this.commentStack.shift()];\n                }\n                else {\n                    comments = comments.concat([this.commentStack.shift()]);\n                }\n\n            }\n            return comments;\n        }\n\n        public resetComments() {\n            this.commentStack = [];\n        }\n\n        public endsLine(c: number) {\n            return (c == LexCodeNWL) || (c == LexCodeRET) || (c == LexCodeLS) || (c == LexCodePS);\n        }\n\n        public finishSinglelineComment() {\n            while (this.pos < this.len) {\n                if (this.endsLine(this.ch))\n                    break;\n                if (this.ch >= LexCodeASCIIChars) { \n                    this.seenUnicodeCharInComment = true;\n                }\n                this.nextChar();\n            }\n\n            if (this.mode == LexMode.File) {\n                this.tokenStart();\n            }\n        }\n\n        public tokenText(): string {\n            return this.src.substring(this.startPos, this.pos);\n        }\n\n        public findClosingSLH() {\n            var index = this.pos;\n            var ch2 = this.src.charCodeAt(index);\n            var prevCh = 0;\n            var liveEsc = false;\n            while (!this.endsLine(ch2) && (index < this.len)) {\n                if ((ch2 == LexCodeSLH) && (!liveEsc)) {\n                    return index;\n                }\n                prevCh = ch2;\n                index++;\n                if (liveEsc) {\n                    liveEsc = false;\n                }\n                else {\n                    liveEsc = (prevCh == LexCodeBSL);\n                }\n\n                ch2 = this.src.charCodeAt(index);\n            }\n            return -1;\n        }\n\n        public speculateRegex(): Token {\n            if (noRegexTable[this.prevTok.tokenId] != undefined) {\n                return null;\n            }\n            var svPos = this.pos;\n            var svCol = this.col;\n            // first char is '/' and has been skipped\n            var index = this.findClosingSLH();\n            if (index > 0) {\n                // found closing /\n                var pattern = this.src.substring(svPos, index);\n                var flags = \"\";\n                this.pos = index + 1;\n                this.ch = this.peekChar();\n                var flagsStart = this.pos;\n                // TODO: check for duplicate flags\n                while ((this.ch == LexCode_i) || (this.ch == LexCode_g) || (this.ch == LexCode_m)) {\n                    this.nextChar();\n                }\n                if ((this.pos - flagsStart) > 3) {\n                    return null;\n                }\n                else {\n                    flags = this.src.substring(flagsStart, this.pos);\n                }\n                var regex = undefined;\n                try {\n                    regex = new RegExp(pattern, flags);\n                }\n                catch (regexException) {\n                }\n                if (regex) {\n                    // no line boundary in regex string\n                    this.col = svCol + (this.pos - this.startPos);\n                    return new RegularExpressionLiteralToken(regex);\n                }\n            }\n            this.pos = svPos;\n            this.col = svCol;\n            return null;\n        }\n\n        public lastTokenHadNewline() {\n            return this.prevLine != this.startLine;\n        }\n\n        public lastTokenLimChar() {\n            return this.interveningWhitespace ? this.interveningWhitespacePos : this.startPos;\n        }\n\n        // use only when known not to skip line terminators\n        public advanceChar(amt: number) {\n            this.pos += amt;\n            this.col += amt;\n            this.ch = this.peekChar();\n        }\n\n        public nextChar() {\n            this.pos++;\n            this.col++;\n            this.ch = this.peekChar();\n        }\n\n        public getLookAheadToken(): Token {\n            // REVIEW: This method is only used for parsing varargs in lambda expressions. If this functionality is neede";
var v27228 = v27229 + 'd for more common cases, \n            //         it needs to be designed. \n            //         Look-ahead token needs to be integrated in the scanner design to allow for an efficient lookup.\n\n            // Store the scanner state\n            var prevLine = this.prevLine;\n            var line = this.line;\n            var col = this.col;\n            var pos = this.pos;\n            var startPos = this.startPos;\n            var startCol = this.startCol;\n            var startLine = this.startLine;\n            var ch = this.ch;\n            var prevTok = this.prevTok;\n            var lexState = this.lexState;\n            var interveningWhitespace = this.interveningWhitespace;\n            var interveningWhitespacePos = this.interveningWhitespacePos;\n            var leftCurlyCount = this.leftCurlyCount;\n            var rightCurlyCount = this.rightCurlyCount;\n            var seenUnicodeChar = this.seenUnicodeChar;\n            var seenUnicodeCharInComment = this.seenUnicodeCharInComment;\n            var commentStackLength = this.commentStack.length;\n\n            var lookAheadToken = this.scan();\n\n            // Restore state\n            this.prevLine = prevLine;\n            this.line = line;\n            this.col = col;\n            this.pos = pos;\n            this.startPos = startPos;\n            this.startCol = startCol;\n            this.startLine = startLine;\n            this.ch = ch;\n            this.prevTok = prevTok;\n            this.lexState = lexState;\n            this.interveningWhitespace = interveningWhitespace;\n            this.interveningWhitespacePos = interveningWhitespacePos;\n            this.leftCurlyCount = leftCurlyCount;\n            this.rightCurlyCount = rightCurlyCount;\n            this.seenUnicodeChar = seenUnicodeChar;\n            this.seenUnicodeCharInComment = seenUnicodeCharInComment;\n            this.commentStack.length = commentStackLength;\n\n            return lookAheadToken;\n        }\n\n        public scanInLine(): Token {\n            if ((this.lexState == LexState.InMultilineComment) && (this.scanComments)) {\n                this.ch = this.peekChar();\n                var commentLine = this.line;\n                this.finishMultilineComment();\n                if (this.startPos < this.pos) {\n                    var commentText = this.src.substring(this.startPos, this.pos);\n                    this.tokenStart();\n                    return new CommentToken(TokenID.Comment, commentText,/*isBlock*/true, this.startPos, commentLine,/*endsLine*/true);\n                }\n                else {\n                    return staticTokens[TokenID.EndOfFile];\n                }\n            } \n            else if (this.lexState == LexState.InMultilineSingleQuoteString && this.pos < this.len) { \n                this.ch = LexCodeAPO;\n                this.lexState = LexState.Start;\n                return this.scanStringConstant();\n            }\n            else if (this.lexState == LexState.InMultilineDoubleQuoteString && this.pos < this.len) { \n                this.ch = LexCodeQUO;\n                this.lexState = LexState.Start;\n                return this.scanStringConstant();\n            }\n            this.prevLine = this.line;\n            var prevTok = this.innerScan();\n\n            // Ingore white spaces\n            if (prevTok.tokenId != TokenID.Whitespace) {\n                this.prevTok = prevTok;\n            }\n            return prevTok;\n        }\n\n        public scan(): Token {\n            this.prevLine = this.line;\n            this.prevTok = this.innerScan();\n            if (this.saveScan) {\n                this.saveScan.addToken(this.prevTok, this);\n            }\n            return this.prevTok;\n        }\n\n        private isValidUnicodeIdentifierChar(): bool {\n            var valid = LexIsUnicodeIdStart(this.ch) || LexIsUnicodeDigit(this.ch);\n            this.seenUnicodeChar = this.seenUnicodeChar || valid;\n            return valid;\n        }\n\n        private scanStringConstant(): Token {\n            var endCode = this.ch;\n            \n            // Skip the first quote\n            this.nextChar();\n            \n            // Accumulate with escape characters\n            scanStringConstantLoop:\n            for (;;) {\n                switch (this.ch) {\n                    case LexEOF:\n                        // Unexpected end of file\n                        this.reportScannerError("Unterminated string constant");\n                        break scanStringConstantLoop;\n\n                    case LexCodeLS:\n                    case LexCodePS:\n                        this.seenUnicodeChar = true;\n                    // Intentional fall through\n                    case LexCodeRET:\n                    case LexCodeNWL:\n                        this.reportScannerError("Unterminated string constant");\n                        break scanStringConstantLoop;\n\n                    case LexCodeAPO:\n                    case LexCodeQUO:\n                        if (this.ch == endCode) {\n                            // Foun';
var v27227 = v27228 + 'd string terminator. Skip past end code.\n                            this.nextChar();\n                            break scanStringConstantLoop;\n                        }\n                        break;\n\n                    case LexCodeBSL:\n                        // Consume the current slash\n                        this.nextChar();\n\n                        switch (this.ch) {\n                            case LexCodeAPO:\n                            case LexCodeQUO:\n                            case LexCodeBSL:\n                                // Valid escape sequences\n                                this.nextChar();\n                                continue scanStringConstantLoop;\n\n                            case LexCodeLS:\n                            case LexCodePS:\n                                this.seenUnicodeChar = true;\n                            // Intentional fall through\n                            case LexCodeRET:\n                            case LexCodeNWL:\n                                // Skip /r in a /r/n sequence\n                                if (this.ch == LexCodeRET && this.peekCharAt(this.pos + 1) == LexCodeNWL) {\n                                    this.nextChar();\n                                }\n\n                                // Consume the new line char\n                                this.nextChar();\n\n                                // Record new line\n                                this.newLine();\n\n                                if (this.mode == LexMode.Line) {\n                                    this.lexState = endCode == LexCodeAPO ? LexState.InMultilineSingleQuoteString : LexState.InMultilineDoubleQuoteString;\n                                    break scanStringConstantLoop;\n                                }\n                                break;\n\n                            case LexCode_x:\n                            case LexCode_u:\n                                var expectedHexDigits = this.ch == LexCode_x ? 2 : 4;\n                                this.nextChar();\n                                for (var i = 0; i < expectedHexDigits; i++) {\n                                    if (this.IsHexDigit(this.ch)) {\n                                        this.nextChar();\n                                    }\n                                    else {\n                                        this.reportScannerError("Invalid Unicode escape sequence");\n                                        break;\n                                    }\n                                }\n                                continue scanStringConstantLoop;\n                        }\n                        break;\n                }\n\n                // Record seeing a Unicode char\n                if (this.ch >= LexCodeASCIIChars) {\n                    this.seenUnicodeChar = true;\n                }\n\n                this.nextChar();\n            }\n\n            return new StringLiteralToken(this.src.substring(this.startPos, this.pos));\n        }\n\n        private scanIdentifier(): Token {\n            var hasEscape = false;\n            var isFirstChar = (this.ch == LexCodeBSL);\n            var hasUnicode: any = false;\n\n            for (; ;) {\n                while (lexIdStartTable[this.ch] || LexIsDigit(this.ch) || \n                      (this.ch >= LexCodeASCIIChars && this.isValidUnicodeIdentifierChar())) {\n                    this.nextChar();\n                }\n                if (this.ch == LexCodeBSL) {\n                    this.nextChar();\n                    if (this.ch == LexCode_u) {\n                        // 4 hex digits\n                        this.nextChar();\n                        for (var h = 0; h < 4 ; h++) {\n                            if (this.IsHexDigit(this.ch)) {\n                                this.nextChar();\n                            }\n                            else {\n                                this.reportScannerError("Invalid Unicode escape sequence");\n                                return staticTokens[TokenID.Error];\n                            }\n                        }\n                        var hexChar = parseInt(this.src.substring(this.pos - 4, this.pos), 16);\n\n                        // Verify is valid ID char \n                        if (lexIdStartTable[hexChar] || (!isFirstChar && LexIsDigit(hexChar)) ||\n                            (hexChar >= LexCodeASCIIChars && (LexIsUnicodeIdStart(hexChar) || (!isFirstChar && LexIsUnicodeDigit(hexChar))))) {\n                        }\n                        else { \n                            this.reportScannerError("Invalid identifier character");\n                            return staticTokens[TokenID.Error];\n                        }\n\n                        hasEscape = true;\n                        isFirstChar = false;\n                        continue;\n                    }\n\n                    this.reportScannerError("Invalid Unicode escape sequence");\n                    return staticTokens[TokenID.Error];\n                }\n        ';
var v27226 = v27227 + '        break;\n            }\n\n            var id: number;\n            var text = this.src.substring(this.startPos, this.pos);\n            if (!hasEscape && (id = LexKeywordTable.lookup(text)) != null) {\n                return staticTokens[id];\n            }\n            else {\n                return new IdentifierToken(text, hasEscape);\n            }\n        }\n\n        public innerScan(): Token {\n            var rtok;\n            this.tokenStart();\n            this.ch = this.peekChar();\n\n            start: while (this.pos < this.len) {\n                 if (lexIdStartTable[this.ch] || this.ch == LexCodeBSL || (this.ch >= LexCodeASCIIChars && LexIsUnicodeIdStart(this.ch))) {\n                    // identifier or keyword\n                    return this.scanIdentifier();\n                }\n                else if (this.ch == LexCodeSpace) {\n                    if (!this.interveningWhitespace) {\n                        this.interveningWhitespacePos = this.pos;\n                    }\n                    do {\n                        this.nextChar();\n                    } while (this.ch == LexCodeSpace);\n                    if (this.mode == LexMode.Line) {\n                        var whitespaceText = this.src.substring(this.startPos, this.pos);\n                        return new WhitespaceToken(TokenID.Whitespace, whitespaceText);\n                    }\n                    else {\n                        this.tokenStart();\n                        this.interveningWhitespace = true;\n                    }\n                }\n                else if (this.ch == LexCodeSLH) {\n                    this.nextChar();\n                    var commentText;\n                    if (this.ch == LexCodeSLH) {\n                        if (!this.interveningWhitespace) {\n                            this.interveningWhitespacePos = this.pos - 1;\n                        }\n                        var commentStartPos = this.pos - 1;\n                        var commentStartLine = this.line;\n                        this.finishSinglelineComment();\n                        var commentText = this.src.substring(commentStartPos, this.pos);\n                        var commentToken = new CommentToken(TokenID.Comment, commentText,/*isBlock*/false, commentStartPos, commentStartLine,/*endsLine*/false);\n                        if (this.scanComments) {\n                            // respect scanner contract: when returning a token, startPos is the start position of the token\n                            this.startPos = commentStartPos;\n                            return commentToken;\n                        }\n                        else {\n                            this.pushComment(commentToken);\n                        }\n\n                        this.interveningWhitespace = true;\n                    }\n                    else if (this.ch == LexCodeMUL) {\n                        if (!this.interveningWhitespace) {\n                            this.interveningWhitespacePos = this.pos - 1;\n                        }\n                        var commentStartPos = this.pos - 1;\n                        var commentStartLine = this.line;\n                        this.nextChar();  // Skip the "*"\n                        this.finishMultilineComment();\n                        var commentText = this.src.substring(commentStartPos, this.pos);\n                        var endsLine = this.endsLine(this.peekChar());\n                        var commentToken = new CommentToken(TokenID.Comment, commentText,/*isBlock*/true, commentStartPos, commentStartLine, endsLine);\n                        if (this.scanComments) {\n                            // respect scanner contract: when returning a token, startPos is the start position of the token\n                            this.startPos = commentStartPos;\n                            return commentToken;\n                        }\n                        else {\n                            this.pushComment(commentToken);\n                        }\n                        this.interveningWhitespace = true;\n                    }\n                    else {\n                        var regexTok = this.speculateRegex();\n                        if (regexTok) {\n                            return regexTok;\n                        }\n                        else {\n                            if (this.peekCharAt(this.pos) == LexCodeEQ) {\n                                this.nextChar();\n                                return staticTokens[TokenID.SlashEquals];\n                            }\n                            else {\n                                return staticTokens[TokenID.Slash];\n                            }\n                        }\n                    }\n                }\n                else if (this.ch == LexCodeSMC) {\n                    this.nextChar();\n                    return staticTokens[TokenID.Semicolon];\n                }\n                else if ((this.ch == LexCodeAPO) || (this.ch == LexCodeQUO)) {\n                    return this.scanSt';
var v27225 = v27226 + "ringConstant();\n                }\n                else if (autoToken[this.ch]) {\n                    var atok = autoToken[this.ch];\n                    if (atok.tokenId == TokenID.OpenBrace) {\n                        this.leftCurlyCount++;\n                    }\n                    else if (atok.tokenId == TokenID.CloseBrace) {\n                        this.rightCurlyCount++;\n                    }\n                    this.nextChar();\n                    return atok;\n                }\n                else if ((this.ch >= LexCode_0) && (this.ch <= LexCode_9)) {\n                    rtok = this.scanNumber();\n                    if (rtok) {\n                        return rtok;\n                    }\n                    else {\n                        this.nextChar();\n                        return staticTokens[TokenID.Error];\n                    }\n                }\n                else switch (this.ch) {\n                    // TAB\n                    case LexCodeTAB:\n                    case LexCodeVTAB:\n                        if (!this.interveningWhitespace) {\n                            this.interveningWhitespacePos = this.pos;\n                        }\n                        if (this.mode == LexMode.Line) {\n                            do {\n                                this.nextChar();\n                            } while ((this.ch == LexCodeSpace) || (this.ch == 9));\n                            var wsText = this.src.substring(this.startPos, this.pos);\n                            return new WhitespaceToken(TokenID.Whitespace, wsText);\n                        }\n                        else {\n                            this.interveningWhitespace = true;\n                        }\n                     // Newlines and BOM\n                    case 0xFF: // UTF16 SEQUENCE\n                    case 0xFE:\n                    case 0xEF:    // UTF8 SEQUENCE\n                    case 0xBB:\n                    case 0xBF:\n                    case LexCodeLS:\n                    case LexCodePS:\n                    case LexCodeNWL:\n                    case LexCodeRET:\n                        if (this.ch == LexCodeNWL) {\n                            this.newLine();\n                            if (this.mode == LexMode.Line) {\n                                return staticTokens[TokenID.EndOfFile];\n                            }\n                        }\n                        if (!this.interveningWhitespace) {\n                            this.interveningWhitespacePos = this.pos;\n                        }\n                        this.nextChar();\n                        this.tokenStart();\n                        this.interveningWhitespace = true;\n                        break;\n                    case LexCodeDOT: {\n                        if (this.peekCharAt(this.pos + 1) == LexCodeDOT) {\n                            if (this.peekCharAt(this.pos + 2) == LexCodeDOT) {\n                                this.advanceChar(3);\n                                return staticTokens[TokenID.DotDotDot];\n                            }\n                            else {\n                                this.nextChar();\n                                return staticTokens[TokenID.Dot];\n                            }\n                        }\n                        else {\n                            this.nextChar();\n                            rtok = this.scanFraction();\n                            if (rtok) {\n                                return rtok;\n                            }\n                            else {\n                                return staticTokens[TokenID.Dot];\n                            }\n                        }\n                        // break;\n                    }\n                    case LexCodeEQ:\n                        if (this.peekCharAt(this.pos + 1) == LexCodeEQ) {\n                            if (this.peekCharAt(this.pos + 2) == LexCodeEQ) {\n                                this.advanceChar(3);\n                                return staticTokens[TokenID.EqualsEqualsEquals];\n                            }\n                            else {\n                                this.advanceChar(2);\n                                return staticTokens[TokenID.EqualsEquals];\n                            }\n                        }\n                        else if (this.peekCharAt(this.pos + 1) == LexCodeGT) {\n                            this.advanceChar(2);\n                            return staticTokens[TokenID.EqualsGreaterThan];\n                        }\n                        else {\n                            this.nextChar();\n                            return staticTokens[TokenID.Equals];\n                        }\n                    // break;\n                    case LexCodeBNG:\n                        if (this.peekCharAt(this.pos + 1) == LexCodeEQ) {\n                            if (this.peekCharAt(this.pos + 2) == LexCodeEQ) {\n                                this.advanceChar(3);\n                                return staticTo";
var v27224 = v27225 + "kens[TokenID.ExclamationEqualsEquals];\n                            }\n                            else {\n                                this.advanceChar(2);\n                                return staticTokens[TokenID.ExclamationEquals];\n                            }\n                        }\n                        else {\n                            this.nextChar();\n                            return staticTokens[TokenID.Exclamation];\n                        }\n                    // break;\n                    case LexCodePLS:\n                        if (this.peekCharAt(this.pos + 1) == LexCodeEQ) {\n                            this.advanceChar(2);\n                            return staticTokens[TokenID.PlusEquals];\n                        }\n                        else if (this.peekCharAt(this.pos + 1) == LexCodePLS) {\n                            this.advanceChar(2);\n                            return staticTokens[TokenID.PlusPlus];\n                        }\n                        else {\n                            this.nextChar();\n                            return staticTokens[TokenID.Plus];\n                        }\n                    // break;\n                    case LexCodeMIN:\n                        if (this.peekCharAt(this.pos + 1) == LexCodeEQ) {\n                            this.advanceChar(2);\n                            return staticTokens[TokenID.MinusEquals];\n                        }\n                        else if (this.peekCharAt(this.pos + 1) == LexCodeMIN) {\n                            this.advanceChar(2);\n                            return staticTokens[TokenID.MinusMinus];\n                        }\n                        else {\n                            this.nextChar();\n                            return staticTokens[TokenID.Minus];\n                        }\n                    // break;\n                    case LexCodeMUL:\n                        if (this.peekCharAt(this.pos + 1) == LexCodeEQ) {\n                            this.advanceChar(2);\n                            return staticTokens[TokenID.AsteriskEquals];\n                        }\n                        else {\n                            this.nextChar();\n                            return staticTokens[TokenID.Asterisk];\n                        }\n                    // break;\n                    case LexCodePCT:\n                        if (this.peekCharAt(this.pos + 1) == LexCodeEQ) {\n                            this.advanceChar(2);\n                            return staticTokens[TokenID.PercentEquals];\n                        }\n                        else {\n                            this.nextChar();\n                            return staticTokens[TokenID.Percent];\n                        }\n                    // break;\n                    case LexCodeLT:\n                        if (this.peekCharAt(this.pos + 1) == LexCodeLT) {\n                            if (this.peekCharAt(this.pos + 2) == LexCodeEQ) {\n                                this.advanceChar(3);\n                                return staticTokens[TokenID.LessThanLessThanEquals];\n                            }\n                            else {\n                                this.advanceChar(2);\n                                return staticTokens[TokenID.LessThanLessThan];\n                            }\n                        }\n                        else if (this.peekCharAt(this.pos + 1) == LexCodeEQ) {\n                            this.advanceChar(2);\n                            return staticTokens[TokenID.LessThanEquals];\n                        }\n                        else {\n                            this.nextChar();\n                            return staticTokens[TokenID.LessThan];\n                        }\n                    //  break;\n                    case LexCodeGT:\n                        if (this.peekCharAt(this.pos + 1) == LexCodeGT) {\n                            if (this.peekCharAt(this.pos + 2) == LexCodeEQ) {\n                                this.advanceChar(3);\n                                return staticTokens[TokenID.GreaterThanGreaterThanEquals];\n                            }\n                            else if (this.peekCharAt(this.pos + 2) == LexCodeGT) {\n                                if (this.peekCharAt(this.pos + 3) == LexCodeEQ) {\n                                    this.advanceChar(4);\n                                    return staticTokens[TokenID.GreaterThanGreaterThanGreaterThanEquals];\n                                }\n                                else {\n                                    this.advanceChar(3);\n                                    return staticTokens[TokenID.GreaterThanGreaterThanGreaterThan];\n                                }\n                            }\n                            else {\n                                this.advanceChar(2);\n                                return staticTokens[TokenID.GreaterThanGreaterThan];\n                            }\n                        }\n                        ";
var v27223 = v27224 + 'else if (this.peekCharAt(this.pos + 1) == LexCodeEQ) {\n                            this.advanceChar(2);\n                            return staticTokens[TokenID.GreaterThanEquals];\n                        }\n                        else {\n                            this.nextChar();\n                            return staticTokens[TokenID.GreaterThan];\n                        }\n                    // break;\n                    case LexCodeXOR:\n                        if (this.peekCharAt(this.pos + 1) == LexCodeEQ) {\n                            this.advanceChar(2);\n                            return staticTokens[TokenID.CaretEquals];\n                        }\n                        else {\n                            this.nextChar();\n                            return staticTokens[TokenID.Caret];\n                        }\n                    //  break;\n                    case LexCodeBAR:\n                        if (this.peekCharAt(this.pos + 1) == LexCodeEQ) {\n                            this.advanceChar(2);\n                            return staticTokens[TokenID.BarEquals];\n                        }\n                        else if (this.peekCharAt(this.pos + 1) == LexCodeBAR) {\n                            this.advanceChar(2);\n                            return staticTokens[TokenID.BarBar];\n                        }\n                        else {\n                            this.nextChar();\n                            return staticTokens[TokenID.Bar];\n                        }\n                    //  break;\n                    case LexCodeAMP:\n                        if (this.peekCharAt(this.pos + 1) == LexCodeEQ) {\n                            this.advanceChar(2);\n                            return staticTokens[TokenID.AmpersandEquals];\n                        }\n                        else if (this.peekCharAt(this.pos + 1) == LexCodeAMP) {\n                            this.advanceChar(2);\n                            return staticTokens[TokenID.AmpersandAmpersand];\n                        }\n                        else {\n                            this.nextChar();\n                            return staticTokens[TokenID.And];\n                        }\n                    //  break;\n                    default:\n                        // Report error\n                        this.reportScannerError("Invalid character");\n                        this.nextChar();\n\n                        continue start;\n                }\n            }\n            return staticTokens[TokenID.EndOfFile];\n        }\n\n        private reportScannerError(message: string) { \n            if (this.reportError) { \n                this.reportError(message);\n            }\n        }\n    }\n\n    // Reseverved words only apply to Identifiers, not IdentifierNames\n    export function convertTokToIDName(tok: Token): bool {\n        return convertTokToIDBase(tok, true, false);\n    }\n\n    export function convertTokToID(tok: Token, strictMode: bool): bool {\n        return convertTokToIDBase(tok, false, strictMode);\n    }\n\n    function convertTokToIDBase(tok: Token, identifierName: bool, strictMode: bool): bool {\n        if (tok.tokenId <= TokenID.LimKeyword) {\n            var tokInfo = lookupToken(tok.tokenId);\n            if (tokInfo != undefined) {\n                var resFlags = Reservation.Javascript | Reservation.JavascriptFuture;\n                if (strictMode) {\n                    resFlags |= Reservation.JavascriptFutureStrict;\n                }\n                if (identifierName || !hasFlag(tokInfo.reservation, resFlags)) {\n                    return true;\n                }\n            }\n            else {\n                return false;\n            }\n        }\n        else {\n            return false;\n        }\n    }\n\n    // Return the (1-based) line number from a character offset using the provided linemap.\n    export function getLineNumberFromPosition(lineMap: number[], position: number): number {\n        if (position === -1)\n            return 0;\n\n        // Binary search\n        var min = 0;\n        var max = lineMap.length - 1;\n        while (min < max) {\n            var med = (min + max) >> 1;\n            if (position < lineMap[med]) {\n                max = med - 1;\n            }\n            else if (position < lineMap[med + 1]) {\n                min = max = med; // found it\n            }\n            else {\n                min = med + 1;\n            }\n        }\n\n        return min;\n    }\n\n    /// Return the [line, column] data for a given offset and a lineMap.\n    /// Note that the returned line is 1-based, while the column is 0-based.\n    export function getSourceLineColFromMap(lineCol: ILineCol, minChar: number, lineMap: number[]): void {\n        var line = getLineNumberFromPosition(lineMap, minChar);\n\n        if (line > 0) {\n            lineCol.line = line;\n            lineCol.col = (minChar - lineMap[line]);\n        }\n    }\n\n    // Return the [line, column] (both 1 based) corresponding to a given position in a given script.\n    export funct';
var v27222 = v27223 + 'ion getLineColumnFromPosition(script: TypeScript.Script, position: number): ILineCol {\n        var result = { line: -1, col: -1 };\n        getSourceLineColFromMap(result, position, script.locationInfo.lineMap);\n        if (result.col >= 0) {\n            result.col++;   // Make it 1-based\n        }\n        return result;\n    }\n\n    //\n    // Return the position (offset) corresponding to a given [line, column] (both 1-based) in a given script.\n    //\n    export function getPositionFromLineColumn(script: TypeScript.Script, line: number, column: number): number {\n        return script.locationInfo.lineMap[line] + (column - 1);\n    }\n    \n    // Return true if the token is a primitive type\n    export function isPrimitiveTypeToken(token: Token) {\n        switch (token.tokenId) {\n            case TokenID.Any:\n            case TokenID.Bool:\n            case TokenID.Number:\n            case TokenID.String:\n                return true;\n        }\n        return false;\n    }\n\n    // Return true if the token is a primitive type\n    export function isModifier(token: Token) {\n        switch (token.tokenId) {\n            case TokenID.Public:\n            case TokenID.Private:\n            case TokenID.Static:\n                return true;\n        }\n        return false;\n    }\n}\n//\n// Copyright (c) Microsoft Corporation.  All rights reserved.\n// \n// Licensed under the Apache License, Version 2.0 (the "License");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an "AS IS" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n\n///<reference path=\'typescript.ts\' />\n\nmodule TypeScript {\n\n    export class AssignScopeContext {\n        constructor (public scopeChain: ScopeChain,\n                     public typeFlow: TypeFlow,\n                     public modDeclChain: ModuleDeclaration[]) {\n        }\n    }\n\n    export function pushAssignScope(scope: SymbolScope,\n        context: AssignScopeContext,\n        type: Type,\n        classType: Type,\n        fnc: FuncDecl) {\n\n        var chain = new ScopeChain(null, context.scopeChain, scope);\n        chain.thisType = type;\n        chain.classType = classType;\n        chain.fnc = fnc;\n        context.scopeChain = chain;\n    }\n\n    export function popAssignScope(context: AssignScopeContext) {\n        context.scopeChain = context.scopeChain.previous;\n    }\n\n    export function instanceCompare(a: Symbol, b: Symbol) {\n        if (((a == null) || (!a.isInstanceProperty()))) {\n            return b;\n        }\n        else {\n            return a;\n        }\n    }\n\n    export function instanceFilterStop(s: Symbol) {\n        return s.isInstanceProperty();\n    }\n\n    export class ScopeSearchFilter {\n\n        constructor (public select: (a: Symbol, b: Symbol) =>Symbol,\n                            public stop: (s: Symbol) =>bool) { }\n\n        public result: Symbol = null;\n\n        public reset() {\n            this.result = null;\n        }\n\n        public update(b: Symbol): bool {\n            this.result = this.select(this.result, b);\n            if (this.result) {\n                return this.stop(this.result);\n            }\n            else {\n                return false;\n            }\n        }\n    }\n\n    export var instanceFilter = new ScopeSearchFilter(instanceCompare, instanceFilterStop);\n\n    export function preAssignModuleScopes(ast: AST, context: AssignScopeContext) {\n        var moduleDecl = <ModuleDeclaration>ast;\n        var memberScope: SymbolTableScope = null;\n        var aggScope: SymbolAggregateScope = null;\n\n        if (moduleDecl.name && moduleDecl.mod) {\n            moduleDecl.name.sym = moduleDecl.mod.symbol;\n        }\n\n        var mod = moduleDecl.mod;\n\n        // We\'re likely here because of error recovery\n        if (!mod) {\n            return;\n        }\n\n        memberScope = new SymbolTableScope(mod.members, mod.ambientMembers, mod.enclosedTypes, mod.ambientEnclosedTypes, mod.symbol);\n        mod.memberScope = memberScope;\n        context.modDeclChain.push(moduleDecl);\n        context.typeFlow.checker.currentModDecl = moduleDecl;\n        aggScope = new SymbolAggregateScope(mod.symbol);\n        aggScope.addParentScope(memberScope);\n        aggScope.addParentScope(context.scopeChain.scope);\n        pushAssignScope(aggScope, context, null, null, null);\n        mod.containedScope = aggScope;\n        if (mod.symbol) {\n            context.typeFlow.addLocalsFromScope(mod.containedScope, mod.symbol, moduleDecl.vars, mod.members.privateMembers, true);\n        }\n    }\n\n    export function preAssignClassScopes(ast: AST, context: AssignScopeContext) {\n        var classDecl = <InterfaceDeclaration>ast;\n        var memberScope: Symb';
var v27221 = v27222 + "olTableScope = null;\n        var aggScope: SymbolAggregateScope = null;\n\n        if (classDecl.name && classDecl.type) {\n            classDecl.name.sym = classDecl.type.symbol;\n        }\n\n        var classType = ast.type;\n\n        if (classType) {\n            var classSym = classType.symbol;\n            memberScope = <SymbolTableScope>context.typeFlow.checker.scopeOf(classType);\n\n            aggScope = new SymbolAggregateScope(classType.symbol);\n            aggScope.addParentScope(memberScope);\n            aggScope.addParentScope(context.scopeChain.scope);\n\n            classType.containedScope = aggScope;\n            classType.memberScope = memberScope;\n\n            var instanceType = classType.instanceType;\n            memberScope = <SymbolTableScope>context.typeFlow.checker.scopeOf(instanceType);\n            instanceType.memberScope = memberScope;\n\n            aggScope = new SymbolAggregateScope(instanceType.symbol);\n            aggScope.addParentScope(context.scopeChain.scope);\n\n            pushAssignScope(aggScope, context, instanceType, classType, null);\n            instanceType.containedScope = aggScope;\n        }\n        else {\n            ast.type = context.typeFlow.anyType;\n        }\n    }\n\n    export function preAssignInterfaceScopes(ast: AST, context: AssignScopeContext) {\n        var interfaceDecl = <InterfaceDeclaration>ast;\n        var memberScope: SymbolTableScope = null;\n        var aggScope: SymbolAggregateScope = null;\n\n        if (interfaceDecl.name && interfaceDecl.type) {\n            interfaceDecl.name.sym = interfaceDecl.type.symbol;\n        }\n\n        var interfaceType = ast.type;\n        memberScope = <SymbolTableScope>context.typeFlow.checker.scopeOf(interfaceType);\n        interfaceType.memberScope = memberScope;\n        aggScope = new SymbolAggregateScope(interfaceType.symbol);\n        aggScope.addParentScope(memberScope);\n        aggScope.addParentScope(context.scopeChain.scope);\n        pushAssignScope(aggScope, context, null, null, null);\n        interfaceType.containedScope = aggScope;\n    }\n\n    export function preAssignWithScopes(ast: AST, context: AssignScopeContext) {\n        var withStmt = <WithStatement>ast;\n        var withType = withStmt.type;\n\n        var members = new ScopedMembers(new DualStringHashTable(new StringHashTable(), new StringHashTable()));\n        var ambientMembers = new ScopedMembers(new DualStringHashTable(new StringHashTable(), new StringHashTable()));\n\n        var withType = new Type();\n        var withSymbol = new WithSymbol(withStmt.minChar, context.typeFlow.checker.locationInfo.unitIndex, withType);\n        withType.members = members;\n        withType.ambientMembers = ambientMembers;\n        withType.symbol = withSymbol;\n        withType.setHasImplementation();\n        withStmt.type = withType;\n\n        var withScope = new TypeScript.SymbolScopeBuilder(withType.members, withType.ambientMembers, null, null, context.scopeChain.scope, withType.symbol);\n\n        pushAssignScope(withScope, context, null, null, null);\n        withType.containedScope = withScope;\n    }\n\n    export function preAssignFuncDeclScopes(ast: AST, context: AssignScopeContext) {\n        var funcDecl = <FuncDecl>ast;\n\n        var container: Symbol = null;\n        var localContainer: Symbol = null;\n        if (funcDecl.type) {\n            localContainer = ast.type.symbol;\n        }\n\n        var isStatic = hasFlag(funcDecl.fncFlags, FncFlags.Static);\n        var isInnerStatic = isStatic && context.scopeChain.fnc != null;\n        // for inner static functions, use the parent's member scope, so local vars cannot be captured\n        var parentScope = isInnerStatic ? context.scopeChain.fnc.type.memberScope : context.scopeChain.scope;\n\n        // if this is not a method, but enclosed by class, use constructor as\n        // the enclosing scope\n        // REVIEW: Some twisted logic here - this needs to be cleaned up once old classes are removed\n        //  - if it's a new class, always use the contained scope, since we initialize the constructor scope below\n        if (context.scopeChain.thisType &&\n            (!funcDecl.isConstructor || hasFlag(funcDecl.fncFlags, FncFlags.ClassMethod))) {\n            var instType = context.scopeChain.thisType;\n\n            if (!(instType.typeFlags & TypeFlags.IsClass) && !hasFlag(funcDecl.fncFlags, FncFlags.ClassMethod)) {\n                if (!funcDecl.isMethod() || isStatic) {\n                    parentScope = instType.constructorScope;\n                }\n                else {\n                    // use constructor scope if a method as well\n                    parentScope = instType.containedScope;\n                }\n            }\n            else {\n                if (context.scopeChain.previous.scope.container &&\n                    context.scopeChain.previous.scope.container.declAST &&\n                    context.scopeChain.previous.scope.container.declAST.nodeType == NodeType.FuncDecl &&\n                    (<FuncDecl>context.scopeChain.previous.sco";
var v27220 = v27221 + "pe.container.declAST).isConstructor) {\n\n                        // if the parent is the class constructor, use the constructor scope\n                    parentScope = instType.constructorScope;\n                }\n                else if (isStatic && context.scopeChain.classType) {\n                    parentScope = context.scopeChain.classType.containedScope;\n                }\n                else {\n                    // else, use the contained scope\n                    parentScope = instType.containedScope;\n                }\n            }\n            container = instType.symbol;\n        }\n        else if (funcDecl.isConstructor && context.scopeChain.thisType) {\n            // sets the container to the class type's symbol (which is shared by the instance type)\n            container = context.scopeChain.thisType.symbol;\n        }\n\n        if (funcDecl.type == null || hasFlag(funcDecl.type.symbol.flags, SymbolFlags.TypeSetDuringScopeAssignment)) {\n            if (context.scopeChain.fnc && context.scopeChain.fnc.type) {\n                container = context.scopeChain.fnc.type.symbol;\n            }\n\n            var funcScope = null;\n            var outerFnc: FuncDecl = context.scopeChain.fnc;\n            var nameText = funcDecl.name ? funcDecl.name.actualText : null;\n            var fgSym: TypeSymbol = null;\n\n            if (isStatic) {\n                // In the case of function-nested statics, no member list will have bee initialized for the function, so we need\n                // to copy it over.  We don't set this by default because having a non-null member list will throw off assignment\n                // compatibility tests\n                if (outerFnc.type.members == null && container.getType().memberScope) {\n                    outerFnc.type.members = (<SymbolScopeBuilder>(<TypeSymbol>container).type.memberScope).valueMembers;\n                }\n                funcScope = context.scopeChain.fnc.type.memberScope;\n                outerFnc.innerStaticFuncs[outerFnc.innerStaticFuncs.length] = funcDecl;\n            }\n            else {\n                funcScope = context.scopeChain.scope;\n            }\n\n            // REVIEW: We don't search for another sym for accessors to prevent us from\n            // accidentally coalescing function signatures with the same name (E.g., a function\n            // 'f' the outer scope and a setter 'f' in an object literal within that scope)\n            if (nameText && nameText != \"__missing\" && !funcDecl.isAccessor()) {\n                if (isStatic) {\n                    fgSym = funcScope.findLocal(nameText, false, false);\n                }\n                else {\n                    // REVIEW: This logic should be symmetric with preCollectClassTypes\n                    fgSym = funcScope.findLocal(nameText, false, false);\n                }\n            }\n\n            context.typeFlow.checker.createFunctionSignature(funcDecl, container,\n                                                            funcScope, fgSym, fgSym == null);\n\n            // it's a getter or setter for a class property                     \n            if (!funcDecl.accessorSymbol && \n                (funcDecl.fncFlags & FncFlags.ClassMethod) &&\n                container && \n                ((!fgSym || fgSym.declAST.nodeType != NodeType.FuncDecl) && funcDecl.isAccessor()) || \n                    (fgSym && fgSym.isAccessor())) \n            {\n                funcDecl.accessorSymbol = context.typeFlow.checker.createAccessorSymbol(funcDecl, fgSym, container.getType(), (funcDecl.isMethod() && isStatic), true, funcScope, container);\n            }\n\n            funcDecl.type.symbol.flags |= SymbolFlags.TypeSetDuringScopeAssignment;\n        }\n\n        // Set the symbol for functions and their overloads\n        if (funcDecl.name && funcDecl.type) {\n            funcDecl.name.sym = funcDecl.type.symbol;\n        }\n\n        // Keep track of the original scope type, because target typing might override\n        // the \"type\" member. We need the original \"Scope type\" for completion list, etc.\n        funcDecl.scopeType = funcDecl.type;\n\n        // Overloads have no scope, so bail here\n        if (funcDecl.isOverload) {\n            return;\n        }\n\n        var funcTable = new StringHashTable();\n        var funcMembers = new ScopedMembers(new DualStringHashTable(funcTable, new StringHashTable()));\n        var ambientFuncTable = new StringHashTable();\n        var ambientFuncMembers = new ScopedMembers(new DualStringHashTable(ambientFuncTable, new StringHashTable()));\n        var funcStaticTable = new StringHashTable();\n        var funcStaticMembers = new ScopedMembers(new DualStringHashTable(funcStaticTable, new StringHashTable()));\n        var ambientFuncStaticTable = new StringHashTable();\n        var ambientFuncStaticMembers = new ScopedMembers(new DualStringHashTable(ambientFuncStaticTable, new StringHashTable()));\n\n        // REVIEW: Is it a problem that this is being set twice for properties and constructors?\n        funcDe";
var v27219 = v27220 + "cl.unitIndex = context.typeFlow.checker.locationInfo.unitIndex;\n\n        var locals = new SymbolScopeBuilder(funcMembers, ambientFuncMembers, null, null, parentScope, localContainer);\n        var statics = new SymbolScopeBuilder(funcStaticMembers, ambientFuncStaticMembers, null, null, parentScope, null);\n\n        if (funcDecl.isConstructor && context.scopeChain.thisType) {\n            context.scopeChain.thisType.constructorScope = locals;\n        }\n\n        // basically, there are two problems\n        // - Above, for new classes, we were overwriting the constructor scope with the containing scope.  This caused constructor params to be\n        // in scope everywhere\n        // - Below, we're setting the contained scope table to the same table we were overwriting the constructor scope with, which we need to\n        // fish lambda params, etc, out (see funcTable below)\n        //\n        // A good first approach to solving this would be to change addLocalsFromScope to take a scope instead of a table, and add to the\n        // constructor scope as appropriate\n\n        funcDecl.symbols = funcTable;\n\n        if (!funcDecl.isSpecialFn()) {\n            var group = funcDecl.type;\n            var signature = funcDecl.signature;\n\n            if (!funcDecl.isConstructor) {\n                group.containedScope = locals;\n                locals.container = group.symbol;\n\n                group.memberScope = statics;\n                statics.container = group.symbol;\n            }\n            funcDecl.enclosingFnc = context.scopeChain.fnc;\n            group.enclosingType = isStatic ? context.scopeChain.classType : context.scopeChain.thisType;\n            // for mapping when type checking\n            var fgSym = <TypeSymbol>ast.type.symbol;\n            if (((funcDecl.fncFlags & FncFlags.Signature) == FncFlags.None) && funcDecl.vars) {\n                context.typeFlow.addLocalsFromScope(locals, fgSym, funcDecl.vars,\n                                                    funcTable, false);\n                context.typeFlow.addLocalsFromScope(statics, fgSym, funcDecl.statics,\n                                                    funcStaticTable, false);\n            }\n            if (signature.parameters) {\n                var len = signature.parameters.length;\n                for (var i = 0; i < len; i++) {\n                    var paramSym: ParameterSymbol = signature.parameters[i];\n                    context.typeFlow.checker.resolveTypeLink(locals,\n                                                                paramSym.parameter.typeLink, true);\n                }\n            }\n            context.typeFlow.checker.resolveTypeLink(locals, signature.returnType,\n                                                        funcDecl.isSignature());\n        }\n\n        if (!funcDecl.isConstructor || hasFlag(funcDecl.fncFlags, FncFlags.ClassMethod)) {\n            var thisType = (funcDecl.isConstructor && hasFlag(funcDecl.fncFlags, FncFlags.ClassMethod)) ? context.scopeChain.thisType : null;\n            pushAssignScope(locals, context, thisType, null, funcDecl);\n        }\n\n        if (funcDecl.name && hasFlag(funcDecl.fncFlags, FncFlags.IsFunctionExpression)) {\n            // If the function is an expression, the name will not be visible in the enclosing scope.\n            // Add the function symbol under its name to the local scope to allow for recursive calls.\n            if (funcDecl.name.sym) {\n                funcTable.add(funcDecl.name.actualText, funcDecl.name.sym);\n            }\n        }\n    }\n\n    export function preAssignCatchScopes(ast: AST, context: AssignScopeContext) {\n        var catchBlock = <Catch>ast;\n        if (catchBlock.param) {\n            var catchTable = new ScopedMembers(new DualStringHashTable(new StringHashTable(), new StringHashTable())); // REVIEW: Should we be allocating a public table instead of a private one?\n            var catchLocals = new SymbolScopeBuilder(catchTable, null, null, null, context.scopeChain.scope,\n                                                   context.scopeChain.scope.container);\n            catchBlock.containedScope = catchLocals;\n            pushAssignScope(catchLocals, context, context.scopeChain.thisType, context.scopeChain.classType, context.scopeChain.fnc);\n        }\n    }\n\n    export function preAssignScopes(ast: AST, parent: AST, walker: IAstWalker) {\n        var context:AssignScopeContext = walker.state;\n        var go = true;\n\n        if (ast) {\n            if (ast.nodeType == NodeType.List) {\n                var list = <ASTList>ast;\n                list.enclosingScope = context.scopeChain.scope;\n            }\n            else if (ast.nodeType == NodeType.ModuleDeclaration) {\n                preAssignModuleScopes(ast, context);\n            }\n            else if (ast.nodeType == NodeType.ClassDeclaration) {\n                preAssignClassScopes(ast, context);\n            }\n            else if (ast.nodeType == NodeType.InterfaceDeclaration) {\n                preAssignInterfaceScopes(";
var v27218 = v27219 + 'ast, context);\n            }\n            else if (ast.nodeType == NodeType.With) {\n                preAssignWithScopes(ast, context);\n            }\n            else if (ast.nodeType == NodeType.FuncDecl) {\n                preAssignFuncDeclScopes(ast, context);\n            }\n            else if (ast.nodeType == NodeType.Catch) {\n                preAssignCatchScopes(ast, context);\n            }\n            else if (ast.nodeType == NodeType.TypeRef) {\n                go = false;\n            }\n        }\n        walker.options.goChildren = go;\n        return ast;\n    }\n\n    export function postAssignScopes(ast: AST, parent: AST, walker: IAstWalker) {\n        var context:AssignScopeContext = walker.state;\n        var go = true;\n        if (ast) {\n            if (ast.nodeType == NodeType.ModuleDeclaration) {\n                var prevModDecl = <ModuleDeclaration>ast;\n\n                popAssignScope(context);\n\n                context.modDeclChain.pop();\n                if (context.modDeclChain.length >= 1) {\n                    context.typeFlow.checker.currentModDecl = context.modDeclChain[context.modDeclChain.length - 1];\n                }\n            }\n            else if (ast.nodeType == NodeType.ClassDeclaration) {\n                popAssignScope(context);\n            }\n            else if (ast.nodeType == NodeType.InterfaceDeclaration) {\n                popAssignScope(context);\n            }\n            else if (ast.nodeType == NodeType.With) {\n                popAssignScope(context);\n            }\n            else if (ast.nodeType == NodeType.FuncDecl) {\n                var funcDecl = <FuncDecl>ast;\n                if ((!funcDecl.isConstructor || hasFlag(funcDecl.fncFlags, FncFlags.ClassMethod)) && !funcDecl.isOverload) {\n                    popAssignScope(context);\n                }\n            }\n            else if (ast.nodeType == NodeType.Catch) {\n                var catchBlock = <Catch>ast;\n                if (catchBlock.param) {\n                    popAssignScope(context);\n                }\n            }\n            else {\n                go = false;\n            }\n        }\n        walker.options.goChildren = go;\n        return ast;\n    }\n}//\n// Copyright (c) Microsoft Corporation.  All rights reserved.\n// \n// Licensed under the Apache License, Version 2.0 (the "License");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an "AS IS" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n\n///<reference path=\'typescript.ts\' />\n\nmodule TypeScript {\n    export class TypeCollectionContext {\n        public script: Script = null;\n\n        constructor (public scopeChain: ScopeChain, public checker: TypeChecker) {\n        }\n    }\n\n    export class MemberScopeContext {\n        public type: Type = null;\n        public ast: AST = null;\n        public scope: SymbolScope;\n        public options = new AstWalkOptions();\n\n        constructor (public flow: TypeFlow, public pos: number, public matchFlag: ASTFlags) {\n        }\n    }\n\n    export class EnclosingScopeContext {\n\n        public scopeGetter: () => SymbolScope = null;\n        public objectLiteralScopeGetter: () => SymbolScope = null;\n        public scopeStartAST: AST = null;\n        public skipNextFuncDeclForClass = false;\n        public deepestModuleDecl: ModuleDeclaration = null;\n        public enclosingClassDecl: TypeDeclaration = null;\n        public enclosingObjectLit: UnaryExpression = null;\n        public publicsOnly = true;\n        public useFullAst = false;\n        private scriptFragment: Script;\n\n        constructor (public logger: ILogger,\n                    public script: Script,\n                    public text: ISourceText,\n                    public pos: number,\n                    public isMemberCompletion: bool) {\n        }\n\n        public getScope(): SymbolScope {\n            return this.scopeGetter();\n        }\n\n        public getObjectLiteralScope(): SymbolScope {\n            return this.objectLiteralScopeGetter();\n        }\n\n        public getScopeAST() {\n            return this.scopeStartAST;\n        }\n\n        public getScopePosition() {\n            return this.scopeStartAST.minChar;\n        }\n\n        public getScriptFragmentStartAST(): AST {\n            return this.scopeStartAST;\n        }\n\n        public getScriptFragmentPosition(): number {\n            return this.getScriptFragmentStartAST().minChar;\n        }\n\n        public getScriptFragment(): Script {\n            if (this.scriptFragment == null) {\n                var ast = this.getScriptFragmentStartAST();\n                var minChar = ast.minChar;\n                var limChar = (this.isMemberCompletion ? this.pos : this.po';
var v27217 = v27218 + "s + 1);\n                this.scriptFragment = TypeScript.quickParse(this.logger, ast, this.text, minChar, limChar, null/*errorCapture*/).Script;\n            }\n            return this.scriptFragment;\n        }\n    }\n\n    export function preFindMemberScope(ast: AST, parent: AST, walker: IAstWalker) {\n        var memScope: MemberScopeContext = walker.state;\n        if (hasFlag(ast.flags, memScope.matchFlag) && ((memScope.pos < 0) || (memScope.pos == ast.limChar))) {\n            memScope.ast = ast;\n            if ((ast.type == null) && (memScope.pos >= 0)) {\n                memScope.flow.inScopeTypeCheck(ast, memScope.scope);\n            }\n            memScope.type = ast.type;\n            memScope.options.stopWalk();\n        }\n        return ast;\n    }\n\n    export function pushTypeCollectionScope(container: Symbol,\n        valueMembers: ScopedMembers,\n        ambientValueMembers: ScopedMembers,\n        enclosedTypes: ScopedMembers,\n        ambientEnclosedTypes: ScopedMembers,\n        context: TypeCollectionContext,\n        thisType: Type,\n        classType: Type,\n        moduleDecl: ModuleDeclaration) {\n        var builder = new SymbolScopeBuilder(valueMembers, ambientValueMembers, enclosedTypes, ambientEnclosedTypes, null, container);\n        var chain: ScopeChain = new ScopeChain(container, context.scopeChain, builder);\n        chain.thisType = thisType;\n        chain.classType = classType;\n        chain.moduleDecl = moduleDecl;\n        context.scopeChain = chain;\n    }\n\n    export function popTypeCollectionScope(context: TypeCollectionContext) {\n        context.scopeChain = context.scopeChain.previous;\n    }\n\n    export function preFindEnclosingScope(ast: AST, parent: AST, walker: IAstWalker) {\n        var context: EnclosingScopeContext = walker.state;\n        var minChar = ast.minChar;\n        var limChar = ast.limChar;\n\n        // Account for the fact completion list may be called at the end of a file which\n        // is has not been fully re-parsed yet.\n        if (ast.nodeType == NodeType.Script && context.pos > limChar)\n            limChar = context.pos;\n\n        if ((minChar <= context.pos) &&\n            (limChar >= context.pos)) {\n            switch (ast.nodeType) {\n                case NodeType.Script:\n                    var script = <Script>ast;\n                    context.scopeGetter = function () {\n                        return script.bod === null ? null : script.bod.enclosingScope;\n                    };\n                    context.scopeStartAST = script;\n                    break;\n\n                case NodeType.ClassDeclaration:\n                    context.scopeGetter = function () {\n                        return (ast.type === null || ast.type.instanceType.containedScope === null) ? null : ast.type.instanceType.containedScope;\n                    };\n                    context.scopeStartAST = ast;\n                    context.enclosingClassDecl = <TypeDeclaration>ast;\n                    break;\n\n                case NodeType.ObjectLit:\n                    var objectLit = <UnaryExpression>ast;\n                    // Only consider target-typed object literals\n                    if (objectLit.targetType) {\n                        context.scopeGetter = function () {\n                            return objectLit.targetType.containedScope;\n                        };\n                        context.objectLiteralScopeGetter = function () {\n                            return objectLit.targetType.memberScope;\n                        }\n                        context.enclosingObjectLit = objectLit;\n                    }\n                    break;\n\n                case NodeType.ModuleDeclaration:\n                    context.deepestModuleDecl = <ModuleDeclaration>ast;\n                    context.scopeGetter = function () {\n                        return ast.type === null ? null : ast.type.containedScope;\n                    };\n                    context.scopeStartAST = ast;\n                    break;\n\n                case NodeType.InterfaceDeclaration:\n                    context.scopeGetter = function () {\n                        return (ast.type === null) ? null : ast.type.containedScope;\n                    };\n                    context.scopeStartAST = ast;\n                    break;\n\n                case NodeType.FuncDecl: {\n                    var funcDecl = <FuncDecl>ast;\n                    if (context.skipNextFuncDeclForClass) {\n                        context.skipNextFuncDeclForClass = false;\n                    }\n                    else {\n                        context.scopeGetter = function () {\n                            // The scope of a class constructor is hidden somewhere we don't expect :-S\n                            if (funcDecl.isConstructor && hasFlag(funcDecl.fncFlags, FncFlags.ClassMethod)) {\n                                if (ast.type && ast.type.enclosingType) {\n                                    return ast.type.enclosingType.constructorScope;\n                              ";
var v27216 = v27217 + '  }\n                            }\n\n                            if (funcDecl.scopeType) {\n                                return funcDecl.scopeType.containedScope;\n                            }\n\n                            if (funcDecl.type) {\n                                return funcDecl.type.containedScope;\n                            }\n                            return null;\n                        };\n                        context.scopeStartAST = ast;\n                    }\n                }\n                    break;\n            }\n            walker.options.goChildren = true;\n        }\n        else {\n            walker.options.goChildren = false;\n        }\n        return ast;\n    }\n\n    //\n    // Find the enclosing scope context from a position inside a script AST.\n    // The "scopeStartAST" of the returned scope is always valid.\n    // Return "null" if the enclosing scope can\'t be found.\n    //\n    export function findEnclosingScopeAt(logger: ILogger, script: Script, text: ISourceText, pos: number, isMemberCompletion: bool): EnclosingScopeContext {\n        var context = new EnclosingScopeContext(logger, script, text, pos, isMemberCompletion);\n\n        TypeScript.getAstWalkerFactory().walk(script, preFindEnclosingScope, null, null, context);\n\n        if (context.scopeStartAST === null)\n            return null;\n        return context;\n    }\n}//\n// Copyright (c) Microsoft Corporation.  All rights reserved.\n// \n// Licensed under the Apache License, Version 2.0 (the "License");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an "AS IS" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n\n///<reference path=\'typescript.ts\' />\n\nmodule TypeScript {\n    export class Signature {\n        public hasVariableArgList = false;\n        public returnType: TypeLink;\n        public parameters: ParameterSymbol[] = null;\n        public declAST: FuncDecl = null;\n        public typeCheckStatus = TypeCheckStatus.NotStarted;\n        public nonOptionalParameterCount = 0;\n\n        public specializeType(pattern: Type, replacement: Type, checker: TypeChecker): Signature {\n            var result = new Signature();\n            if (this.hasVariableArgList) {\n                result.hasVariableArgList = true;\n            }\n            result.returnType = new TypeLink();\n            if (this.returnType.type) {\n                result.returnType.type =\n                    this.returnType.type.specializeType(pattern, replacement, checker, false);\n            }\n            else {\n                result.returnType.type = checker.anyType;\n            }\n\n            if (this.parameters) {\n                result.parameters = [];\n                for (var i = 0, len = this.parameters.length; i < len; i++) {\n                    var oldSym:ParameterSymbol = this.parameters[i];\n                    var paramDef = new ValueLocation();\n                    var paramSym = new ParameterSymbol(oldSym.name, oldSym.location,\n                                                     checker.locationInfo.unitIndex,\n                                                     paramDef);\n\n                    paramSym.declAST = this.declAST;\n                    paramDef.symbol = paramSym;\n                    paramDef.typeLink = new TypeLink();\n                    result.parameters[i] = paramSym;\n                    var oldType = oldSym.getType();\n                    if (oldType) {\n                        paramDef.typeLink.type = oldType.specializeType(pattern, replacement, checker, false);\n                        paramSym.declAST.type = paramDef.typeLink.type;\n                    }\n                    else {\n                        paramDef.typeLink.type = checker.anyType;\n                    }\n                }\n            }\n            result.nonOptionalParameterCount = this.nonOptionalParameterCount;\n            result.declAST = this.declAST;\n\n            return result;\n        }\n\n        public toString() {\n            return this.toStringHelper(false, false, null);\n        }\n\n        public toStringHelper(shortform: bool, brackets: bool, scope: SymbolScope) {\n            return this.toStringHelperEx(shortform, brackets, scope).toString();\n        }\n\n        public toStringHelperEx(shortform: bool, brackets: bool, scope: SymbolScope, prefix? : string = "") : MemberName {\n            var builder = new MemberNameArray();\n            if (brackets) {\n                builder.prefix =  prefix + "[";\n            }\n            else {\n                builder.prefix = prefix + "(";\n            }\n\n            var paramLen = this.parameters.length;\n            var len = this.hasVariableArgList ? paramLen - 1 : par';
var v27215 = v27216 + 'amLen;\n            for (var i = 0; i < len; i++) {\n                builder.add(MemberName.create(this.parameters[i].name + (this.parameters[i].isOptional() ? "?" : "") + ": "));\n                builder.add(this.parameters[i].getType().getScopedTypeNameEx(scope));\n                if (i < paramLen - 1) {\n                    builder.add(MemberName.create(", "));\n                }\n            }\n\n            if (this.hasVariableArgList) {\n                builder.add(MemberName.create("..." + this.parameters[i].name + ": "));\n                builder.add(this.parameters[i].getType().getScopedTypeNameEx(scope));\n            }\n\n            if (shortform) {\n                if (brackets) {\n                    builder.add(MemberName.create("] => "));\n                }\n                else {\n                    builder.add(MemberName.create(") => "));\n                }\n            }\n            else {\n                if (brackets) {\n                    builder.add(MemberName.create("]: "));\n                }\n                else {\n                    builder.add(MemberName.create("): "));\n                }\n            }\n\n            if (this.returnType.type) {\n                 builder.add(this.returnType.type.getScopedTypeNameEx(scope));\n            }\n            else {\n                builder.add(MemberName.create("any"));\n            }\n            return builder;\n        }\n    }\n\n    export class SignatureGroup {\n        public signatures: Signature[] = [];\n        public hasImplementation = true;\n        public definitionSignature: Signature = null;\n        public hasBeenTypechecked = false;\n        public flags: SignatureFlags = SignatureFlags.None;\n        public addSignature(signature: Signature) {\n            if (this.signatures == null) {\n                this.signatures = new Signature[];\n            }\n            this.signatures[this.signatures.length] = signature;\n            \n            // REVIEW: duplicates should be found within createFunctionSignature,\n            // so we won\'t check for them here\n            if (signature.declAST &&\n                !signature.declAST.isOverload &&\n                !signature.declAST.isSignature() && \n                !hasFlag(signature.declAST.fncFlags, FncFlags.Ambient) &&\n                hasFlag(signature.declAST.fncFlags, FncFlags.Definition)) {\n                this.definitionSignature = signature;\n            }\n        }\n\n        public toString() { return this.signatures.toString(); }\n        public toStrings(prefix: string, shortform: bool, scope: SymbolScope) {\n            var result : MemberName[] = [];  \n            var len = this.signatures.length;\n            if (len > 1) {\n                shortform = false;\n            }\n            for (var i = 0; i < len; i++) {\n                // the definition signature shouldn\'t be printed if there are overloads\n                if (len > 1 && this.signatures[i] == this.definitionSignature) {\n                    continue;\n                }\n                if (this.flags & SignatureFlags.IsIndexer) {\n                    result.push(this.signatures[i].toStringHelperEx(shortform, true, scope));\n                }\n                else {\n                    result.push(this.signatures[i].toStringHelperEx(shortform, false, scope, prefix));\n                }\n            }\n            \n            return result;\n        }\n\n        public specializeType(pattern: Type, replacement: Type, checker: TypeChecker): SignatureGroup {\n            var result = new SignatureGroup();\n            if (this.signatures) {\n                for (var i = 0, len = this.signatures.length; i < len; i++) {\n                    result.addSignature(this.signatures[i].specializeType(pattern, replacement, checker));\n                }\n            }\n            return result;\n        }\n\n        // verifies that signatures are\n        //  - unique within a given group\n        //  - compatible with the declaration signature\n        public verifySignatures(checker: TypeChecker) {\n\n            var len = 0;\n            \n            // TODO: verify no signature pair with identical parameters\n            if (this.signatures && ((len = this.signatures.length) > 0)) {\n                \n                for (var i = 0; i < len; i++) {\n                    \n                    for (var j = i + 1; j < len; j++) {\n                        // next check for equivalence between overloads - no two can be exactly the same                     \n                        if (this.signatures[i].declAST && this.signatures[j].declAST &&\n                            (!hasFlag(this.signatures[i].declAST.fncFlags, FncFlags.Definition) && !hasFlag(this.signatures[j].declAST.fncFlags, FncFlags.Definition)) &&\n                            checker.signaturesAreIdentical(this.signatures[i], this.signatures[j])) {\n                            checker.errorReporter.simpleError(this.signatures[i].declAST, (this.signatures[i].declAST && this.signatures[i].declAST.name) ? "Signature for \'" + this.signatures';
var v27214 = v27215 + '[i].declAST.name.actualText + "\' is duplicated" :"Signature is duplicated");\n                        }\n                    }\n                    \n                    // finally, ensure that the definition is assignable to each signature\n                    if (this.definitionSignature) {\n                        if (!checker.signatureIsAssignableToTarget(this.definitionSignature, this.signatures[i])) {\n                            checker.errorReporter.simpleError(this.signatures[i].declAST, "Overload signature is not compatible with function definition");\n                        }\n                    }\n                }\n            }\n        }\n\n        public typeCheck(checker: TypeChecker, ast: AST, hasConstruct:bool) {\n            \n            if (this.hasBeenTypechecked) {\n                return;\n            }\n            \n            // set here to prevent us from recursively invoking typeCheck again\n            this.hasBeenTypechecked = true;\n            \n            var len = 0;\n            \n            if (this.signatures && ((len = this.signatures.length) > 0)) {\n                \n                // first, typecheck each signature\n                for (var i = 0; i < len; i++) {\n\n                    if (!hasConstruct && !this.definitionSignature && this.signatures[i].declAST && this.signatures[i].declAST.isOverload && !hasFlag(this.signatures[i].declAST.fncFlags, FncFlags.Ambient)) {\n                        checker.errorReporter.simpleError(this.signatures[i].declAST, "Overload declaration lacks definition");\n                    }\n\n                    // If we\'re typechecking a constructor via one of its overloads, ensure that the outer class is typechecked, since we need to validate its inheritance properties\n                    // to properly check that \'super\' is being used correctly\n                    if (this.signatures[i].declAST && this.signatures[i].declAST.isConstructor && this.signatures[i].declAST.classDecl && this.signatures[i].declAST.classDecl.type.symbol.typeCheckStatus == TypeCheckStatus.NotStarted) {\n                        checker.typeFlow.typeCheck(this.signatures[i].declAST.classDecl);\n                    }\n\n                    checker.typeFlow.typeCheck(this.signatures[i].declAST);\n                }\n\n                this.verifySignatures(checker);\n            }\n        }\n    }\n}//\n// Copyright (c) Microsoft Corporation.  All rights reserved.\n// \n// Licensed under the Apache License, Version 2.0 (the "License");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an "AS IS" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n\n///<reference path=\'typescript.ts\' />\n///<reference path=\'..\\harness\\external\\json2.ts\' />\n\nmodule TypeScript {\n    export class SourceMapPosition {\n        public sourceLine: number;\n        public sourceColumn: number;\n        public emittedLine: number;\n        public emittedColumn: number;\n    }\n\n    export class SourceMapping {\n        public start = new SourceMapPosition();\n        public end = new SourceMapPosition();\n        public nameIndex: number = -1;\n        public childMappings: SourceMapping[] = [];\n    }\n\n    export class SourceMapper {\n        static MapFileExtension = ".map";\n        \n        public sourceMappings: SourceMapping[] = [];\n        public currentMappings: SourceMapping[][] = [];\n\n        public names: string[] = [];\n        public currentNameIndex: number[] = [];\n\n        public jsFileName: string;\n        public tsFileName: string;\n\n        constructor(tsFileName: string, jsFileName: string, public jsFile: ITextWriter, public sourceMapOut: ITextWriter, public errorReporter: ErrorReporter) {\n            this.currentMappings.push(this.sourceMappings);\n\n            jsFileName = switchToForwardSlashes(jsFileName);\n            this.jsFileName = TypeScript.getPrettyName(jsFileName, false, true);\n\n            var removalIndex = jsFileName.lastIndexOf(this.jsFileName);\n            var fixedPath = jsFileName.substring(0, removalIndex);\n\n            this.tsFileName = TypeScript.getRelativePathToFixedPath(fixedPath, tsFileName);\n        }\n        \n        // Generate source mapping\n        static EmitSourceMapping(allSourceMappers: SourceMapper[]) {\n            // At this point we know that there is at least one source mapper present.\n            // If there are multiple source mappers, all will correspond to same map file but different sources\n\n            // Output map file name into the js file\n            var sourceMapper = allSourceMappers[0];\n            sourceMapper.jsFile.WriteLine("//@ sourceMappingURL=" + sourceMapper.jsFileName + SourceMapper.MapFileExtension);\n\n  ';
var v27213 = v27214 + '          // Now output map file\n            var sourceMapOut = sourceMapper.sourceMapOut;\n            var mappingsString = "";\n            var tsFiles: string[] = [];\n\n            var prevEmittedColumn = 0;\n            var prevEmittedLine = 0;\n            var prevSourceColumn = 0;\n            var prevSourceLine = 0;\n            var prevSourceIndex = 0;\n            var prevNameIndex = 0;\n            var namesList: string[] = [];\n            var namesCount = 0;\n            var emitComma = false;\n\n            var recordedPosition: SourceMapPosition = null;\n            for (var sourceMapperIndex = 0; sourceMapperIndex < allSourceMappers.length; sourceMapperIndex++) {\n                sourceMapper = allSourceMappers[sourceMapperIndex];\n\n                // If there are any mappings generated\n                var currentSourceIndex = tsFiles.length;\n                tsFiles.push(sourceMapper.tsFileName);\n\n                // Join namelist\n                if (sourceMapper.names.length > 0) {\n                    namesList.push.apply(namesList, sourceMapper.names);\n                }\n\n                var recordSourceMapping = (mappedPosition: SourceMapPosition, nameIndex: number) => {\n                    if (recordedPosition != null &&\n                        recordedPosition.emittedColumn == mappedPosition.emittedColumn &&\n                        recordedPosition.emittedLine == mappedPosition.emittedLine) {\n                        // This position is already recorded\n                        return;\n                    }\n\n                    // Record this position\n                    if (prevEmittedLine !== mappedPosition.emittedLine) {\n                        while (prevEmittedLine < mappedPosition.emittedLine) {\n                            prevEmittedColumn = 0;\n                            mappingsString = mappingsString + ";";\n                            prevEmittedLine++;\n                        }\n                        emitComma = false;\n                    }\n                    else if (emitComma) {\n                        mappingsString = mappingsString + ",";\n                    }\n\n                    // 1. Relative Column\n                    mappingsString = mappingsString + Base64VLQFormat.encode(mappedPosition.emittedColumn - prevEmittedColumn);\n                    prevEmittedColumn = mappedPosition.emittedColumn;\n\n                    // 2. Relative sourceIndex \n                    mappingsString = mappingsString + Base64VLQFormat.encode(currentSourceIndex - prevSourceIndex);\n                    prevSourceIndex = currentSourceIndex;\n\n                    // 3. Relative sourceLine 0 based\n                    mappingsString = mappingsString + Base64VLQFormat.encode(mappedPosition.sourceLine - 1 - prevSourceLine);\n                    prevSourceLine = mappedPosition.sourceLine - 1;\n\n                    // 4. Relative sourceColumn 0 based \n                    mappingsString = mappingsString + Base64VLQFormat.encode(mappedPosition.sourceColumn - prevSourceColumn);\n                    prevSourceColumn = mappedPosition.sourceColumn;\n\n                    // 5. Relative namePosition 0 based\n                    if (nameIndex >= 0) {\n                        mappingsString = mappingsString + Base64VLQFormat.encode(namesCount + nameIndex - prevNameIndex);\n                        prevNameIndex = namesCount + nameIndex;\n                    }\n\n                    emitComma = true;\n                    recordedPosition = mappedPosition;\n                }\n\n                // Record starting spans\n                var recordSourceMappingSiblings = (sourceMappings: SourceMapping[]) => {\n                    for (var i = 0; i < sourceMappings.length; i++) {\n                        var sourceMapping = sourceMappings[i];\n                        recordSourceMapping(sourceMapping.start, sourceMapping.nameIndex);\n                        recordSourceMappingSiblings(sourceMapping.childMappings);\n                        recordSourceMapping(sourceMapping.end, sourceMapping.nameIndex);\n                    }\n                }\n\n                recordSourceMappingSiblings(sourceMapper.sourceMappings, -1);\n                namesCount = namesCount + sourceMapper.names.length;\n            }\n\n            // Write the actual map file\n            if (mappingsString != "") {\n                sourceMapOut.Write(JSON2.stringify({\n                    version: 3,\n                    file: sourceMapper.jsFileName,\n                    sources: tsFiles,\n                    names: namesList,\n                    mappings: mappingsString\n                }));\n            }\n\n            // Done, close the file\n            try {\n                // Closing files could result in exceptions, report them if they occur\n                sourceMapOut.Close();\n            } catch (ex) {\n                sourceMapper.errorReporter.emitterError(null, ex.message);\n            }\n        }\n    }\n}\n//\n// Copyright (c) Microsoft Corporation.  All rights reserved.\n// \n// Licensed under';
var v27212 = v27213 + ' the Apache License, Version 2.0 (the "License");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an "AS IS" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n\n///<reference path=\'typescript.ts\' />\n\nmodule TypeScript {\n\n    // private members are private to the scope\n    // public members are public to the scope\n    export class ScopedMembers {\n\n        public allMembers: IHashTable;\n        public publicMembers: IHashTable;\n        public privateMembers: IHashTable;\n\n        constructor (public dualMembers: DualStringHashTable) { \n            this.allMembers = this.dualMembers;\n            this.publicMembers = this.dualMembers.primaryTable;\n            this.privateMembers = this.dualMembers.secondaryTable;\n        }\n\n        // add a public member\n        public addPublicMember(key: string, data) { return this.dualMembers.primaryTable.add(key, data); }\n\n        // add a private member \n        public addPrivateMember(key: string, data) { return this.dualMembers.secondaryTable.add(key, data); }\n    }\n\n    export enum SymbolKind {\n        None,\n        Type,\n        Field,\n        Parameter,\n        Variable,\n    }\n\n    export class SymbolScope {\n        constructor (public container: Symbol) { }\n        public printLabel() { return "base"; }\n        public getAllSymbolNames(members: bool): string[]{\n            return ["please", "implement", "in", "derived", "classes"];\n        }\n        public getAllTypeSymbolNames(members: bool): string[]{\n            return ["please", "implement", "in", "derived", "classes"];\n        }\n        public getAllValueSymbolNames(members: bool): string[]{\n            return ["please", "implement", "in", "derived", "classes"];\n        }\n        // advanced search using a filter\n        public search(filter: ScopeSearchFilter, name: string, publicOnly: bool, typespace: bool): Symbol { return null; }\n        // find in this immediate scope\n        public findLocal(name: string, publicOnly: bool, typespace: bool): Symbol { return null; }\n        // find in value namespace \n        public find(name: string, publicOnly: bool, typespace: bool): Symbol { return null; }\n        // find symbol that supplies an implementation\n        public findImplementation(name: string, publicOnly: bool, typespace: bool): Symbol { return null; }\n        // restrict the search to ambient values\n        public findAmbient(name: string, publicOnly: bool, typespace: bool): Symbol { return null; }\n        public print(outfile: ITextWriter) {\n            if (this.container) {\n                outfile.WriteLine(this.printLabel() + " scope with container: " + this.container.name + "...");\n            }\n            else {\n                outfile.WriteLine(this.printLabel() + " scope...");\n            }\n        }\n\n        public enter(container: Symbol, ast: AST, symbol: Symbol, errorReporter: ErrorReporter, publicOnly: bool,\n            typespace: bool, ambient: bool): void {\n            throw new Error("please implement in derived class");\n        }\n\n        public getTable(): IHashTable {\n            throw new Error("please implement in derived class");\n        }\n    }\n\n    function symbolCanBeUsed(sym: Symbol, publicOnly) {\n        return publicOnly ? !(hasFlag(sym.flags, SymbolFlags.Private) ||\n                            (sym.declAST && sym.declAST.nodeType == NodeType.FuncDecl && hasFlag((<FuncDecl>sym.declAST).fncFlags, FncFlags.Private)))\n                          : true;\n    }\n\n    export class SymbolAggregateScope extends SymbolScope {\n        public printLabel() { return "agg"; }\n        public valueCache: IHashTable = null;\n        public valueImplCache: IHashTable = null;\n        public valueAmbientCache: IHashTable = null;\n        public typeCache: IHashTable = null;\n        public typeImplCache: IHashTable = null;\n        public typeAmbientCache: IHashTable = null;\n        public parents: SymbolScope[] = null;\n        public container: Symbol;\n\n        constructor (container: Symbol) {\n            super(container);\n            this.container = container;\n        }\n\n        public search(filter: ScopeSearchFilter, name: string, publicOnly: bool, typespace: bool) {\n            if (this.parents) {\n                for (var i = 0; i < this.parents.length; i++) {\n                    var sym = this.parents[i].search(filter, name, publicOnly, typespace);\n                    if (sym) {\n                        if (filter.update(sym)) {\n                            return sym;\n                        }\n                    }\n                }\n            }\n            return filter.result;\n        }\n\n        public getAllSymbolNames(members';
var v27211 = v27212 + ": bool): string[]{\n            var result: string[] = [];\n            if (this.parents) {\n                for (var i = 0; i < this.parents.length; i++) {\n                    var parentResult = this.parents[i].getAllSymbolNames(members);\n                    if (parentResult) {\n                        result = result.concat(parentResult);\n                    }\n                }\n            }\n            return result;\n        }\n\n        public getAllTypeSymbolNames(members: bool): string[]{\n            var result: string[] = [];\n            if (this.parents) {\n                for (var i = 0; i < this.parents.length; i++) {\n                    var parentResult = this.parents[i].getAllTypeSymbolNames(members);\n                    if (parentResult) {\n                        result = result.concat(parentResult);\n                    }\n                }\n            }\n            return result;\n        }\n\n        public getAllValueSymbolNames(members: bool): string[]{\n            var result: string[] = [];\n            if (this.parents) {\n                for (var i = 0; i < this.parents.length; i++) {\n                    var parentResult = this.parents[i].getAllValueSymbolNames(members);\n                    if (parentResult) {\n                        result = result.concat(parentResult);\n                    }\n                }\n            }\n            return result;\n        }\n\n        public print(outfile: ITextWriter) {\n            super.print(outfile);\n            if (this.parents) {\n                for (var i = 0; i < this.parents.length; i++) {\n                    this.parents[i].print(outfile);\n                }\n            }\n        }\n\n        public findImplementation(name: string, publicOnly: bool, typespace: bool): Symbol {\n            var sym: Symbol = null;\n            var i = 0;\n            var implCache = this.valueImplCache;\n\n            if (typespace) {\n                implCache = this.typeImplCache;\n            }\n            if (implCache &&\n                ((sym = implCache.lookup(name)) != null) &&\n                (publicOnly ? !(hasFlag(sym.flags, SymbolFlags.Private) ||\n                                        (sym.declAST && sym.declAST.nodeType == NodeType.FuncDecl && hasFlag((<FuncDecl>sym.declAST).fncFlags, FncFlags.Private)))\n                                        : true)) {\n                return sym;\n            }\n            if (this.parents) {\n                for (i = 0; i < this.parents.length; i++) {\n                    sym = this.parents[i].findImplementation(name, publicOnly, typespace);\n                    if (sym) {\n                        break;\n                    }\n                }\n            }\n            if (implCache) {\n                if (typespace) {\n                    this.typeImplCache = new StringHashTable();\n                    implCache = this.typeImplCache;\n                }\n                else {\n                    this.valueImplCache = new StringHashTable();\n                    implCache = this.valueImplCache;\n                }\n            }\n            implCache.add(name, sym);\n            return sym;\n        }\n\n        public find(name: string, publicOnly: bool, typespace: bool): Symbol {\n            var sym: Symbol = null;\n            var i = 0;\n            var cache = this.valueCache;\n\n            if (typespace) {\n                cache = this.typeCache;\n            }\n            if (cache &&\n                ((sym = cache.lookup(name)) != null) &&\n                (publicOnly ? !(hasFlag(sym.flags, SymbolFlags.Private) ||\n                                        (sym.declAST && sym.declAST.nodeType == NodeType.FuncDecl && hasFlag((<FuncDecl>sym.declAST).fncFlags, FncFlags.Private)))\n                                        : true)) {\n                return sym;\n            }\n            if (this.parents) {\n                for (i = 0; i < this.parents.length; i++) {\n                    sym = this.parents[i].find(name, publicOnly, typespace);\n                    if (sym) {\n                        break;\n                    }\n                }\n            }\n            if (cache == null) {\n                if (typespace) {\n                    this.typeCache = new StringHashTable();\n                    cache = this.typeCache;\n                }\n                else {\n                    this.valueCache = new StringHashTable();\n                    cache = this.valueCache;\n                }\n            }\n            cache.add(name, sym);\n            return sym;\n        }\n\n        public findAmbient(name: string, publicOnly: bool, typespace: bool): Symbol {\n            var sym: Symbol = null;\n            var i = 0;\n            var cache = this.valueAmbientCache;\n            if (typespace) {\n                cache = this.typeAmbientCache;\n            }\n            if (cache && ((sym = cache.lookup(name)) != null)) {\n                return sym;\n            }\n            if (this.parents) {\n                for (i = 0; i < this.parents.length; i++) {\n                    sym =";
var v27210 = v27211 + ' this.parents[i].findAmbient(name, publicOnly, typespace);\n                    if (sym) {\n                        break;\n                    }\n                }\n            }\n            if (cache == null) {\n                if (typespace) {\n                    this.typeAmbientCache = new StringHashTable();\n                    cache = this.typeAmbientCache;\n                }\n                else {\n                    this.valueAmbientCache = new StringHashTable();\n                    cache = this.valueAmbientCache;\n                }\n            }\n            cache.add(name, sym);\n            return sym;\n        }\n\n        public addParentScope(parent: SymbolScope): void {\n            if (this.parents == null) {\n                this.parents = new SymbolScope[];\n            }\n            this.parents[this.parents.length] = parent;\n        }\n    }\n\n    export class SymbolTableScope extends SymbolScope {\n        public container: Symbol;\n\n        constructor(public valueMembers: ScopedMembers,\n                            public ambientValueMembers: ScopedMembers,\n                            public enclosedTypes: ScopedMembers,\n                            public ambientEnclosedTypes: ScopedMembers,\n                            container: Symbol)\n        {\n            super(container);\n            this.container = container;\n        }\n\n        public printLabel() { return "table"; }\n\n        public getAllSymbolNames(members: bool): string[]{\n            var result = this.getAllTypeSymbolNames(members);\n\n            return result.concat(this.getAllValueSymbolNames(members));\n        }\n\n        public getAllTypeSymbolNames(members: bool): string[]{\n            var result = [];\n            if (this.ambientEnclosedTypes) {\n                result = result.concat(this.ambientEnclosedTypes.allMembers.getAllKeys());\n            }\n            if (this.enclosedTypes) {\n                result = result.concat(this.enclosedTypes.allMembers.getAllKeys());\n            }\n            return result;\n        }\n\n        public getAllValueSymbolNames(members: bool): string[]{\n            var result = [];\n            if (this.ambientValueMembers) {\n                result = result.concat(this.ambientValueMembers.allMembers.getAllKeys());\n            }\n            if (this.valueMembers) {\n                result = result.concat(this.valueMembers.allMembers.getAllKeys());\n            }\n            return result;\n        }\n\n        public search(filter: ScopeSearchFilter, name: string, publicOnly: bool, typespace: bool) {\n            var sym = this.find(name, publicOnly, typespace);\n            filter.update(sym);\n            return filter.result;\n        }\n\n        public find(name: string, publicOnly: bool, typespace: bool): Symbol {\n            var table: IHashTable = null;\n            var ambientTable: IHashTable = null;\n\n            if (typespace) {\n                table = (this.enclosedTypes == null) ? null :\n                            publicOnly ? this.enclosedTypes.publicMembers : this.enclosedTypes.allMembers;\n                ambientTable = (this.ambientEnclosedTypes == null) ? null :\n                                    publicOnly ? this.ambientEnclosedTypes.publicMembers : this.ambientEnclosedTypes.allMembers;\n            }\n            else {\n                table = (this.valueMembers == null) ? null :\n                                publicOnly ? this.valueMembers.publicMembers : this.valueMembers.allMembers;\n                ambientTable = (this.ambientValueMembers == null) ? null :\n                                    publicOnly ? this.ambientValueMembers.publicMembers : this.ambientValueMembers.allMembers;\n            }\n            if (ambientTable) {\n                var s = ambientTable.lookup(name);\n                if (s) { return s; }\n            }\n            if (table) {\n                var s = table.lookup(name);\n                if (s) { return s; }\n            }\n\n            return null;\n        }\n\n        public findAmbient(name: string, publicOnly: bool, typespace: bool): Symbol {\n            var ambientTable = (this.ambientValueMembers == null) ? null :\n                                publicOnly ? this.ambientValueMembers.publicMembers : this.ambientValueMembers.allMembers;\n            if (typespace) {\n                ambientTable = (this.ambientEnclosedTypes == null) ? null :\n                                    publicOnly ? this.ambientEnclosedTypes.publicMembers : this.ambientEnclosedTypes.allMembers;\n            }\n            if (ambientTable) {\n                var s = ambientTable.lookup(name);\n                if (s) { return s; }\n            }\n\n            return null;\n        }\n\n        public print(outfile: ITextWriter) {\n            super.print(outfile);\n            if (this.ambientValueMembers) {\n                this.ambientValueMembers.allMembers.map(function (key, sym, context) {\n                    outfile.WriteLine("  " + key);\n                }, null);\n            }\n            if (this.valueMembers) {\n   ';
var v27209 = v27210 + '             this.valueMembers.allMembers.map(function (key, sym, context) {\n                    outfile.WriteLine("  " + key);\n                }, null);\n            }\n            if (this.ambientEnclosedTypes) {\n                this.ambientEnclosedTypes.allMembers.map(function (key, sym, context) {\n                    outfile.WriteLine("  " + key);\n                }, null);\n            }\n            if (this.enclosedTypes) {\n                this.enclosedTypes.allMembers.map(function (key, sym, context) {\n                    outfile.WriteLine("  " + key);\n                }, null);\n            }\n        }\n\n        public findImplementation(name: string, publicOnly: bool, typespace: bool): Symbol {\n            var sym = this.find(name, publicOnly, typespace);\n            if (sym) {\n                if (sym.kind() == SymbolKind.Type) {\n                    var typeSym = <TypeSymbol>sym;\n                    if (!typeSym.type.hasImplementation()) {\n                        sym = null;\n                    }\n                }\n                else if (sym.container) {\n                    if (sym.container.kind() == SymbolKind.Type) {\n                        var ctypeSym = <TypeSymbol>sym.container;\n                        if (!ctypeSym.type.hasImplementation()) {\n                            sym = null;\n                        }\n                    }\n                }\n            }\n            return sym;\n        }\n\n        public getTable() {\n            return this.valueMembers.publicMembers;\n        }\n    }\n\n    export class SymbolScopeBuilder extends SymbolScope {\n        public container: Symbol;\n        \n        constructor (public valueMembers: ScopedMembers,\n                    public ambientValueMembers: ScopedMembers,\n                    public enclosedTypes: ScopedMembers,\n                    public ambientEnclosedTypes: ScopedMembers,\n                    public parent: SymbolScope,\n                    container: Symbol)\n        {\n            super(container);\n            this.container = container;\n        }\n\n        public printLabel() { return "builder"; }\n        public getAllSymbolNames(members: bool): string[]{\n            var result: string[] = this.getAllTypeSymbolNames(members);\n            return result.concat(this.getAllValueSymbolNames(members));\n        }\n\n        public getAllTypeSymbolNames(members: bool): string[]{\n            var result: string[] = [];\n            if (this.ambientEnclosedTypes) {\n                result = result.concat(this.ambientEnclosedTypes.allMembers.getAllKeys());\n            }\n            if (this.enclosedTypes) {\n                result = result.concat(this.enclosedTypes.allMembers.getAllKeys());\n            }\n            if (!members && this.parent) {\n                var parentResult = this.parent.getAllTypeSymbolNames(members);\n                if (parentResult) {\n                    result = result.concat(parentResult);\n                }\n            }\n            return result;\n        }\n\n        public getAllValueSymbolNames(members: bool): string[]{\n            var result: string[] = [];\n            if (this.ambientValueMembers) {\n                result = result.concat(this.ambientValueMembers.allMembers.getAllKeys());\n            }\n            if (this.valueMembers) {\n                result = result.concat(this.valueMembers.allMembers.getAllKeys());\n            }\n            if (!members && this.parent) {\n                var parentResult = this.parent.getAllValueSymbolNames(members);\n                if (parentResult) {\n                    result = result.concat(parentResult);\n                }\n            }\n            return result;\n        }\n\n        public search(filter: ScopeSearchFilter, name: string, publicOnly: bool, typespace: bool) {\n            var sym: Symbol = null;\n            var table = (this.valueMembers == null) ? null :\n                            publicOnly ? this.valueMembers.publicMembers : this.valueMembers.allMembers;\n            var ambientTable = (this.ambientValueMembers == null) ? null :\n                                publicOnly ? this.ambientValueMembers.publicMembers : this.ambientValueMembers.allMembers;\n            if (typespace) {\n                table = (this.enclosedTypes == null) ? null :\n                            publicOnly ? this.enclosedTypes.publicMembers : this.enclosedTypes.allMembers;\n                ambientTable = (this.ambientEnclosedTypes == null) ? null :\n                                    publicOnly ? this.ambientEnclosedTypes.publicMembers : this.ambientEnclosedTypes.allMembers;\n            }\n            if (ambientTable) {\n                if ((sym = ambientTable.lookup(name)) != null) {\n                    if (filter.update(sym)) {\n                        return sym;\n                    }\n                }\n            }\n            if (table) {\n                if ((sym = table.lookup(name)) != null) {\n                    if (filter.update(sym)) {\n                        return sym;\n                    }\n        ';
var v27208 = v27209 + '        }\n            }\n            if (this.parent) {\n                sym = this.parent.search(filter, name, publicOnly, typespace);\n                if (sym) {\n                    if (filter.update(sym)) {\n                        return sym;\n                    }\n                }\n            }\n            return filter.result;\n        }\n\n        public print(outfile: ITextWriter) {\n            super.print(outfile);\n            if (this.ambientValueMembers) {\n                this.ambientValueMembers.allMembers.map(function (key, s, context) {\n                    var sym = <Symbol>s;\n                    outfile.WriteLine("  " + key);\n                }, null);\n            }\n            if (this.valueMembers) {\n                this.valueMembers.allMembers.map(function (key, s, context) {\n                    var sym = <Symbol>s;\n                    outfile.WriteLine("  " + key);\n                }, null);\n            }\n            if (this.ambientEnclosedTypes) {\n                this.ambientEnclosedTypes.allMembers.map(function (key, s, context) {\n                    var sym = <Symbol>s;\n                    outfile.WriteLine("  " + key);\n                }, null);\n            }\n            if (this.enclosedTypes) {\n                this.enclosedTypes.allMembers.map(function (key, s, context) {\n                    var sym = <Symbol>s;\n                    outfile.WriteLine("  " + key);\n                }, null);\n            }\n            if (this.parent) {\n                this.parent.print(outfile);\n            }\n        }\n\n        public find(name: string, publicOnly: bool, typespace: bool): Symbol {\n            var sym: Symbol = null;\n            var table = (this.valueMembers == null) ? null :\n                            publicOnly ? this.valueMembers.publicMembers : this.valueMembers.allMembers;\n            var ambientTable = (this.ambientValueMembers == null) ? null :\n                                publicOnly ? this.ambientValueMembers.publicMembers : this.ambientValueMembers.allMembers;\n            if (typespace) {\n                table = (this.enclosedTypes == null) ? null :\n                            publicOnly ? this.enclosedTypes.publicMembers : this.enclosedTypes.allMembers;\n                ambientTable = (this.ambientEnclosedTypes == null) ? null :\n                                    publicOnly ? this.ambientEnclosedTypes.publicMembers : this.ambientEnclosedTypes.allMembers;\n            }\n            if (ambientTable && ((sym = ambientTable.lookup(name)) != null)) {\n                return sym;\n            }\n            if (table && ((sym = table.lookup(name)) != null)) {\n                return sym;\n            }\n            if (this.parent) {\n                return this.parent.find(name, publicOnly, typespace);\n            }\n            return null;\n        }\n\n        public findAmbient(name: string, publicOnly: bool, typespace: bool): Symbol {\n            var sym: Symbol = null;\n            var ambientTable = (this.ambientValueMembers == null) ? null :\n                                publicOnly ? this.ambientValueMembers.publicMembers : this.ambientValueMembers.allMembers;\n            if (typespace) {\n                ambientTable = (this.ambientEnclosedTypes == null) ? null :\n                                    publicOnly ? this.ambientEnclosedTypes.publicMembers : this.ambientEnclosedTypes.allMembers;\n            }\n            if (ambientTable && ((sym = ambientTable.lookup(name)) != null)) {\n                return sym;\n            }\n            if (this.parent) {\n                return this.parent.findAmbient(name, publicOnly, typespace);\n            }\n            return null;\n        }\n\n        public findLocal(name: string, publicOnly: bool, typespace: bool): Symbol {\n            var sym: Symbol = null;\n            var table = (this.valueMembers == null) ? null :\n                            publicOnly ? this.valueMembers.publicMembers : this.valueMembers.allMembers;\n            var ambientTable = (this.ambientValueMembers == null) ? null :\n                                publicOnly ? this.ambientValueMembers.publicMembers : this.ambientValueMembers.allMembers;\n            if (typespace) {\n                table = (this.enclosedTypes == null) ? null :\n                            publicOnly ? this.enclosedTypes.publicMembers : this.enclosedTypes.allMembers;\n                ambientTable = (this.ambientEnclosedTypes == null) ? null :\n                                    publicOnly ? this.ambientEnclosedTypes.publicMembers : this.ambientEnclosedTypes.allMembers;\n            }\n            if (table) {\n                if ((sym = table.lookup(name)) != null) {\n                    if (sym) { return sym; }\n                }\n            }\n            if (ambientTable) {\n                if ((sym = ambientTable.lookup(name)) != null) {\n                    if (sym) { return sym; }\n                }\n            }\n            return null;\n        }\n\n        public enter(container: Symbol, ast: AST, symbol: Symbol, ';
var v27207 = v27208 + 'errorReporter: ErrorReporter, insertAsPublic: bool, typespace: bool, ambient: bool): void {\n            var table = null;\n\n            if (ambient) {\n                if (typespace) {\n                    table = (this.ambientEnclosedTypes == null) ? null :\n                                    insertAsPublic ? this.ambientEnclosedTypes.publicMembers : this.ambientEnclosedTypes.privateMembers;\n                }\n                else {\n                    table = (this.ambientValueMembers == null) ? null :\n                                insertAsPublic ? this.ambientValueMembers.publicMembers : this.ambientValueMembers.privateMembers;\n                }\n            }\n            else {\n                if (typespace) {\n                    table = (this.enclosedTypes == null) ? null :\n                                insertAsPublic ? this.enclosedTypes.publicMembers : this.enclosedTypes.privateMembers;\n                }\n                else {\n                    table = (this.valueMembers == null) ? null :\n                                insertAsPublic ? this.valueMembers.publicMembers : this.valueMembers.privateMembers;\n                }\n            }\n\n            if (table) {\n                if (!table.add(symbol.name, symbol)) {\n                    errorReporter.duplicateIdentifier(ast, symbol.name);\n                }\n            }\n            else {\n                CompilerDiagnostics.Alert("YYYYY");  // REVIEW: Surely we can do better than this...\n            }\n            symbol.container = container;\n        }\n\n        public getTable() { return this.valueMembers.allMembers; }\n    }\n\n    export class FilteredSymbolScope extends SymbolScope {\n        constructor (public scope: SymbolScope, container: Symbol, public filter: ScopeSearchFilter) {\n            super(container);\n        }\n        public print(outfile: ITextWriter) {\n            this.scope.print(outfile);\n        }\n\n        public find(name: string, publicOnly: bool, typespace: bool) {\n            this.filter.reset();\n            return this.scope.search(this.filter, name, publicOnly, typespace);\n        }\n        public findLocal(name: string, publicOnly: bool, typespace: bool) { return this.scope.findLocal(name, publicOnly, typespace); }\n    }\n\n    export class FilteredSymbolScopeBuilder extends SymbolScopeBuilder {\n        constructor (valueMembers: ScopedMembers, parent: SymbolScope, container: Symbol, public filter: (sym: Symbol) =>bool) {\n            super(valueMembers, null, null, null, parent, container);\n        }\n        public findLocal(name: string, publicOnly: bool, typespace: bool): Symbol {\n            var sym = super.findLocal(name, publicOnly, typespace);\n            if (sym) {\n                if (!this.filter(sym)) {\n                    return null;\n                }\n            }\n            return sym;\n        }\n\n        public search(filter: ScopeSearchFilter, name: string, publicOnly: bool, typespace: bool):Symbol {\n            throw new Error("please implement");\n        }\n\n        public find(name: string, publicOnly: bool, typespace: bool): Symbol {\n            var sym = super.findLocal(name, publicOnly, typespace);\n            if (sym) {\n                if (!this.filter(sym)) {\n                    return null;\n                }\n            }\n            return super.find(name, publicOnly, typespace);\n        }\n    }\n}//\n// Copyright (c) Microsoft Corporation.  All rights reserved.\n// \n// Licensed under the Apache License, Version 2.0 (the "License");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an "AS IS" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n\n///<reference path=\'typescript.ts\' />\n\nmodule TypeScript {\n\n    export enum TypeCheckStatus {\n        NotStarted,\n        Started,\n        Finished,\n    }\n\n    // For lexically-scoped constructs\n    export function aLexicallyEnclosesB(a: Symbol, b: Symbol) {\n        if (a.declAST && b && b.declAST && a.declAST.nodeType == NodeType.FuncDecl) {\n            return a.declAST.minChar <= b.declAST.minChar && a.declAST.limChar >= b.declAST.limChar;\n        }\n        else {\n            return false;\n        }\n    }\n\n    export function aEnclosesB(a: Symbol, b: Symbol) {\n        while (a.container) {\n            if (a == b || aLexicallyEnclosesB(a.container, b)) {\n                return true;\n            }\n            a = a.container;\n        }\n        return false;\n    }\n\n    export interface PhasedTypecheckObject {\n        typeCheckStatus: TypeCheckStatus;\n    }\n\n    export class Symbol {\n        public bound = false;\n        public container: Symbol;\n        public instanceScope(): SymbolScope { return null;';
var v27206 = v27207 + ' }\n        public isVariable() { return false; }\n        public isMember() { return false; }\n        public isInferenceSymbol() { return false; }\n        public isWith() { return false; }\n        public writeable() { return false; }\n        public isType(): bool { return false; }\n        public getType(): Type { return null; }\n        public flags: SymbolFlags = SymbolFlags.None;\n        public refs: Identifier[];\n        public isAccessor() { return false; }\n        public isObjectLitField = false;\n\n        public declAST: AST = null;\n        public declModule: ModuleDeclaration = null;  // if child of module, this is the module that declared it\n\n        public passSymbolCreated: number = CompilerDiagnostics.analysisPass;\n\n        constructor(public name: string, public location: number, public length: number,\n                 public unitIndex: number) { }\n\n        public isInstanceProperty() {\n            return hasFlag(this.flags, SymbolFlags.Property) && (!hasFlag(this.flags, SymbolFlags.ModuleMember));\n        }\n\n        public getTypeName(scope: SymbolScope): string {\n            return this.getTypeNameEx(scope).toString();\n        }\n        \n        public getTypeNameEx(scope: SymbolScope): MemberName {\n            return MemberName.create(this.toString());\n        }\n\n        public getOptionalNameString() {\n            return hasFlag(this.flags, SymbolFlags.Optional) ? "?" : "";\n        }\n\n        public pathToRoot() {\n            var path = new Symbol[];\n            var node = this;\n            while (node && (node.name != globalId)) {\n                path[path.length] = node;\n                node = node.container;\n            }\n            return path;\n        }\n\n        public findCommonAncestorPath(b: Symbol) {\n            if (this.container == null) {\n                return new Symbol[];\n            }\n            var aPath = this.container.pathToRoot();\n            var bPath: Symbol[];\n            if (b) {\n                bPath = b.pathToRoot();\n            }\n            else {\n                bPath = new Symbol[];\n            }\n            var commonNodeIndex = -1;\n            for (var i = 0, aLen = aPath.length; i < aLen; i++) {\n                var aNode = aPath[i];\n                for (var j = 0, bLen = bPath.length; j < bLen; j++) {\n                    var bNode = bPath[j];\n                    if (aNode == bNode) {\n                        commonNodeIndex = i;\n                        break;\n                    }\n                }\n                if (commonNodeIndex >= 0) {\n                    break;\n                }\n            }\n            if (commonNodeIndex >= 0) {\n                return aPath.slice(0, commonNodeIndex);\n            }\n            else {\n                return aPath;\n            }\n        }\n\n        // Gets the pretty Name for the symbol withing the scope\n        public getPrettyName(scopeSymbol: Symbol) {\n            return this.name;\n        }\n\n        public scopeRelativeName(scope: SymbolScope): string {\n            if (scope == null) {\n                return this.getPrettyName(null) + this.getOptionalNameString();\n            }\n            var lca = this.findCommonAncestorPath(scope.container);\n            var builder = "";\n            for (var i = 0, len = lca.length; i < len; i++) {\n                var prettyName = lca[i].getPrettyName(i == len - 1 ? scope.container : lca[i + 1]);\n                builder = prettyName + "." + builder;\n            }\n            builder += this.getPrettyName(len == 0 ? scope.container : lca[0]) + this.getOptionalNameString();\n            return builder;\n        }\n\n        public fullName(): string {\n            var builder = this.name;\n            var ancestor = this.container;\n            while (ancestor && (ancestor.name != globalId)) {\n                builder = ancestor.name + "." + builder;\n                ancestor = ancestor.container;\n            }\n            return builder;\n        }\n\n        public isExternallyVisible(checker: TypeChecker) {\n            // Global module is not hidden\n            if (this == checker.gloMod) {\n                return true;\n            }\n\n            // private symbol\n            if (hasFlag(this.flags, SymbolFlags.Private)) {\n                return false;\n            }\n\n            // If the current container is not exported\n            // If its in global - it is visible, otherwise it isn\'t\n            if (!hasFlag(this.flags, SymbolFlags.Exported)) {\n                return this.container == checker.gloMod;\n            }\n\n            // It is visible if its container is visible too\n            return this.container.isExternallyVisible(checker);\n        }\n\n        public visible(scope: SymbolScope, checker: TypeChecker) {\n            if (checker == null || this.container == checker.gloMod) {\n                return true;\n            }\n\n            if (hasFlag(this.flags, SymbolFlags.ModuleMember)) {\n\n                if (hasFlag(this.flags, SymbolFlags.Exported)) {\n                    if (!hasFlag';
var v27205 = v27206 + '(this.flags, SymbolFlags.Private)) {\n                        return true;\n                    }\n                    else {\n                        return aEnclosesB(this, scope.container);\n                    }\n                }\n                else {\n                    // REVIEW:\n                    // Note that in the scope-assignment and binding phases,\n                    // currentModDecl will point to the "master" module decl,\n                    // and not necessarily the one that the symbol in question\n                    // was declared in.\n                    // That\'s ok - there\'s no harm done in attributing the symbol\n                    // to the master mod decl in either of those phases, so long\n                    // as we reference the actual module fragment of declaration\n                    // during typecheck.  Doing this also prevents us from printing\n                    // multiple error messages if the symbol is not visible.\n                    return checker && (checker.currentModDecl == this.declModule) ||\n                                                (checker.currentModDecl &&\n                                                    checker.currentModDecl.mod &&\n                                                    checker.currentModDecl.mod.symbol &&\n                                                    this.declModule &&\n                                                    this.declModule.mod &&\n                                                    this.declModule.mod.symbol &&\n                                                    aEnclosesB(checker.currentModDecl.mod.symbol, this.declModule.mod.symbol));\n                }\n            }\n            else {\n                // field or method\n                var isFunction = this.declAST && this.declAST.nodeType == NodeType.FuncDecl;\n                var isMethod = isFunction && (<FuncDecl>this.declAST).isMethod();\n                var isStaticFunction = isFunction && hasFlag((<FuncDecl>this.declAST).fncFlags, FncFlags.Static)\n                var isPrivateMethod = isMethod && hasFlag((<FuncDecl>this.declAST).fncFlags, FncFlags.Private);\n                var isAlias = this.isType() && (<TypeSymbol>this).aliasLink;\n\n                if (this.isMember() || isMethod || isStaticFunction || isAlias) {\n                    if (hasFlag(this.flags, SymbolFlags.Private) || isPrivateMethod) {\n                        if (scope.container == null && this.container != scope.container) {\n                            return false; // it\'s an inner member being accessed by the global scope\n                        }\n                        else {\n                            return this.container == null ? true : aEnclosesB(scope.container, this.container);\n                        }\n                    }\n                    else {\n                        return true;\n                    }\n                }\n                else if (this.container) {\n                    return aEnclosesB(this, scope.container);\n                }\n                else {\n                    return true;\n                }\n            }\n        }\n\n        public addRef(identifier: Identifier) {\n            if (!this.refs) {\n                this.refs = [];\n            }\n            this.refs[this.refs.length] = identifier;\n        }\n\n        public toString() {\n            if (this.name) {\n                return this.name;\n            }\n            else {\n                return "_anonymous";\n            }\n        }\n\n        public print(outfile) {\n            outfile.Write(this.toString());\n        }\n\n        public specializeType(pattern: Type, replacement: Type, checker: TypeChecker): Symbol {\n            throw new Error("please implement in derived class");\n        }\n\n        public setType(type: Type) {\n            throw new Error("please implement in derived class");\n        }\n\n        public kind(): SymbolKind {\n            throw new Error("please implement in derived class");\n        }\n\n        public getInterfaceDeclFromSymbol(checker: TypeChecker) {\n            if (this.declAST != null) {\n                if (this.declAST.nodeType == NodeType.InterfaceDeclaration) {\n                    return <InterfaceDeclaration>this.declAST;\n                } else if (this.container != null && this.container != checker.gloMod && this.container.declAST.nodeType == NodeType.InterfaceDeclaration) {\n                    return <InterfaceDeclaration>this.container.declAST;\n                }\n            }\n\n            return null;\n        }\n\n        public getVarDeclFromSymbol() {\n            if (this.declAST != null && this.declAST.nodeType == NodeType.VarDecl) {\n                return <VarDecl>this.declAST;\n            }\n\n            return null;\n        }\n\n        public getDocComments() : Comment[] {\n            if (this.declAST != null) {\n                return this.declAST.getDocComments();\n            }\n\n            return [];\n        }\n\n        public isStatic() {\n            return hasFlag(this.fla';
var v27204 = v27205 + 'gs, SymbolFlags.Static);\n        }\n    }\n\n    export class ValueLocation {\n        public symbol: Symbol;\n        public typeLink: TypeLink;\n    }\n\n    export class InferenceSymbol extends Symbol {\n        constructor (name: string, location: number, length: number, unitIndex: number) {\n            super(name, location, length, unitIndex);\n        }\n\n        public typeCheckStatus = TypeCheckStatus.NotStarted;\n        public isInferenceSymbol() { return true; }\n        public transferVarFlags(varFlags: VarFlags) {\n            if (hasFlag(varFlags, VarFlags.Ambient)) {\n                this.flags |= SymbolFlags.Ambient;\n            }\n            if (hasFlag(varFlags, VarFlags.Constant)) {\n                this.flags |= SymbolFlags.Constant;\n            }\n            if (hasFlag(varFlags, VarFlags.Static)) {\n                this.flags |= SymbolFlags.Static;\n            }\n            if (hasFlag(varFlags, VarFlags.Property)) {\n                this.flags |= SymbolFlags.Property;\n            }\n            if (hasFlag(varFlags, VarFlags.Private)) {\n                this.flags |= SymbolFlags.Private;\n            }\n            if (hasFlag(varFlags, VarFlags.Public)) {\n                this.flags |= SymbolFlags.Public;\n            }\n            if (hasFlag(varFlags, VarFlags.Readonly)) {\n                this.flags |= SymbolFlags.Readonly;\n            }\n            if (hasFlag(varFlags, VarFlags.Exported)) {\n                this.flags |= SymbolFlags.Exported;\n            }\n        }\n    }\n\n    export class TypeSymbol extends InferenceSymbol {\n        public additionalLocations: number[];\n        public expansions: Type[] = []; // For types that may be "split", keep track of the subsequent definitions\n        public expansionsDeclAST: AST[] = [];\n        public isDynamic = false;\n\n        constructor (locName: string, location: number, length: number, unitIndex: number, public type: Type) {\n            super(locName, location, length, unitIndex);\n            this.prettyName = this.name;\n        }\n\n        public addLocation(loc: number) {\n            if (this.additionalLocations == null) {\n                this.additionalLocations = [];\n            }\n            this.additionalLocations[this.additionalLocations.length] = loc;\n        }\n        public isMethod = false;\n        public aliasLink:ImportDeclaration = null;\n        public kind() { return SymbolKind.Type; }\n        public isType(): bool { return true; }\n        public getType() { return this.type; }\n        public prettyName: string;\n        public onlyReferencedAsTypeRef = optimizeModuleCodeGen;\n\n        public getTypeNameEx(scope: SymbolScope) {\n            return this.type.getMemberTypeNameEx(this.name ? this.name + this.getOptionalNameString() : "", false, false, scope);\n        }\n\n        public instanceScope(): SymbolScope {\n            // Don\'t use the constructor scope for a class body or methods - use the contained scope\n            if (!(this.type.typeFlags & TypeFlags.IsClass) && this.type.isClass()) {\n                return this.type.instanceType.constructorScope;\n            }\n            else {\n                return this.type.containedScope;\n            }\n        }\n        // corresponding instance type if this is a class\n        public instanceType: Type;\n\n        public toString() {\n            var result = this.type.getTypeName();\n            if (this.name) {\n                result = this.name + ":" + result;\n            }\n            return result;\n        }\n\n        public isClass() { return this.instanceType != null; }\n        public isFunction() { return this.declAST != null && this.declAST.nodeType == NodeType.FuncDecl; }\n\n        public specializeType(pattern: Type, replacement: Type, checker: TypeChecker): Symbol {\n            if (this.type == pattern) {\n                return replacement.symbol;\n            }\n            else {\n                var replType = this.type.specializeType(pattern, replacement, checker, false);\n                if (replType != this.type) {\n                    var result = new TypeSymbol(this.name, -1, 0, -1, replType);\n                    return result;\n                }\n                else {\n                    return this;\n                }\n            }\n        }\n\n        // Gets the pretty name of the symbol with respect to symbol of the scope (scopeSymbol)\n        // searchTillRoot specifies if the name need to searched in the root path of the scope\n        public getPrettyName(scopeSymbol: Symbol) {\n            if (!!scopeSymbol && isQuoted(this.prettyName) && this.type.isModuleType()) {\n                // Its a dynamic module - and need to be specialized with the scope\n                // Check in exported module members in each scope\n                var symbolPath = scopeSymbol.pathToRoot();\n                var prettyName = this.getPrettyNameOfDynamicModule(symbolPath);\n                if (prettyName != null) {\n                    return prettyName.name;\n                }\n            }\n\n            retur';
var v27203 = v27204 + 'n this.prettyName;\n        }\n\n        public getPrettyNameOfDynamicModule(scopeSymbolPath: Symbol[]) {\n            var scopeSymbolPathLength = scopeSymbolPath.length;\n            var externalSymbol: { name: string; symbol: Symbol; } = null;\n            if (scopeSymbolPath.length > 0 &&\n                scopeSymbolPath[scopeSymbolPathLength - 1].getType().isModuleType() &&\n                (<TypeSymbol>scopeSymbolPath[scopeSymbolPathLength - 1]).isDynamic) {\n\n                // Check if submodule is dynamic\n                if (scopeSymbolPathLength > 1 &&\n                    scopeSymbolPath[scopeSymbolPathLength - 2].getType().isModuleType() &&\n                    (<TypeSymbol>scopeSymbolPath[scopeSymbolPathLength - 2]).isDynamic) {\n                    var moduleType = <ModuleType>scopeSymbolPath[scopeSymbolPathLength - 2].getType();\n                    externalSymbol = moduleType.findDynamicModuleName(this.type);\n\n                }\n\n                if (externalSymbol == null) {\n                    // Check in this module\n                    var moduleType = <ModuleType>scopeSymbolPath[scopeSymbolPathLength - 1].getType();\n                    externalSymbol = moduleType.findDynamicModuleName(this.type);\n                }\n            }\n\n            return externalSymbol;\n        }\n\n        public getDocComments(): Comment[]{\n            var comments : Comment[] = [];\n            if (this.declAST != null) {\n                comments = comments.concat(this.declAST.getDocComments());\n            }\n\n            for (var i = 0; i < this.expansionsDeclAST.length; i++) {\n                comments = comments.concat(this.expansionsDeclAST[i].getDocComments());\n            }\n\n            return comments;\n        }\n    }\n\n    export class WithSymbol extends TypeSymbol {\n        constructor (location: number, unitIndex: number, withType: Type) {\n            super("with", location, 4, unitIndex, withType);\n        }\n        public isWith() { return true; }\n    }\n\n    export class FieldSymbol extends InferenceSymbol {\n        public name: string;\n        public location: number;\n\n        constructor (name: string, location: number, unitIndex: number, public canWrite: bool,\n                      public field: ValueLocation) {\n\n            super(name, location, name.length, unitIndex);\n            this.name = name;\n            this.location = location;\n        }\n        public kind() { return SymbolKind.Field; }\n        public writeable() { return this.isAccessor() ? this.setter != null : this.canWrite; }\n        public getType() { return this.field.typeLink.type; }\n        public getTypeNameEx(scope: SymbolScope) {\n            return MemberName.create(this.field.typeLink.type.getScopedTypeNameEx(scope), this.name + this.getOptionalNameString() + ": ", "");\n        }\n\n        public isMember() { return true; }\n        public setType(type: Type) {\n            this.field.typeLink.type = type;\n        }\n\n        public getter: TypeSymbol = null;\n        public setter: TypeSymbol = null;\n        public hasBeenEmitted = false; // since getters and setters are emitted together, need to track if one has been emitted\n\n        public isAccessor() { return this.getter != null || this.setter != null; }\n\n        public isVariable() { return true; }\n        public toString() { return this.getTypeNameEx(null).toString(); }\n        public specializeType(pattern: Type, replacement: Type, checker: TypeChecker): Symbol {\n            var rType = this.field.typeLink.type.specializeType(pattern, replacement, checker, false);\n            if (rType != this.field.typeLink.type) {\n                var fieldDef = new ValueLocation();\n                var result = new FieldSymbol(this.name, 0, checker.locationInfo.unitIndex,\n                                           this.canWrite, fieldDef);\n                result.flags = this.flags;\n                fieldDef.symbol = result;\n                fieldDef.typeLink = new TypeLink();\n                result.setType(rType);\n                result.typeCheckStatus = TypeCheckStatus.Finished;\n                return result;\n            }\n            else {\n                return this;\n            }\n        }\n\n        public getDocComments(): Comment[] {\n            if (this.getter != null || this.setter != null) {\n                var comments : Comment[] = [];\n                if (this.getter != null) {\n                    comments = comments.concat(this.getter.getDocComments());\n                }\n                if (this.setter != null) {\n                    comments = comments.concat(this.setter.getDocComments());\n                }\n                return comments;\n            }\n            else if (this.declAST != null) {\n                return this.declAST.getDocComments();\n            }\n\n            return [];\n        }\n\n    }\n\n    export class ParameterSymbol extends InferenceSymbol {\n        public name: string;\n        public location: number;\n        private paramDocComment: string = null;\n        public funcDecl';
var v27202 = v27203 + ': AST = null;\n        \n        constructor (name: string, location: number, unitIndex: number,\n                          public parameter: ValueLocation) {\n            super(name, location, name.length, unitIndex);\n\n            this.name = name;\n            this.location = location;\n        }\n        public kind() { return SymbolKind.Parameter; }\n        public writeable() { return true; }\n        public getType() { return this.parameter.typeLink.type; }\n        public setType(type: Type) {\n            this.parameter.typeLink.type = type;\n        }\n        public isVariable() { return true; }\n        public argsOffset = (-1);\n        public isOptional() {\n            if (this.parameter && this.parameter.symbol && this.parameter.symbol.declAST) {\n                return (<ArgDecl>this.parameter.symbol.declAST).isOptional;\n            }\n            else {\n                return false;\n            }\n        }\n\n        public getTypeNameEx(scope: SymbolScope) {\n            return MemberName.create(this.getType().getScopedTypeNameEx(scope), this.name + (this.isOptional() ? "?" : "") + ": ", "");\n        }\n\n        public toString() { return this.getTypeNameEx(null).toString(); }\n\n        public specializeType(pattern: Type, replacement: Type, checker: TypeChecker): Symbol {\n            var rType = this.parameter.typeLink.type.specializeType(pattern, replacement, checker, false);\n            if (this.parameter.typeLink.type != rType) {\n                var paramDef = new ValueLocation();\n                var result = new ParameterSymbol(this.name, 0, checker.locationInfo.unitIndex,\n                                               paramDef);\n                paramDef.symbol = result;\n                result.setType(rType);\n                return result;\n            }\n            else {\n                return this;\n            }\n        }\n\n        public getParameterDocComments() {\n            if (!this.paramDocComment) {\n                var parameterComments: string[] = [];\n                if (this.funcDecl) {\n                    var fncDocComments = this.funcDecl.getDocComments();\n                    var paramComment = Comment.getParameterDocCommentText(this.name, fncDocComments);\n                    if (paramComment != "") {\n                        parameterComments.push(paramComment);\n                    }\n                }\n                var docComments = TypeScript.Comment.getDocCommentText(this.getDocComments());\n                if (docComments != "") {\n                    parameterComments.push(docComments);\n                }\n                \n                this.paramDocComment = parameterComments.join("\\n");\n            }\n\n            return this.paramDocComment;\n        }\n    }\n\n    export class VariableSymbol extends InferenceSymbol {\n\n        constructor (name: string, location: number, unitIndex: number, public variable: ValueLocation) {\n            super(name, location, name.length, unitIndex);\n        }\n        public kind() { return SymbolKind.Variable; }\n        public writeable() { return true; }\n        public getType() { return this.variable.typeLink.type; }\n        public getTypeNameEx(scope: SymbolScope) {\n            return MemberName.create(this.getType().getScopedTypeNameEx(scope), this.name + ": ", "");\n        }\n\n        public setType(type: Type) {\n            this.variable.typeLink.type = type;\n        }\n        public isVariable() { return true; }\n    }\n}//\n// Copyright (c) Microsoft Corporation.  All rights reserved.\n// \n// Licensed under the Apache License, Version 2.0 (the "License");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an "AS IS" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n\n///<reference path=\'typescript.ts\' />\n\nmodule TypeScript {\n    export enum TokenID {\n        // Keywords\n        Any,\n        Bool,\n        Break,\n        Case,\n        Catch,\n        Class,\n        Const,\n        Continue,\n        Debugger,\n        Default,\n        Delete,\n        Do,\n        Else,\n        Enum,\n        Export,\n        Extends,\n        Declare,\n        False,\n        Finally,\n        For,\n        Function,\n        Constructor,\n        Get,\n        If,\n        Implements,\n        Import,\n        In,\n        InstanceOf,\n        Interface,\n        Let,\n        Module,\n        New,\n        Number,\n        Null,\n        Package,\n        Private,\n        Protected,\n        Public,\n        Return,\n        Set,\n        Static,\n        String,\n        Super,\n        Switch,\n        This,\n        Throw,\n        True,\n        Try,\n        TypeOf,\n        Var,\n        Void,\n        With,\n        While,\n        Yield,\n      ';
var v27201 = v27202 + '  // Punctuation\n        Semicolon,\n        OpenParen,\n        CloseParen,\n        OpenBracket,\n        CloseBracket,\n        OpenBrace,\n        CloseBrace,\n        Comma,\n        Equals,\n        PlusEquals,\n        MinusEquals,\n        AsteriskEquals,\n        SlashEquals,\n        PercentEquals,\n        AmpersandEquals,\n        CaretEquals,\n        BarEquals,\n        LessThanLessThanEquals,\n        GreaterThanGreaterThanEquals,\n        GreaterThanGreaterThanGreaterThanEquals,\n        Question,\n        Colon,\n        BarBar,\n        AmpersandAmpersand,\n        Bar,\n        Caret,\n        And,\n        EqualsEquals,\n        ExclamationEquals,\n        EqualsEqualsEquals,\n        ExclamationEqualsEquals,\n        LessThan,\n        LessThanEquals,\n        GreaterThan,\n        GreaterThanEquals,\n        LessThanLessThan,\n        GreaterThanGreaterThan,\n        GreaterThanGreaterThanGreaterThan,\n        Plus,\n        Minus,\n        Asterisk,\n        Slash,\n        Percent,\n        Tilde,\n        Exclamation,\n        PlusPlus,\n        MinusMinus,\n        Dot,\n        DotDotDot,\n        Error,\n        EndOfFile,\n        EqualsGreaterThan,\n        Identifier,\n        StringLiteral,\n        RegularExpressionLiteral,\n        NumberLiteral,\n        Whitespace,\n        Comment,\n        Lim,\n        LimFixed = EqualsGreaterThan,\n        LimKeyword = Yield,\n    }\n\n    export var tokenTable = new TokenInfo[];\n    export var nodeTypeTable = new string[];\n    export var nodeTypeToTokTable = new number[];\n    export var noRegexTable = new bool[];\n\n    noRegexTable[TokenID.Identifier] = true;\n    noRegexTable[TokenID.StringLiteral] = true;\n    noRegexTable[TokenID.NumberLiteral] = true;\n    noRegexTable[TokenID.RegularExpressionLiteral] = true;\n    noRegexTable[TokenID.This] = true;\n    noRegexTable[TokenID.PlusPlus] = true;\n    noRegexTable[TokenID.MinusMinus] = true;\n    noRegexTable[TokenID.CloseParen] = true;\n    noRegexTable[TokenID.CloseBracket] = true;\n    noRegexTable[TokenID.CloseBrace] = true;\n    noRegexTable[TokenID.True] = true;\n    noRegexTable[TokenID.False] = true;\n\n    export enum OperatorPrecedence {\n        None,\n        Comma,\n        Assignment,\n        Conditional,\n        LogicalOr,\n        LogicalAnd,\n        BitwiseOr,\n        BitwiseExclusiveOr,\n        BitwiseAnd,\n        Equality,\n        Relational,\n        Shift,\n        Additive,\n        Multiplicative,\n        Unary,\n        Lim\n    }\n\n    export enum Reservation {\n        None = 0,\n        Javascript = 1,\n        JavascriptFuture = 2,\n        TypeScript = 4,\n        JavascriptFutureStrict = 8,\n        TypeScriptAndJS = Javascript | TypeScript,\n        TypeScriptAndJSFuture = JavascriptFuture | TypeScript,\n        TypeScriptAndJSFutureStrict = JavascriptFutureStrict | TypeScript,\n    }\n\n    export class TokenInfo {\n        constructor (public tokenId: TokenID, public reservation: Reservation,\n                    public binopPrecedence: number, public binopNodeType: number,\n                    public unopPrecedence: number, public unopNodeType: number,\n                    public text: string, public ers: ErrorRecoverySet) { }\n    }\n\n    function setTokenInfo(tokenId: TokenID, reservation: number, binopPrecedence: number,\n        binopNodeType: number, unopPrecedence: number, unopNodeType: number,\n        text: string, ers: ErrorRecoverySet) {\n        if (tokenId !== undefined) {\n            tokenTable[tokenId] = new TokenInfo(tokenId, reservation, binopPrecedence,\n                                              binopNodeType, unopPrecedence, unopNodeType, text, ers);\n            if (binopNodeType != NodeType.None) {\n                nodeTypeTable[binopNodeType] = text;\n                nodeTypeToTokTable[binopNodeType] = tokenId;\n            }\n            if (unopNodeType != NodeType.None) {\n                nodeTypeTable[unopNodeType] = text;\n            }\n        }\n    }\n\n    setTokenInfo(TokenID.Any, Reservation.TypeScript, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.None, NodeType.None, "any", ErrorRecoverySet.PrimType);\n    setTokenInfo(TokenID.Bool, Reservation.TypeScript, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.None, NodeType.None, "bool", ErrorRecoverySet.PrimType);\n    setTokenInfo(TokenID.Break, Reservation.TypeScriptAndJS, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.None, NodeType.None, "break", ErrorRecoverySet.Stmt);\n    setTokenInfo(TokenID.Case, Reservation.TypeScriptAndJS, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.None, NodeType.None, "case", ErrorRecoverySet.SCase);\n    setTokenInfo(TokenID.Catch, Reservation.TypeScriptAndJS, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.None, NodeType.None, "catch", ErrorRecoverySet.Catch);\n    setTokenInfo(TokenID.Class, Reservation.TypeScriptAndJSFuture, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.None, NodeType.None, "class", ErrorRecoverySet.TypeScriptS);\n    setTokenInfo(TokenID.Const, Reservation.TypeScri';
var v27200 = v27201 + 'ptAndJSFuture, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.None, NodeType.None, "const", ErrorRecoverySet.Var);\n    setTokenInfo(TokenID.Continue, Reservation.TypeScriptAndJS, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.None, NodeType.None, "continue", ErrorRecoverySet.Stmt);\n    setTokenInfo(TokenID.Debugger, Reservation.TypeScriptAndJS, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.None, NodeType.Debugger, "debugger", ErrorRecoverySet.Stmt);\n    setTokenInfo(TokenID.Default, Reservation.TypeScriptAndJS, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.None, NodeType.None, "default", ErrorRecoverySet.SCase);\n    setTokenInfo(TokenID.Delete, Reservation.TypeScriptAndJS, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.Unary, NodeType.Delete, "delete", ErrorRecoverySet.Prefix);\n    setTokenInfo(TokenID.Do, Reservation.TypeScriptAndJS, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.None, NodeType.None, "do", ErrorRecoverySet.Stmt);\n    setTokenInfo(TokenID.Else, Reservation.TypeScriptAndJS, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.None, NodeType.None, "else", ErrorRecoverySet.Else);\n    setTokenInfo(TokenID.Enum, Reservation.TypeScriptAndJSFuture, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.None, NodeType.None, "enum", ErrorRecoverySet.TypeScriptS);\n    setTokenInfo(TokenID.Export, Reservation.TypeScriptAndJSFuture, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.None, NodeType.None, "export", ErrorRecoverySet.TypeScriptS);\n    setTokenInfo(TokenID.Extends, Reservation.TypeScriptAndJSFuture, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.None, NodeType.None, "extends", ErrorRecoverySet.None);\n    setTokenInfo(TokenID.Declare, Reservation.TypeScript, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.None, NodeType.None, "declare", ErrorRecoverySet.Stmt);\n    setTokenInfo(TokenID.False, Reservation.TypeScriptAndJS, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.None, NodeType.None, "false", ErrorRecoverySet.RLit);\n    setTokenInfo(TokenID.Finally, Reservation.TypeScriptAndJS, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.None, NodeType.None, "finally", ErrorRecoverySet.Catch);\n    setTokenInfo(TokenID.For, Reservation.TypeScriptAndJS, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.None, NodeType.None, "for", ErrorRecoverySet.Stmt);\n    setTokenInfo(TokenID.Function, Reservation.TypeScriptAndJS, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.None, NodeType.None, "function", ErrorRecoverySet.Func);\n    setTokenInfo(TokenID.Constructor, Reservation.TypeScriptAndJSFutureStrict, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.None, NodeType.None, "constructor", ErrorRecoverySet.Func);\n    setTokenInfo(TokenID.Get, Reservation.TypeScript, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.None, NodeType.None, "get", ErrorRecoverySet.Func);\n    setTokenInfo(TokenID.Set, Reservation.TypeScript, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.None, NodeType.None, "set", ErrorRecoverySet.Func);\n    setTokenInfo(TokenID.If, Reservation.TypeScriptAndJS, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.None, NodeType.None, "if", ErrorRecoverySet.Stmt);\n    setTokenInfo(TokenID.Implements, Reservation.TypeScriptAndJSFutureStrict, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.None, NodeType.None, "implements", ErrorRecoverySet.None);\n    setTokenInfo(TokenID.Import, Reservation.TypeScriptAndJSFuture, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.None, NodeType.None, "import", ErrorRecoverySet.TypeScriptS);\n    setTokenInfo(TokenID.In, Reservation.TypeScriptAndJS, OperatorPrecedence.Relational, NodeType.In, OperatorPrecedence.None, NodeType.None, "in", ErrorRecoverySet.None);\n    setTokenInfo(TokenID.InstanceOf, Reservation.TypeScriptAndJS, OperatorPrecedence.Relational, NodeType.InstOf, OperatorPrecedence.None, NodeType.None, "instanceof", ErrorRecoverySet.BinOp);\n    setTokenInfo(TokenID.Interface, Reservation.TypeScriptAndJSFutureStrict, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.None, NodeType.None, "interface", ErrorRecoverySet.TypeScriptS);\n    setTokenInfo(TokenID.Let, Reservation.JavascriptFutureStrict, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.None, NodeType.None, "let", ErrorRecoverySet.None);\n    setTokenInfo(TokenID.Module, Reservation.TypeScript, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.None, NodeType.None, "module", ErrorRecoverySet.TypeScriptS);\n    setTokenInfo(TokenID.New, Reservation.TypeScriptAndJS, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.None, NodeType.None, "new", ErrorRecoverySet.PreOp);\n    setTokenInfo(TokenID.Number, Reservation.TypeScript, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.None, NodeType.None, "number", ErrorRecoverySet.PrimType);\n    setTokenInfo(TokenID.Nu';
var v27199 = v27200 + 'll, Reservation.TypeScriptAndJS, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.None, NodeType.None, "null", ErrorRecoverySet.RLit);\n    setTokenInfo(TokenID.Package, Reservation.JavascriptFutureStrict, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.None, NodeType.None, "package", ErrorRecoverySet.None);\n    setTokenInfo(TokenID.Private, Reservation.TypeScriptAndJSFutureStrict, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.None, NodeType.None, "private", ErrorRecoverySet.TypeScriptS);\n    setTokenInfo(TokenID.Protected, Reservation.JavascriptFutureStrict, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.None, NodeType.None, "protected", ErrorRecoverySet.None);\n    setTokenInfo(TokenID.Public, Reservation.TypeScriptAndJSFutureStrict, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.None, NodeType.None, "public", ErrorRecoverySet.TypeScriptS);\n    setTokenInfo(TokenID.Return, Reservation.TypeScriptAndJS, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.None, NodeType.None, "return", ErrorRecoverySet.Stmt);\n    setTokenInfo(TokenID.Static, Reservation.TypeScriptAndJSFutureStrict, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.None, NodeType.None, "static", ErrorRecoverySet.None);\n    setTokenInfo(TokenID.String, Reservation.TypeScript, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.None, NodeType.None, "string", ErrorRecoverySet.PrimType);\n    setTokenInfo(TokenID.Super, Reservation.TypeScriptAndJSFuture, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.None, NodeType.None, "super", ErrorRecoverySet.RLit);\n    setTokenInfo(TokenID.Switch, Reservation.TypeScriptAndJS, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.None, NodeType.None, "switch", ErrorRecoverySet.Stmt);\n    setTokenInfo(TokenID.This, Reservation.TypeScriptAndJS, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.None, NodeType.None, "this", ErrorRecoverySet.RLit);\n    setTokenInfo(TokenID.Throw, Reservation.TypeScriptAndJS, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.None, NodeType.None, "throw", ErrorRecoverySet.Stmt);\n    setTokenInfo(TokenID.True, Reservation.TypeScriptAndJS, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.None, NodeType.None, "true", ErrorRecoverySet.RLit);\n    setTokenInfo(TokenID.Try, Reservation.TypeScriptAndJS, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.None, NodeType.None, "try", ErrorRecoverySet.Stmt);\n    setTokenInfo(TokenID.TypeOf, Reservation.TypeScriptAndJS, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.Unary, NodeType.Typeof, "typeof", ErrorRecoverySet.Prefix);\n    setTokenInfo(TokenID.Var, Reservation.TypeScriptAndJS, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.None, NodeType.None, "var", ErrorRecoverySet.Var);\n    setTokenInfo(TokenID.Void, Reservation.TypeScriptAndJS, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.Unary, NodeType.Void, "void", ErrorRecoverySet.Prefix);\n    setTokenInfo(TokenID.With, Reservation.TypeScriptAndJS, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.None, NodeType.With, "with", ErrorRecoverySet.Stmt);\n    setTokenInfo(TokenID.While, Reservation.TypeScriptAndJS, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.None, NodeType.None, "while", ErrorRecoverySet.While);\n    setTokenInfo(TokenID.Yield, Reservation.JavascriptFutureStrict, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.None, NodeType.None, "yield", ErrorRecoverySet.None);\n\n    setTokenInfo(TokenID.Identifier, Reservation.None, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.None, NodeType.None, "identifier", ErrorRecoverySet.ID);\n    setTokenInfo(TokenID.NumberLiteral, Reservation.None, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.None, NodeType.None, "numberLiteral", ErrorRecoverySet.Literal);\n    setTokenInfo(TokenID.RegularExpressionLiteral, Reservation.None, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.None, NodeType.None, "regex", ErrorRecoverySet.RegExp);\n    setTokenInfo(TokenID.StringLiteral, Reservation.None, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.None, NodeType.None, "qstring", ErrorRecoverySet.Literal);\n\n    // Non-operator non-identifier tokens\n    setTokenInfo(TokenID.Semicolon, Reservation.None, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.None, NodeType.None, ";", ErrorRecoverySet.SColon); // ;\n    setTokenInfo(TokenID.CloseParen, Reservation.None, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.None, NodeType.None, ")", ErrorRecoverySet.RParen); // )\n    setTokenInfo(TokenID.CloseBracket, Reservation.None, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.None, NodeType.None, "]", ErrorRecoverySet.RBrack); // ]\n    setTokenInfo(TokenID.OpenBrace, Reservation.None, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.None, NodeType.None, "{", ErrorRecoverySet.LCurly); // {\n    setToken';
var v27198 = v27199 + 'Info(TokenID.CloseBrace, Reservation.None, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.None, NodeType.None, "}", ErrorRecoverySet.RCurly); // }\n    setTokenInfo(TokenID.DotDotDot, Reservation.None, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.None, NodeType.None, "...", ErrorRecoverySet.None); // ...\n\n    // Operator non-identifier tokens\n    setTokenInfo(TokenID.Comma, Reservation.None, OperatorPrecedence.Comma, NodeType.Comma, OperatorPrecedence.None, NodeType.None, ",", ErrorRecoverySet.Comma); // ,\n    setTokenInfo(TokenID.Equals, Reservation.None, OperatorPrecedence.Assignment, NodeType.Asg, OperatorPrecedence.None, NodeType.None, "=", ErrorRecoverySet.Asg); // =\n    setTokenInfo(TokenID.PlusEquals, Reservation.None, OperatorPrecedence.Assignment, NodeType.AsgAdd, OperatorPrecedence.None, NodeType.None, "+=", ErrorRecoverySet.BinOp); // +=\n    setTokenInfo(TokenID.MinusEquals, Reservation.None, OperatorPrecedence.Assignment, NodeType.AsgSub, OperatorPrecedence.None, NodeType.None, "-=", ErrorRecoverySet.BinOp); // -=\n    setTokenInfo(TokenID.AsteriskEquals, Reservation.None, OperatorPrecedence.Assignment, NodeType.AsgMul, OperatorPrecedence.None, NodeType.None, "*=", ErrorRecoverySet.BinOp); // *=\n\n    setTokenInfo(TokenID.SlashEquals, Reservation.None, OperatorPrecedence.Assignment, NodeType.AsgDiv, OperatorPrecedence.None, NodeType.None, "/=", ErrorRecoverySet.BinOp); // /=\n    setTokenInfo(TokenID.PercentEquals, Reservation.None, OperatorPrecedence.Assignment, NodeType.AsgMod, OperatorPrecedence.None, NodeType.None, "%=", ErrorRecoverySet.BinOp); // %=\n    setTokenInfo(TokenID.AmpersandEquals, Reservation.None, OperatorPrecedence.Assignment, NodeType.AsgAnd, OperatorPrecedence.None, NodeType.None, "&=", ErrorRecoverySet.BinOp); // &=\n    setTokenInfo(TokenID.CaretEquals, Reservation.None, OperatorPrecedence.Assignment, NodeType.AsgXor, OperatorPrecedence.None, NodeType.None, "^=", ErrorRecoverySet.BinOp); // ^=\n    setTokenInfo(TokenID.BarEquals, Reservation.None, OperatorPrecedence.Assignment, NodeType.AsgOr, OperatorPrecedence.None, NodeType.None, "|=", ErrorRecoverySet.BinOp); // |=\n    setTokenInfo(TokenID.LessThanLessThanEquals, Reservation.None, OperatorPrecedence.Assignment, NodeType.AsgLsh, OperatorPrecedence.None, NodeType.None, "<<=", ErrorRecoverySet.BinOp); // <<=\n    setTokenInfo(TokenID.GreaterThanGreaterThanEquals, Reservation.None, OperatorPrecedence.Assignment, NodeType.AsgRsh, OperatorPrecedence.None, NodeType.None, ">>=", ErrorRecoverySet.BinOp); // >>=\n    setTokenInfo(TokenID.GreaterThanGreaterThanGreaterThanEquals, Reservation.None, OperatorPrecedence.Assignment, NodeType.AsgRs2, OperatorPrecedence.None, NodeType.None, ">>>=", ErrorRecoverySet.BinOp); // >>>=\n    setTokenInfo(TokenID.Question, Reservation.None, OperatorPrecedence.Conditional, NodeType.ConditionalExpression, OperatorPrecedence.None, NodeType.None, "?", ErrorRecoverySet.BinOp); // ?\n    setTokenInfo(TokenID.Colon, Reservation.None, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.None, NodeType.None, ":", ErrorRecoverySet.Colon); // :\n    setTokenInfo(TokenID.BarBar, Reservation.None, OperatorPrecedence.LogicalOr, NodeType.LogOr, OperatorPrecedence.None, NodeType.None, "||", ErrorRecoverySet.BinOp); // ||\n    setTokenInfo(TokenID.AmpersandAmpersand, Reservation.None, OperatorPrecedence.LogicalAnd, NodeType.LogAnd, OperatorPrecedence.None, NodeType.None, "&&", ErrorRecoverySet.BinOp); // &&\n    setTokenInfo(TokenID.Bar, Reservation.None, OperatorPrecedence.BitwiseOr, NodeType.Or, OperatorPrecedence.None, NodeType.None, "|", ErrorRecoverySet.BinOp); // |\n    setTokenInfo(TokenID.Caret, Reservation.None, OperatorPrecedence.BitwiseExclusiveOr, NodeType.Xor, OperatorPrecedence.None, NodeType.None, "^", ErrorRecoverySet.BinOp); // ^\n    setTokenInfo(TokenID.And, Reservation.None, OperatorPrecedence.BitwiseAnd, NodeType.And, OperatorPrecedence.None, NodeType.None, "&", ErrorRecoverySet.BinOp); // &\n    setTokenInfo(TokenID.EqualsEquals, Reservation.None, OperatorPrecedence.Equality, NodeType.Eq, OperatorPrecedence.None, NodeType.None, "==", ErrorRecoverySet.BinOp); // ==\n    setTokenInfo(TokenID.ExclamationEquals, Reservation.None, OperatorPrecedence.Equality, NodeType.Ne, OperatorPrecedence.None, NodeType.None, "!=", ErrorRecoverySet.BinOp); // !=\n    setTokenInfo(TokenID.EqualsEqualsEquals, Reservation.None, OperatorPrecedence.Equality, NodeType.Eqv, OperatorPrecedence.None, NodeType.None, "===", ErrorRecoverySet.BinOp); // ===\n    setTokenInfo(TokenID.ExclamationEqualsEquals, Reservation.None, OperatorPrecedence.Equality, NodeType.NEqv, OperatorPrecedence.None, NodeType.None, "!==", ErrorRecoverySet.BinOp); // !==\n    setTokenInfo(TokenID.LessThan, Reservation.None, OperatorPrecedence.Relational, NodeType.Lt, OperatorPrecedence.None, NodeType.None, "<", ErrorRecoverySet.BinOp); // <\n    setTokenInfo(TokenID.LessThanEquals, Reservation.None, OperatorPrecedence.Relational, NodeTyp';
var v27197 = v27198 + 'e.Le, OperatorPrecedence.None, NodeType.None, "<=", ErrorRecoverySet.BinOp); // <=\n    setTokenInfo(TokenID.GreaterThan, Reservation.None, OperatorPrecedence.Relational, NodeType.Gt, OperatorPrecedence.None, NodeType.None, ">", ErrorRecoverySet.BinOp); // >\n    setTokenInfo(TokenID.GreaterThanEquals, Reservation.None, OperatorPrecedence.Relational, NodeType.Ge, OperatorPrecedence.None, NodeType.None, ">=", ErrorRecoverySet.BinOp); // >=\n    setTokenInfo(TokenID.LessThanLessThan, Reservation.None, OperatorPrecedence.Shift, NodeType.Lsh, OperatorPrecedence.None, NodeType.None, "<<", ErrorRecoverySet.BinOp); // <<\n    setTokenInfo(TokenID.GreaterThanGreaterThan, Reservation.None, OperatorPrecedence.Shift, NodeType.Rsh, OperatorPrecedence.None, NodeType.None, ">>", ErrorRecoverySet.BinOp); // >>\n    setTokenInfo(TokenID.GreaterThanGreaterThanGreaterThan, Reservation.None, OperatorPrecedence.Shift, NodeType.Rs2, OperatorPrecedence.None, NodeType.None, ">>>", ErrorRecoverySet.BinOp); // >>>\n    setTokenInfo(TokenID.Plus, Reservation.None, OperatorPrecedence.Additive, NodeType.Add, OperatorPrecedence.Unary, NodeType.Pos, "+", ErrorRecoverySet.AddOp); // +\n    setTokenInfo(TokenID.Minus, Reservation.None, OperatorPrecedence.Additive, NodeType.Sub, OperatorPrecedence.Unary, NodeType.Neg, "-", ErrorRecoverySet.AddOp); // -\n    setTokenInfo(TokenID.Asterisk, Reservation.None, OperatorPrecedence.Multiplicative, NodeType.Mul, OperatorPrecedence.None, NodeType.None, "*", ErrorRecoverySet.BinOp); // *\n    setTokenInfo(TokenID.Slash, Reservation.None, OperatorPrecedence.Multiplicative, NodeType.Div, OperatorPrecedence.None, NodeType.None, "/", ErrorRecoverySet.BinOp); // /\n    setTokenInfo(TokenID.Percent, Reservation.None, OperatorPrecedence.Multiplicative, NodeType.Mod, OperatorPrecedence.None, NodeType.None, "%", ErrorRecoverySet.BinOp); // %\n    setTokenInfo(TokenID.Tilde, Reservation.None, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.Unary, NodeType.Not, "~", ErrorRecoverySet.PreOp); // ~\n    setTokenInfo(TokenID.Exclamation, Reservation.None, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.Unary, NodeType.LogNot, "!", ErrorRecoverySet.PreOp); // !\n    setTokenInfo(TokenID.PlusPlus, Reservation.None, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.Unary, NodeType.IncPre, "++", ErrorRecoverySet.PreOp); // ++\n    setTokenInfo(TokenID.MinusMinus, Reservation.None, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.Unary, NodeType.DecPre, "--", ErrorRecoverySet.PreOp); // --\n    setTokenInfo(TokenID.OpenParen, Reservation.None, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.None, NodeType.None, "(", ErrorRecoverySet.LParen); // (\n    setTokenInfo(TokenID.OpenBracket, Reservation.None, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.None, NodeType.None, "[", ErrorRecoverySet.LBrack); // [\n    setTokenInfo(TokenID.Dot, Reservation.None, OperatorPrecedence.Unary, NodeType.None, OperatorPrecedence.None, NodeType.None, ".", ErrorRecoverySet.Dot); // .\n    setTokenInfo(TokenID.EndOfFile, Reservation.None, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.None, NodeType.None, "<EOF>", ErrorRecoverySet.EOF); // EOF\n    setTokenInfo(TokenID.EqualsGreaterThan, Reservation.None, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.None, NodeType.None, "=>", ErrorRecoverySet.None); // =>\n\n    export function lookupToken(tokenId: TokenID): TokenInfo {\n        return tokenTable[tokenId];\n    }\n\n    export enum TokenClass {\n        Punctuation,\n        Keyword,\n        Operator,\n        Comment,\n        Whitespace,\n        Identifier,\n        NumberLiteral,\n        StringLiteral,\n        RegExpLiteral,\n    }\n\n    export class SavedToken {\n        constructor (public tok: Token, public minChar: number, public limChar: number) { }\n    }\n\n    export class Token {\n        constructor (public tokenId: TokenID) {\n        }\n\n        public toString() {\n            return "token: " + this.tokenId + " " + this.getText() + " (" + (<any>TokenID)._map[this.tokenId] + ")";\n        }\n\n        public print(line: number, outfile) {\n            outfile.WriteLine(this.toString() + ",on line" + line);\n        }\n\n        public getText(): string {\n            return tokenTable[this.tokenId].text;\n        }\n\n        public classification(): TokenClass {\n            if (this.tokenId <= TokenID.LimKeyword) {\n                return TokenClass.Keyword;\n            }\n            else {\n                var tokenInfo = lookupToken(this.tokenId);\n                if (tokenInfo != undefined) {\n                    if ((tokenInfo.unopNodeType != NodeType.None) ||\n                        (tokenInfo.binopNodeType != NodeType.None)) {\n                        return TokenClass.Operator;\n                    }\n                }\n            }\n\n            return TokenClass.Punctuation;\n        }\n    }\n\n    export class NumberLiteralToken extends Token {\n        constructor (public value: number,';
var v27196 = v27197 + ' public hasEmptyFraction?: bool) {\n            super(TokenID.NumberLiteral);\n        }\n\n        public getText(): string {\n            return this.hasEmptyFraction ? this.value.toString() + ".0" : this.value.toString();\n        }\n\n        public classification(): TokenClass {\n            return TokenClass.NumberLiteral;\n        }\n    }\n\n    export class StringLiteralToken extends Token {\n        constructor (public value: string) {\n            super(TokenID.StringLiteral);\n        }\n\n        public getText(): string {\n            return this.value;\n        }\n\n        public classification(): TokenClass {\n            return TokenClass.StringLiteral;\n        }\n    }\n\n    export class IdentifierToken extends Token {\n        constructor (public value: string, public hasEscapeSequence : bool) {\n            super(TokenID.Identifier);\n        }\n        public getText(): string {\n            return this.value;\n        }\n        public classification(): TokenClass {\n            return TokenClass.Identifier;\n        }\n    }\n\n    export class WhitespaceToken extends Token {\n        constructor (tokenId: TokenID, public value: string) {\n            super(tokenId);\n        }\n\n        public getText(): string {\n            return this.value;\n        }\n\n        public classification(): TokenClass {\n            return TokenClass.Whitespace;\n        }\n    }\n\n    export class CommentToken extends Token {\n        constructor (tokenID: TokenID, public value: string, public isBlock: bool, public startPos: number, public line: number, public endsLine: bool) {\n            super(tokenID);\n        }\n\n        public getText(): string {\n            return this.value;\n        }\n\n        public classification(): TokenClass {\n            return TokenClass.Comment;\n        }\n    }\n\n    export class RegularExpressionLiteralToken extends Token {\n        constructor(public regex) {\n            super(TokenID.RegularExpressionLiteral);\n        }\n\n        public getText(): string {\n            return this.regex.toString();\n        }\n\n        public classification(): TokenClass {\n            return TokenClass.RegExpLiteral;\n        }\n    }\n\n    // TODO: new with length TokenID.LimFixed\n    export var staticTokens = new Token[];\n    export function initializeStaticTokens() {\n        for (var i = 0; i <= TokenID.LimFixed; i++) {\n            staticTokens[i] = new Token(i);\n        }\n    }\n}//\n// Copyright (c) Microsoft Corporation.  All rights reserved.\n// \n// Licensed under the Apache License, Version 2.0 (the "License");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an "AS IS" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n\n///<reference path=\'typescript.ts\'/>\n///<reference path=\'io.ts\'/>\n///<reference path=\'optionsParser.ts\'/>\n\nclass CommandLineHost implements TypeScript.IResolverHost {\n\n    public pathMap: any = {};\n    public resolvedPaths: any = {};\n\n    constructor(public compilationSettings: TypeScript.CompilationSettings) { \n    }\n\n    public getPathIdentifier(path: string) { \n        return this.compilationSettings.useCaseSensitiveFileResolution ? path : path.toLocaleUpperCase();\n    }\n\n    public isResolved(path: string) {\n        return this.resolvedPaths[this.getPathIdentifier(this.pathMap[path])] != undefined;\n    }\n\n    public resolveCompilationEnvironment(preEnv: TypeScript.CompilationEnvironment,\n        resolver: TypeScript.ICodeResolver,\n        traceDependencies: bool): TypeScript.CompilationEnvironment {\n        var resolvedEnv = new TypeScript.CompilationEnvironment(preEnv.compilationSettings, preEnv.ioHost);\n\n        var nCode = preEnv.code.length;\n        var path = "";\n\n        var postResolutionError = \n            (errorFile: string, errorMessage: string) => {\n                TypeScript.CompilerDiagnostics.debugPrint("Could not resolve file \'" + errorFile + "\'" + (errorMessage == "" ? "" : ": " + errorMessage));\n            }\n\n        var resolutionDispatcher: TypeScript.IResolutionDispatcher = {\n            postResolutionError: postResolutionError,\n            postResolution: (path: string, code: TypeScript.ISourceText) => {\n                var pathId = this.getPathIdentifier(path);\n                if (!this.resolvedPaths[pathId]) {\n                    resolvedEnv.code.push(<TypeScript.SourceUnit>code);\n                    this.resolvedPaths[pathId] = true;\n                }\n            }\n        };\n\n        for (var i = 0; i < nCode; i++) {\n            path = TypeScript.switchToForwardSlashes(preEnv.ioHost.resolvePath(preEnv.code[i].path));\n            this.pathMap[preEnv.code[i].path] = path;\n            resolver.resolveCode(path, "", false, r';
var v27195 = v27196 + 'esolutionDispatcher);\n        }\n\n        return resolvedEnv;\n    }\n}\nclass BatchCompiler {\n    public compilationSettings: TypeScript.CompilationSettings;\n    public compilationEnvironment: TypeScript.CompilationEnvironment;\n    public resolvedEnvironment: TypeScript.CompilationEnvironment = null;\n    public hasResolveErrors: bool = false;\n    public compilerVersion = "0.8.2.0";\n    public printedVersion = false;\n\n    constructor (public ioHost: IIO) { \n        this.compilationSettings = new TypeScript.CompilationSettings();\n        this.compilationEnvironment = new TypeScript.CompilationEnvironment(this.compilationSettings, this.ioHost);\n    }\n\n    public resolve() {\n        var resolver = new TypeScript.CodeResolver(this.compilationEnvironment);\n        var commandLineHost = new CommandLineHost(this.compilationSettings);\n        var ret = commandLineHost.resolveCompilationEnvironment(this.compilationEnvironment, resolver, true);\n\n        // Reset resolve error status\n        this.hasResolveErrors = false;\n\n        for (var i = 0; i < this.compilationEnvironment.code.length; i++) {\n            if (!commandLineHost.isResolved(this.compilationEnvironment.code[i].path)) {\n                this.hasResolveErrors = true;\n                var path = this.compilationEnvironment.code[i].path;\n                if (!TypeScript.isSTRFile(path) && !TypeScript.isDSTRFile(path) && !TypeScript.isTSFile(path) && !TypeScript.isDTSFile(path)) {\n                    this.ioHost.stderr.WriteLine("Unknown extension for file: \\""+path+"\\". Only .ts and .d.ts extensions are allowed.");\n                }\n                else {\n                    this.ioHost.stderr.WriteLine("Error reading file \\"" + path + "\\": File not found");\n                }\n            }\n        }\n\n        return ret;\n    }\n    \n    /// Do the actual compilation reading from input files and\n    /// writing to output file(s).\n    public compile(): bool {\n        var compiler: TypeScript.TypeScriptCompiler;\n\n        compiler = new TypeScript.TypeScriptCompiler(this.ioHost.stderr, new TypeScript.NullLogger(), this.compilationSettings);\n        compiler.setErrorOutput(this.ioHost.stderr);\n        compiler.setErrorCallback(\n            (minChar, charLen, message, unitIndex) => {\n                compiler.errorReporter.hasErrors = true;\n                var fname = this.resolvedEnvironment.code[unitIndex].path;\n                var lineCol = { line: -1, col: -1 };\n                compiler.parser.getSourceLineCol(lineCol, minChar);\n                // line is 1-base, col, however, is 0-base. add 1 to the col before printing the message\n                var msg = fname + " (" + lineCol.line + "," + (lineCol.col + 1) + "): " + message;\n                if (this.compilationSettings.errorRecovery) {\n                    this.ioHost.stderr.WriteLine(msg);\n                } else {\n                    throw new SyntaxError(msg);\n                }\n            });\n\n        if (this.compilationSettings.emitComments) {\n            compiler.emitCommentsToOutput();\n        }\n\n        var consumeUnit = (code: TypeScript.SourceUnit, addAsResident: bool) => {\n            try {\n                // if file resolving is disabled, the file\'s content will not yet be loaded\n\n                if (!this.compilationSettings.resolve) {\n                    code.content = this.ioHost.readFile(code.path);\n                    // If declaration files are going to be emitted, \n                    // preprocess the file contents and add in referenced files as well\n                    if (this.compilationSettings.generateDeclarationFiles) {\n                        TypeScript.CompilerDiagnostics.assert(code.referencedFiles == null, "With no resolve option, referenced files need to null");\n                        code.referencedFiles = TypeScript.getReferencedFiles(code);\n                    }\n                }\n\n                if (code.content != null) {\n                    if (this.compilationSettings.parseOnly) {\n                        compiler.parseUnit(code.content, code.path);\n                    }\n                    else {\n                        if (this.compilationSettings.errorRecovery) {\n                            compiler.parser.setErrorRecovery(this.ioHost.stderr);\n                        }\n                        compiler.addUnit(code.content, code.path, addAsResident, code.referencedFiles);\n                    }\n                }\n            }\n            catch (err) {\n                compiler.errorReporter.hasErrors = true;\n                // This includes syntax errors thrown from error callback if not in recovery mode\n                this.ioHost.stderr.WriteLine(err.message);\n            }\n\n        }\n\n        for (var iCode = 0 ; iCode < this.resolvedEnvironment.code.length; iCode++) {\n            if (!this.compilationSettings.parseOnly || (iCode > 0)) {\n                consumeUnit(this.resolvedEnvironment.code[iCode], false);\n            }\n        }\n\n        var emitterIOHost = {\n          ';
var v27194 = v27195 + "  createFile: (fileName: string, useUTF8?: bool) => IOUtils.createFileAndFolderStructure(this.ioHost, fileName, useUTF8),\n            directoryExists: this.ioHost.directoryExists,\n            fileExists: this.ioHost.fileExists,\n            resolvePath: this.ioHost.resolvePath\n        };\n\n        try {\n            if (!this.compilationSettings.parseOnly) {\n                compiler.typeCheck();\n                compiler.emit(emitterIOHost);\n                compiler.emitDeclarations();\n            }\n            else {\n                compiler.emitAST(emitterIOHost);\n            }\n        } catch (err) {\n            compiler.errorReporter.hasErrors = true;\n            // Catch emitter exceptions\n            if (err.message != \"EmitError\") {\n                throw err;\n            }\n        }\n\n        return compiler.errorReporter.hasErrors;\n    }\n\n    // Execute the provided inputs\n    public run() {\n        for (var i = 0; i < this.compilationEnvironment.code.length; i++) {\n            var unit = this.compilationEnvironment.code[i];\n            \n            var outputFileName: string = unit.path;\n            if (TypeScript.isTSFile(outputFileName)) {\n                outputFileName = outputFileName.replace(/\\.ts$/, \".js\");\n            } else if (TypeScript.isSTRFile(outputFileName)) {\n                outputFileName = outputFileName.replace(/\\.str$/, \".js\");\n            }\n            if (this.ioHost.fileExists(outputFileName)) {\n                var unitRes = this.ioHost.readFile(outputFileName)\n                this.ioHost.run(unitRes, outputFileName);\n            }\n        }\n    }\n\n    /// Begin batch compilation\n    public batchCompile() {\n        TypeScript.CompilerDiagnostics.diagnosticWriter = { Alert: (s: string) => { this.ioHost.printLine(s); } }\n\n        var code: TypeScript.SourceUnit;\n\n        var opts = new OptionsParser(this.ioHost);\n\n        opts.option('out', {\n            usage: 'Concatenate and emit output to single file | Redirect output structure to the directory',\n            type: 'file|directory',\n            set: (str) => {\n                this.compilationSettings.outputOption = str;\n            }\n        });\n\n        opts.option('style', {\n            usage: 'Select style checking options (examples --style requireSemi:off or --style \"eqeqeq;bitwise:off\")',\n            experimental: true,\n            set: (str) => {\n                this.compilationSettings.setStyleOptions(str);\n            }\n        });\n\n        opts.flag('sourcemap', {\n            usage: 'Generates corresponding .map file',\n            set: () => {\n                this.compilationSettings.mapSourceFiles = true;\n            }\n        });\n\n        opts.flag('declaration', {\n            usage: 'Generates corresponding .d.ts file',\n            set: () => {\n                this.compilationSettings.generateDeclarationFiles = true;\n            }\n        });\n\n        if (this.ioHost.watchFile) {\n            opts.flag('watch', {\n                usage: 'Watch output files',\n                set: () => {\n                    this.compilationSettings.watch = true;\n                }\n            }, 'w');\n        }\n\n        opts.flag('exec', {\n            usage: 'Execute the script after compilation',\n            set: () => {\n                this.compilationSettings.exec = true;\n            }\n        }, 'e');\n\n        opts.flag('parse', {\n            usage: 'Parse only',\n            experimental: true,\n            set: () => {\n                this.compilationSettings.parseOnly = true;\n            }\n        });\n\n        opts.flag('minw', {\n            usage: 'Minimize whitespace',\n            experimental: true,\n            set: () => { this.compilationSettings.minWhitespace = true; }\n        }, 'mw');\n\n        opts.flag('const', {\n            usage: 'Propagate constants to emitted code',\n            experimental: true,\n            set: () => { this.compilationSettings.propagateConstants = true; }\n        });\n\n        opts.flag('errorrecovery', {\n            usage: 'Enable error recovery',\n            experimental: true,\n            set: () => {\n                this.compilationSettings.errorRecovery = true;\n            }\n        }, 'er');\n\n        opts.flag('comments', {\n            usage: 'Emit comments to output',\n            set: () => {\n                this.compilationSettings.emitComments = true;\n            }\n        }, 'c');\n\n        opts.flag('cflow', {\n            usage: 'Control flow',\n            experimental: true,\n            set: () => {\n                this.compilationSettings.controlFlow = true;\n            }\n        });\n\n        opts.flag('cflowp', {\n            usage: 'Print control flow',\n            experimental: true,\n            set: () => {\n                this.compilationSettings.controlFlow = true;\n                this.compilationSettings.printControlFlow = true;\n            }\n        });\n\n        opts.flag('cflowu', {\n            usage: 'Print Use Def control flow',\n            experimental: true,\n            set: () ";
var v27193 = v27194 + "=> {\n                this.compilationSettings.controlFlow = true;\n                this.compilationSettings.controlFlowUseDef = true;\n            }\n        });\n\n        opts.flag('noerroronwith', {\n            usage: 'Allow with statements',\n            experimental: true,\n            set: () => {\n                this.compilationSettings.errorOnWith = false;\n            }\n        });\n\n        opts.flag('noresolve', {\n            usage: 'Skip resolution and preprocessing',\n            experimental: true,\n            set: () => {\n                this.compilationSettings.resolve = false;\n                this.compilationSettings.preprocess = false;\n            }\n        });\n\n        opts.flag('debug', {\n            usage: 'Print debug output',\n            experimental: true,\n            set: () => {\n                TypeScript.CompilerDiagnostics.debug = true;\n            }\n        });\n\n        opts.flag('canCallDefinitionSignature', {\n            usage: 'Allows you to call the definition signature of an overload group',\n            experimental: true,\n            set: () => {\n                this.compilationSettings.canCallDefinitionSignature = true;\n            }\n        });\n\n        opts.flag('nooptimizemodules', {\n            usage: 'Do not optimize module codegen',\n            experimental: true,\n            set: () => {\n                TypeScript.optimizeModuleCodeGen = false;\n            }\n        });\n\n        opts.flag('nolib', {\n            usage: 'Do not include a default lib.d.ts with global declarations',\n            set: () => {\n                this.compilationSettings.useDefaultLib = false;\n            }\n        });\n\n\n        opts.flag('inferProperties', {\n            usage: 'Infer class properties from top-level assignments to \\'this\\'',\n            experimental: true,\n            set: () => {\n                this.compilationSettings.inferPropertiesFromThisAssignment = true;\n            }\n        });\n\n        opts.option('target', {\n            usage: 'Specify ECMAScript target version: \"ES3\" (default), or \"ES5\"',\n            type: 'VER',\n            set: (type) => {\n                type = type.toLowerCase();\n\n                if (type === 'es3') {\n                    this.compilationSettings.codeGenTarget = TypeScript.CodeGenTarget.ES3;\n                } else if (type === 'es5') {\n                    this.compilationSettings.codeGenTarget = TypeScript.CodeGenTarget.ES5;\n                }\n                else {\n                    this.ioHost.printLine(\"ECMAScript target version '\" + type + \"' not supported.  Using default 'ES3' code generation\");\n                }\n            }\n        });\n\n        opts.option('module', {\n            usage: 'Specify module code generation: \"commonjs\" (default) or \"amd\"',\n            type: 'kind',\n            set: (type) => {\n                type = type.toLowerCase();\n\n                if (type === 'commonjs' || type === 'node') {\n                    TypeScript.moduleGenTarget = TypeScript.ModuleGenTarget.Synchronous;\n                } else if (type === 'amd') {\n                    TypeScript.moduleGenTarget = TypeScript.ModuleGenTarget.Asynchronous;\n                } else {\n                    this.ioHost.printLine(\"Module code generation '\" + type + \"' not supported.  Using default 'commonjs' code generation\");\n                }\n            }\n        });\n\n        var printedUsage = false;\n\n        opts.flag('help', {\n            usage: 'Print this message',\n            set: () => {\n                this.printVersion();\n                opts.printUsage();\n                printedUsage = true;\n            }\n        }, 'h');\n\n        opts.flag('useCaseSensitiveFileResolution', {\n            usage: 'Force file resolution to be case sensitive',\n            experimental: true,\n            set: () => {\n                this.compilationSettings.useCaseSensitiveFileResolution = true;\n            }\n        });\n\n        opts.flag('version', {\n            usage: 'Print the compiler\\'s version: ' + this.compilerVersion,\n            set: () => {\n                this.printVersion();\n            }\n        }, 'v');\n\n        opts.parse(this.ioHost.arguments);\n        \n        if (this.compilationSettings.useDefaultLib) {\n            var compilerFilePath = this.ioHost.getExecutingFilePath()\n            var binDirPath = this.ioHost.dirName(compilerFilePath);\n            var libStrPath = this.ioHost.resolvePath(binDirPath + \"/lib.d.ts\");\n            code = new TypeScript.SourceUnit(libStrPath, null);\n            this.compilationEnvironment.code.push(code);\n        }\n\n        for (var i = 0; i < opts.unnamed.length; i++) {\n            code = new TypeScript.SourceUnit(opts.unnamed[i], null);\n            this.compilationEnvironment.code.push(code);\n        }\n\n        // If no source files provided to compiler - print usage information\n        if (this.compilationEnvironment.code.length == (this.compilationSettings.useDefaultLib ? 1 : 0)) {\n            if (!printedUsage && !this.printedVersion";
var v27192 = v27193 + ') {\n                this.printVersion();\n                opts.printUsage();\n                this.ioHost.quit(1);\n            }\n            return;\n        }\n\n        var sourceFiles: TypeScript.SourceUnit[] = [];\n        if (this.compilationSettings.watch) {\n            // Capture the state before calling resolve\n            sourceFiles = this.compilationEnvironment.code.slice(0);\n        }\n\n        // Resolve file dependencies, if requested\n        this.resolvedEnvironment = this.compilationSettings.resolve ? this.resolve() : this.compilationEnvironment;\n\n        var hasCompileErrors = this.compile();\n\n        var hasErrors = hasCompileErrors || this.hasResolveErrors;\n        if (!hasErrors) {\n            if (this.compilationSettings.exec) {\n                this.run();\n            }\n        }\n\n        if (this.compilationSettings.watch) {\n            // Watch will cause the program to stick around as long as the files exist\n            this.watchFiles(sourceFiles);\n        }\n        else {  \n            // Exit with the appropriate error code\n            this.ioHost.quit(hasErrors ? 1 : 0);\n        }\n    }\n\n    public printVersion() {\n        if (!this.printedVersion) {\n            this.ioHost.printLine("Version " + this.compilerVersion);\n            this.printedVersion = true;\n        }\n    }\n\n    public watchFiles(soruceFiles: TypeScript.SourceUnit[]) {\n        if (!this.ioHost.watchFile) {\n            this.ioHost.printLine("Error: Current host does not support -w[atch] option");\n            return;\n        }\n\n        var resolvedFiles: string[] = []\n        var watchers: { [x: string]: IFileWatcher; } = {};\n\n        var addWatcher = (filename: string) => {\n            if (!watchers[filename]) {\n                var watcher = this.ioHost.watchFile(filename, onWatchedFileChange);\n                watchers[filename] = watcher;\n            }\n            else {\n                throw new Error("Cannot watch file, it is already watched.");\n            }\n        };\n\n        var removeWatcher = (filename: string) => {\n            if (watchers[filename]) {\n                watchers[filename].close();\n                delete watchers[filename];\n            }\n            else {\n                throw new Error("Cannot stop watching file, it is not being watched.");\n            }\n        };\n\n        var onWatchedFileChange = () => {\n            // Reset the state\n            this.compilationEnvironment.code = soruceFiles;\n\n            // Resolve file dependencies, if requested\n            this.resolvedEnvironment = this.compilationSettings.resolve ? this.resolve() : this.compilationEnvironment;\n\n            // Check if any new files were added to the environment as a result of the file change\n            var oldFiles = resolvedFiles;\n            var newFiles: string[] = [];\n            this.resolvedEnvironment.code.forEach((sf) => newFiles.push(sf.path));\n            newFiles = newFiles.sort();\n\n            var i = 0, j = 0;\n            while (i < oldFiles.length && j < newFiles.length) {\n\n                var compareResult = oldFiles[i].localeCompare(newFiles[j]);\n                if (compareResult == 0) {\n                    // No change here\n                    i++;\n                    j++;\n                }\n                else if (compareResult < 0) {\n                    // Entry in old list does not exist in the new one, it was removed\n                    removeWatcher(oldFiles[i]);\n                    i++;\n                }\n                else {\n                    // Entry in new list does exist in the new one, it was added\n                    addWatcher(newFiles[j]);\n                    j++;\n                }\n            }\n\n            // All remaining unmatched items in the old list have been removed\n            for (var k = i; k < oldFiles.length; k++) {\n                removeWatcher(oldFiles[k]);\n            }\n\n            // All remaing unmatched items in the new list have been added\n            for (var k = j; k < newFiles.length; k++) {\n                addWatcher(newFiles[k]);\n            }\n\n            // Update the state\n            resolvedFiles = newFiles;;\n\n            // Print header\n            this.ioHost.printLine("");\n            this.ioHost.printLine("Recompiling (" + new Date() + "): ");\n            resolvedFiles.forEach((f) => this.ioHost.printLine("    " + f));\n\n            // Trigger a new compilation\n            var hasCompileErrors = this.compile();\n\n            var hasErrors = hasCompileErrors || this.hasResolveErrors;\n            if (!hasErrors) {\n                if (this.compilationSettings.exec) {\n                    this.run();\n                }\n            }\n        };\n\n        // Switch to using stdout for all error messages\n        this.ioHost.stderr = this.ioHost.stdout;\n\n        // Initialize the initial list of resolved files, and add watches to them\n        this.resolvedEnvironment.code.forEach((sf) => {\n            resolvedFiles.push(sf.path);\n            addWatcher(sf.path);\n ';
var v27191 = v27192 + '       });\n        resolvedFiles.sort();\n    }\n}\n\n// Start the batch compilation using the current hosts IO\nvar batch = new BatchCompiler(IO);\nbatch.batchCompile();\n//\n// Copyright (c) Microsoft Corporation.  All rights reserved.\n// \n// Licensed under the Apache License, Version 2.0 (the "License");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an "AS IS" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n\n///<reference path=\'typescript.ts\' />\n\nmodule TypeScript {\n    export class ArrayCache {\n        public arrayType: Type;\n        public arrayBase: Type = null;\n\n        public specialize(arrInstType: Type, checker: TypeChecker): Type {\n            if (this.arrayBase == null) {\n                this.arrayBase = arrInstType.specializeType(checker.wildElm.type, this.arrayType.elementType,\n                                                   checker, true);\n            }\n            return this.arrayBase;\n        }\n    }\n\n    export class TypeComparisonInfo {\n        public onlyCaptureFirstError = false;\n        public flags: TypeRelationshipFlags = TypeRelationshipFlags.SuccessfulComparison;\n        public message = "";\n\n        public addMessageToFront(message) {\n            if (!this.onlyCaptureFirstError) {\n                this.message = this.message ? message + ":\\n\\t" + this.message : message;\n            }\n            else {\n                this.setMessage(message);\n            }\n        }\n\n        public setMessage(message) {\n            this.message = message;\n        }\n    }\n\n    export interface SignatureData {\n        parameters: ParameterSymbol[];\n        nonOptionalParameterCount: number;\n    }\n\n    export interface ApplicableSignature {\n        signature: Signature;\n        hadProvisionalErrors: bool;\n    }\n\n    export enum TypeCheckCollectionMode {\n        Resident,\n        Transient\n    }\n\n    export class PersistentGlobalTypeState {\n        public importedGlobalsTable = new ScopedMembers(new DualStringHashTable(new StringHashTable(), new StringHashTable()));\n        public importedGlobalsTypeTable = new ScopedMembers(new DualStringHashTable(new StringHashTable(), new StringHashTable()));\n\n        public importedGlobals: SymbolScopeBuilder;\n\n        // transient state\n        public globals: IHashTable = null;\n        public globalTypes: IHashTable = null;\n        public ambientGlobals: IHashTable = null;\n        public ambientGlobalTypes: IHashTable = null;\n\n        // resident state\n        public residentGlobalValues = new StringHashTable();\n        public residentGlobalTypes = new StringHashTable();\n        public residentGlobalAmbientValues = new StringHashTable();\n        public residentGlobalAmbientTypes = new StringHashTable();\n\n        // dual resident/transient state\n\n        // REVIEW: We shouldn\'t need to allocate private hash tables for these, since there\'s no private global scope\n        // REVIEW: In general, we should audit each instance of DualStringHashTable to ensure that both the primary\n        // and secondary tables are necessary.  If it\'s not necessary, we should sub in a constant sentinel value.\n        public dualGlobalValues: DualStringHashTable;\n        public dualGlobalTypes: DualStringHashTable;\n        public dualAmbientGlobalValues: DualStringHashTable;\n        public dualAmbientGlobalTypes: DualStringHashTable;\n\n        public globalScope: SymbolScope;\n\n        public voidType: Type;\n        public booleanType: Type;\n        public doubleType: Type;\n\n        public stringType: Type;\n        public anyType: Type;\n        public nullType: Type;\n        public undefinedType: Type;\n\n        // Use this flag to turn resident checking on and off\n        public residentTypeCheck: bool = true;\n\n        public mod: ModuleType = null;\n        public gloMod: TypeSymbol = null;\n\n        public wildElm: TypeSymbol = null;\n\n        constructor (public errorReporter: ErrorReporter) {\n            this.importedGlobals = new SymbolScopeBuilder(null, this.importedGlobalsTable, null, this.importedGlobalsTypeTable, null, null);\n\n            this.dualGlobalValues = new DualStringHashTable(this.residentGlobalValues, new StringHashTable());\n            this.dualGlobalTypes = new DualStringHashTable(this.residentGlobalTypes, new StringHashTable());\n            this.dualAmbientGlobalValues = new DualStringHashTable(this.residentGlobalAmbientValues, new StringHashTable());\n            this.dualAmbientGlobalTypes = new DualStringHashTable(this.residentGlobalAmbientTypes, new StringHashTable());\n\n            var dualGlobalScopedMembers = new ScopedMembers(new DualStringHashTable(this.dualGlobalValues, new StringHashTable';
var v27190 = v27191 + '()));\n            var dualGlobalScopedAmbientMembers = new ScopedMembers(new DualStringHashTable(this.dualAmbientGlobalValues, new StringHashTable()));\n            var dualGlobalScopedEnclosedTypes = new ScopedMembers(new DualStringHashTable(this.dualGlobalTypes, new StringHashTable()));\n            var dualGlobalScopedAmbientEnclosedTypes = new ScopedMembers(new DualStringHashTable(this.dualAmbientGlobalTypes, new StringHashTable()));\n\n            this.globalScope = new SymbolScopeBuilder(dualGlobalScopedMembers, dualGlobalScopedAmbientMembers, dualGlobalScopedEnclosedTypes, dualGlobalScopedAmbientEnclosedTypes, this.importedGlobals, null);\n\n            this.voidType = this.enterPrimitive(Primitive.Void, "void");\n            this.booleanType = this.enterPrimitive(Primitive.Boolean, "bool");\n            this.doubleType = this.enterPrimitive(Primitive.Double, "number");\n            this.importedGlobals.ambientEnclosedTypes.addPublicMember("number", this.doubleType.symbol);\n\n            this.stringType = this.enterPrimitive(Primitive.String, "string");\n            this.anyType = this.enterPrimitive(Primitive.Any, "any");\n            this.nullType = this.enterPrimitive(Primitive.Null, "null");\n            this.undefinedType = this.enterPrimitive(Primitive.Undefined, "undefined");\n\n            // shared global state is resident\n            this.setCollectionMode(TypeCheckCollectionMode.Resident);\n\n            this.wildElm = new TypeSymbol("_element", -1, 0, -1, new Type());\n            this.importedGlobalsTypeTable.addPublicMember(this.wildElm.name, this.wildElm);\n\n            this.mod = new ModuleType(dualGlobalScopedEnclosedTypes, dualGlobalScopedAmbientEnclosedTypes);\n            this.mod.members = dualGlobalScopedMembers;\n            this.mod.ambientMembers = dualGlobalScopedAmbientMembers;\n            this.mod.containedScope = this.globalScope;\n\n            this.gloMod = new TypeSymbol(globalId, -1, 0, -1, this.mod);\n            this.mod.members.addPublicMember(this.gloMod.name, this.gloMod);\n\n            this.defineGlobalValue("undefined", this.undefinedType);\n        }\n\n\n        public enterPrimitive(flags: number, name: string) {\n            var primitive = new Type();\n            primitive.primitiveTypeClass = flags;\n            var symbol = new TypeSymbol(name, -1, name.length, -1, primitive);\n            symbol.typeCheckStatus = TypeCheckStatus.Finished;\n            primitive.symbol = symbol;\n            this.importedGlobals.enter(null, null, symbol, this.errorReporter, true, true, true);\n            return primitive;\n        }\n\n        public setCollectionMode(mode: TypeCheckCollectionMode) {\n            this.residentTypeCheck =\n                this.dualGlobalValues.insertPrimary =\n                    this.dualGlobalTypes.insertPrimary =\n                        this.dualAmbientGlobalValues.insertPrimary =\n                            this.dualAmbientGlobalTypes.insertPrimary = mode == TypeCheckCollectionMode.Resident;\n        }\n\n        public refreshPersistentState() {\n            this.globals = new StringHashTable();\n            this.globalTypes = new StringHashTable();\n            this.ambientGlobals = new StringHashTable();\n            this.ambientGlobalTypes = new StringHashTable();\n\n            // add global types to the global scope\n            this.globalTypes.add(this.voidType.symbol.name, this.voidType.symbol);\n            this.globalTypes.add(this.booleanType.symbol.name, this.booleanType.symbol);\n            this.globalTypes.add(this.doubleType.symbol.name, this.doubleType.symbol);\n            this.globalTypes.add("number", this.doubleType.symbol);\n            this.globalTypes.add(this.stringType.symbol.name, this.stringType.symbol);\n            this.globalTypes.add(this.anyType.symbol.name, this.anyType.symbol);\n            this.globalTypes.add(this.nullType.symbol.name, this.nullType.symbol);\n            this.globalTypes.add(this.undefinedType.symbol.name, this.undefinedType.symbol);\n\n            this.dualGlobalValues.secondaryTable = this.globals;\n            this.dualGlobalTypes.secondaryTable = this.globalTypes;\n            this.dualAmbientGlobalValues.secondaryTable = this.ambientGlobals;\n            this.dualAmbientGlobalTypes.secondaryTable = this.ambientGlobalTypes;\n        }\n\n        public defineGlobalValue(name: string, type: Type) {\n            var valueLocation = new ValueLocation();\n            valueLocation.typeLink = new TypeLink();\n            var sym = new VariableSymbol(name, 0, -1, valueLocation);\n            sym.setType(type);\n            sym.typeCheckStatus = TypeCheckStatus.Finished;\n            sym.container = this.gloMod;\n            this.importedGlobalsTable.addPublicMember(name, sym);\n        }\n    }\n\n    export class ContextualTypeContext {\n        public targetSig: Signature = null;\n        public targetThis: Type = null;\n        public targetAccessorType: Type = null;\n\n        constructor (public contextualType: Type,\n            public provisional: bool, pu';
var v27189 = v27190 + 'blic contextID: number) { }\n    }\n\n    export class ContextualTypingContextStack {\n        private contextStack: ContextualTypeContext[] = [];\n        static contextID = TypeCheckStatus.Finished + 1;\n        public pushContextualType(type: Type, provisional: bool) { this.contextStack.push(new ContextualTypeContext(type, provisional, ContextualTypingContextStack.contextID++)); this.checker.errorReporter.pushToErrorSink = provisional; }\n        public hadProvisionalErrors = false; // somewhere in the chain a provisional typecheck error was thrown\n        public popContextualType() {\n            var tc = this.contextStack.pop();\n            this.checker.errorReporter.pushToErrorSink = this.isProvisional();\n            this.hadProvisionalErrors = this.hadProvisionalErrors || (tc.provisional && (this.checker.errorReporter.getCapturedErrors().length));\n            this.checker.errorReporter.freeCapturedErrors();\n            return tc;\n        }\n        public getContextualType(): ContextualTypeContext { return (!this.contextStack.length ? null : this.contextStack[this.contextStack.length - 1]); }\n        public getContextID() { return (!this.contextStack.length ? TypeCheckStatus.Finished : this.contextStack[this.contextStack.length - 1].contextID); }\n        public isProvisional() { return (!this.contextStack.length ? false : this.contextStack[this.contextStack.length - 1].provisional); }\n\n        constructor (public checker: TypeChecker) { }\n    }\n\n    export class TypeChecker {\n        public errorReporter: ErrorReporter = null;\n        public globalScope: SymbolScope;\n\n        public checkControlFlow = false;\n        public printControlFlowGraph = false;\n        public checkControlFlowUseDef = false;\n        public styleSettings: StyleSettings = null;\n\n        public units: LocationInfo[] = null;\n\n        public voidType: Type;\n        public booleanType: Type;\n        public numberType: Type;\n        public stringType: Type;\n        public anyType: Type;\n        public nullType: Type;\n        public undefinedType: Type;\n\n        public anon = "_anonymous";\n\n        public globals: DualStringHashTable;\n        public globalTypes: DualStringHashTable;\n        public ambientGlobals: DualStringHashTable;\n        public ambientGlobalTypes: DualStringHashTable;\n        public gloModType: ModuleType;\n        public gloMod: TypeSymbol;\n        public wildElm: TypeSymbol;\n\n        public locationInfo: LocationInfo = null;\n        public typeFlow: TypeFlow = null;\n\n        public currentCompareA: Symbol = null;\n        public currentCompareB: Symbol = null;\n\n        public currentModDecl: ModuleDeclaration = null;\n\n        public inBind = false;\n        public inWith = false;\n        public errorsOnWith = true;\n\n        public typingContextStack: ContextualTypingContextStack;\n        public currentContextualTypeContext: ContextualTypeContext = null;\n\n        public resolvingBases = false;\n\n        public canCallDefinitionSignature = false;\n\n        public assignableCache: any[] = <any>{};\n        public subtypeCache: any[] = <any>{};\n        public identicalCache: any[] = <any>{};\n\n        public provisionalStartedTypecheckObjects: PhasedTypecheckObject[] = [];\n\n        public mustCaptureGlobalThis = false;\n\n        constructor (public persistentState: PersistentGlobalTypeState) {\n            this.voidType = this.persistentState.voidType;\n            this.booleanType = this.persistentState.booleanType;\n            this.numberType = this.persistentState.doubleType;\n            this.stringType = this.persistentState.stringType;\n            this.anyType = this.persistentState.anyType;\n            this.nullType = this.persistentState.nullType;\n            this.undefinedType = this.persistentState.undefinedType;\n\n            this.globals = this.persistentState.dualGlobalValues;\n            this.globalTypes = this.persistentState.dualGlobalTypes;\n            this.ambientGlobals = this.persistentState.dualAmbientGlobalValues;\n            this.ambientGlobalTypes = this.persistentState.dualAmbientGlobalTypes;\n            this.gloModType = this.persistentState.mod;\n            this.gloMod = this.persistentState.gloMod;\n            this.wildElm = this.persistentState.wildElm;\n\n            this.globalScope = this.persistentState.globalScope;\n\n            this.typingContextStack = new ContextualTypingContextStack(this);\n        }\n\n        public setStyleOptions(style: StyleSettings) {\n            this.styleSettings = style;\n        }\n\n        // Contextual typing\n        public setContextualType(type: Type, provisional: bool) {\n            this.typingContextStack.pushContextualType(type, provisional);\n            this.currentContextualTypeContext = this.typingContextStack.getContextualType();\n        }\n\n        public unsetContextualType() {\n            var lastTC = this.typingContextStack.popContextualType();\n            this.currentContextualTypeContext = this.typingContextStack.getContextualType();\n            return lastTC;\n   ';
var v27188 = v27189 + '     }\n\n        public hadProvisionalErrors() {\n            return this.typingContextStack.hadProvisionalErrors;\n        }\n        public resetProvisionalErrors() {\n            if (!this.typingContextStack.getContextualType()) {\n                this.typingContextStack.hadProvisionalErrors = false;\n            }\n        }\n\n        public typeCheckWithContextualType(contextType: Type, provisional: bool, condition: bool, ast: AST) {\n            if (condition) {\n                this.setContextualType(contextType, this.typingContextStack.isProvisional() || provisional);\n            }\n            this.typeFlow.typeCheck(ast);\n            if (condition) {\n                this.unsetContextualType();\n            }\n        }\n\n        public resetTargetType() {\n            this.currentContextualTypeContext = this.typingContextStack.getContextualType();\n        }\n\n        // Unset the current contextual type without disturbing the stack, effectively "killing" the contextual typing process\n        public killCurrentContextualType() { this.currentContextualTypeContext = null; this.errorReporter.pushToErrorSink = false; }\n        public hasTargetType() { return this.currentContextualTypeContext && this.currentContextualTypeContext.contextualType; }\n        public getTargetTypeContext() { return this.currentContextualTypeContext; }\n\n        public inProvisionalTypecheckMode() {\n            return this.typingContextStack.isProvisional();\n        }\n\n        public getTypeCheckFinishedStatus() {\n            if (this.inProvisionalTypecheckMode()) {\n                return this.typingContextStack.getContextID();\n            }\n            return TypeCheckStatus.Finished;\n        }\n\n        public typeStatusIsFinished(status: TypeCheckStatus) {\n\n            return status == TypeCheckStatus.Finished ||\n                   (this.inProvisionalTypecheckMode() && status == this.typingContextStack.getContextID());\n        }\n\n        public addStartedPTO(pto: PhasedTypecheckObject) {\n            if (this.inProvisionalTypecheckMode()) {\n                this.provisionalStartedTypecheckObjects[this.provisionalStartedTypecheckObjects.length] = pto;\n            }\n        }\n\n        public cleanStartedPTO() {\n            for (var i = 0; i < this.provisionalStartedTypecheckObjects.length; i++) {\n                if (this.provisionalStartedTypecheckObjects[i].typeCheckStatus >= this.typingContextStack.getContextID()) {\n                    this.provisionalStartedTypecheckObjects[i].typeCheckStatus = TypeCheckStatus.NotStarted;\n                }\n            }\n            this.provisionalStartedTypecheckObjects = [];\n        }\n\n        // type collection      \n        public collectTypes(ast: AST): void {\n            if (ast.nodeType == NodeType.Script) {\n                var script = <Script>ast;\n                this.locationInfo = script.locationInfo;\n            }\n            var globalChain = new ScopeChain(this.gloMod, null, this.globalScope);\n            var context = new TypeCollectionContext(globalChain, this);\n            getAstWalkerFactory().walk(ast, preCollectTypes, postCollectTypes, null, context);\n        }\n\n        public makeArrayType(type: Type): Type {\n            if (type.arrayCache == null) {\n                type.arrayCache = new ArrayCache();\n                type.arrayCache.arrayType = new Type();\n                type.arrayCache.arrayType.elementType = type;\n                type.arrayCache.arrayType.symbol = type.symbol;\n            }\n            return type.arrayCache.arrayType;\n        }\n\n        public getParameterList(funcDecl: FuncDecl, container: Symbol): SignatureData {\n            var args = funcDecl.arguments;\n            var parameterTable = null;\n            var parameterBuilder = null;\n            var len = args.members.length;\n            var nonOptionalParams = 0;\n            var result: ParameterSymbol[] = [];\n\n            if (len > 0) {\n                parameterTable = new ScopedMembers(new DualStringHashTable(new StringHashTable(), new StringHashTable()));\n                parameterBuilder = new SymbolScopeBuilder(parameterTable, null, null, null, null, container);\n\n                for (var i = 0; i < len; i++) {\n                    var parameter = <ArgDecl>args.members[i];\n                    var paramDef = new ValueLocation();\n                    var parameterSymbol = new ParameterSymbol(parameter.id.text, parameter.minChar,\n                                                            this.locationInfo.unitIndex, paramDef);\n                    parameterSymbol.declAST = parameter;\n                    parameterSymbol.funcDecl = funcDecl;\n                    parameter.id.sym = parameterSymbol;\n                    parameter.sym = parameterSymbol;\n                    paramDef.symbol = parameterSymbol;\n                    paramDef.typeLink = getTypeLink(parameter.typeExpr, this, false);\n                    parameterBuilder.enter(null, parameter, parameterSymbol, this.errorReporter, true, false, false); // REVIEW: Shoul';
var v27187 = v27188 + "d this be entered into the private scope?\n                    result[result.length] = parameterSymbol;\n                    if (!parameter.isOptionalArg()) {\n                        nonOptionalParams++;\n                    }\n                }\n            }\n            return { parameters: result, nonOptionalParameterCount: nonOptionalParams };\n        }\n\n        // Create a signature for a function definition\n        //  (E.g., has a function body - function declarations, property declarations, lambdas)\n        public createFunctionSignature(funcDecl: FuncDecl, container: Symbol, scope: SymbolScope, overloadGroupSym: Symbol, addToScope: bool): Signature {\n\n            var isExported = hasFlag(funcDecl.fncFlags, FncFlags.Exported | FncFlags.ClassPropertyMethodExported) || container == this.gloMod;\n            var isStatic = hasFlag(funcDecl.fncFlags, FncFlags.Static);\n            var isPrivate = hasFlag(funcDecl.fncFlags, FncFlags.Private);\n            var isDefinition = hasFlag(funcDecl.fncFlags, FncFlags.Definition);\n            var isAmbient = hasFlag(funcDecl.fncFlags, FncFlags.Ambient);\n            var isConstructor = funcDecl.isConstructMember() || funcDecl.isConstructor;\n            var isGlobal = container == this.gloMod;\n\n            var signature: Signature = new Signature();\n            var isLambda = funcDecl.fncFlags & FncFlags.IsFunctionExpression;\n\n            // If a return type has been declared for the signature, set the type link.\n            // Otherwise:\n            //  if it's a signature, its type will be 'any'\n            //  if it's a definition, the return type will be inferred  \n            if (funcDecl.returnTypeAnnotation || isDefinition) {\n                signature.returnType = getTypeLink(funcDecl.returnTypeAnnotation, this, false);\n            }\n            else {\n                signature.returnType = new TypeLink();\n                signature.returnType.type = this.anyType;\n            }\n\n            signature.hasVariableArgList = funcDecl.variableArgList;\n\n            var sigData = this.getParameterList(funcDecl, container);\n\n            signature.parameters = sigData.parameters;\n            signature.nonOptionalParameterCount = sigData.nonOptionalParameterCount;\n\n            funcDecl.signature = signature;\n            signature.declAST = funcDecl;\n\n            var useOverloadGroupSym =\n                overloadGroupSym &&\n                overloadGroupSym.getType() &&\n                !overloadGroupSym.isAccessor() &&\n                (funcDecl.isSignature() || (isAmbient == hasFlag(overloadGroupSym.flags, SymbolFlags.Ambient)));\n\n            if (useOverloadGroupSym && isPrivate != hasFlag(overloadGroupSym.flags, SymbolFlags.Private)) {\n                this.errorReporter.simpleError(funcDecl, \"Public/Private visibility of overloads does not agree\");\n            }\n\n            var groupType = useOverloadGroupSym ? overloadGroupSym.getType() : new Type();\n\n            if (isConstructor) {\n                if (groupType.construct == null) {\n                    groupType.construct = new SignatureGroup();\n                }\n                groupType.construct.addSignature(signature);\n                groupType.construct.hasImplementation = !(funcDecl.isSignature());\n                if (groupType.construct.hasImplementation) {\n                    groupType.setHasImplementation();\n                }\n            }\n            else if (funcDecl.isIndexerMember()) {\n                if (groupType.index == null) {\n                    groupType.index = new SignatureGroup();\n                    groupType.index.flags |= SignatureFlags.IsIndexer;\n                }\n\n                groupType.index.addSignature(signature);\n                groupType.index.hasImplementation = !(funcDecl.isSignature());\n                if (groupType.index.hasImplementation) {\n                    groupType.setHasImplementation();\n                }\n            }\n            else {\n                if (groupType.call == null) {\n                    groupType.call = new SignatureGroup();\n                }\n                groupType.call.addSignature(signature);\n\n                groupType.call.hasImplementation = !(funcDecl.isSignature());\n                if (groupType.call.hasImplementation) {\n                    groupType.setHasImplementation();\n                }\n            }\n\n            var instanceType = groupType.instanceType;\n\n            // Ensure that the function's symbol is properly configured\n            // (If there were overloads, we'll already have a symbol, otherwise we need to create one)\n            var funcName: string = null;\n\n            // Set the function's name:\n            //  In the case of anonymous or functions resulting from error\n            //  correction in the parser (isMissing() == true), we do not\n            //  want to set a function name, since they shouldn't be inserted\n            //  into the enclosing scope\n\n            // usedHint prevents functions bound to object literal fields from";
var v27186 = v27187 + " being added to the\n            // enclosing scope\n            var usedHint = false;\n            if (funcDecl.name && !funcDecl.name.isMissing()) {\n                funcName = funcDecl.name.text;\n            }\n            else if (funcDecl.hint) {\n                funcName = funcDecl.hint;\n                usedHint = true;\n            }\n\n            if (groupType.symbol == null) {\n                groupType.symbol =\n                    new TypeSymbol(funcName ? funcName : this.anon,\n                                    funcDecl.minChar, funcDecl.limChar - funcDecl.minChar,\n                                    this.locationInfo.unitIndex,\n                                    groupType);\n                if (!useOverloadGroupSym) {\n                    groupType.symbol.declAST = funcDecl;\n                }\n            }\n\n            // REVIEW: Are we missing any other flags?\n            if (isStatic) {\n                groupType.symbol.flags |= SymbolFlags.Static;\n            }\n\n            if (isAmbient) {\n                groupType.symbol.flags |= SymbolFlags.Ambient;\n            }\n\n            if (isPrivate) {\n                groupType.symbol.flags |= SymbolFlags.Private;\n            }\n\n            groupType.symbol.isMethod = funcDecl.isMethod();\n            if (groupType.symbol.isMethod) {\n                groupType.symbol.flags |= SymbolFlags.Property;\n            }\n\n            funcDecl.type = groupType;\n\n            // Add the function symbol to the appropriate scope\n            // if the funcDecl is a constructor, it will be added to the enclosing scope as a class\n            if (!isConstructor) {\n                // Add the function's symbol to its enclosing scope\n                if (funcName && !isLambda && !funcDecl.isAccessor() && !usedHint) {\n\n                    // REVIEW: We're not setting the isDecl flags for fuctions bound to object literal properties\n                    // so removing the isDefiniton clause would break object literals\n                    if (addToScope) {  // REVIEW: If we combine this with createFunctionDeclarationSignature, we'll need to broaden this for both decls and defs                      \n                        // if it's a static method, enter directly into the container's scope\n                        if (funcDecl.isMethod() && isStatic) {\n\n                            // REVIEW: What about private statics?\n                            if (!(<TypeSymbol>container).type.members.publicMembers.add(funcName, groupType.symbol)) {\n                                this.errorReporter.duplicateIdentifier(funcDecl, funcName);\n                            }\n\n                            groupType.symbol.container = container;\n                        } // REVIEW: Another check for overloads...\n                        else if (overloadGroupSym == null || (overloadGroupSym.declAST && !(<FuncDecl>overloadGroupSym.declAST).isOverload && (container.isType()))) {\n                            scope.enter(container, funcDecl, groupType.symbol, this.errorReporter, !isPrivate && (isExported || isStatic || isGlobal), false, isAmbient);\n                        }\n                    }\n                    else if (!funcDecl.isSpecialFn()) {\n                        groupType.symbol.container = container; // REVIEW: Set container for overloads or anonymous?\n                    }\n                }\n                else if (!funcDecl.isSpecialFn()) {\n                    groupType.symbol.container = container; // REVIEW: Set container for lambdas and accessors?\n                }\n            }\n\n            // If, say, a call signature overload was declared before the class type was, we want to reuse\n            // the type that's already been instantiated for the class type, rather than allocate a new one\n            if (useOverloadGroupSym) {\n                var overloadGroupType = overloadGroupSym ? overloadGroupSym.getType() : null;\n                var classType = groupType;\n\n                if (classType != overloadGroupType) {\n                    if (classType.construct == null) {\n                        if (overloadGroupType && overloadGroupType.construct) {\n                            classType.construct = overloadGroupType.construct;\n                        }\n                        else {\n                            classType.construct = new SignatureGroup();\n                        }\n                    }\n                    else if (overloadGroupType) {\n                        if (overloadGroupType.construct) {\n                            classType.construct.signatures.concat(overloadGroupType.construct.signatures);\n                        }\n                    }\n\n                    // sync call and index signatures as well, but don't allocate should they not\n                    // already exist\n                    if (overloadGroupType) {\n                        if (classType.call == null) {\n                            classType.call = overloadGroupType.call;\n                        }\n                ";
var v27185 = v27186 + '        else if (overloadGroupType.call) {\n                            classType.call.signatures.concat(overloadGroupType.call.signatures);\n                        }\n\n                        // if the function is not static, we need to add any call overloads onto the\n                        // instance type\'s call signature list\n                        if (!isStatic) {\n\n                            if (classType.instanceType == null) {\n                                classType.instanceType = overloadGroupType.instanceType;\n                            }\n\n                            var instanceType = classType.instanceType;\n\n                            if (instanceType) {\n                                if (instanceType.call == null) {\n                                    instanceType.call = overloadGroupType.call;\n                                }\n                                else if (overloadGroupType.call) {\n                                    instanceType.call.signatures.concat(overloadGroupType.call.signatures);\n                                }\n                            }\n                        }\n\n                        if (classType.index == null) {\n                            classType.index = overloadGroupType.index;\n                        }\n                        else if (overloadGroupType.index) {\n                            classType.index.signatures.concat(overloadGroupType.index.signatures);\n                        }\n                    }\n                }\n            }\n\n            return signature;\n        }\n\n        // Creates a new symbol for an accessor property\n        // Note that funcDecl.type.symbol and fgSym may not be the same (E.g., in the case of type collection)\n        public createAccessorSymbol(funcDecl: FuncDecl, fgSym: Symbol, enclosingClass: Type, addToMembers: bool, isClassProperty: bool, scope: SymbolScope, container: Symbol) {\n            var accessorSym: FieldSymbol = null\n            var sig = funcDecl.signature;\n            var nameText = funcDecl.name.text;\n            var isStatic = hasFlag(funcDecl.fncFlags, FncFlags.Static);\n            var isPrivate = hasFlag(funcDecl.fncFlags, FncFlags.Private);\n\n            if (fgSym == null) {\n                var field = new ValueLocation();\n                accessorSym = new FieldSymbol(nameText, funcDecl.minChar, this.locationInfo.unitIndex, false, field);\n                field.symbol = accessorSym;\n                accessorSym.declAST = funcDecl; // REVIEW: need to reset for getters and setters\n\n                if (hasFlag(funcDecl.fncFlags, FncFlags.GetAccessor)) {\n                    if (accessorSym.getter) {\n                        this.errorReporter.simpleError(funcDecl, "Redeclaration of property getter");\n                    }\n                    accessorSym.getter = <TypeSymbol>sig.declAST.type.symbol;\n                }\n                else {\n                    if (accessorSym.setter) {\n                        this.errorReporter.simpleError(funcDecl, "Redeclaration of property setter");\n                    }\n                    accessorSym.setter = <TypeSymbol>sig.declAST.type.symbol;\n                }\n\n                field.typeLink = getTypeLink(null, this, false);\n\n                // if it\'s static, enter it into the class\'s member list directly\n                if (addToMembers) {\n                    if (enclosingClass) {\n                        if (!enclosingClass.members.publicMembers.add(nameText, accessorSym)) {\n                            this.errorReporter.duplicateIdentifier(funcDecl, accessorSym.name);\n                        }\n                        accessorSym.container = enclosingClass.symbol;\n                    }\n                    else {\n                        this.errorReporter.simpleError(funcDecl, "Accessor property may not be added in this context");\n                    }\n                }\n                else {\n                    scope.enter(container, funcDecl, accessorSym, this.errorReporter, !isPrivate || isStatic, false, false);\n                }\n\n                // We set the flags here, instead of below, because the accessor symbol does not yet have a type\n                if (isClassProperty) {\n                    accessorSym.flags |= SymbolFlags.Property;\n                }\n                if (isStatic) {\n                    accessorSym.flags |= SymbolFlags.Static;\n                }\n\n                if (isPrivate) {\n                    accessorSym.flags |= SymbolFlags.Private;\n                }\n                else {\n                    accessorSym.flags |= SymbolFlags.Public;\n                }\n            }\n            else {\n                accessorSym = <FieldSymbol>(<any>fgSym);\n\n                if (isPrivate != hasFlag(accessorSym.flags, SymbolFlags.Private)) {\n                    this.errorReporter.simpleError(funcDecl, "Getter and setter accessors do not agree in visibility");\n                }\n\n                if (hasFlag(funcDecl.fncFlags, FncFlags.GetAccessor)) {\n       ';
var v27184 = v27185 + '             if (accessorSym.getter) {\n                        this.errorReporter.simpleError(funcDecl, "Redeclaration of property getter");\n                    }\n                    accessorSym.getter = <TypeSymbol>funcDecl.type.symbol;\n                }\n                else {\n                    if (accessorSym.setter) {\n                        this.errorReporter.simpleError(funcDecl, "Redeclaration of property setter");\n                    }\n                    accessorSym.setter = <TypeSymbol>funcDecl.type.symbol;\n                }\n            }\n\n            return accessorSym;\n        }\n\n        public addBases(resultScope: SymbolAggregateScope, type: Type, baseContext: { base: string; baseId: number; }): void {\n            resultScope.addParentScope(new SymbolTableScope(type.members, type.ambientMembers, type.getAllEnclosedTypes(), type.getAllAmbientEnclosedTypes(), type.symbol));\n            var i = 0;\n            var parent: Type;\n            if (type.extendsList) {\n                for (var len = type.extendsList.length; i < len; i++) {\n                    parent = type.extendsList[i];\n                    if (baseContext.baseId == parent.typeID) {\n                        this.errorReporter.reportErrorFromSym(parent.symbol, "Type \'" + baseContext.base + "\' is recursively referenced as a base class of itself");\n                        parent.symbol.flags |= SymbolFlags.RecursivelyReferenced;\n                        break;\n                    }\n                    this.addBases(resultScope, parent, baseContext);\n                }\n            }\n        }\n\n        public scopeOf(type: Type): SymbolScope {\n            var resultScope = new SymbolAggregateScope(type.symbol);\n            var baseContext = { base: type.symbol && type.symbol.name ? type.symbol.name : "{}", baseId: type.typeID };\n            this.addBases(resultScope, type, baseContext);\n            return resultScope;\n        }\n\n        public lookupMemberTypeSymbol(containingType: Type, name: string): Symbol {\n            var symbol: Symbol = null;\n            if (containingType.containedScope) {\n                symbol = containingType.containedScope.find(name, false, true);\n            }\n            else if (containingType.members) {\n                symbol = containingType.members.allMembers.lookup(name);\n\n                if (symbol == null && containingType.ambientMembers) {\n                    symbol = containingType.ambientMembers.allMembers.lookup(name);\n                }\n            }\n            if (symbol == null) {\n                var typeMembers = containingType.getAllEnclosedTypes();\n                var ambientTypeMembers = containingType.getAllAmbientEnclosedTypes();\n                if (typeMembers) {\n                    symbol = typeMembers.allMembers.lookup(name);\n\n                    if (symbol == null && ambientTypeMembers) {\n                        symbol = ambientTypeMembers.allMembers.lookup(name);\n                    }\n\n                }\n            }\n            if (symbol && symbol.isType()) {\n                return symbol;\n            }\n            else {\n                return null;\n            }\n        }\n\n        public findSymbolForDynamicModule(idText: string, currentFileName: string, search: (id: string) =>Symbol): Symbol {\n            var originalIdText = idText;\n            var symbol = search(idText);\n           \n            if (symbol == null) {\n                // perhaps it\'s a dynamic module?\n                if (!symbol) {\n                    idText = swapQuotes(originalIdText);\n                    symbol = search(idText);\n                }\n\n                // Check the literal path first\n                if (!symbol) {\n                    idText = stripQuotes(originalIdText) + ".ts";\n                    symbol = search(idText);\n                }\n\n                if (!symbol) {\n                    idText = stripQuotes(originalIdText) + ".str";\n                    symbol = search(idText);\n                }\n\n                // Check check for .d.str\n                if (!symbol) {\n                    idText = stripQuotes(originalIdText) + ".d.ts";\n                    symbol = search(idText);\n                }\n\n                if (!symbol) {\n                    idText = stripQuotes(originalIdText) + ".d.str";\n                    symbol = search(idText);\n                }\n\n                // If the literal path doesn\'t work, begin the search\n                if (!symbol && !isRelative(originalIdText)) {\n                    // check the full path first, as this is the most likely scenario\n                    idText = originalIdText;\n\n                    var strippedIdText = stripQuotes(idText);\n\n                    // REVIEW: Technically, we shouldn\'t have to normalize here - we should normalize in addUnit.\n                    // Still, normalizing here alows any language services to be free of assumptions\n                    var path = getRootFilePath(switchToForwardSlashes(currentFileName));\n\n                    ';
var v27183 = v27184 + 'while (symbol == null && path != "") {\n                        idText = normalizePath(path + strippedIdText + ".ts");\n                        symbol = search(idText);\n\n                        // check for .str\n                        if (symbol == null) {\n                            idText = changePathToSTR(idText);\n                            symbol = search(idText);\n                        }\n\n                        // check for .d.ts\n                        if (symbol == null) {\n                            idText = changePathToDTS(idText);\n                            symbol = search(idText);\n                        }\n\n                        // check for .d.str\n                        if (symbol == null) {\n                            idText = changePathToDSTR(idText);\n                            symbol = search(idText);\n                        }\n\n                        if (symbol == null) {\n\t\t\t\t\t\t\tif(path === \'/\') {\n\t\t\t\t\t\t\t\tpath = \'\';\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tpath = normalizePath(path + "..");\n\t\t\t\t\t\t\t\tpath = path && path != \'/\' ? path + \'/\' : path;\n\t\t\t\t\t\t\t}\n                        }\n                    }\n                }\n            }\n\n            return symbol;\n        }\n\n        public resolveTypeMember(scope: SymbolScope, dotNode: BinaryExpression): Type {\n            var lhs = dotNode.operand1;\n            var rhs = dotNode.operand2;\n            var resultType = this.anyType;\n            var lhsType = this.anyType;\n\n            if (lhs && rhs && (rhs.nodeType == NodeType.Name)) {\n                if (lhs.nodeType == NodeType.Dot) {\n                    lhsType = this.resolveTypeMember(scope, <BinaryExpression>lhs);\n                }\n                else if (lhs.nodeType == NodeType.Name) {\n                    var identifier = <Identifier>lhs;\n                    var symbol = scope.find(identifier.text, false, true);\n                    if (symbol == null) {\n                        this.errorReporter.unresolvedSymbol(identifier, identifier.actualText);\n                    }\n                    else if (symbol.isType()) {\n\n                        var typeSymbol = <TypeSymbol> symbol;\n\n                        if (typeSymbol.aliasLink && !typeSymbol.type && typeSymbol.aliasLink.alias.nodeType == NodeType.Name) {\n                            var modPath = (<Identifier>typeSymbol.aliasLink.alias).text;\n                            var modSym = this.findSymbolForDynamicModule(modPath, this.locationInfo.filename, (id) => scope.find(id, false, true));\n                            if (modSym) {\n                                typeSymbol.type = modSym.getType();\n                            }\n                        }\n\n                        if (optimizeModuleCodeGen && symbol) {\n                            var symType = symbol.getType();\n                            // Once the type has been referenced outside of a type ref position, there\'s\n                            // no going back                        \n                            if (symType && typeSymbol.aliasLink && typeSymbol.onlyReferencedAsTypeRef) {\n\n                                var modDecl = <ModuleDeclaration>symType.symbol.declAST;\n                                if (modDecl && hasFlag(modDecl.modFlags, ModuleFlags.IsDynamic)) {\n                                    typeSymbol.onlyReferencedAsTypeRef = !this.resolvingBases;\n                                }\n                            }\n                        }\n                        if (!symbol.visible(scope, this)) {\n                            this.errorReporter.simpleError(lhs, "The symbol \'" + identifier.actualText + "\' is not visible at this point");\n                        }\n                        lhsType = symbol.getType();\n\n                        identifier.sym = symbol;\n                    }\n                    else {\n                        this.errorReporter.simpleError(lhs, "Expected type");\n                    }\n\n                }\n\n                // if the LHS type is a module alias, we won\'t be able to resolve it until\n                // typecheck type.  If this is called during binding, lhsType will be null\n                if (!lhsType) {\n                    lhsType = this.anyType;\n                }\n\n                if (lhsType != this.anyType) {\n                    var rhsIdentifier = <Identifier>rhs;\n                    var resultSymbol = this.lookupMemberTypeSymbol(lhsType, rhsIdentifier.text);\n                    if (resultSymbol == null) {\n                        resultType = this.anyType;\n                        this.errorReporter.simpleError(dotNode, "Expected type");\n                    }\n                    else {\n                        resultType = resultSymbol.getType();\n                        if (!resultSymbol.visible(scope, this)) {\n                            this.errorReporter.simpleError(lhs, "The symbol \'" + (<Identifier>rhs).actualText + "\' is not visible at this point");\n                        }\n                    }\n                    rhsIdentifier.sym =';
var v27182 = v27183 + ' resultType.symbol;\n                }\n            }\n            if (resultType.isClass()) {\n                resultType = resultType.instanceType;\n            }\n            return resultType;\n        }\n\n        public resolveFuncDecl(funcDecl: FuncDecl, scope: SymbolScope,\n            fgSym: TypeSymbol): Symbol {\n            var functionGroupSymbol = this.createFunctionSignature(funcDecl, scope.container, scope, fgSym, false).declAST.type.symbol;\n            var signatures: Signature[];\n            if (funcDecl.isConstructMember()) {\n                signatures = functionGroupSymbol.type.construct.signatures;\n            }\n            else if (funcDecl.isIndexerMember()) {\n                signatures = functionGroupSymbol.type.getInstanceType().index.signatures;\n            }\n            else {\n                signatures = functionGroupSymbol.type.call.signatures;\n            }\n\n            var signature = signatures[signatures.length - 1];\n            var len = signature.parameters.length;\n            for (var i = 0; i < len; i++) {\n                var paramSym: ParameterSymbol = signature.parameters[i];\n                this.resolveTypeLink(scope, paramSym.parameter.typeLink, true);\n            }\n\n            // If a vararg list is present, check that the type is an array type\n            if (len && funcDecl.variableArgList) {\n                if (!signature.parameters[len - 1].parameter.typeLink.type.elementType) {\n                    this.errorReporter.simpleErrorFromSym(signature.parameters[len - 1].parameter.symbol, "... parameter must have array type");\n                    signature.parameters[len - 1].parameter.typeLink.type = this.makeArrayType(signature.parameters[len - 1].parameter.typeLink.type);\n                }\n            }\n            this.resolveTypeLink(scope, signature.returnType,\n                            funcDecl.isSignature());\n            return functionGroupSymbol;\n        }\n\n        public resolveVarDecl(varDecl: VarDecl, scope: SymbolScope): Symbol {\n            var field = new ValueLocation();\n            var fieldSymbol =\n                new FieldSymbol(varDecl.id.text, varDecl.minChar, this.locationInfo.unitIndex,\n                                (varDecl.varFlags & VarFlags.Readonly) == VarFlags.None,\n                                field);\n            fieldSymbol.transferVarFlags(varDecl.varFlags);\n            field.symbol = fieldSymbol;\n            fieldSymbol.declAST = varDecl;\n            field.typeLink = getTypeLink(varDecl.typeExpr, this, varDecl.init == null);\n            this.resolveTypeLink(scope, field.typeLink, true);\n            varDecl.sym = fieldSymbol;\n            varDecl.type = field.typeLink.type;\n            return fieldSymbol;\n        }\n\n        public resolveTypeLink(scope: SymbolScope, typeLink: TypeLink, supplyVar: bool): void {\n            var arrayCount = 0;\n            if (typeLink.type == null) {\n                var ast: AST = typeLink.ast;\n                if (ast) {\n                    while (typeLink.type == null) {\n                        switch (ast.nodeType) {\n                            case NodeType.Name:\n                                var identifier = <Identifier>ast;\n                                var symbol = scope.find(identifier.text, false, true);\n                                if (symbol == null) {\n                                    typeLink.type = this.anyType;\n                                    this.errorReporter.unresolvedSymbol(identifier, identifier.actualText);\n                                }\n                                else if (symbol.isType()) {\n                                    if (!symbol.visible(scope, this)) {\n                                        this.errorReporter.simpleError(ast, "The symbol \'" + identifier.actualText + "\' is not visible at this point");\n                                    }\n                                    identifier.sym = symbol;\n                                    typeLink.type = symbol.getType();\n                                    if (typeLink.type) {\n                                        if (typeLink.type.isClass()) {\n                                            typeLink.type = typeLink.type.instanceType;\n                                        }\n                                    }\n                                    else {\n                                        typeLink.type = this.anyType;\n                                    }\n                                }\n                                else {\n                                    typeLink.type = this.anyType;\n                                    this.errorReporter.simpleError(ast, "Expected type");\n                                }\n                                break;\n                            case NodeType.Dot:\n                                typeLink.type = this.resolveTypeMember(scope, <BinaryExpression>ast);\n                                break;\n                            case NodeType.TypeRef:\n                       ';
var v27181 = v27182 + '         var typeRef = <TypeReference>ast;\n                                arrayCount = typeRef.arrayCount;\n                                ast = typeRef.term;\n                                if (ast == null) {\n                                    typeLink.type = this.anyType;\n                                }\n                                break;\n                            case NodeType.InterfaceDeclaration:\n                                var interfaceDecl = <InterfaceDeclaration>ast;\n                                var interfaceType = new Type();\n                                var interfaceSymbol = new TypeSymbol((<Identifier>interfaceDecl.name).text,\n                                                                   ast.minChar,\n                                                                   ast.limChar - ast.minChar,\n                                                                   this.locationInfo.unitIndex,\n                                                                   interfaceType);\n                                interfaceType.symbol = interfaceSymbol;\n                                interfaceType.members = new ScopedMembers(new DualStringHashTable(new StringHashTable(), new StringHashTable()));\n\n                                interfaceType.containedScope =\n                                    new SymbolTableScope(interfaceType.members, null, null, null,\n                                                         interfaceSymbol);\n\n                                interfaceType.containedScope.container = interfaceSymbol;\n                                interfaceType.memberScope = interfaceType.containedScope;\n\n                                var memberList = <ASTList>interfaceDecl.members;\n                                var props: AST[] = memberList.members;\n                                var propsLen = props.length;\n\n                                for (var j = 0; j < propsLen; j++) {\n                                    var propDecl = props[j];\n                                    var propSym: Symbol = null;\n                                    var addMember = true;\n                                    var id: Identifier = null;\n                                    if (propDecl.nodeType == NodeType.FuncDecl) {\n                                        var funcDecl = <FuncDecl>propDecl;\n                                        id = funcDecl.name;\n                                        propSym = interfaceType.members.allMembers.lookup(funcDecl.getNameText());\n                                        addMember = (propSym == null);\n                                        if (funcDecl.isSpecialFn()) {\n                                            addMember = false;\n                                            propSym = this.resolveFuncDecl(funcDecl, scope, interfaceSymbol);\n                                        }\n                                        else {\n                                            propSym = this.resolveFuncDecl(funcDecl, scope, <TypeSymbol>propSym);\n                                        }\n                                        funcDecl.type = (<TypeSymbol>propSym).type;\n                                    }\n                                    else {\n                                        id = (<VarDecl>propDecl).id;\n                                        propSym = this.resolveVarDecl(<VarDecl>propDecl, scope);\n\n                                        // Don\'t add the member if it was missing a name.  This \n                                        // generally just leads to cascading errors that make things\n                                        // more confusing for the user.\n                                        addMember = !id.isMissing();\n                                    }\n\n                                    if (addMember) {\n                                        if (id && hasFlag(id.flags, ASTFlags.OptionalName)) {\n                                            propSym.flags |= SymbolFlags.Optional;\n                                        }\n                                        if (!interfaceType.members.allMembers.add(propSym.name, propSym)) {\n                                            this.errorReporter.duplicateIdentifier(ast, propSym.name);\n                                        }\n                                    }\n                                }\n\n                                ast.type = interfaceType;\n                                typeLink.type = interfaceType;\n\n                                break;\n                            case NodeType.FuncDecl:\n                                var tsym = <TypeSymbol>this.resolveFuncDecl(<FuncDecl>ast, scope, null);\n                                typeLink.type = tsym.type;\n                                break;\n                            default:\n                                typeLink.type = this.anyType;\n                                this.errorReporter.simpleError(ast, "Expected type");\n                ';
var v27180 = v27181 + '                break;\n                        }\n                    }\n                }\n                for (var count = arrayCount; count > 0; count--) {\n                    typeLink.type = this.makeArrayType(typeLink.type);\n                }\n                if (supplyVar && (typeLink.type == null)) {\n                    typeLink.type = this.anyType;\n                }\n                if (typeLink.ast) {\n                    typeLink.ast.type = typeLink.type;\n                }\n            }\n            // else wait for type inference\n        }\n\n        public resolveBaseTypeLink(typeLink: TypeLink, scope: SymbolScope) {\n            this.resolvingBases = true;\n            this.resolveTypeLink(scope, typeLink, true);\n            this.resolvingBases = false;\n            var extendsType: Type = null;\n            if (typeLink.type.isClass()) {\n                extendsType = typeLink.type.instanceType;\n            }\n            else {\n                extendsType = typeLink.type;\n            }\n\n            return extendsType;\n        }\n\n        public findMostApplicableSignature(signatures: ApplicableSignature[], args: ASTList): { sig: Signature; ambiguous: bool; } {\n\n            if (signatures.length == 1) {\n                return { sig: signatures[0].signature, ambiguous: false };\n            }\n\n            var best: ApplicableSignature = signatures[0];\n            var Q: ApplicableSignature = null;\n            var AType: Type = null;\n            var PType: Type = null;\n            var QType: Type = null;\n            var ambiguous = false;\n\n            for (var qSig = 1; qSig < signatures.length; qSig++) {\n                Q = signatures[qSig];\n                var i = 0;\n                // find the better conversion\n                for (i = 0; args && i < args.members.length; i++) {\n                    AType = args.members[i].type;\n                    PType = i < best.signature.parameters.length ? best.signature.parameters[i].getType() : best.signature.parameters[best.signature.parameters.length - 1].getType().elementType;\n                    QType = i < Q.signature.parameters.length ? Q.signature.parameters[i].getType() : Q.signature.parameters[Q.signature.parameters.length - 1].getType().elementType;\n\n                    if (this.typesAreIdentical(PType, QType)) {\n                        continue;\n                    }\n                    else if (this.typesAreIdentical(AType, PType)) {\n                        break;\n                    }\n                    else if (this.typesAreIdentical(AType, QType)) {\n                        best = Q;\n                        break;\n                    }\n                    else if (this.sourceIsSubtypeOfTarget(PType, QType)) {\n                        break;\n                    }\n                    else if (this.sourceIsSubtypeOfTarget(QType, PType)) {\n                        best = Q;\n                        break;\n                    }\n                    else if (Q.hadProvisionalErrors) {\n                        break;\n                    }\n                    else if (best.hadProvisionalErrors) {\n                        best = Q;\n                        break;\n                    }\n                }\n\n                if (!args || i == args.members.length) {\n                    var collection: ITypeCollection = {\n                        getLength: () => { return 2; },\n                        setTypeAtIndex: (index: number, type: Type) => { }, // no contextual typing here, so no need to do anything\n                        getTypeAtIndex: (index: number) => { return index ? Q.signature.returnType.type : best.signature.returnType.type; } // we only want the "second" type - the "first" is skipped\n                    }\n                    var bct = this.findBestCommonType(best.signature.returnType.type, null, collection, true);\n                    ambiguous = !bct;\n                }\n                else {\n                    ambiguous = false;\n                }\n            }\n\n            return { sig: best.signature, ambiguous: ambiguous };\n        }\n\n        public getApplicableSignatures(signatures: Signature[], args: ASTList, comparisonInfo: TypeComparisonInfo): ApplicableSignature[] {\n\n            var applicableSigs: ApplicableSignature[] = [];\n            var memberType: Type = null;\n            var miss = false;\n            var cxt: ContextualTypeContext = null;\n            var hadProvisionalErrors = false;\n\n            for (var i = 0; i < signatures.length; i++) {\n                miss = false;\n\n                for (var j = 0; j < args.members.length; j++) {\n\n                    if (j >= signatures[i].parameters.length) {\n                        continue;\n                    }\n                    memberType = signatures[i].parameters[j].getType();\n\n                    // account for varargs\n                    if (signatures[i].declAST.variableArgList && (j >= signatures[i].nonOptionalParameterCount - 1) && memberType.isArray()) {\n                        memberType = mem';
var v27179 = v27180 + 'berType.elementType;\n                    }\n\n                    if (memberType == this.anyType) {\n                        continue;\n                    }\n                    else if (args.members[j].nodeType == NodeType.FuncDecl) {\n                        if (this.typeFlow.functionInterfaceType && memberType == this.typeFlow.functionInterfaceType) {\n                            continue;\n                        }\n                        if (!this.canContextuallyTypeFunction(memberType, <FuncDecl>args.members[j], true)) {\n                            // if it\'s just annotations that are blocking us, typecheck the function and add it to the list\n                            if (this.canContextuallyTypeFunction(memberType, <FuncDecl>args.members[j], false)) {\n                                this.typeFlow.typeCheck(args.members[j]);\n                                if (!this.sourceIsAssignableToTarget(args.members[j].type, memberType, comparisonInfo)) {\n                                    break;\n                                }\n                            }\n                            else {\n                                break;\n                            }\n                        }\n                        else { // if it can be contextually typed, try it out...\n\n                            this.typeCheckWithContextualType(memberType, true, true, args.members[j]);\n                            this.cleanStartedPTO();\n                            hadProvisionalErrors = this.hadProvisionalErrors();\n\n                            if (!this.sourceIsAssignableToTarget(args.members[j].type, memberType, comparisonInfo)) {\n                                if (comparisonInfo) {\n                                    comparisonInfo.setMessage("Could not apply type \'" + memberType.getTypeName() + "\' to argument " + (j + 1) + ", which is of type \'" + args.members[j].type.getTypeName() + "\'");\n                                }\n                                miss = true;\n                            }\n\n                            // clean the type\n                            //if (hadProvisionalErrors) {\n                            //    cxt = this.currentContextualTypeContext;\n                            //    this.typeCheckWithContextualType(null, true, true, args.members[j]);\n                            //    if (!this.sourceIsAssignableToTarget(args.members[j].type, memberType)) {\n                            //        miss = true;\n                            //    }\n                            //    this.cleanStartedPTO();\n                            //}\n\n                            this.resetProvisionalErrors();\n                            if (miss) {\n                                break;\n                            }\n                        }\n                    }\n                    else if (args.members[j].nodeType == NodeType.ObjectLit) {\n                        // now actually attempt to typecheck as the contextual type\n                        if (this.typeFlow.objectInterfaceType && memberType == this.typeFlow.objectInterfaceType) {\n                            continue;\n                        }\n\n                        this.typeCheckWithContextualType(memberType, true, true, args.members[j]);\n                        this.cleanStartedPTO();\n                        hadProvisionalErrors = this.hadProvisionalErrors(); \n\n                        if (!this.sourceIsAssignableToTarget(args.members[j].type, memberType, comparisonInfo)) {\n                            if (comparisonInfo) {\n                                comparisonInfo.setMessage("Could not apply type \'" + memberType.getTypeName() + "\' to argument " + (j + 1) + ", which is of type \'" + args.members[j].type.getTypeName() + "\'");\n                            }\n                            miss = true;\n                        }\n\n                        // clean the type\n                        //if (hadProvisionalErrors) {\n                        //    this.typeCheckWithContextualType(null, true, true, args.members[j]);\n\n                        //    // is the "cleaned" type even assignable?\n                        //    if (!this.sourceIsAssignableToTarget(args.members[j].type, memberType)) {\n                        //        miss = true;\n                        //    }\n\n                        //    this.cleanStartedPTO();\n                        //}\n\n                        this.resetProvisionalErrors();\n                        if (miss) {\n                            break;\n                        }\n                    }\n                    else if (args.members[j].nodeType == NodeType.ArrayLit) {\n                        // attempt to contextually type the array literal\n                        if (this.typeFlow.arrayInterfaceType && memberType == this.typeFlow.arrayInterfaceType) {\n                            continue;\n                        }\n\n                        this.typeCheckWithContextualType(memberType, true, true, args.members[j]);\n                        thi';
var v27178 = v27179 + 's.cleanStartedPTO();\n                        hadProvisionalErrors = this.hadProvisionalErrors(); \n\n                        if (!this.sourceIsAssignableToTarget(args.members[j].type, memberType, comparisonInfo)) {\n                            if (comparisonInfo) {\n                                comparisonInfo.setMessage("Could not apply type \'" + memberType.getTypeName() + "\' to argument " + (j + 1) + ", which is of type \'" + args.members[j].type.getTypeName() + "\'");\n                            }\n                            break;\n                        }\n\n                        // clean the type\n                        //if (hadProvisionalErrors) {\n                        //    this.typeCheckWithContextualType(null, true, true, args.members[j]);\n                        //    if (!this.sourceIsAssignableToTarget(args.members[j].type, memberType)) {\n                        //        miss = true;\n                        //    }\n\n                        //    this.cleanStartedPTO();\n                        //}\n\n                        this.resetProvisionalErrors();\n                        if (miss) {\n                            break;\n                        }\n                    }\n                }\n\n                if (j == args.members.length) {\n                    applicableSigs[applicableSigs.length] = { signature: signatures[i], hadProvisionalErrors: hadProvisionalErrors };\n                }\n                hadProvisionalErrors = false;\n            }\n\n            return applicableSigs;\n        }\n\n        public canContextuallyTypeFunction(candidateType: Type, funcDecl: FuncDecl, beStringent: bool): bool {\n\n            // in these cases, we do not attempt to apply a contextual type\n            //  RE: isInlineCallLiteral - if the call target is a function literal, we don\'t want to apply the target type\n            //  to its body - instead, it should be applied to its return type\n            if (funcDecl.isParenthesized ||\n                funcDecl.isMethod() ||\n                beStringent && funcDecl.returnTypeAnnotation ||\n                funcDecl.isInlineCallLiteral) {\n                return false;\n            }\n\n            beStringent = beStringent || (this.typeFlow.functionInterfaceType == candidateType);\n\n            // At this point, if we\'re not being stringent, there\'s no need to check for multiple call sigs\n            // or count parameters - we just want to unblock typecheck\n            if (!beStringent) {\n                return true;\n            }\n\n            // If we\'re coming from an in-scope typecheck, lambdas may not have had function signatures created for them\n            // REVIEW: Should we search out the overload group here?\n            if (!funcDecl.signature) {\n                this.createFunctionSignature(funcDecl, this.typeFlow.scope.container, this.typeFlow.scope, null, null);\n                this.typeFlow.typeCheck(funcDecl);\n            }\n\n            var signature = funcDecl.signature;\n            var paramLen = signature.parameters.length;\n\n            // Check that the argument declarations have no type annotations\n            for (var i = 0; i < paramLen; i++) {\n                var param = signature.parameters[i];\n                var symbol = <ParameterSymbol>param;\n                var argDecl = <ArgDecl>symbol.declAST;\n\n                // REVIEW: a valid typeExpr is a requirement for varargs,\n                // so we may want to revise our invariant\n                if (beStringent && argDecl.typeExpr) {\n                    return false;\n                }\n            }\n\n            if (candidateType.construct && candidateType.call) {\n                return false;\n            }\n\n            var candidateSigs = candidateType.construct ? candidateType.construct : candidateType.call;\n\n            if (!candidateSigs || candidateSigs.signatures.length > 1) {\n                return false;\n            }\n\n            // if we\'re here, the contextual type can be applied to the function\n            return true;\n        }\n\n        public canContextuallyTypeObjectLiteral(targetType: Type, objectLit: UnaryExpression): bool {\n\n            if (targetType == this.typeFlow.objectInterfaceType) {\n                return true;\n            }\n\n            var memberDecls = <ASTList>objectLit.operand;\n\n            if (!(memberDecls && targetType.memberScope)) {\n                return false;\n            }\n\n            var id: AST = null;\n            var targetMember: Symbol = null;\n            var text = "";\n            var foundSyms = {};\n\n            // Check that each property in the object literal is present in the target\n            // type\n            for (var i = 0; i < memberDecls.members.length; i++) {\n                id = (<BinaryExpression>memberDecls.members[i]).operand1;\n\n                if (id.nodeType == NodeType.Name) {\n                    text = (<Identifier>id).text;\n                }\n                else if (id.nodeType == NodeType.QString) {\n                    // TODO: set te';
var v27177 = v27178 + "xt to unescaped string\n                    var idText = (<StringLiteral>id).text;\n                    text = idText.substring(1, idText.length - 1);\n                }\n                else {\n                    return false;\n                }\n\n                targetMember = targetType.memberScope.find(text, true, false);\n\n                if (!targetMember) {\n                    return false;\n                }\n\n                foundSyms[text] = true;\n            }\n\n            // Check that all members in the target type are present in the object literal\n            var targetMembers = targetType.memberScope.getAllValueSymbolNames(true);\n\n            for (var i = 0; i < targetMembers.length; i++) {\n                var memberName = targetMembers[i];\n                var memberSym = targetType.memberScope.find(memberName, true, false);\n\n                if (!foundSyms[targetMembers[i]] &&\n                    !hasFlag(memberSym.flags, SymbolFlags.Optional)) {\n                    return false;\n                }\n            }\n\n            return true;\n        }\n\n        public widenType(t: Type) {\n            if (t == this.undefinedType || t == this.nullType) { // REVIEW: not isNullOrUndefinedType for perf reasons\n                return this.anyType;\n            }\n\n            return t;\n        }\n\n        public isNullOrUndefinedType(t: Type) {\n            return t == this.undefinedType || t == this.nullType;\n        }\n\n        public findBestCommonType(initialType: Type, targetType: Type, collection: ITypeCollection, acceptVoid:bool, comparisonInfo?: TypeComparisonInfo) {\n            var i = 0;\n            var len = collection.getLength();\n            var nlastChecked = 0;\n            var bestCommonType = initialType;\n\n            if (targetType) {\n                bestCommonType = bestCommonType ? bestCommonType.mergeOrdered(targetType, this, acceptVoid) : targetType;\n            }\n\n            // it's important that we set the convergence type here, and not in the loop,\n            // since the first element considered may be the contextual type\n            var convergenceType: Type = bestCommonType;\n\n            while (nlastChecked < len) {\n\n                for (i = 0; i < len; i++) {\n\n                    // no use in comparing a type against itself\n                    if (i == nlastChecked) {\n                        continue;\n                    }\n\n                    if (convergenceType && (bestCommonType = convergenceType.mergeOrdered(collection.getTypeAtIndex(i), this, acceptVoid, comparisonInfo))) {\n                        convergenceType = bestCommonType;\n                    }\n\n                    if (bestCommonType == this.anyType || bestCommonType == null) {\n                        break;\n                    }\n                    else if (targetType) { // set the element type to the target type\n                        collection.setTypeAtIndex(i, targetType);\n                    }\n                }\n\n                // use the type if we've agreed upon it\n                if (convergenceType && bestCommonType) {\n                    break;\n                }\n\n                nlastChecked++;\n                if (nlastChecked < len) {\n                    convergenceType = collection.getTypeAtIndex(nlastChecked);\n                }\n            }\n\n            return acceptVoid ? bestCommonType : (bestCommonType == this.voidType ? null : bestCommonType);\n        }\n\n        // Type Identity\n\n        public typesAreIdentical(t1: Type, t2: Type) {\n\n            // This clause will cover both primitive types (since the type objects are shared),\n            // as well as shared brands\n            if (t1 == t2) {\n                return true;\n            }\n\n            if (!t1 || !t2) {\n                return false;\n            }\n\n            if (t1.isClass() || t1.isClassInstance()) {\n                return false;\n            }\n\n            var comboId = (t2.typeID << 16) | t1.typeID;\n\n            if (this.identicalCache[comboId]) {\n                return true;\n            }\n\n            // If one is an enum, and they're not the same type, they're not identical\n            if ((t1.typeFlags & TypeFlags.IsEnum) || (t2.typeFlags & TypeFlags.IsEnum)) {\n                return false;\n            }\n\n            if (t1.isArray() || t2.isArray()) {\n                if (!(t1.isArray() && t2.isArray())) {\n                    return false;\n                }\n                this.identicalCache[comboId] = false;\n                var ret = this.typesAreIdentical(t1.elementType, t2.elementType);\n                if (ret) {\n                    this.subtypeCache[comboId] = true;\n                }\n                else {\n                    this.subtypeCache[comboId] = undefined;\n                }\n\n                return ret;\n            }\n\n            if (t1.primitiveTypeClass != t2.primitiveTypeClass) {\n                return false;\n            }\n\n            this.identicalCache[comboId] = false;\n\n            // properties are identical in na";
var v27176 = v27177 + "me, optionality, and type\n            // REVIEW: TypeChanges - The compiler does not currently check against the members of parent types!\n            // REVIEW: TypeChanges - What about ambientMembers?\n            if (t1.memberScope && t2.memberScope) {\n                var t1MemberKeys = t1.memberScope.getAllValueSymbolNames(true).sort();\n                var t2MemberKeys = t2.memberScope.getAllValueSymbolNames(true).sort();\n\n                if (t1MemberKeys.length != t2MemberKeys.length) {\n                    this.identicalCache[comboId] = undefined;\n                    return false;\n                }\n\n                var t1MemberSymbol: Symbol = null;\n                var t2MemberSymbol: Symbol = null;\n\n                var t1MemberType: Type = null;\n                var t2MemberType: Type = null;\n\n                for (var iMember = 0; iMember < t1MemberKeys.length; iMember++) {\n                    if (t1MemberKeys[iMember] != t2MemberKeys[iMember]) {\n                        this.identicalCache[comboId] = undefined;\n                        return false;\n                    }\n\n                    t1MemberSymbol = <Symbol>t1.memberScope.find(t1MemberKeys[iMember], false, false);\n                    t2MemberSymbol = <Symbol>t2.memberScope.find(t2MemberKeys[iMember], false, false);\n\n                    if ((t1MemberSymbol.flags & SymbolFlags.Optional) != (t2MemberSymbol.flags & SymbolFlags.Optional)) {\n                        this.identicalCache[comboId] = undefined;\n                        return false;\n                    }\n\n                    t1MemberType = t1MemberSymbol.getType();\n                    t2MemberType = t2MemberSymbol.getType();\n\n                    // catch the mutually recursive or cached cases\n                    if (t1MemberType && t2MemberType && (this.identicalCache[(t2MemberType.typeID << 16) | t1MemberType.typeID] != undefined)) {\n                        continue;\n                    }\n\n                    if (!this.typesAreIdentical(t1MemberType, t2MemberType)) {\n                        this.identicalCache[comboId] = undefined;\n                        return false;\n                    }\n                }\n            }\n            else if (t1.memberScope || t2.memberScope) {\n                this.identicalCache[comboId] = undefined;\n                return false;\n            }\n\n            if (!this.signatureGroupsAreIdentical(t1.call, t2.call)) {\n                this.identicalCache[comboId] = undefined;\n                return false;\n            }\n\n            if (!this.signatureGroupsAreIdentical(t1.construct, t2.construct)) {\n                this.identicalCache[comboId] = undefined;\n                return false;\n            }\n\n            if (!this.signatureGroupsAreIdentical(t1.index, t2.index)) {\n                this.identicalCache[comboId] = undefined;\n                return false;\n            }\n\n            this.identicalCache[comboId] = true;\n            return true;\n        }\n\n        public signatureGroupsAreIdentical(sg1: SignatureGroup, sg2: SignatureGroup) {\n\n            // covers the null case\n            if (sg1 == sg2) {\n                return true;\n            }\n\n            // covers the mixed-null case\n            if (!sg1 || !sg2) {\n                return false;\n            }\n\n            if (sg1.signatures.length != sg2.signatures.length) {\n                return false;\n            }\n\n            var sig1: Signature = null;\n            var sig2: Signature = null;\n            var sigsMatch = false;\n\n            // The signatures in the signature group may not be ordered...\n            // REVIEW: Should definition signatures be required to be identical as well?\n            for (var iSig1 = 0; iSig1 < sg1.signatures.length; iSig1++) {\n                sig1 = sg1.signatures[iSig1];\n\n                for (var iSig2 = 0; iSig2 < sg2.signatures.length; iSig2++) {\n                    sig2 = sg2.signatures[iSig2];\n\n                    if (this.signaturesAreIdentical(sig1, sig2)) {\n                        sigsMatch = true;\n                        break;\n                    }\n                }\n\n                if (sigsMatch) {\n                    sigsMatch = false;\n                    continue;\n                }\n\n                // no match found for a specific signature\n                return false;\n            }\n\n            return true;\n        }\n\n        public signaturesAreIdentical(s1: Signature, s2: Signature) {\n\n            if (s1.hasVariableArgList != s2.hasVariableArgList) {\n                return false;\n            }\n\n            if (s1.nonOptionalParameterCount != s2.nonOptionalParameterCount) {\n                return false;\n            }\n\n            if (s1.parameters.length != s2.parameters.length) {\n                return false;\n            }\n\n            if (!this.typesAreIdentical(s1.returnType.type, s2.returnType.type)) {\n                return false;\n            }\n\n            for (var iParam = 0; iParam < s1.parameters.length; iParam++) {\n                if (!thi";
var v27175 = v27176 + "s.typesAreIdentical(s1.parameters[iParam].parameter.typeLink.type, s2.parameters[iParam].parameter.typeLink.type)) {\n                    return false;\n                }\n            }\n\n            return true;\n        }\n\n        // Subtyping and Assignment compatibility\n\n        public sourceIsSubtypeOfTarget(source: Type, target: Type, comparisonInfo?: TypeComparisonInfo) { return this.sourceIsRelatableToTarget(source, target, false, this.subtypeCache, comparisonInfo); }\n        public signatureGroupIsSubtypeOfTarget(sg1: SignatureGroup, sg2: SignatureGroup, comparisonInfo?: TypeComparisonInfo) { return this.signatureGroupIsRelatableToTarget(sg1, sg2, false, this.subtypeCache, comparisonInfo); }\n        public signatureIsSubtypeOfTarget(s1: Signature, s2: Signature, comparisonInfo?: TypeComparisonInfo) { return this.signatureIsRelatableToTarget(s1, s2, false, this.subtypeCache, comparisonInfo); }\n\n        public sourceIsAssignableToTarget(source: Type, target: Type, comparisonInfo?: TypeComparisonInfo) { return this.sourceIsRelatableToTarget(source, target, true, this.assignableCache, comparisonInfo); }\n        public signatureGroupIsAssignableToTarget(sg1: SignatureGroup, sg2: SignatureGroup, comparisonInfo?: TypeComparisonInfo) { return this.signatureGroupIsRelatableToTarget(sg1, sg2, true, this.assignableCache, comparisonInfo); }\n        public signatureIsAssignableToTarget(s1: Signature, s2: Signature, comparisonInfo?: TypeComparisonInfo) { return this.signatureIsRelatableToTarget(s1, s2, true, this.assignableCache, comparisonInfo); }\n\n        public sourceIsRelatableToTarget(source: Type, target: Type, assignableTo: bool, comparisonCache: any, comparisonInfo: TypeComparisonInfo) {\n\n            // REVIEW: Does this check even matter?\n            //if (this.typesAreIdentical(source, target)) {\n            //    return true;\n            //}\n            if (source == target) {\n                return true;\n            }\n\n            // An error has already been reported in this case\n            if (!(source && target)) {\n                return true;\n            }\n\n            var comboId = (source.typeID << 16) | target.typeID;\n\n            // In the case of a 'false', we want to short-circuit a recursive typecheck\n            if (comparisonCache[comboId] != undefined) {\n                return true;\n            }\n\n            // this is one difference between subtyping and assignment compatibility\n            if (assignableTo) {\n                if (source == this.anyType || target == this.anyType) {\n                    return true;\n                }\n            }\n            else {\n                // This is one difference between assignment compatibility and subtyping\n                if (target == this.anyType) {\n                    return true;\n                }\n            }\n\n            if (source == this.undefinedType) {\n                return true;\n            }\n\n            if ((source == this.nullType) && (target != this.undefinedType && target != this.voidType)) {\n                return true;\n            }\n\n            // REVIEW: enum types aren't explicitly covered in the spec\n            if (target == this.numberType && (source.typeFlags & TypeFlags.IsEnum)) {\n                return true;\n            }\n            if (source == this.numberType && (target.typeFlags & TypeFlags.IsEnum)) {\n                return true;\n            }\n            if ((source.typeFlags & TypeFlags.IsEnum) || (target.typeFlags & TypeFlags.IsEnum)) {\n                return false;\n            }\n\n            if (source.isArray() || target.isArray()) {\n                if (!(source.isArray() && target.isArray())) {\n                    return false;\n                }\n                comparisonCache[comboId] = false;\n                var ret = this.sourceIsRelatableToTarget(source.elementType, target.elementType, assignableTo, comparisonCache, comparisonInfo);\n                if (ret) {\n                    comparisonCache[comboId] = true;\n                }\n                else {\n                    comparisonCache[comboId] = undefined;\n                }\n\n                return ret;\n            }\n\n            // this check ensures that we only operate on object types from this point forward,\n            // since the checks involving primitives occurred above\n            if (source.primitiveTypeClass != target.primitiveTypeClass) {\n\n                if (target.primitiveTypeClass == Primitive.None) {\n                    if (source == this.numberType && this.typeFlow.numberInterfaceType) {\n                        source = this.typeFlow.numberInterfaceType;\n                    }\n                    else if (source == this.stringType && this.typeFlow.stringInterfaceType) {\n                        source = this.typeFlow.stringInterfaceType;\n                    }\n                    else if (source == this.booleanType && this.typeFlow.booleanInterfaceType) {\n                        source = this.typeFlow.booleanInterfaceType;\n           ";
var v27174 = v27175 + '         }\n                    else {\n                        return false;\n                    }\n                }\n                else {\n                    return false;\n                }\n            }\n\n            comparisonCache[comboId] = false;\n\n            if (source.hasBase(target)) {\n                comparisonCache[comboId] = true;\n                return true;\n            }\n\n            if (this.typeFlow.objectInterfaceType && target == this.typeFlow.objectInterfaceType) {\n                return true;\n            }\n\n            if (this.typeFlow.functionInterfaceType && (source.call || source.construct) && target == this.typeFlow.functionInterfaceType) {\n                return true;\n            }\n\n            // REVIEW: We should perhaps do this, though it wouldn\'t be quite right without generics support\n            //if (this.typeFlow.arrayInterfaceType && (source.index) && target == this.typeFlow.arrayInterfaceType) {\n            //    return true;\n            //}\n\n            // At this point, if the target is a class, but not the source or a parent of the source, bail\n            if (target.isClass() || target.isClassInstance()) {\n                comparisonCache[comboId] = undefined;\n                return false;\n            }\n\n            if (target.memberScope && source.memberScope) {\n                var mPropKeys = target.memberScope.getAllValueSymbolNames(true);\n                var mProp: Symbol = null;\n                var nProp: Symbol = null;\n                var mPropType: Type = null;\n                var nPropType: Type = null;\n                var inferenceSymbol: InferenceSymbol = null;\n\n                for (var iMProp = 0; iMProp < mPropKeys.length; iMProp++) {\n                    mProp = target.memberScope.find(mPropKeys[iMProp], false, false);\n                    nProp = source.memberScope.find(mPropKeys[iMProp], false, false);\n\n                    // methods do not have the "arguments" field\n                    if (mProp.name == "arguments" &&\n                        this.typeFlow.iargumentsInterfaceType &&\n                        (this.typeFlow.iargumentsInterfaceType.symbol.flags & SymbolFlags.CompilerGenerated) &&\n                        mProp.kind() == SymbolKind.Variable &&\n                        (<VariableSymbol>mProp).variable.typeLink.type == this.typeFlow.iargumentsInterfaceType) {\n                        continue;\n                    }\n\n                    if (mProp.isInferenceSymbol()) {\n                        inferenceSymbol = <InferenceSymbol>mProp;\n                        if (inferenceSymbol.typeCheckStatus == TypeCheckStatus.NotStarted) {\n                            // REVIEW: TypeChanges: Does this ever really happen?  Maybe for out-of-order typecheck?\n                            this.typeFlow.typeCheck(mProp.declAST);\n                        }\n                    }\n                    mPropType = mProp.getType();\n\n                    if (!nProp) {\n                        // If it\'s not present on the type in question, look for the property on \'Object\'\n                        if (this.typeFlow.objectInterfaceType) {\n                            nProp = this.typeFlow.objectInterfaceType.memberScope.find(mPropKeys[iMProp], false, false);\n                        }\n\n                        if (!nProp) {\n                            // Now, the property was not found on Object, but the type in question is a function, look\n                            // for it on function\n                            if (this.typeFlow.functionInterfaceType && (mPropType.call || mPropType.construct)) {\n                                nProp = this.typeFlow.functionInterfaceType.memberScope.find(mPropKeys[iMProp], false, false);\n                            }\n\n                            // finally, check to see if the property is optional\n                            if (!nProp) {\n                                if (!(mProp.flags & SymbolFlags.Optional)) {\n                                    comparisonCache[comboId] = undefined;\n                                    if (comparisonInfo) { // only surface the first error\n                                        comparisonInfo.flags |= TypeRelationshipFlags.RequiredPropertyIsMissing;\n                                        comparisonInfo.addMessageToFront("Type \'" + source.getTypeName() + "\' is missing property \'" + mPropKeys[iMProp] + "\' from type \'" + target.getTypeName() + "\'");\n                                    }\n                                    return false;\n                                }\n                                else {\n                                    continue;\n                                }\n                            }\n                        }\n                    }\n\n                    if (nProp.isInferenceSymbol()) {\n                        inferenceSymbol = <InferenceSymbol>nProp;\n                        if (inferenceSymbol.typeCheckStatus == TypeCheckStatus.NotStarted) {\n                            this.typeFlow.type';
var v27173 = v27174 + 'Check(nProp.declAST);\n                        }\n                    }\n\n\n                    nPropType = nProp.getType();\n\n                    // catch the mutually recursive or cached cases\n                    if (mPropType && nPropType && (comparisonCache[(nPropType.typeID << 16) | mPropType.typeID] != undefined)) {\n                        continue;\n                    }\n\n                    if (!this.sourceIsRelatableToTarget(nPropType, mPropType, assignableTo, comparisonCache, comparisonInfo)) {\n                        comparisonCache[comboId] = undefined;\n                        if (comparisonInfo) { // only surface the first error\n                            comparisonInfo.flags |= TypeRelationshipFlags.IncompatiblePropertyTypes;\n                            comparisonInfo.addMessageToFront("Types of property \'" + mProp.name + "\' of types \'" + source.getTypeName() + "\' and \'" + target.getTypeName() + "\' are incompatible");\n                        }\n                        return false;\n                    }\n                }\n            }\n\n            // check signature groups\n            if (source.call || target.call) {\n                if (!this.signatureGroupIsRelatableToTarget(source.call, target.call, assignableTo, comparisonCache, comparisonInfo)) {\n                    if (comparisonInfo) {\n                        if (source.call && target.call) {\n                            comparisonInfo.addMessageToFront("Call signatures of types \'" + source.getTypeName() + "\' and \'" + target.getTypeName() + "\' are incompatible");\n                        }\n                        else {\n                            var hasSig = target.call ? target.getTypeName() : source.getTypeName();\n                            var lacksSig = !target.call ? target.getTypeName() : source.getTypeName();\n                            comparisonInfo.setMessage("Type \'" + hasSig + "\' requires a call signature, but Type \'" + lacksSig + "\' lacks one");\n                        }\n                        comparisonInfo.flags |= TypeRelationshipFlags.IncompatibleSignatures;\n                    }\n                    comparisonCache[comboId] = undefined;\n                    return false;\n                }\n            }\n\n            if (source.construct || target.construct) {\n                if (!this.signatureGroupIsRelatableToTarget(source.construct, target.construct, assignableTo, comparisonCache, comparisonInfo)) {\n                    if (comparisonInfo) {\n                        if (source.construct && target.construct) {\n                            comparisonInfo.addMessageToFront("Construct signatures of types \'" + source.getTypeName() + "\' and \'" + target.getTypeName() + "\' are incompatible");\n                        }\n                        else {\n                            var hasSig = target.construct ? target.getTypeName() : source.getTypeName();\n                            var lacksSig = !target.construct ? target.getTypeName() : source.getTypeName();\n                            comparisonInfo.setMessage("Type \'" + hasSig + "\' requires a construct signature, but Type \'" + lacksSig + "\' lacks one");\n                        }\n                        comparisonInfo.flags |= TypeRelationshipFlags.IncompatibleSignatures;\n                    }\n                    comparisonCache[comboId] = undefined;\n                    return false;\n                }\n            }\n\n            if (target.index) {\n                var targetIndex = !target.index && this.typeFlow.objectInterfaceType ? this.typeFlow.objectInterfaceType.index : target.index;\n                var sourceIndex = !source.index && this.typeFlow.objectInterfaceType ? this.typeFlow.objectInterfaceType.index : source.index;\n\n                if (!this.signatureGroupIsRelatableToTarget(sourceIndex, targetIndex, assignableTo, comparisonCache, comparisonInfo)) {\n                    if (comparisonInfo) {\n                        comparisonInfo.addMessageToFront("Index signatures of types \'" + source.getTypeName() + "\' and \'" + target.getTypeName() + "\' are incompatible");\n                        comparisonInfo.flags |= TypeRelationshipFlags.IncompatibleSignatures;\n                    }\n                    comparisonCache[comboId] = undefined;\n                    return false;\n                }\n            }\n\n            comparisonCache[comboId] = true;\n            return true;\n        }\n\n        // REVIEW: TypeChanges: Return an error context object so the user can get better diagnostic info\n        public signatureGroupIsRelatableToTarget(sourceSG: SignatureGroup, targetSG: SignatureGroup, assignableTo: bool, comparisonCache: any, comparisonInfo?: TypeComparisonInfo) {\n            if (sourceSG == targetSG) {\n                return true;\n            }\n\n            if (!(sourceSG && targetSG)) {\n                return false;\n            }\n\n            var mSig: Signature = null;\n            var nSig: Signature = null;\n            var foundMatch = false;\n\n            for (var iMSig = 0; ';
var v27172 = v27173 + 'iMSig < targetSG.signatures.length; iMSig++) {\n                mSig = targetSG.signatures[iMSig];\n\n                for (var iNSig = 0; iNSig < sourceSG.signatures.length; iNSig++) {\n                    nSig = sourceSG.signatures[iNSig];\n                    if (this.signatureIsRelatableToTarget(nSig, mSig, assignableTo, comparisonCache, comparisonInfo)) {\n                        foundMatch = true;\n                        break;\n                    }\n                }\n\n                if (foundMatch) {\n                    foundMatch = false;\n                    continue;\n                }\n                return false;\n            }\n\n            return true;\n        }\n\n        public signatureIsRelatableToTarget(sourceSig: Signature, targetSig: Signature, assignableTo: bool, comparisonCache: any, comparisonInfo?: TypeComparisonInfo) {\n\n            if (!sourceSig.parameters || !targetSig.parameters) {\n                return false;\n            }\n\n            var targetVarArgCount = targetSig.hasVariableArgList ? targetSig.nonOptionalParameterCount - 1 : targetSig.nonOptionalParameterCount;\n            var sourceVarArgCount = sourceSig.hasVariableArgList ? sourceSig.nonOptionalParameterCount - 1 : sourceSig.nonOptionalParameterCount;\n\n            if (sourceVarArgCount > targetVarArgCount && !targetSig.hasVariableArgList) {\n                if (comparisonInfo) {\n                    comparisonInfo.flags |= TypeRelationshipFlags.SourceSignatureHasTooManyParameters;\n                    comparisonInfo.addMessageToFront("Call signature expects " + targetVarArgCount + " or fewer parameters");\n                }\n                return false;\n            }\n\n            var sourceReturnType = sourceSig.returnType.type;\n            var targetReturnType = targetSig.returnType.type;\n\n            if (targetReturnType != this.voidType) {\n                if (!this.sourceIsRelatableToTarget(sourceReturnType, targetReturnType, assignableTo, comparisonCache, comparisonInfo)) {\n                    if (comparisonInfo) {\n                        comparisonInfo.flags |= TypeRelationshipFlags.IncompatibleReturnTypes;\n                        // No need to print this one here - it\'s printed as part of the signature error in sourceIsRelatableToTarget\n                        //comparisonInfo.addMessageToFront("Incompatible return types: \'" + sourceReturnType.getTypeName() + "\' and \'" + targetReturnType.getTypeName() + "\'");\n                    }\n                    return false;\n                }\n            }\n\n            var len = (sourceVarArgCount < targetVarArgCount && sourceSig.hasVariableArgList) ? targetVarArgCount : sourceVarArgCount;\n            var sourceParamType: Type = null;\n            var targetParamType: Type = null;\n            var sourceParamName = "";\n            var targetParamName = "";\n\n            for (var iSource = 0, iTarget = 0; iSource < len; iSource++, iTarget++) {\n\n                if (!sourceSig.hasVariableArgList || iSource < sourceVarArgCount) {\n                    sourceParamType = (<ParameterSymbol>sourceSig.parameters[iSource]).parameter.typeLink.type;\n                    sourceParamName = (<ParameterSymbol>sourceSig.parameters[iSource]).parameter.symbol.name;\n                }\n                else if (iSource == sourceVarArgCount) {\n                    sourceParamType = (<ParameterSymbol>sourceSig.parameters[iSource]).parameter.typeLink.type;\n                    if (sourceParamType.elementType) {\n                        sourceParamType = sourceParamType.elementType;\n                    }\n                    sourceParamName = (<ParameterSymbol>sourceSig.parameters[iSource]).parameter.symbol.name;\n                }\n\n                if (iTarget < targetSig.parameters.length && iTarget < targetVarArgCount) {\n                    targetParamType = (<ParameterSymbol>targetSig.parameters[iTarget]).parameter.typeLink.type;\n                    targetParamName = (<ParameterSymbol>targetSig.parameters[iTarget]).parameter.symbol.name;\n                }\n                else if (targetSig.hasVariableArgList && iTarget == targetVarArgCount) {\n                    targetParamType = (<ParameterSymbol>targetSig.parameters[iTarget]).parameter.typeLink.type;\n                    if (targetParamType.elementType) {\n                        targetParamType = targetParamType.elementType;\n                    }\n                    targetParamName = (<ParameterSymbol>targetSig.parameters[iTarget]).parameter.symbol.name;\n                }\n\n                if (!(this.sourceIsRelatableToTarget(sourceParamType, targetParamType, assignableTo, comparisonCache, comparisonInfo) ||\n                        this.sourceIsRelatableToTarget(targetParamType, sourceParamType, assignableTo, comparisonCache, comparisonInfo))) {\n\n                    if (comparisonInfo) {\n                        comparisonInfo.flags |= TypeRelationshipFlags.IncompatibleParameterTypes;\n                    }\n                    return false;\n                }\n            }\n   ';
var v27171 = v27172 + '         return true;\n        }\n    }\n}//\n// Copyright (c) Microsoft Corporation.  All rights reserved.\n// \n// Licensed under the Apache License, Version 2.0 (the "License");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an "AS IS" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n\n///<reference path=\'typescript.ts\' />\n\nmodule TypeScript {\n    export class Continuation {\n        public exceptionBlock = -1;\n        constructor (public normalBlock: number) { }\n    }\n\n    function getBaseTypeLinks(bases: ASTList, baseTypeLinks: TypeLink[]) {\n        if (bases) {\n            var len = bases.members.length;\n            if (baseTypeLinks == null) {\n                baseTypeLinks = new TypeLink[];\n            }\n            for (var i = 0; i < len; i++) {\n                var baseExpr = bases.members[i];\n                var name = baseExpr;\n                var typeLink = new TypeLink();\n                typeLink.ast = name;\n                baseTypeLinks[baseTypeLinks.length] = typeLink;\n            }\n        }\n        return baseTypeLinks;\n    }\n\n    function getBases(type: Type, typeDecl: TypeDeclaration) {\n        type.extendsTypeLinks = getBaseTypeLinks(typeDecl.extendsList, type.extendsTypeLinks);\n        type.implementsTypeLinks = getBaseTypeLinks(typeDecl.implementsList, type.implementsTypeLinks);\n    }\n\n    function addPrototypeField(classType: Type, ast: AST, context: TypeCollectionContext) {\n        var field = new ValueLocation();\n        field.typeLink = new TypeLink();\n        field.typeLink.ast = ast;\n        field.typeLink.type = classType.instanceType;\n\n        var fieldSymbol =\n            new FieldSymbol("prototype", ast.minChar,\n                            context.checker.locationInfo.unitIndex, true, field);\n        fieldSymbol.flags |= (SymbolFlags.Property | SymbolFlags.BuiltIn);\n        field.symbol = fieldSymbol;\n        fieldSymbol.declAST = ast;\n        classType.members.addPublicMember("prototype", fieldSymbol);\n    }\n\n    export function createNewConstructGroupForType(type: Type) {\n        var signature = new Signature();\n        signature.returnType = new TypeLink();\n        signature.returnType.type = type.instanceType;\n        signature.parameters = [];\n\n        type.construct = new SignatureGroup();\n        type.construct.addSignature(signature);     \n    }\n\n    export function cloneParentConstructGroupForChildType(child: Type, parent: Type) {\n        child.construct = new SignatureGroup();\n        var sig: Signature = null;\n\n        if (!parent.construct) {\n            createNewConstructGroupForType(parent);\n        }\n\n        for (var i = 0; i < parent.construct.signatures.length; i++) { \n            sig = new Signature();\n            sig.parameters = parent.construct.signatures[i].parameters;\n            sig.nonOptionalParameterCount = parent.construct.signatures[i].nonOptionalParameterCount;\n            sig.typeCheckStatus = parent.construct.signatures[i].typeCheckStatus;\n            sig.declAST = parent.construct.signatures[i].declAST;\n            sig.returnType = new TypeLink();\n            sig.returnType.type = child.instanceType;\n            child.construct.addSignature(sig);\n        }\n\n    }\n\n    export var globalId = "__GLO";\n\n    export interface IAliasScopeContext {\n        topLevelScope: ScopeChain;\n        members: IHashTable;\n        tcContext: TypeCollectionContext;\n    }\n\n    function findTypeSymbolInScopeChain(name: string, scopeChain: ScopeChain): Symbol {\n        var symbol = scopeChain.scope.find(name, false, true);\n\n        if (symbol == null && scopeChain.previous) {\n            symbol = findTypeSymbolInScopeChain(name, scopeChain.previous);\n        }\n\n        return symbol;\n    }\n\n    function findSymbolFromAlias(alias: AST, context: IAliasScopeContext): Symbol {\n        var symbol: Symbol = null;\n        switch (alias.nodeType) {\n            case NodeType.Name:\n                var name = (<Identifier>alias).text;\n                var isDynamic = isQuoted(name);\n\n                var findSym = (id: string) => {\n                    if (context.members) {\n                        return context.members.lookup(name);\n                    }\n                    else {\n                        return findTypeSymbolInScopeChain(name, context.topLevelScope);\n                    }\n                }\n\n                if (isDynamic) {\n                    symbol = context.tcContext.checker.findSymbolForDynamicModule(name, context.tcContext.script.locationInfo.filename, findSym);\n                }\n                else {\n                    symbol = findSym(name);\n                }\n\n                break;\n\n     ';
var v27170 = v27171 + "       case NodeType.Dot:\n                var dottedExpr = <BinaryExpression>alias;\n                var op1Sym = findSymbolFromAlias(dottedExpr.operand1, context);\n\n                if (op1Sym && op1Sym.getType()) {\n                    symbol = findSymbolFromAlias(dottedExpr.operand2, context);\n                }\n\n                break;\n\n            default:\n                break;\n        }\n\n        if (symbol) {\n            var symType = symbol.getType();\n            if (symType) {\n                var members = symType.members;\n                if (members) {\n                    context.members = members.publicMembers;\n                }\n            }\n        }\n\n        return symbol;\n    }\n\n    export function preCollectImportTypes(ast: AST, parent: AST, context: TypeCollectionContext) {\n        var scopeChain = context.scopeChain;\n        var typeSymbol: TypeSymbol = null;\n        var modType: ModuleType = null;\n        var importDecl = <ImportDeclaration>ast;\n\n        // REVIEW: technically, this call isn't strictly necessary, since we'll find the type during the call to resolveTypeMembers\n        var aliasedModSymbol = findSymbolFromAlias(importDecl.alias, { topLevelScope: scopeChain, members: null, tcContext: context });\n        var isGlobal = context.scopeChain.container == context.checker.gloMod;\n\n        if (aliasedModSymbol) {\n            var aliasedModType = aliasedModSymbol.getType();\n\n            if (aliasedModType) {\n                modType = <ModuleType>aliasedModType;\n            }\n        }\n\n        typeSymbol = new TypeSymbol(importDecl.id.text, importDecl.id.minChar, importDecl.limChar - importDecl.minChar,\n                                    context.checker.locationInfo.unitIndex, modType);\n\n        typeSymbol.aliasLink = importDecl;\n\n        if (context.scopeChain.moduleDecl) {\n            typeSymbol.flags |= SymbolFlags.ModuleMember;\n            typeSymbol.declModule = context.scopeChain.moduleDecl;\n        }\n\n        typeSymbol.declAST = importDecl;\n        importDecl.id.sym = typeSymbol;\n        scopeChain.scope.enter(scopeChain.container, ast, typeSymbol,\n                                context.checker.errorReporter, isGlobal, true, false);\n        scopeChain.scope.enter(scopeChain.container, ast, typeSymbol,\n                                context.checker.errorReporter, isGlobal, false, false);\n        return true;\n    }\n\n    export function preCollectModuleTypes(ast: AST, parent: AST, context: TypeCollectionContext) {\n        var scopeChain = context.scopeChain;\n\n        var moduleDecl: ModuleDeclaration = <ModuleDeclaration>ast;\n\n        var isAmbient = hasFlag(moduleDecl.modFlags, ModuleFlags.Ambient);\n        var isEnum = hasFlag(moduleDecl.modFlags, ModuleFlags.IsEnum);\n        var isGlobal = context.scopeChain.container == context.checker.gloMod;\n        var isExported = hasFlag(moduleDecl.modFlags, ModuleFlags.Exported);\n        var modName = (<Identifier>moduleDecl.name).text;\n\n        var isDynamic = isQuoted(modName);\n\n        var symbol = scopeChain.scope.findLocal(modName, false, false);\n        var typeSymbol: TypeSymbol = null;\n        var modType: ModuleType = null;\n        if ((symbol == null) || (symbol.kind() != SymbolKind.Type)) {\n\n            if (modType == null) {\n                var enclosedTypes = new ScopedMembers(new DualStringHashTable(new StringHashTable(), new StringHashTable()));\n                var ambientEnclosedTypes = new ScopedMembers(new DualStringHashTable(new StringHashTable(), new StringHashTable()));\n                modType = new ModuleType(enclosedTypes, ambientEnclosedTypes);\n                if (isEnum) {\n                    modType.typeFlags |= TypeFlags.IsEnum;\n                }\n                modType.members = new ScopedMembers(new DualStringHashTable(new StringHashTable(), new StringHashTable()));\n                modType.ambientMembers = new ScopedMembers(new DualStringHashTable(new StringHashTable(), new StringHashTable()));\n                modType.setHasImplementation();\n            }\n\n            typeSymbol = new TypeSymbol(modName, moduleDecl.name.minChar, modName.length,\n                                        context.checker.locationInfo.unitIndex, modType);\n            typeSymbol.isDynamic = isQuoted(moduleDecl.prettyName);\n\n            if (context.scopeChain.moduleDecl) {\n                typeSymbol.declModule = context.scopeChain.moduleDecl;\n            }\n            typeSymbol.declAST = moduleDecl;\n            typeSymbol.prettyName = moduleDecl.prettyName;\n            scopeChain.scope.enter(scopeChain.container, ast, typeSymbol,\n                                    context.checker.errorReporter, isExported || isGlobal, true, isAmbient);\n            scopeChain.scope.enter(scopeChain.container, ast, typeSymbol,\n                                    context.checker.errorReporter, isExported || isGlobal, false, isAmbient);\n            modType.symbol = typeSymbol;\n        }\n        else {\n            if (symbol && symbol.declAST && symbol.";
var v27169 = v27170 + "declAST.nodeType != NodeType.ModuleDeclaration) {\n                context.checker.errorReporter.simpleError(moduleDecl, \"Conflicting symbol name for module '\" + modName + \"'\");\n            }\n            typeSymbol = <TypeSymbol>symbol;\n\n            // initialize new private scope for the type\n            var publicEnclosedTypes = typeSymbol.type.getAllEnclosedTypes().publicMembers;\n            var publicEnclosedTypesTable = (publicEnclosedTypes == null) ? new StringHashTable() : publicEnclosedTypes;\n            var enclosedTypes = new ScopedMembers(new DualStringHashTable(publicEnclosedTypesTable, new StringHashTable()));\n\n            var publicEnclosedAmbientTypes = typeSymbol.type.getAllAmbientEnclosedTypes().publicMembers;\n            var publicAmbientEnclosedTypesTable = (publicEnclosedAmbientTypes == null) ? new StringHashTable() : publicEnclosedAmbientTypes;\n            var ambientEnclosedTypes = new ScopedMembers(new DualStringHashTable(publicAmbientEnclosedTypesTable, new StringHashTable()));\n\n            var publicMembers = typeSymbol.type.members.publicMembers;\n            var publicMembersTable = (publicMembers == null) ? new StringHashTable() : publicMembers;\n            var members = new ScopedMembers(new DualStringHashTable(publicMembersTable, new StringHashTable()));\n\n            var publicAmbientMembers = typeSymbol.type.ambientMembers.publicMembers;\n            var publicAmbientMembersTable = (publicAmbientMembers == null) ? new StringHashTable() : publicAmbientMembers;\n            var ambientMembers = new ScopedMembers(new DualStringHashTable(publicAmbientMembersTable, new StringHashTable()));\n\n            modType = new ModuleType(enclosedTypes, ambientEnclosedTypes);\n            if (isEnum) {\n                modType.typeFlags |= TypeFlags.IsEnum;\n            }\n            modType.members = members;\n            modType.ambientMembers = ambientMembers;\n            modType.setHasImplementation();\n            modType.symbol = typeSymbol;\n\n            typeSymbol.addLocation(moduleDecl.minChar);\n            typeSymbol.expansions.push(modType);\n            typeSymbol.expansionsDeclAST.push(moduleDecl);\n\n        }\n        if (context.scopeChain.moduleDecl) {\n            context.scopeChain.moduleDecl.recordNonInterface();\n        }\n        // REVIEW: If multiple disparate module decls for the same module don't agree\n        // in export privileges, how should we handle it?\n        if (isExported) {\n            typeSymbol.flags |= SymbolFlags.Exported;\n        }\n        if ((context.scopeChain.moduleDecl) ||\n            (context.scopeChain.container == context.checker.gloMod)) {\n            typeSymbol.flags |= SymbolFlags.ModuleMember;\n        }\n\n        moduleDecl.mod = modType;\n        pushTypeCollectionScope(typeSymbol, modType.members,\n                                modType.ambientMembers,\n                                modType.enclosedTypes,\n                                modType.ambientEnclosedTypes,\n                                context, null, null, moduleDecl);\n\n        return true;\n    }\n\n    export function preCollectClassTypes(ast: AST, parent: AST, context: TypeCollectionContext) {\n        var scopeChain = context.scopeChain;\n        var classDecl = <ClassDeclaration>ast;\n\n        var classType: Type;\n        var instanceType: Type;\n        var typeSymbol: TypeSymbol = null;\n        var className = (<Identifier>classDecl.name).text;\n        var alreadyInScope = false;\n        var isAmbient = hasFlag(classDecl.varFlags, VarFlags.Ambient);\n        var isExported = hasFlag(classDecl.varFlags, VarFlags.Exported);\n        var isGlobal = context.scopeChain.container == context.checker.gloMod;\n        var containerMod = <TypeSymbol>scopeChain.container;\n        var foundValSymbol = false;\n\n        typeSymbol = <TypeSymbol>scopeChain.scope.findLocal(className, false, true);\n        \n        // check the value space, since an override may have been declared with the type's name\n        // REVIEW-CLASSES\n        if (!typeSymbol) {\n            var valTypeSymbol = scopeChain.scope.findLocal(className, false, false);\n            \n            if (valTypeSymbol &&\n                valTypeSymbol.isType() &&\n                valTypeSymbol.declAST &&\n                valTypeSymbol.declAST.nodeType == NodeType.FuncDecl &&\n                (<FuncDecl>valTypeSymbol.declAST).isSignature()) {\n                \n                typeSymbol = <TypeSymbol>valTypeSymbol;\n                foundValSymbol = true;\n                \n                if (isExported) {\n                    typeSymbol.flags |= SymbolFlags.Exported;\n                }\n            \n                if (isAmbient) {\n                    typeSymbol.flags |= SymbolFlags.Ambient;\n                }                \n                \n                // the class was never entered into type space, so add it\n                context.scopeChain.scope.enter(context.scopeChain.container, ast, typeSymbol,\n                                            context.checke";
var v27168 = v27169 + "r.errorReporter, isExported || isGlobal, true, isAmbient);                \n            }\n        }\n        \n        if (typeSymbol && !foundValSymbol && (typeSymbol.declAST != classDecl)) {\n            typeSymbol = null;\n        }\n\n        if (typeSymbol == null) {\n            var valueSymbol = scopeChain.scope.findLocal(className, false, false);\n            classType = new Type();\n            classType.setHasImplementation();\n            instanceType = new Type();\n            instanceType.setHasImplementation();\n            classType.instanceType = instanceType;\n            classType.members = new ScopedMembers(new DualStringHashTable(new StringHashTable(), new StringHashTable()));\n            classType.ambientMembers = new ScopedMembers(new DualStringHashTable(new StringHashTable(), new StringHashTable()));\n            addPrototypeField(classType, classDecl, context);\n            instanceType.members = new ScopedMembers(new DualStringHashTable(new StringHashTable(), new StringHashTable()));\n            instanceType.ambientMembers = new ScopedMembers(new DualStringHashTable(new StringHashTable(), new StringHashTable()));\n            typeSymbol = new TypeSymbol(className, classDecl.name.minChar, className.length,\n                                        context.checker.locationInfo.unitIndex, classType);\n            typeSymbol.declAST = classDecl;\n            typeSymbol.instanceType = instanceType;\n            classType.symbol = typeSymbol;\n            instanceType.symbol = typeSymbol;\n\n            if (context.scopeChain.moduleDecl) {\n                context.scopeChain.moduleDecl.recordNonInterface();\n                typeSymbol.declModule = context.scopeChain.moduleDecl;\n                typeSymbol.flags |= SymbolFlags.ModuleMember;\n            }\n\n            if (isExported) {\n                typeSymbol.flags |= SymbolFlags.Exported;\n            }\n            \n            if (isAmbient) {\n                typeSymbol.flags |= SymbolFlags.Ambient;\n            }\n\n            ast.type = classType;\n\n            // class in both name spaces (type for instance type; constructor representative in value space)\n            context.scopeChain.scope.enter(context.scopeChain.container, ast, typeSymbol,\n                                            context.checker.errorReporter, isExported || isGlobal, true, isAmbient);\n\n            if (valueSymbol == null) {\n                context.scopeChain.scope.enter(context.scopeChain.container, ast, typeSymbol,\n                                            context.checker.errorReporter, isExported || isGlobal, false, isAmbient);\n            }\n        }\n        else {                            \n            classType = typeSymbol.type;\n            \n            // If the instance type is null, a call overload was likely declared before the class constructor\n            if (classType.instanceType == null) {\n                classType.instanceType = new Type();\n                classType.instanceType.setHasImplementation();\n                classType.instanceType.members = new ScopedMembers(new DualStringHashTable(new StringHashTable(), new StringHashTable()));\n                classType.instanceType.symbol = classType.symbol;\n                classType.members = new ScopedMembers(new DualStringHashTable(new StringHashTable(), new StringHashTable()));\n                classType.ambientMembers = new ScopedMembers(new DualStringHashTable(new StringHashTable(), new StringHashTable()));\n            }\n            \n            instanceType = classType.instanceType;\n            ast.type = classType;\n        }\n        \n        // if the class has no declared constructor, either create a default signature or adapt \n        // it's base class's signature group\n        if (!classDecl.constructorDecl) {\n\n            if (typeSymbol && typeSymbol.declAST && typeSymbol.declAST.type && typeSymbol.declAST.type.call && !(<FuncDecl>typeSymbol.declAST).isOverload) {\n                context.checker.errorReporter.duplicateIdentifier(typeSymbol.declAST, typeSymbol.name);\n            }\n\n            createNewConstructGroupForType(classDecl.type);\n        }\n\n        classType.typeFlags |= TypeFlags.IsClass;\n        instanceType.typeFlags |= TypeFlags.IsClass;\n\n        getBases(instanceType, classDecl);\n        pushTypeCollectionScope(typeSymbol, instanceType.members, instanceType.ambientMembers, null, null,\n                                context, instanceType, classType, null);\n        return true;\n    }\n\n    export function preCollectInterfaceTypes(ast: AST, parent: AST, context: TypeCollectionContext) {\n        var scopeChain = context.scopeChain;\n        var interfaceDecl = <InterfaceDeclaration>ast;\n        var interfaceSymbol: TypeSymbol = null;\n        var interfaceType: Type = null;\n        var isExported = hasFlag(interfaceDecl.varFlags, VarFlags.Exported);\n        var isGlobal = context.scopeChain.container == context.checker.gloMod;\n        var alreadyInScope = true;\n\n        alreadyInScope = false;\n        var ";
var v27167 = v27168 + 'interfaceName = (<Identifier>interfaceDecl.name).text;\n        interfaceSymbol = <TypeSymbol>scopeChain.scope.findLocal(interfaceName, false, true);\n        if (interfaceSymbol == null) {\n            interfaceType = new Type();\n            interfaceSymbol = new TypeSymbol(interfaceName,\n                                        interfaceDecl.name.minChar,\n                                        interfaceName.length,\n                                        context.checker.locationInfo.unitIndex,\n                                        interfaceType);\n            interfaceType.symbol = interfaceSymbol;\n            // REVIEW: Shouldn\'t allocate another table for interface privates\n            interfaceType.members = new ScopedMembers(new DualStringHashTable(new StringHashTable(), new StringHashTable()));\n            interfaceType.ambientMembers = new ScopedMembers(new DualStringHashTable(new StringHashTable(), new StringHashTable()));\n            interfaceSymbol.declAST = interfaceDecl;\n            interfaceSymbol.declModule = context.scopeChain.moduleDecl;\n        }\n        else {\n            alreadyInScope = true;\n            interfaceType = interfaceSymbol.type;\n        }\n\n        if (!interfaceType) {\n            interfaceType = context.checker.anyType;\n        }\n\n        ast.type = interfaceType;\n        getBases(interfaceType, interfaceDecl);\n\n        if (isExported) {\n            interfaceSymbol.flags |= SymbolFlags.Exported;\n        }\n\n        if (context.scopeChain.moduleDecl) {\n            interfaceSymbol.flags |= SymbolFlags.ModuleMember;\n        }\n\n        if (!alreadyInScope) {\n            context.scopeChain.scope.enter(context.scopeChain.container, ast,\n                                            interfaceSymbol, context.checker.errorReporter, isGlobal || isExported, true, false); // REVIEW: Technically, interfaces should be ambient\n        }\n        pushTypeCollectionScope(interfaceSymbol, interfaceType.members, interfaceType.ambientMembers, null, null,\n                                context, interfaceType, null, null);\n        return true;\n    }\n\n    export function preCollectArgDeclTypes(ast: AST, parent: AST, context: TypeCollectionContext) {\n        var scopeChain = context.scopeChain;\n        var argDecl = <ArgDecl>ast;\n        if (hasFlag(argDecl.varFlags, VarFlags.Public | VarFlags.Private)) {\n            var field = new ValueLocation();\n            var isPrivate = hasFlag(argDecl.varFlags, VarFlags.Private);\n            var fieldSymbol =\n                new FieldSymbol(argDecl.id.text, argDecl.id.minChar,\n                                context.checker.locationInfo.unitIndex,\n                                !hasFlag(argDecl.varFlags, VarFlags.Readonly),\n                                field);\n            fieldSymbol.transferVarFlags(argDecl.varFlags);\n            field.symbol = fieldSymbol;\n            fieldSymbol.declAST = ast;\n            argDecl.parameterPropertySym = fieldSymbol;\n\n            context.scopeChain.scope.enter(context.scopeChain.container, ast,\n                                            fieldSymbol, context.checker.errorReporter, !isPrivate, false, false);\n\n            field.typeLink = getTypeLink(argDecl.typeExpr, context.checker, argDecl.init == null);\n            argDecl.sym = fieldSymbol;\n        }\n        return false;\n    }\n\n    export function preCollectVarDeclTypes(ast: AST, parent: AST, context: TypeCollectionContext) {\n        var scopeChain = context.scopeChain;\n        var varDecl = <VarDecl>ast;\n        var isAmbient = hasFlag(varDecl.varFlags, VarFlags.Ambient);\n        var isExported = hasFlag(varDecl.varFlags, VarFlags.Exported);\n        var isGlobal = context.scopeChain.container == context.checker.gloMod;\n        var isProperty = hasFlag(varDecl.varFlags, VarFlags.Property);\n        var isStatic = hasFlag(varDecl.varFlags, VarFlags.Static);\n        var isPrivate = hasFlag(varDecl.varFlags, VarFlags.Private);\n        var isOptional = hasFlag(varDecl.id.flags, ASTFlags.OptionalName);\n\n        if (context.scopeChain.moduleDecl) {\n            context.scopeChain.moduleDecl.recordNonInterface();\n        }\n        if (isProperty ||\n            isExported ||\n            (context.scopeChain.container == context.checker.gloMod) ||\n            context.scopeChain.moduleDecl) {\n            if (isAmbient) {\n                var existingSym =\n                    <FieldSymbol>scopeChain.scope.findLocal(varDecl.id.text, false, false);\n                if (existingSym) {\n                    varDecl.sym = existingSym;\n                    return false;\n                }\n            }\n\n            // Defensive error detection...\n            if (varDecl.id == null) {\n                context.checker.errorReporter.simpleError(varDecl, "Expected variable identifier at this location");\n                return false;\n            }\n\n            var field = new ValueLocation();\n            var fieldSymbol =\n                new FieldSymbol(varDecl.id.text, varDecl.id.minChar,\n         ';
var v27166 = v27167 + '                       context.checker.locationInfo.unitIndex,\n                                (varDecl.varFlags & VarFlags.Readonly) == VarFlags.None,\n                                field);\n            fieldSymbol.transferVarFlags(varDecl.varFlags);\n            if (isOptional) {\n                fieldSymbol.flags |= SymbolFlags.Optional;\n            }\n            field.symbol = fieldSymbol;\n            fieldSymbol.declAST = ast;\n            if ((context.scopeChain.moduleDecl) ||\n                (context.scopeChain.container == context.checker.gloMod)) {\n                fieldSymbol.flags |= SymbolFlags.ModuleMember;\n                fieldSymbol.declModule = context.scopeChain.moduleDecl;\n            }\n\n            // if it\'s static, enter it into the class\'s member list directly\n            if (hasFlag(varDecl.varFlags, VarFlags.Property) && isStatic && context.scopeChain.classType) {\n                if (!context.scopeChain.classType.members.publicMembers.add(varDecl.id.text, fieldSymbol)) {\n                    context.checker.errorReporter.duplicateIdentifier(ast, fieldSymbol.name);\n                }\n                fieldSymbol.container = context.scopeChain.classType.symbol;\n            }\n            else {\n                context.scopeChain.scope.enter(context.scopeChain.container,\n                                                ast,\n                                                fieldSymbol,\n                                                context.checker.errorReporter,\n                                                !isPrivate && (isProperty || isExported || isGlobal || isStatic),\n                                                false,\n                                                isAmbient);\n            }\n\n            if (hasFlag(varDecl.varFlags, VarFlags.Exported)) {\n                fieldSymbol.flags |= SymbolFlags.Exported;\n            }\n\n            field.typeLink = getTypeLink(varDecl.typeExpr, context.checker,\n                                        varDecl.init == null);\n            varDecl.sym = fieldSymbol;\n        }\n        return false;\n    }\n\n    export function preCollectFuncDeclTypes(ast: AST, parent: AST, context: TypeCollectionContext) {\n        var scopeChain = context.scopeChain;\n\n        // REVIEW: This will have to change when we move to "export"\n        if (context.scopeChain.moduleDecl) {\n            context.scopeChain.moduleDecl.recordNonInterface();\n        }\n\n        var funcDecl = <FuncDecl>ast;\n        var fgSym: TypeSymbol = null;\n        var nameText = funcDecl.getNameText();\n        var isExported = hasFlag(funcDecl.fncFlags, FncFlags.Exported | FncFlags.ClassPropertyMethodExported);\n        var isStatic = hasFlag(funcDecl.fncFlags, FncFlags.Static);\n        var isPrivate = hasFlag(funcDecl.fncFlags, FncFlags.Private);\n        var isConstructor = funcDecl.isConstructMember() || funcDecl.isConstructor;\n        var containerSym:TypeSymbol = <TypeSymbol> (((funcDecl.isMethod() && isStatic) || funcDecl.isAccessor()) && context.scopeChain.classType ? context.scopeChain.classType.symbol : context.scopeChain.container);\n        var containerScope: SymbolScope = context.scopeChain.scope;\n        var isGlobal = containerSym == context.checker.gloMod;\n        var isOptional = funcDecl.name && hasFlag(funcDecl.name.flags, ASTFlags.OptionalName);\n        var go = false;\n        var foundSymbol = false; \n\n        // If this is a class constructor, the "container" is actually the class declaration\n        if (isConstructor && hasFlag(funcDecl.fncFlags, FncFlags.ClassMethod)) {\n            containerSym = <TypeSymbol>containerSym.container;\n            containerScope = scopeChain.previous.scope;\n        }\n\n        funcDecl.unitIndex = context.checker.locationInfo.unitIndex;\n        \n        // If the parent is the constructor, and this isn\'t an instance method, skip it.\n        // That way, we\'ll set the type during scope assignment, and can be sure that the\n        // function will be placed in the constructor-local scope\n        if (!funcDecl.isConstructor &&\n            containerSym &&\n            containerSym.declAST &&\n            containerSym.declAST.nodeType == NodeType.FuncDecl &&\n            (<FuncDecl>containerSym.declAST).isConstructor &&\n            !funcDecl.isMethod()) {\n            return go;\n        }        \n\n        // Interfaces and overloads\n        if (hasFlag(funcDecl.fncFlags, FncFlags.Signature)) {\n            var instType = context.scopeChain.thisType;                       \n\n            // If the function is static, search in the class type\'s\n            if (nameText && nameText != "__missing") {\n                if (isStatic) {\n                    fgSym = containerSym.type.members.allMembers.lookup(nameText);\n                }\n                else {\n                    // REVIEW: This logic should be symmetric with preCollectClassTypes\n                    fgSym = <TypeSymbol>containerScope.findLocal(nameText, false, false);\n                    \n                 ';
var v27165 = v27166 + "   // If we could not find the function symbol in the value context, look\n                    // in the type context.\n                    // This would be the case, for example, if a class constructor override\n                    // were declared before a call override for a given class\n                    if (fgSym == null) {\n                        fgSym = <TypeSymbol>containerScope.findLocal(nameText, false, true);\n                    }\n                }\n                \n                if (fgSym) {\n                    foundSymbol = true;\n                    \n                    // We'll combine ambient and non-ambient funcdecls during typecheck (for contextual typing).,\n                    // So, if they don't agree, don't use the symbol we've found                    \n                    if (!funcDecl.isSignature() && (hasFlag(funcDecl.fncFlags, FncFlags.Ambient) != hasFlag(fgSym.flags, SymbolFlags.Ambient))) {\n                       fgSym = null;\n                    }\n                }                \n            }\n            \n            // a function with this symbol has not yet been declared in this scope\n            // REVIEW: In the code below, we need to ensure that only function overloads are considered\n            //  (E.g., if a vardecl has the same id as a function or class, we may use the vardecl symbol\n            //  as the overload.)  Defensively, however, the vardecl won't have a type yet, so it should\n            //  suffice to just check for a null type when considering the overload symbol in\n            //  createFunctionSignature\n            if (fgSym == null) {\n                if (!(funcDecl.isSpecialFn())) {                    \n                    fgSym = context.checker.createFunctionSignature(funcDecl, containerSym, containerScope, null, !foundSymbol).declAST.type.symbol;\n                }\n                else {\n                    fgSym = context.checker.createFunctionSignature(funcDecl, containerSym, containerScope, containerSym, false).declAST.type.symbol;                                                                         \n                }\n                \n                // set the symbol's declAST, which will point back to the first declaration (symbol or otherwise)\n                // related to this symbol\n                if (fgSym.declAST == null || !funcDecl.isSpecialFn()) {\n                    fgSym.declAST = ast;\n                }\n            }\n            else { // there exists a symbol with this name\n                \n                if ((fgSym.kind() == SymbolKind.Type)) {\n\n                    fgSym = context.checker.createFunctionSignature(funcDecl, containerSym, containerScope, fgSym, false).declAST.type.symbol;\n                }\n                else {\n                    context.checker.errorReporter.simpleError(funcDecl, \"Function or method '\" + funcDecl.name.actualText + \"' already declared as a property\");\n                }\n            }\n         \n            if (funcDecl.isSpecialFn() && !isStatic) {\n                funcDecl.type = instType ? instType : fgSym.type; \n            }\n            else {\n                funcDecl.type = fgSym.type;\n            }            \n        }\n        else {\n            // declarations\n            \n            if (nameText) {\n                if (isStatic) {\n                    fgSym = containerSym.type.members.allMembers.lookup(nameText);\n                }\n                else {\n                    // in the constructor case, we want to check the parent scope for overloads\n                    if (funcDecl.isConstructor && context.scopeChain.previous) {\n                        fgSym = <TypeSymbol>context.scopeChain.previous.scope.findLocal(nameText, false, false);\n                    }\n                    \n                    if (fgSym == null) {\n                        fgSym = <TypeSymbol>containerScope.findLocal(nameText, false, false);\n                    }\n                }\n                if (fgSym) {\n                    foundSymbol = true;\n                    \n                    if (!isConstructor && fgSym.declAST.nodeType == NodeType.FuncDecl && !(<FuncDecl>fgSym.declAST).isAccessor() && !(<FuncDecl>fgSym.declAST).isSignature()) {\n                        fgSym = null;\n                        foundSymbol = false;\n                    }\n                }                \n            }\n\n            // REVIEW: Move this check into the typecheck phase?  It's only being run over properties...\n            if (fgSym &&\n                !fgSym.isAccessor() &&\n                fgSym.type &&\n                fgSym.type.construct &&\n                fgSym.type.construct.signatures != [] &&\n                (fgSym.type.construct.signatures[0].declAST == null ||\n                    !hasFlag(fgSym.type.construct.signatures[0].declAST.fncFlags, FncFlags.Ambient)) &&\n                !funcDecl.isConstructor) {\n                context.checker.errorReporter.simpleError(funcDecl, \"Functions may not have class overloads\");\n            }\n\n   ";
var v27164 = v27165 + '         if (fgSym && !(fgSym.kind() == SymbolKind.Type) && funcDecl.isMethod() && !funcDecl.isAccessor() && !funcDecl.isConstructor) {\n                context.checker.errorReporter.simpleError(funcDecl, "Function or method \'" + funcDecl.name.actualText + "\' already declared as a property");\n                fgSym.type = context.checker.anyType;\n            }\n            var sig = context.checker.createFunctionSignature(funcDecl, containerSym, containerScope, fgSym, !foundSymbol);\n\n            // it\'s a getter or setter function                                   \n            if (((!fgSym || fgSym.declAST.nodeType != NodeType.FuncDecl) && funcDecl.isAccessor()) || (fgSym && fgSym.isAccessor())) {\n                funcDecl.accessorSymbol = context.checker.createAccessorSymbol(funcDecl, fgSym, containerSym.type, (funcDecl.isMethod() && isStatic), true, containerScope, containerSym);\n            }\n\n            funcDecl.type.symbol.declAST = ast;\n            if (funcDecl.isConstructor) { // REVIEW: Remove when classes completely replace oldclass\n                go = true;\n            };\n        }\n        if (isExported) {\n            if (funcDecl.type.call) {\n                funcDecl.type.symbol.flags |= SymbolFlags.Exported;\n            }\n            \n            // Accessors are set to \'exported\' above\n            if (fgSym && !fgSym.isAccessor() && fgSym.kind() == SymbolKind.Type && fgSym.type.call) {\n                fgSym.flags |= SymbolFlags.Exported;\n            }\n        }\n        if (context.scopeChain.moduleDecl && !funcDecl.isSpecialFn()) {\n            funcDecl.type.symbol.flags |= SymbolFlags.ModuleMember;\n            funcDecl.type.symbol.declModule = context.scopeChain.moduleDecl;\n        }\n\n        if (fgSym && isOptional) {\n            fgSym.flags |= SymbolFlags.Optional;\n        }\n\n        return go;\n    }\n\n    export function preCollectTypes(ast: AST, parent: AST, walker: IAstWalker) {\n        var context: TypeCollectionContext = walker.state;\n        var go = false;\n        var scopeChain = context.scopeChain;\n\n        if (ast.nodeType == NodeType.Script) {\n            var script: Script = <Script>ast;\n            context.script = script;\n            go = true;\n        }\n        else if (ast.nodeType == NodeType.List) {\n            go = true;\n        }\n        else if (ast.nodeType == NodeType.ImportDeclaration) {\n            go = preCollectImportTypes(ast, parent, context);\n        }\n        else if (ast.nodeType == NodeType.With) {\n            go = false;\n        }\n        else if (ast.nodeType == NodeType.ModuleDeclaration) {\n            go = preCollectModuleTypes(ast, parent, context);\n        }\n        else if (ast.nodeType == NodeType.ClassDeclaration) {\n            go = preCollectClassTypes(ast, parent, context);\n        }\n        else if (ast.nodeType == NodeType.Block) {\n            go = true;\n        }\n        else if (ast.nodeType == NodeType.InterfaceDeclaration) {\n            go = preCollectInterfaceTypes(ast, parent, context);\n        }\n        // This will be a constructor arg because this pass only traverses\n        // constructor arg lists\n        else if (ast.nodeType == NodeType.ArgDecl) {\n            go = preCollectArgDeclTypes(ast, parent, context);\n        }\n        else if (ast.nodeType == NodeType.VarDecl) {\n            go = preCollectVarDeclTypes(ast, parent, context);\n        }\n        else if (ast.nodeType == NodeType.FuncDecl) {\n            go = preCollectFuncDeclTypes(ast, parent, context);\n        }\n        else {\n            if (ast.isStatementOrExpression() && context.scopeChain.moduleDecl) {\n                context.scopeChain.moduleDecl.recordNonInterface();\n            }\n        }\n        walker.options.goChildren = go;\n        return ast;\n    }\n\n    export function postCollectTypes(ast: AST, parent: AST, walker: IAstWalker) {\n        var context: TypeCollectionContext = walker.state;\n\n        if (ast.nodeType == NodeType.ModuleDeclaration) {\n            popTypeCollectionScope(context);\n        }\n        else if (ast.nodeType == NodeType.ClassDeclaration) {\n            popTypeCollectionScope(context);\n        }\n        else if (ast.nodeType == NodeType.InterfaceDeclaration) {\n            popTypeCollectionScope(context);\n        }\n        return ast;\n    }\n\n}//\n// Copyright (c) Microsoft Corporation.  All rights reserved.\n// \n// Licensed under the Apache License, Version 2.0 (the "License");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an "AS IS" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n\n///<reference path=\'typescript.ts\' />\n\nmodule TypeScript {\n    export class ScopeChain {\n        ';
var v27163 = v27164 + "public thisType: Type;\n        public classType: Type;\n        public fnc: FuncDecl;\n        public moduleDecl: ModuleDeclaration;\n\n        constructor (public container: Symbol, public previous: ScopeChain,\n                     public scope: SymbolScope) { }\n    }\n\n    export class BBUseDefInfo {\n        public defsBySymbol = new bool[];\n        public gen: BitVector;\n        public kill: BitVector;\n        public top: BitVector;\n        // use lists by symbol \n        public useIndexBySymbol = new number[][];\n\n        constructor (public bb: BasicBlock) { }\n\n        public updateTop() {\n            var temp = new BitVector(this.top.bitCount);\n            for (var i = 0, succLen = this.bb.successors.length; i < succLen; i++) {\n                var succ = this.bb.successors[i];\n                if (succ.useDef) {\n                    temp.union(succ.useDef.top);\n                }\n            }\n            temp.difference(this.kill);\n            temp.union(this.gen);\n            var changed = temp.notEq(this.top);\n            this.top = temp;\n            return changed;\n        }\n\n\n        public initialize(useDefContext: UseDefContext) {\n            var defSym = (sym: Symbol, context: UseDefContext) => {\n                if (context.isLocalSym(sym)) {\n                    var index = context.getSymbolIndex(sym);\n                    // clear pending uses\n                    this.useIndexBySymbol[index] = new number[];\n                    this.defsBySymbol[index] = true;\n                }\n            }\n\n            var useSym = (sym: Symbol, context: UseDefContext, ast: AST) => {\n                if (context.isLocalSym(sym)) {\n                    var symIndex = context.getSymbolIndex(sym);\n                    if (this.useIndexBySymbol[symIndex] == undefined) {\n                        this.useIndexBySymbol[symIndex] = new number[];\n                    }\n                    var symUses = this.useIndexBySymbol[symIndex];\n                    var astIndex = context.getUseIndex(ast);\n                    context.addUse(symIndex, astIndex);\n                    symUses.push(astIndex);\n                }\n            }\n\n            function initUseDefPre(cur: AST, parent: AST, walker: IAstWalker) {\n                var context: UseDefContext = walker.state;\n                if (cur == null) {\n                    cur = null;\n                }\n                if (cur.nodeType == NodeType.VarDecl) {\n                    var varDecl = <BoundDecl>cur;\n                    if (varDecl.init || hasFlag(varDecl.varFlags, VarFlags.AutoInit)) {\n                        defSym(varDecl.sym, context);\n                    }\n                }\n                else if (cur.nodeType == NodeType.Name) {\n                    // use\n                    if (parent) {\n                        if (parent.nodeType == NodeType.Asg) {\n                            var asg = <BinaryExpression>parent;\n                            if (asg.operand1 == cur) {\n                                return cur;\n                            }\n                        }\n                        else if (parent.nodeType == NodeType.VarDecl) {\n                            var parentDecl = <BoundDecl>parent;\n                            if (parentDecl.id == cur) {\n                                return cur;\n                            }\n                        }\n                    }\n                    var id = <Identifier>cur;\n                    useSym(id.sym, context, cur);\n                }\n                else if ((cur.nodeType >= NodeType.Asg) && (cur.nodeType <= NodeType.LastAsg)) {\n                    // def\n                    var asg = <BinaryExpression>cur;\n                    if (asg.operand1 && (asg.operand1.nodeType == NodeType.Name)) {\n                        var id = <Identifier>asg.operand1;\n                        defSym(id.sym, context);\n                    }\n                }\n                else if (cur.nodeType == NodeType.FuncDecl) {\n                    walker.options.goChildren = false;\n                }\n\n                return cur;\n            }\n\n            var options = new AstWalkOptions();\n            // traverse ASTs in reverse order of execution (to match uses with preceding defs)\n            options.reverseSiblings = true;\n\n            getAstWalkerFactory().walk(this.bb.content, initUseDefPre, null, options, useDefContext);\n        }\n\n        public initializeGen(useDefContext: UseDefContext) {\n            var symbolLen = this.useIndexBySymbol.length;\n            var bitCount = useDefContext.uses.length;\n            this.gen = new BitVector(bitCount);\n            for (var s = 0; s < symbolLen; s++) {\n                var symUses = this.useIndexBySymbol[s];\n                if ((symUses != undefined) && (symUses.length > 0)) {\n                    for (var u = 0, uLen = symUses.length; u < uLen; u++) {\n                        this.gen.set(symUses[u], true);\n                    }\n                }\n            }\n            this.top = this.gen;\n        }\n\n     ";
var v27162 = v27163 + "   public initializeKill(useDefContext: UseDefContext) {\n            this.kill = new BitVector(this.gen.bitCount);\n            for (var s = 0, symbolLen = this.defsBySymbol.length; s < symbolLen; s++) {\n                if (this.defsBySymbol[s]) {\n                    var globalSymUses = useDefContext.useIndexBySymbol[s];\n                    if (globalSymUses) {\n                        for (var u = 0, useLen = globalSymUses.length; u < useLen; u++) {\n                            this.kill.set(globalSymUses[u], true);\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    export class UseDefContext {\n        // global use lists by symbol\n        public useIndexBySymbol = new number[][];\n        // global list of uses (flat)\n        public uses = new AST[];\n        public symbols = new VariableSymbol[];\n        public symbolMap = new StringHashTable();\n        public symbolCount = 0;\n        public func: Symbol;\n\n        constructor () {\n        }\n\n        public getSymbolIndex(sym: Symbol) {\n            var name = sym.name;\n            var index = <number>(this.symbolMap.lookup(name));\n            if (index == null) {\n                index = this.symbolCount++;\n                this.symbols[index] = <VariableSymbol>sym;\n                this.symbolMap.add(name, index);\n            }\n            return index;\n        }\n\n        public addUse(symIndex: number, astIndex: number) {\n            var useBySym = this.useIndexBySymbol[symIndex];\n            if (useBySym == undefined) {\n                useBySym = new number[];\n                this.useIndexBySymbol[symIndex] = useBySym;\n            }\n            useBySym[useBySym.length] = astIndex;\n        }\n\n        public getUseIndex(ast: AST) {\n            this.uses[this.uses.length] = ast;\n            return this.uses.length - 1;\n        }\n\n        public isLocalSym(sym: Symbol) { return (sym && (sym.container == this.func) && (sym.kind() == SymbolKind.Variable)); }\n\n        public killSymbol(sym: VariableSymbol, bbUses: BitVector) {\n            var index: number = this.symbolMap.lookup(sym.name);\n            var usesOfSym = this.useIndexBySymbol[index];\n            for (var k = 0, len = usesOfSym.length; k < len; k++) {\n                bbUses.set(usesOfSym[k], true);\n            }\n        }\n    }\n\n    export class BitVector {\n        static packBits = 30;\n        public firstBits = 0;\n        public restOfBits: number[] = null;\n\n        constructor (public bitCount: number) {\n            if (this.bitCount > BitVector.packBits) {\n                this.restOfBits = new number[];\n                var len = Math.floor(this.bitCount / BitVector.packBits);\n                for (var i = 0; i < len; i++) {\n                    this.restOfBits[i] = 0;\n                }\n            }\n        }\n\n        public set(bitIndex: number, value: bool) {\n            if (bitIndex < BitVector.packBits) {\n                if (value) {\n                    this.firstBits |= (1 << bitIndex);\n                }\n                else {\n                    this.firstBits &= (~(1 << bitIndex));\n                }\n            }\n            else {\n                var offset = Math.floor(bitIndex / BitVector.packBits) - 1;\n                var localIndex = bitIndex % BitVector.packBits;\n                if (value) {\n                    this.restOfBits[offset] |= (1 << localIndex);\n                }\n                else {\n                    this.restOfBits[offset] &= (~(1 << localIndex));\n                }\n            }\n        }\n\n        public map(fn: (index: number) =>any) {\n            var k: number;\n            for (k = 0; k < BitVector.packBits; k++) {\n                if (k == this.bitCount) {\n                    return;\n                }\n                if (((1 << k) & this.firstBits) != 0) {\n                    fn(k);\n                }\n            }\n            if (this.restOfBits) {\n                var len: number;\n                var cumu = BitVector.packBits;\n                for (k = 0, len = this.restOfBits.length; k < len; k++) {\n                    var myBits = this.restOfBits[k];\n                    for (var j = 0; j < BitVector.packBits; j++) {\n                        if (((1 << j) & myBits) != 0) {\n                            fn(cumu);\n                        }\n                        cumu++;\n                        if (cumu == this.bitCount) {\n                            return;\n                        }\n                    }\n                }\n            }\n        }\n\n        // assume conforming sizes\n        public union(b: BitVector) {\n            this.firstBits |= b.firstBits;\n            if (this.restOfBits) {\n                for (var k = 0, len = this.restOfBits.length; k < len; k++) {\n                    var myBits = this.restOfBits[k];\n                    var bBits = b.restOfBits[k];\n                    this.restOfBits[k] = myBits | bBits;\n                }\n            }\n        }\n\n        // assume conforming sizes\n        public interse";
var v27161 = v27162 + 'ction(b: BitVector) {\n            this.firstBits &= b.firstBits;\n            if (this.restOfBits) {\n                for (var k = 0, len = this.restOfBits.length; k < len; k++) {\n                    var myBits = this.restOfBits[k];\n                    var bBits = b.restOfBits[k];\n                    this.restOfBits[k] = myBits & bBits;\n                }\n            }\n        }\n\n        // assume conforming sizes\n        public notEq(b: BitVector) {\n            if (this.firstBits != b.firstBits) {\n                return true;\n            }\n            if (this.restOfBits) {\n                for (var k = 0, len = this.restOfBits.length; k < len; k++) {\n                    var myBits = this.restOfBits[k];\n                    var bBits = b.restOfBits[k];\n                    if (myBits != bBits) {\n                        return true;\n                    }\n                }\n            }\n            return false;\n        }\n\n        public difference(b: BitVector) {\n            var oldFirstBits = this.firstBits;\n            this.firstBits &= (~b.firstBits);\n            if (this.restOfBits) {\n                for (var k = 0, len = this.restOfBits.length; k < len; k++) {\n                    var myBits = this.restOfBits[k];\n                    var bBits = b.restOfBits[k];\n                    this.restOfBits[k] &= (~bBits);\n                }\n            }\n        }\n    }\n\n    export class BasicBlock {\n        // blocks that branch to the block after this one\n        public predecessors = new BasicBlock[];\n        public index = -1;\n        public markValue = 0;\n        public marked(markBase: number) { return this.markValue > markBase; }\n        public mark() {\n            this.markValue++;\n        }\n        public successors = new BasicBlock[];\n        public useDef: BBUseDefInfo = null;\n        public content = new ASTList();\n        public addSuccessor(successor: BasicBlock): void {\n            this.successors[this.successors.length] = successor;\n            successor.predecessors[successor.predecessors.length] = this;\n        }\n    }\n\n    export interface ITargetInfo {\n        stmt: AST;\n        continueBB: BasicBlock;\n        breakBB: BasicBlock;\n    }\n\n    export class ControlFlowContext {\n        public entry = null;\n        // first unreachable ast for each unreachable code segment\n        public unreachable: AST[] = null;\n        public noContinuation = false;\n        // statements enclosing the current statement\n        public statementStack = new ITargetInfo[];\n        public currentSwitch = new BasicBlock[];\n        public walker: IAstWalker;\n\n        constructor (public current: BasicBlock,\n                     public exit: BasicBlock) {\n            this.entry = this.current;\n        }\n\n        public walk(ast: AST, parent: AST) {\n            return this.walker.walk(ast, parent);\n        }\n\n        public pushSwitch(bb: BasicBlock) {\n            this.currentSwitch.push(bb);\n        }\n\n        public popSwitch() {\n            return this.currentSwitch.pop();\n        }\n\n        public reportUnreachable(er: ErrorReporter) {\n            if (this.unreachable && (this.unreachable.length > 0)) {\n                var len = this.unreachable.length;\n                for (var i = 0; i < len; i++) {\n                    var unreachableAST = this.unreachable[i];\n                    if (unreachableAST.nodeType != NodeType.EndCode) {\n                        er.simpleError(unreachableAST, "unreachable code");\n                    }\n                }\n            }\n        }\n\n        private printAST(ast: AST, outfile: ITextWriter) {\n            var printContext = new PrintContext(outfile, null);\n\n            printContext.increaseIndent();\n            //ast.walk(prePrintAST, postPrintAST, null, printContext);\n            getAstWalkerFactory().walk(ast, prePrintAST, postPrintAST, null, printContext);\n\n            printContext.decreaseIndent();\n        }\n\n        private printBlockContent(bb: BasicBlock, outfile: ITextWriter) {\n            var content = bb.content;\n            for (var i = 0, len = content.members.length; i < len; i++) {\n                var ast = content.members[i];\n                this.printAST(ast, outfile);\n            }\n        }\n\n        public markBase = 0;\n\n        public bfs(nodeFunc: (bb: BasicBlock) =>void , edgeFunc: (node1: BasicBlock, node2: BasicBlock) =>void ,\n            preEdges: () =>void , postEdges: () =>void ) {\n            var markValue = this.markBase++;\n            var q = new BasicBlock[];\n            q[q.length] = this.entry;\n\n            while (q.length > 0) {\n                var bb = q.pop();\n                if (!(bb.marked(markValue))) {\n                    bb.mark();\n                    if (nodeFunc) {\n                        nodeFunc(bb);\n                    }\n                    var succLen = bb.successors.length;\n                    if (succLen > 0) {\n                        if (preEdges) {\n                            preEdges();\n                        }\n                        for';
var v27160 = v27161 + ' (var j = succLen - 1; j >= 0; j--) {\n                            var successor = bb.successors[j];\n                            if (!(successor.marked(this.markBase))) {\n                                if (edgeFunc) {\n                                    edgeFunc(bb, successor);\n                                }\n                                q[q.length] = successor;\n                            }\n                        }\n                        if (postEdges) {\n                            postEdges();\n                        }\n                    }\n                }\n            }\n        }\n\n        public linearBBs = new BasicBlock[];\n\n        public useDef(er: ErrorReporter, funcSym: Symbol) {\n            var useDefContext = new UseDefContext();\n            useDefContext.func = funcSym;\n            var useDefInit = (bb: BasicBlock) => {\n                bb.useDef = new BBUseDefInfo(bb);\n                bb.useDef.initialize(useDefContext);\n                this.linearBBs[this.linearBBs.length] = bb;\n            }\n            this.bfs(useDefInit, null, null, null);\n            var i: number, bbLen: number;\n            for (i = 0, bbLen = this.linearBBs.length; i < bbLen; i++) {\n                this.linearBBs[i].useDef.initializeGen(useDefContext);\n                this.linearBBs[i].useDef.initializeKill(useDefContext);\n            }\n            var changed = true;\n\n            while (changed) {\n                changed = false;\n                for (i = 0; i < bbLen; i++) {\n                    changed = this.linearBBs[i].useDef.updateTop() || changed;\n                }\n            }\n\n            var top = this.entry.useDef.top;\n            top.map((index) => {\n                var ast = <Identifier>useDefContext.uses[<number>index];\n                er.simpleError(ast, "use of variable \'" + ast.actualText + "\' that is not definitely assigned");\n            });\n        }\n\n        public print(outfile: ITextWriter) {\n            var index = 0;\n            var node = (bb: BasicBlock) => {\n                if (bb.index < 0) {\n                    bb.index = index++;\n                }\n                if (bb == this.exit) {\n                    outfile.WriteLine("Exit block with index " + bb.index);\n                }\n                else {\n                    outfile.WriteLine("Basic block with index " + bb.index);\n                    this.printBlockContent(bb, outfile);\n                }\n            }\n\n            function preEdges() {\n                outfile.Write("  Branches to ");\n            }\n\n            function postEdges() {\n                outfile.WriteLine("");\n            }\n\n            function edge(node1: BasicBlock, node2: BasicBlock) {\n                if (node2.index < 0) {\n                    node2.index = index++;\n                }\n                outfile.Write(node2.index + " ");\n            }\n\n            this.bfs(node, edge, preEdges, postEdges);\n            if (this.unreachable != null) {\n                for (var i = 0, len = this.unreachable.length; i < len; i++) {\n                    outfile.WriteLine("Unreachable basic block ...");\n                    this.printAST(this.unreachable[i], outfile);\n                }\n            }\n        }\n\n        public pushStatement(stmt: Statement, continueBB: BasicBlock, breakBB: BasicBlock) {\n            this.statementStack.push({ stmt: stmt, continueBB: continueBB, breakBB: breakBB });\n        }\n\n        public popStatement() { return this.statementStack.pop(); }\n\n        public returnStmt() {\n            // TODO: make successor finally block if return stmt inside of try/finally \n            this.current.addSuccessor(this.exit);\n            this.setUnreachable();\n        }\n\n        public setUnreachable() {\n            this.current = null;\n            this.noContinuation = true;\n        }\n\n        public addUnreachable(ast: AST) {\n            if (this.unreachable === null) {\n                this.unreachable = new AST[];\n            }\n            this.unreachable[this.unreachable.length] = ast;\n        }\n\n        public unconditionalBranch(target: AST, isContinue: bool) {\n            var targetBB = null;\n            for (var i = 0, len = this.statementStack.length; i < len; i++) {\n                var targetInfo = this.statementStack[i];\n                if (targetInfo.stmt == target) {\n                    if (isContinue) {\n                        targetBB = targetInfo.continueBB;\n                    }\n                    else {\n                        targetBB = targetInfo.breakBB;\n                    }\n                    break;\n                }\n            }\n            if (targetBB) {\n                this.current.addSuccessor(targetBB);\n            }\n            this.setUnreachable();\n        }\n\n        public addContent(ast: AST): void {\n            if (this.current) {\n                this.current.content.append(ast);\n            }\n        }\n    }\n\n    export interface IResolutionData {\n        actuals: Type[];\n        exactCandidates: Signature[];\n        c';
var v27159 = v27160 + 'onversionCandidates: Signature[];\n        id: number;\n    }\n\n    export class ResolutionDataCache {\n        public cacheSize = 16;\n        public rdCache: IResolutionData[] = [];\n        public nextUp: number = 0;\n\n        constructor () {\n            for (var i = 0; i < this.cacheSize; i++) {\n                this.rdCache[i] = {\n                    actuals: new Type[],\n                    exactCandidates: new Signature[],\n                    conversionCandidates: new Signature[],\n                    id: i\n                };\n            }\n        }\n\n        public getResolutionData(): IResolutionData {\n            var rd: IResolutionData = null;\n\n            if (this.nextUp < this.cacheSize) {\n                rd = this.rdCache[this.nextUp];\n            }\n\n            if (rd == null) {\n                this.cacheSize++;\n                rd = {\n                    actuals: new Type[],\n                    exactCandidates: new Signature[],\n                    conversionCandidates: new Signature[],\n                    id: this.cacheSize\n                };\n                this.rdCache[this.cacheSize] = rd;\n            }\n\n            // cache operates as a stack - RD is always served up in-order\n            this.nextUp++;\n\n            return rd;\n        }\n\n        public returnResolutionData(rd: IResolutionData) {\n            // Pop to save on array allocations, which are a bottleneck\n            // REVIEW: On some VMs, Array.pop doesn\'t always pop the last value in the array\n            rd.actuals.length = 0;\n            rd.exactCandidates.length = 0;\n            rd.conversionCandidates.length = 0;\n\n            this.nextUp = rd.id;\n        }\n    }\n\n    export class TypeFlow {\n        public scope: SymbolScope;\n        public globalScope: SymbolScope;\n\n        public thisType: Type;\n        public thisFnc: FuncDecl = null;\n        public thisClassNode: TypeDeclaration = null;\n        public enclosingFncIsMethod = false;\n\n        // REVIEW: Prune in favor of typechecker fields\n        public doubleType: Type;\n        public booleanType: Type;\n        public stringType: Type;\n        public anyType: Type;\n        public regexType: Type;\n        public nullType: Type;\n        public voidType: Type;\n        public arrayAnyType: Type;\n\n        public arrayInterfaceType: Type = null;\n        public stringInterfaceType: Type = null;\n        public objectInterfaceType: Type = null;\n        public functionInterfaceType: Type = null;\n        public numberInterfaceType: Type = null;\n        public booleanInterfaceType: Type = null;\n        public iargumentsInterfaceType: Type = null;\n\n        public currentScript: Script = null;\n\n        public inImportTypeCheck = false;\n        public inTypeRefTypeCheck = false;\n        public inArrayElementTypeCheck = false;\n        public resolutionDataCache = new ResolutionDataCache();\n        public nestingLevel = 0;\n        public inSuperCall = false;\n\n        constructor (public logger: ILogger, public initScope: SymbolScope, public parser: Parser,\n                   public checker: TypeChecker) {\n            this.checker.typeFlow = this;\n            this.scope = this.initScope;\n            this.globalScope = this.initScope;\n            this.doubleType = this.checker.numberType;\n            this.booleanType = this.checker.booleanType;\n            this.stringType = this.checker.stringType;\n            this.anyType = this.checker.anyType;\n            this.regexType = this.anyType;\n            this.nullType = this.checker.nullType;\n            this.voidType = this.checker.voidType;\n            this.arrayAnyType = this.checker.makeArrayType(this.anyType);\n        }\n\n        public initLibs() {\n            var arraySym = this.globalScope.find("Array", false, true);\n            if (arraySym && (arraySym.kind() == SymbolKind.Type)) {\n                this.arrayInterfaceType = (<TypeSymbol>arraySym).type;\n            }\n            var stringSym = this.globalScope.find("String", false, true);\n            if (stringSym && (stringSym.kind() == SymbolKind.Type)) {\n                this.stringInterfaceType = (<TypeSymbol>stringSym).type;\n            }\n            var objectSym = this.globalScope.find("Object", false, true);\n            if (objectSym && (objectSym.kind() == SymbolKind.Type)) {\n                this.objectInterfaceType = (<TypeSymbol>objectSym).type;\n            }\n            var fnSym = this.globalScope.find("Function", false, true);\n            if (fnSym && (fnSym.kind() == SymbolKind.Type)) {\n                this.functionInterfaceType = (<TypeSymbol>fnSym).type;\n            }\n            var numberSym = this.globalScope.find("Number", false, true);\n            if (numberSym && (numberSym.kind() == SymbolKind.Type)) {\n                this.numberInterfaceType = (<TypeSymbol>numberSym).type;\n            }\n            var booleanSym = this.globalScope.find("Boolean", false, true);\n            if (booleanSym && (booleanSym.kind() == SymbolKind.Type)) {\n                this.booleanInterfaceT';
var v27158 = v27159 + 'ype = (<TypeSymbol>booleanSym).type;\n            }\n            var regexSym = this.globalScope.find("RegExp", false, true);\n            if (regexSym && (regexSym.kind() == SymbolKind.Type)) {\n                this.regexType = (<TypeSymbol>regexSym).type;\n            }\n        }\n\n        public cast(ast: AST, type: Type): AST {\n            return this.castWithCoercion(ast, type, true, false);\n        }\n\n        public castWithCoercion(ast: AST, type: Type, applyCoercion: bool, typeAssertion: bool): AST {\n            var comparisonInfo = new TypeComparisonInfo();\n            if (this.checker.sourceIsAssignableToTarget(ast.type, type, comparisonInfo) || (typeAssertion && this.checker.sourceIsAssignableToTarget(type, ast.type, comparisonInfo))) {\n                if (applyCoercion) {\n                    if (type == null) {\n                        ast.type = this.anyType;\n                    }\n                    else if (type.isClass()) {\n                        ast.type = type.instanceType;\n                    }\n                    else {\n                        ast.type = type;\n                    }\n                }\n                return ast;\n            }\n            else {\n                this.checker.errorReporter.incompatibleTypes(ast, ast.type, type, null, this.scope, comparisonInfo);\n                return ast;\n            }\n        }\n\n        public inScopeTypeCheck(ast: AST, enclosingScope: SymbolScope): AST {\n            var prevScope = this.scope;\n            this.scope = enclosingScope;\n            var svThisFnc = this.thisFnc;\n            var svThisType = this.thisType;\n            var svThisClassNode = this.thisClassNode;\n            var svCurrentModDecl = this.checker.currentModDecl;\n            var prevMethodStatus = this.enclosingFncIsMethod;\n            var container = this.scope.container;\n            var fnc: FuncDecl = null;\n            while (container) {\n                if (container.kind() == SymbolKind.Type) {\n                    var typeSym = <TypeSymbol>container;\n                    var type = typeSym.type;\n                    if (type.call) {\n                        if (fnc == null) {\n                            // use innermost function\n                            this.enclosingFncIsMethod = typeSym.isMethod;\n                            fnc = <FuncDecl>container.declAST;\n                        }\n                    }\n                    if (type.isClass()) {\n                        this.thisType = type.instanceType;\n                        if (typeSym.declAST &&\n                            (typeSym.declAST.nodeType == NodeType.ClassDeclaration)) {\n                            this.thisClassNode = <TypeDeclaration>typeSym.declAST;\n                        }\n                        // use innermost class\n                        break;\n                    }\n                    if (type.isModuleType()) {\n                        this.checker.currentModDecl = <ModuleDeclaration>typeSym.declAST;\n                        // use innermost module\n                        break;\n                    }\n                }\n                container = container.container;\n            }\n            this.thisFnc = fnc;\n\n            var updated = this.typeCheck(ast);\n\n            this.thisFnc = svThisFnc;\n            this.thisType = svThisType;\n            this.thisClassNode = svThisClassNode;\n            this.checker.currentModDecl = svCurrentModDecl;\n            this.enclosingFncIsMethod = prevMethodStatus;\n            this.scope = prevScope;\n            return updated;\n        }\n\n        public typeCheck(ast: AST): AST {\n            if (ast) {\n                return ast.typeCheck(this);\n            }\n            else {\n                return null;\n            }\n        }\n\n        public inScopeTypeCheckDecl(ast: AST) {\n            if (ast.nodeType == NodeType.VarDecl || ast.nodeType == NodeType.ArgDecl) {\n                this.inScopeTypeCheckBoundDecl(<BoundDecl>ast);\n            }\n            else if (ast.nodeType == NodeType.FuncDecl) {\n\n                var funcDecl = <FuncDecl>ast;\n\n                if (funcDecl.isAccessor()) {\n                    this.typeCheckFunction(funcDecl);\n                }\n            }\n        }\n\n        public inScopeTypeCheckBoundDecl(varDecl: BoundDecl) {\n            var sym = varDecl.sym;\n            var svThisFnc = this.thisFnc;\n            var svThisType = this.thisType;\n            var prevMethodStatus = this.enclosingFncIsMethod;\n            var prevLocationInfo = this.checker.locationInfo;\n            if (sym && sym.container) {\n                var instanceScope = hasFlag(varDecl.varFlags, VarFlags.ClassConstructorProperty) ? sym.container.getType().constructorScope : sym.container.instanceScope();\n                if (hasFlag(varDecl.varFlags, VarFlags.Property) && sym.container.declAST.nodeType == NodeType.FuncDecl) {\n                    this.thisFnc = <FuncDecl>sym.container.declAST;\n                }\n                if (instanceScope) {\n                    var';
var v27157 = v27158 + " prevScope = this.scope;\n                    this.scope = instanceScope;\n                    var container = sym.container;\n                    var svCurrentModDecl = this.checker.currentModDecl;\n                    if (this.checker.units &&\n                        (sym.unitIndex >= 0) &&\n                        (sym.unitIndex < this.checker.units.length)) {\n                        this.checker.locationInfo = this.checker.units[sym.unitIndex];\n                    }\n                    else {\n                        this.checker.locationInfo = unknownLocationInfo;\n                    }\n                    // REVIEW: container linkage for function expressions\n                    while (container) {\n                        if (container.kind() == SymbolKind.Type) {\n                            var typeSym = <TypeSymbol>container;\n                            var type = typeSym.type;\n                            if (type.call) {\n                                this.enclosingFncIsMethod = typeSym.isMethod;\n                            }\n                            if (type.isClass()) {\n                                this.thisType = type.instanceType;\n                            }\n                            if (type.isModuleType()) {\n                                this.checker.currentModDecl = <ModuleDeclaration>container.declAST;\n                                break;\n                            }\n                        }\n                        container = container.container;\n                    }\n\n                    this.typeCheckBoundDecl(varDecl);\n                    this.checker.currentModDecl = svCurrentModDecl;\n                    this.scope = prevScope;\n                }\n            }\n            this.thisFnc = svThisFnc;\n            this.thisType = svThisType;\n            this.checker.locationInfo = prevLocationInfo;\n            this.enclosingFncIsMethod = prevMethodStatus;\n        }\n\n        public resolveBoundDecl(varDecl: BoundDecl) {\n            if (varDecl.typeExpr) {\n                if (varDecl.typeExpr.type == null ||\n                    (varDecl.typeExpr.type && varDecl.typeExpr.type == this.anyType && this.scope) ||\n                    varDecl.typeExpr.type.symbol == null ||\n                    !this.checker.typeStatusIsFinished(varDecl.typeExpr.type.symbol.typeCheckStatus)) {\n                    this.typeCheck(varDecl.typeExpr);\n                }\n                varDecl.type = varDecl.typeExpr.type;\n                if (varDecl.sym) {\n                    varDecl.sym.setType(varDecl.type);\n                }\n            }\n            else if (varDecl.init == null) {\n                if (this.checker.styleSettings.implicitAny) {\n                    this.checker.errorReporter.styleError(varDecl, \"type implicitly set to 'any'\");\n                }\n                varDecl.type = this.anyType;\n                if (varDecl.sym) {\n                    if (varDecl.sym.isType()) {\n                        var tsym = <TypeSymbol>varDecl.sym;\n                        if (tsym.isMethod) {\n                            this.checker.errorReporter.simpleError(varDecl, \"Cannot bind method group to variable.  (Did you mean to use 'declare function' instead of 'declare var'?)\");\n                            return;\n                        }\n                        else {\n                            this.checker.errorReporter.simpleError(varDecl, \"Cannot bind type to variable\");\n                            return;\n                        }\n                    }\n                    varDecl.sym.setType(varDecl.type);\n                }\n            }\n        }\n\n        public typeCheckBoundDecl(varDecl: BoundDecl): VarDecl {\n            // symbol has already been added to the scope\n            var infSym = <InferenceSymbol>varDecl.sym;\n            if (infSym == null) {\n                if (varDecl.init) {\n                    varDecl.init = this.typeCheck(varDecl.init);\n                    varDecl.type = this.checker.widenType(varDecl.init.type);\n                }\n                else {\n                    if (this.checker.styleSettings.implicitAny) {\n                        this.checker.errorReporter.styleError(varDecl, \"type implicitly set to 'any'\");\n                    }\n                    varDecl.type = this.anyType;\n                }\n            }\n            else {\n                if (infSym.typeCheckStatus == TypeCheckStatus.Started) {\n                    if (this.checker.styleSettings.implicitAny) {\n                        this.checker.errorReporter.styleError(varDecl, \"type implicitly set to 'any'\");\n                    }\n                    varDecl.type = this.anyType;\n                    infSym.setType(this.anyType);\n                }\n                else if (infSym.typeCheckStatus == TypeCheckStatus.NotStarted) {\n                    infSym.typeCheckStatus = TypeCheckStatus.Started;\n                    this.checker.addStartedPTO(infSym);\n                    var resolved = false;\n                    if (varDecl.type";
var v27156 = v27157 + " == null) {\n                        // propagate declared type\n                        if (varDecl.typeExpr) {\n                            this.resolveBoundDecl(varDecl);\n                            resolved = true;\n                            varDecl.type = varDecl.typeExpr.type;\n                            infSym.typeCheckStatus = this.checker.getTypeCheckFinishedStatus();\n                        }\n                    }\n\n                    if (varDecl.init) {\n                        // if the bound decl is a function-local static, we need to set the\n                        // encapsulating scope to the function's member scope\n                        var isLocalStatic = hasFlag(varDecl.varFlags, VarFlags.LocalStatic);\n                        var prevScope = this.scope;\n                        var applyTargetType = !varDecl.init.isParenthesized;\n                        if (isLocalStatic) {\n                            this.scope = varDecl.sym.container.getType().memberScope;\n                        }\n\n                        // Mark Lambda expressions with IsPropertyBound flag\n                        if (hasFlag(varDecl.varFlags, VarFlags.Property) && this.thisClassNode) {\n                            getAstWalkerFactory().walk(varDecl.init, (ast: AST, parent: AST, walker: IAstWalker) => {\n                                if (ast && ast.nodeType == NodeType.FuncDecl) {\n                                    if (hasFlag((<FuncDecl>ast).fncFlags, FncFlags.IsFatArrowFunction)) {\n                                        // Found a Lambda, mark it\n                                        (<FuncDecl>ast).fncFlags |= FncFlags.IsPropertyBound;\n                                    }\n                                    // Only mark the top level functions\n                                    walker.options.goChildren = false;\n                                }\n                                return ast;\n                            });\n                        }\n\n                        this.checker.typeCheckWithContextualType(varDecl.type, this.checker.inProvisionalTypecheckMode(), applyTargetType, varDecl.init);\n\n                        this.scope = prevScope;\n                        if (varDecl.type) {\n                            // If the cast is to a target type, in the case of a funcdecl,\n                            // we may overwrite the init's type with one generated from a signature.\n                            // In that case, we need to preserve the contained scope of the actual decl\n                            var preserveScope = false;\n                            var preservedContainedScope = null;\n\n                            if (varDecl.init.type) {\n                                preservedContainedScope = varDecl.init.type.containedScope;\n                                preserveScope = true;\n                                if (varDecl.init.type == this.voidType) {\n                                    this.checker.errorReporter.simpleError(varDecl, \"Cannot assign type 'void' to variable '\" + varDecl.id.actualText + \"'\");\n                                }\n                            }\n\n                            varDecl.init = this.castWithCoercion(varDecl.init, varDecl.type, applyTargetType && !this.checker.inProvisionalTypecheckMode(), false);\n\n                            if (preserveScope && varDecl.init.type.containedScope == null) {\n                                varDecl.init.type.containedScope = preservedContainedScope;\n                            }\n                        }\n                        else {\n                            varDecl.type = this.checker.widenType(varDecl.init.type);\n                            if (varDecl.type == this.voidType) {\n                                this.checker.errorReporter.simpleError(varDecl, \"Cannot assign type 'void' to variable '\" + varDecl.id.actualText + \"'\");\n                                varDecl.type = this.anyType;\n                            }\n                        }\n                        infSym.setType(varDecl.type);\n                    }\n                    else {\n                        if (!resolved) {\n                            this.resolveBoundDecl(varDecl);\n                        }\n                    }\n                    infSym.typeCheckStatus = this.checker.getTypeCheckFinishedStatus();\n                }\n                else if (this.checker.typeStatusIsFinished(infSym.typeCheckStatus) &&\n                         (infSym.declAST != varDecl)) {\n                    if (varDecl.init) {\n                        varDecl.init = this.typeCheck(varDecl.init);\n                        varDecl.type = infSym.getType();\n                        varDecl.init = this.cast(varDecl.init, varDecl.type);\n                    }\n                }\n            }\n            if (varDecl.id && varDecl.sym) {\n                varDecl.id.sym = varDecl.sym;\n            }\n\n            // Check if variable satisfies type privacy\n            if (varDecl.sym && varDecl.sym.con";
var v27155 = v27156 + 'tainer) {\n                this.checkTypePrivacy(varDecl.sym.getType(), varDecl.sym, (typeName: string, isModuleName: bool) => this.varPrivacyErrorReporter(varDecl, typeName, isModuleName));\n            }\n            return <VarDecl>varDecl;\n        }\n\n        private varPrivacyErrorReporter(varDecl: BoundDecl, typeName: string, isModuleName: bool) {\n            var typestring = "";\n            if (isModuleName) {\n                var quotestring = "";\n                if (!isQuoted(typeName)) {\n                    quotestring = "\'";\n                }\n                typestring = " is using inaccessible module " + quotestring + typeName + quotestring;\n            } else {\n                typestring = " has or is using private type \'" + typeName + "\'";\n            }\n\n            if (hasFlag(varDecl.varFlags, VarFlags.Public)) {\n                if (varDecl.sym.container.declAST.nodeType == NodeType.InterfaceDeclaration) {\n                    this.checker.errorReporter.simpleError(varDecl, "property \'" + varDecl.sym.name + "\' of exported interface" + typestring);\n                } else {\n                    this.checker.errorReporter.simpleError(varDecl, "public member \'" + varDecl.sym.name + "\' of exported class" + typestring);\n                }\n            } else {\n                this.checker.errorReporter.simpleError(varDecl, "exported variable \'" + varDecl.sym.name + "\'" + typestring);\n            }\n        }\n\n        public typeCheckSuper(ast: AST): AST {\n            if (this.thisType && (this.enclosingFncIsMethod && !this.thisFnc.isStatic()) && this.thisType.baseClass()) {\n                ast.type = this.thisType.baseClass();\n            }\n            else {\n                // redirect \'super\' used within lambdas\n                if (!this.enclosingFncIsMethod &&\n                    this.thisType && this.thisType.baseClass() &&\n                    this.thisFnc && hasFlag(this.thisFnc.fncFlags, FncFlags.IsFatArrowFunction)) {\n                    // Find the closest non lambda function\n                    var enclosingFnc = this.thisFnc.enclosingFnc;\n                    while (hasFlag(enclosingFnc.fncFlags, FncFlags.IsFatArrowFunction)) {\n                        enclosingFnc = enclosingFnc.enclosingFnc;\n                    }\n\n                    // If the lambda is enclosed is a valid member, use the base type\n                    if (enclosingFnc && (enclosingFnc.isMethod() || enclosingFnc.isConstructor) && !enclosingFnc.isStatic()) {\n                        ast.type = this.thisType.baseClass();\n                        enclosingFnc.setHasSuperReferenceInFatArrowFunction();\n                        return ast;\n                    }\n                }\n\n                ast.type = this.anyType;\n                this.checker.errorReporter.invalidSuperReference(ast);\n            }\n            return ast;\n        }\n\n        public typeCheckThis(ast: AST): AST {\n           ast.type = this.anyType;\n            var illegalThisRef = false;\n            if (this.thisFnc == null) {\n                // \'this\' in class bodies should bind to \'any\'\n                if (this.thisType) {\n                    if (this.thisClassNode && this.thisClassNode.nodeType == NodeType.ClassDeclaration) {\n                        illegalThisRef = true;\n                    }\n                    else {\n                        ast.type = this.thisType;\n                    }\n                }\n                else if (this.checker.currentModDecl) {\n                    this.checker.errorReporter.simpleError(ast, "\'this\' may not be referenced within module bodies");\n                }\n            }\n            else {\n                if (this.thisClassNode && (hasFlag(this.thisFnc.fncFlags, FncFlags.IsPropertyBound) || (this.inSuperCall && hasFlag((<ClassDeclaration>this.thisClassNode).varFlags, VarFlags.ClassSuperMustBeFirstCallInConstructor)))) {\n                    illegalThisRef = true;\n                }\n                if (this.thisFnc.isMethod() || this.thisFnc.isConstructor || this.thisFnc.isTargetTypedAsMethod) {\n                    if (this.thisType && !(this.thisFnc.fncFlags & FncFlags.Static)) {\n                        ast.type = this.thisType;\n                    }\n                }\n            }\n\n            // redirect \'this\' used within lambdas\n            if (!this.enclosingFncIsMethod &&\n                this.thisFnc &&\n                hasFlag(this.thisFnc.fncFlags, FncFlags.IsFatArrowFunction)) {\n\n                    // if the enclosing function was bound to a property,\n                    // checkInitSelf would not have been able to mark the \n                    // function for a self init\n                if (this.thisFnc.boundToProperty) {\n                    var container = this.thisFnc.boundToProperty.sym.container;\n                    if (container.declAST.nodeType == NodeType.FuncDecl) {\n                        (<FuncDecl>container.declAST).setHasSelfReference();\n                    }\n                }\n                else {\n         ';
var v27154 = v27155 + '           var encFnc = this.thisFnc.enclosingFnc;\n                    var firstEncFnc = encFnc;\n\n                    while (encFnc) {\n                        if (this.thisClassNode && hasFlag(encFnc.fncFlags, FncFlags.IsPropertyBound)) {\n                            illegalThisRef = true;\n                        }\n\n                        if (!hasFlag(encFnc.fncFlags, FncFlags.IsFatArrowFunction) || encFnc.hasSelfReference()) {\n                            encFnc.setHasSelfReference();\n                            break;\n                        }\n\n                        encFnc = encFnc.enclosingFnc;\n                    }\n\n                    if (!encFnc && firstEncFnc) {\n                        encFnc = firstEncFnc;\n                        encFnc.setHasSelfReference();\n                    }\n                    else if (!encFnc) { // the lambda is bound at the top-level...\n                        if (this.thisClassNode) {\n                            (<ClassDeclaration>this.thisClassNode).varFlags |= VarFlags.MustCaptureThis;\n                        }\n                        else if (this.checker.currentModDecl) {\n                            this.checker.currentModDecl.modFlags |= ModuleFlags.MustCaptureThis;\n                        }\n                        else {\n                            this.checker.mustCaptureGlobalThis = true;\n                        }\n                    }\n\n                    if (encFnc && (encFnc.isMethod() || encFnc.isConstructor) && this.thisType && !hasFlag(encFnc.fncFlags, FncFlags.Static)) {\n                        ast.type = this.thisType;\n                    }\n                }\n            }\n\n            if (illegalThisRef) {\n                this.checker.errorReporter.simpleError(ast, "Keyword \'this\' cannot be referenced in initializers in a class body, or in super constructor calls");\n            }\n            return ast;\n        }\n\n        public setTypeFromSymbol(ast: AST, symbol: Symbol): void {\n            if (symbol.isVariable()) {\n                if (symbol.isInferenceSymbol()) {\n                    var infSym = <InferenceSymbol>symbol;\n                    if (infSym.declAST &&\n                        !this.checker.typeStatusIsFinished(infSym.typeCheckStatus)) {\n                        this.inScopeTypeCheckDecl(infSym.declAST);\n                    }\n                    if (!this.checker.styleSettings.innerScopeDeclEscape) {\n                        if (infSym.declAST && (infSym.declAST.nodeType == NodeType.VarDecl)) {\n                            if (this.nestingLevel < (<VarDecl>infSym.declAST).nestingLevel) {\n                                this.checker.errorReporter.styleError(ast, "Illegal reference to a variable defined in more nested scope");\n                            }\n                        }\n                    }\n                }\n                ast.type = symbol.getType();\n                if (!symbol.writeable()) {\n                    ast.flags = ast.flags & (~(ASTFlags.Writeable));\n                }\n            }\n            else if (symbol.isType()) {\n                ast.type = symbol.getType();\n                ast.flags = ast.flags & (~(ASTFlags.Writeable));\n            }\n            else {\n                ast.type = this.anyType;\n                this.checker.errorReporter.symbolDoesNotReferToAValue(ast, symbol.name);\n            }\n        }\n\n        public typeCheckName(ast: AST): AST {\n            var identifier = <Identifier>ast;\n\n            if (this.checker.inWith) {\n                identifier.type = this.anyType;\n            }\n            else {\n                var typespace = this.inTypeRefTypeCheck;\n                var idText = identifier.text;\n                var originalIdText = idText;\n                var isDynamicModuleName = isQuoted(identifier.text);\n\n                var symbol = this.scope.find(idText, false, typespace);\n\n                if (symbol == null && isDynamicModuleName) {\n                    symbol = this.checker.findSymbolForDynamicModule(idText, this.currentScript.locationInfo.filename, (id) => this.scope.find(id, false, typespace));\n                }\n\n                if (!symbol) {\n                    if (!identifier.isMissing()) {\n                        this.checker.errorReporter.unresolvedSymbol(identifier, identifier.text);\n                    }\n                    identifier.type = this.anyType;\n                }\n                else {\n                    if (optimizeModuleCodeGen && symbol && symbol.isType()) {\n                        var symType = symbol.getType();\n                        // Once the type has been referenced outside of a type ref position, there\'s\n                        // no going back                        \n                        if (symType && (<TypeSymbol>symbol).aliasLink && (<TypeSymbol>symbol).onlyReferencedAsTypeRef) {\n\n                            var modDecl = <ModuleDeclaration>symType.symbol.declAST;\n                            if (modDecl && hasFlag(modDecl.modFlags, ModuleFlags.IsDynamic';
var v27153 = v27154 + ")) {\n                                (<TypeSymbol>symbol).onlyReferencedAsTypeRef = this.inTypeRefTypeCheck;\n                            }\n                        }\n                    }\n\n                    if (symbol.declAST &&\n                        symbol.declAST.nodeType == NodeType.FuncDecl &&\n                        !(<FuncDecl>symbol.declAST).returnTypeAnnotation &&\n                        (<FuncDecl>symbol.declAST).signature.typeCheckStatus == TypeCheckStatus.Started) {\n                        (<FuncDecl>symbol.declAST).type.symbol.flags |= SymbolFlags.RecursivelyReferenced;\n                        (<FuncDecl>symbol.declAST).signature.returnType.type = this.anyType;\n                    }\n\n                    this.setTypeFromSymbol(ast, symbol);\n                    identifier.sym = symbol;\n                    if (this.thisFnc) {\n                        if (this.thisFnc.type && symbol.container != this.thisFnc.type.symbol) {\n                            this.thisFnc.freeVariables[this.thisFnc.freeVariables.length] = symbol;\n                        }\n                    }\n                }\n            }\n            return ast;\n        }\n\n        public typeCheckScript(script: Script): Script {\n            this.checker.locationInfo = script.locationInfo;\n            this.scope = this.checker.globalScope;\n\n            // if it's a top-level module, the globals have already been added to the implicit\n            // module decl\n            if (!script.topLevelMod) {\n                this.addLocalsFromScope(this.scope, this.checker.gloMod,\n                                   script.vars, this.checker.globals, true);\n            }\n\n            this.currentScript = script;\n            script.bod = <ASTList>this.typeCheck(script.bod);\n            this.currentScript = null;\n            return script;\n        }\n\n        public typeCheckBitNot(ast: AST): AST {\n            var unex = <UnaryExpression>ast;\n            unex.operand = this.typeCheck(unex.operand);\n            unex.type = this.doubleType;\n            return unex;\n        }\n\n        public typeCheckUnaryNumberOperator(ast: AST): AST {\n            var unex = <UnaryExpression>ast;\n            unex.operand = this.typeCheck(unex.operand);\n            unex.type = this.doubleType;\n            return ast;\n        }\n\n        public typeCheckLogNot(ast: AST): AST {\n            var unex = <UnaryExpression>ast;\n            unex.operand = this.typeCheck(unex.operand);\n            unex.type = this.booleanType;\n            return unex;\n        }\n\n        public astIsWriteable(ast: AST): bool {\n            return hasFlag(ast.flags, ASTFlags.Writeable);\n        }\n\n        public typeCheckIncOrDec(ast: AST): AST {\n            var unex = <UnaryExpression>ast;\n            var lval = unex.operand;\n            if (!this.astIsWriteable(unex)) {\n                this.checker.errorReporter.valueCannotBeModified(unex);\n                unex.type = this.doubleType;\n            }\n            else {\n                unex = <UnaryExpression> this.typeCheckUnaryNumberOperator(ast);\n                if (unex.operand.type != this.checker.numberType && unex.operand.type != this.checker.anyType && !(unex.operand.type.typeFlags & TypeFlags.IsEnum)) {\n                    this.checker.errorReporter.simpleError(ast, \"'++' and '--' may only be applied to operands of type 'number' or 'any'\");\n                }\n            }\n            return unex;\n        }\n\n        public typeCheckBitwiseOperator(ast: AST, assignment: bool): AST {\n            var binex = <BinaryExpression>ast;\n            var resultType: Type = null;\n            binex.operand1 = this.typeCheck(binex.operand1);\n            binex.operand2 = this.typeCheck(binex.operand2);\n            var leftType = binex.operand1.type;\n            var rightType = binex.operand2.type;\n\n            if (assignment && (!this.astIsWriteable(binex))) {\n                this.checker.errorReporter.valueCannotBeModified(binex);\n            }\n\n            if (this.checker.styleSettings.bitwise) {\n                this.checker.errorReporter.styleError(ast, \"use of \" + nodeTypeTable[binex.nodeType]);\n            }\n\n            if (this.checker.sourceIsSubtypeOfTarget(leftType, this.doubleType) && (this.checker.sourceIsSubtypeOfTarget(rightType, this.doubleType))) {\n                resultType = this.doubleType;\n            }\n            else if ((leftType == this.booleanType) &&\n                     (rightType == this.booleanType)) {\n                resultType = this.booleanType;\n            }\n            else if (leftType == this.anyType) {\n                if ((rightType == this.anyType) ||\n                    (rightType == this.doubleType) ||\n                    (rightType == this.booleanType)) {\n                    resultType = this.anyType;\n                }\n            }\n            else if (rightType == this.anyType) {\n                if ((leftType == this.anyType) ||\n                    (leftType == this.doubleType) ||\n                    (leftType == th";
var v27152 = v27153 + 'is.booleanType)) {\n                    resultType = this.anyType;\n                }\n            }\n            if (resultType == null) {\n                resultType = this.anyType;\n                this.checker.errorReporter.incompatibleTypes(binex, leftType, rightType,\n                                                        binex.printLabel(), this.scope);\n            }\n            binex.type = resultType;\n            return binex;\n        }\n\n        public typeCheckArithmeticOperator(ast: AST, assignment: bool): AST {\n            var binex = <BinaryExpression>ast;\n            binex.operand1 = this.typeCheck(binex.operand1);\n            binex.operand2 = this.typeCheck(binex.operand2);\n            var leftType = binex.operand1.type;\n            var rightType = binex.operand2.type;\n\n            if (assignment && (!this.astIsWriteable(binex.operand1))) {\n                this.checker.errorReporter.valueCannotBeModified(binex);\n            }\n\n            if (this.checker.styleSettings.bitwise &&\n                ((binex.nodeType == NodeType.And) ||\n                (binex.nodeType == NodeType.Or) ||\n                (binex.nodeType == NodeType.AsgAnd) ||\n                (binex.nodeType == NodeType.AsgOr))) {\n                this.checker.errorReporter.styleError(ast, "use of " + nodeTypeTable[binex.nodeType]);\n            }\n\n            if (leftType == null || rightType == null) {\n                this.checker.errorReporter.simpleError(binex, "Could not typecheck arithmetic operation.  Possible recursive typecheck error?");\n                binex.type = this.anyType;\n                return binex;\n            }\n            var nodeType = binex.nodeType;\n\n            if (this.checker.isNullOrUndefinedType(leftType)) {\n                leftType = rightType;\n            }\n            if (this.checker.isNullOrUndefinedType(rightType)) {\n                rightType = leftType;\n            }\n            leftType = this.checker.widenType(leftType);\n            rightType = this.checker.widenType(rightType);\n\n            if (nodeType == NodeType.Add || nodeType == NodeType.AsgAdd) {\n\n                if (leftType == this.checker.stringType || rightType == this.checker.stringType) {\n                    binex.type = this.checker.stringType;\n                }\n                else if (leftType == this.checker.numberType && rightType == this.checker.numberType) {\n                    binex.type = this.checker.numberType;\n                }\n                else if (this.checker.sourceIsSubtypeOfTarget(leftType, this.checker.numberType) && this.checker.sourceIsSubtypeOfTarget(rightType, this.checker.numberType)) {\n                    binex.type = this.checker.numberType;\n                }\n                else if (leftType == this.checker.anyType || rightType == this.checker.anyType) {\n                    binex.type = this.checker.anyType;\n                }\n                else {\n                    binex.type = this.anyType;\n                    this.checker.errorReporter.incompatibleTypes(binex, leftType, rightType,\n                                                            binex.printLabel(), this.scope);\n                }\n            }\n            else {\n                if (leftType == this.checker.numberType && rightType == this.checker.numberType) {\n                    binex.type = this.checker.numberType;\n                }\n                else if (this.checker.sourceIsSubtypeOfTarget(leftType, this.checker.numberType) && this.checker.sourceIsSubtypeOfTarget(rightType, this.checker.numberType)) {\n                    binex.type = this.checker.numberType;\n                }\n                else if (leftType == this.checker.anyType || rightType == this.checker.anyType) {\n                    binex.type = this.checker.numberType;\n                }\n                else {\n                    binex.type = this.anyType;\n                    this.checker.errorReporter.incompatibleTypes(binex, leftType, rightType,\n                                                            binex.printLabel(), this.scope);\n                }\n            }\n\n            return binex;\n        }\n\n        public typeCheckDotOperator(ast: AST): AST {\n            var binex = <BinaryExpression>ast;\n            var leftIsFnc = false;\n            binex.operand1 = this.typeCheck(binex.operand1);\n            var leftType = binex.operand1.type;\n            var leftScope: SymbolScope = null;\n            // REVIEW: replace with get member scope\n            if (leftType) {\n                if (leftType == this.anyType) {\n                    binex.type = this.anyType;\n                    return binex;\n                }\n                else if (leftType == this.stringType) {\n                    if (this.stringInterfaceType) {\n                        leftScope = this.stringInterfaceType.memberScope;\n                    }\n                    else {\n                        binex.type = this.anyType;\n                        return binex;\n                    }\n                }\n              ';
var v27151 = v27152 + "  else if (leftType == this.doubleType) {\n                    if (this.numberInterfaceType) {\n                        leftScope = this.numberInterfaceType.memberScope;\n                    }\n                    else {\n                        binex.type = this.anyType;\n                        return binex;\n                    }\n                }\n                else if (leftType == this.booleanType) {\n                    if (this.booleanInterfaceType) {\n                        leftScope = this.booleanInterfaceType.memberScope;\n                    }\n                    else {\n                        binex.type = this.anyType;\n                        return binex;\n                    }\n                }\n                else if ((leftType.call || leftType.construct) && leftType.members == null) {\n                    if (this.functionInterfaceType) {\n                        leftScope = this.functionInterfaceType.memberScope;\n                    }\n                    else {\n                        binex.type = this.anyType;\n                        return binex;\n                    }\n                }\n                else if (leftType.elementType) {\n                    if (this.arrayInterfaceType) {\n                        var arrInstType = leftType.elementType.getArrayBase(this.arrayInterfaceType, this.checker);\n                        leftScope = arrInstType.memberScope;\n                    }\n                    else {\n                        binex.type = this.anyType;\n                        return binex;\n                    }\n                }\n                else {\n                    leftScope = leftType.memberScope;\n                }\n            }\n            if (leftScope == null) {\n                this.checker.errorReporter.expectedClassOrInterface(binex);\n                binex.type = this.anyType;\n            }\n            else {\n                var propertyName = <Identifier>binex.operand2;\n                var lhsIsEnclosingType = (this.thisClassNode && binex.operand1.type == this.thisClassNode.type.instanceType) || this.inTypeRefTypeCheck;\n                var symbol = leftScope.find(propertyName.text, !lhsIsEnclosingType, this.inTypeRefTypeCheck); // only search the public members, unless the rhs is a 'this' pointer\n\n                // If the symbol wasn't found, delegate to the appropriate 'virtual' parent type\n                if (!symbol) {\n                    if (this.objectInterfaceType && leftType) {\n                        // check 'Object' for the symbol\n                        if (leftType.isReferenceType()) {\n                            symbol = this.objectInterfaceType.memberScope.find(propertyName.text, false, this.inTypeRefTypeCheck);\n                        }\n                        if (!symbol) {\n                            // check 'Function', if appropriate\n                            if (this.functionInterfaceType && (leftType.call || leftType.construct)) {\n                                symbol = this.functionInterfaceType.memberScope.find(propertyName.text, false, this.inTypeRefTypeCheck);\n                            }\n                        }\n                    }\n                }\n\n                if (!symbol || (!symbol.visible(leftScope, this.checker))) {\n                    binex.type = this.anyType;\n\n                    if (symbol == null) {\n                        this.checker.errorReporter.simpleError(propertyName, \"The property '\" + propertyName.actualText + \"' does not exist on value of type '\" + leftType.getScopedTypeName(this.scope) + \"'\");\n                    }\n                    else if (!this.inTypeRefTypeCheck) {  // if it's a dotted type reference, we'll catch the visibility error during binding\n                        this.checker.errorReporter.simpleError(binex, \"The property '\" + propertyName.actualText + \" on type '\" + leftType.getScopedTypeName(this.scope) + \"' is not visible\");\n                    }\n                }\n                else {\n                    if (symbol.isVariable()) {\n                        if (symbol.isInferenceSymbol()) {\n                            var infSym = <InferenceSymbol>symbol;\n                            if (infSym.declAST && !this.checker.typeStatusIsFinished(infSym.typeCheckStatus)) {\n                                this.inScopeTypeCheckDecl(infSym.declAST);\n                            }\n                        }\n                    }\n                    propertyName.sym = symbol;\n                    binex.type = symbol.getType();\n                }\n            }\n            if (binex.type == null) {\n                binex.type = this.anyType;\n            }\n\n            return binex;\n        }\n\n        public typeCheckBooleanOperator(ast: AST): AST {\n            var binex = <BinaryExpression>ast;\n            binex.operand1 = this.typeCheck(binex.operand1);\n            binex.operand2 = this.typeCheck(binex.operand2);\n            var leftType = binex.operand1.type;\n            var rightType = binex.operand2.type;\n            if ((!";
var v27150 = v27151 + '(this.checker.sourceIsAssignableToTarget(leftType, rightType))) &&\n                (!(this.checker.sourceIsAssignableToTarget(rightType, leftType)))) {\n                this.checker.errorReporter.incompatibleTypes(binex, leftType, rightType, binex.printLabel(), this.scope);\n            }\n            binex.type = this.booleanType;\n            return binex;\n        }\n\n        public typeCheckAsgOperator(ast: AST): AST {\n            var binex = <BinaryExpression>ast;\n            var applyTargetType = !binex.operand2.isParenthesized;\n            binex.operand1 = this.typeCheck(binex.operand1);\n\n            this.checker.typeCheckWithContextualType(binex.operand1.type, this.checker.inProvisionalTypecheckMode(), applyTargetType, binex.operand2);\n\n            var leftType = binex.operand1.type;\n            var rightType = binex.operand2.type;\n\n            if (!(this.astIsWriteable(binex.operand1))) {\n                this.checker.errorReporter.valueCannotBeModified(binex);\n            }\n            if (binex.operand1.nodeType == NodeType.Call) {\n                var callEx = <CallExpression>binex.operand1;\n            }\n            var preserveScope = false;\n            var preservedContainedScope = null;\n            if (binex.operand2.type) {\n                preservedContainedScope = binex.operand2.type.containedScope;\n                preserveScope = true;\n            }\n            // Do not re-write the AST in provisional typecheck mode\n            binex.operand2 = this.castWithCoercion(binex.operand2, leftType, applyTargetType && !this.checker.inProvisionalTypecheckMode(), false);\n            if (preserveScope && binex.operand2.type.containedScope == null) {\n                binex.operand2.type.containedScope = preservedContainedScope;\n            }\n            binex.type = rightType;\n            return binex;\n        }\n\n        public typeCheckIndex(ast: AST): AST {\n            var binex = <BinaryExpression>ast;\n            binex.operand1 = this.typeCheck(binex.operand1); // ObjExpr\n            binex.operand2 = this.typeCheck(binex.operand2); // IndexExpr\n\n            if (!this.checker.styleSettings.literalSubscript) {\n                if (binex.operand2.nodeType == NodeType.QString) {\n                    this.checker.errorReporter.styleError(ast, "use literal subscript (\'.\') notation instead)");\n                }\n            }\n\n            var objExprType = binex.operand1.type;\n            var indexExprType = binex.operand2.type;\n\n            if (objExprType.elementType) { // arrays\n                if (indexExprType == this.checker.anyType || indexExprType == this.checker.numberType || hasFlag(indexExprType.typeFlags, TypeFlags.IsEnum)) {\n                    binex.type = objExprType.elementType;\n                }\n                else if (indexExprType == this.checker.stringType) {\n                    binex.type = this.checker.anyType;\n                }\n                else {\n                    this.checker.errorReporter.simpleError(binex, "Illegal property access");\n                    binex.type = this.checker.anyType;\n                }\n            }\n            else if (objExprType.index) { // types with index sigs\n\n                if (indexExprType == this.checker.anyType ||\n                    !((objExprType.index.flags & SignatureFlags.IsStringIndexer) || (objExprType.index.flags & SignatureFlags.IsNumberIndexer)) || // REVIEW: unvalidated type expression\n                    ((objExprType.index.flags & SignatureFlags.IsStringIndexer) && indexExprType == this.checker.stringType) ||\n                    ((objExprType.index.flags & SignatureFlags.IsNumberIndexer) && (indexExprType == this.checker.numberType || hasFlag(indexExprType.typeFlags, TypeFlags.IsEnum)))) {\n                    var sig = this.resolveOverload(ast, objExprType.index);\n                    if (sig) {\n                        binex.type = sig.returnType.type;//objExprType.index.signatures[0].returnType.type;\n                    }\n                    else {\n                        binex.type = this.checker.anyType;\n                    }\n                }\n                else if (indexExprType == this.checker.stringType) {\n                    binex.type = this.checker.anyType;\n                }\n                else {\n                    this.checker.errorReporter.simpleError(binex, "Illegal property access");\n                    binex.type = this.checker.anyType;\n                }\n            }\n            else if ((objExprType == this.checker.anyType ||\n                     objExprType == this.checker.stringType ||\n                     objExprType == this.checker.numberType ||\n                     objExprType == this.checker.booleanType ||\n                     objExprType.isReferenceType()) &&\n                     (indexExprType == this.checker.anyType ||\n                      indexExprType == this.checker.stringType ||\n                      (indexExprType == this.checker.numberType || hasFlag(indexExprType.typeFlags, TypeFlags.IsEnum)))) { // RE';
var v27149 = v27150 + 'VIEW: Do we want to allow indexes of type \'number\'?\n                binex.type = this.checker.anyType;\n            }\n            else {\n                this.checker.errorReporter.simpleError(binex, "Illegal property access");\n                binex.type = this.checker.anyType;\n            }\n\n            return binex;\n        }\n\n        public typeCheckInOperator(binex: BinaryExpression): BinaryExpression {\n            binex.operand1 = this.cast(this.typeCheck(binex.operand1), this.stringType);\n            binex.operand2 = this.typeCheck(binex.operand2);\n\n            if (!((binex.operand1.type == this.checker.anyType || binex.operand1.type == this.checker.stringType) &&\n                    (binex.operand2.type == this.anyType || this.checker.sourceIsSubtypeOfTarget(binex.operand2.type, this.objectInterfaceType)))) {\n                this.checker.errorReporter.simpleError(binex, "The in operator requires the left operand to be of type Any or the String primitive type, and the right operand to be of type Any or an object type");\n            }\n\n            binex.type = this.booleanType;\n            return binex;\n        }\n\n        public typeCheckShift(binex: BinaryExpression, assignment: bool): BinaryExpression {\n            binex.operand1 = this.cast(this.typeCheck(binex.operand1), this.doubleType);\n            binex.operand2 = this.cast(this.typeCheck(binex.operand2), this.doubleType);\n            if (assignment && (!(this.astIsWriteable(binex.operand1)))) {\n                this.checker.errorReporter.valueCannotBeModified(binex);\n            }\n            binex.type = this.doubleType;\n            return binex;\n        }\n\n        public typeCheckQMark(trinex: ConditionalExpression): ConditionalExpression {\n            trinex.operand1 = this.typeCheck(trinex.operand1);\n            trinex.operand2 = this.typeCheck(trinex.operand2);\n            trinex.operand3 = this.typeCheck(trinex.operand3);\n            var leftType = trinex.operand2.type;\n            var rightType = trinex.operand3.type;\n\n            if (leftType == rightType) {\n                trinex.type = leftType;\n            }\n            else {\n                if (this.checker.sourceIsSubtypeOfTarget(leftType, rightType)) {\n                    trinex.type = rightType;\n                }\n                else if (this.checker.sourceIsSubtypeOfTarget(rightType, leftType)) {\n                    trinex.type = leftType;\n                }\n                else {\n                    trinex.type = this.anyType;\n                    this.checker.errorReporter.incompatibleTypes(trinex, leftType, rightType, trinex.printLabel(), this.scope);\n                }\n            }\n\n            return trinex;\n        }\n\n        public addFormals(container: Symbol, signature: Signature,\n            table: IHashTable) {\n            var len = signature.parameters.length;\n            for (var i = 0; i < len; i++) {\n                var symbol = <ParameterSymbol>signature.parameters[i];\n                symbol.container = container;\n                table.add(symbol.name, symbol);\n            }\n        }\n\n        // REVIEW: We use isModContainer instead of container.getType().isModuleType because container.type may be null at this\n        // juncture\n        public addLocalsFromScope(scope: SymbolScope, container: Symbol, vars: ASTList, table: IHashTable, isModContainer: bool) {\n            var len = vars.members.length;\n            var hasArgsDef = false;\n            for (var i = 0; i < len; i++) {\n                var local = <VarDecl>vars.members[i];\n                if (((local.sym == null) || (local.sym.kind() != SymbolKind.Field))) {\n                    var result: Symbol = null;\n                    if ((result = table.lookup(local.id.text)) == null) {\n                        var localVar: ValueLocation = new ValueLocation();\n                        localVar.typeLink = new TypeLink();\n                        var varSym = null;\n\n                        if (hasFlag(local.varFlags, VarFlags.Static)) {\n                            local.varFlags |= VarFlags.LocalStatic;\n                            varSym = new FieldSymbol(local.id.text, local.minChar,\n                                                      this.checker.locationInfo.unitIndex,\n                                                      true, localVar);\n                        }\n                        else {\n                            varSym = new VariableSymbol(local.id.text, local.minChar,\n                                                      this.checker.locationInfo.unitIndex,\n                                                      localVar);\n                        }\n                        varSym.transferVarFlags(local.varFlags);\n                        localVar.symbol = varSym;\n                        varSym.declAST = local;\n                        localVar.typeLink.ast = local.typeExpr;\n                        this.checker.resolveTypeLink(scope, localVar.typeLink, false);\n                        if ((local.type == null) &&';
var v27148 = v27149 + ' (local.init == null)) {\n                            local.type = this.anyType;\n                        }\n                        localVar.typeLink.type = local.type;\n                        localVar.symbol.container = container;\n                        local.sym = localVar.symbol;\n                        table.add(local.id.text, varSym);\n                        if (local.id.text == "arguments") {\n                            hasArgsDef = true;\n                        }\n                    }\n                    else {\n                        local.type = result.getType();\n                        local.sym = result;\n                    }\n                }\n            }\n            if (!isModContainer) {\n                if (!hasArgsDef) {\n                    var argLoc = new ValueLocation();\n                    argLoc.typeLink = new TypeLink();\n                    var theArgSym = new VariableSymbol("arguments", vars.minChar,\n                                                     this.checker.locationInfo.unitIndex,\n                                                     argLoc);\n\n                    // if the user is using a custom lib.d.ts where IArguments has not been defined\n                    // (or they\'re compiling with the --nolib option), use \'any\' as the argument type\n                    if (!this.iargumentsInterfaceType) {\n                        var argumentsSym = scope.find("IArguments", false, true);\n\n                        if (argumentsSym) {\n                            argumentsSym.flags |= SymbolFlags.CompilerGenerated;\n                            this.iargumentsInterfaceType = argumentsSym.getType();\n                        }\n                        else {\n                            this.iargumentsInterfaceType = this.anyType;\n                        }\n                    }\n                    argLoc.typeLink.type = this.iargumentsInterfaceType;\n                    table.add("arguments", theArgSym);\n                }\n            }\n        }\n\n        // REVIEW: isClass param may now be redundant\n        public addConstructorLocalArgs(container: Symbol, args: ASTList, table: IHashTable, isClass: bool): void {\n            if (args) {\n                var len = args.members.length;\n                for (var i = 0; i < len; i++) {\n                    var local = <ArgDecl>args.members[i];\n                    if ((local.sym == null) ||\n                        (isClass || (local.sym.kind() != SymbolKind.Field))) {\n                        var result: Symbol = null;\n                        if ((result = table.lookup(local.id.text)) == null) {\n                            this.resolveBoundDecl(local);\n                            var localVar: ValueLocation = new ValueLocation();\n                            localVar.typeLink = new TypeLink();\n                            var varSym = new ParameterSymbol(local.id.text, local.minChar,\n                                                                   this.checker.locationInfo.unitIndex,\n                                                                   localVar);\n                            varSym.declAST = local;\n                            localVar.symbol = varSym;\n                            localVar.typeLink.type = local.type;\n                            localVar.symbol.container = container;\n                            local.sym = localVar.symbol;\n                            table.add(local.id.text, varSym);\n                        }\n                        else {\n                            local.type = result.getType();\n                            local.sym = result;\n                        }\n                    }\n                }\n            }\n        }\n\n        public checkInitSelf(funcDecl: FuncDecl): bool {\n            if (!funcDecl.isMethod()) {\n                var freeVars = funcDecl.freeVariables;\n                for (var k = 0, len = freeVars.length; k < len; k++) {\n                    var sym = freeVars[k];\n                    if (sym.isInstanceProperty()) {\n                        return true;\n                    }\n                }\n            }\n            var fns = funcDecl.scopes;\n            var fnsLen = fns.members.length;\n\n            for (var j = 0; j < fnsLen; j++) {\n                var fn = <FuncDecl>fns.members[j];\n                if (this.checkInitSelf(fn)) {\n                    return true;\n                }\n            }\n            return false;\n        }\n\n        public checkPromoteFreeVars(funcDecl: FuncDecl, constructorSym: Symbol): void {\n            var freeVars = funcDecl.freeVariables;\n            for (var k = 0, len = freeVars.length; k < len; k++) {\n                var sym = freeVars[k];\n                if ((!sym.isInstanceProperty()) && (sym.container == constructorSym)) {\n                    instanceFilter.reset();\n                    if (this.scope.search(instanceFilter, sym.name, false, false)) {\n                        this.checker.errorReporter.simpleError(funcDecl, "Constructor-local variable shadows class property';
var v27147 = v27148 + ' \'" + sym.name + "\'. To access the class property, use \'self." + sym.name + "\'");\n                    }\n\n                    this.checker.errorReporter.simpleError(funcDecl, "Constructor-local variables may not be accessed from instance method bodies. Consider changing local variable \'" + sym.name + "\' to a class property")\n                }\n            }\n        }\n\n        public allReturnsAreVoid(funcDecl: FuncDecl) {\n            // in the case of a function or method with no declared return type, walk the body to \n            // pre-emptively determine if the function has a return type of void\n            //\n            // REVIEW: Eventually, we\'ll want to perform exit graph analysis to determine\n            // if the function ever "escapes" without a return expression\n            // This would require moving some of this logic into the function\'s typecheck-proper,\n            // which would slow things down a fair bit, but would open up more analysis opportunities\n            var allReturnsAreVoid = true;\n\n            if (funcDecl.signature.returnType.type == null) {\n                var preFindReturnExpressionTypes = function (ast: AST, parent: AST, walker: IAstWalker) {\n                    var go = true;\n                    switch (ast.nodeType) {\n                        case NodeType.FuncDecl:\n                            // don\'t recurse into a function decl - we don\'t want to confuse a nested\n                            // return type with the top-level function\'s return type\n                            go = false;\n                            break;\n                        case NodeType.Return:\n                            var returnStmt: ReturnStatement = <ReturnStatement>ast;\n\n                            if (returnStmt.returnExpression) {\n                                allReturnsAreVoid = false;\n                                go = false;\n                            }\n\n                        default:\n                            break;\n                    }\n                    walker.options.goChildren = go;\n                    walker.options.goNextSibling = go;\n                    return ast;\n                }\n\n                getAstWalkerFactory().walk(funcDecl.bod, preFindReturnExpressionTypes);\n            }\n\n            return allReturnsAreVoid;\n        }\n\n        public classConstructorHasSuperCall(funcDecl: FuncDecl) {\n            var foundSuper = false;\n\n            var preFindSuperCall = function (ast: AST, parent: AST, walker: IAstWalker) {\n\n                var go = true;\n\n                switch (ast.nodeType) {\n                    case NodeType.FuncDecl:\n                        go = false;\n                        break;\n                    case NodeType.Call:\n                        var call = <CallExpression>ast;\n\n                        if (call.target.nodeType == NodeType.Super) {\n                            go = false;\n                            foundSuper = true;\n                            break;\n                        }\n                        break;\n                    default:\n                        break;\n                }\n                walker.options.goChildren = go;\n                return ast;\n            }\n\n            getAstWalkerFactory().walk(funcDecl.bod, preFindSuperCall);\n\n            return foundSuper;\n        }\n\n        private baseListPrivacyErrorReporter(bases: ASTList, i: number, declSymbol: Symbol, extendsList: bool, typeName: string, isModuleName: bool) {\n            var baseSymbol = bases.members[i].type.symbol;\n            var declTypeString = (declSymbol.declAST.nodeType == NodeType.InterfaceDeclaration) ? "interface" : "class";\n            var baseListTypeString = extendsList ? "extends" : "implements";\n            var baseTypeString = (baseSymbol.declAST.nodeType == NodeType.InterfaceDeclaration) ? "interface" : "class";\n            var typestring = "";\n            if (isModuleName) {\n                var quotestring = "";\n                if (!isQuoted(typeName)) {\n                    quotestring = "\'";\n                }\n                typestring = " is using inaccessible module ";\n                baseTypeString = " " + baseTypeString + " from private module " + quotestring + typeName + quotestring;\n            } else {\n                baseTypeString = " private " + baseTypeString + " \'" + typeName + "\'";\n            }\n            this.checker.errorReporter.simpleError(bases.members[i], "exported " + declTypeString + " \'" + declSymbol.name + "\' " + baseListTypeString + baseTypeString);\n        }\n\n        // Check if declSymbol can satisfy baselist privacy\n        private typeCheckBaseListPrivacy(bases: ASTList, declSymbol: Symbol, extendsList: bool) {\n            if (bases) {\n                var basesLen = bases.members.length;\n                for (var i = 0; i < basesLen; i++) {\n                    if (!bases.members[i].type || bases.members[i].type == this.checker.anyType) {\n                        // This type is coming from external module so it ha';
var v27146 = v27147 + "s to be exported, or we're recovering from an\n                        // error condition\n                        continue;\n                    }\n\n                    this.checkSymbolPrivacy(bases.members[i].type.symbol, declSymbol, (typeName: string, isModuleName: bool) => this.baseListPrivacyErrorReporter(bases, i, declSymbol, extendsList, typeName, isModuleName));\n                }\n            }\n        }\n\n        // Checks if the privacy is satisfied by typeSymbol that is used in the declaration inside container\n        private checkSymbolPrivacy(typeSymbol: TypeSymbol, declSymbol: Symbol, errorCallback: (typeName: string, isModuleName: bool) => void ) {\n            var externalModuleSymbol: TypeSymbol = null;\n            var declSymbolPath: Symbol[] = null;\n\n            // Type is visible type, so this can be used by anyone.\n            if (typeSymbol.isExternallyVisible(this.checker)) {\n                // Symbol could be from external module, go ahead and find the external module\n                var typeSymbolPath = typeSymbol.pathToRoot();\n                declSymbolPath = declSymbol.pathToRoot();\n                var typeSymbolLength = typeSymbolPath.length;\n                var declSymbolPathLength = declSymbolPath.length;\n\n                if (typeSymbolLength > 0) {\n                    if (typeSymbolPath[typeSymbolLength - 1].getType().isModuleType() &&\n                        (<TypeSymbol>typeSymbolPath[typeSymbolLength - 1]).isDynamic &&\n                        typeSymbolPath[typeSymbolLength - 1] != declSymbolPath[declSymbolPathLength - 1]) {\n                        // Symbol from external module that was imported using one of the import statement\n                        externalModuleSymbol = <TypeSymbol>typeSymbolPath[typeSymbolLength - 1];\n                    } else if (typeSymbolLength > 1) {\n                        // Is symbol from declared quoted module\n                        if (typeSymbolPath[typeSymbolLength - 2].getType().isModuleType() &&\n                            (<TypeSymbol>typeSymbolPath[typeSymbolLength - 2]).isDynamic &&\n                            (declSymbolPathLength == 1 || typeSymbolPath[typeSymbolLength - 2] != declSymbolPath[declSymbolPathLength - 2])) {\n                            // From quoted module name\n                            externalModuleSymbol = <TypeSymbol>typeSymbolPath[typeSymbolLength - 2];\n                        }\n                    }\n                }\n\n                if (externalModuleSymbol == null) {\n                    return;\n                }\n            }\n\n            // Interface symbol doesn't reflect correct Exported state so use AST instead\n            var interfaceDecl: InterfaceDeclaration = declSymbol.getInterfaceDeclFromSymbol(this.checker);\n            if (interfaceDecl && !hasFlag(interfaceDecl.varFlags, VarFlags.Exported)) {\n                return;\n            }\n\n            var checkVisibilitySymbol = declSymbol;\n            // Var decl symbol doesnt reflect correct exported state so use AST instead\n            var varDecl = declSymbol.getVarDeclFromSymbol();\n            if (varDecl) {\n                if (hasFlag(varDecl.varFlags, VarFlags.Private)) {\n                    return;\n                } else if (hasFlag(varDecl.varFlags, VarFlags.Public)) {\n                    // Its a member from class so check visibility of its container\n                    checkVisibilitySymbol = declSymbol.container;\n                }\n            }\n\n            // If the container is visible from global scrope it is error\n            if (checkVisibilitySymbol.isExternallyVisible(this.checker)) {\n                var privateSymbolName = typeSymbol.name;\n\n                // If imported typeSymbol mark it as visible externally and verify that the symbol it imports is visible externally\n                if (externalModuleSymbol != null) {\n                    var prettyName = externalModuleSymbol.getPrettyNameOfDynamicModule(declSymbolPath);\n                    if (prettyName != null) {\n                        this.currentScript.AddExternallyVisibleImportedSymbol(prettyName.symbol, this.checker);\n                        return;\n                    } else {\n                        privateSymbolName = externalModuleSymbol.prettyName;\n                    }\n                }\n\n                // Visible declaration using non visible type.\n                errorCallback(privateSymbolName, typeSymbol.name != privateSymbolName);\n            }\n        }\n\n        // Checks if the privacy is satisfied by type that is used in the declaration inside container\n        private checkTypePrivacy(type: Type, declSymbol: Symbol, errorCallback: (typeName: string, isModuleName : bool) =>void ) {\n            // Primitive types\n            if (!(type && type.primitiveTypeClass == Primitive.None)) {\n                return;\n            }\n\n\n            // If type is array, check element type\n            if (type.isArray()) {\n                return this.checkTypePrivacy(type.elementTyp";
var v27145 = v27146 + 'e, declSymbol, errorCallback);\n            }\n\n            // Going to be printing symbol name, verify if symbol can be emitted\n            if (type.symbol && type.symbol.name && type.symbol.name != "_anonymous" &&\n                        (((type.call == null) && (type.construct == null) && (type.index == null)) ||\n                        (type.members && (!type.isClass())))) {\n                return this.checkSymbolPrivacy(<TypeSymbol>type.symbol, declSymbol, errorCallback);\n            }\n\n            if (type.members) {\n                // Verify symbols for members\n                type.members.allMembers.map((key, s, unused) => {\n                    var sym = <Symbol>s;\n                    if (!hasFlag(sym.flags, SymbolFlags.BuiltIn)) {\n                        this.checkTypePrivacy(sym.getType(), declSymbol, errorCallback);\n                    }\n                }, null);\n            }\n\n            this.checkSignatureGroupPrivacy(type.call, declSymbol, errorCallback);\n            this.checkSignatureGroupPrivacy(type.construct, declSymbol, errorCallback);\n            this.checkSignatureGroupPrivacy(type.index, declSymbol, errorCallback);\n        }\n\n        // Checks if the privacy is satisfied by typeSymbol that is used in the declaration inside container\n        private checkSignatureGroupPrivacy(sgroup: SignatureGroup, declSymbol: Symbol, errorCallback: (typeName: string, isModuleName : bool) =>void ) {\n            if (sgroup) {\n                var len = sgroup.signatures.length;\n                for (var i = 0; i < sgroup.signatures.length; i++) {\n                    var signature = sgroup.signatures[i];\n                    if (len > 1 && signature == sgroup.definitionSignature) {\n                        // In case of overloads don\'t look up for overload defintion types.\n                        continue;\n                    }\n\n                    if (signature.returnType) {\n                        this.checkTypePrivacy(signature.returnType.type, declSymbol, errorCallback);\n                    }\n\n                    var paramLen = signature.parameters.length;\n                    for (var j = 0; j < paramLen; j++) {\n                        var param = signature.parameters[j];\n                        this.checkTypePrivacy(param.getType(), declSymbol, errorCallback);\n                    }\n                }\n            }\n        }\n\n        private functionArgumentPrivacyErrorReporter(funcDecl: FuncDecl, p: number, paramSymbol: Symbol, typeName: string, isModuleName: bool) {\n            var isGetter = funcDecl.isAccessor() && hasFlag(funcDecl.fncFlags, FncFlags.GetAccessor);\n            var isSetter = funcDecl.isAccessor() && hasFlag(funcDecl.fncFlags, FncFlags.SetAccessor);\n            var isPublicFunc = hasFlag(funcDecl.fncFlags, FncFlags.Public);\n            var isContainerInterface = funcDecl.type.symbol.getInterfaceDeclFromSymbol(this.checker) != null;\n            var typestring = "";\n            if (isModuleName) {\n                var quotestring = "";\n                if (!isQuoted(typeName)) {\n                    quotestring = "\'";\n                }\n                typestring = " is using inaccessible module " + quotestring + typeName + quotestring;\n            } else {\n                typestring = " has or is using private type \'" + typeName + "\'";\n            }\n\n            if (!isContainerInterface) {\n                if (funcDecl.isConstructor) {\n                    this.checker.errorReporter.simpleError(funcDecl.arguments.members[p], "exported class\'s constructor parameter \'" + paramSymbol.name + "\'" + typestring);\n                } else if (isSetter) {\n                    this.checker.errorReporter.simpleError(funcDecl.arguments.members[p], (isPublicFunc ? "public" : "exported") + " setter parameter \'" + paramSymbol.name + "\'" + typestring);\n                } else if (!isGetter) {\n                    this.checker.errorReporter.simpleError(funcDecl.arguments.members[p], (isPublicFunc ? "public" : "exported") + " function parameter \'" + paramSymbol.name + "\'" + typestring);\n                }\n            } else {\n                if (funcDecl.isConstructMember()) {\n                    this.checker.errorReporter.simpleError(funcDecl.arguments.members[p], "exported interface\'s constructor parameter \'" + paramSymbol.name + "\'" + typestring);\n                } else if (funcDecl.isCallMember()) {\n                    this.checker.errorReporter.simpleError(funcDecl.arguments.members[p], "exported interface\'s call parameter \'" + paramSymbol.name + "\'" + typestring);\n                } else if (!funcDecl.isIndexerMember()) {\n                    this.checker.errorReporter.simpleError(funcDecl.arguments.members[p], "exported interface\'s function parameter \'" + paramSymbol.name + "\'" + typestring);\n                }\n            }\n        }\n\n        private returnTypePrivacyError(astError: AST, funcDecl: FuncDecl, typeName: string, isModuleName: bool) {\n            var isGetter = funcDecl.isAccessor() && hasFlag(funcD';
var v27144 = v27145 + 'ecl.fncFlags, FncFlags.GetAccessor);\n            var isSetter = funcDecl.isAccessor() && hasFlag(funcDecl.fncFlags, FncFlags.SetAccessor);\n            var isPublicFunc = hasFlag(funcDecl.fncFlags, FncFlags.Public);\n            var isContainerInterface = funcDecl.type.symbol.getInterfaceDeclFromSymbol(this.checker) != null;\n            var typestring = "";\n            if (isModuleName) {\n                var quotestring = "";\n                if (!isQuoted(typeName)) {\n                    quotestring = "\'";\n                }\n                typestring = " is using inaccessible module " + quotestring + typeName + quotestring;\n            } else {\n                typestring = " has or is using private type \'" + typeName + "\'";\n            }\n            if (!isContainerInterface) {\n                if (isGetter) {\n                    this.checker.errorReporter.simpleError(astError, (isPublicFunc ? "public" : "exported") + " getter return type" + typestring);\n                } else if (!isSetter) {\n                    this.checker.errorReporter.simpleError(astError, (isPublicFunc ? "public" : "exported") + " function return type" + typestring);\n                }\n            } else {\n                if (funcDecl.isConstructMember()) {\n                    this.checker.errorReporter.simpleError(astError, "exported interface\'s constructor return type" + typestring);\n                } else if (funcDecl.isCallMember()) {\n                    this.checker.errorReporter.simpleError(astError, "exported interface\'s call return type" + typestring);\n                } else if (funcDecl.isIndexerMember()) {\n                    this.checker.errorReporter.simpleError(astError, "exported interface\'s indexer return type" + typestring);\n                } else {\n                    this.checker.errorReporter.simpleError(astError, "exported interface\'s function return type" + typestring);\n                }\n            }\n        }\n\n        private functionReturnTypePrivacyErrorReporter(funcDecl: FuncDecl, signature: Signature, typeName: string, isModuleName: bool) {\n            var reportOnFuncDecl = false;\n\n            // Error coming from return annotation\n            if (funcDecl.returnTypeAnnotation != null &&\n                funcDecl.returnTypeAnnotation.type == signature.returnType.type) {\n                this.returnTypePrivacyError(funcDecl.returnTypeAnnotation, funcDecl, typeName, isModuleName);\n            }\n\n            // Check if return statement\'s type matches the one that we concluded\n            for (var i = 0; i < funcDecl.returnStatementsWithExpressions.length; i++) {\n                if (funcDecl.returnStatementsWithExpressions[i].type == signature.returnType.type) {\n                    this.returnTypePrivacyError(funcDecl.returnStatementsWithExpressions[i], funcDecl, typeName, isModuleName);\n                } else {\n                    reportOnFuncDecl = true;\n                }\n            }\n\n            if (reportOnFuncDecl) {\n                // Show on function decl\n                this.returnTypePrivacyError(funcDecl, funcDecl, typeName, isModuleName);\n            }\n        }\n\n        public typeCheckFunction(funcDecl: FuncDecl): FuncDecl {\n            this.nestingLevel = 0;\n            var fnType = funcDecl.type;\n\n            var fgSym = fnType.symbol;\n            var signature = funcDecl.signature;\n\n            if (this.checker.typeStatusIsFinished(signature.typeCheckStatus)) {\n                return funcDecl;\n            }\n            else if (signature.typeCheckStatus == TypeCheckStatus.Started) {\n                if (!funcDecl.returnTypeAnnotation &&\n                    funcDecl.bod &&\n                       !funcDecl.isSignature() &&\n                       !(funcDecl.isConstructor) &&\n                       this.allReturnsAreVoid(funcDecl)) {\n\n                    signature.returnType.type = this.voidType;\n                    return funcDecl;\n                }\n                else {\n                    if (funcDecl.returnTypeAnnotation == null) {\n                        if (this.checker.styleSettings.implicitAny) {\n                            this.checker.errorReporter.styleError(funcDecl, "type implicitly set to \'any\'");\n                        }\n                        signature.returnType.type = this.anyType;\n                        fgSym.flags |= SymbolFlags.RecursivelyReferenced;\n                    }\n                    return funcDecl;\n                }\n            }\n\n            signature.typeCheckStatus = TypeCheckStatus.Started;\n            this.checker.addStartedPTO(signature);\n            var prevScope = this.scope;\n            var prevFnc = this.thisFnc;\n            var prevMethodStatus = this.enclosingFncIsMethod;\n            var prevClassNode = this.thisClassNode;\n            this.enclosingFncIsMethod = funcDecl.isMethod() || funcDecl.isConstructor;\n            this.thisFnc = funcDecl;\n            var container = funcDecl.type.symbol;\n            var prevThisType = this.thisType;\n            var pr';
var v27143 = v27144 + "evLocationInfo = this.checker.locationInfo;\n            var funcTable: IHashTable = null;\n            var acceptedContextualType = false;\n            var targetParams: ParameterSymbol[] = null;\n            var targetReturnType: Type = null;\n            var isGetter = funcDecl.isAccessor() && hasFlag(funcDecl.fncFlags, FncFlags.GetAccessor);\n            var isSetter = funcDecl.isAccessor() && hasFlag(funcDecl.fncFlags, FncFlags.SetAccessor);\n            var accessorType: Type = (isGetter || isSetter) && funcDecl.accessorSymbol ? funcDecl.accessorSymbol.getType() : null;\n            var prevModDecl = this.checker.currentModDecl;\n\n            if (funcDecl.isConstructor && !funcDecl.isOverload) {\n                if (fnType.instanceType == null) {\n                    this.checker.errorReporter.simpleError(funcDecl, \"Malformed function body (is this a class named the same as an existing interface?)\");\n                    return funcDecl;\n                }\n\n                this.scope = fnType.instanceType.constructorScope;\n                var ssb = <SymbolScopeBuilder>this.scope;\n                funcTable = ssb.valueMembers.allMembers;\n            }\n            else if ((funcDecl.isSpecialFn() && !(funcDecl.fncFlags & FncFlags.Signature)) || funcDecl.isOverload) {\n                funcTable = funcDecl.symbols;\n                // if the function is static, we just want to use the \n                // current scope\n                if (!hasFlag(funcDecl.fncFlags, FncFlags.Static) && fnType.containedScope) {\n                    this.scope = fnType.containedScope;\n                }\n            }\n            else {\n                if (funcDecl.bod) {\n                    this.scope = fnType.containedScope;\n                }\n                var ssb = <SymbolScopeBuilder>this.scope;\n\n                // If it is null, it's an ambient declaration with no body, so it doesn't strictly matter\n                // if funcTable is not set\n                if (ssb && ssb.valueMembers) {\n                    funcTable = ssb.valueMembers.allMembers;\n                }\n            }\n\n            // If it's a class constructor, we need to check for the presence (or absense) of calls\n            // to the 'super' constructor\n            //\n            // A super constructor call must exist if:\n            //  - the class has a base class\n            //\n            // A super constructor call must be the first statement in the function body if:\n            //  - the constructor has parameter properties or\n            //  - the class body has initialized property decls\n            //\n            // A super constructor call may not exist if:\n            //  - The class has no base type, or inherits directly from 'Object'\n            if (funcDecl.isConstructor && funcDecl.bod && hasFlag(funcDecl.fncFlags, FncFlags.ClassMethod)) {\n\n                var hasBaseType = hasFlag(funcDecl.classDecl.type.instanceType.typeFlags, TypeFlags.HasBaseType);\n                var noSuperCallAllowed = !hasBaseType || hasFlag(funcDecl.classDecl.type.instanceType.typeFlags, TypeFlags.HasBaseTypeOfObject);\n                var superCallMustBeFirst = hasFlag((<ClassDeclaration>funcDecl.classDecl).varFlags, VarFlags.ClassSuperMustBeFirstCallInConstructor);\n\n                if (noSuperCallAllowed && this.classConstructorHasSuperCall(funcDecl)) {\n                    this.checker.errorReporter.simpleError(funcDecl, \"Calls to 'super' constructor are not allowed in classes that either inherit directly from 'Object' or have no base class\");\n                }\n                else if (hasBaseType) {\n                    if (superCallMustBeFirst) {\n                        if (!funcDecl.bod ||\n                            !funcDecl.bod.members.length ||\n                            !((funcDecl.bod.members[0].nodeType == NodeType.Call && (<CallExpression>funcDecl.bod.members[0]).target.nodeType == NodeType.Super) ||\n                            (hasFlag(funcDecl.bod.flags, ASTFlags.StrictMode) && funcDecl.bod.members.length > 1 &&\n                             funcDecl.bod.members[1].nodeType == NodeType.Call && (<CallExpression>funcDecl.bod.members[1]).target.nodeType == NodeType.Super))) {\n                            this.checker.errorReporter.simpleError(funcDecl, \"If a derived class contains initialized properties or constructor parameter properties, the first statement in the constructor body must be a call to the super constructor\");\n                        }\n                    }\n                    else if (!this.classConstructorHasSuperCall(funcDecl)) {\n                        this.checker.errorReporter.simpleError(funcDecl, \"Constructors for derived classes must contain a call to the class's 'super' constructor\");\n                    }\n                }\n            }\n\n            // If we've typechecked this method \"out of order\" (not by walking the class, but through a method call somewhere else),\n            // we need to reset the current class node in question, so that vis";
var v27142 = v27143 + "ibility checks on class members don't fail\n            if (funcDecl.isMethod() && funcDecl.type.enclosingType) {\n\n                var enclosingClassNode: TypeDeclaration = null;\n\n                if (funcDecl.type.enclosingType.symbol.declAST.nodeType == NodeType.FuncDecl) {\n                    enclosingClassNode = <TypeDeclaration>(<FuncDecl>funcDecl.type.enclosingType.symbol.declAST).classDecl;\n                }\n                else if (funcDecl.type.enclosingType.symbol.declAST.nodeType == NodeType.ClassDeclaration) {\n                    enclosingClassNode = <TypeDeclaration>funcDecl.type.enclosingType.symbol.declAST;\n                }\n\n                if (enclosingClassNode) {\n                    this.thisClassNode = enclosingClassNode;\n                }\n            }\n\n            // if this function is contained in a module, we may be in the midst of a recursive typecheck operation\n            // should that be the case, we need to properly set the current module (for visibility tests)\n            if (fnType.enclosingType) {;\n                var enclosingSym = fnType.symbol.container;\n\n                // if the enclosing type is a class, grab the parent module\n                if (enclosingSym && enclosingSym.isType() && enclosingSym.getType().isClass()) {\n                    enclosingSym = enclosingSym.container;\n                }\n\n                if (enclosingSym && enclosingSym.declAST && enclosingSym.declAST.nodeType == NodeType.ModuleDeclaration) {\n                    this.checker.currentModDecl = <ModuleDeclaration>enclosingSym.declAST;\n                }\n            }\n\n            if (funcDecl.unitIndex > 0) {\n                if (this.checker.units &&\n                    (funcDecl.unitIndex < this.checker.units.length)) {\n                    this.checker.locationInfo = this.checker.units[funcDecl.unitIndex];\n                }\n                else {\n                    this.checker.locationInfo = unknownLocationInfo;\n                }\n            }\n\n            if (fnType.enclosingType) {\n                this.thisType = fnType.enclosingType;\n            }\n            else {\n                this.thisType = prevThisType;\n            }\n\n            var paramLen = signature.parameters.length;\n\n            if (!funcDecl.isConstructor && funcDecl.bod && !funcDecl.isSignature()) {\n                var tmpParamScope = this.scope;\n                var ssb = <SymbolScopeBuilder>this.scope;\n\n                // Attempt to contextually type the function declaration             \n                if (!funcDecl.isMethod() && funcDecl.returnTypeAnnotation == null) {\n\n                    // the funcDecl may be a candidate for contextual typing                 \n                    // REVIEW: prevScope will only be null in the case of an upstream error\n                    if (prevScope && funcDecl.name && !funcDecl.name.isMissing()) {\n                        // Go ahead and check for an ambient symbol\n                        var considerSym: Symbol = prevScope.findAmbient(funcDecl.name.text, false, false);\n\n                        if (considerSym && considerSym.declAST && considerSym.declAST.type) {\n                            // REVIEW: Ambients beget signatures, and signatures don't need to be typechecked\n                            //typeCheck(considerSym.declAST);\n                            this.checker.setContextualType(considerSym.declAST.type, false);\n                        }\n                    }\n\n                    if (this.checker.hasTargetType()) {\n                        var candidateTypeContext = this.checker.getTargetTypeContext();\n                        var candidateType = candidateTypeContext.contextualType;\n\n                        if (this.checker.canContextuallyTypeFunction(candidateType, funcDecl, true)) {\n\n                            // Safe to do this, since the indices and fields are guaranteed to be\n                            // non-null and valid by the above call to canContextuallyTypeFunction\n                            var candidateSigs = candidateType.construct ? candidateType.construct : candidateType.call;\n                            candidateTypeContext.targetSig = candidateSigs.signatures[0];\n                            var candidateParams = candidateTypeContext.targetSig.parameters;\n\n                            // the target type has been accepted\n                            targetParams = candidateParams;\n                            targetReturnType = candidateTypeContext.targetSig.returnType.type;\n\n                            // Set \"this\" if applicable\n                            if (candidateTypeContext.targetSig.declAST) {\n                                if (candidateTypeContext.targetSig.declAST.isConstructor) {\n                                    //candidateTypeContext.targetThis=candidateType.instanceType;\n                                    //this.thisType = candidateType.instanceType;\n                                    funcDecl.isTargetTypedAsMethod = true;\n               ";
var v27141 = v27142 + "                 }\n                                else if (candidateTypeContext.targetSig.declAST.isMethod()) {\n                                    //candidateTypeContext.targetThis=candidateTypeContext.targetSig.declAST.type.enclosingType;\n                                    //this.thisType = candidateTypeContext.targetSig.declAST.type.enclosingType;\n                                    funcDecl.isTargetTypedAsMethod = true;\n                                }\n                            }\n                            fgSym.type = candidateTypeContext.contextualType;\n                            acceptedContextualType = true;\n                        }\n                        else if (candidateType && funcDecl.isAccessor()) {\n                            accessorType = candidateType;\n                            candidateTypeContext.targetAccessorType = accessorType;\n                        }\n                        else {\n                            this.checker.killCurrentContextualType();\n                        }\n                    }\n                }\n\n                // typecheck parameters\n                // Add parameter symbols to current scope for typechecking (in case default params reference each other)\n                // Order matters here - default parameters can reference previously defined parameters\n                var paramTable = ssb.valueMembers;\n                this.scope = new SymbolScopeBuilder(paramTable, null, null, null, prevScope, container);\n\n                for (var p = 0; p < paramLen; p++) {\n                    var symbol = signature.parameters[p];\n                    var ast = <ArgDecl>symbol.declAST\n\n                    if (this.checker.hasTargetType() && (targetParams && (this.checker.getTargetTypeContext().targetSig.hasVariableArgList || p < targetParams.length))) {\n                        var candidateTypeContext = this.checker.getTargetTypeContext();\n                        var hasVarArgList = candidateTypeContext.targetSig.hasVariableArgList;\n                        ast.type = hasVarArgList && p >= targetParams.length - 1 ? targetParams[targetParams.length - 1].getType().elementType : targetParams[p].getType();\n                        ast.sym.setType(ast.type);\n                        (<InferenceSymbol>ast.sym).typeCheckStatus = this.checker.getTypeCheckFinishedStatus();\n                    }\n                    else {\n                        this.typeCheck(ast);\n                    }\n\n                    // infer the setter type, if necessary\n                    if (isSetter && accessorType) {\n                        ast = <ArgDecl>this.cast(ast, accessorType);\n                    }\n\n                    symbol.container = container;\n                    // Verify the parameter for the privacy\n                    this.checkTypePrivacy(symbol.getType(), container, (typeName: string, isModuleName: bool) => this.functionArgumentPrivacyErrorReporter(funcDecl, p, symbol, typeName, isModuleName));\n                    paramTable.publicMembers.add(symbol.name, symbol);\n                }\n                this.scope = tmpParamScope;\n            }\n            else {\n                this.typeCheck(funcDecl.arguments)\n\n                // Because some terms were not yet type-checkable during binding, ensure that\n                // param symbols are updated with the proper argument types\n                for (var p = 0; p < paramLen; p++) {\n                    signature.parameters[p].parameter.typeLink.type = funcDecl.arguments.members[p].type;\n                    // Verify the parameter for the privacy\n                    this.checkTypePrivacy(signature.parameters[p].getType(), container, (typeName: string, isModuleName: bool) => this.functionArgumentPrivacyErrorReporter(funcDecl, p, signature.parameters[p], typeName, isModuleName));\n                    if ((<ArgDecl>funcDecl.arguments.members[p]).parameterPropertySym) {\n                        (<ArgDecl>funcDecl.arguments.members[p]).parameterPropertySym.setType(funcDecl.arguments.members[p].type);\n                    }\n                }\n\n                if ((funcDecl.fncFlags & FncFlags.IndexerMember)) {\n                    if (!paramLen || paramLen > 1) {\n                        this.checker.errorReporter.simpleError(funcDecl, \"Index signatures may take one and only one parameter\");\n                    }\n                    else if (funcDecl.arguments.members[0].type == this.checker.numberType) {\n                        fnType.index.flags |= SignatureFlags.IsNumberIndexer;\n                    }\n                    else if (funcDecl.arguments.members[0].type == this.checker.stringType) {\n                        fnType.index.flags |= SignatureFlags.IsStringIndexer;\n                    }\n                    else {\n                        this.checker.errorReporter.simpleError(funcDecl.arguments.members[0], \"Index signatures may only take 'string' or 'number' as their parameter\");\n                    }\n\n                }\n            }\n\n       ";
var v27140 = v27141 + "     // typecheck body\n            if (funcDecl.bod && (!funcDecl.isSignature())) {\n                if (!(funcDecl.isConstructor)) {\n                    this.addFormals(container, signature, funcTable);\n                }\n                else {\n                    this.addConstructorLocalArgs(funcDecl.type.symbol, funcDecl.arguments, funcTable, hasFlag(funcDecl.fncFlags, FncFlags.ClassMethod));\n\n                    if (this.thisClassNode && this.thisClassNode.extendsList) {\n                        var tmpScope = this.scope;\n                        var funcMembers = new ScopedMembers(<DualStringHashTable>funcTable);\n                        this.scope = new FilteredSymbolScopeBuilder(funcMembers, prevScope, funcDecl.type.symbol,\n                                                             function (sym) {\n                                                                 return sym.kind() == SymbolKind.Parameter;\n                                                             });\n                        this.typeCheckBaseCalls(this.thisClassNode.extendsList);\n                        this.scope = tmpScope;\n                    }\n                }\n\n                // Because this function may have been typechecked in a different visiblity context as its caller (e.g., this\n                // function is being typechecked as a result of a call, before the declaration could be typechecked), we need\n                // to set the enclosing module\n                var prevMod = this.checker.currentModDecl;\n                if (funcDecl.type &&\n                    funcDecl.type.symbol &&\n                    !funcDecl.isMethod() &&\n                    funcDecl.type.symbol.declModule) {\n                    this.checker.currentModDecl = funcDecl.type.symbol.declModule;\n                }\n\n\n                // unset the contextual type before typechecking the function body\n                if (acceptedContextualType) {\n                    this.checker.setContextualType(null, this.checker.inProvisionalTypecheckMode());\n                }\n\n                this.typeCheck(funcDecl.bod);\n\n                if (acceptedContextualType) {\n                    this.checker.unsetContextualType();\n                }\n\n                this.checker.currentModDecl = prevMod;\n\n                if (this.checker.checkControlFlow) {\n                    var cfg = funcDecl.buildControlFlow();\n                    if (this.checker.printControlFlowGraph) {\n                        cfg.print(this.checker.errorReporter.outfile);\n                    }\n                    cfg.reportUnreachable(this.checker.errorReporter);\n                    if (this.checker.checkControlFlowUseDef) {\n                        cfg.useDef(this.checker.errorReporter, funcDecl.type.symbol);\n                    }\n                }\n\n                if (funcDecl.isConstructor) {\n                    var fns: ASTList = funcDecl.scopes;\n                    var fnsLen = fns.members.length;\n                    var freeVars: Symbol[];\n                    var sym: Symbol;\n                    var j = 0;\n                    for (; j < fnsLen; j++) {\n                        var fn = <FuncDecl>fns.members[j];\n                        if (!fn.isSignature()) {\n                            if (hasFlag(fn.fncFlags, FncFlags.Method) && (!hasFlag(fn.fncFlags, FncFlags.Static))) {\n                                this.checkPromoteFreeVars(fn, funcDecl.type.symbol);\n                            }\n                        }\n                    }\n                }\n            }\n\n            this.scope = prevScope;\n            this.thisFnc = prevFnc;\n            this.thisClassNode = prevClassNode;\n            this.enclosingFncIsMethod = prevMethodStatus;\n            this.thisType = prevThisType;\n            this.checker.locationInfo = prevLocationInfo;\n            this.checker.currentModDecl = prevModDecl;\n\n            signature.typeCheckStatus = this.checker.getTypeCheckFinishedStatus();\n\n            // set the return type\n            if (funcDecl.returnTypeAnnotation) {\n                this.checkForVoidConstructor(funcDecl.returnTypeAnnotation.type, funcDecl.returnTypeAnnotation);\n\n                if (signature.returnType.type == null) {\n                    this.checker.resolveTypeLink(this.scope, signature.returnType, false);\n                }\n            }\n            else if (targetReturnType) {\n                signature.returnType.type = targetReturnType;\n            }\n\n            // If no return type annotation has been applied to the function declaration\n            // unify the return types from the given return statements\n\n            if (!(fgSym.flags & SymbolFlags.RecursivelyReferenced) && funcDecl.returnStatementsWithExpressions.length > 0) {\n                var collection: ITypeCollection = {\n                    getLength: () => { return funcDecl.returnStatementsWithExpressions.length; },\n                    setTypeAtIndex: (index: number, type: Type) => { funcDecl.returnStatementsWithExpressions[index].t";
var v27139 = v27140 + 'ype = type; },\n                    getTypeAtIndex: (index: number) => { return funcDecl.returnStatementsWithExpressions[index].type; }\n                }\n\n                var bestCommonReturnType = funcDecl.returnStatementsWithExpressions[0].type;\n                bestCommonReturnType = this.checker.findBestCommonType(bestCommonReturnType, null, collection, true);\n\n                if (bestCommonReturnType) {\n                    signature.returnType.type = this.checker.widenType(bestCommonReturnType);\n                }\n                else {\n                    for (var i = 0; i < funcDecl.returnStatementsWithExpressions.length; i++) {\n                        this.checker.errorReporter.simpleError(funcDecl.returnStatementsWithExpressions[i], "Incompatible return type");\n                    }\n                    signature.returnType.type = this.anyType;\n                }\n            }\n\n            var onlyHasThrow = false;\n\n            if (signature.returnType.type == null) {\n                if (hasFlag(funcDecl.fncFlags, FncFlags.HasReturnExpression)) {\n                    if (this.checker.styleSettings.implicitAny) {\n                        this.checker.errorReporter.styleError(funcDecl, "type implicitly set to \'any\'");\n                    }\n                    signature.returnType.type = this.anyType;\n                }\n                else {\n                    signature.returnType.type = this.voidType;\n                }\n            }\n            else if (signature.returnType.type == this.nullType || signature.returnType.type == this.checker.undefinedType) {\n                signature.returnType.type = this.anyType;\n            }\n            else if ((signature.returnType.type != this.voidType && signature.returnType.type != this.checker.undefinedType && signature.returnType.type != this.anyType)) {\n                // the signature declared a non-void type, but there\'s no return statement\n                if (!funcDecl.isSignature() &&\n                    !funcDecl.isConstructor &&\n                    !hasFlag(funcDecl.fncFlags, FncFlags.HasReturnExpression) &&\n                    !hasFlag(funcDecl.fncFlags, FncFlags.IsFatArrowFunction)) {\n                        // relax the restriction if the method only contains a single "throw" statement\n                    onlyHasThrow = (funcDecl.bod.members.length > 0) && (funcDecl.bod.members[0].nodeType == NodeType.Throw)\n\n                    if (!onlyHasThrow) {\n                        this.checker.errorReporter.simpleError(funcDecl.returnTypeAnnotation || funcDecl,\n                             "Function declared a non-void return type, but has no return expression");\n                    }\n                }\n\n                // Type check for return type Privacy\n                this.checkTypePrivacy(signature.returnType.type, container, (typeName: string, isModuleName: bool) => this.functionReturnTypePrivacyErrorReporter(funcDecl, signature, typeName, isModuleName));\n            }\n\n            // if the function declaration is a getter or a setter, set the type of the associated getter/setter symbol\n            if (funcDecl.accessorSymbol) {\n                var accessorType = funcDecl.accessorSymbol.getType();\n                if (!onlyHasThrow && hasFlag(funcDecl.fncFlags, FncFlags.GetAccessor) && !hasFlag(funcDecl.fncFlags, FncFlags.HasReturnExpression)) {\n                    this.checker.errorReporter.simpleError(funcDecl, "Getters must return a value");\n                }\n                if (accessorType) {\n                    if ((hasFlag(funcDecl.fncFlags, FncFlags.GetAccessor) && accessorType != signature.returnType.type) ||\n                        (funcDecl.arguments.members.length > 0 && accessorType != funcDecl.arguments.members[0].type)) {\n                        this.checker.errorReporter.simpleError(funcDecl, "Getter and setter types do not agree");\n                    }\n                }\n                else {\n                    if (hasFlag(funcDecl.fncFlags, FncFlags.GetAccessor)) {\n                        funcDecl.accessorSymbol.setType(signature.returnType.type);\n                    }\n                    else {\n                        if (funcDecl.arguments.members.length != 1) {\n                            this.checker.errorReporter.simpleError(funcDecl, "Setters may have one and only one argument");\n                        }\n                        else {\n                            funcDecl.accessorSymbol.setType(funcDecl.arguments.members[0].type);\n                        }\n                    }\n                }\n            }\n\n            this.typeCheckOverloadSignatures(fnType, funcDecl);\n            return funcDecl;\n        }\n\n        public typeCheckBases(type: Type) {\n            var seenInterface = false;\n            var bases = type.extendsList;\n            var baseLinks = type.extendsTypeLinks;\n            if (bases) {\n                var len = bases.length;\n\n                if (len > 0) {\n                    type.typeFlags |= TypeFlags.Has';
var v27138 = v27139 + 'BaseType;\n                }\n\n                for (var i = 0; i < len; i++) {\n                    if (bases[i] == this.checker.anyType) {\n                        // This may be the type from imported module and hence the type was not really resolved to the correct one.\n                        // Try resolving it again\n                        baseLinks[i].type = null;\n                        // There are no contextual errors when trying to verify the base class\n                        var oldErrors = this.checker.errorReporter.getCapturedErrors();\n                        CompilerDiagnostics.assert(oldErrors.length == 0, "There shouldnt be any contextual errors when typechecking base type names");\n                        this.checker.errorReporter.pushToErrorSink = true;\n                        bases[i] = this.checker.resolveBaseTypeLink(baseLinks[i], type.containedScope);\n                        this.checker.errorReporter.pushToErrorSink = false;\n                        this.checker.errorReporter.freeCapturedErrors();\n                    }\n\n                    var base = bases[i];\n                    var baseRef = baseLinks[i].ast;\n\n                    // make sure it\'s the global \'Object\' and not some alias\n                    var baseTypeOfObject = base.symbol && base.symbol.name == "Object" && base.symbol.container == this.checker.gloMod;\n\n                    if (baseTypeOfObject) {\n                        type.typeFlags |= TypeFlags.HasBaseTypeOfObject;\n                    }\n\n                    if (base.isClassInstance()) {\n                        if (!(type.isClassInstance())) {\n                            this.checker.errorReporter.simpleError(baseRef, "Interface base type must be interface");\n                        }\n                        else {\n                            if (seenInterface) {\n                                this.checker.errorReporter.simpleError(baseRef, "Class may not follow interface as base type");\n                            }\n                        }\n                    }\n                    else if (base.isModuleType()) {\n                        this.checker.errorReporter.simpleError(baseRef, "Types may not be derived from module types");\n                    }\n                    else if (base.members) {\n                        if (!seenInterface) {\n                            seenInterface = true;\n                        }\n                    }\n                    else {\n                        if (!(type.isClassInstance())) {\n                            this.checker.errorReporter.simpleError(baseRef,\n                                                                     "Interface base type must be interface");\n                        }\n                        else {\n                            this.checker.errorReporter.simpleError(baseRef,\n                                                                     "Base type must be interface or class");\n                        }\n                        break;\n                    }\n                }\n            }\n        }\n\n        public checkMembersImplementInterfaces(implementingType: Type) {\n            var instanceType = implementingType.getInstanceType();\n            if (instanceType.implementsList) {\n                var len = instanceType.implementsList.length;\n\n                for (var i = 0; i < len; i++) {\n                    var interfaceType = instanceType.implementsList[i];\n                    var comparisonInfo = new TypeComparisonInfo();\n                    if (!this.checker.sourceIsSubtypeOfTarget(instanceType, interfaceType, comparisonInfo)) {\n                        var emsg = "Class \'" + instanceType.getTypeName() +\n                              "\' declares interface \'" + interfaceType.getTypeName() +\n                              "\' but does not implement it";\n                        if (!comparisonInfo.message) {\n                            this.checker.errorReporter.simpleErrorFromSym(instanceType.symbol, emsg);\n                        }\n                        else {\n                            this.checker.errorReporter.simpleErrorFromSym(instanceType.symbol, emsg + ": " + comparisonInfo.message);\n                        }\n                    }\n                }\n            }\n        }\n\n        public typeCheckBaseCalls(bases: ASTList) {\n            if (bases == null) {\n                return;\n            }\n            var basesLen = bases.members.length;\n            for (var i = 0; i < basesLen; i++) {\n                var baseExpr = bases.members[i];\n                var baseSymbol: Symbol = null;\n                if (baseExpr.nodeType == NodeType.Call) {\n                    this.typeCheckNew(baseExpr);\n                }\n            }\n        }\n\n        public assertUniqueNamesInBaseTypes(names: IHashTable, type: Type, classDecl: InterfaceDeclaration, checkUnique: bool): void {\n            if (type) {\n                if (type.members) {\n                    type.members.publicMembers.map((key, s, c) => {\n  ';
var v27137 = v27138 + '                      var sym = <Symbol>s;\n                        var dup = names.lookup(sym.name);\n                        if (dup) {\n                            if (checkUnique) {\n                                this.checker.errorReporter.simpleError(classDecl,\n                                                                  "duplicate member name in bases for " + classDecl.name.actualText + ": " + type.symbol.name + " and " + dup.container.name + " both contain member with name " + sym.name);\n                            }\n                        }\n                        else {\n                            names.add(sym.name, sym);\n                        }\n                    }, null);\n                }\n                if (type.extendsList) {\n                    var len = type.extendsList.length;\n                    for (var i = 0; i < len; i++) {\n                        if (!(type.extendsList[i].symbol.flags & SymbolFlags.RecursivelyReferenced)) {\n                            this.assertUniqueNamesInBaseTypes(names, type.extendsList[i], classDecl, checkUnique);\n                        }\n                    }\n                }\n            }\n        }\n\n        public checkBaseTypeMemberInheritance(derivedType: Type, derivedTypeDecl: AST): void {\n            var instanceType = derivedType.getInstanceType();\n            if (instanceType.extendsList == null) {\n                return;\n            }\n\n            var len = instanceType.extendsList.length;\n            if (len > 0) {\n                var names = new StringHashTable();\n                if (instanceType.isClassInstance()) {\n                    for (var i = 0; i < len; i++) {\n                        this.assertUniqueNamesInBaseTypes(names, instanceType.extendsList[i], <InterfaceDeclaration>derivedTypeDecl, i > 0);\n                    }\n                }\n\n                if (instanceType.members) {\n                    instanceType.members.publicMembers.map((key, s, c) => {\n                        var sym = <Symbol>s;\n                        for (var j = 0; j < len; j++) {\n                            var base = instanceType.extendsList[j];\n                            if (base.memberScope == null) {\n                                this.checker.errorReporter.simpleError(derivedTypeDecl, "Base type \'" + base.symbol.name + "\' lacks an implementation.")\n                            }\n                            else {\n                                var bSym = base.memberScope.find(sym.name, false, false);\n                                if (bSym) {\n                                    var aType = sym.getType();\n                                    var bType = bSym.getType();\n                                    if (!(this.checker.sourceIsSubtypeOfTarget(aType, bType))) {\n                                        this.checker.errorReporter.simpleErrorFromSym(sym,\n                                                                          "Type of overridden member \'" + sym.name + "\' is not subtype of original member defined by type \'" + bSym.container.name + "\'");\n                                    }\n                                    else if ((sym.kind() == SymbolKind.Type) &&\n                                             (bSym.kind() == SymbolKind.Field)) {\n                                        this.checker.errorReporter.simpleErrorFromSym(sym,\n                                                                          "Cannot override field \'" + sym.name + "\' with method");\n                                    }\n                                }\n                            }\n                        }\n                    }, null);\n                }\n            }\n        }\n\n        public typeCheckClass(classDecl: ClassDeclaration): ClassDeclaration {\n            var typeSymbol = <TypeSymbol>classDecl.type.symbol;\n\n            if (typeSymbol.typeCheckStatus == TypeCheckStatus.Finished) {\n                return classDecl;\n            }\n            else if (typeSymbol.typeCheckStatus == TypeCheckStatus.Started) {\n                // REVIEW: report this recursion\n                //checker.errorReporter.recursionRequiresTypeAnnotation(classDecl);\n                return classDecl;\n            }\n            else {\n                typeSymbol.typeCheckStatus = TypeCheckStatus.Started;\n                this.checker.addStartedPTO(typeSymbol);\n            }\n\n            var prevScope = this.scope;\n            var svClassNode = this.thisClassNode;\n            this.thisClassNode = classDecl;\n            var classType = classDecl.type;\n            this.typeCheckBases(classType.instanceType);\n\n            this.typeCheckBaseListPrivacy(classDecl.extendsList, typeSymbol, true);\n            this.typeCheckBaseListPrivacy(classDecl.implementsList, typeSymbol, false);\n\n            var prevThisType = this.thisType;\n            this.thisType = classType.instanceType;\n            this.scope = classType.instanceType.containedScope;\n\n            // Add the constructor locals, if necessary\n  ';
var v27136 = v27137 + '          if (classDecl.constructorDecl) {\n                this.scope = classType.instanceType.constructorScope;\n                var ssb = <SymbolScopeBuilder>this.scope;\n                var funcTable = ssb.valueMembers.allMembers;\n\n                this.addConstructorLocalArgs(classDecl.constructorDecl.type.symbol, classDecl.constructorDecl.arguments, funcTable, true);\n            }\n\n            this.typeCheck(classDecl.members);\n            typeSymbol.typeCheckStatus = TypeCheckStatus.Finished;\n            this.checkBaseTypeMemberInheritance(classType, classDecl);\n            this.checkMembersImplementInterfaces(classType);\n\n            this.typeCheckOverloadSignatures(classType, classDecl);\n            this.typeCheckOverloadSignatures(classType.instanceType, classDecl);\n\n            // if the class has no declared constructor, adapt its base class\'s signature group, if necessary\n            if (!classDecl.constructorDecl) {\n                if (classDecl.extendsList &&\n                    classDecl.extendsList.members.length &&\n                    classDecl.extendsList.members[0].type &&\n                    classDecl.extendsList.members[0].type.symbol.type.isClass()) {\n                    cloneParentConstructGroupForChildType(classDecl.type, classDecl.extendsList.members[0].type.symbol.type);\n                }\n            }\n\n            this.thisType = prevThisType;\n            this.thisClassNode = svClassNode;\n            this.scope = prevScope;\n            return classDecl;\n        }\n\n        public typeCheckOverloadSignatures(type: Type, ast: AST) {\n            if (type.call) {\n                type.call.typeCheck(this.checker, ast, type.construct != null);\n            }\n            if (type.construct) {\n                type.construct.typeCheck(this.checker, ast, false);\n            }\n            if (type.index) {\n                type.index.typeCheck(this.checker, ast, false);\n            }\n        }\n\n        public typeCheckInterface(interfaceDecl: InterfaceDeclaration): InterfaceDeclaration {\n            // overloads will be typechecked inline by the members\n            //this.typeCheckOverloadSignatures(interfaceDecl.type, interfaceDecl);\n            this.typeCheckBases(interfaceDecl.type);\n            this.typeCheckBaseListPrivacy(interfaceDecl.extendsList, interfaceDecl.type.symbol, true);\n            this.typeCheck(interfaceDecl.members);\n            this.checkBaseTypeMemberInheritance(interfaceDecl.type, interfaceDecl);\n\n            // propagate base type signatures\n            if (interfaceDecl.extendsList) {\n                for (var i = 0; i < interfaceDecl.extendsList.members.length; i++) {\n                    if (interfaceDecl.extendsList.members[i].type.call) {\n                        if (interfaceDecl.type.call) {\n                            interfaceDecl.type.call.signatures = interfaceDecl.type.call.signatures.concat(interfaceDecl.extendsList.members[i].type.call.signatures);\n                        }\n                        else {\n                            interfaceDecl.type.call = interfaceDecl.extendsList.members[i].type.call;\n                        }\n                    }\n                    if (interfaceDecl.extendsList.members[i].type.construct) {\n                        if (interfaceDecl.type.construct) {\n                            interfaceDecl.type.construct.signatures = interfaceDecl.type.construct.signatures.concat(interfaceDecl.extendsList.members[i].type.construct.signatures);\n                        }\n                        else {\n                            interfaceDecl.type.construct = interfaceDecl.extendsList.members[i].type.construct;\n                        }\n                    }\n                    if (interfaceDecl.extendsList.members[i].type.index) {\n                        if (interfaceDecl.type.index) {\n                            interfaceDecl.type.index.signatures = interfaceDecl.type.index.signatures.concat(interfaceDecl.extendsList.members[i].type.index.signatures);\n                        }\n                        else {\n                            interfaceDecl.type.index = interfaceDecl.extendsList.members[i].type.index;\n                        }\n                    }\n                }\n            }\n\n            return interfaceDecl;\n        }\n\n        public typeCheckImportDecl(importDecl: ImportDeclaration) {\n            var mod: ModuleType = <ModuleType>importDecl.alias.type;\n            var sym: TypeSymbol = null;\n            var prevInImportTC = this.inImportTypeCheck;\n            this.inImportTypeCheck = true;\n\n            this.typeCheck(importDecl.alias);\n            mod = <ModuleType>importDecl.alias.type;\n\n            if (mod == null) {\n                this.checker.errorReporter.simpleError(importDecl.alias, "Could not resolve module alias \'" + importDecl.id.actualText + "\'");\n                mod = <ModuleType>this.checker.anyType;\n                (<TypeSymbol>importDecl.id.sym).type = mod;\n            }\n\n            importDecl.id.type = mod;';
var v27135 = v27136 + '\n            sym = mod.symbol;\n\n            if (!mod.isModuleType()) {\n                this.checker.errorReporter.simpleError(importDecl.alias, "A module cannot be aliased to a non-module type");\n            }\n            else {\n                sym.type = mod;\n                \n                // Add the imported module to the AMD dependency list\n                if (this.checker.typeFlow.currentScript && \n                    this.checker.typeFlow.currentScript.topLevelMod && \n                    this.checker.typeFlow.currentScript.topLevelMod.mod) \n                {\n                    this.checker.typeFlow.currentScript.topLevelMod.mod.importedModules.push(importDecl);\n                }\n\n                (<TypeSymbol>importDecl.id.sym).type = mod;\n\n                if (mod.symbol && mod.symbol.declAST) {\n                    (<ModuleDeclaration>mod.symbol.declAST).modFlags &= ~ModuleFlags.ShouldEmitModuleDecl;\n                }\n\n                //importDecl.id.sym = sym;\n                // REVIEW: Uncomment when you can toggle module codegen targets from the language service\n                //else if (typeFlow.checker.currentModDecl == null && \n                //            hasFlag((<ModuleDecl>sym.declAST).modFlags,ModuleFlags.IsDynamic) &&\n                //            moduleGenTarget == ModuleGenTarget.Asynchronous) \n                //{\n                //    typeFlow.checker.errorReporter.simpleError(alias, "In AMD codegen mode, dynamic modules may not be referenced from global scope.  (Wrap the file in a module declaration.)");\n                //}\n            }\n            this.inImportTypeCheck = prevInImportTC;\n            return importDecl;\n        }\n\n        public typeCheckModule(moduleDecl: ModuleDeclaration): ModuleDeclaration {\n\n            // In some really nasty cases of error recovery, we may not have a type\n            if (!moduleDecl.mod) {\n                return moduleDecl;\n            }\n\n            if (this.currentScript) {\n                this.currentScript.requiresGlobal = true;\n            }\n            var mod = moduleDecl.mod;\n            var sym: TypeSymbol = null;\n\n            var prevScope = this.scope;\n            var prevThisType = this.thisType;\n            var prevCurrentModDecl = this.checker.currentModDecl;\n            this.checker.currentModDecl = moduleDecl;\n\n            this.thisType = null;\n            this.scope = mod.containedScope;\n            this.typeCheck(moduleDecl.members);\n            sym = mod.symbol;\n\n            this.checker.currentModDecl = prevCurrentModDecl;\n            this.thisType = prevThisType;\n            this.scope = prevScope;\n\n            moduleDecl.type = mod;\n\n            if (sym) {\n                sym.typeCheckStatus = TypeCheckStatus.Finished;\n            }\n            return moduleDecl;\n        }\n\n        public typeCheckFor(forStmt: ForStatement): ForStatement {\n            forStmt.init = this.typeCheck(forStmt.init);\n            this.nestingLevel++;\n            forStmt.cond = this.typeCheck(forStmt.cond);\n            this.typeCheckCondExpr(forStmt.cond);\n            forStmt.incr = this.typeCheck(forStmt.incr);\n            this.nestingLevel--;\n            forStmt.body = this.typeCheck(forStmt.body);\n            this.typeCheckCompoundStmtBlock(forStmt.body, "for statement");\n            forStmt.type = this.voidType;\n            return forStmt;\n        }\n\n        public typeCheckWith(withStmt: WithStatement): WithStatement {\n            if (this.checker.errorsOnWith) {\n                this.checker.errorReporter.simpleError(withStmt.expr, "All symbols within a \'with\' block will be typed as \'any\'");\n            }\n            withStmt.expr = this.typeCheck(withStmt.expr);\n            this.checker.inWith = true;\n            withStmt.body = this.typeCheck(withStmt.body);\n            this.typeCheckCompoundStmtBlock(withStmt.body, "with statement");\n            this.checker.inWith = false;\n            return withStmt;\n        }\n\n        public typeCheckForIn(forInStmt: ForInStatement): ForInStatement {\n            forInStmt.obj = this.typeCheck(forInStmt.obj);\n            forInStmt.lval = this.cast(this.typeCheck(forInStmt.lval), this.checker.stringType);\n            if (forInStmt.lval.nodeType == NodeType.VarDecl) {\n\n                var varDecl = <VarDecl>forInStmt.lval;\n                if (varDecl.typeExpr) {\n                    this.checker.errorReporter.simpleError(varDecl, "Variable declarations for for/in expressions may not contain a type annotation");\n                }\n\n                if (varDecl.sym) {\n                    varDecl.sym.setType(this.checker.stringType);\n                }\n            }\n            forInStmt.body = this.typeCheck(forInStmt.body);\n            this.typeCheckCompoundStmtBlock(forInStmt.body, "for in statement");\n            return forInStmt;\n        }\n\n        public typeCheckWhile(whileStmt: WhileStatement): WhileStatement {\n            whileStmt.cond = this.typeCheck(whileStmt.cond);\n            this.typeCheckCondE';
var v27134 = v27135 + 'xpr(whileStmt.cond);\n            whileStmt.body = this.typeCheck(whileStmt.body);\n            this.typeCheckCompoundStmtBlock(whileStmt.body, "while statement");\n            whileStmt.type = this.voidType;\n            return whileStmt;\n        }\n\n        public typeCheckDoWhile(doWhileStmt: DoWhileStatement): DoWhileStatement {\n            doWhileStmt.cond = this.typeCheck(doWhileStmt.cond);\n            this.typeCheckCondExpr(doWhileStmt.cond);\n            doWhileStmt.body = this.typeCheck(doWhileStmt.body);\n            this.typeCheckCompoundStmtBlock(doWhileStmt.body, "do while statement");\n            doWhileStmt.type = this.voidType;\n            return doWhileStmt;\n        }\n\n        public typeCheckCondExpr(cond: AST) {\n            if (this.checker.styleSettings.assignmentInCond) {\n                if ((cond !== null) &&\n                    (cond.nodeType >= NodeType.Asg) &&\n                    (cond.nodeType <= NodeType.LastAsg)) {\n                    this.checker.errorReporter.simpleError(cond, "top-level assignment statement in conditional expression");\n                }\n            }\n        }\n\n        public typeCheckCompoundStmtBlock(stmts: AST, stmtType: string) {\n            if (this.checker.styleSettings.blockInCompoundStmt && stmts) {\n                if (stmts.nodeType != NodeType.Block) {\n                    this.checker.errorReporter.styleError(stmts, stmtType + " requires a block");\n                }\n            }\n        }\n        public typeCheckIf(ifStmt: IfStatement): IfStatement {\n            ifStmt.cond = this.typeCheck(ifStmt.cond);\n            this.typeCheckCondExpr(ifStmt.cond);\n            ifStmt.thenBod = this.typeCheck(ifStmt.thenBod);\n            ifStmt.elseBod = this.typeCheck(ifStmt.elseBod);\n            this.typeCheckCompoundStmtBlock(ifStmt.thenBod, "if statement");\n            this.typeCheckCompoundStmtBlock(ifStmt.elseBod, "if statement");\n            ifStmt.type = this.voidType;\n            return ifStmt;\n        }\n\n        public typeFromAccessorFuncDecl(funcDecl: FuncDecl) {\n            if (!funcDecl.isAccessor()) {\n                return null;\n            }\n\n            if (hasFlag(funcDecl.fncFlags, FncFlags.GetAccessor)) {\n                return funcDecl.type.call.signatures[0].returnType.type;\n            }\n            else {\n                return funcDecl.type.call.signatures[0].parameters[0].getType();\n            }\n        }\n\n        public typeCheckObjectLit(objectLit: UnaryExpression): void {\n\n            var resultType = new Type();\n            resultType.symbol = new TypeSymbol(this.checker.anon, objectLit.minChar,\n                                             objectLit.limChar - objectLit.minChar,\n                                             this.checker.locationInfo.unitIndex,\n                                             resultType);\n\n            resultType.members = new ScopedMembers(new DualStringHashTable(new StringHashTable(), new StringHashTable()));\n            resultType.memberScope = new SymbolTableScope(resultType.members, null, null, null, null);\n\n            var aggScope = new SymbolAggregateScope(resultType.symbol);\n            aggScope.addParentScope(resultType.memberScope);\n            aggScope.addParentScope(this.scope);\n            resultType.containedScope = aggScope;\n            var memberDecls = <ASTList>objectLit.operand;\n            var prevThisType = this.thisType;\n            var acceptTargetType = false;\n            var targetType: Type = null;\n\n            if (this.checker.hasTargetType()) {\n                targetType = this.checker.getTargetTypeContext().contextualType;\n\n                if (targetType && targetType.symbol && !this.checker.typeStatusIsFinished(targetType.symbol.typeCheckStatus)) {\n                    if (targetType.symbol.declAST) {\n                        this.typeCheck(targetType.symbol.declAST);\n                    }\n                }\n                acceptTargetType = true;\n            }\n\n            if (memberDecls) {\n                for (var i = 0, len = memberDecls.members.length; i < len; i++) {\n\n                    var binex = <BinaryExpression>memberDecls.members[i];\n\n                    var id = binex.operand1;\n                    var text: string;\n                    var targetMember: Symbol = null;\n                    var fieldSymbol: FieldSymbol = null;\n\n                    if (id.nodeType == NodeType.Name) {\n                        text = (<Identifier>id).text;\n                    }\n                    else if (id.nodeType == NodeType.QString) {\n                        // TODO: set text to unescaped string\n                        var idText = (<StringLiteral>id).text;\n                        text = idText.substring(1, idText.length - 1);\n                    }\n                    else {\n                        this.checker.errorReporter.simpleError(objectLit,\n                                                          "malformed object literal");\n                        resultType = this.anyType;\n       ';
var v27133 = v27134 + "                 break;\n                    }\n\n                    if (acceptTargetType && targetType.memberScope) {\n                        targetMember = targetType.memberScope.find(text, false, false);\n                    }\n\n                    // before typechecking an accessor function member, we need to initialize its accessor symbol\n                    if (binex.operand2.nodeType == NodeType.FuncDecl && (<FuncDecl>binex.operand2).isAccessor()) {\n\n                        var funcDecl = <FuncDecl>binex.operand2;\n                        var accessorSym: FieldSymbol = resultType.members.publicMembers.lookup(text);\n\n                        accessorSym = this.checker.createAccessorSymbol(funcDecl, accessorSym, resultType, true, false, resultType.memberScope, null);\n                        funcDecl.accessorSymbol = accessorSym;\n                        fieldSymbol = accessorSym;\n                        if (id.nodeType == NodeType.Name) {\n                            (<Identifier>id).sym = accessorSym;\n                        }\n                    }\n\n                    this.checker.typeCheckWithContextualType(acceptTargetType && targetMember ? targetMember.getType() : null, false, acceptTargetType, binex.operand2);\n\n                    if (acceptTargetType && targetMember) {\n                        // Note that we accept 'any' in place of a valid subtype                     \n                        if ((binex.operand2.type == this.anyType || this.checker.sourceIsAssignableToTarget(binex.operand2.type, targetMember.getType())) ||\n                            (binex.operand2.nodeType == NodeType.FuncDecl &&\n                            (<FuncDecl>binex.operand2).isAccessor() &&\n                                this.typeFromAccessorFuncDecl(<FuncDecl>binex.operand2) == targetMember.getType())) {\n                                    // set the field type to the proper contextual type\n                                    // this is especially important in the 'any' case, so that\n                                    // fields typed to 'any' aren't accepted for contextual typing,\n                                    // but never properly set to the target type\n                            binex.operand1.type = targetMember.getType();\n                        }\n                    }\n                    else {\n                        // here we sub in 'any' for 'undefined' to account for field initialization to\n                        // 'undefined'  \n                        binex.operand2.type = binex.operand2.type == this.checker.undefinedType ? this.anyType : binex.operand2.type;\n                    }\n\n                    // the field symbol hasn't been set by a getter or setter\n                    if (fieldSymbol == null) {\n                        var memberType = binex.operand2.type;\n                        var field = new ValueLocation();\n                        fieldSymbol =\n                            new FieldSymbol(text, id.minChar,\n                                            this.checker.locationInfo.unitIndex,\n                                            true, field);\n                        fieldSymbol.flags |= SymbolFlags.Property;\n                        field.symbol = fieldSymbol;\n                        fieldSymbol.typeCheckStatus = this.checker.getTypeCheckFinishedStatus();\n                        field.typeLink = new TypeLink();\n                        field.typeLink.type = memberType;\n                        resultType.members.publicMembers.add(text, fieldSymbol);\n                    }\n                    fieldSymbol.isObjectLitField = true;\n                }\n            }\n\n            this.thisType = prevThisType;\n            objectLit.type = resultType;\n            if (targetType) {\n                objectLit.targetType = targetType;\n            }\n        }\n\n        public typeCheckArrayLit(arrayLit: UnaryExpression): void {\n            var elements = <ASTList>arrayLit.operand;\n            var elementType = this.anyType;\n            var targetElementType: Type = null;\n            var comparisonInfo = new TypeComparisonInfo();\n            comparisonInfo.onlyCaptureFirstError = true;\n\n            // if the target type is an array type, extract the element type\n            if (this.checker.hasTargetType()) {\n                var targetType = this.checker.getTargetTypeContext().contextualType;\n                if (targetType.elementType) {\n                    targetElementType = targetType.elementType;\n                }\n            }\n\n            if (elements) {\n\n                var prevInArrayElemTypeCheck = this.inArrayElementTypeCheck;\n\n                this.inArrayElementTypeCheck = true;\n                this.checker.typeCheckWithContextualType(targetElementType, this.checker.inProvisionalTypecheckMode(), targetElementType != null, elements);\n                this.inArrayElementTypeCheck = prevInArrayElemTypeCheck;\n\n                elementType = elements.members[0].type;\n\n                var collection: ITypeCo";
var v27132 = v27133 + 'llection = {\n                    getLength: () => { return elements.members.length; },\n                    setTypeAtIndex: (index: number, type: Type) => { elements.members[index].type = type; },\n                    getTypeAtIndex: (index: number) => { return elements.members[index].type; }\n                }\n\n                elementType = this.checker.findBestCommonType(elementType, targetElementType, collection, false, comparisonInfo);\n\n                // if the array type is the undefined type, we should widen it to any\n                // if it\'s of the null type, only widen it if it\'s not in a nested array element, so as not to \n                // short-circuit any checks for the best common type\n                if (elementType == this.checker.undefinedType || (!prevInArrayElemTypeCheck && elementType == this.nullType)) {\n                    elementType = this.anyType;\n                }\n            }\n            if (!elementType) {\n                var emsg = "Incompatible types in array literal expression";\n                if (!comparisonInfo.message) {\n                    this.checker.errorReporter.simpleError(arrayLit, emsg);\n                }\n                else {\n                    this.checker.errorReporter.simpleError(arrayLit, emsg + ": " + comparisonInfo.message);\n                }\n                elementType = this.anyType;\n            }\n            else if (targetElementType) {\n                // for the case of zero-length \'any\' arrays, we still want to set the contextual type, if\n                // need be\n                if (this.checker.sourceIsAssignableToTarget(elementType, targetElementType)) {\n                    elementType = targetElementType;\n                }\n            }\n\n            arrayLit.type = this.checker.makeArrayType(elementType);\n\n        }\n\n        public checkForVoidConstructor(type: Type, ast: AST) {\n            if (type &&\n                type.construct &&\n                type.construct.signatures.length > 0) {\n\n                for (var i = 0; i < type.construct.signatures.length; i++) {\n                    if (type.construct.signatures[i].returnType.type == this.checker.voidType) {\n                        this.checker.errorReporter.simpleError(ast, "Constructors may not have a return type of \'void\'");\n                        break;\n                    }\n                }\n            }\n        }\n\n        // REVIEW: the code below could set the signature type of the function to the current return\n        // type, which would have a benefit of reducing the risk of a recursive typecheck scenario, but is\n        // is technically wrong - mergeOrdered will only work properly if the best common supertype\n        // comes before any sibling types.  This would mean that if a function, "color()", returned\n        // three types (in order) - "Red", "Blue", and "IColor", an "Incompatible return type" error \n        // would be triggered.  However, if "color()" returned (in order) "Red", "IColor" and "Blue"\n        // no error would be triggered, and the return type of the function would be "IColor"\n        public typeCheckReturn(returnStmt: ReturnStatement): ReturnStatement {\n\n            if (this.thisFnc) {\n                var targetType: Type = null;\n\n                // determine the target type\n                if (this.checker.hasTargetType()) {\n                    var tcContext = this.checker.getTargetTypeContext();\n                    var accessorType = tcContext.targetAccessorType;\n\n                    if (accessorType) {\n                        targetType = accessorType;\n                    }\n                    else {\n                        var targetSig = this.checker.getTargetTypeContext().targetSig;\n                        if (targetSig && targetSig.returnType.type != this.voidType) {\n                            targetType = targetSig.returnType.type;\n                        }\n                    }\n                }\n\n                if (returnStmt.returnExpression) {\n                    this.thisFnc.fncFlags |= FncFlags.HasReturnExpression;\n\n                    if (targetType == null && this.thisFnc.returnTypeAnnotation && this.thisFnc.returnTypeAnnotation.type && this.thisFnc.returnTypeAnnotation.type != this.voidType) {\n                        targetType = this.thisFnc.returnTypeAnnotation.type;\n                    }\n\n                    this.checker.typeCheckWithContextualType(targetType, this.checker.inProvisionalTypecheckMode(), targetType != null, returnStmt.returnExpression);\n\n                    var expectedReturnType: Type =\n                        (this.thisFnc.returnTypeAnnotation && this.thisFnc.returnTypeAnnotation.type) ?\n                            this.thisFnc.returnTypeAnnotation.type :\n                            targetType;\n                    if (expectedReturnType) {\n                        if (expectedReturnType == this.voidType && returnStmt.returnExpression.type != this.voidType) {\n                            this.checker.errorReporter.simp';
var v27131 = v27132 + 'leError(returnStmt,\n                                                              "Return with value expression in void function");\n\n                            // even though we\'ve raised an error, use the more specific type\n                            returnStmt.type = returnStmt.returnExpression.type;\n                        }\n                        else {\n                            returnStmt.returnExpression = this.cast(returnStmt.returnExpression, expectedReturnType);\n                            returnStmt.type = expectedReturnType;\n                        }\n                    }\n                    else {\n                        if (targetType) {\n                            if (returnStmt.returnExpression.type != this.voidType) {\n                                returnStmt.returnExpression = this.cast(returnStmt.returnExpression, targetType);\n                            }\n                            else {\n                                returnStmt.returnExpression.type = targetType;\n                            }\n                        }\n                        returnStmt.type = returnStmt.returnExpression.type;\n                    }\n                    this.thisFnc.returnStatementsWithExpressions[this.thisFnc.returnStatementsWithExpressions.length] = returnStmt;\n                }\n                else {\n                    returnStmt.type = targetType == null ? this.checker.voidType : targetType; //((this.thisFnc.returnTypeAnnotation && this.thisFnc.returnTypeAnnotation.type) ? this.thisFnc.returnTypeAnnotation.type : this.checker.voidType) : targetType;\n                }\n            }\n\n            return returnStmt;\n        }\n\n        public typeCheckInstOf(ast: AST): AST {\n            var binex = <BinaryExpression>ast;\n            binex.operand1 = this.typeCheck(binex.operand1);\n            binex.operand2 = this.typeCheck(binex.operand2);\n\n            if (!((binex.operand1.type == this.checker.anyType || this.checker.sourceIsSubtypeOfTarget(binex.operand1.type, this.objectInterfaceType)) &&\n                    (binex.operand2.type == this.anyType || this.checker.sourceIsSubtypeOfTarget(binex.operand2.type, this.functionInterfaceType)))) {\n                this.checker.errorReporter.simpleError(ast, "The instanceof operator requires the left operand to be of type Any or an object type, and the right operand to be of type Any or a subtype of the Function interface type");\n            }\n            binex.type = this.booleanType;\n            return binex;\n        }\n\n        public typeCheckCommaOperator(ast: AST): AST {\n            var binex = <BinaryExpression>ast;\n            binex.operand1 = this.typeCheck(binex.operand1);\n            binex.operand2 = this.typeCheck(binex.operand2);\n            binex.type = binex.operand2.type;\n            return binex;\n        }\n\n        public typeCheckLogOr(binex: BinaryExpression): BinaryExpression {\n            binex.operand1 = this.typeCheck(binex.operand1);\n            binex.operand2 = this.typeCheck(binex.operand2);\n            var leftType = binex.operand1.type;\n            var rightType = binex.operand2.type;\n\n            if (leftType == this.checker.anyType || rightType == this.checker.anyType) {\n                binex.type = this.checker.anyType;\n            }\n            else if (leftType == this.checker.booleanType) {\n                if (rightType == this.checker.booleanType) {\n                    binex.type = this.checker.booleanType;\n                }\n                else {\n                    binex.type = this.checker.anyType;\n                }\n            }\n            else if (leftType == this.checker.numberType) {\n                if (rightType == this.checker.numberType) {\n                    binex.type = this.checker.numberType;\n                }\n                else {\n                    binex.type = this.checker.anyType;\n                }\n            }\n            else if (leftType == this.checker.stringType) {\n                if (rightType == this.checker.stringType) {\n                    binex.type = this.checker.stringType;\n                }\n                else {\n                    binex.type = this.checker.anyType;\n                }\n            }\n            else {\n                if (this.checker.sourceIsSubtypeOfTarget(leftType, rightType)) {\n                    binex.type = rightType;\n                }\n                else if (this.checker.sourceIsSubtypeOfTarget(rightType, leftType)) {\n                    binex.type = leftType;\n                }\n                else {\n                    binex.type = this.checker.anyType;\n                }\n            }\n            return binex;\n        }\n\n        public typeCheckLogAnd(binex: BinaryExpression): BinaryExpression {\n            binex.operand1 = this.typeCheck(binex.operand1);\n            binex.operand2 = this.typeCheck(binex.operand2);\n            binex.type = binex.operand2.type;\n            return binex;\n        }\n\n        public tryAddCandidates(signature: Signature, actuals: Type[]';
var v27130 = v27131 + ", exactCandidates: Signature[], conversionCandidates: Signature[], comparisonInfo: TypeComparisonInfo): void {\n            var lowerBound = signature.nonOptionalParameterCount; // required parameters\n            var upperBound = signature.parameters.length; // required and optional parameters\n            var formalLen = lowerBound;\n            var acceptable = false;\n\n            if ((actuals.length >= lowerBound) && (signature.hasVariableArgList || actuals.length <= upperBound)) {\n                formalLen = (signature.hasVariableArgList ? signature.parameters.length : actuals.length);\n                acceptable = true;\n            }\n\n            var repeatType: Type = null;\n\n            if (acceptable || signature.hasVariableArgList) {\n                // assumed structure here is checked when signature is formed\n                if (signature.hasVariableArgList) {\n                    formalLen -= 1;\n                    repeatType = (<ParameterSymbol>signature.parameters[formalLen]).parameter.typeLink.type;\n                    repeatType = repeatType.elementType;\n                    acceptable = actuals.length >= formalLen;\n                }\n                var len = actuals.length;\n\n                var exact = acceptable;\n                var convert = acceptable;\n                for (var i = 0; i < len; i++) {\n                    var typeA: Type;\n                    if (i < formalLen) {\n                        typeA =\n                            (<ParameterSymbol>signature.parameters[i]).parameter.typeLink.type;\n                    }\n                    else {\n                        typeA = repeatType;\n                    }\n\n                    var typeB = actuals[i];\n                    if (!typeA || !typeB || !(this.checker.typesAreIdentical(typeA, typeB))) {\n                        exact = false;\n                    }\n                    // is the argument assignable to the parameter?\n                    if (!this.checker.sourceIsAssignableToTarget(typeB, typeA, comparisonInfo)) {\n                        convert = false;\n                    }\n                    if (!(exact || convert)) {\n                        break;\n                    }\n                }\n                if (exact) {\n                    exactCandidates[exactCandidates.length] = signature;\n                }\n                else if (convert && (exactCandidates.length == 0)) {\n                    conversionCandidates[conversionCandidates.length] = signature;\n                }\n\n            }\n        }\n\n        public resolveOverload(application: AST, group: SignatureGroup): Signature {\n            var rd = this.resolutionDataCache.getResolutionData();\n            var actuals = rd.actuals;\n            var exactCandidates = rd.exactCandidates;\n            var conversionCandidates = rd.conversionCandidates;\n            var candidate: Signature = null;\n            var hasOverloads = group.signatures.length > 1;\n            var comparisonInfo = new TypeComparisonInfo();\n            var args: ASTList = null;\n            var target: AST = null;\n\n            if (application.nodeType == NodeType.Call || application.nodeType == NodeType.New) {\n                var callEx = <CallExpression>application;\n                args = callEx.arguments;\n                target = callEx.target;\n                if (callEx.arguments) {\n                    var len = callEx.arguments.members.length;\n                    for (var i = 0; i < len; i++) {\n                        actuals[i] = callEx.arguments.members[i].type;\n                    }\n                }\n            }\n            else if (application.nodeType == NodeType.Index) {\n                var binExp = <BinaryExpression>application;\n                target = binExp.operand1;\n                args = new ASTList();\n                args.members[0] = binExp.operand2;\n                actuals[0] = binExp.operand2.type;\n            }\n\n            for (var j = 0, groupLen = group.signatures.length; j < groupLen; j++) {\n                var signature = group.signatures[j];\n                if (hasOverloads && signature == group.definitionSignature && !this.checker.canCallDefinitionSignature) {\n                    continue;\n                }\n                if (!signature.returnType.type && signature.declAST &&\n                    (signature.typeCheckStatus != TypeCheckStatus.Finished)) {\n                    this.typeCheckFunction(signature.declAST);\n                }\n                this.tryAddCandidates(signature, actuals, exactCandidates, conversionCandidates, comparisonInfo);\n            }\n            if (exactCandidates.length == 0) {\n\n                var applicableCandidates = this.checker.getApplicableSignatures(conversionCandidates, args, comparisonInfo);\n                if (applicableCandidates.length > 0) {\n                    var candidateInfo = this.checker.findMostApplicableSignature(applicableCandidates, args);\n                    if (candidateInfo.ambiguous) {\n                        this.checker.errorR";
var v27129 = v27130 + 'eporter.simpleError(target, "Ambiguous call expression - could not choose overload");\n                    }\n                    candidate = candidateInfo.sig;\n                }\n                else {\n                    var emsg = "Supplied parameters do not match any signature of call target";\n                    if (comparisonInfo.message) {\n                        this.checker.errorReporter.simpleError(target, emsg + ":\\n\\t" + comparisonInfo.message);\n                    }\n                    else {\n                        this.checker.errorReporter.simpleError(target, emsg);\n                    }\n                }\n            }\n            else {\n                if (exactCandidates.length > 1) {\n                    var applicableSigs: ApplicableSignature[] = [];\n                    for (var i = 0; i < exactCandidates.length; i++) {\n                        applicableSigs[i] = { signature: exactCandidates[i], hadProvisionalErrors: false };\n                    }\n                    var candidateInfo = this.checker.findMostApplicableSignature(applicableSigs, args);\n                    if (candidateInfo.ambiguous) {\n                        this.checker.errorReporter.simpleError(target, "Ambiguous call expression - could not choose overload");\n                    }\n                    candidate = candidateInfo.sig;\n                }\n                else {\n                    candidate = exactCandidates[0];\n                }\n            }\n\n            this.resolutionDataCache.returnResolutionData(rd);\n            return candidate;\n        }\n\n        public typeCheckNew(ast: AST): AST {\n            var callEx = <CallExpression>ast;\n\n            callEx.target = this.typeCheck(callEx.target);\n            var target = callEx.target;\n            if (target.type.construct || target.type.call) {\n                this.preTypeCheckCallArgs(callEx.arguments);\n            }\n            else {\n                callEx.arguments = <ASTList>this.typeCheck(callEx.arguments);\n            }\n\n            if (target.type == this.anyType) {\n                callEx.type = this.anyType;\n                callEx.arguments = <ASTList>this.typeCheck(callEx.arguments);\n            }\n            else {\n                if (target.type.construct) {\n                    var signature = this.resolveOverload(callEx, target.type.construct);\n                    if (signature == null) {\n                        callEx.type = this.anyType;\n                    }\n                    else if (signature.returnType.type == this.voidType) {\n                        callEx.type = this.anyType;\n                        callEx.signature = signature;\n                    }\n                    else {\n                        callEx.type = signature.returnType.type;\n                        callEx.signature = signature;\n                    }\n                }\n                else if (target.type.call) {\n                    var signature = this.resolveOverload(callEx, target.type.call);\n                    if (signature == null) {\n                        callEx.type = this.anyType;\n                    }\n                    else if ((signature.returnType.type == this.voidType) || (signature.returnType.type == this.anyType)) {\n                        callEx.type = this.anyType;\n                        callEx.signature = signature;\n                    }\n                    else {\n                        this.checker.errorReporter.simpleError(callEx.target,\n                           "new expression only valid on constructors");\n                    }\n                }\n                else if (target.type.elementType) {\n                    callEx.type = target.type;\n                }\n                else {\n                    this.checker.errorReporter.invalidCall(callEx, callEx.nodeType, this.scope);\n                    callEx.type = this.anyType;\n                }\n            }\n\n            this.postTypeCheckCallArgs(callEx);\n\n            return callEx;\n        }\n\n        // Typecheck all args that cannot be affected by contextual typing of overloads\n        public preTypeCheckCallArgs(args: ASTList) {\n\n            if (!args) {\n                return;\n            }\n\n            for (var i = 0; i < args.members.length; i++) {\n                switch (args.members[i].nodeType) {\n                    case NodeType.FuncDecl:\n                    case NodeType.ObjectLit:\n                    case NodeType.ArrayLit:\n                        continue;\n                    default:\n                        this.typeCheck(args.members[i]);\n                        break;\n                }\n            }\n        }\n\n        public postTypeCheckCallArgs(callEx: CallExpression) {\n\n            var acceptedTargetType = false;\n            var i = 0;\n\n            if (callEx.target &&\n                callEx.target.type &&\n                callEx.signature &&\n                callEx.arguments) {\n                var sig = callEx.signature;\n\n                if (sig && callEx.arguments.members.length >= si';
var v27128 = v27129 + 'g.nonOptionalParameterCount) {\n                    acceptedTargetType = true;\n                    var targetType: Type = null;\n                    var nonVarArgFormalParamLength = sig.hasVariableArgList ? sig.parameters.length - 1 : sig.parameters.length;\n                    var nonVarArgActualParamLength = callEx.arguments.members.length < nonVarArgFormalParamLength ? callEx.arguments.members.length : nonVarArgFormalParamLength\n\n                    for (i = 0; i < nonVarArgActualParamLength; i++) {\n                        targetType = sig.parameters[i].getType();\n                        switch (callEx.arguments.members[i].nodeType) {\n                            case NodeType.FuncDecl:\n                            case NodeType.ObjectLit:\n                            case NodeType.ArrayLit:\n                                this.checker.typeCheckWithContextualType(targetType, this.checker.inProvisionalTypecheckMode(), !sig.parameters[i].declAST.isParenthesized, callEx.arguments.members[i]);\n                                break;\n                        }\n                    }\n\n                    if (sig.hasVariableArgList) {\n                        var varArgParamIndex = sig.nonOptionalParameterCount - 1;\n                        targetType = sig.parameters[varArgParamIndex].getType();\n                        if (targetType) {\n                            targetType = targetType.elementType;\n                        }\n                        var isParenthesized = !sig.parameters[varArgParamIndex].declAST.isParenthesized;\n                        for (i = nonVarArgActualParamLength; i < callEx.arguments.members.length; i++) {\n                            switch (callEx.arguments.members[i].nodeType) {\n                                case NodeType.FuncDecl:\n                                case NodeType.ObjectLit:\n                                case NodeType.ArrayLit:\n                                    this.checker.typeCheckWithContextualType(targetType, this.checker.inProvisionalTypecheckMode(), isParenthesized, callEx.arguments.members[i]);\n                                    break;\n                            }\n                        }\n                    }\n                }\n            }\n\n            if (!acceptedTargetType && callEx.arguments) {\n                this.checker.killCurrentContextualType();\n\n                for (i = 0; i < callEx.arguments.members.length; i++) {\n                    switch (callEx.arguments.members[i].nodeType) {\n                        case NodeType.FuncDecl:\n                        case NodeType.ObjectLit:\n                        case NodeType.ArrayLit:\n                            this.typeCheck(callEx.arguments.members[i]);\n                            break;\n                        default:\n                            continue;\n                    }\n                }\n            }\n        }\n\n        public typeCheckCall(ast: AST): AST {\n            var callEx = <CallExpression>ast;\n            if (this.checker.styleSettings.newMustBeUsed && (ast.nodeType == NodeType.New)) {\n                if (hasFlag(ast.flags, ASTFlags.IsStatement)) {\n                    this.checker.errorReporter.styleError(ast, "use of new expression as a statement");\n                }\n            }\n            else if ((!this.checker.styleSettings.evalOK) && (ast.nodeType == NodeType.Call)) {\n                if ((callEx.target.nodeType == NodeType.Name) && ((<Identifier>callEx.target).text == "eval")) {\n                    this.checker.errorReporter.styleError(callEx, "eval not permitted");\n                }\n            }\n\n            if (callEx.target.nodeType == NodeType.FuncDecl) {\n                (<FuncDecl>callEx.target).isInlineCallLiteral = true;\n            }\n\n            var prevInSuperCall = this.inSuperCall;\n\n            if (callEx.target.nodeType == NodeType.Super) {\n                this.inSuperCall = true;\n            }\n\n            callEx.target = this.typeCheck(callEx.target);\n            this.preTypeCheckCallArgs(callEx.arguments);\n\n            var target = callEx.target;\n\n            if ((target.type == null) || (target.type == this.anyType) || (this.functionInterfaceType && target.type == this.functionInterfaceType)) {\n                callEx.type = this.anyType;\n            }\n            else {\n                var fnType = target.type;\n                if (fnType.call) {\n                    var signature = this.resolveOverload(callEx, fnType.call);\n                    if (signature == null) {\n                        callEx.type = this.anyType;\n                    }\n                    else {\n                        callEx.type = signature.returnType.type;\n                        callEx.signature = signature;\n                    }\n                }\n                else {\n                    // track calls to class base class\n                    if (callEx.target.nodeType == NodeType.Super &&\n                        this.thisFnc &&\n                        this.thisFnc.isConstructor &&\n        ';
var v27127 = v27128 + '                hasFlag(this.thisFnc.fncFlags, FncFlags.ClassMethod)) {\n\n                            // Need to use the class type for the construct signature, not the instance type\n                        var signature = fnType.symbol.type.construct ? this.resolveOverload(callEx, fnType.symbol.type.construct) : null;\n\n                        if (signature == null) {\n                            callEx.type = this.anyType;\n                        }\n                        else {\n                            callEx.flags |= ASTFlags.ClassBaseConstructorCall;\n                            callEx.type = signature.returnType.type;\n                            callEx.signature = signature;\n                        }\n                    }\n                    else {\n                        callEx.type = this.anyType;\n                        this.checker.errorReporter.invalidCall(callEx, callEx.nodeType, this.scope);\n                    }\n                }\n            }\n            this.postTypeCheckCallArgs(callEx);\n\n            this.inSuperCall = prevInSuperCall;\n\n            return callEx;\n        }\n\n        public assignScopes(ast: AST) {\n            var script = <Script>ast;\n            this.checker.locationInfo = script.locationInfo;\n            var globalChain = new ScopeChain(this.checker.gloMod, null, this.globalScope);\n            var context = new AssignScopeContext(globalChain, this, [this.checker.currentModDecl]);\n            getAstWalkerFactory().walk(ast, preAssignScopes, postAssignScopes, null, context);\n        }\n\n        public findMemberScope(enclosingScopeContext: EnclosingScopeContext, matchFlag: ASTFlags) {\n            var enclosingScope = enclosingScopeContext.getScope();\n            var pos = enclosingScopeContext.pos - enclosingScopeContext.getScriptFragmentPosition();\n            var scriptFragment = enclosingScopeContext.getScriptFragment();\n\n            var memContext = new MemberScopeContext(this, pos, matchFlag);\n            memContext.scope = enclosingScope;\n            if (scriptFragment.nodeType == NodeType.Name) {\n                return scriptFragment.type.getMemberScope(this);\n            }\n            else {\n                getAstWalkerFactory().walk(scriptFragment, preFindMemberScope, null, null, memContext);\n                if (memContext.ast && enclosingScopeContext.enclosingClassDecl && memContext.ast.type == enclosingScopeContext.enclosingClassDecl.type.instanceType) {\n                    enclosingScopeContext.publicsOnly = false;\n                }\n                if (memContext.type) {\n                    return memContext.type.getMemberScope(this);\n                }\n                else {\n                    return null;\n                }\n            }\n        }\n\n        public findMemberScopeAt(enclosingScopeContext: EnclosingScopeContext) {\n            return this.findMemberScope(enclosingScopeContext, ASTFlags.DotLHS);\n        }\n\n        public findMemberScopeAtFullAst(enclosingScopeContext: EnclosingScopeContext) {\n            var matchFlag = ASTFlags.DotLHS;\n            var pos = enclosingScopeContext.pos;\n            var astResult: AST = null;\n\n            var preFindMemberScopeFullAst = function (ast: AST, parent: AST, walker: IAstWalker) {\n                if (isValidAstNode(ast)) {\n                    // Note: pos == ast.limChar       in case of incomplete code (e.g. "foo.")\n                    // Note: (pos - 1) == ast.limChar in case of complete code (e.g. "foo.bar")\n                    if (hasFlag(ast.flags, matchFlag) && (pos == ast.limChar || (pos - 1) == ast.limChar)) {\n                        astResult = ast;\n                        walker.options.stopWalk();\n                    }\n\n                    // Stop traversal if range does not contain position\n                    walker.options.goChildren = (ast.minChar <= pos) && (pos <= ast.limChar);\n                }\n                return ast;\n            }\n\n            var preFindMemberScopeFullAstFuzy = function (ast: AST, parent: AST, walker: IAstWalker) {\n                if (isValidAstNode(ast)) {\n                    if (hasFlag(ast.flags, matchFlag) && ((ast.minChar < pos) && (pos <= ast.limChar))) {\n                        astResult = ast;\n                    }\n\n                    // Stop traversal if range does not contain position\n                    walker.options.goChildren = (ast.minChar <= pos) && (pos <= ast.limChar);\n                }\n                return ast;\n            }\n\n            getAstWalkerFactory().walk(enclosingScopeContext.script, preFindMemberScopeFullAst);\n\n            if (astResult == null) {\n                // Perform a more "fusy" match. This is because the limChar of AST nodes is sometimes\n                // not what we expect, for example:\n                //   foo./*comment*/;\n                // In this case, limChar points to ";" instead of "." (because of the trailing comment).\n                getAstWalkerFactory().walk(enclosingScopeContext.script, preFindMemberScopeFullAstFuzy)';
var v27126 = v27127 + ";\n            }\n\n            if (astResult &&\n                enclosingScopeContext.enclosingClassDecl &&\n                astResult.type == enclosingScopeContext.enclosingClassDecl.type.instanceType) {\n                enclosingScopeContext.publicsOnly = false;\n            }\n\n            if (astResult && astResult.type) {\n                return astResult.type.getMemberScope(this);\n            }\n            else {\n                return null;\n            }\n        }\n    }\n}\n//\n// Copyright (c) Microsoft Corporation.  All rights reserved.\n// \n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n\n///<reference path='diagnostics.ts' />\n///<reference path='flags.ts' />\n///<reference path='nodeTypes.ts' />\n///<reference path='hashTable.ts' />\n///<reference path='ast.ts' />\n///<reference path='astWalker.ts' />\n///<reference path='astWalkerCallback.ts' />\n///<reference path='astPath.ts' />\n///<reference path='astLogger.ts' />\n///<reference path='binder.ts' />\n///<reference path='base64.ts' />\n///<reference path='sourceMapping.ts' />\n///<reference path='emitter.ts' />\n///<reference path='errorReporter.ts' />\n///<reference path='parser.ts' />\n///<reference path='printContext.ts' />\n///<reference path='scanner.ts' />\n///<reference path='scopeAssignment.ts' />\n///<reference path='scopeWalk.ts' />\n///<reference path='signatures.ts' />\n///<reference path='symbols.ts' />\n///<reference path='symbolScope.ts' />\n///<reference path='tokens.ts' />\n///<reference path='typeChecker.ts' />\n///<reference path='typeCollection.ts' />\n///<reference path='typeFlow.ts' />\n///<reference path='types.ts' />\n///<reference path='pathUtils.ts' />\n///<reference path='referenceResolution.ts' />\n///<reference path='precompile.ts' />\n///<reference path='incrementalParser.ts' />\n///<reference path='declarationEmitter.ts' />\n\nmodule TypeScript {\n\n    export enum UpdateUnitKind {\n        Unknown,\n        NoEdits,\n        EditsInsideSingleScope,\n    }\n\n    export class ScriptEditRange {\n        constructor (public minChar: number,\n                     public limChar: number,\n                     public delta: number) { }\n\n        static unknown(): ScriptEditRange {\n            return new ScriptEditRange(-1, -1, -1);\n        }\n\n        public isUnknown() {\n            return this.minChar === -1 && this.limChar === -1 && this.delta === -1;\n        }\n\n        public containsPosition(pos: number) {\n            return (this.minChar <= pos && pos < this.limChar)\n                || (this.minChar <= pos && pos < this.limChar + this.delta);\n        }\n\n        public toString(): string {\n            return \"editRange(minChar=\" + this.minChar + \", limChar=\" + this.limChar + \", delta=\" + this.delta + \")\";\n        }\n    }\n\n    export class UpdateUnitResult {\n\n        constructor (public kind: UpdateUnitKind, public unitIndex: number, public script1: Script, public script2: Script) { }\n\n        public scope1: AST = null;\n        public scope2: AST = null;\n        public editRange: ScriptEditRange = null;\n        public parseErrors: ErrorEntry[] = [];\n\n        static noEdits(unitIndex: number) {\n            return new UpdateUnitResult(UpdateUnitKind.NoEdits, unitIndex, null, null);\n        }\n\n        static unknownEdits(script1: Script, script2: Script, parseErrors: ErrorEntry[]) {\n            var result = new UpdateUnitResult(UpdateUnitKind.Unknown, script1.locationInfo.unitIndex, script1, script2);\n            result.parseErrors = parseErrors;\n            return result;\n        }\n\n        static singleScopeEdits(script1: Script, script2: Script, scope1: AST, scope2: AST, editRange: ScriptEditRange, parseErrors: ErrorEntry[]) {\n            var result = new UpdateUnitResult(UpdateUnitKind.EditsInsideSingleScope, script1.locationInfo.unitIndex, script1, script2);\n            result.scope1 = scope1;\n            result.scope2 = scope2;\n            result.editRange = editRange;\n            result.parseErrors = parseErrors;\n            return result;\n        }\n    }\n\n    export class ErrorEntry {\n        constructor (public unitIndex: number,\n                    public minChar: number,\n                    public limChar: number,\n                    public message: string) { }\n    }\n\n    export var defaultSettings = new CompilationSettings();\n\n    export interface EmitterIOHost {\n        // function that can even create a folder structure if needed\n        createFile(path: string, useUTF8?: bool): ITextWriter;\n\n        // function to check if file exists on the disk\n        fileExi";
var v27125 = v27126 + 'sts(path: string): bool;\n\n        // Function to check if the directory exists on the disk\n        directoryExists(path: string): bool;\n\n        // Resolves the path\n        resolvePath(path: string): string;\n    }\n\n    export class TypeScriptCompiler {\n        public parser = new Parser();\n        public typeChecker: TypeChecker;\n        public typeFlow: TypeFlow = null;\n        public scripts = new ASTList();\n        public units: LocationInfo[] = new LocationInfo[];\n        public errorReporter: ErrorReporter;\n\n        public persistentTypeState: PersistentGlobalTypeState;\n\n\n        public emitSettings: EmitOptions;\n\n        constructor (public errorOutput: ITextWriter, public logger: ILogger = new NullLogger(), public settings: CompilationSettings = defaultSettings) {\n            this.errorReporter = new ErrorReporter(this.errorOutput);\n            this.persistentTypeState = new PersistentGlobalTypeState(this.errorReporter);\n            this.errorReporter.parser = this.parser;\n            this.initTypeChecker(this.errorOutput);\n\n            this.parser.style_requireSemi = this.settings.styleSettings.requireSemi;\n            this.parser.style_funcInLoop = this.settings.styleSettings.funcInLoop;\n            this.parser.inferPropertiesFromThisAssignment = this.settings.inferPropertiesFromThisAssignment;\n            this.emitSettings = new EmitOptions(this.settings);\n            codeGenTarget = settings.codeGenTarget;\n        }\n\n        public timeFunction(funcDescription: string, func: () => any): any {\n            return TypeScript.timeFunction(this.logger, funcDescription, func);\n        }\n\n        public initTypeChecker(errorOutput: ITextWriter) {\n            // The initial "refresh" initializes the persistent type state\n            this.persistentTypeState.refreshPersistentState();\n            this.typeChecker = new TypeChecker(this.persistentTypeState);\n            this.typeChecker.errorReporter = this.errorReporter;\n\n            // REVIEW: These properties should be moved out of the typeCheck object\n            // ideally, CF should be a separate pass, independent of control flow\n            this.typeChecker.checkControlFlow = this.settings.controlFlow;\n            this.typeChecker.checkControlFlowUseDef = this.settings.controlFlowUseDef;\n            this.typeChecker.printControlFlowGraph = this.settings.printControlFlow;\n\n            this.typeChecker.errorsOnWith = this.settings.errorOnWith;\n            this.typeChecker.styleSettings = this.settings.styleSettings;\n            this.typeChecker.canCallDefinitionSignature = this.settings.canCallDefinitionSignature;\n\n            this.errorReporter.checker = this.typeChecker;\n            this.setErrorOutput(this.errorOutput);\n        }\n\n        public setErrorOutput(outerr) {\n            this.errorOutput = outerr;\n            this.errorReporter.setErrOut(outerr);\n            this.parser.outfile = outerr;\n        }\n\n        public emitCommentsToOutput() {\n            this.emitSettings = new EmitOptions(this.settings);\n        }\n\n        public setErrorCallback(fn: (minChar: number, charLen: number, message: string,\n            unitIndex: number) =>void ) {\n            this.parser.errorCallback = fn;\n        }\n\n        public updateUnit(prog: string, filename: string, setRecovery: bool) {\n            return this.updateSourceUnit(new StringSourceText(prog), filename, setRecovery);\n        }\n\n        public updateSourceUnit(sourceText: ISourceText, filename: string, setRecovery: bool): bool {\n            return this.timeFunction("updateSourceUnit(" + filename + ")", () => {\n                var updateResult = this.partialUpdateUnit(sourceText, filename, setRecovery);\n                return this.applyUpdateResult(updateResult);\n            });\n        }\n\n        // Apply changes to compiler state.\n        // Return "false" if the change is empty and nothing was updated.\n        public applyUpdateResult(updateResult: UpdateUnitResult): bool {\n            switch (updateResult.kind) {\n                case UpdateUnitKind.NoEdits:\n                    return false;\n\n                case UpdateUnitKind.Unknown:\n                    this.scripts.members[updateResult.unitIndex] = updateResult.script2;\n                    this.units[updateResult.unitIndex] = updateResult.script2.locationInfo;\n                    for (var i = 0, len = updateResult.parseErrors.length; i < len; i++) {\n                        var e = updateResult.parseErrors[i];\n                        if (this.parser.errorCallback) {\n                            this.parser.errorCallback(e.minChar, e.limChar - e.minChar, e.message, e.unitIndex);\n                        }\n                    }\n                    return true;\n\n                case UpdateUnitKind.EditsInsideSingleScope:\n                    new IncrementalParser(this.logger).mergeTrees(updateResult);\n                    return true;\n            }\n        }\n\n        public partialUpdateUnit(sourceText: ISourceText, filename: string, setRecovery:';
var v27124 = v27125 + ' bool): UpdateUnitResult {\n            return this.timeFunction("partialUpdateUnit(" + filename + ")", () => {\n                for (var i = 0, len = this.units.length; i < len; i++) {\n                    if (this.units[i].filename == filename) {\n                        if ((<Script>this.scripts.members[i]).isResident) {\n                            return UpdateUnitResult.noEdits(i);\n                        }\n\n                        if (setRecovery) {\n                            this.parser.setErrorRecovery(null);\n                        }\n\n                        var updateResult: UpdateUnitResult;\n\n                        // Capture parsing errors so that they are part of "updateResult"\n                        var parseErrors: ErrorEntry[] = [];\n                        var errorCapture = (minChar: number, charLen: number, message: string, unitIndex: number): void => {\n                            parseErrors.push(new ErrorEntry(unitIndex, minChar, minChar + charLen, message));\n                        };\n                        var svErrorCallback = this.parser.errorCallback;\n                        if (svErrorCallback)\n                            this.parser.errorCallback = errorCapture;\n\n                        var oldScript = <Script>this.scripts.members[i];\n                        var newScript = this.parser.parse(sourceText, filename, i);\n\n                        if (svErrorCallback)\n                            this.parser.errorCallback = svErrorCallback;\n\n                        updateResult = UpdateUnitResult.unknownEdits(oldScript, newScript, parseErrors);\n\n                        return updateResult;\n                    }\n                }\n                throw new Error("Unknown file \\"" + filename + "\\"");\n            });\n        }\n\n        public addUnit(prog: string, filename: string, keepResident? = false, referencedFiles?: IFileReference[] = []): Script {\n            return this.addSourceUnit(new StringSourceText(prog), filename, keepResident, referencedFiles);\n        }\n\n        public addSourceUnit(sourceText: ISourceText, filename: string, keepResident:bool, referencedFiles?: IFileReference[] = []): Script {\n            return this.timeFunction("addSourceUnit(" + filename + ", " + keepResident + ")", () => {\n                var script: Script = this.parser.parse(sourceText, filename, this.units.length, AllowedElements.Global);\n                script.referencedFiles = referencedFiles;\n                script.isResident = keepResident;\n                this.persistentTypeState.setCollectionMode(keepResident ? TypeCheckCollectionMode.Resident : TypeCheckCollectionMode.Transient);\n                var index = this.units.length;\n                this.units[index] = script.locationInfo;\n                this.typeChecker.collectTypes(script);\n                this.scripts.append(script);\n                return script\n            });\n        }\n\n        public parseUnit(prog: string, filename: string) {\n            return this.parseSourceUnit(new StringSourceText(prog), filename);\n        }\n\n        public parseSourceUnit(sourceText: ISourceText, filename: string) {\n            this.parser.setErrorRecovery(this.errorOutput);\n            var script: Script = this.parser.parse(sourceText, filename, 0);\n\n            var index = this.units.length;\n            this.units[index] = script.locationInfo;\n            this.typeChecker.collectTypes(script);\n            this.scripts.append(script);\n        }\n\n        public typeCheck() {\n            return this.timeFunction("typeCheck()", () => {\n                var binder = new Binder(this.typeChecker);\n                this.typeChecker.units = this.units;\n                binder.bind(this.typeChecker.globalScope, this.typeChecker.globals);\n                binder.bind(this.typeChecker.globalScope, this.typeChecker.ambientGlobals);\n                binder.bind(this.typeChecker.globalScope, this.typeChecker.globalTypes);\n                binder.bind(this.typeChecker.globalScope, this.typeChecker.ambientGlobalTypes);\n                this.typeFlow = new TypeFlow(this.logger, this.typeChecker.globalScope, this.parser, this.typeChecker);\n                var i = 0;\n                var script: Script = null;\n                var len = this.scripts.members.length;\n\n\n                this.persistentTypeState.setCollectionMode(TypeCheckCollectionMode.Resident);\n                // first, typecheck resident "lib" scripts, if necessary\n                for (i = 0; i < len; i++) {\n                    script = <Script>this.scripts.members[i];\n                    if (!script.isResident || script.hasBeenTypeChecked) { continue; }\n\n                    this.typeFlow.assignScopes(script);\n                    this.typeFlow.initLibs();\n                }\n                for (i = 0; i < len; i++) {\n                    script = <Script>this.scripts.members[i];\n                    if (!script.isResident || script.hasBeenTypeChecked) { continue; }\n\n                    this.typeFlow.typeCheck(script);';
var v27123 = v27124 + '\n                    script.hasBeenTypeChecked = true;\n                }\n\n                // next typecheck scripts that may change\n                this.persistentTypeState.setCollectionMode(TypeCheckCollectionMode.Transient);\n                len = this.scripts.members.length;\n                for (i = 0; i < len; i++) {\n                    script = <Script>this.scripts.members[i];\n                    if (script.isResident) { continue; }\n                    this.typeFlow.assignScopes(script);\n                    this.typeFlow.initLibs();\n                }\n                for (i = 0; i < len; i++) {\n                    script = <Script>this.scripts.members[i];\n                    if (script.isResident) { continue; }\n                    this.typeFlow.typeCheck(script);\n                }\n\n                return null;\n            });\n        }\n\n        public cleanASTTypesForReTypeCheck(ast: AST) {\n            function cleanASTType(ast: AST, parent: AST): AST {\n                ast.type = null;\n                if (ast.nodeType == NodeType.VarDecl) {\n                    var vardecl = <VarDecl>ast;\n                    vardecl.sym = null;\n                }\n                else if (ast.nodeType == NodeType.ArgDecl) {\n                    var argdecl = <ArgDecl>ast;\n                    argdecl.sym = null;\n                }\n                else if (ast.nodeType == NodeType.Name) {\n                    var name = <Identifier>ast;\n                    name.sym = null;\n                }\n                else if (ast.nodeType == NodeType.FuncDecl) {\n                    var funcdecl = <FuncDecl>ast;\n                    funcdecl.signature = null;\n                    funcdecl.freeVariables = new Symbol[]\n                    funcdecl.symbols = null;\n                    funcdecl.accessorSymbol = null;\n                    funcdecl.scopeType = null;\n                }\n                else if (ast.nodeType == NodeType.ModuleDeclaration) {\n                    var modDecl = <ModuleDeclaration>ast;\n                    modDecl.mod = null;\n                }\n                else if (ast.nodeType == NodeType.With) {\n                    (<WithStatement>ast).withSym = null;\n                }\n                else if (ast.nodeType == NodeType.Catch) {\n                    (<Catch>ast).containedScope = null;\n                }\n                return ast;\n            }\n            TypeScript.getAstWalkerFactory().walk(ast, cleanASTType);\n        }\n\n        public cleanTypesForReTypeCheck() {\n            return this.timeFunction("cleanTypesForReTypeCheck()", () => {\n                for (var i = 0, len = this.scripts.members.length; i < len; i++) {\n                    var script = this.scripts.members[i];\n                    if ((<Script>script).isResident) {\n                        continue;\n                    }\n                    this.cleanASTTypesForReTypeCheck(script);\n                    this.typeChecker.collectTypes(script);\n                }\n\n                return null;\n            });\n        }\n\n        // Return "true" if the incremental typecheck was successful\n        // Return "false" if incremental typecheck failed, requiring a full typecheck\n        public attemptIncrementalTypeCheck(updateResult: TypeScript.UpdateUnitResult): bool {\n            return this.timeFunction("attemptIncrementalTypeCheck()", () => {\n                // updateResult.kind == editsInsideFunction\n                // updateResult.scope1 == old function\n                // updateResult.scope2 == new function\n                //REVIEW: What about typecheck errors? How do we replace the old ones with the new ones?\n                return false;\n            });\n        }\n\n        public reTypeCheck() {\n            return this.timeFunction("reTypeCheck()", () => {\n                CompilerDiagnostics.analysisPass++;\n                this.initTypeChecker(this.errorOutput);\n                this.persistentTypeState.setCollectionMode(TypeCheckCollectionMode.Transient);\n                this.cleanTypesForReTypeCheck();\n                return this.typeCheck();\n            });\n        }\n\n        private isDynamicModuleCompilation() {\n            for (var i = 0, len = this.scripts.members.length; i < len; i++) {\n                var script = <Script>this.scripts.members[i];\n                if (!script.isDeclareFile && script.topLevelMod != null) {\n                    return true;\n                }\n            }\n            return false;\n        }\n\n        private updateCommonDirectoryPath() {\n            var commonComponents: string[] = [];\n            var commonComponentsLength = -1;\n            for (var i = 0, len = this.scripts.members.length; i < len; i++) {\n                var script = <Script>this.scripts.members[i];\n                if (script.emitRequired(this.emitSettings)) {\n                    var fileName = script.locationInfo.filename;\n                    var fileComponents = filePathComponents(fileName);\n                    if (commonComponentsLength == -1) {\n            ';
var v27122 = v27123 + '            // First time at finding common path\n                        // So common path = directory of file\n                        commonComponents = fileComponents;\n                        commonComponentsLength = commonComponents.length;\n                    } else {\n                        var updatedPath = false;\n                        for (var j = 0; j < commonComponentsLength && j < fileComponents.length; j++) {\n                            if (commonComponents[j] != fileComponents[j]) {\n                                // The new components = 0 ... j -1\n                                commonComponentsLength = j;\n                                updatedPath = true;\n\n                                if (j == 0) {\n                                    // Its error to not have common path\n                                    this.errorReporter.emitterError(null, "Cannot find the common subdirectory path for the input files");\n                                    return;\n                                }\n\n                                break;\n                            }\n                        }\n\n                        // If the fileComponent path completely matched and less than already found update the length\n                        if (!updatedPath && fileComponents.length < commonComponentsLength) {\n                            commonComponentsLength = fileComponents.length;\n                        }\n                    }\n                }\n            }\n\n            this.emitSettings.commonDirectoryPath = commonComponents.slice(0, commonComponentsLength).join("/") + "/";\n            if (this.emitSettings.outputOption.charAt(this.emitSettings.outputOption.length - 1) != "/") {\n                this.emitSettings.outputOption += "/";\n            }\n        }\n\n        public parseEmitOption(ioHost: EmitterIOHost) {\n            this.emitSettings.ioHost = ioHost;\n            if (this.emitSettings.outputOption == "") {\n                this.emitSettings.outputMany = true;\n                this.emitSettings.commonDirectoryPath = "";\n                return;\n            }\n\n            this.emitSettings.outputOption = switchToForwardSlashes(this.emitSettings.ioHost.resolvePath(this.emitSettings.outputOption));\n\n            // Determine if output options is directory or file\n            if (this.emitSettings.ioHost.directoryExists(this.emitSettings.outputOption)) {\n                // Existing directory\n                this.emitSettings.outputMany = true;\n            } else if (this.emitSettings.ioHost.fileExists(this.emitSettings.outputOption)) {\n                // Existing file\n                this.emitSettings.outputMany = false;\n            }\n            else {\n                // New File/directory\n                this.emitSettings.outputMany = !isJSFile(this.emitSettings.outputOption);\n            }\n\n            // Verify if options are correct\n            if (this.isDynamicModuleCompilation() && !this.emitSettings.outputMany) {\n                this.errorReporter.emitterError(null, "Cannot compile dynamic modules when emitting into single file");\n            }\n\n            // Parse the directory structure\n            if (this.emitSettings.outputMany) {\n                this.updateCommonDirectoryPath();\n            }\n        }\n\n        public useUTF8ForFile(script: Script) {\n            if (this.emitSettings.outputMany) {\n                return this.outputScriptToUTF8(script);\n            } else {\n                return this.outputScriptsToUTF8(<Script[]>(this.scripts.members));\n            }\n        }\n\n        static mapToDTSFileName(fileName: string, wholeFileNameReplaced: bool) {\n            return getDeclareFilePath(fileName);\n        }\n\n        private canEmitDeclarations(script?: Script) {\n            if (!this.settings.generateDeclarationFiles) {\n                return false;\n            }\n\n            // If its already a declare file or is resident or does not contain body \n            if (!!script && (script.isDeclareFile || script.isResident || script.bod == null)) {\n                return false;\n            }\n\n            return true;\n        }\n\n        public emitDeclarationsUnit(script: Script, reuseEmitter?: bool, declarationEmitter?: DeclarationEmitter) {\n            if (!this.canEmitDeclarations(script)) {\n                return null;\n            }\n\n            if (!declarationEmitter) {\n                var declareFileName = this.emitSettings.mapOutputFileName(script.locationInfo.filename, TypeScriptCompiler.mapToDTSFileName);\n                var declareFile = this.createFile(declareFileName, this.useUTF8ForFile(script));\n                declarationEmitter = new DeclarationEmitter(this.typeChecker, this.emitSettings, this.errorReporter);\n                declarationEmitter.setDeclarationFile(declareFile);\n            }\n\n            declarationEmitter.emitDeclarations(script);\n\n            if (!reuseEmitter) {\n                declarationEmitter.Close();\n                return null;\n            } else {';
var v27121 = v27122 + '\n                return declarationEmitter;\n            }\n        }\n\n        public emitDeclarations() {\n            if (!this.canEmitDeclarations()) {\n                return;\n            }\n\n            if (this.errorReporter.hasErrors) {\n                // There were errors reported, do not generate declaration file\n                return;\n            }\n\n            if (this.scripts.members.length == 0) {\n                return;\n            }\n\n            var declarationEmitter: DeclarationEmitter = null;\n            for (var i = 0, len = this.scripts.members.length; i < len; i++) {\n                var script = <Script>this.scripts.members[i];\n                if (this.emitSettings.outputMany || declarationEmitter == null) {\n                    // Create or reuse file\n                    declarationEmitter = this.emitDeclarationsUnit(script, !this.emitSettings.outputMany);\n                } else {\n                    // Emit in existing emitter\n                    this.emitDeclarationsUnit(script, true, declarationEmitter);\n                }\n            }\n\n            if (declarationEmitter) {\n                declarationEmitter.Close();\n            }\n        }\n\n        static mapToFileNameExtension(extension: string, fileName: string, wholeFileNameReplaced: bool) {\n            if (wholeFileNameReplaced) {\n                // The complete output is redirected in this file so do not change extension\n                return fileName;\n            } else {\n                // Change the extension of the file\n                var splitFname = fileName.split(".");\n                splitFname.pop();\n                return splitFname.join(".") + extension;\n            }\n        }\n\n        static mapToJSFileName(fileName: string, wholeFileNameReplaced: bool) {\n            return TypeScriptCompiler.mapToFileNameExtension(".js", fileName, wholeFileNameReplaced);\n        }\n\n        public emitUnit(script: Script, reuseEmitter?: bool, emitter?: Emitter) {\n            if (!script.emitRequired(this.emitSettings)) {\n                return null;\n            }\n\n            var fname = script.locationInfo.filename;\n            if (!emitter) {\n                var outFname = this.emitSettings.mapOutputFileName(fname, TypeScriptCompiler.mapToJSFileName);\n                var outFile = this.createFile(outFname, this.useUTF8ForFile(script));\n                emitter = new Emitter(this.typeChecker, outFname, outFile, this.emitSettings, this.errorReporter);\n                if (this.settings.mapSourceFiles) {\n                    emitter.setSourceMappings(new TypeScript.SourceMapper(fname, outFname, outFile, this.createFile(outFname + SourceMapper.MapFileExtension, false), this.errorReporter));\n                }\n            } else if (this.settings.mapSourceFiles) {\n                emitter.setSourceMappings(new TypeScript.SourceMapper(fname, emitter.emittingFileName, emitter.outfile, emitter.sourceMapper.sourceMapOut, this.errorReporter));\n            }\n\n            this.typeChecker.locationInfo = script.locationInfo;\n            emitter.emitJavascript(script, TokenID.Comma, false);\n            if (!reuseEmitter) {\n                emitter.Close();\n                return null;\n            } else {\n                return emitter;\n            }\n        }\n\n        public emit(ioHost: EmitterIOHost) {\n            this.parseEmitOption(ioHost);\n\n            var emitter: Emitter = null;\n            for (var i = 0, len = this.scripts.members.length; i < len; i++) {\n                var script = <Script>this.scripts.members[i];\n                if (this.emitSettings.outputMany || emitter == null) {\n                    emitter = this.emitUnit(script, !this.emitSettings.outputMany);\n                } else {\n                    this.emitUnit(script, true, emitter);\n                }\n            }\n\n            if (emitter) {\n                emitter.Close();\n            }\n        }\n\n        public emitToOutfile(outputFile: ITextWriter) {\n            if (this.settings.mapSourceFiles) {\n                throw Error("Cannot generate source map");\n            }\n\n            if (this.settings.generateDeclarationFiles) {\n                throw Error("Cannot generate declaration files");\n            }\n\n            if (this.settings.outputOption != "") {\n                throw Error("Cannot parse output option");\n            }\n\n            var emitter: Emitter = emitter = new Emitter(this.typeChecker, "stdout", outputFile, this.emitSettings, this.errorReporter);;\n            for (var i = 0, len = this.scripts.members.length; i < len; i++) {\n                var script = <Script>this.scripts.members[i];\n                this.typeChecker.locationInfo = script.locationInfo;\n                emitter.emitJavascript(script, TokenID.Comma, false);\n            }\n        }\n\n        public emitAST(ioHost: EmitterIOHost) {\n            this.parseEmitOption(ioHost);\n\n            var outFile: ITextWriter = null;\n            var context: PrintContext = null;\n\n            for (var i = 0, ';
var v27120 = v27121 + 'len = this.scripts.members.length; i < len; i++) {\n                var script = <Script>this.scripts.members[i];\n                if (this.emitSettings.outputMany || context == null) {\n                    var fname = this.units[i].filename;\n                    var mapToTxtFileName = (fileName: string, wholeFileNameReplaced: bool) => {\n                        return TypeScriptCompiler.mapToFileNameExtension(".txt", fileName, wholeFileNameReplaced);\n                    };\n                    var outFname = this.emitSettings.mapOutputFileName(fname, mapToTxtFileName);\n                    outFile = this.createFile(outFname, this.useUTF8ForFile(script));\n                    context = new PrintContext(outFile, this.parser);\n                }\n                getAstWalkerFactory().walk(script, prePrintAST, postPrintAST, null, context);\n                if (this.emitSettings.outputMany) {\n                    try {\n                        outFile.Close();\n                    } catch (e) {\n                        this.errorReporter.emitterError(null, e.message);\n                    }\n                }\n            }\n\n            if (!this.emitSettings.outputMany) {\n                try {\n                    outFile.Close();\n                } catch (e) {\n                    this.errorReporter.emitterError(null, e.message);\n                }\n            }\n        }\n\n        private outputScriptToUTF8(script: Script): bool {\n            return script.containsUnicodeChar || (this.emitSettings.emitComments && script.containsUnicodeCharInComment);\n        }\n\n        private outputScriptsToUTF8(scripts: Script[]): bool {\n            for (var i = 0, len = scripts.length; i < len; i++) {\n                var script = scripts[i];\n                if (this.outputScriptToUTF8(script)) {\n                    return true;\n                }\n            }\n            return false;\n        }\n\n        private createFile(fileName: string, useUTF8: bool): ITextWriter {\n            try {\n                // Creating files can cause exceptions, report them.   \n                return this.emitSettings.ioHost.createFile(fileName, useUTF8);\n            } catch (ex) {\n                this.errorReporter.emitterError(null, ex.message);\n            }\n        }\n    }\n\n    export class ScopeEntry {\n        constructor (\n            public name: string,\n            public type: string,\n            public sym: Symbol) {\n        }\n    }\n\n    export class ScopeTraversal {\n        constructor (private compiler: TypeScriptCompiler) {\n        }\n\n        public getScope(enclosingScopeContext: EnclosingScopeContext): SymbolScope {\n            if (enclosingScopeContext.enclosingObjectLit && enclosingScopeContext.isMemberCompletion) {\n                return enclosingScopeContext.getObjectLiteralScope();\n            }\n            else if (enclosingScopeContext.isMemberCompletion) {\n                if (enclosingScopeContext.useFullAst) {\n                    return this.compiler.typeFlow.findMemberScopeAtFullAst(enclosingScopeContext)\n                }\n                else {\n                    return this.compiler.typeFlow.findMemberScopeAt(enclosingScopeContext)\n                }\n            }\n            else {\n                return enclosingScopeContext.getScope();\n            }\n        }\n\n        public getScopeEntries(enclosingScopeContext: EnclosingScopeContext): ScopeEntry[] {\n            var scope = this.getScope(enclosingScopeContext);\n            if (scope == null) {\n                return [];\n            }\n\n            var inScopeNames: IHashTable = new StringHashTable();\n            var allSymbolNames: string[] = scope.getAllSymbolNames(enclosingScopeContext.isMemberCompletion);\n\n            // there may be duplicates between the type and value tables, so batch the symbols\n            // getTypeNamesForNames will prefer the entry in the value table\n            for (var i = 0; i < allSymbolNames.length; i++) {\n                var name = allSymbolNames[i];\n\n                // Skip global/internal symbols that won\'t compile in user code\n                if (name == globalId || name == "_Core" || name == "_element") {\n                    continue;\n                }\n\n                inScopeNames.add(name, "");\n            }\n\n            var svModuleDecl = this.compiler.typeChecker.currentModDecl;\n            this.compiler.typeChecker.currentModDecl = enclosingScopeContext.deepestModuleDecl;\n\n            var result = this.getTypeNamesForNames(enclosingScopeContext, inScopeNames.getAllKeys(), scope);\n\n            this.compiler.typeChecker.currentModDecl = svModuleDecl;\n            return result;\n        }\n\n        private getTypeNamesForNames(enclosingScopeContext: EnclosingScopeContext, allNames: string[], scope: SymbolScope): ScopeEntry[] {\n            var result: ScopeEntry[] = [];\n\n            var enclosingScope = enclosingScopeContext.getScope();\n            for (var i = 0; i < allNames.length; i++) {\n                var name = allNames[i];\n                //';
var v27119 = v27120 + ' Search for the id in the value space first\n                // if we don\'t find it, search in the type space.\n                // We don\'t want to search twice, because the first\n                // search may insert the name in the symbol value table\n                // if the scope is aggregate\n                var publicsOnly = enclosingScopeContext.publicsOnly && enclosingScopeContext.isMemberCompletion;\n                var symbol = scope.find(name, publicsOnly, false/*typespace*/);  // REVIEW: Should search public members only?\n                if (symbol == null) {\n                    symbol = scope.find(name, publicsOnly, true/*typespace*/);\n                }\n\n                var displayThisMember = symbol && symbol.flags & SymbolFlags.Private ? symbol.container == scope.container : true;\n\n                if (symbol) {\n                    // Do not add dynamic module names to the list, since they\'re not legal as identifiers\n                    if (displayThisMember && !isQuoted(symbol.name) && !isRelative(symbol.name)) {\n                        var typeName = symbol.getType().getScopedTypeName(enclosingScope);\n                        result.push(new ScopeEntry(name, typeName, symbol));\n                    }\n                }\n                else {\n                    // Special case for "true" and "false"\n                    // REVIEW: This may no longer be necessary?\n                    if (name == "true" || name == "false") {\n                        result.push(new ScopeEntry(name, "bool", this.compiler.typeChecker.booleanType.symbol));\n                    }\n                }\n            }\n\n            return result;\n        }\n    }\n}\n//\n// Copyright (c) Microsoft Corporation.  All rights reserved.\n// \n// Licensed under the Apache License, Version 2.0 (the "License");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an "AS IS" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n\n///<reference path=\'typescript.ts\' />\n\nmodule TypeScript {\n\n    export enum Primitive {\n        None = 0,\n        Void = 1,\n        Double = 2,\n        String = 4,\n        Boolean = 8,\n        Any = 16,\n        Null = 32,\n        Undefined = 64,\n    }\n\n    export class MemberName {\n        public prefix: string = "";\n        public suffix: string = "";\n\n        public isString() { return false; }\n        public isArray() { return false; }\n\n        public toString(): string {\n            return MemberName.memberNameToString(this);\n        }\n\n        static memberNameToString(memberName: MemberName): string {\n            var result = memberName.prefix;\n\n            if (memberName.isString()) {\n                result += (<MemberNameString>memberName).text;\n            }\n            else {\n                var ar = <MemberNameArray>memberName;\n                for (var index = 0; index < ar.entries.length; index++) {\n                    result += memberNameToString(ar.entries[index]);\n                    result += ar.delim;\n                }\n            }\n\n            result += memberName.suffix;\n            return result;\n        }\n\n        static create(text: string): MemberName;\n        static create(entry: MemberName, prefix: string, suffix: string): MemberName;\n        static create(arg1: any, arg2?: any, arg3?: any): MemberName {\n            if (typeof arg1 == "string") {\n                return new MemberNameString(arg1);\n            }\n            else {\n                var result = new MemberNameArray();\n                if (arg2)\n                    result.prefix = arg2;\n                if (arg3)\n                    result.suffix = arg3;\n                result.entries.push(arg1);\n                return result;\n            }\n        }\n    }\n\n    export class MemberNameString extends MemberName {\n        constructor (public text: string) {\n            super()\n        }\n\n        public isString() { return true; }\n    }\n\n    export class MemberNameArray extends MemberName {\n        public delim: string = "";\n        public entries: MemberName[] = [];\n\n        public isArray() { return true; }\n\n        public add(entry: MemberName) {\n            this.entries.push(entry);\n        }\n\n        public addAll(entries: MemberName[]) {\n            for (var i = 0 ; i < entries.length; i++) {\n                this.entries.push(entries[i]);\n            }\n        }\n    }\n\n    var currentTypeID = -1;\n\n    export class Type {\n        public typeID = currentTypeID++;\n\n        public members: ScopedMembers;\n        public ambientMembers: ScopedMembers;\n\n        public construct: SignatureGroup = null;\n        public call: SignatureGroup = null;\n        public index: SignatureGroup =';
var v27118 = v27119 + ' null;\n\n        // REVIEW: for either of the below, why do we have lists of types and lists of type links?\n        // interface can only extend\n        public extendsList: Type[];\n        public extendsTypeLinks: TypeLink[];\n\n        // class can also implement\n        public implementsList: Type[];\n        public implementsTypeLinks: TypeLink[];\n\n        public passTypeCreated: number = CompilerDiagnostics.analysisPass;\n\n        public baseClass(): Type {\n            if (this.extendsList && (this.extendsList.length > 0)) {\n                return this.extendsList[0];\n            }\n            else {\n                return null;\n            }\n        }\n\n        public elementType: Type;\n\n        public getArrayBase(arrInstType: Type, checker: TypeChecker): Type {\n            return this.arrayCache.specialize(arrInstType, checker);\n        }\n\n        public primitiveTypeClass: number = Primitive.None;\n\n        // REVIEW: Prune constructorScope\n        public constructorScope: SymbolScope;\n        public containedScope: SymbolScope;\n        public memberScope: SymbolScope;\n\n        public arrayCache: ArrayCache;\n\n        public typeFlags = TypeFlags.None;\n\n        public symbol: TypeSymbol;\n\n        public enclosingType: Type;\n        public instanceType: Type;\n\n        // REVIEW: Prune\n        public isClass() { return this.instanceType != null; }\n        public isArray() { return this.elementType != null; }\n        public isClassInstance() {\n            return this.symbol && !this.elementType && (<TypeSymbol>this.symbol).type.isClass();\n        }\n\n        public getInstanceType() {\n            if (this.isClass()) {\n                return this.instanceType;\n            }\n            else {\n                return this;\n            }\n        }\n\n        public hasImplementation() { return hasFlag(this.typeFlags, TypeFlags.HasImplementation); }\n        public setHasImplementation() { this.typeFlags |= TypeFlags.HasImplementation; }\n\n        public isDouble() { return hasFlag(this.primitiveTypeClass, Primitive.Double); }\n        public isString() { return hasFlag(this.primitiveTypeClass, Primitive.String); }\n        public isBoolean() { return hasFlag(this.primitiveTypeClass, Primitive.Boolean); }\n        public isNull() { return hasFlag(this.primitiveTypeClass, Primitive.Null); }\n\n        // REVIEW: No need for this to be a method\n        public getTypeName(): string {\n            return this.getMemberTypeName("", true, false, null);\n        }\n\n        public getScopedTypeName(scope: SymbolScope) {\n            return this.getMemberTypeName("", true, false, scope);\n        }\n\n        public getScopedTypeNameEx(scope: SymbolScope) {\n            return this.getMemberTypeNameEx("", true, false, scope);\n        }\n\n        // REVIEW: No need for this to be a method\n        public callCount() {\n            var total = 0;\n            if (this.call) {\n                total += this.call.signatures.length;\n            }\n            if (this.construct) {\n                total += this.construct.signatures.length;\n            }\n            if (this.index) {\n                total += this.index.signatures.length;\n            }\n            return total;\n        }\n\n        // REVIEW: No need for this to be a method\n        public getMemberTypeName(prefix: string, topLevel: bool, isElementType: bool, scope: SymbolScope): string {\n            var memberName = this.getMemberTypeNameEx(prefix, topLevel, isElementType, scope);\n            return memberName.toString();\n        }\n\n        // REVIEW: No need for this to be a method\n        public getMemberTypeNameEx(prefix: string, topLevel: bool, isElementType: bool, scope: SymbolScope): MemberName {\n            if (this.elementType) {\n                return MemberName.create(this.elementType.getMemberTypeNameEx(prefix, false, true, scope), "", "[]");\n            }\n            else if (this.symbol && this.symbol.name && this.symbol.name != "_anonymous" &&\n                     (((this.call == null) && (this.construct == null) && (this.index == null)) ||\n                      (hasFlag(this.typeFlags, TypeFlags.BuildingName)) ||\n                      (this.members && (!this.isClass())))) {\n                var tn = this.symbol.scopeRelativeName(scope);\n                return MemberName.create(tn == "null" ? "any" : tn); // REVIEW: GROSS!!!\n            }\n            else {\n                if (this.members || this.call || this.construct) {\n                    if (hasFlag(this.typeFlags, TypeFlags.BuildingName)) {\n                        return MemberName.create("this");\n                    }\n                    this.typeFlags |= TypeFlags.BuildingName;\n                    var builder = "";\n                    var allMemberNames = new MemberNameArray();\n                    var curlies = isElementType || this.index != null;\n                    var memCount = 0;\n                    var delim = "; ";\n                    if (this.members) {\n                        this.members.allMembers.map((key, ';
var v27117 = v27118 + 's, unused) => {\n                            var sym = <Symbol>s;\n                            if (!hasFlag(sym.flags, SymbolFlags.BuiltIn)) {\n                                // Remove the delimiter character from the generated type name, since\n                                // our "allMemberNames" array takes care of storing delimiters\n                                var typeNameMember = sym.getTypeNameEx(scope);\n                                if (typeNameMember.isArray() && (<MemberNameArray>typeNameMember).delim == delim) {\n                                    allMemberNames.addAll((<MemberNameArray>typeNameMember).entries);\n                                } else {\n                                    allMemberNames.add(typeNameMember);\n                                }\n                                memCount++;\n                                curlies = true;\n                            }\n                        }, null);\n                    }\n\n                    var signatureCount = this.callCount();\n                    var j: number;\n                    var len = 0;\n                    var shortform = !curlies && signatureCount == 1 && topLevel;\n                    if (this.call) {\n                        allMemberNames.addAll(this.call.toStrings(prefix, shortform, scope));\n                    }\n\n                    if (this.construct) {\n                        allMemberNames.addAll(this.construct.toStrings("new", shortform, scope));\n                    }\n\n                    if (this.index) {\n                        allMemberNames.addAll(this.index.toStrings("", shortform, scope));\n                    }\n\n                    if ((curlies) || ((signatureCount > 1) && topLevel)) {\n                        allMemberNames.prefix = "{ ";\n                        allMemberNames.suffix = "}";\n                        allMemberNames.delim = delim;\n                    } else if (allMemberNames.entries.length > 1) {\n                        allMemberNames.delim = delim;\n                    }\n\n                    this.typeFlags &= (~TypeFlags.BuildingName);\n                    if ((signatureCount == 0) && (memCount == 0)) {\n                        return MemberName.create("{}");\n                    }\n                    else {\n                        return allMemberNames;\n                    }\n                }\n                else {\n                    return MemberName.create("{}");\n                }\n            }\n        }\n\n        public checkDecl(checker: TypeChecker) {\n            if (this.isClassInstance() || this.isClass()) {\n                if (this.symbol.declAST) {\n                    checker.typeFlow.inScopeTypeCheckDecl(this.symbol.declAST);\n                }\n            }\n        }\n\n        public getMemberScope(flow: TypeFlow) {\n            if (this == flow.anyType) {\n                return null;\n            }\n            else if (this.isDouble()) {\n                if (flow.numberInterfaceType) {\n                    return flow.numberInterfaceType.memberScope;\n                }\n                else {\n                    return null;\n                }\n            }\n            else if (this.isBoolean()) {\n                if (flow.booleanInterfaceType) {\n                    return flow.booleanInterfaceType.memberScope;\n                }\n                else {\n                    return null;\n                }\n            }\n            else if (this == flow.stringType) {\n                if (flow.stringInterfaceType) {\n                    return flow.stringInterfaceType.memberScope;\n                }\n                else {\n                    return null;\n                }\n            }\n            else if (this.elementType) {\n                if (flow.arrayInterfaceType) {\n                    var arrInstType = this.elementType.getArrayBase(flow.arrayInterfaceType, flow.checker);\n                    return arrInstType.memberScope;\n                }\n                else {\n                    return null;\n                }\n            }\n            else {\n                return this.memberScope;\n            }\n        }\n\n        public isReferenceType() {\n            return this.members || this.extendsList ||\n                this.construct || this.call || this.index ||\n                this.elementType;\n        }\n\n        public specializeType(pattern: Type, replacement: Type, checker: TypeChecker, membersOnly: bool): Type {\n            if (pattern == this) {\n                return replacement;\n            }\n            var result = this;\n            if (membersOnly) {\n                // assume interface type without bases\n                if (this.isReferenceType()) {\n                    result = new Type();\n                    if (this.members) {\n                        result.members = new ScopedMembers(new DualStringHashTable(new StringHashTable(), new StringHashTable()));\n\n                        this.members.publicMembers.map((key, s, unused) => {\n                            var sym = <Symbol>s;\n         ';
var v27116 = v27117 + "                   var bSym = sym.specializeType(pattern, replacement, checker);\n                            result.members.addPublicMember(bSym.name, bSym);\n                        }, null);\n\n                        this.members.privateMembers.map((key, s, unused) => {\n                            var sym = <Symbol>s;\n                            var bSym = sym.specializeType(pattern, replacement, checker);\n                            result.members.addPrivateMember(bSym.name, bSym);\n                        }, null);\n                    }\n                    if (this.ambientMembers) {\n                        result.ambientMembers = new ScopedMembers(new DualStringHashTable(new StringHashTable(), new StringHashTable()));\n                        this.ambientMembers.publicMembers.map((key, s, unused) => {\n                            var sym = <Symbol>s;\n                            var bSym = sym.specializeType(pattern, replacement, checker);\n                            result.ambientMembers.addPublicMember(bSym.name, bSym);\n                        }, null);\n\n                        this.ambientMembers.privateMembers.map((key, s, unused) => {\n                            var sym = <Symbol>s;\n                            var bSym = sym.specializeType(pattern, replacement, checker);\n                            result.ambientMembers.addPrivateMember(bSym.name, bSym);\n                        }, null);\n                    }\n                    result.containedScope = checker.scopeOf(result);\n                    result.memberScope = result.containedScope;\n                }\n            }\n            else {\n                if (this.elementType) {\n                    if (this.elementType == pattern) {\n                        result = checker.makeArrayType(replacement);\n                    }\n                    else {\n                        if (this.elementType.elementType == pattern) {\n                            result = checker.makeArrayType(checker.makeArrayType(replacement));\n                        }\n                    }\n                }\n                else if (this.call) {\n                    result = new Type();\n                    result.call = this.call.specializeType(pattern, replacement, checker);\n                }\n            }\n            return result;\n        }\n\n        public hasBase(baseType: Type): bool {\n            if (baseType == this) {\n                return true;\n            }\n            else {\n                if (this.extendsList) {\n                    for (var i = 0, len = this.extendsList.length; i < len; i++) {\n                        if (this.extendsList[i].hasBase(baseType)) {\n                            return true;\n                        }\n                    }\n                }\n            }\n            return false;\n        }\n\n        public mergeOrdered(b: Type, checker: TypeChecker, acceptVoid: bool, comparisonInfo?: TypeComparisonInfo): Type {\n            if ((this == checker.anyType) || (b == checker.anyType)) {\n                return checker.anyType;\n            }\n            else if (this == b) {\n                return this;\n            }\n            else if ((b == checker.nullType) && this != checker.nullType) {\n                return this;\n            }\n            else if ((this == checker.nullType) && (b != checker.nullType)) {\n                return b;\n            }\n            else if (acceptVoid && (b == checker.voidType) && this != checker.voidType) {\n                return this;\n            }\n            else if (acceptVoid && (this == checker.voidType) && (b != checker.voidType)) {\n                return b;\n            }\n            else if ((b == checker.undefinedType) && this != checker.undefinedType) {\n                return this;\n            }\n            else if ((this == checker.undefinedType) && (b != checker.undefinedType)) {\n                return b;\n            }\n            else if (this.elementType && b.elementType) {\n                if (this.elementType == b.elementType) {\n                    return this;\n                }\n                else {\n                    var mergedET = this.elementType.mergeOrdered(b.elementType, checker, acceptVoid, comparisonInfo);\n                    if (mergedET == null) {\n                        return checker.makeArrayType(checker.anyType);\n                    }\n                    else {\n                        return checker.makeArrayType(mergedET);\n                    }\n                }\n            }\n            else if (checker.sourceIsSubtypeOfTarget(this, b, comparisonInfo)) {\n                return b;\n            }\n            else if (checker.sourceIsSubtypeOfTarget(b, this, comparisonInfo)) {\n                return this;\n            }\n            else {\n                return null;\n            }\n        }\n\n        public isModuleType() { return false; }\n        public hasMembers() { return this.members != null; }\n        public getAllEnclosedTypes(): ScopedMembers { return null; }\n        public getAllAmbientEnc";
var v27115 = v27116 + 'losedTypes(): ScopedMembers { return null; }\n        public getPublicEnclosedTypes(): ScopedMembers { return null; }\n        public getpublicAmbientEnclosedTypes(): ScopedMembers { return null; }\n\n        public getDocComments(): Comment[]{\n            if (this.elementType || !this.symbol) {\n                return [];\n            }\n\n            if (this.isClassInstance() || this.isClass()) {\n                if (this.symbol.declAST.nodeType == NodeType.FuncDecl) {\n                    // Its a constructor - use the class declaration instead\n                    return (<FuncDecl>this.symbol.declAST).classDecl.getDocComments();\n                } else {\n                    // Its a class without constructor\n                    return this.symbol.getDocComments();\n                }\n            }\n\n            if (this.symbol.name && this.symbol.name != "_anonymous" &&\n                (((this.call == null) && (this.construct == null) && (this.index == null))\n                  || this.members)) {\n                return this.symbol.getDocComments();\n            }\n\n            return [];\n        }\n    }\n\n    export interface ITypeCollection {\n        // returns null when types are exhausted\n        getLength(): number;\n        setTypeAtIndex(index: number, type: Type): void;\n        getTypeAtIndex(index: number): Type;\n    }\n\n    export class ModuleType extends Type {\n\n        constructor (public enclosedTypes: ScopedMembers, public ambientEnclosedTypes: ScopedMembers) {\n            super();\n        }\n\n        public isModuleType() { return true; }\n        public hasMembers() { return this.members != null || this.enclosedTypes != null; }\n        public getAllEnclosedTypes() { return this.enclosedTypes; }\n        public getAllAmbientEnclosedTypes() { return this.ambientEnclosedTypes; }\n        public getPublicEnclosedTypes(): ScopedMembers { return null; }\n        public getpublicAmbientEnclosedTypes(): ScopedMembers { return null; }\n        public importedModules: ImportDeclaration[] = [];\n\n        // Finds the dynamic module name of moduleType in the members\n        // ignoreSymbols define list of symbols already visited - to avoid recursion\n        static findDynamicModuleNameInHashTable(moduleType: Type, members: IHashTable) {\n            var moduleName: { name: string; symbol: Symbol; } = null;\n            members.map((key, s, c) => {\n                if (moduleName == null && !isQuoted(key)) {\n                    var symbol = <Symbol>s;\n                    var type = symbol.getType();\n                    if (type == moduleType) {\n                        // If this is the module type we were looking for\n                        moduleName = { name: key, symbol: symbol };\n                    }\n                }\n            }, null);\n\n            return moduleName;\n        }\n\n        // Finds the Dynamic module name of the moduleType in this moduleType\n        // onlyPublic tells if we are looking for module name in public members only\n        public findDynamicModuleName(moduleType: Type): { name: string; symbol: Symbol; } {\n            var moduleName: { name: string; symbol: Symbol; } = null;\n            // Not cached, so seach and add to the cache\n            moduleName = ModuleType.findDynamicModuleNameInHashTable(moduleType, this.members.allMembers);\n            if (moduleName == null) {\n                moduleName = ModuleType.findDynamicModuleNameInHashTable(moduleType, this.ambientMembers.allMembers);\n            }\n            return moduleName;\n        }\n    }\n\n    export class TypeLink {\n        public type: Type = null;\n        public ast: AST = null;\n    }\n\n    export function getTypeLink(ast: AST, checker: TypeChecker, autoVar: bool): TypeLink {\n        var result = new TypeLink();\n\n        result.ast = ast;\n\n        if ((ast == null) && (autoVar)) {\n            result.type = checker.anyType;\n        }\n        else {\n            result.type = null;\n        }\n\n        return result;\n    }\n\n}//\n// Copyright (c) Microsoft Corporation.  All rights reserved.\n// \n// Licensed under the Apache License, Version 2.0 (the "License");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an "AS IS" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n\n///<reference path=\'typescript.ts\' />\n\nmodule Tools {\n    export interface IWalkContext {\n        goChildren: bool;\n        goNextSibling: bool;\n        // visit siblings in reverse execution order\n        reverseSiblings: bool;\n    }\n\n    export class BaseWalkContext implements IWalkContext {\n        public goChildren = true;\n        public goNextSibling = true;\n        public reverseSiblings = false;\n    }\n}';
var compiler_input = v27115;
var TypeScript;
var v18601 = TypeScript;
var v22749 = !v18601;
if (v22749) {
  v18601 = TypeScript = {};
}
var v12343 = v18601;
v48(v12343);
var v18602 = TypeScript;
var v22750 = !v18602;
if (v22750) {
  v18602 = TypeScript = {};
}
var v12344 = v18602;
v49(v12344);
var v18603 = TypeScript;
var v22751 = !v18603;
if (v22751) {
  v18603 = TypeScript = {};
}
var v12345 = v18603;
v78(v12345);
var v12346 = this.__extends;
var v18604 = !v12346;
if (v18604) {
  v12346 = v79;
}
var __extends = v12346;
var v18605 = TypeScript;
var v22752 = !v18605;
if (v22752) {
  v18605 = TypeScript = {};
}
var v12347 = v18605;
v322(v12347);
var v18606 = TypeScript;
var v22753 = !v18606;
if (v22753) {
  v18606 = TypeScript = {};
}
var v12348 = v18606;
v333(v12348);
var v18607 = TypeScript;
var v22754 = !v18607;
if (v22754) {
  v18607 = TypeScript = {};
}
var v12349 = v18607;
v335(v12349);
var v18608 = TypeScript;
var v22755 = !v18608;
if (v22755) {
  v18608 = TypeScript = {};
}
var v12350 = v18608;
v399(v12350);
var v18609 = TypeScript;
var v22756 = !v18609;
if (v22756) {
  v18609 = TypeScript = {};
}
var v12351 = v18609;
v407(v12351);
var v18610 = TypeScript;
var v22757 = !v18610;
if (v22757) {
  v18610 = TypeScript = {};
}
var v12352 = v18610;
v417(v12352);
var v18611 = TypeScript;
var v22758 = !v18611;
if (v22758) {
  v18611 = TypeScript = {};
}
var v12353 = v18611;
v420(v12353);
var JSON2 = {};
v427();
var v18612 = TypeScript;
var v22759 = !v18612;
if (v22759) {
  v18612 = TypeScript = {};
}
var v12354 = v18612;
v433(v12354);
var v18613 = TypeScript;
var v22760 = !v18613;
if (v22760) {
  v18613 = TypeScript = {};
}
var v12355 = v18613;
v492(v12355);
var v18614 = TypeScript;
var v22761 = !v18614;
if (v22761) {
  v18614 = TypeScript = {};
}
var v12356 = v18614;
v519(v12356);
var v18615 = TypeScript;
var v22762 = !v18615;
if (v22762) {
  v18615 = TypeScript = {};
}
var v12357 = v18615;
v592(v12357);
var v18616 = TypeScript;
var v22763 = !v18616;
if (v22763) {
  v18616 = TypeScript = {};
}
var v12358 = v18616;
v599(v12358);
var v18617 = TypeScript;
var v22764 = !v18617;
if (v22764) {
  v18617 = TypeScript = {};
}
var v12359 = v18617;
v675(v12359);
var v18618 = TypeScript;
var v22765 = !v18618;
if (v22765) {
  v18618 = TypeScript = {};
}
var v12360 = v18618;
v680(v12360);
var v18619 = TypeScript;
var v22766 = !v18619;
if (v22766) {
  v18619 = TypeScript = {};
}
var v12361 = v18619;
v698(v12361);
var v18620 = TypeScript;
var v22767 = !v18620;
if (v22767) {
  v18620 = TypeScript = {};
}
var v12362 = v18620;
v711(v12362);
var v18621 = TypeScript;
var v22768 = !v18621;
if (v22768) {
  v18621 = TypeScript = {};
}
var v12363 = v18621;
v794(v12363);
var v18622 = TypeScript;
var v22769 = !v18622;
if (v22769) {
  v18622 = TypeScript = {};
}
var v12364 = v18622;
v862(v12364);
var v18623 = TypeScript;
var v22770 = !v18623;
if (v22770) {
  v18623 = TypeScript = {};
}
var v12365 = v18623;
v892(v12365);
var v18624 = TypeScript;
var v22771 = !v18624;
if (v22771) {
  v18624 = TypeScript = {};
}
var v12366 = v18624;
v964(v12366);
var v18625 = TypeScript;
var v22772 = !v18625;
if (v22772) {
  v18625 = TypeScript = {};
}
var v12367 = v18625;
v967(v12367);
var v18626 = TypeScript;
var v22773 = !v18626;
if (v22773) {
  v18626 = TypeScript = {};
}
var v12368 = v18626;
v1113(v12368);
var v18627 = TypeScript;
var v22774 = !v18627;
if (v22774) {
  v18627 = TypeScript = {};
}
var v12369 = v18627;
v1172(v12369);
var v18628 = TypeScript;
var v22775 = !v18628;
if (v22775) {
  v18628 = TypeScript = {};
}
var v12370 = v18628;
v1173(v12370);
var v18629 = TypeScript;
var v22776 = !v18629;
if (v22776) {
  v18629 = TypeScript = {};
}
var v12371 = v18629;
v1180(v12371);
var v18630 = TypeScript;
var v22777 = !v18630;
if (v22777) {
  v18630 = TypeScript = {};
}
var v12372 = v18630;
v1186(v12372);
var v18631 = TypeScript;
var v22778 = !v18631;
if (v22778) {
  v18631 = TypeScript = {};
}
var v12373 = v18631;
v1195(v12373);
var v18632 = TypeScript;
var v22779 = !v18632;
if (v22779) {
  v18632 = TypeScript = {};
}
var v12374 = v18632;
v1233(v12374);
var v18633 = TypeScript;
var v22780 = !v18633;
if (v22780) {
  v18633 = TypeScript = {};
}
var v12375 = v18633;
v1288(v12375);
var v18634 = TypeScript;
var v22781 = !v18634;
if (v22781) {
  v18634 = TypeScript = {};
}
var v12376 = v18634;
v1311(v12376);
var IOUtils;
var v18635 = IOUtils;
var v22782 = !v18635;
if (v22782) {
  v18635 = IOUtils = {};
}
var v12377 = v18635;
v1312(v12377);
var IO = v1357();
var OptionsParser = v1365();
var CommandLineHost = v1370();
var BatchCompiler = v1409();
var completed = 0;
var benchmarks = BenchmarkSuite.CountBenchmarks();
var success = true;
var latencyBenchmarks = ["Splay", "Mandreel"];
var v12378;
var v22783 = typeof skipBenchmarks;
var v18636 = v22783 === "undefined";
if (v18636) {
  v12378 = [];
} else {
  v12378 = skipBenchmarks;
}
var skipBenchmarks = v12378
